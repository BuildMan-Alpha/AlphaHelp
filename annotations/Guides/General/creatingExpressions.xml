<page>
    <sections>
        <section>
            <title>Expression Syntax</title>
            <description>
                <p>Expressions must follow the following syntax rules:</p>
                <p>
                    <list bullet="true">
                        <item>
                            <name>String literals are enclosed in either single quotes (*[sql:']*) or double quotes (*[sql:"]*). For example: *[sql:'MA']*, *[sql:"Spain"]*.</name>
                        </item>
                        <item>
                            <name>Strings are case sensitive. E.g. *[sql:"value" = "Value"]* evaluates to *[sql:false]*.</name>
                        </item>
                        <item>
                            <name>Logical operators are *[sql:and]*, *[sql:or]*, and *[sql:not]*.</name>
                        </item>
                        <item>
                            <name>True and false values are expressed as *[sql:true]* and *[sql:false]*. Note that these values are not quoted.</name>
                        </item>
                        <item>
                            <name>Use only the functions listed in the *[ui:Insert function]* list or JavaScript functions you have created.</name>
                        </item>
                        <item>
                            <name>Use *[sql:=]* to test for equality. For example: *[sql:dialog.isDirty = false]*</name>
                        </item>
                        <item>
                            <name>Expressions using logical fields must explicitly test the value of the field. For example: *[sql:HasShipped = true]*, *[sql:HasShipped = false]*</name>
                        </item>
                        <item>
                            <name>Session variables can be used in an expression if and only if the session variable has been [published to the client].</name>
                        </item>
                    </list>
                </p>
            </description>
        </section>
        <section>
            <title>Inserting Functions</title>
            <description>
                <p>Functions can be used in the expression. The following built-in functions can be used in an expression:</p>
                <p>
                    <list>
                        <item>
                            <name-title>Function</name-title>
                            <description-title>Description</description-title>
                        </item>
                        <item>
                            <name>alltrim(C character)</name>
                            <description>Trims whitespace from the beginning and end of a string.</description>
                        </item>
                        <item>
                            <name>at(C search_string, C string)</name>
                            <description>Returns the location where *[sql:search_string]* occurs in a string. Does a case-sensitive comparison. If the *[sql:search_string]* is not found, returns -1.</description>
                        </item>
                        <item>
                            <name>at(C search_string, C string)</name>
                            <description>Returns the location where *[sql:search_string]* occurs in a string. Does a case-insensitive comparison. If the *[sql:search_string]* is not found, returns -1.</description>
                        </item>
                        <item>
                            <name>crlf()</name>
                            <description>Inserts a CR-LF (newline) character.</description>
                        </item>
                        <item>
                            <name>f_upper(C character)</name>
                            <description>Capitalizes the first letter of a string.</description>
                        </item>
                        <item>
                            <name>formatNumber(N numeric, C format_string)</name>
                            <description>Converts a number to a formatted string. See [Number toFormat() method] for more information about creating the format.</description>
                        </item>
                        <item>
                            <name>if(L condition, A result_true, A result_false)</name>
                            <description>Tests a logical expression. If the expression evaluates to true, returns *[sql:result_true]*. If the expression evaluates to false, returns *[sql:result_false]*.</description>
                        </item>
                        <item>
                            <name>iif(L condition, A result_true, A result_false)</name>
                            <description>See if().</description>
                        </item>
                        <item>
                            <name>left(C text, N number_of_characters)</name>
                            <description>Returns a substring of a string, starting with the leftmost character.</description>
                        </item>
                        <item>
                            <name>len(C character)</name>
                            <description>Returns the number of characters in a string.</description>
                        </item>
                        <item>
                            <name>lower(C character)</name>
                            <description>Converts a string to lowercase.</description>
                        </item>
                        <item>
                            <name>ltrim(C character [, C characters_to_trim])</name>
                            <description>Removes leading matching characters in a string. Defaults to removing spaces (*[sql:" "]*). You can specify what characters to trim using the second argument. See [ltrim()] for more information.</description>
                        </item>
                        <item>
                            <name>occurs(C searchFor, C searchIn</name>
                            <description>Returns the number of times one string is found in another. Does a case-insensitive comparison.</description>
                        </item>
                        <item>
                            <name>occursi(C searchFor, C searchIn)</name>
                            <description>Returns the number of times one string is found in another. Does a case-sensitive comparison.</description>
                        </item>
                        <item>
                            <name>right(C character, N number_of_characters)</name>
                            <description>Returns a substring of a string, starting with the rightmost character.</description>
                        </item>
                        <item>
                            <name>round(N number, N decimal_places)</name>
                            <description>Rounds a number to a specified number of decimal places.</description>
                        </item>
                        <item>
                            <name>round_down(N number, N decimal_places)</name>
                            <description>Rounds a number down to the specified number of decimal places.</description>
                        </item>
                        <item>
                            <name>round_up(N number, N decimal_places)</name>
                            <description>Rounds a number up to the specified number of decimal places.</description>
                        </item>
                        <item>
                            <name>round_awayFromZero(N number, N decimal_places)</name>
                            <description>Rounds a number to the specified number of decimal places. If the number is greater than zero, the number is rounded up. If the number is less than zero, the number is rounded down.</description>
                        </item>
                        <item>
                            <name>round_towardZero(N number, N decimal_places)</name>
                            <description>Rounds a number to the specified number of decimal places. If the number is greater than zero, the number is rounded down. If the number is less than zero, the number is rounded up.</description>
                        </item>
                        <item>
                            <name>rtrim(C character [, C characters_to_trim])</name>
                            <description>Removes trailing matching characters in a string. Defaults to removing spaces (*[sql:" "]*). You can specify what characters to trim using the second argument. See [rtrim()] for more information.</description>
                        </item>
                        <item>
                            <name>str(N number [, N length [, N decimal_places [, C number_format]]])</name>
                            <description>Converts a number to a string. See [str()] for information about number formats.</description>
                        </item>
                        <item>
                            <name>strtran(C character, C substring, C replacement)</name>
                            <description>Replaces each occurrence of a substring within a string with the specified value. Comparison is case-insensitive.</description>
                        </item>
                        <item>
                            <name>substr(C character, N starting_position [, N number_of_characters])</name>
                            <description>Returns a substring portion of a string.</description>
                        </item>
                        <item>
                            <name>time(C time_format, javascriptDateObject)</name>
                            <description>Converts a JavaScript date object to a string. See [Date toFormat() method] for more information about creating the format.</description>
                        </item>
                        <item>
                            <name>toNumber(C character)</name>
                            <description>Converts a string to a number.</description>
                        </item>
                        <item>
                            <name>upper(C character)</name>
                            <description>Converts a string to uppercase.</description>
                        </item>
                        <item>
                            <name>val(C character)</name>
                            <description>Converts a string to a number. If the string contains leading non-numeric characters, returns 0.</description>
                        </item>
                        <item>
                            <name>w_upper(C character)</name>
                            <description>Capitalizes the first character of each word in a string.</description>
                        </item>
                        <item>
                            <name>word(C character, N word_number [, C separator])</name>
                            <description>Returns a specified word from a string. Default separator is a space (*[sql:" "]*). You can specify the character(s) that define how to split the string into multiple words using the third argument. If the separator is a blank string (*[sql:""]*), the default separator is used.</description>
                        </item>
                    </list>
                </p>
                <p>These functions can be inserted into an expression using the *[ui:Insert Function]* button below the expression box.</p>
            </description>
        </section>
    </sections>
    <links>
        <link link="referencing%20session%20variables%20on%20the%20client">published to the client</link>
        <link link="api%20str%20function">str()</link>
        <link link="api%20ltrim%20function">ltrim()</link>
        <link link="api%20rtrim%20function">rtrim()</link>
        <link link="api%20client%20api%20number%20toformat%20method">Number toFormat() method</link>
        <link link="api%20client%20api%20date%20toformat%20method">Date toFormat() method</link>
    </links>
</page>