<page>
    <sections>
        <section>
            <description>
                <p>The *[js:setGroupCollapse()]* method can be used to expand or collapse a group in a List control. Groups can be added to a List by enabling the [Has client-side group breaks] property. Groups can be expanded or collapsed only if the [Can collapse groups] property is enabled in the *[ui:Client-side Grouping]* definition for the group.</p>
                <p>To expand or collapse a group, you must reference the group name. For example, if the group is configured to break on a COUNTRY field in the list and you would like to collapse the 'Argentina' group, you could do the following:</p>
                <p>
                    <example code="js"><![CDATA[var lObj = {dialog.object}.getControl('list1');
var groupName = 'Argentina';
var collapse = false;
var showAnimation = true;

lObj.setGroupCollapse(groupName,mode,showAnimation);]]></example>
                </p>
                <p>Where *[js:list1]* is the ID of the List control you wish to expand the "Argentina" COUNTRY group.</p>
                <p>You can also expand or collapse all groups in a List.</p>
                <p>
                    <example code="js"><![CDATA[var lObj = {dialog.object}.getControl('list1')

lObj.setGroupCollapse({groups: 'all'},true,false); // collapse all groups without animation
lObj.setGroupCollapse({groups: 'all'},false,true); // expand all groups with animation]]></example>
                </p>
                <p>If the List has multiple levels of grouping, you can expand or collapse sub-groupings of lists. For example, assume a List is grouped by COUNTRY and then by CITY within each COUNTRY. All COUNTRY groups can be expanded as follows:</p>
                <p>
                    <example code="js"><![CDATA[var lObj = {dialog.object}.getControl('list1');

// Expand all "Country" groups with animation:
lObj.setGroupCollapse({groups: 'level', level: 0},false,true);]]></example>
                </p>
                <p>*[js:level: 0]* refers to the first level of grouping. COUNTRY is the first level of grouping described in our example. If you wanted to collapse all of the CITY groups within each country (*[js:level: 1]*), you could do the following:</p>
                <p>
                    <example code="js"><![CDATA[var lObj = {dialog.object}.getControl('list1');

// Collapse all "City" groups without animation:
lObj.setGroupCollapse({groups: 'level', level: 1},true,false);]]></example>
                </p>
                <p>You can also use a *[js:match]* function to collapse (or expand) specific groups in the List:</p>
                <p>
                    <example code="js"><![CDATA[var lObj = {dialog.object}.getControl('list1');

var matchFunction = function (groupName, groupData) {
        if(groupName.match(/^[A-z]/)) return true; // match any group with a name starting with a character
        return false;
}
var collapse = true;

// collapse all groups that meet the criteria defined in matchFunction()
lObj.setGroupCollapse({groups: 'match', match: matchFunction}, collapse);]]></example>
                </p>
            </description>
        </section>
    </sections>
    <links>
        <link link="ux%20list%20builder%20csfilterorder%20properties#section1_Has%20client-side%20group%20breaks">Has client-side group breaks</link>
        <link link="ux%20list%20builder%20csfilterorder%20properties#section1_Has%20client-side%20group%20breaks">Can collapse groups</link>
    </links>
</page>