<page api="transform" build=" 4872">
    <shortlink>transform GetFormDataArrayForFormId method</shortlink>
    <topic method="GET" scope="ALL,RDA">/GetFormDataArrayForFormId/{formId}</topic>
    <description>
        <p>Get form data for all form instances of the specified formId. You can specify a hightime and only records edited after the specified hightime are returned.</p>
        <p>See *[GetFormInstancesArrayForFormId]* for more information.</p>
    </description>
    <arguments>
        <argument>
            <name>formId</name>
            <type>C</type>
            <description>FormId of the form definition</description>
        </argument>
        <argument>
            <name>paginated</name>
            <type>L</type>
            <description>true/false - indicates if the results should be paginated.</description>
        </argument>
        <argument>
            <name>pageSize</name>
            <type>N</type>
            <description>number of records per page</description>
        </argument>
        <argument>
            <name>pageNumber</name>
            <type>N</type>
            <description>page number for which data is returned</description>
        </argument>
        <argument>
            <name>resolveMediaFields</name>
            <type>L</type>
            <description>determine if coded data for media fields is resolved to the actual URL on Amazon S3.</description>
        </argument>
        <argument>
            <name>getRecordCount</name>
            <type>L</type>
            <description>if true, count of number of records is returned</description>
        </argument>
        <argument>
            <name>timestamp</name>
            <type>C</type>
            <description>timestamp when record was last updated. Format is yyyy-mm-dd 0h:0m:0s</description>
        </argument>
        <argument>
            <name>fieldList</name>
            <type>C</type>
            <description>a list of the top level form fields that you want to return data from. if blank then data for all form fields are returned.</description>
        </argument>
        <argument>
            <name>injectFormMetaDataIntoData</name>
            <type>L</type>
            <description>specifies if form meta data (i.e. name of user filling in form, form status, etc.) should be injected into the formdata return by the method.</description>
        </argument>
        <argument>
            <name>otheroptions</name>
            <type>C</type>
            <description>other options (in a JSON format)</description>
        </argument>
        <argument>
            <name>returnMediaFileList</name>
            <type>L</type>
            <description>specify if an array of media files should be returned - only honored if 'resolveMediaFields' is not true.</description>
        </argument>
        <argument>
            <name>getFormDefinition</name>
            <type>L</type>
            <description>specify if the form definition should also be returned</description>
        </argument>
        <argument>
            <name>formDataFilterJavascript</name>
            <type>C</type>
            <description>Javascript code to filter the form data. Your Javascript code must return true or false. If true the formdata is included in the return result. Your Javascript code can reference form fields using this syntax: data.formdata.name_of_field (e.g. if(data.formdata.color == 'red') return true; ). If you specify a formdata filter you should also specify a metadata filter to limit that number of rows that need to be searched.</description>
        </argument>
        <argument>
            <name>metadatafilter</name>
            <type>C</type>
            <description>Filter based on meta data fields. Syntax is SQL. E.g.: person = 'fred@acme.tom' and status = 'open'</description>
        </argument>
        <argument>
            <name>metadatafilterparameters</name>
            <type>C</type>
            <description>If the metadata filter uses arguments, supplies the argument values. Format is a crlf delimited string of format value|||type|parametername</description>
        </argument>
    </arguments>
    <returns>
        <return>
            <name>result</name>
            <type>JSON Object</type>
            <description>Returns an object with these properties:</description>
            <properties>
                <property>
                    <name>error</name>
                    <type>boolean</type>
                    <description>*[js:true]* if there was an error</description>
                </property>
                <property>
                    <name>errorText</name>
                    <type>string</type>
                </property>
                <property>
                    <name>hightime</name>
                    <type>string</type>
                    <description>date of last update to any record in the result array (format yyyy-mm-dd 0h:0m:0s)</description>
                </property>
                <property>
                    <name>result</name>
                    <type>array</type>
                </property>
                <property>
                    <name>recordCount</name>
                    <description>number of records (1 if not paginated)</description>
                </property>
                <property>
                    <name>pageCount</name>
                    <description>(1 if not paginated)</description>
                </property>
            </properties>
        </return>
    </returns>
    <sections>
        <section>
            <title>CURL</title>
            <example><![CDATA[CURL --insecure -H "apikey:Your_api_key" -H "accept: application/json" "https://transform.alphasoftware.com/transformAPIVersion1.a5svc/GetFormDataArrayForFormId/value_of_formId?paginated=value_of_paginated&pagesize=value_of_pagesize&pageNumber=value_of_pageNumber&resolveMediaFields=value_of_resolveMediaFields&getrecordcount=value_of_getrecordcount&timestamp=value_of_timestamp&fieldList=value_of_fieldList&injectFormMetaDataIntoData=value_of_injectFormMetaDataIntoData&otherOptions=value_of_otherOptions&returnMediaFileList=value_of_returnMediaFileList&getFormDefinition=value_of_getFormDefinition&formDataFilterJavascript=value_of_formDataFilterJavascript&metadatafilter=value_of_metadatafilter&metadatafilterparameters=value_of_metadatafilterparameters"]]></example>
        </section>
        <section>
            <title>Node</title>
            <example code="js"><![CDATA[var https = require('https');
var options = {
  protocol: "https:",
  hostname: "transform.alphasoftware.com",
  path: "/transformAPIVersion1.a5svc/GetFormDataArrayForFormId/value_of_formId?paginated=value%5fof%5fpaginated&pagesize=value%5fof%5fpagesize&pageNumber=value%5fof%5fpageNumber&resolveMediaFields=value%5fof%5fresolveMediaFields&getrecordcount=value%5fof%5fgetrecordcount&timestamp=value%5fof%5ftimestamp&fieldList=value%5fof%5ffieldList&injectFormMetaDataIntoData=value%5fof%5finjectFormMetaDataIntoData&otherOptions=value%5fof%5fotherOptions&returnMediaFileList=value%5fof%5freturnMediaFileList&getFormDefinition=value%5fof%5fgetFormDefinition&formDataFilterJavascript=value%5fof%5fformDataFilterJavascript&metadatafilter=value%5fof%5fmetadatafilter&metadatafilterparameters=value%5fof%5fmetadatafilterparameters",
  headers: {apikey: "Your_api_key"}
};

https.get(options, (resp) => {
  let data = '';
  resp.on('data', (chunk) => {data += chunk;});
  resp.on('end', () => {console.log(data);});
}).on("error", (err) => {console.log("Error: " + err.message);});
]]>            </example>
        </section>
        <section>
            <title>Xbasic</title>
            <example code="xb"><![CDATA[dim apikey as c = "Your_api_key"
dim postdata as c 
dim url as c = "/GetFormDataArrayForFormId/value_of_formId?paginated=value%5fof%5fpaginated&pagesize=value%5fof%5fpagesize&pageNumber=value%5fof%5fpageNumber&resolveMediaFields=value%5fof%5fresolveMediaFields&getrecordcount=value%5fof%5fgetrecordcount&timestamp=value%5fof%5ftimestamp&fieldList=value%5fof%5ffieldList&injectFormMetaDataIntoData=value%5fof%5finjectFormMetaDataIntoData&otherOptions=value%5fof%5fotherOptions&returnMediaFileList=value%5fof%5freturnMediaFileList&getFormDefinition=value%5fof%5fgetFormDefinition&formDataFilterJavascript=value%5fof%5fformDataFilterJavascript&metadatafilter=value%5fof%5fmetadatafilter&metadatafilterparameters=value%5fof%5fmetadatafilterparameters"
dim pr as p
pr = a5dialogHelper_transformAPIQuery(url,postdata,apikey)
if pr.error = .f. then
	dim result as c 
	result = pr.result
else
	dim errorText as c 
	errorText = pr.errorText
end if 
]]>            </example>
        </section>
        <annotations>/TransForm/GetFormDataArrayForFormId.xml</annotations>
    </sections>
</page>
