<page>
    <shortlink>transform designer commandtypes</shortlink>
    <topic>Command Types</topic>
    <description>An explanation of each of the different types of commands and their properties.</description>
    <sections>
        <section>
            <description>The command types and their properties are:</description>
        </section>
        <section>
            <title>Data Field</title>
            <description>
                <p>
  The Data Field command type (also called the Field command type) specifies a form field to be displayed 
  in the form.
                </p>
                <p>
  A Field can be any of a number of different types of fields, differentiated by their *[Field Type]*.
  There are many different field types to facilitate different types of input and data.
                </p>
                <p>
  The most basic field type is *[Text]*. This displays the field value (if any) directly as it is
  in the data, along with a title above the value.
  Tapping on the field in the Form Filler will bring up the device keyboard in a separate screen.
                </p>
                <p>
  The types of Data Fields are: *[Text]*, *[Number]*, *[Integer]*, *[Currency]*, *[Phone number style]*, *[Signed decimal]*, *[Date]*,
  *[Date/Time]*, *[Time Now]*, *[Stopwatch]*, *[Photo]*,  *[Audio]*, *[Signature]*, *[Scanner]*, *[Location]*, *[Button List]*, and *[List]*.
                </p>
                <p>The Number, Integer, Currency, Phone number style, and Signed decimal types behave like the Text type, but have appropriate keypads displayed when entering values. The Integer type also adds buttons on the form itself for increasing and decreasing the value. </p>
                <p>
  The Date and Date/Time styles have spinners for entering values, as well as a Today or Now button.
                </p>
                <p>The Time Now and Stopwatch styles have buttons to access the current time. The Time Now style enters the current date and time. The Time Now style can also optionally start a Countdown Timer which will notify the user when a specified amount of time has passed. The Stopwatch style enters the number of seconds between a start and stop tap on a button. </p>
                <p>The Photo type displays a photo, or the words "Tap to capture image" instead of a textual value. Instead of a keypad, there is a menu with buttons to capture or recapture an image with the device camera or copy it from the device photo album, with buttons underneath to zoom, etc. Double-tapping resets to no zoom. Swipe works if no zoom. Two-finger pinch zooms. After capturing the image, the user may also annotate the image by drawing on the screen with their finger or a stylus. The drawing capability may be disabled by the form designer. </p>
                <p>The Scanner type provides use of the device's camera for decoding barcodes to set the field value.</p>
                <p>
  The Location type displays the latitude/longitude and a map if connected, or nothing if not set.
  Instead of a keypad, there is a button to query the device for the location.
                </p>
                <p>
  The Signature type displays the signature with a timestamp under it and a yellow background,
  or the words "Tap to sign" instead of a textual value.
  Instead of a keypad, there is an area to sign, as well as buttons at the bottom to accept or clear.
                </p>
                <p>
  The Audio type displays the words "Tap to record" 
  or the words "Tap to play" instead of a textual value.
  Instead of a keypad, there are buttons to record, pause, play, rewind/fast forward, etc.,
  with a button underneath to delete the recording. Swipe works if not recording or playing.
                </p>
                <p>
  The Button List type shows a series of buttons, with the selected one, if any, indicated.
  Button Lists may be set to allow just a single selection (the default) or multiple selections, 
  akin to radio buttons and checkboxes, respectively.
                </p>
                <p>
  The List type displays the field value but provides a list of choices to choose from when tapped.
  Lists may be set to allow just a single selection (the default) or multiple selections, 
  akin to radio buttons and checkboxes, respectively. 
  Lists may also be set to include a textbox for searching, or searching and adding custom values.
                </p>
                <p>
  The properties are:
                </p>
            </description>
            <cases>
                <case>
                    <title nested="2">Field Type</title>
                    <description>Click the Field Type property to display a list of the available types. Click
     on an item in that list to change the field to the specified type.</description>
                </case>
                <case>
                    <title nested="2">Title</title>
                    <description>The value of the Title property is displayed in the form as the title of the field.
     If the Title is not set, the Field property values will be displayed.
     (To not display a title, set the Display Variant property to "No Title".)</description>
                </case>
                <case>
                    <title nested="2">Short Title</title>
                    <description>The value of the Short Title property, if present, is displayed in the form as the title of the field
     for situations where a shorter title will be more appropriate.
     For example, the Short Title is used when a field is tapped in the Form Filler app and
     an editing screen is displayed. It is also used in the Management Console app as the default
     name of a field in the listing.</description>
                </case>
                <case>
                    <title nested="2">Field Name</title>
                    <description>This property is described in the [Command Properties Screen] Help topic.</description>
                </case>
                <case>
                    <title nested="2">List Items</title>
                    <description>
                        <p>
     This property is used to specify the choices in a List field or a Button List field.
     The textbox shows up to 10 of the choices, with the value produced by the choice shown
     in parenthesis.
                        </p>
                        <p>
     Clicking on the textbox will display a bigger textbox. 
     Each choice to be displayed is represented by a line of text.
     A "|" character is used to separate what is displayed (to the left of the "|")
     from the value stored in the form instance data (to the right of the "|").
     If no "|" is present, then the value will be the same as the displayed choice.
     Click Done to save the specified choices.
                        </p>
                        <p>
     There is a dropdown below the Done/Cancel buttons for replacing 
     the text with some predefined list choices.
                        </p>
                        <p>
     Note that for fields that allow for multiple choices the value
     to be stored in the form must not include the "," character.
     This is because a comma is used to separate the selected choices in the field's value.
                        </p>
                    </description>
                </case>
                <case>
                    <title nested="2">Choices Allowed</title>
                    <description>The Choices Allowed property is displayed for List and Button List Field Types.
     It is used to specify whether the field may accept just a single selected choice as the value (the default)
     or whether the field allows for multiple selected choices at once to make up the resulting value.</description>
                </case>
                <case>
                    <title nested="2">Search/Add</title>
                    <description>The Search/Add property is displayed for List Field Types.
     It is used to specify whether or not a header is displayed with the list to let the user
     type in a search value to filter the list (the filtering is based upon the text displayed). 
     Optionally, it can specify that, in addition to searching,
     the searched-for value may be added to the list as a custom value if there are no matches.
     The default is to have no header at all.</description>
                </case>
                <case>
                    <title nested="2">Input lines</title>
                    <description>Text fields usually are entered with a single-line input control. This property
     lets you specify that a larger, multi-line input control should be used and that pressing "Return" 
     will insert a line break instead of ending input when entering data into the field.</description>
                </case>
                <case>
                    <title nested="2">Timer Message</title>
                    <description>The value of the Timer Message property, if present, is displayed in the Countdown Overlay when a Countdown Timer is running. </description>
                </case>
                <case>
                    <title nested="2">Required Field</title>
                    <description>This property lets you specify whether or not the field, if displayed, must
     have a non-empty value.
     If a field is required and is has no value, an error indication will appear in the 
     Form Filler.</description>
                </case>
                <case>
                    <title nested="2">Read-only</title>
                    <description>If a field is specified as read-only, the user will not be able to change its value.
     This can be used, for example, to keep a value, like a date/time, set by initialization from being changed.</description>
                </case>
                <case>
                    <title nested="2">Display Variant</title>
                    <description>The Display Variant property chooses among a variety of different ways to display the field in the form.
     The default is "Normal". "Medium Title" and "Large Title" show different size title text.
     The "No Title" variant suppresses the display of the title on the form.</description>
                </case>
                <case>
                    <title nested="2">Photo Resolution</title>
                    <description>The Photo Resolution property is available for Photo fields. It selects
     among Small (the default), Large, and Original.
     These indicate whether images selected when using the Form Filler app are to be resized
     to no more than 512 pixels in either dimension, 2048 pixels, or not resized, respectively.
     The user of the Form Filler app can also explicitly request no resizing for a given image.</description>
                </case>
                <case>
                    <title nested="2">Allow Drawing, Drawing Mode, Pen Color, Pen Thickness</title>
                    <description>
                        <p>These properties are available for Photo fields. They are used to control whether or not a photo may be modified by drawing on it, and, if so, what the initial settings for that drawing functionality should be. </p>
                    </description>
                </case>
                <case>
                    <title nested="2">Include Timezone</title>
                    <description>
                        <p>This property is available for Date, Date/Time, and Time Now fields. If "Yes", then values will be stored in ISO 8601 Format and include the local time zone offset from GMT instead of the default "YYYY-MM-DD" and "YYYY-MM-DD HH:MM" formats. This is only needed for applications that require such information.</p>
                    </description>
                </case>
                <case>
                    <title nested="2">Countdown Color</title>
                    <description>
                        <p>The Countdown Color specifies the CSS color value for a Time Now Countdown button. This property must be in the form of a CSS Color Value. For example, it may be a hexadecimal RGB value, like #FF0000 or #F00 for red, or the "rgb()" function, like rgb(0,255,0) for green, or one of the standard CSS color keywords, like blue. The default is a dark shade of blue. </p>
                    </description>
                </case>
                <case>
                    <title nested="2">Countdown Duration, Sound, Vibrate When Done </title>
                    <description>
                        <p>The Countdown Duration, Sound, and Vibrate When Done properties are available for Time Now Countdown fields. They specify the length of time for the associated Countdown Timer as well as the optional sound to be played when the countdown is completed and whether or not the device should vibrate at that time, too. </p>
                    </description>
                </case>
                <case>
                    <title nested="2">Help Text</title>
                    <description>
                        <p>
     Fields can have an optional "?" button that displays text to provide additional information
     to the user filling out the form.
     The Help Text property lets the form designer specify that text.
     If no text is provided the "?" button is not displayed. 
                        </p>
                        <p>
     The value of this property is treated as plain HTML. For example,
     you can indicate line breaks with "&lt;br&gt;". However, it is not a template.
                        </p>
                    </description>
                </case>
                <case>
                    <title nested="2">Preview Value</title>
                    <description>This value is used in the Preview Screen to show how the field will look with data.
     The preview value is not used by IF commands.
     If the Preview Data Form Property is set, this value is ignored.
                    </description>
                </case>
            </cases>
        </section>
        <section>
            <title>Heading</title>
            <description>
                <p>
  The Heading command type is used to display text for organizing and describing the other parts of a form.
  There are different Heading Types with different visual presentation.
                </p>
            </description>
            <cases>
                <case>
                    <title nested="2">Heading Type</title>
                    <description>
                        <p>
     Click the Heading Type property to display a list of the available types. Click
     on an item in that list to change the heading to the specified type.
                        </p>
                        <p>
     The available types are: *[Group]* (large, with bar above), *[Section]* (medium, with bar above), *[Instructions]* (small, italic), 
     *[Plain]* (small), and *[Warning]* (small  red).
                        </p>
                    </description>
                </case>
                <case>
                    <title nested="2">Text</title>
                    <description>
                        <p>
     The Text property specifies the text to be displayed.
                        </p>
                        <p>
     The text is displayed as is, with special HTML characters (like "&lt;") escaped to appear as themselves.
                        </p>
                        <p>
     As a special advanced feature, Alpha Anywhere Templating may be used to insert special values.
     This templating is done through special expressions enclosed in "{" and "}".
     Data values are accessible through special names.
     Names that start with "fields." can refer to fields at the current level of the form instance JSON data.
     Names that start with "data." can refer to fields that start at the top level of the JSON.
     The special name "thisGroup.count" is the 0-based index in the current Data Group.  
     The special name "thisGroup.text" is the current Data Group Name property.  
     You can refer to the current status ID with "statusID" and you can refer to a true/false value 
     indicating if any problems were detected in the commands preceding (above) this one with "problems.missingRequired"
     and "problems.hasErrors".
                        </p>
                        <p>
     An example of using the templating feature would be this text for a section-type heading:
                        </p>
                    </description>
                    <example><![CDATA[Child #{thisGroup.count+1} for {data.parent}]]></example>
                </case>
                <case>
                    <description>
                        <p>
     It might result in the heading:
                        </p>
                    </description>
                    <example><![CDATA[Child #2 for John Doe]]></example>
                </case>
            </cases>
        </section>
        <section>
            <title>Section Start, Section End</title>
            <description>
                <p>
  The Section Start and Section End command types are used to indicate the start and end 
  of an indented part of the displayed form.
  All fields, headings, etc., between a Section Start and Section End command are indented.
                </p>
                <p>
  Nested Section Start commands may be used to do additional indentation.
                </p>
                <p>
  There are no additional properties for these commands, just the common Command Type and Comment.
                </p>
            </description>
        </section>
        <section>
            <title>Page Start, Page End</title>
            <description>
                <p>
  The Page Start and Page End command types are used to indicate the start and end 
  of a page. (See the definition of Pages in the [Terminology] section.)
                </p>
                <p>
  The Page Start command is displayed in the form as a rectangle with optional special styling.
  The commands between the Page Start and Page End commands make up the contents of the page.
  Tapping the rectangle will cause the items on the page to be displayed in place of the
  current fields, etc.
                </p>
                <p>
  Page Start and Page End pairs may be nested for sub-pages.
                </p>
                <p>
  The additional properties for the Page Start command are:
                </p>
            </description>
            <cases>
                <case>
                    <title nested="2">Page Title</title>
                    <description>
                        <p>The Page Title property specifies the text to be displayed in the rectangle. For example, it usually has the name that the user would expect for the page, such as "Future Actions Needed".</p>
                    </description>
                </case>
                <case>
                    <title nested="2">Display Variant</title>
                    <description>
                        <p>
     The Display Variant property selects among the different styles of displaying the page rectangle.
     The choices are: Normal, Small, Big, Detail, and Major Detail.
     When selected, the preview display shows how the rectangle will appear.
                        </p>
                    </description>
                </case>
                <case>
                    <title nested="2">Page Color (CSS color value)</title>
                    <description>
                        <p>
     The Page Color property specifies the color to be applied to the border of the page rectangle and the
     header at the top of the page when it is displayed.     
                        </p>
                        <p>
     This property must be in the form of a CSS Color Value. 
     For example, it may be a hexadecimal RGB value, like #FF0000 or #F00 for red,
     or the "rgb()" function, like rgb(0,255,0) for green, or one of the standard
     CSS color keywords, like blue.
     The default is a gray.
     Illegal values will usually result in no color.
                        </p>
                    </description>
                </case>
            </cases>
        </section>
        <section>
            <title>Go To, Define Target</title>
            <description>
                <p>
  The Go To command is used to specify a rectangle that may be tapped to switch the display of the
  Form Filler app to display a specified part of the form.
  The Define Target command is used to specify a specific place in the displayed form that the user can "go to".
                </p>
                <p>
  The Go To command may optionally switch to the start of the next Page or to a specific Target.
                </p>
                <p>
  The additional properties for the Go To command are:
                </p>
            </description>
            <cases>
                <case>
                    <title nested="2">Go To Type</title>
                    <description>
                        <p>
     The Go To Type property specifies whether the Go To will switch to the next Page or to a specified Target.
                        </p>
                    </description>
                </case>
                <case>
                    <title nested="2">Go To Message</title>
                    <description>
                        <p>The Go To Message property specifies the text to be displayed in the rectangle. For example, it usually has the name that the user would expect for the target, such as "Main Values". The default for the Go To Type Next Page is "Next Page".</p>
                    </description>
                </case>
                <case>
                    <title nested="2">Target Name</title>
                    <description>
                        <p>
     If the Go To Type property is "Target", the Target Name property specifies 
     the name of the target to switch to when the Go To rectangle is tapped.
     The next Define Target command with that name encountered in the form as displayed will
     be used at the target of the Go To.
                        </p>
                        <p>
     The target name should be simple alphanumeric text, such as "mainvalues". It need not
     correspond to the Text property.
                        </p>
                    </description>
                </case>
                <case>
                    <title nested="2">Display Variant</title>
                    <description>
                        <p>
     The Display Variant property selects among the different styles of displaying the GoTo rectangle.
     The choices are: Normal, Small, Big, Detail, and Major Detail.
     When selected, the preview display shows how the rectangle will appear.
                        </p>
                    </description>
                </case>
                <case>
                    <title nested="2">Page Color (CSS color value)</title>
                    <description>
                        <p>
     The Page Color property specifies the color to be applied to the border of the GoTo rectangle.
                        </p>
                        <p>
     This property must be in the form of a CSS Color Value. 
     For example, it may be a hexadecimal RGB value, like #FF0000 or #F00 for red,
     or the "rgb()" function, like rgb(0,255,0) for green, or one of the standard
     CSS color keywords, like blue.
     The default is a gray.
     Illegal values will usually result in no color.
                        </p>
                    </description>
                </case>
            </cases>
        </section>
        <section>
            <description>
                <p>
  The additional properties for the Define Target command are:
                </p>
            </description>
            <cases>
                <case>
                    <title nested="2">Label in Table of Contents</title>
                    <description>The Label in Table of Contents property specifies the text to be displayed in the Form Filler app Table of Contents for the target location in the form.</description>
                </case>
                <case>
                    <title nested="2">Target Name</title>
                    <description>
                        <p>
     The Target Name property specifies the name of the target being defined.
     There should be at least one corresponding Go To command that has the same target name.
                        </p>
                        <p>
     The target name should be simple alphanumeric text, such as "mainvalues". It need not
     correspond to the Label in Table of Contents property.
                        </p>
                    </description>
                </case>
            </cases>
        </section>
        <section>
            <title>Change Status</title>
            <description>
                <p> The Change Status command specifies that a button should be shown for changing the status of the form instance and then initiate the uploading of the form to the server to save the data. The same effect may be had by using the Change Status menu command while editing a form in the Form Filler app and then using the Upload Now button above the list of forms. This is a user-friendly way of doing both operations within a form, optionally using IF commands to set different statuses depending upon different conditions.</p>
                <p>The Status Change Message property specifies what should be displayed on the button. The default is "Close and Upload Form". If the form already has the desired status, then the Upload-Only Message property value will be displayed. The default is "Upload Form".</p>
                <p>The Set Status To property lets you choose the status to change to from the list of statuses available for this account.</p>
                <p>There is a property to set the form value that will prevent the form instance (that particular record in the database) from being downloaded to the Form Filler app in the future. This is usually the default "No" for many common applications.</p>
            </description>
        </section>
        <section>
            <title>Countdown Timer </title>
            <description>
                <p>The Countdown Timer command specifies that a button should be shown for starting a Countdown Timer. A Countdown Timer lets you schedule a notification when a specified amount of time has passed. The timer itself does not set the value of any field nor initiate any other change to the form data. Countdown Timers are used, for example, when a user needs to capture data over a predetermined amount of time (such as counting how many items are produced by a process in a certain period) or to facilitate moving from one process to another (such as limiting form filling to a certain number of minutes). </p>
                <p> The Title property sets the text to be displayed on the button. </p>
                <p> The Short Title property, if present, is displayed in situations where a shorter title would be more appropriate, such as above the Countdown Timer Editor. </p>
                <p> The Countdown Color property optionally sets the color of the button. This property must be in the form of a CSS Color Value. For example, it may be a hexadecimal RGB value, like #FF0000 or #F00 for red, or the "rgb()" function, like rgb(0,255,0) for green, or one of the standard CSS color keywords, like blue. The default is a dark shade of blue. </p>
                <p> The Countdown Duration property specifies, in whole seconds, the amount of time that the timer runs. </p>
                <p> The Sound property specifies which built-in sound, if any, to play when the timer finishes. The names are descriptive. </p>
                <p> The Vibrate When Done property specifies whether or not the device should vibrate when the timer finishes. </p>
            </description>
        </section>
        <section>
            <title>Action Button</title>
            <description>
                <p>The Action Button command specifies that a button should be shown that executes TPL code when tapped. This is an advanced feature that is used to provide additional functionality. </p>
                <p>The Button Action Name property specifies the name of the TPL action to run when the button is tapped. The name must be alphanumeric, starting with a letter, with no spaces nor "_" characters. The TPL "ON *button_ButtonActionName" code block will be executed. The code for the action may be edited using the TPL Editing and Testing screen. </p>
                <p> The Title property sets the text to be displayed on the button. </p>
                <p>The Short Title property, if present, is displayed in situations where a shorter title would be more appropriate, such as above the Action Button Editor. </p>
                <p>The Button Color property optionally sets the color of the button. This property must be in the form of a CSS Color Value. For example, it may be a hexadecimal RGB value, like #FF0000 or #F00 for red, or the "rgb()" function, like rgb(0,255,0) for green, or one of the standard CSS color keywords, like blue. The default is a dark shade of blue. </p>
            </description>
        </section>
        <section>
            <title>IF, ELSE, ELSE IF, ENDIF</title>
            <description>
                <p> The IF, ELSE, ELSE IF, and ENDIF command types enable the conditional display of other commands (such as fields and headings) depending upon the result of a test. For example, they may be used to only display a field requesting a detail if another field, a button list, has the value "Yes". </p>
                <p> Separate IF, ELSE, ELSE IF, and ENDIF commands are used in a manner similar to most programming languages. Inserting an IF command automatically also inserts a corresponding ENDIF that may be moved as needed, or other commands may be inserted between them. </p>
                <p> The one special property for the IF and ELSE IF commands is the *[ui:Test]* property. This is a TPL expression that can evaluate to "true" (non-blank) or "false" (""). </p>
                <p> TPL expressions are explained in greater detail in the TPL Expressions section of this help. (Note: In early versions of TransForm, the IF command used JavaScript expressions with a different syntax for accessing fields and other data. See the Pre-TPL Syntax section of this help if you are maintaining or upgrading form types that made use of this functionality.) </p>
                <p> The TPL expressions may refer to fields at the current level using "##" followed by the field name. Top level fields may be referred to using "#" followed by the field name. You can refer to the current status ID with "$#status" and you can refer to a true/false value ("Y"/"") indicating if any problems were detected in the commands preceding (above) this one with "$#missingrequired" and "$#haserrors". </p>
                <p> Note: TPL uses "==" to test equality and "!=" for inequality. The characters "&amp;&amp;" and "||" may be used for "and" and "or", respectively, and parenthesis may be used for grouping. Text values are enclosed in double-quotes (e.g., "This is text"). </p>
                <p> To make it easier to create the tests, there is an "Insert Field Name" button under the Test property textbox. Clicking it will display a list of fields at the current and top levels. Click on a row in the list to insert the appropriate text for referring to that field. </p>
                <p> For testing through use of Preview, either use Form Preview Data (defined in JSON on the Form Properties Screen) or the Preview Value property radio buttons above the Comment property. Preview values of other fields are not used. </p>
                <p> Examples of tests are: </p>
            </description>
            <example><![CDATA[##casingIntact=="Yes"
#quantity>20
len(#array1)>0 && #array1[0].b=="bee"]]></example>
        </section>
        <section>
            <description>
                <p>The first example is true if the field "casingIntact" has the value "Yes". The second example is true if the top level field "quantity" has a value greater than 20. The last example is true if the top level data group with field name "array1" has at least one item and the first item's "b" value is "bee". </p>
            </description>
        </section>
        <section>
            <title>Data Group Start, Data Group End</title>
            <description>
                <p>
  A Data Group is the term used to describe an array of separate groups of fields.
  It is the way you get a parent-child, one-to-many relationship, such as
  invoices with line items -- the invoice is the parent and the line items (each with
  a product and quantity field) are the children.
                </p>
                <p>
  The Data Group Start and Data Group End command types are used to bracket 
  the commands in the Commands List for the fields that make up an element in that array.
  That is, the Field commands between the Data Group Start and Data Group End may
  be repeated over and over, once for each element (or "item") in the array, when
  the form is displayed.
  In the Commands List itself, command between the Start and End are displayed indented. 
                </p>
                <p>
  Data Groups may be nested. That is, there may be parent-child-grandchild relationships.
                </p>
                <p>
  When displayed in a form along with form instance data, the Data Group is seen
  as the Field, Heading, and other commands in the group.
  It also is seen as a button after the group for adding additional items (sets
  of those fields) to the group.
  Optionally, after each item in the group, there is a button to delete that item. 
                </p>
                <p>
  The Data Group End command type has only common properties. The properties
  of the Data Group Start command type are:
                </p>
            </description>
            <cases>
                <case>
                    <title nested="2">Name</title>
                    <description>
                        <p>
     The name is similar to being the title of the group.
     It is sometimes used by the Form Filler to indicate to the user that a field is in 
     a Data Group.
     It is also used to help create the default New Message property for the Data Group.
                        </p>
                    </description>
                </case>
                <case>
                    <title nested="2">New Message</title>
                    <description>
                        <p>
     Immediately following the last item in the Data Group (if any), a
     button will be displayed with a "+" followed by the New Message text.
     Example text would be: "Add another photo".
     If no New Message is provided, a default message will be created,
     using the Name property if present.
                        </p>
                    </description>
                </case>
                <case>
                    <title nested="2">Delete Message</title>
                    <description>
                        <p>
     Immediately following the each item in the Data Group (if any), a
     button will be displayed with an "x" followed by the Delete Message text
     followed by the character "#" and the index of the item (#1, #2, etc.).
     If there is no Delete Message text, the button will not appear.
                        </p>
                    </description>
                </case>
                <case>
                    <title nested="2">Array Name</title>
                    <description>
                        <p>
     The Array Name property specifies the name to use in the Form Instance JSON
     for the attribute/value pair that contains the array object that holds
     the Data Group data.
     This is similar to a Field property in a Field command.
                        </p>
                        <p>
     For example, in the Parent/Child example used in this Help for Form Instance JSON Data,
     "children" would be the Array Name property of the Data Group Start command that specifies
     the Data Group with "name" and "age" fields for each child.
                        </p>
                    </description>
                </case>
                <case>
                    <title nested="2">Initialization</title>
                    <description>
                        <p>
     The Initialization property is similar to the Initialization Commands Form Property.
     When a Data Group array item is first created by the user in the Form Filler app by 
     tapping the "+ Add" button, 
     values in fields by default are all undefined (blank). 
     They may be given initial values by providing commands in the Initialization property textbox.
     Only top-level fields within the Data Group (that is, fields not within a nested Data Group within
     the Data Group with this property) may be initialized using this textbox.
                        </p>
                        <p>
     An initialization command consists of a line of text, one line for each field being initialized.
     There are three forms:
                        </p>
                    </description>
                    <example><![CDATA[*[em:fieldname]*:text,*[em:value]*
*[em:fieldname]*:date
*[em:fieldname]*:time]]></example>
                </case>
                <case>
                    <description>
                        <p>
     *[em:Fieldname]* is the name of the field (e.g., "field1", not the Title "User Name").
     *[em:Value]* is the text to use as the initial value.
     The second and third forms set the value to the text value of the current date (e.g., "2017-01-10") or the current
     date and time (e.g., "2017-01-10 09:55:05").
                        </p>
                    </description>
                </case>
            </cases>
        </section>
        <section>
            <title>HTML</title>
            <description>
                <p> The HTML command type is similar to the Heading command, except that there is no built-in formatting. The text is treated as HTML and is not escaped. That is, the text "&lt;b&gt;bold&lt;/b&gt;" will be a word in bold. This gives the form designer further control over the presentation of the form and accompanying text. There is only one property, the Text property.</p>
                <p> Note that the HTML is processed and only certain syntax, tags, and attributes are allowed. Only double-quotes are allowed for quoting attribute values, not single quotes. Attribute names (like "style") must be immediately followed by equal and double quote. Links (&lt;a&gt; tags) and most attributes that take a URI are either not allowed or restricted. The &lt;input&gt; tag is not allowed. All open tags must be closed in the HTML text of the command (that is, no &lt;div&gt; without a corresponding &lt;/div&gt;), and void tags must have closing "/&gt;" (e.g., &lt;br/&gt;). Basic SVG is allowed. &lt;img ... /&gt; tags are allowed with certain white-listed on-device data asset and external URL specifiers (not documented here). </p>
                <p>You can test HTML text using the Preview of the form to check if a desired construct is allowed. </p>
                <p>TPL Templating is supported in the same manner as the Heading command. </p>
            </description>
        </section>
        <section>
            <title>Set Error Indicator</title>
            <description>
                <p>
  The Set Error Indicator command type adds an error to the list of current problems for the form instance data.
  A red star is added to the Form Tab and an entry is added to the form instance "Problems List" in the
  Form Filler app.
  This feature may be used to flag data validation errors or other conditions using IF commands.
                </p>
                <p>
  If a Set Error Indicator command is skipped (as the result of an IF or IF ELSE test evaluating to "false"
  or being in a Data Group that has no items) then no addition is made to the list of current problems.  
                </p>
                <p>
  If a Set Error Indicator command is executed, the content of the *[ui:Error Text]* property
  is used as the text to be displayed in the list of problems.
  In addition, if there is text in the *[ui:Optional Message]* property, that text
  will be displayed in a bold red font in the form at that point.
  Alpha Anywhere Templating is supported in the Optional Message property in
  the same manner as the Text in the Heading command.
                </p>
            </description>
        </section>
    </sections>
    <links>
        <link link="transform designer commandproperties">Command Properties Screen</link>
        <link link="transform designer terminology">Terminology</link>
    </links>
</page>