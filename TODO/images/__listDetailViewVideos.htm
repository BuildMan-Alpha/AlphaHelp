<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<title>UX Component</title>
<style>
<!--
p            { font-family: Tahoma; width: 7in; font-size: 9pt; margin-left: .5in; margin-top:0px; margin-bottom:5px }
-->
</style>
</head>

<body>

						<table border="1" cellspacing="1" cellpadding="3" id="table81" style="color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; margin-left: 0.5in; border-collapse: collapse; " width="992">

							
							
							<tr>
								<td width="160" style="font-family: Tahoma; font-size: 8pt; vertical-align: top; ">
								&nbsp;</td>
								<td width="201" style="font-family: Tahoma; font-size: 8pt; vertical-align: top; ">
								&nbsp;</td>
								<td style="font-family: Tahoma; font-size: 8pt; vertical-align: top; ">
								&nbsp;</td>
							</tr>

							
							
							<tr>
								<td width="160" style="font-family: Tahoma; font-size: 8pt; vertical-align: top; ">
								UX Component - List Control</td>
								<td width="201" style="font-family: Tahoma; font-size: 8pt; vertical-align: top; ">
								Introduction to the List Control Detail View</td>
								<td style="font-family: Tahoma; font-size: 8pt; vertical-align: top; ">
								The List control can have an associated Detail 
								View. The Detail View allows you to see details 
								for the currently selected row in the List. The 
								Detail View can be updateable, allowing you to 
								update data that is in the List.<br>
								<br>
								In this video we show how you can add a Detail 
								View to a List. We show two different genies 
								that you can use - one for setting up a List 
								with a Detail View, and another for adding a 
								Detail View to an existing List.<br>
								<br>
								<b>IMPORTANT: </b>Lists with Detail Views are 
								the essential building block for applications 
								that can work while you are disconnected. For 
								more information about the features of Lists 
								with Detail Views, see the videos in the 'UX 
								Component - Disconnected Applications' category.
								<u>Even if you do not need to build mobile 
								applications that work while disconnected, the 
								information regarding Lists and Detail Views in 
								these videos will be relevant.</u><br>
								<br>
								<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_list_detailView1.swf">Watch Video - Part 
								1</a><br>
								<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_list_detailView2.swf">Watch Video - Part 2</a><br>
								<br>
								<br>
								Date Added: 2014-09-07</td>
							</tr>

							
							
							<tr>
								<td width="160" style="font-family: Tahoma; font-size: 8pt; vertical-align: top; ">
								UX Component - List Control</td>
								<td width="201" style="font-family: Tahoma; font-size: 8pt; vertical-align: top; ">
								Contrasting Data Binding at the UX Level with 
								Data Binding at the List Level to Update a SQL 
								Database</td>
								<td style="font-family: Tahoma; font-size: 8pt; vertical-align: top; ">
								Say you want to update data in a SQL database 
								using a UX component. Using a List control with an updateable 
								Detail View, you can perform edits on a SQL 
								database with the List and its associated 
								Detail View.
								This is an alternative to defining Data Binding properties for the UX component, 
								then defining a server-side action that loaded the 
								primary keys; of the records you wanted to edit 
								and another server-side action to save the edits 
								back to the SQL database.<br>
								<br>
								Now, <br>
								<br>
								In this video we contrast the two methods of 
								performing CRUD (create, read, update, delete) 
								operations on a SQL database using Data Binding 
								and List controls.<br>
								<br>
								<br>
								<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_crud_1.swf">Watch Video - Part 
								1</a><br>
								<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_crud_2.swf">Watch Video - Part 2</a><br>
								<br>
								<br>
								<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_crud_compare.zip">Download Components</a><br>
								<br>
								Date Added: 2014-09-07</td>
							</tr>

							
							
							<tr>
								<td width="160" style="font-family: Tahoma; font-size: 8pt; vertical-align: top; ">
								UX Component - List Control</td>
								<td width="201" style="font-family: Tahoma; font-size: 8pt; vertical-align: top; ">
								List Control Search Part </td>
								<td style="font-family: Tahoma; font-size: 8pt; vertical-align: top; ">
								The List control has a built-in Search Part that 
								allows you to perform searches on the database 
								that is used to populate the List. (This is very 
								much like the Search Part in a Grid component).<br>
								<br>
								The Search Part in the List can be configured in 
								three different ways:<br>
								- individual fields for the Search Part 
								(allowing the user for example to enter criteria 
								in a Name, City or Country field)<br>
								- a single keyword field (allowing the user to 
								enter criteria in a single field then then 
								searching for matches in multiple fields)<br>
								- query by form (allowing the List's Detail View 
								to be used to enter the search criteria)<br>
								<br>
								In this video we show how the various options 
								can be used to search a List. <br>
								<br>
								<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_list_searchPart_1.swf">Watch Video - Part 1</a><br>
								<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_list_searchPart_2.swf">
								Watch Video - Part 2</a><br>
								<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_list_searchPart_3.swf">
								Watch Video - Part 3</a><br>
								<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_list_searchPart_4.swf">
								Watch Video - Part 4</a><br>
								<br>
								<a href="http://www.ajaxvideotutorials.com/V12Videos/list_searchPart.zip">
								Download Components</a><br>
								<br>
								Date Added: 2014-09-07</td>
							</tr>

							
							
							<tr>
								<td width="160" style="font-family: Tahoma; font-size: 8pt; vertical-align: top; ">
								&nbsp;</td>
								<td width="201" style="font-family: Tahoma; font-size: 8pt; vertical-align: top; ">
								&nbsp;</td>
								<td style="font-family: Tahoma; font-size: 8pt; vertical-align: top; ">
								&nbsp;</td>
							</tr>

							
							
							<tr>
								<td width="160" style="font-family: Tahoma; font-size: 8pt; vertical-align: top; ">
								UX Component - Disconnected Applications</td>
								<td width="201" style="font-family: Tahoma; font-size: 8pt; vertical-align: top; ">
								Introduction</td>
								<td style="font-family: Tahoma; font-size: 8pt; vertical-align: top; ">
								You can build applications that are designed to 
								work when you are disconnected. The UX component 
								and the List control are the fundamental 
								building blocks of these types of applications.<br>
								<br>
								In this video overview we show how a UX 
								component is built using a List control with an 
								associated Detail View to display and edit data, 
								how the data in the List is persisted to Local 
								Storage and then how the edits made to the List 
								data are synchronized with the server. We also 
								show how your disconnected data can be 
								'hierarchical' - i.e. a list of customers, with 
								orders for each customer and order details for 
								each order.<br>
								<br>
								<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_disconnected_introduction_1.swf">Watch Video 1 - Setting up a List with a Detail 
								View using the Quick Setup Genie</a><br>
								<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_disconnected_introduction_2.swf">Watch Video 2 - 
								Editing Data and Persisting Data to Local Storage</a><br>
								<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_disconnected_introduction_3.swf">Watch Video 3 - Introduction to Hierarchical 
								Data Structures</a><br>
								<br>
								<br>
								For more information on building disconnected 
								applications, click<a href="http://downloads.alphasoftware.com/A5V12Download/ReleaseNotes/listControlDetailView.htm"> 
								here.</a><br>
								<br>
								Date Added: 2014-09-07</td>
							</tr>

							
							
							<tr>
								<td width="160" style="font-family: Tahoma; font-size: 8pt; vertical-align: top; ">
								UX Component - Disconnected Applications</td>
								<td width="201" style="font-family: Tahoma; font-size: 8pt; vertical-align: top; ">
								Editing Data While Offline and then 
								Synchronizing the Data</td>
								<td style="font-family: Tahoma; font-size: 8pt; vertical-align: top; ">
								When you build an application for disconnected 
								operation, the List control is the basic 
								building block for the application. The List 
								control is used as the 'offline' data storage. 
								The data in the List control can be thought of 
								as an in-memory table. Edits to this data are 
								persisted to Local Storage and then are pushed 
								to the server to synchronize with the server 
								database when a connection is available.<br>
								<br>
								In this video we look at how data in the List 
								are edited and then synchronized with the server 
								database.<br>
								<br>
								<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_editing_data_whileOffline.swf">Watch Video</a><br>
								<br>
								Date Added: 2014-09-07</td>
							</tr>

							
							
							<tr>
								<td width="160" style="font-family: Tahoma; font-size: 8pt; vertical-align: top; ">
								UX Component - Disconnected Applications</td>
								<td width="201" style="font-family: Tahoma; font-size: 8pt; vertical-align: top; ">
								Editing Data While Offline - Behind the Scenes - 
								What Data are Stored in the List</td>
								<td style="font-family: Tahoma; font-size: 8pt; vertical-align: top; ">
								In order to get a better understanding of how 
								the data in a List control are stored to support 
								disconnected operation, this video shows how you 
								can debug into the internal data that is stored 
								in the List when the user edits, enters and 
								deletes records.<br>
								<br>
								<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_dataObjectForEachRow.swf">Watch Video</a><br>
								<br>
								Date Added: 2014-09-07</td>
							</tr>

							
							
							<tr>
								<td width="160" style="font-family: Tahoma; font-size: 8pt; vertical-align: top; ">
								UX Component - Disconnected Applications</td>
								<td width="201" style="font-family: Tahoma; font-size: 8pt; vertical-align: top; ">
								Synchronization Errors - Validation Errors</td>
								<td style="font-family: Tahoma; font-size: 8pt; vertical-align: top; ">
								When a user synchronizes edits to data that were 
								made while they were offline, there is the 
								possibility of synchronization errors.<br>
								<br>
								These errors can typically result because the 
								user entered a value in a field that was 
								rejected by some server-side validation logic, because of a write conflict, 
								or because the database rejected the edit.<br>
								<br>
								In this video we show how synchronization errors 
								that result from server-side validation errors 
								and database errors 
								are handled.<br>
								<br>
								<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_serversidevalidation_1.swf">
								Watch Video - Part 1</a><br>
								<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_serversidevalidation_2.swf">
								Watch Video - Part 2</a><br>
								<br>
								<br>
								Date Added: 2014-09-07</td>
							</tr>

							
							
							<tr>
								<td width="160" style="font-family: Tahoma; font-size: 8pt; vertical-align: top; ">
								UX Component - Disconnected Applications</td>
								<td width="201" style="font-family: Tahoma; font-size: 8pt; vertical-align: top; ">
								Synchronization Errors - Write Conflicts</td>
								<td style="font-family: Tahoma; font-size: 8pt; vertical-align: top; ">
								When a user synchronizes edits that were made 
								while they were offline, there is the 
								possibility that some other user edited and then 
								synchronized the same data before the user had a 
								chance to synchronize his/her edits.<br>
								<br>
								If this happens a write conflict will occur and 
								the user will be notified that the synchronize 
								operation could not be completed. The user will 
								have to choose how to resolve the conflict. The 
								developer also has the option of handling write 
								conflict errors programmatically.<br>
								<br>
								In this video we show how write-conflict errors 
								are handled.<br>
								<br>
								<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_write_conflict1.swf">
								Watch Video - Part 1</a><br>
								<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_write_conflict2.swf">
								Watch Video - Part 2</a><br>
								<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_write_conflict3.swf">
								Watch Video - Part 3</a><br>
								<br>
								<br>
								Date Added: 2014-09-07</td>
							</tr>

							
							
							<tr>
								<td width="160" style="font-family: Tahoma; font-size: 8pt; vertical-align: top; ">
								UX Component - Disconnected Applications</td>
								<td width="201" style="font-family: Tahoma; font-size: 8pt; vertical-align: top; ">
								Synchronization Events</td>
								<td style="font-family: Tahoma; font-size: 8pt; vertical-align: top; ">
								When data in a List control is synchronized with 
								the server database there are a number of events 
								that fire (on both the client-side and the 
								server-side) that give you a lot of control over 
								the process and allow you to inject custom code 
								to be executed.<br>
								<br>
								In this video we discuss some of the events that 
								fire when data are synchronized.<br>
								<br>
								<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_list_synch_events.swf">Watch Video</a><br>
								<br>
								Date Added: 2014-09-07</td>
							</tr>

							
							
							<tr>
								<td width="160" style="font-family: Tahoma; font-size: 8pt; vertical-align: top; ">
								UX Component - Disconnected Applications</td>
								<td width="201" style="font-family: Tahoma; font-size: 8pt; vertical-align: top; ">
								Custom Synchronization Handlers</td>
								<td style="font-family: Tahoma; font-size: 8pt; vertical-align: top; ">
								When the user synchronizes a List that is based 
								on a SQL database, Alpha Anywhere automatically 
								generates the SQL statements to perform the 
								various CRUD (create, read, update, delete) 
								operations.<br>
								<br>
								However, if your List is based on a custom 
								datasource (for example, a web service), then 
								you must write your own functions to handle 
								synchronization of the data.<br>
								<br>
								In this video we show an example of how custom 
								handlers can be written to synchronize data.<br>
								<br>
								<a href="http://www.ajaxvideotutorials.com/V12Videos/xb_customSync_1.swf">Watch Video - Part 1</a><br>
								<a href="http://www.ajaxvideotutorials.com/V12Videos/xb_customSync_2.swf">Watch Video - Part 
								2</a><br>
								<br>
								<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_customHandlers_list_synchronization.zip">
								Download Component</a><br>
								<br>
								Date Added: 2014-09-07</td>
							</tr>

							
							
							<tr>
								<td width="160" style="font-family: Tahoma; font-size: 8pt; vertical-align: top; ">
								UX Component - Disconnected Applications</td>
								<td width="201" style="font-family: Tahoma; font-size: 8pt; vertical-align: top; ">
								Incremental Refresh</td>
								<td style="font-family: Tahoma; font-size: 8pt; vertical-align: top; ">
								After a List has been populated with data from 
								the server you can perform incremental refreshes 
								on the List data to retrieve any edits that have 
								been made to server data. Unlike a full refresh, 
								only rows that have been edited are sent to the 
								client, resulting in a much smaller payload 
								being sent to the client compared to a full 
								refresh of the List data.<br>
								<br>
								You can also set a 'synchronization policy' in 
								the List definition to specify that every time 
								edits to the List data are synchronized with a 
								server an incremental refresh of the List should 
								also be performed.<br>
								<br>
								<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_incrementalRefresh.swf">Watch Video</a><br>
								<br>
								Date Added: 2014-09-07</td>
							</tr>

							
							
							<tr>
								<td width="160" style="font-family: Tahoma; font-size: 8pt; vertical-align: top; ">
								UX Component - Disconnected Applications</td>
								<td width="201" style="font-family: Tahoma; font-size: 8pt; vertical-align: top; ">
								Geographic Data - Capturing Location Information 
								when the User Edits Data</td>
								<td style="font-family: Tahoma; font-size: 8pt; vertical-align: top; ">
								You can configure a List so that every time the 
								user enters a new record, or edits a record, the 
								user's location will be stored. This allows you 
								to create applications where you capture the 
								location of the device at the time a record was 
								edited or entered.<br>
								<br>
								In this video we show how this is done.<br>
								<br>
								<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_list_captureLocation.swf">
								Watch Video - Part 1</a><br>
								<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_list_captureLocation2.swf">
								Watch Video - Part 2</a><br>
								<br>
								<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_geography.zip">
								Download Component</a><br>
								<a href="http://www.ajaxvideotutorials.com/V12Videos/mysql_schema_geogTable.zip">
								Schema for MySQL Table Used in Component</a><br>
								<br>
								Date Added: 2014-09-07</td>
							</tr>

							
							
							<tr>
								<td width="160" style="font-family: Tahoma; font-size: 8pt; vertical-align: top; ">
								UX Component - Disconnected Applications</td>
								<td width="201" style="font-family: Tahoma; font-size: 8pt; vertical-align: top; ">
								Geographic Data - Capturing Location Information 
								when the User Synchronizes Data</td>
								<td style="font-family: Tahoma; font-size: 8pt; vertical-align: top; ">
								Location information can be captured at the time the user 
								edits a record in the List. But you can also 
								capture location information at the time the 
								user synchronizes the data.<br>
								<br>
								In this video who show how to configure the List 
								to submit location information at the time the 
								user synchronizes the List.<br>
								<br>
								<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_list_captureLocationAtSynchTime.swf">
								Watch Video</a><br>
								<br>
								<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_captureLocationOnSynch.zip">
								Download Component</a><br>
								<a href="http://www.ajaxvideotutorials.com/V12Videos/mysql_schema_geogTable.zip">
								Schema for MySQL Table Used in Component</a><br>
								<br>
								Date Added: 2014-09-07</td>
							</tr>

							
							
							<tr>
								<td width="160" style="font-family: Tahoma; font-size: 8pt; vertical-align: top; ">
								&nbsp;</td>
								<td width="201" style="font-family: Tahoma; font-size: 8pt; vertical-align: top; ">
								&nbsp;</td>
								<td style="font-family: Tahoma; font-size: 8pt; vertical-align: top; ">
								&nbsp;</td>
							</tr>

							
							
							<tr>
								<td width="160" style="font-family: Tahoma; font-size: 8pt; vertical-align: top; ">
								UX Component - Disconnected Applications</td>
								<td width="201" style="font-family: Tahoma; font-size: 8pt; vertical-align: top; ">
								Geographic Data - Geocoding Data</td>
								<td style="font-family: Tahoma; font-size: 8pt; vertical-align: top; ">
								In order to perform geography searches on your 
								data (for example, find all records that are 
								within 5 miles of my current location), you need 
								to geocode the data in your table. For example, 
								if you have captured the address for the record, 
								when the record is synchronized, you can make a 
								call to a geocoding service to get the 
								latitude/longitude for the record. Then when the 
								record is written to the database you can also 
								compute the location field value so that 
								geography searches are possible.<br>
								<br>
								In this video we discuss the features that the 
								List control exposes to support working with 
								geographic data.<br>
								<br>
								<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_geocodedataonsynch.swf">
								Watch Video</a><br>
								<br>
								<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_geocode.zip">
								Download Component</a><br>
								<a href="http://www.ajaxvideotutorials.com/V12Videos/mysql_schema_geocodeexample.zip">
								Schema for MySQL Table Used in Component</a><br>
								<br>
								Date Added: 2014-09-07</td>
							</tr>

							
							
							<tr>
								<td width="160" style="font-family: Tahoma; font-size: 8pt; vertical-align: top; ">
								UX Component - Disconnected Applications</td>
								<td width="201" style="font-family: Tahoma; font-size: 8pt; vertical-align: top; ">
								Setting Default Values for Fields in New Records</td>
								<td style="font-family: Tahoma; font-size: 8pt; vertical-align: top; ">
								When you enter a new record in a List with a 
								Detail View you might want to set default values 
								for certain of the fields in the Detail View.<br>
								<br>
								The List builder allows you to execute 
								Javascript code to compute the default value for 
								each field in the List. This allows for 
								sophisticated computations for the default 
								value, including setting the default value for a 
								field to the value that was just entered into 
								the previously entered record.<br>
								<br>
								<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_definingDefaultValueForNewRecord.swf">
								Watch Video</a><br>
								<br>
								Date Added: 2014-09-07</td>
							</tr>

							
							
							<tr>
								<td width="160" style="font-family: Tahoma; font-size: 8pt; vertical-align: top; ">
								UX Component - Disconnected Applications</td>
								<td width="201" style="font-family: Tahoma; font-size: 8pt; vertical-align: top; ">
								Synchronizing Data in Batches</td>
								<td style="font-family: Tahoma; font-size: 8pt; vertical-align: top; ">
								If the user has made a large number of edits 
								while they were offline you might want to 
								synchronize the data in batches, rather than 
								sending all of the edits to the server at once.
								<br>
								<br>
								In this video we show how you can configure the 
								synchronization process so that data are sent to 
								the server in batches.<br>
								<br>
								<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_batchSynch.swf">
								Watch Video</a><br>
								<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_synch_in_batches.zip">
								Download Component</a><br>
								<br>
								Date Added: 2014-09-07</td>
							</tr>

							
							
							<tr>
								<td width="160" style="font-family: Tahoma; font-size: 8pt; vertical-align: top; ">
								UX Component - Disconnected Applications</td>
								<td width="201" style="font-family: Tahoma; font-size: 8pt; vertical-align: top; ">
								Delaying Populate List Till Active Search</td>
								<td style="font-family: Tahoma; font-size: 8pt; vertical-align: top; ">
								In an application designed for disconnected 
								usage, the user will typically load a subset of 
								the database onto their mobile device while they 
								have connection.<br>
								<br>
								This is usually done by adding a Search Part to 
								the primary List control in the component and 
								specifying the the List should not be populated 
								until the user has performed a search to 
								retrieve the 'records of interest'. <br>
								<br>
								TIP: For more information on how to set up the 
								Search Part for a List control see the video 
								titled 'List Control Search Part'.<br>
								<br>
								<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_search_delayPopulate.swf">
								Watch Video</a><br>
								<br>
								Date Added: 2014-09-07</td>
							</tr>

							
							
							<tr>
								<td width="160" style="font-family: Tahoma; font-size: 8pt; vertical-align: top; ">
								UX Component - Disconnected Applications</td>
								<td width="201" style="font-family: Tahoma; font-size: 8pt; vertical-align: top; ">
								Settings Maximum Number of Records that a Search 
								Can Return</td>
								<td style="font-family: Tahoma; font-size: 8pt; vertical-align: top; ">
								In an application designed for disconnected 
								usage, the List controls in the UX component 
								hold the data that will be available while the 
								user is offline. These Lists are populated when 
								the user does a search to retrieve the 'records 
								of interest' that they want to have available to 
								them while they are on-line.<br>
								<br>
								Since the amount of data that can be held on a 
								mobile device is limited, you will typically 
								want to ensure that the user does not enter 
								search criteria that retrieve too many records.<br>
								<br>
								In this video we show how you can set limits on 
								how large a result a user search is permitted to 
								return.<br>
								<br>
								<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_search_settingMaxSize.swf">
								Watch Video</a><br>
								<br>
								Date Added: 2014-09-07</td>
							</tr>

							
							
							<tr>
								<td width="160" style="font-family: Tahoma; font-size: 8pt; vertical-align: top; ">
								UX Component - Disconnected Applications</td>
								<td width="201" style="font-family: Tahoma; font-size: 8pt; vertical-align: top; ">
								Persisting Data to Local Storage</td>
								<td style="font-family: Tahoma; font-size: 8pt; vertical-align: top; ">
								When you build an application for disconnected 
								operation you need to be sure that the data in 
								the application is persisted to Local Storage so 
								that edits that are made to any data are not 
								lost if the application is restarted before the 
								user has had a chance to synchronize the data 
								with the server.<br>
								<br>
								<a href="http://www.ajaxvideotutorials.com/V12Videos/UX_LocalStorage_1.swf">Watch Video - Part 1</a><br>
								<a href="http://www.ajaxvideotutorials.com/V12Videos/UX_LocalStorage_2.swf">Watch Video - Part 2</a><br>
								<a href="http://www.ajaxvideotutorials.com/V12Videos/UX_LocalStorage_3.swf">Watch Video - Part 
								3</a><br>
								<br>
								<br>
								Date Added: 2014-09-07</td>
							</tr>

							
							
							<tr>
								<td width="160" style="font-family: Tahoma; font-size: 8pt; vertical-align: top; ">
								UX Component - Disconnected Applications</td>
								<td width="201" style="font-family: Tahoma; font-size: 8pt; vertical-align: top; ">
								Working with Hierarchical Data</td>
								<td style="font-family: Tahoma; font-size: 8pt; vertical-align: top; ">
								The data for disconnected applications are 
								stored in List controls. In many types of 
								applications the data you need to work with is 
								hierarchical. For example, you might have a list 
								of customers. Each customer has orders and each 
								order has order details.<br>
								<br>
								In a connected application, you can make an Ajax 
								callback to the server when a user selects a 
								different customer to fetch to orders for that 
								customer. However, in a disconnected application 
								you cannot make callbacks to the server, so when 
								the user selects a customer, the orders for that 
								customer must already have been retrieved from 
								the server so that the data can be shown without 
								making an Ajax callback.<br>
								<br>
								The List control can easily be populated with 
								hierarchical data. In this video we explain how 
								a List control is populated with a customers, 
								each customers' orders, and each order's 
								details.<br>
								<br>
								<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_hierarchicaldata_1.swf">
								Watch Video - Part 1</a><br>
								<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_hierarchicaldata_2.swf">
								Watch Video - Part 2</a><br>
								<br>
								In this follow on video we show how new records 
								can be added to child tables and how the new 
								records are automatically linked to their 
								parent. In the video we show how a new order is 
								added for the selected Customer record and then 
								how new order detail records are added for the 
								new order. When the data are synchronized, the 
								linking fields are automatically filled in - the 
								customer Id is filled into the new order record 
								and the order id is filled into the new order 
								detail records.<br>
								<br>
								<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_hierarchicaldata_3.swf">
								Watch Video - Part 3</a><br>
								<br>
								<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_cust_order_details.zip">
								Download Component</a><br>
								<br>
								<br>
								Date Added: 2014-09-07</td>
							</tr>

							
							
							<tr>
								<td width="160" style="font-family: Tahoma; font-size: 8pt; vertical-align: top; ">
								UX Component - Disconnected Applications</td>
								<td width="201" style="font-family: Tahoma; font-size: 8pt; vertical-align: top; ">
								Managing Local Storage</td>
								<td style="font-family: Tahoma; font-size: 8pt; vertical-align: top; ">
								When you build an application that is designed 
								for offline use (i.e. a disconnected application), the data in 
								the List controls, and the variables in the UX 
								component are persisted to Local Storage.<br>
								<br>
								In this video we show how you can manage the 
								data in Local Storage using the built-in Local 
								Storage manager and using methods of the UX 
								component.<br>
								<br>
								<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_manage_localStorage_1.swf">Watch Video - Part 1</a><br>
								<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_manage_localStorage_2.swf">Watch Video - Part 2</a><br>
								<br>
								<br>
								Date Added: 2014-09-07</td>
							</tr>

							
							
							</table>
						<p>&nbsp;</p>
<p>&nbsp;</p>
						<p>&nbsp;</p>
						<p>&nbsp;</p>
<p>Building Disconnected Applications</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>UX Component - List Control </p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>http://www.ajaxvideotutorials.com/V12Videos/</p>

</body>

</html>
