<page>
    <shortlink>how to base a chart on a javascript series type</shortlink>
    <topic>How to Base a Chart on a Javascript Data Series</topic>
    <description>The data series used to create a chart can be generated using JavaScript.</description>
    <discussion>
        <p>A Javascript Data Series is useful for charts that use data that is pulled from controls on the UX Component. The JavaScript that calculates the data series can read data from controls on the UX Component using the {dialog.object}.getValue method. This data can be combined into a data series with one or more subseries that is then used by the Chart control to display a chart.</p>
        <p>To define a data series based on a JavaScript data source, select *[ui:Javascript]* for the data series *[ui:Data Source Type]* in the Data Series Builder. The *[ui:Javascript function]* property defines the JavaScript function to call to calculate the data series. Multiple subseries can be returned by the JavaScript function. Each subseries must be specified in the *[ui:Subseries names]* property for the data series.</p>
    </discussion>
    <sections>
        <section>
            <title>Defining the Javascript Data Series Function</title>
            <description>The JavaScript function that defines the data series must return data in one of two formats: a JSON array or crlf delimited list of pipe delimited data.</description>
            <cases>
                <case>
                    <title nested="2">Returning a JSON Array</title>
                    <description>The following function returns two subseries, sales and region, as a JSON array. The subseries name must exactly match the subseries specified in the *[ui:Subseries names]* property for the data series.</description>
                    <example><![CDATA[function jsData() {
    var a = [];
    a.push({sales: 23, region: 'east'});
    a.push({sales: 13, region: 'west'});
    a.push({sales: 3, region: 'south'});
    a.push({sales: 9, region: 'north'});

    return a;
}]]></example>
                </case>
                <case>
                    <title nested="2">Returning a CR-LF Delimited List</title>
                    <description>The same data series created by the function above can be defined as a CR-LF delimited list using pipes to separate the subseries. The order of the data in the series must match the order of the subseries defined in the *[ui:Subseries names]* property.</description>
                    <example><![CDATA[function jsData() {
    var a;
    a = "21|east" + "\n";
    a += "13|west" + "\n";
    a += "3|south" + "\n";
    a += "9|north";

    return a;
}]]></example>
                </case>
            </cases>
        </section>
        <section>
            <title>Rendering a Chart Based on a Javascript Data Series</title>
            <description>A chart that is based on a Javascript data series will not render anything on the initial load of the UX Component. This is because the Chart control requires an Ajax callback to be made in order to calculate the chart. This can be accomplished by calling the Chart control's refresh method:</description>
            <example><![CDATA[var cObj = {dialog.object}.getControl('Chart1');
cObj.refresh();]]></example>
        </section>
        <section>
            <description>When the Ajax callback is made to refresh the Chart control, the Javascript data series is calculated. After the data series is calculated, the Chart control is updated and the chart will appear.</description>
        </section>
        <section>
            <description>For more information about how to create a chart based on a Javascript data series, watch the videos below:</description>
            <videos>
                <title>Understanding the Javascript Data Series</title>
                <video>
                    <name>Watch Video - Part 1</name>
                    <link>http://www.viddler.com/v/1587d429</link>
                </video>
                <video>
                    <name>Watch Video - Part 2</name>
                    <link>http://www.viddler.com/v/aa4b148e</link>
                </video>
            </videos>
        </section>
    </sections>
</page>