<page>
    <shortlink>howto simulate an event</shortlink>
    <topic>How to Simulate the 'click' Event for a Control</topic>
    <description>Event handlers can be added for control events -- click, double tap, on key press, etc. In some cases, it may be necessary to trigger a control's event, such as the click event. This can be done by getting a pointer to the control and calling a function to simulate the click.</description>
    <discussion>
        <p>There may be times when you want to programmatically trigger the click event for a control in a component. This can be done by getting a pointer to the control's HTML DOM element and simulating the event using the *[js:$e.execute()]* function.</p>
    </discussion>
    <sections>
        <section>
            <title>Example: UX Component Control</title>
            <description>
                <p>The [{dialog.object}.getPointer()] method can be used to get a pointer to the DOM element for a control. Using this pointer, you can then trigger an event for the control using the *[js:$e.execute()]* function. For example:</p>
            </description>
            <example code="js"><![CDATA[// get a pointer to the Text control
var ele = {dialog.object}.getPointer('TEXTCONTROL_1');

// trigger the click event:
$e.execute(ele, 'click');]]></example>
        </section>
        <section>
            <title>Example: Grid Component Control</title>
            <description>
                <p>Events for controls in a Grid component can also be triggered programmatically using the *[js:$e.execute()]* function. For example:</p>
            </description>
            <example code="js"><![CDATA[// construct the grid ID for the FIRSTNAME field in the current row
var row = {grid.object}.getSelectedRow();
var id = '{grid.componentName}.V.R' + row + '.FIRSTNAME';

// trigger the click event:
$e.execute(id, 'click');]]></example>
        </section>
        <section>
            <title>Example: HTML Element</title>
            <description>The *[js:$e.execute()]* function can also be used to trigger events for any HTML element in a component. For example, suppose an event handler has been added to *[html:&lt;div&gt;]* control with the id 'myDiv1'. The click event can be triggered for 'myDiv1' using *[js:$e.execute()]* as follows:</description>
            <example code="js"><![CDATA[// the id for the div to execute the event
var id = 'myDiv1';

// trigger the click event for 'myDiv1'
$e.execute(id, 'click');]]></example>
            <important>HTML element IDs are case-sensitive!</important>
        </section>
        <section>
            <description>For more information, including how to trigger abstract events, see [$e.execute()].</description>
        </section>
    </sections>
    <links>
        <link link="ux component getPointer Method">{dialog.object}.getPointer()</link>
        <link link="corejs eexecute">$e.execute()</link>
    </links>
    <see>
        <ref link="corejs eexecute">$e.execute()</ref>
    </see>
</page>