<page>
    <shortlink>how to use javascript functions in client side watch expressions</shortlink>
    <topic>How to use JavaScript Functions in Client-side Watch Expressions</topic>
    <description>Client-side watch expressions can call a user defined JavaScript functions as part of the expression.</description>
    <discussion>
        <p>When defining client-side watch expressions (e.g. show/hide, enable, client-side dynamic style, dynamic images), you can use user defined Javascript functions in the expression. Functions can be declared in the global namespace or inside a private namespace (e.g. as a "property" of an object, such as {grid.object} or {dialog.object}.)</p>
        <p>You can use Javascript functions that are in your own namespace within the Grid or UX Component in client-side watch expressions.</p>
        <p>Client-side watch expressions refers to the following client-side expressions for controls in a component:</p>
    </discussion>
    <sections>
        <section>
            <list bullet="true">
                <item>
                    <name>Show/hide Expression</name>
                </item>
                <item>
                    <name>Enable expression</name>
                </item>
                <item>
                    <name>Readonly expression</name>
                </item>
                <item>
                    <name>Conditional style, class, text, and events</name>
                </item>
                <item>
                    <name>Conditional Image definitions</name>
                </item>
            </list>
            <note>This list is not exhaustive.</note>
        </section>
        <section>
            <title>Calling a Function in the Global Namespace</title>
            <description>Suppose you have defined the following function in the *[ui:Javascript Code]* section to use in a client-side enable expression for a new record button in a UX Component:</description>
            <example code="js"><![CDATA[function enableNewRecordButton () {
    if ({dialog.object}.isDirty()) {
        return false;
    }

    return true;
}]]></example>
        </section>
        <section>
            <description>To use this function in the client-side enable expression for the button, the expression would be defined as follows:</description>
            <example><![CDATA[enableNewRecordButton() = true]]></example>
        </section>
        <section>
            <title>Calling a Function in a Private Namespace</title>
            <description>To prevent function name collisions, it is beneficial to define JavaScript functions inside a namespace. For example, the following function is defined in the namespace of the {dialog.object} as a method of the {dialog.object}'s *[js:_functions]* property:</description>
            <example code="js"><![CDATA[{dialog.object}._functions.myfunction = function() {
    return true;
}]]></example>
        </section>
        <section>
            <description>The function, *[js:{dialog.object}._functions.myfunction]* can be used in a client-side watch expression. For example, the example below demonstrates how you would write a client-side show/hide expression that calls [js:{dialog.object}._functions.myfunction]*:</description>
            <example><![CDATA[{dialog.object}._functions.myfunction() = true]]></example>
        </section>
    </sections>
</page>