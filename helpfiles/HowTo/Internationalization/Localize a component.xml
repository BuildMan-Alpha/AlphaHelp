-<page>
    <shortlink>localize a component</shortlink>
    <topic>How to Localize a Component</topic>
    <description>There are several approaches available for localizing an application in Alpha Anywhere to support multiple languages.</description>
    <discussion>Alpha Anywhere includes several features to build applications in multiple languages. Applications can be translated on the server using language tags or on the client using JavaScript.</discussion>
    <sections>
        <section>
            <title>Language Tags</title>
            <description>
                <p>Language Tags (&lt;a5:r&gt; and &lt;/a5:r&gt;) are special HTML tags placed around text in an application to provide multiple languages. The text contained in the Language tags is replaced by Alpha Anywhere prior to downloading the component from the server.</p>
                <p>
                    <example code="html"><![CDATA[<a5:r>First Name</a5:r>]]></example>
                </p>
                <p>The text within the language tags is the key value used to look up what text to insert. The translations are built using the *[ui:Language definitions]* settings. You can add languages and define translations in the *[ui:Language definitions]* settings. It includes tools for extracting language tag placeholders from the component, setting translation defaults, and creating new translations.</p>
            </description>
            <example code=""><![CDATA[First Name=FirstNameInDefault]]></example>
            <cases>
                <case>
                    <title nested="2">Extracting Placeholders from a Component</title>
                    <description>
                        <p></p>
                    </description>
                </case>
                <case>
                    <title nested="2">Creating Default Translations</title>
                    <description>
                        <p></p>
                    </description>
                </case>
                <case>
                    <title nested="2">Adding a Language</title>
                    <description>
                        <p></p>
                    </description>
                </case>
                <case>
                    <title nested="2">Adding a Translation</title>
                    <description>
                        <p></p>
                    </description>
                </case>
                <case>
                    <title nested="2">Adding New Placeholders</title>
                    <description>
                        <p></p>
                    </description>
                </case>
            </cases>
        </section>
        <section>
            <description>
                <p>Define a new language and set the value to:</p>
            </description>
            <example code=""><![CDATA[First Name=FirstNameInFrench]]></example>
        </section>
        <section>
            <description>
                <p>Active language defines what language to use. The value of Active language maps to the defined languages in the *[ui:Language Definitions]* dialog.</p>
            </description>
        </section>
        <section>
            <description>
                <p>The language definition is stored with the component. For applications that use multiple components, it is easier to define all translations in a single location, such as in a database. Text Dictionary Tags can be used instead of Language Tags to provide translations defined in a database.</p>
            </description>
        </section>
        <section>
            <title>Text Dictionary Tags</title>
            <description>
                <p>The Text Dictionary is defined per project. Translations are stored in a database. The connection string defines where the translations are located. If no table exists, Alpha Anywhere will create the tables required to store Text Dictionary translations.</p>
            </description>
            <example code=""><![CDATA[<a5:t>Last Name</a5:t>]]></example>
        </section>
        <section>
            <title>Date Formats</title>
            <description>
                <p>Date formats around the world vary. Though the variety of date formats is not nearly as numerous as the number of active written languages, you'll need to consider whether or not the default client-side date format .</p>
                <p>Dates also may need __protected__clientSideDateFormat.</p>
            </description>
        </section>
        <section>
            <title>Setting the Text Direction</title>
            <description>
                <p>Some languages, such as Arabic and Hebrew, are read right-to-left. The text alignment for controls - text controls, labels, etc - needs to be changed to align text on the right of the controls to support these languages. The direction for the entire application can be set with CSS using the following JavaScript:</p>
            </description>
            <example code="js"><![CDATA[if ({dialog.object}._activeLanguage == 'Hebrew') {
document.body.style.direction='rtl';
} else {
document.body.style.direction='ltr';
}]]></example>
        </section>
        <section>
            <description>
                <p>This JavaScript can be placed in the UX Component's [onRenderComplete Event] to set the the text direction when the component is rendered.</p>
            </description>
        </section>
        <section>
            <description>
                <p>Supports any HTML markup. Replacement value can be as long as you need.</p>
            </description>
        </section>
        <section>
            <title>Client-side JavaScript Translations</title>
            <description>
                <p>For mobile applications, the Language and Text Dictionary tags may not work to localize an application due to the fact that they are resolved on the server. In an offline environment, the server is not available. Therefore, Language and Text Dictionary tags cannot be translated until the user has a connection and an Ajax Callback is made to translate the app.</p>
                <p>In this situation, JavaScript can be used to provide offline localization. See [Multi-Language Support in a Cordova Mobile App] to learn how this is done.</p>
            </description>
        </section>
    </sections>
    <links>
        <link link="Multi Language Support in a PhoneGap Mobile App">Multi-Language Support in a Cordova Mobile App</link>
    </links>
    <terms>localize</terms>
</page>