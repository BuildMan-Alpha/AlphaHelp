<page>
    <shortlink>server grid ux and Custom Components Storing state information</shortlink>
    <topic>How to Preserve State Information</topic>
    <description>Web applications are inherently stateless. In practical application, however, you need to preserve state.</description>
    <discussion>
        <p>When a user first visits a web site, a web application will typically create a new 'session'. Subsequent visits by the user to the web site are part of the same 'session'. Eventually, the session expires. When this happens, a new session is created the next time the user visits the website.</p>
        <p>In Alpha Anywhere applications, you will often want to set variables that apply only to a user's session. This is done using session variables. Session variables allow you to save and query information about the user's 'state'.</p>
        <p>Information about the user's state can also be stored using state objects in Grid and UX components.</p>
        <p>The advantage of the state object over session variables is that the state object outlives the session. When a session expires, all of the variables in the session object are lost.</p>
        <p>When a Grid or UX Component makes an Ajax Callback, the state object is available to any Xbasic code that handles the callback.</p>
        <p>Using the state object also makes state information available in both client-side JavaScript code in addition to server-side Xbasic. While session variables can only be created on the server, code on both server and client can create and read state information stored in the state object for Grid and UX Components.</p>
    </discussion>
    <sections>
        <section>
            <title>Storing State in Components Using the stateInfo Object</title>
            <description>
                <p>Grid and UX components provide a built-in state object that can be accessed in both server-side and client-side code to store state information. Several built-in JavaScript methods and properties are available for setting and getting state info. The *[js:.setStateInfo(obj)]* can be used to store state information in the component's state object. The *[js:.getStateInfo()]* method and *[js:.stateInfo]* object can be used to fetch the value of a stored item with the name *[js:ItemName]*. State info item names are case-sensitive in all client-side (JavaScript) code.</p>
            </description>
        </section>
        <section>
            <title nested="2">Storing State Info</title>
            <description>
                <p>State info can be created and stored in both client-side and server-side events and callbacks. On the client, use the *[js:.setStateInfo()]* method to store information the component's state object:</p>
            </description>
            <note>The examples in this section are for the UX Component. However, the concepts are the same for Grid components.</note>
            <example code="js"><![CDATA[{dialog.object}.setStateInfo({myvar1: 'value for myvar1'});]]></example>
        </section>
        <section>
            <description>Multiple values can be added to the state object as an object of name-value pairs. For example:</description>
            <example code="js"><![CDATA[var obj = {};
obj['myvar1'] = 'value for myvar1';
obj['myvar2'] ='value for myvar2';

{dialog.object}.setStateInfo(obj);]]></example>
        </section>
        <section>
            <description>
                <p>Data that is added to the state object on the client will be made available in Ajax callbacks to the server. Most server-side component events have access to state information. The auto-generated comments in an Xbasic event or Ajax callback function created using Action Javascript include instructions for accessing and setting state information. In general, most events set state information using the *[xb:e._state]* variable. For example:</p>
            </description>
            <example code="xb"><![CDATA[function myCallbackExample as c (e as p)

    e._state.myvar3 = "value for myvar3";

    ' Return optional JavaScript to execute on the client
    myCallbackExample = "alert("created myvar3");"
end function]]></example>
        </section>
        <section>
            <description>State information can also be set from an Xbasic script by returning JavaScript to to execute on the client. EG:</description>
            <example code="xb"><![CDATA[function myCallbackExample_JS as c (e as p)
    ' Define the javascript to execute on the client
    dim js as c =<<%js%
var obj = {};
obj['myvar1'] = 'value for myvar1';
obj['myvar2'] ='value for myvar2';

{dialog.object}.setStateInfo(obj);
%js%

    ' Return the javascript from the callback:
    myCallbackExample_JS = js
end function]]></example>
        </section>
        <section>
            <title nested="2">Reading State Info</title>
            <description>
                <p>Values in the state info object can be queried in client-side JavaScript using the *[js:getStateInfo()]* method or *[js:stateInfo]* property for the component's JavaScript object in the Grid and UX Component. The easiest way to retrieve state info is using the *[js:stateInfo]* property. The *[js:getStateInfo()]* method can be used to read state information, however *[js:getStateInfo()]* gets the data from the state object in the form of a text string of name value pairs delimited with &amp; characters.</p>
                <p>The *[js:stateInfo]* property, on the other hand, is a JSON object where each state info item can be referenced as if it were a property. For example:</p>
            </description>
            <note>The examples in this section are for the UX Component. However, the concepts are the same for Grid components.</note>
            <example code="js"><![CDATA[var stateInfo = {dialog.object}.stateInfo;
var myvar1 = stateInfo["myvar1"];
alert("myvar1 = " + myvar1);]]></example>
        </section>
        <section>
            <cases>
                <case>
                    <title nested="3">Case Matters</title>
                    <description>JavaScript is a case-sensitive langauge. When retrieveing the value of an item in the state info object, the name of the item to lookup must match the case used when assigned. For example, consider the following Xbasic:</description>
                    <example code="xb"><![CDATA[e._state.ThisIsMyVar = "some value"]]></example>
                </case>
                <case>
                    <description>When the state info object, *[xb:e._state.ThisIsMyVar]* is added to the client-side state info object, a property called "ThisIsMyVar" is added to the component's *[js:stateInfo]* property. When referencing the item, the case must match exactly. EG:</description>
                    <example code="js"><![CDATA[var stateInfo;
stateInfo = {dialog.object}.stateInfo;
alert("ThisIsMyVar: " + stateInfo["ThisIsMyVar"]);

// "thisismyvar" doesn't exist
alert("thisismyvar: " + stateInfo["thisismyvar"]);]]></example> 
                </case>
                <case>
                    <description>When this code executes, the first alert will display the message "ThisIsMyVar: some value". The second alert, however, will display "thisismyvar: undefined". This is because *[js:thisismyvar]* is not defined as a property of the stateInfo object.</description>
                </case>
            </cases>
        </section>
        <section>
            <description>
                <p>In server-side events and ajax callbacks, state information can be read by checking the *[xb:e.__si2]* object in UX Components and *[xb:request.variables.__si2]* in Grids. State info in a component will persist beyond a session if a session ends while the user is using the component.</p>
            </description>
            <example code="xb"><![CDATA[function myCallbackExample2 as c (e as p)
    dim myvar3 as C = ""
    
    ' Verify the e.__si2.myvar3 state info item exists
    ' before trying to assign it to the myvar3 variable.
    if (variable_exists("e.__si2.myvar3")) then
        ' It exists!
        myvar3 = e.__si2.myvar3
    end if

    ' ...

    myCallbackExample2 = "/*optional JavaScript to return*/"
end function]]></example>
        </section>
        <section>
            <title>Storing State in Components Using Session Variables</title>
            <description>
                <p>State information can also be stored using session variables. Data stored in the *[xb:session]* object can be accessed in any Xbasic script on the server. Session variables, however are not available on the client unless they are explicitly published. Published session variables are read-only and cannot be modified using client-side code. Further more, if a session variable changes after the component is initially rendered, the published session information on the client is not updated.</p>
            </description>
        </section>
        <section>
            <description>
                <p>Session variables are lost when the user's session ends or the session is cleared manually using the [Context.Session.Clear()] method. See [Understanding and Using Session Variables] to learn more about working with Sessions.</p>
            </description>
        </section>
        <section>
            <title>Example:Using State Info to Store Default Values for New Records in a Grid with a Detail View</title>
            <description>
                <p>This example demonstrates how to store defaults for a new record in the state info object in the Grid Component with a Detail View. In the case of continuous record entry, there may be some values entered by the user in a new record that you would like to use as the default value for every new record. In this example, we capture the "lastname" entered by the user when a new record is submitted and use the value as the default value for all new records.</p>
            </description>
        </section>
        <section>
            <description>The "lastname" submitted for a new record can be captured in the Grid Component's [AfterInsertRecord] event. The *[xb:e.dataSubmitted]* variable contains all values submitted when the user saves the new record. The code below captures the new "lastname" value and stores it in the Grid's stateInfo object. Data can be added to the state info object by setting values in the *[xb:e._state]* object:</description>
            <example code="xb"><![CDATA[' Get the "lastname" value submitted by the user
dim lastname as c
lastname = e.dataSubmitted.lastname

' store the "lastname" in the state info object:
e._state.defaultValue_LastName = lastname]]></example>
        </section>
        <section>
            <description>
                <p>Code can be added to the [onInitialValueCalculate] event set the default value for a new record. The onInitialValueCalculate event is triggered whenever the user clicks the "New Record" hyperlink to create a new record using the Detail View.</p>
                <p>In the onInitialValueCalculate event, we need to get the stored lastname value from *[xb:defaultValue_LastName]* in the state info object. The state info object is passed to the onInitialValueCalculate event through the *[xb:Context.Request.Variables]* object: *[xb:__si2]*. Our code needs to test that the *[xb:e.__si2.defaultValue_LastName]* variable exists and, if it does, set the default value for "lastname" to the stored value in the state object.</p>
            </description>
            <example code="xb">
                <![CDATA[' define a variable that will hold the default for "lastname"
dim defaultValue as c = ""

'Any data that was stored in the stateInfo object is submitted in the __si2 object.
if variable_exists("Request.Variables.__si2.defaultValue_LastName") then 
    defaultValue = Request.Variables.__si2.defaultValue_LastName
end if 

' If defaultValue is not empty, set the default for "lastname"
if defaultValue <> ""
    ' e.newvalues contains the default values for new records:
    e.newvalues.lastname = defaultValue
end if ]]>
            </example>
        </section>
        <section>
            <title>Videos</title>
            <description>Check out the videos below to learn more about the Grid and UX Component's state object:</description>
            <videos>
                <title>Setting State Variables in Grid and UX Components</title>
                <description> This video is for advanced developers. It shows how "state" information can be stored in the "state" object in the Grid or UX object. The data in the "state" object can be read in both client-side and server-side events. It can also be set in either client-side or server-side events. In many cases, storing state information in the Grid or UX object's "state" object is preferable to using session variables.</description>
                <video>
                    <name>Watch Video</name>
                    <link>http://www.viddler.com/v/ad93943c</link>
                </video>
            </videos>
        </section>
    </sections>
    <links>
        <link link="grid onInitialValueCalculate event">onInitialValueCalculate</link>
        <link link="grid AfterInsertRecord event">AfterInsertRecord</link>
        <link link="api objects session object clear method">Context.Session.Clear()</link>
        <link link="understanding and using session variables">Understanding and Using Session Variables</link>
    </links>
    <see>
        <ref link="grid component getStateInfo method">{grid.object}.getStateInfo()</ref>
        <ref link="grid component setStateInfo method">{grid.object}.setStateInfo()</ref>
        <ref link="ux component getStateInfo Method">{dialog.object}.getStateInfo()</ref>
        <ref link="ux component setStateInfo Method">{dialog.object}.setStateInfo()</ref>
        <ref link="context.session">Context.Session Object</ref>
    </see>
</page>