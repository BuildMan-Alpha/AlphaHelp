<page>  
    <topic>How to Handle Write Conflicts in a List Control Programmatically</topic>
    <description>When synchronizing a List control, write conflicts can be resolved programmatically instead of letting the user decide what should happen.</description>
    <discussion>
        <p>When synchronizing records in a List control back to the database, write conflicts may occur if another user has made edits to the record(s) being synchronized. When write conflicts occur, the List control alerts the user that a conflict has occurred and gives them the option to decide which edits should be kept. You can choose to use your change(s) or use the current value in the database.</p>
        <p>Handling write conflicts can be done using xbasic. In the Table Properties for the List control, you can define an xbasic function that is called when a write conflict occurs in the *[ui:On write conflict]* server-side event.</p>
    </discussion>
    <sections>
        <section>
            <figure>
                <link>images/onWriteConflict1.png</link>
            </figure>
        </section>
        <section>
            <description>In your xbasic function, you can define whether or not write conflicts have been handled as well as the method to use. For example, if you wanted to overwrite the values in the database, submitting all changes from the user, your xbasic function would look like this:</description>
            <example><![CDATA[function onWriteConflict as v (e as p)
    'Set flag indicating write conflicts have been resolved
    e.resolveConflicts = .t.

    'Keep the user values submitted to the database, overwriting values in database
    e.resolveConflictMethod = "useMine"
end function ]]></example>
        </section>
        <section>
            <description>The *[xb:e.resolveConflictMethod]* property lets you define how conflicts should be handled. The conflict resolution method can be one of three values:</description>
            <list>
                <item>
                    <name>useMine</name>
                    <description>All write conflicts are resolved by using the value the user submitted, overwriting the values in the database.</description>
                </item>
                <item>
                    <name>useTheirs</name>
                    <description>All write conflicts are resolved by using the values in the database and discarding the values from the user.</description>
                </item>
                <item>
                    <name>custom</name>
                    <description>Allows you to specify how the conflict should be resolved on a field-by-field basis.</description>
                </item>
            </list>
        </section>
        <section>
            <description>The videos below demonstrate using each of the three conflict resolution methods to programmatically resolve write conflicts in a List control.</description>
            <videos>
                <video>
                    <name>Options for Handling Write Conflicts when Syncing Data Part 1</name>
                    <link>http://www.ajaxvideotutorials.com/V12Videos/ux_list_detailview_writeConflicts1.swf</link>
                </video>
                <video>
                    <name>Options for Handling Write Conflicts when Syncing Data Part 2</name>
                    <link>http://www.ajaxvideotutorials.com/V12Videos/ux_list_detailview_writeConflicts2.swf</link>
                </video>
            </videos>
        </section>
    </sections>
</page>