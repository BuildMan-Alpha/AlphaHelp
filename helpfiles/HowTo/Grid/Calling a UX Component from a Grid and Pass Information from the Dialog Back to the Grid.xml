<page>
    <shortlink>server How to Call a UX Component from a Grid and Pass Information from the UX Component Back into the Grid</shortlink>
    <topic>How to Call a UX Component from a Grid and Pass Information from the UX Component Back into the Grid</topic>
    <description>Steps and examples on how to do this are described in this page.</description>
    <sections>
        <section>
            <title>Using the getParentObject() Method</title>
            <description>
                <p>The UX Component's *[js:getParentObject()]* method can be used to get a pointer to the parent object that opened the UX. If the UX is displayed from a Grid Component, the parent object will be the Grid.</p>
                <p>After adding the Action Javascript to the Grid to [Open a UX component], add a button to the component that will be displayed and place the following code to get the value from a control in the button's click event:</p>
            </description>
            <example code="js">
                <![CDATA[// Get a pointer to the parent object:
var parentGrid = {dialog.object}.getParentObject();

// Test that the parent exists:
if (parentGrid) {

    // Test that the parent has the "getSelectedRow" method:
    if (parentGrid.getSelectedRow !== undefined) {

        // Get the selected row:
        var parentRow = parentGrid.getSelectedRow();

        // Get the value of the NAME control:
        var val = {dialog.object}.getValue('NAME');

        // Set the value of the NAME field in the parent Grid:
        parentGrid.setValue('G','NAME',parentRow,val);

        // Close the window displaying the UX Component:
        {dialog.object}.closeContainerWindow(this);
    }
}]]>
            </example>
        </section>
        <section>
            <title nested="2">Capturing the Grid Row</title>
            <description>
                <p>In some situations, it may be necessary to capture the selected row for the Grid component before the UX component is displayed. To do this, add an [Inline Javascript] action to the onClick event for the button that opens the UX component and add the following code to the action:</p>
            </description>
            <example code="js"><![CDATA[window['__callingGridRow'] = '{grid.RowNumber}';]]></example>
        </section>
        <section>
            <description>Then, change the JavaScript to set the value in the Grid row to the following:</description>
            <example code="js">
                <![CDATA[// Get a pointer to the parent object:
var parentGrid = {dialog.object}.getParentObject();

// Test that the parent exists and is a Grid Component by testing for the "getSelectedRow" method
if (parentGrid && parentGrid.getSelectedRow !== undefined) {

    // Test that the window['__callingGridRow'] exists:
    if (window['__callingGridRow'] !== undefined) {

        // Get the selected row:
        var parentRow = window['__callingGridRow'];

        // Get the value of the NAME control:
        var val = {dialog.object}.getValue('NAME');

        // Set the value of the NAME field in the parent Grid:
        parentGrid.setValue('G','NAME',parentRow,val);

        // Close the window displaying the UX Component:
        {dialog.object}.closeContainerWindow(this);

        // Clean up the window object (delete the stored grid row):
        delete window['__callingGridRow'];
    }
}]]>
            </example>
        </section>
        <section>
            <title>Using the window Object</title>
            <steps>
                <step>
                    <description>Create a button on the Grid to open the UX Component. Add the [Open a UX component] Action Javascript action to the button's onClick event.</description>
                </step>
                <step>
                    <description>Next, add the [Inline Javascript] action to the button's onClick event. Make sure that this action gets executed before the action to open the UX Component. Place the following code in the Inline Javascript action:</description>
                    <example code="js">
                        <![CDATA[window['__callingGridAlias'] = {grid.object}.gridId;
window['__callingGridRow'] = '{Grid.RowNumber}'; ]]>
                    </example>
                    <note>This code will create two global Javascript variables that contain the name of the Grid alias, and the current row number in the Grid.</note>
                </step>
                <step>
                    <description>In the UX Component, add a button and place the following code in the button's click event:</description>
                    <example code="js">
                        <![CDATA[var parentGrid = window['__callingGridAlias'];
var parentRow = window['__callingGridRow'];
if (typeof parentGrid != 'undefined' && typeof parentRow != 'undefined') {
    var val = {dialog.object}.getValue('NAME');
    window[parentGrid + 'GridObj'].setValue('G','NAME',parentRow,val);

    {dialog.object}.closeContainerWindow(this);

    // Remove __callingGridRow and __callingGridAlias from the window object:
    delete window['__callingGridRow'];
    delete window['__callingGridAlias'];
} ]]>
                    </example>
                </step>
            </steps>
        </section>
        <section>
            <description>This code checks to see if both the __callingGridAlias global variable and __callingGridRow variable are defined. If they are, then it does this:</description>
            <steps>
                <step>
                    <description>Reads the value of a control called 'NAME' in the UX Component.</description>
                </step>
                <step>
                    <description>Executes the calling Grid's .setValue() method. </description>
                </step>
                <step>
                    <description>Gets a pointer to the window that displays the UX Component.</description>
                </step>
                <step>
                    <description>Closes (i.e. hides) the window.</description>
                </step>
                <step>
                    <description>Deletes the __callingGridRow and __callingGridAlias variables from the window object so they are undefined. Deleting the variables from the window object prevents updating the Grid if for some reason the UX Component is opened without setting the __callingGridAlias and __callingGridRow variables.</description>
                </step>
            </steps>
        </section>
        <section>
            <description>The only tricky part about the code here is the way in which the calling Grid's .setValue() method is called. Since we know the calling Grid's alias (it is in __callingGridAlias), we can construct the object name for the calling Grid ( parentGrid + '_GridObj'). Then we look in the global Javascript variable frame for the object (*[js:window[parentGrid+'_GridObj']]*). Once we have the object, we can call methods of the object.</description>
        </section>
    </sections>
    <links>
        <link link="open a ux component">Open a UX component</link>
        <link link="inline-javascript">Inline Javascript</link>
    </links>
</page>