<page>
    <shortlink>how to display fade out message on save</shortlink>
    <topic>How to Display a Fade Out Message When a Record is Saved</topic>
    <description>Fade out messages are commonly used to notify the user when an action has completed. You can add them to your applications using Action Javascript.</description>
    <discussion>
        <p>Fade out messages are often used to display a temporary message to the user. They are typically used to display confirmation that an event has completed. They're also used to provide notifications when something has happened (such as someone logging in to a chat client or receiving a new message.)</p>
        <p>Fade out messages can be added to applications using Action Javascript. The [Fade Out Message] action can be used to display a temporary message in an app when an event occurs - e.g. when the user clicks a button or after a record is saved. The message can be shown in an HTML div element in the Grid Component.</p>
    </discussion>
    <sections>
        <section>
            <description>
                <p>To add a fade out message to your application, a div element needs to be added to the Grid component. The div needs to have a unique ID defined by its id attribute. For example, the following HTML can be added to the freeform edit region above the Grid Component:</p>
            </description>
            <example code="html"><![CDATA[<div id="myFadeOutMessage"></div>]]></example>
            <figure>
                <link>images/fadeoutMsg5.png</link>
            </figure>
        </section>
        <section>
            <description>
                <p>Next, the Fade Out Message action needs to be added to the Grid Component as a [Javascript Action]. Javascript Actions can be used to call Action Javascript from a Grid's Client-side event. The fade out message should be shown after the Grid is saved using the *[Submit]* button. The  [afterGridSubmit] Client-side event is called after the submit process has completed.</p>
                <p>To add the Javascript Action, open the Grid Properties pane and locate the *[ui:Javascript Actions]* property. Click the [...] Smart Field button to open the Javascript Action dialog.</p>
            </description>
            <figure>
                <link>images/fadeoutMsg3.png</link>
            </figure>
        </section>
        <section>
            <description>
                <p>Click the *[ui:Add New Action]* to add a new Javascript Action called 'RecordSaved'. Then, select the action and click *[ui:Edit Action]* to open the Action Javascript editor.</p>
            </description>
            <figure>
                <link>images/fadeoutMsg4.png</link>
            </figure>
        </section>
        <section>
            <description>
                <p>Add a new *[Fade Out Action]* using the *[ui:[add] Add New Action]* button. You can use the search box to locate the action quickly in the Select an Action dialog.</p>
                <p>In the Fade Out Message builder, change the message text to *[xb:'Record was saved']* and set the *[ui:Div id]* property to the id you gave the div that was added to the Grid's freeform layout previously. In the example shown earlier, the div's id was "myFadeOutMessage":</p>
            </description>
            <figure>
                <link>images/fadeoutMsg1.png</link>
            </figure>
        </section>
        <section>
            <description>
                <p>Finally, locate the *[ui:afterGridSubmit]* Client-side action. You can find it listed in Code &gt; Client-side Events. Use the *[ui:Filter]* box below the Client-side Events list to search for the afterGridSubmit event.</p>
            </description>
            <figure>
                <link>images/fadeoutMsg6.png</link>
            </figure>
        </section>
        <section>
            <description>
                <p>Add the following JavaScript to the event. This JavaScript checks the *[js:e.hasErrors]* property to see if there were any errors while saving the Grid. If there are no errors, it runs the *[RecordSaved]* action.</p>
            </description>
            <example code="js"><![CDATA[if (e.hasErrors == false) {
	{grid.object}.runAction('RecordSaved');
}]]></example>
            <tip>You can use the *[ui:[lamp] Action Javascript]* button in the Javascript Event Handlers editor to create or edit Javascript Actions into any Client-side event. To insert a Javascript action, click in the code editor where you want to insert the action then select *[ui:[lamp] Action Javascript]* &gt; *[ui:Insert code to run a Javascript Action]*. Select the action, then click OK.</tip>
        </section>
        <section>
            <description>Depending on how you've configured editing records using the Grid Component, the call to other Client-side events. If individual records can be saved, the JavaScript above can be added to the [afterRowSubmit] Client-side event. If the Grid Component has a Detail View that is used to edit records, the JavaScript can be added to the [afterDetailViewSubmit] event to display the fade out message.</description>
        </section>
        <section>
            <description>For more information, watch the video below.</description>
            <videos>
                <title>Displaying a Fade Out message on a Grid when a Record is Saved</title>
                <description>A common pattern in web applications is to display a temporary message (a "fade out" message) to confirm when an event has completed. This video shows how to create a fade out message in a Grid Component when a record is saved.</description>
                <video>
                    <name>Watch Video</name>
                    <link>https://share.vidyard.com/watch/DsSFhb96HYqRtqkfsTAcQ2</link>
                </video>
            </videos>
        </section>
    </sections>
    <links>
        <link link="fade out message">Fade Out Message</link>
        <link link="grid properties javascript actions javascript actions property">Javascript Action</link>
        <link link="grid component client side aftergridsubmit event">afterGridSubmit</link>
        <link link="grid component client side afterrowsubmit event">afterRowSubmit</link>
        <link link="grid component client side afterdetailviewsubmit event">afterDetailViewSubmit</link>
        <link href="/images/tools/ellipsesButton.png">...</link>
        <link href="/images/$$generic.add.png">add</link>
        <link href="/images/$$generic.lamp.png">lamp</link>
    </links>
    <see>
        <ref link="grid properties javascript actions javascript actions property">Grid Component &gt; Javascript Actions</ref>
    </see>
</page> 