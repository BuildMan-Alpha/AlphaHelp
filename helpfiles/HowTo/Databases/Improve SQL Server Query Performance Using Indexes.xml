<page>
    <shortlink>howto improve sql server query performance using indexes</shortlink>
    <topic>How To Improve SQL Server Query Performance by Using Indexes</topic>
    <description>Performance of queries against SQL Server can be affected by string arguments due to an issue with the SQL Server optimizer.</description>
    <discussion>
        <p>It appears that when a query has a string value argument, the SQL Server optimizer does not always see the type as matching some types of columns (for example CHAR columns with a fixed size). As a result, the optimizer will ignore indexes and hints to use them and resort to a table scan.</p>
        <p>For example:</p>
    </discussion>
    <sections>
        <section>
            <example code="sql"><![CDATA[SELECT AmountDue, AmountPaid, AccountNumber FROM Invoices WHERE AmountDue > 0 and CustomerId = :CustomerId]]></example>
        </section>
        <section>
            <description>
                <p>If *[sql:CustomerId]* is defined in the database as *[sql:Char(5)]*, the optimizer may not recognize the *[xb::CustomerId]* argument contains a matching value because the type of the argument is *[sql:VARCHAR]*.</p>
                <p> In such cases, adding a *[sql:CAST]* to the argument value causes the optimizer to choose the appropriate index because the types match:</p>
            </description>
            <example code="sql"><![CDATA[SELECT AmountDue, AmountPaid, AccountNumber FROM Invoices WHERE AmountDue > 0 and CustomerId = CAST(:CustomerId AS CHAR(5))]]></example>
        </section>
    </sections>
</page>