<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<title>LibCurl has a callback to allow</title>
<style>
<!--
p            { font-family: Tahoma; width: 7in; font-size: 9pt; margin-left: .5in; margin-top:0px; margin-bottom:5px }

	
p, ul, li            { font-family: Tahoma; width: 7in; font-size: 9pt; margin-left: .5in; margin-top:0px; margin-bottom:5px }
.xbasic      { font-family: Courier New; font-size: 10pt; color: #0000FF; margin-left: 1.1in;
               margin-top: 0; margin-bottom: 0 }
.xbasicSmall      { font-family: Courier New; font-size: 9pt; color: #0000FF; margin-left: .75in;
               margin-top: 0; margin-bottom: 0 }
               
td           { font-family: Tahoma; font-size: 8pt; VERTICAL-ALIGN: top}
h1           { font-family: Tahoma; font-size: 11pt; color: #ff0000 }
h2           { font-family: Tahoma; font-size: 10pt ; color: #ff0000}
h4 			  {font-family: Tahoma; font-size: 9pt; font-weight: bold; color: #ff0000}
h3           { font-family: Tahoma; font-size: 10pt ; color: #ff0000; margin-left: .5in;}
.note		{ padding: 10px; background-color: #f0f0f0;	border-radius: 3px;}            




-->
</style>
</head>

<body>


<div style="color: rgb(34, 34, 34); font-family: arial, sans-serif; font-size: 12.8000001907349px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">
	<p>&nbsp;</p>
	<p>&nbsp;</p>
						<table border="1" cellspacing="1" cellpadding="3" id="table67" style="color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; margin-left: 0.5in; border-collapse: collapse; " width="992">

							
							
							<tr>
								<td width="103" style="font-family: Tahoma; font-size: 8pt; vertical-align: top; ">
								UX Component</td>
								<td width="143" style="font-family: Tahoma; font-size: 8pt; vertical-align: top; ">
								File Upload to Amazon S3 Storage</td>
								<td style="font-family: Tahoma; font-size: 8pt; vertical-align: top; ">
								Amazon S3 is a popular service for storing 
								files. In this video we show how you can build a 
								UX component that allows a user to upload files 
								from their machine directly to S3 storage. <br>
								<br>
								<br>
								<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_amazon_s3_1.swf">Watch Video 
								- Part 1</a><br>
								<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_amazon_s3_2.swf">Watch Video 
								- Part 2</a><br>
								<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_amazon_s3_file_upload.zip">Download Component 
								</a><br>
								<br>
								Date added: 2014-31-22</td>
							</tr>

							
							
							<tr>
								<td width="103" style="font-family: Tahoma; font-size: 8pt; vertical-align: top; ">
								UX and Grid Component</td>
								<td width="143" style="font-family: Tahoma; font-size: 8pt; vertical-align: top; ">
								Image Upload</td>
								<td style="font-family: Tahoma; font-size: 8pt; vertical-align: top; ">
								When you use the Image Upload action in Action 
								Javascript to upload an image to an image field 
								in a database you now have the option of 
								uploading the image to Amazon S3 storage, rather 
								than to a folder on the Alpha Server.<br>
								<br>
								This video shows how to set up image upload to 
								Amazon S3 and discusses some of the benefits of 
								upload to images to Amazon S3, rather than to 
								the Alpha Anywhere server that is hosting your 
								application.<br>
								<br>
								<a href="http://www.ajaxvideotutorials.com/V12Videos/grid_imageUpload_s3_1.swf">Watch Video 
								- Part 1</a><br>
								<a href="http://www.ajaxvideotutorials.com/V12Videos/grid_imageUpload_s3_2.swf">Watch Video 
								- Part 2</a><br>
								<a href="http://www.ajaxvideotutorials.com/V12Videos/grid_imageUpload_s3_3.swf">Watch Video 
								- Part 3</a><br>
								<br>
								Date added: 2015-01-28</td>
							</tr>

							
							
							</table>
						<p>&nbsp;</p>
	<p>&nbsp;</p>
	<p>&nbsp;</p>
						<p>&nbsp;</p>
	<p>&nbsp;</p>
	<p>&nbsp;</p>
	<p><b>File Upload - Amazon S3</b> - A new action has been added to Action 
	Javascript for the UX component to upload files to a bucket in Amazon S3 
	storage. </p>
	<p class="note"><b>NOTE</b>: This action is not available for the Grid 
	Component. However, the standard 'File Upload' and 'Image Upload' actions in 
	Action Javascript, which iare supported in the Grid now supports an option 
	to target the upload to Amazon S3.</p>
	<p>
	<br>
	<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_amazon_s3_1.swf">Watch Video 
	- Part 1</a><br>
	<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_amazon_s3_2.swf">Watch Video 
	- Part 2</a></p>
	<p>&nbsp;</p>
	<p>The benefit of this method is that the upload occurs directly to the 
	Amazon servers without putting any load on the the Alpha Application Server.</p>
	<p class="note"><b>NOTE</b>: There is a small load on the Alpha Server for 
	each file that is uploaded because a callback has to be made to the Alpha 
	server to sign the URL used for the upload. This is necessary because the 
	secret key for your Amazon account is stored on the Alpha server.</p>
	<p>Features of the Amazon S3 File Upload include:</p>
	<ul>
		<li>ability to upload a single file or multiple files</li>
		<li>ability to define rules for maximum size of an individual file, or 
		all files (if multiple file upload is supported)</li>
		<li>ability to show progress during while file(s) are being uploaded</li>
		<li>ability to cancel an file upload</li>
		<li>full event model that allows you to completely customize the action.</li>
		<li>ability to specify the name (including sub-folder name) for each 
		object that is stored on S3. A Javascript function can be called to 
		dynamically compute the fully qualified name of the object on S3.</li>
		<li>ability to set read permission on the uploaded files (public read or 
		authenticated read)</li>
	</ul>
	<p>&nbsp;</p>
	<p class="note"><b>IMPORTANT</b>: Before you can upload files to Amazon S3, 
	you must configure your Amazon bucket to allow CORS support. CORS 
	(Cross-Origin Resource Sharing allows you to make callbacks to a different 
	server than the server (the Amazon server in this case) from which the page 
	was originally loaded (your Alpha server). To configure your bucket you will 
	need to open the AWS console.&nbsp; You can click the 'Setting CORS Support 
	on your Amazon Bucket' in the Action Javascript builder for more 
	information.</p>
	<p>&nbsp;</p>
	<p>In order to create an action to upload files to Amazon S3, use Action 
	Javascript. Select the 'File Upload = Amazon S3 Storage' action.</p>
	<p>&nbsp;</p>
	<p><img border="0" src="amazons3action.jpg"></p>
	<p>&nbsp;</p>
	<p>The genie for this action is shown below:</p>
	<p>&nbsp;</p>
	<p><img border="0" src="amazons3_genie_2.jpg"></p>
	<p>&nbsp;</p>
	<p>&nbsp;</p>
	<p><i>Method for specifying Amazon S3 credentials and bucket</i> - There are 
	two ways in which you can specify the credentials for your Amazon S3 bucket. 
	You can specify a named storage connection string, or you can use the 
	'Explicit' option, in which case you will need to specify your Amazon access 
	key, secret and bucket name. </p>
	<p class="note"><b>NOTE:</b> To create a names storage connection string, go 
	to the Tools menu when the Web Projects Control Panel has focus and select 
	the Storage Connection Strings menu item.</p>
	<p>&nbsp;</p>
	<p><img border="0" src="amazons3_explicit.gif"></p>
	<p>&nbsp;</p>
	<p><i>Allow multiple files</i> - If you check this box, the user will be 
	able to select multiple files. The files will be uploaded in parallel.</p>
	<p>If you check this box then you can specify value for the <i>Max total 
	file size</i> property, which is the maximum combined size of all selected 
	files. By default, this property is set to -1, which means no maximum.</p>
	<p><i>Display progress during upload </i>- If you check this property, then 
	progress will be displayed during the file upload.</p>
	<p><b>NOTE</b>: If you do not check this property, you can still create your 
	own progress display by adding custom code to the Javascript On Progress 
	event.</p>
	<p><i>Allow cancel</i> - Specify if the user can cancel the upload after it 
	has been started, but before it completes.</p>
	<p><i>Progress indicator type</i> - The progress can be displayed either as 
	a text that shows the percentage complete, or as a bar.</p>
	<p>In the image below, progress is shown for a multiple file upload using 
	the 'bar' option. Note that the <i>Allow cancel</i> property was also 
	checked, and so a small button to the right of the bar is shown where the 
	user can click to cancel the upload. </p>
	<p>&nbsp;</p>
	<p><img border="0" src="progress_s3_bar.gif"></p>
	<p>This next image shows progress using the 'text' option.</p>
	<p>&nbsp;</p>
	<p><img border="0" src="s3progress_text.jpg"></p>
	<p>&nbsp;</p>
	<p><i>Placeholder for progress indicator</i> - You must specify the name of 
	a Placeholder control where the progress will be shown.</p>
	<p><i>Authenticated read</i> - Allows you to specify whether the file that 
	is uploaded to S3 is 'public read' or 'authenticated read'. A 'public read' 
	file can be read by specifying the URL of the object on Amazon S3. For 
	example, assume you upload a file called '<font color="#0000FF" face="Courier New">Image1.jpg</font>' 
	and you use the same object name on S3 (i.e. you don't specify any code in 
	the <i>Target object name on Amazon S3 </i>event so that the name of the 
	object on Amazon is the same as the filename of the file on the 
	client-machine), you will be able to read the file using this URL:</p>
	<p>&nbsp;</p>
	<p class="xbasic">
	http://&lt;nameOfYourAmazonS3Bucket&gt;.s3.amazonaws.com/Image1.jpg</p>
	<p>&nbsp;</p>
	<p>If the Authenticated read property is checked then you can retrieve an 
	object from S3 using Xbasic functions in server-side code.</p>
	<p>For example, assume you wanted to retried 'Image1.jpg' which had been 
	uploaded to S3 with the Authenticated read property turned on, you could 
	perform an Ajax callback that executed this code to retrieve the file and 
	save it to a local file called <font color="#0000FF" face="Courier New">c:\myfiles\Image1.jpg</font>.</p>
	<p>&nbsp;</p>
	<p class="xbasic">dim cs as c </p>
	<p class="xbasic">cs = &quot;::storage::YourStorageConnectionStringName&quot;</p>
	<p class="xbasic">a5storage_getitem_as_file(cs,&quot;Image1.jpg&quot;,&quot;c:\myfiles\Image1.jpg&quot;)</p>
	<p>&nbsp;</p>
	<p>The full list of a5storage helper functions is shown below:</p>
	<p><img border="0" src="a5storagefunctions.jpg"></p>
	<p>&nbsp;</p>
	<p>&nbsp;</p>
	<p><b>Validating File Selection</b></p>
	<p>You can specify a maximum file size for any file that the user can 
	select. By default this is set to -1, which means no maximum.</p>
	<p>If the Allow multiple files property is checked you can also specify a 
	maximum total file size for all files combined.</p>
	<p>You can specify list of file types that the user can select in the 
	Allowed file types property. You can enter a comma delimited list of file 
	extensions. For example</p>
	<p class="xbasic">.png,.jpg,.jpeg</p>
	<p>&nbsp;</p>
	<p><img border="0" src="s3doc.gif"></p>
	<p>You can also customize the error messages that are shown if a rule is 
	violated. For example, in the image below, the message that will be shown if 
	the user selects a file that is larger than 1,000,000 bytes is</p>
	<p class="xbasic">File exceeds max allowed size of [maxfilesize]</p>
	<p>[maxfilesize] is a placeholder that will be replaced at run-time.</p>
	<p>You can also completely customize the display of validation error 
	messages by defining your own <i>on Validate Error </i>event handler in the 
	Javascript Events section. You can also use language and text dictionary 
	tags (&lt;a5:r&gt;..&lt;/a5:r&gt; and &lt;a5:t&gt;..&lt;/a5:t&gt;) to translate the messages into 
	different languages.</p>
	<p>If you define a custom <i>on Validate Error </i>handler then you should 
	blank out the default messages so that the system messages do not display.</p>
	<p>&nbsp;</p>
	<p>&nbsp;</p>
	<p>&nbsp;</p>
	<p><b>Javascript Events</b></p>
	<p>The genie exposes the following Javascript events:</p>
	<p><i>Target object name on Amazon S3</i> - If this event is not defined, 
	the name of the object in the S3 bucket will be the same as the name of the 
	object on the client machine. For example, if the user uploads a file called 
	'sales_analysis_march_2015.xlsx', the name of the file in the Amazon bucket 
	will be 'sales_analysis_march_2015.xlsx'.</p>
	<p>Your code in this event can reference these variables:</p>
	<ul>
		<li><i>e.name</i> - name of the file on the client machine</li>
		<li><i>e.type</i> - size of the file</li>
		<li><i>e.size</i> - mime type of the file</li>
	</ul>
	<p>&nbsp;</p>
	<p>However, you can add code to this event to compute a different name on 
	S3. Your Javascript code must return the name you want to use. For example, 
	assume you want to store the uploaded file in a folder called 'sales 
	analysis' then your Javascript code in this event will be</p>
	<p class="xbasic">return 'sales_analysis/' + e.name</p>
	<p>&nbsp;</p>
	<p><i>Before file select </i>- fires after the user clicks the button to 
	initiate the action, but before any files are selected. If your code 
	executes <font color="#0000FF" face="Courier New">return false</font>, the 
	action is aborted.</p>
	<p><i>After file select </i>- fires after the user has selected the file(s) 
	to upload, but before any uploads have actually started. Your code can 
	reference a Javascript variable called
	<font color="#0000FF" face="Courier New">e</font>, which is an array of 
	objects containing information about each file that was selected.&nbsp; If 
	your code executes <font color="#0000FF" face="Courier New">return false</font>, 
	the action is aborted. You can use this event to perform custom validation 
	on the selected files before initiating the upload. If you are writing a 
	custom onProgress event handler you can use this event to set up the HTML 
	for your custom progress indicator.</p>
	<p><i>On progress</i> - Fires each time progress information is returned by 
	Amazon. You can use this event to create a custom progress handler. You code 
	can reference these variables:</p>
	<ul>
		<li><i>e.percent</i> - percentage complete</li>
		<li><i>e.message </i>- message describing the current state of the 
		upload</li>
		<li><i>e.name</i> - name of the file</li>
		<li><i>e.targetName </i>- name on Amazon S3 - same as e.name if you have 
		not defined any code for the 'Target object name on Amazon S3' event</li>
		<li><i>e.size</i> - file size</li>
		<li><i>e.type</i> - mime-type</li>
	</ul>
	<p><i>On Upload Complete - Individual File</i> - (If multiple files are 
	allowed) - fires after each individual file has been uploaded.</p>
	<p><i>On Upload Complete - All Files</i> - (If multiple files are allowed) - 
	fires after all files have been uploaded.</p>
	<p><i>On Upload Complete</i> - (If only a single file is allowed) - fires 
	after the file has been uploaded.</p>
	<p><i>On validate error</i> - Fires if any file violates the file rules 
	(maximum size or allowed type).</p>
	<p>&nbsp;</p>
	<p>&nbsp;</p>
	<p><b>File Download - Amazon S3</b> - A new option has been added to the 
	File Download action in Action Javascript to allow you to download files 
	that are stored in Amazon S3 storage.</p>
	<p>The File Download dialog allows you to specify the File Download 'Type' 
	as 'Amazon S3 Storage' </p>
	<p>&nbsp;</p>
	<p><img border="0" src="s3download_1.jpg"></p>
	<p>&nbsp;</p>
	<p>Once you set the type as Amazon S3 Storage you can specify additional 
	properties. These include:</p>
	<p>&nbsp;</p>
	<ul>
		<li><i>How to specify Amazon credential</i> - The options are<font color="#0000FF" face="Courier New"> 
		Specify now </font>or <font color="#0000FF" face="Courier New">
		Credentials are specified with the object name</font>.The smart field 
		for the property opens a dialog (shown below) that explains the option.<br>
		<br>
&nbsp;</li>
	</ul>
	<p><img border="0" src="s3download_credentialMode.jpg"><br>
	<br>
&nbsp;</p>
	<ul>
		<li><i>Method for specifying Amazon credential</i> - Can be set to
		<font color="#0000FF" face="Courier New">ConnectionString</font> or
		<font color="#0000FF" face="Courier New">Explicit</font>. If you choose 
		the <font color="#0000FF" face="Courier New">ConnectionString</font> 
		option then you can specify the name of a storage connection string. 
		Otherwise you must specify your Amazon access key, secret and bucket 
		name.</li>
		<li><i>Method for specifying Amazon object name to download</i> - This 
		is how you specify the name of the object on Amazon that you want to 
		download. Options are <font color="#0000FF" face="Courier New">FieldName</font> 
		- the name of a field in the component that contains the name of the 
		object you want to download, <font color="#0000FF" face="Courier New">
		Explicit</font> - the explicit name of the object (e.g. image1.jpg), or
		<font color="#0000FF" face="Courier New">Javascript</font>&nbsp; - the 
		name of a Javascript function that will return the object name. <br>
		<br>
		In all cases, if you have specified
		<font color="#0000FF" face="Courier New">Credentials are specified with 
		the object name</font> for the <i>How to specify Amazon credentials 
		prompt</i> you must specify the object name using the special JSON 
		syntax that includes the connection string property.</li>
	</ul>
	<p>&nbsp;</p>
	&nbsp;<p>
	<span style="font-family: arial, sans-serif; background-color: #FFFFFF"><b>
	Action Javascript - Image Upload Action - UX and Grid Component - Amazon S3 
	- </b>The Image Upload action allows you to upload an image and store the 
	image in a field in the table to which the UX or Grid component is bound.</span></p>
	<ul>
		<li>
		<span style="font-family: arial, sans-serif; background-color: #FFFFFF">
		If the image is bound to a binary field in the target table, the binary 
		data for the uploaded image is stored in the binary field in the target 
		table.</span></li>
		<li>
		<span style="font-family: arial, sans-serif; background-color: #FFFFFF">
		If the image is bound to a character field in the target table, the 
		image is uploaded to the server and then saved in a file in a specified 
		folder on the server. The filename of the image on the server is saved 
		in the character field in the target table.</span></li>
	</ul>
	<p><span style="font-family: arial, sans-serif; background-color: #FFFFFF">
	In the case where the image is bound to a character field in the target 
	table <b>you now have the new option of uploading the image to Amazon S3 
	storage </b>rather than to the Alpha Anywhere server.</span></p>
	<p>
	<a href="http://www.ajaxvideotutorials.com/V12Videos/grid_imageUpload_s3_1.swf">Watch Video 
								- Part 1</a><br>
	<a href="http://www.ajaxvideotutorials.com/V12Videos/grid_imageUpload_s3_2.swf">Watch Video 
								- Part 2</a><br>
	<a href="http://www.ajaxvideotutorials.com/V12Videos/grid_imageUpload_s3_3.swf">Watch Video 
								- Part 3</a></p>
	<p>&nbsp;</p>
	<p><span style="font-family: arial, sans-serif; background-color: #FFFFFF">
	Uploading the image to Amazon S3 storage is an extremely efficient solution 
	because it places minimal load on the Alpha server (both for uploading the 
	image and then subsequently displaying the image when the component is run).</span></p>
	<p><span style="font-family: arial, sans-serif; background-color: #FFFFFF">
	When you choose the option to upload to Amazon S3 storage you can either 
	upload the image as:</span></p>
	<ul>
		<li>
		<span style="font-family: arial, sans-serif; background-color: #FFFFFF">
		public read</span></li>
		<li>
		<span style="font-family: arial, sans-serif; background-color: #FFFFFF">
		protected read</span></li>
	</ul>
	<p class="note"><b>NOTE:</b> The Image Upload builder has a property called
	<font color="#0000FF" face="Courier New">Authenticated read</font>. To use 
	the 'public read' option, the <font color="#0000FF" face="Courier New">
	Authenticated read </font>property should&nbsp; <b>not</b> be checked. To 
	use the 'protected read' option, the
	<font color="#0000FF" face="Courier New">Authenticated read</font> property 
	should be checked.</p>
	<p><span style="font-family: arial, sans-serif; background-color: #FFFFFF">
	When you upload using the 'public read' option, the image is uploaded to 
	Amazon S3 and then the URL to the image is stored in the character field in 
	the database. For example, this URL might look like:</span></p>
	<p class="xbasic"><span style="background-color: #FFFFFF">
	<font face="arial, sans-serif">https://s3.amazonaws.com/yourBucketNamehere/imageFileName</font></span></p>
	<p><span style="background-color: #FFFFFF"><font face="arial, sans-serif">
	This URL can be pasted into a browser address bar and the image from Amazon 
	S3 storage will be shown. In other words, it is not necessary to supply any 
	credentials in order to see the image.</font></span></p>
	<p><span style="background-color: #FFFFFF"><font face="arial, sans-serif">
	When you upload using the 'protected read' option, the image is uploaded to 
	Amazon S3 as a protected file and the value that is stored in the character 
	field in the database is a special JSON string that contains information 
	about the storage connection string and the object name on Amazon S3. For 
	example:</font></span></p>
	<p class="xbasic"><span style="background-color: #FFFFFF">
	<font face="arial, sans-serif">{cs: 'name of your storage connection 
	string', object: 'name of object on S3', source: 'S3'}</font></span></p>
	<p>&nbsp;</p>
	<p>&nbsp;</p>
	<p class="note"><span style="background-color: #FFFFFF">
	<font face="arial, sans-serif"><b>NOTE</b>: When you check the </font>
	</span><font color="#0000FF" face="Courier New">Authenticated read</font><font face="arial, sans-serif"><span style="background-color: #FFFFFF"> 
	property you <b>must</b> use the </span></font>
	<font color="#0000FF" face="Courier New">Named Storage Connection String
	</font><span style="background-color: #FFFFFF">
	<font face="arial, sans-serif">option as the </font></span>
	<font color="#0000FF" face="Courier New">Method for specifying Amazon S3 
	credentials</font><span style="background-color: #FFFFFF"><font face="arial, sans-serif">.</font></span></p>
	<p>&nbsp;</p>
	<p><span style="background-color: #FFFFFF"><font face="arial, sans-serif">
	When the component is rendered, the Alpha server automatically takes this 
	JSON encoded string and computes a special signed URL that can be used to 
	retrieve the image from S3. This special signed URL expires after a certain 
	amount of time (current set to 240 seconds).</font></span></p>
	<p>&nbsp;</p>
	<p><span style="background-color: #FFFFFF"><font face="arial, sans-serif">
	When an image is upload to S3 the work flow is as follows:</font></span></p>
	<ul>
		<li><span style="background-color: #FFFFFF">
		<font face="arial, sans-serif">an initial Ajax callback is made to the 
		Alpha server to 'sign' the URL that will be used to upload the image to 
		Amazon S3 (this is a very 'lightweight' action which places very little 
		load on the Alpha server).</font></span></li>
		<li><span style="background-color: #FFFFFF">
		<font face="arial, sans-serif">the signed URL is retuned to the browser 
		and the browser then initiates the file upload to the Amazon S3 server 
		(all communication is between the browser and Amazon S3 - there is no 
		load on the Alpha server).</font></span></li>
		<li><span style="background-color: #FFFFFF">
		<font face="arial, sans-serif">once the upload completes, an event fires 
		in the browser to set the component dirty (in the case of a Grid 
		component, the current row in the Grid is set dirty)&nbsp; </font>
		</span></li>
	</ul>
	<p><span style="background-color: #FFFFFF"><font face="arial, sans-serif">
	When the component is run, if the image field in the current row that is 
	being displayed, contains the special JSON encoded string which is used for 
	protected reads, the Alpha Anywhere server converts this JSON string into a 
	signed Amazon S3 URL that can be used to retrieve the image.</font></span></p>
	<p>&nbsp;</p>
	<p><span style="background-color: #FFFFFF"><font face="arial, sans-serif">To 
	use the Amazon S3 image upload option in the Image Upload genie, select the
	</font><font color="#0000FF" face="Courier New">Upload target</font><font face="arial, sans-serif"> 
	property and set it to </font><font color="#0000FF" face="Courier New">
	AmazonS3</font><font face="arial, sans-serif"> as shown in the image below.</font></span></p>
	<p><span style="background-color: #FFFFFF"><font face="arial, sans-serif">
	The options for the&nbsp; </font><font color="#0000FF" face="Courier New">
	Upload target</font><font face="arial, sans-serif"> property are:</font></span></p>
	<ul>
		<li><span style="background-color: #FFFFFF">
		<font face="arial, sans-serif"><i>Server</i> -- upload the image to the 
		Alpha Anywhere server and store the image in a file on the server</font></span></li>
		<li><span style="background-color: #FFFFFF">
		<font face="arial, sans-serif"><i>AmazonS3</i> -- upload the image to 
		Amazon S3</font></span></li>
	</ul>
	<p>&nbsp;</p>
	<p><span style="background-color: #FFFFFF"><font face="arial, sans-serif">
	Once you select </font><font color="#0000FF" face="Courier New">AmazonS3</font><font face="arial, sans-serif"> 
	as the upload target the Amazon S3 Storage Properties section is displayed, 
	allowing you to set your Amazon S3 properties. For a complete discussion on 
	these properties see the topic that documents the '<i>File Upload - Amazon 
	S3</i>' action in Action Javascript.</font></span></p>
	<p>&nbsp;</p>
	<p><img border="0" src="imageUploadS3.jpg"></p>
	<p>&nbsp;</p>
	<p>&nbsp;</p>
	<p><span style="font-family: arial, sans-serif; background-color: #FFFFFF">
	<b>Action Javascript - File Upload Action - UX and Grid Component - Amazon 
	S3 - </b>The File Upload action allows you to upload a file and store the 
	file in a field in the table to which the UX or Grid component is bound.</span></p>
	<ul style="font-family: Tahoma; width: 7in; font-size: 9pt; margin-left: .5in; margin-top: 0px; margin-bottom: 5px">
		<li style="font-family: Tahoma; width: 7in; font-size: 9pt; margin-left: .5in; margin-top: 0px; margin-bottom: 5px">
		<span style="font-family: arial, sans-serif; background-color: #FFFFFF">
		If the file is bound to a binary field in the target table, the binary 
		data for the uploaded file is stored in the binary field in the target 
		table.</span></li>
		<li style="font-family: Tahoma; width: 7in; font-size: 9pt; margin-left: .5in; margin-top: 0px; margin-bottom: 5px">
		<span style="font-family: arial, sans-serif; background-color: #FFFFFF">
		If the file is bound to a character field in the target table, the file 
		is uploaded to the server and then saved in a file in a specified folder 
		on the server. The filename of the uploaded file on the server is saved 
		in the character field in the target table.</span></li>
	</ul>
	<p><span style="font-family: arial, sans-serif; background-color: #FFFFFF">
	In the case where the file is bound to a character field in the target table
	<b>you now have the new option of uploading the file to Amazon S3 storage
	</b>rather than to the Alpha Anywhere server.</span></p>
	<p>&nbsp;</p>
	<p><span style="font-family: arial, sans-serif; background-color: #FFFFFF">
	Uploading the file to Amazon S3 storage is an extremely efficient solution 
	because it places minimal load on the Alpha server when the file is 
	uploaded. In addition, once the file has been uploaded to Amazon S3, when 
	the file needs to be downloaded, there are options to configure the download 
	so that the download takes place directly from Amazon S3 to the client, 
	placing no load on the Alpha server, or in the case of a protected read (see 
	below), placing minimal load on the Alpha server.</span></p>
	<p><span style="font-family: arial, sans-serif; background-color: #FFFFFF">
	When you choose the option to upload to Amazon S3 storage you can either 
	upload the file as:</span></p>
	<ul style="font-family: Tahoma; width: 7in; font-size: 9pt; margin-left: .5in; margin-top: 0px; margin-bottom: 5px">
		<li style="font-family: Tahoma; width: 7in; font-size: 9pt; margin-left: .5in; margin-top: 0px; margin-bottom: 5px">
		<span style="font-family: arial, sans-serif; background-color: #FFFFFF">
		public read</span></li>
		<li style="font-family: Tahoma; width: 7in; font-size: 9pt; margin-left: .5in; margin-top: 0px; margin-bottom: 5px">
		<span style="font-family: arial, sans-serif; background-color: #FFFFFF">
		protected read</span></li>
	</ul>
	<p class="note"><b>NOTE:</b> The File Upload builder has a property called
	<font color="#0000FF" face="Courier New">Authenticated read</font>. To use 
	the 'public read' option, the <font color="#0000FF" face="Courier New">
	Authenticated read </font>property should&nbsp; <b>not</b> be checked. To 
	use the 'protected read' option, the
	<font color="#0000FF" face="Courier New">Authenticated read</font> property 
	should be checked.</p>
	<p><span style="font-family: arial, sans-serif; background-color: #FFFFFF">
	When you upload using the 'public read' option, the file is uploaded to 
	Amazon S3 and the File Upload action builder gives you an option of storing 
	the URL to the file in the character field, or a special JSON string that 
	contains information about the file's location on S3. </span></p>
	<p><span style="font-family: arial, sans-serif; background-color: #FFFFFF">
	If you choose the URL option, the format of the data stored in the field is:</span></p>
	<p class="xbasic"><span style="background-color: #FFFFFF">
	<font face="arial, sans-serif">https://s3.amazonaws.com/yourBucketNamehere/fileName</font></span></p>
	<p class="xbasic">&nbsp;</p>
	<p><span style="background-color: #FFFFFF"><font face="arial, sans-serif">
	This URL can be pasted into a browser address bar and the file from Amazon 
	S3 storage will be downloaded, (or shown -- if the browser has a built-in 
	handler for the file MIME type).&nbsp; It is not necessary to supply any 
	credentials in order to retrieve image.</font></span></p>
	<p><span style="background-color: #FFFFFF"><font face="arial, sans-serif">If 
	you choose the JSON option, the format of the data stored in the field is:</font></span></p>
	<p class="xbasic"><span style="background-color: #FFFFFF">
	<font face="arial, sans-serif">{cs: 'name of your storage connection 
	string', object: 'name of object on S3', source: 'S3'}</font></span></p>
	<p>&nbsp;</p>
	<p><span style="background-color: #FFFFFF"><font face="arial, sans-serif">
	When you upload using the 'protected read' option, the JSON option is the 
	only option. </font></span></p>
	<p>&nbsp;</p>
	<p class="note"><span style="background-color: #FFFFFF">
	<font face="arial, sans-serif"><b>NOTE</b>: When you check the </font>
	</span><font color="#0000FF" face="Courier New">Authenticated read</font><font face="arial, sans-serif"><span style="background-color: #FFFFFF"> 
	property you <b>must</b> use the </span></font>
	<font color="#0000FF" face="Courier New">Named Storage Connection String
	</font><span style="background-color: #FFFFFF">
	<font face="arial, sans-serif">option as the </font></span>
	<font color="#0000FF" face="Courier New">Method for specifying Amazon S3 
	credentials</font><span style="background-color: #FFFFFF"><font face="arial, sans-serif">.</font></span></p>
	<p>&nbsp;</p>
	<p><span style="background-color: #FFFFFF"><font face="arial, sans-serif">
	When a file is upload to S3 the work flow is as follows:</font></span></p>
	<ul style="font-family: Tahoma; width: 7in; font-size: 9pt; margin-left: .5in; margin-top: 0px; margin-bottom: 5px">
		<li style="font-family: Tahoma; width: 7in; font-size: 9pt; margin-left: .5in; margin-top: 0px; margin-bottom: 5px">
		<span style="background-color: #FFFFFF"><font face="arial, sans-serif">
		an initial Ajax callback is made to the Alpha server to 'sign' the URL 
		that will be used to upload the file to Amazon S3 (this is a very 
		'lightweight' action which places very little load on the Alpha server).</font></span></li>
		<li style="font-family: Tahoma; width: 7in; font-size: 9pt; margin-left: .5in; margin-top: 0px; margin-bottom: 5px">
		<span style="background-color: #FFFFFF"><font face="arial, sans-serif">
		the signed URL is retuned to the browser and the browser then initiates 
		the file upload to the Amazon S3 server (all communication is between 
		the browser and Amazon S3 - there is no load on the Alpha server).</font></span></li>
		<li style="font-family: Tahoma; width: 7in; font-size: 9pt; margin-left: .5in; margin-top: 0px; margin-bottom: 5px">
		<span style="background-color: #FFFFFF"><font face="arial, sans-serif">
		once the upload completes, an event fires in the browser to set the 
		component dirty (in the case of a Grid component, the current row in the 
		Grid is set dirty)&nbsp; </font></span></li>
	</ul>
	<p><span style="background-color: #FFFFFF"><font face="arial, sans-serif">To 
	use the Amazon S3 file upload option in the File Upload genie, select the
	</font><font color="#0000FF" face="Courier New">Upload target</font><font face="arial, sans-serif"> 
	property and set it to </font><font color="#0000FF" face="Courier New">
	AmazonS3</font><font face="arial, sans-serif"> as shown in the image below.</font></span></p>
	<p><span style="background-color: #FFFFFF"><font face="arial, sans-serif">
	The options for the&nbsp; </font><font color="#0000FF" face="Courier New">
	Upload target</font><font face="arial, sans-serif"> property are:</font></span></p>
	<ul style="font-family: Tahoma; width: 7in; font-size: 9pt; margin-left: .5in; margin-top: 0px; margin-bottom: 5px">
		<li style="font-family: Tahoma; width: 7in; font-size: 9pt; margin-left: .5in; margin-top: 0px; margin-bottom: 5px">
		<span style="background-color: #FFFFFF"><font face="arial, sans-serif">
		<i>Server</i> -- upload the image to the Alpha Anywhere server and store 
		the image in a file on the server</font></span></li>
		<li style="font-family: Tahoma; width: 7in; font-size: 9pt; margin-left: .5in; margin-top: 0px; margin-bottom: 5px">
		<span style="background-color: #FFFFFF"><font face="arial, sans-serif">
		<i>AmazonS3</i> -- upload the image to Amazon S3</font></span></li>
	</ul>
	<p>&nbsp;</p>
	<p><span style="background-color: #FFFFFF"><font face="arial, sans-serif">
	Once you select </font><font color="#0000FF" face="Courier New">AmazonS3</font><font face="arial, sans-serif"> 
	as the upload target the Amazon S3 Storage Properties section is displayed, 
	allowing you to set your Amazon S3 properties. For a complete discussion on 
	these properties see the topic that documents the '<i>File Upload - Amazon 
	S3</i>' action in Action Javascript.</font></span></p>
	<p>&nbsp;</p>
	<p>REPLACE THIS PICTURE</p>
	<p><img border="0" src="imageUploadS3.jpg"></p>
	<p>&nbsp;</div>
								
</body>

</html>