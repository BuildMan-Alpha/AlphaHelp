<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">

	<style>
<!--
p, ul, li            { font-family: Tahoma; width: 7in; font-size: 9pt; margin-left: .5in; margin-top:0px; margin-bottom:5px }
.xbasic      { font-family: Courier New; font-size: 10pt; color: #0000FF; margin-left: 1.1in;
               margin-top: 0; margin-bottom: 0 }
td           { font-family: Tahoma; font-size: 8pt; VERTICAL-ALIGN: top}
h1           { font-family: Tahoma; font-size: 11pt; color: #ff0000 }
h2           { font-family: Tahoma; font-size: 10pt ; color: #ff0000}
h4 			  {font-family: Tahoma; font-size: 9pt; font-weight: bold; color: #ff0000}
h3           { font-family: Tahoma; font-size: 10pt ; color: #ff0000; margin-left: .5in;}

BODY {font-family="Arial"}
.tableText {font-family: tahoma; font-size: 8pt;}
.rowEven {background-color:white;}
.searchHighlight {color: red;}
 margin-top:0in}
-->
</style>




<title>Panels</title>
</head>

<body>

<h1>Understanding Panels - Panel Layouts, Panel Navigators and Panel Cards</h1>
<h2>Applications for Mobile Devices</h2>
<p>Understanding how Panels work is key to understanding how to build
applications for mobile devices.</p>
<p>&nbsp;</p>
<p><br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/PanelTutorial_1.swf">Watch
Video - Part 1</a><br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/PanelTutorial_2.swf">Watch
Video - Part 2</a><br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/PanelTutorial_3.swf">Watch
Video - Part 3</a><br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/PanelTutorial_4.swf">Watch
Video - Part 4</a><br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/PanelTutorial_5.swf">Watch
Video - Part 5</a></p>
<h2>What are Panels?</h2>
<p>Panels are a new type of 'container' control that can be placed on the UX
Component (formerly the Dialog component). Panels are critical to applications
for mobile devices (e.g. iPhone, iPad, Android tablets and phones, and Windows 8
tables and phones), but Panels are not limited to applications for mobile
devices. You can certainly use Panels in Web applications.</p>
<p>In general, mobile applications are all built using Panels.</p>
<p>There are three types of Panels:</p>
<ul>
	<li>Panel Card</li>
	<li>Panel Navigators</li>
	<li>Panel Layouts</li>
</ul>
<p>We will discuss each type of Panel in detail, but briefly:</p>
<ul>
	<li>Panel Cards are a container for standard UI controls such as buttons,
	input fields, lists, charts, lists, etc.</li>
	<li>Panel Navigators and Panel Lists are container for other Panels (Panel
	Cards, Navigators and Layouts).</li>
</ul>
<p>&nbsp;</p>
<h2>Panel Cards</h2>
<p>Panel Cards contain the controls that make up your application.</p>
<p>The simplest mobile application will contain just a single Panel Card.</p>
<p>The standard set of UI controls (button, input fields, lists, etc.) must be
placed inside Panel Cards.</p>
<p>If your UX component uses Panels, then you <b>cannot</b> place any UI
controls <b>outside</b> Panel Cards.</p>
<p>In the diagram below, you can see a simple Panel card with several input
controls and two buttons.</p>
<p>All Panel types (Cards, Navigators and Layouts) can have an optional header
and footer. In the diagram below, the Panel Card has a header and footer.</p>
<p>&nbsp;</p>
<p><img border="0" src="panel.png" width="170" height="270"></p>
<p>If your application contains two or more Panel Cards, then you will need a
mechanism for displaying multiple Panel Cards at once, or for transitioning
between Panel Cards.</p>
<p>The Panel Navigator is the mechanism by which you can transition from one
Panel Card to another. </p>
<p><b>Note: </b>Actually, stated more accurately, the Panel Navigator is a
mechanism for transitioning from one <i>Panel</i>&nbsp; to another (not Panel <i>
Card</i>) , since the transition is not limited to Panel Cards. As we will
discuss shortly, a Panel Navigator can contain nested Panel Navigators and Panel
Layouts, in addition to nested Panel Cards.</p>
<p>Here is how a Panel Card is represented in the UX builder:</p>
<p><img border="0" src="panelcardinbuilder.jpg"></p>
<p>As you can see the 'tree control' that shows the controls in the UX component
has a [Panel Card] begin and [Panel Card] end entry. All items within these two
entries are inside the Panel Card.</p>
<p>In the above example, the Panel Card also has a header (indicated by the [PanelHeader]
begin and [PanelHeader] end entries.</p>
<p>Here is how this UX component will render in the iPhone4 mobile simulator:</p>
<p>&nbsp;</p>
<p><img border="0" src="panelCardInSimulator.jpg"></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Panel Navigator</h2>
<p>The Panel Navigator is a mechanism for transitioning from one Panel to
another Panel.</p>
<p>The Panel Navigator contains nested Panels.</p>
<p>The nested Panel can be Panel Cards, Panel Layout and Panel Navigators.</p>
<p>In its simplest form, the Panel Navigator contains child Panel Cards.</p>
<p>For example, in the image below you can see a Panel Navigator that contains
three child Panel Cards.</p>
<p>The Panel Navigator shows one of its child Panels at a time. In the image
below, the Panel Navigator is showing Panel Card 1.</p>
<p>The Panels that are displayed in a Panel Navigator automatically size
themselves so that they fill the Panel Navigator window. </p>
<p>&nbsp;</p>
<p><img border="0" src="nav1.png" width="489" height="358"></p>
<p>&nbsp;</p>
<p>The Panel Navigator exposes four different ways in which you can transition
from one Panel to another. These are:</p>
<ul style="font-family: Tahoma; width: 7in; font-size: 9pt; margin-left: .5in; margin-top: 0px; margin-bottom: 5px">
	<li style="font-family: Tahoma; width: 7in; font-size: 9pt; margin-left: .5in; margin-top: 0px; margin-bottom: 5px">
	Carousel</li>
	<li style="font-family: Tahoma; width: 7in; font-size: 9pt; margin-left: .5in; margin-top: 0px; margin-bottom: 5px">
	TabsBands</li>
	<li style="font-family: Tahoma; width: 7in; font-size: 9pt; margin-left: .5in; margin-top: 0px; margin-bottom: 5px">
	TabButtons</li>
	<li style="font-family: Tahoma; width: 7in; font-size: 9pt; margin-left: .5in; margin-top: 0px; margin-bottom: 5px">
	Programmatic</li>
</ul>
<p>&nbsp;</p>
<h3>Carousel Behavior</h3>
<p>When the Panel Navigator is configured to use Carousel style navigation, a
swipe gesture with your fingers will transition from one Panel to another.</p>
<p>In the above image, when the user swipes from right to left on Panel Card 1,
the Panel Navigator will transition from displaying Panel Card 1 to Panel Card
2.</p>
<p>As the user drags on Panel Card 1 it will being to move out of view and Panel
Card 2 will begin to move into view. If the user stops dragging before Panel
Card 2 is full in view, then one of two possible outcomes will occur:</p>
<ul>
	<li>Panel Card 2 will animate fully into view (if the user had dragged Panel
	Card 2 past a certain threshold)</li>
	<li>Panel Card 1 will animate back into view (if the user had not dragged
	Panel Card 2 past a certain threshold).</li>
</ul>
<p>Once Panel Card 2 has come into view, the user can either drag from
left-to-right (to bring Panel Card 1 back into view), or from right-to-left, to
bring Panel Card 3 into view.</p>
<p><img border="0" src="nav2.png" width="490" height="358"></p>
<p>Once Panel Card 3 has come into view, if the user swipes from left-to-right
on Panel Card 3, then Panel Card 3 will begin to move out of view, but as soon
as the user stops the drag gesture, Panel Card 3 will bounce back into full view
because there are no additional Panels after Panel Card 3.</p>
<p><b>Loop Navigation</b></p>
<p>You can optionally set the 'Loop' property for the Navigator so that when the
user swipes from left to right on Panel Card 3, Panel Card 1 will be displayed.</p>
<p>And, when the user swipes on Panel Card 1 from left-to-right, Panel Card 3
will come into view.</p>
<p>In other words, the Panels in the Panel Navigator behave as if they are in a
continuous loop.</p>
<p><b>Flow Direction</b></p>
<p>You can control the 'flow' direction of the Panels in a Panel Navigator. In
the above examples, the 'flow' direction is Left-to-Right. The options for the
'Flow' property are:</p>
<ul>
	<li>LTR - left-to-right</li>
	<li>RTL - right-to-left</li>
	<li>TTB - top-to-bottom</li>
	<li>BTT - bottom to top</li>
</ul>
<p>For example, if the 'flow' property for a Panel Navigator is set to 'TTB'
(top-to-bottom), then swiping up on the Panel that is currently visible in the
Panel Navigator will bring the next Panel into view.</p>
<h3>TabButton Behavior</h3>
<p>The Panel Navigator can be configured to operate in 'Tab' mode. In this case,
the transition from one Panel to the next is accomplished by clicking on a tab
button. Swiping on a Panel card will not transition from one Pane to the next.</p>
<p>As the image below shows, there is a button for each Panel in the Panel
Navigator. Clicking the button will bring the corresponding Panel into view.&nbsp;
In this image, button 1 (B1) has been clicked and therefore Panel Card 1 is
shown in the Panel Navigator.</p>
<p>&nbsp;</p>
<p><img border="0" src="nav3.png" width="489" height="358"></p>
<p>&nbsp;</p>
<p>Next, button 2 (B2) has been clicked and therefore Panel Card 2 is shown in
the Panel Navigator.</p>
<p><img border="0" src="nav4.png" width="490" height="358"></p>
<p>&nbsp;</p>
<h3>TabBand Behavior</h3>
<p>This option is generally only used in a desktop Web application. The Panels
appear like a traditional tab control with a band of tab labels allowing you to
select the active Panel Card.</p>
<p>&nbsp;</p>
<h3>Programmatic Behavior</h3>
<p>This option is used when you want to use Javascript code to control which
Panel in the Panel Navigator is visible.</p>
<p>The UX component has a method to programmatically activate the Panel that you
want to set focus to.</p>
<p>For example:</p>
<p class="xbasic">{dialog.object}.panelSetActive('PANELCARD_2');</p>
<p>&nbsp;</p>
<h2>Panel Layout</h2>
<p>A Panel Layout is a mechanism for displaying two or more Panels at a time.</p>
<p>The Panel that are displayed in a Panel Layout can be any type of Panel (e.g.
Panel Layout, Panel Navigator or Panel Card).</p>
<p>The Panels in a Panel Layout are displayed in the specified 'flow' direction.</p>
<p>For example in the image below on the left we have a Panel Layout that contains two
Panel Cards. The 'flow' direction is LTR (left-to-right), so Panel Card 2 is
show to the right of Panel Card 1.</p>
<p>However, by simply changing the 'flow' property of this Panel Layout to 'TTB'
(top-to-bottom), we can change the visual appearance to show Panel Card 2 below
Panel Card 1.</p>
<p>Notice that the Panels shown in the Panel Layout automatically size
themselves to consume all of the available space.</p>
<p>If the size of the browser window changes (or, in the case of a mobile
device, if the device orientation changes), the Panels in the Panel Layout will
automatically resize themselves so that they continue to fill the available
space.</p>
<p>&nbsp;</p>
<p><img border="0" src="layout1.png" width="659" height="358"></p>
<p>&nbsp;</p>
<h3>Panel Size</h3>
<p>When a Panel is inside a Panel Layout, it has a size property. If the Panel
Layout 'flow' property is set to LTR or RTL (i.e. a horizontal flow direction),
then size property refers to the panel width (the height is automatically 100%
of the Panel Layout). On the other hand, if the flow property is set to TTB or
BTT (i.e. a vertical flow direction), the size property refers to the panel
height.</p>
<p>The size property can be expressed as an absolute size (e.g. 2in) or a
relative size, using the 'flex' convention.</p>
<p>For example, if you have four Panels in a Panel Layout and the Panels have
their size specified as flex(1), flex(2), flex(1) and 1 inch respectively, then
the size of each Panel in the Panel Layout will be computed as follows:</p>
<ol>
	<li style="font-family: Tahoma; width: 7in; font-size: 9pt; margin-left: .5in; margin-top: 0px; margin-bottom: 5px">
	Add up all of the flex values: 1 + 2 + 1 = 4</li>
	<li style="font-family: Tahoma; width: 7in; font-size: 9pt; margin-left: .5in; margin-top: 0px; margin-bottom: 5px">
	Panel 1 has a size of flex(1) - this represents 1/4 (25%) of the total for
	flex width Panels</li>
	<li style="font-family: Tahoma; width: 7in; font-size: 9pt; margin-left: .5in; margin-top: 0px; margin-bottom: 5px">
	Panel 2 has a size of flex(2) - this represents 2/4 (50%) of the total for
	flex width Panels</li>
	<li style="font-family: Tahoma; width: 7in; font-size: 9pt; margin-left: .5in; margin-top: 0px; margin-bottom: 5px">
	Panel 3 has a size of flex(1) - this is the same as Panel 1 - it size is 25%
	of the total for flex width Panels</li>
	<li style="font-family: Tahoma; width: 7in; font-size: 9pt; margin-left: .5in; margin-top: 0px; margin-bottom: 5px">
	Panel 4 has an absolute size of 1 inch.</li>
</ol>
<p>Now, assume that the Panel Layout is being rendered on a tablet device, using
a TTB flow direction, and that the available height in the Panel Layout for its
child Panels is 8 inches. The actual height of each Panel in the Panel Layout
is:</p>
<ul style="font-family: Tahoma; width: 7in; font-size: 9pt; margin-left: .5in; margin-top: 0px; margin-bottom: 5px">
	<li style="font-family: Tahoma; width: 7in; font-size: 9pt; margin-left: .5in; margin-top: 0px; margin-bottom: 5px">
	Panel 4 is 1 inch</li>
	<li style="font-family: Tahoma; width: 7in; font-size: 9pt; margin-left: .5in; margin-top: 0px; margin-bottom: 5px">
	The remaining space after fixed size Panels have rendered is 7 inches (8 -
	1)</li>
	<li style="font-family: Tahoma; width: 7in; font-size: 9pt; margin-left: .5in; margin-top: 0px; margin-bottom: 5px">
	Therefore, the height of Panel 1 and Panel 3 is 25% of 7 inches (1.75
	inches)</li>
	<li style="font-family: Tahoma; width: 7in; font-size: 9pt; margin-left: .5in; margin-top: 0px; margin-bottom: 5px">
	And, the height of Panel 2 is 50% of 7 inches (e.g. 3.5 inches)</li>
</ul>
<p>In the images shown above, it is clear that Panel Card 1 appears to be about
half the size (width in the case of the image on the left, and height in the
case of the image on the right) of Panel Card 2. This is achieved by setting
Panel Card 1's size to flex(1) and Panel Card 2's size to flex(2).</p>
<p>&nbsp;</p>
<h3>Panel Layouts Are Not Limited to Displaying Panel Cards</h3>
<p>A Panel Layout can contain any type of Panel. In the
images above, the Panel Layout contained two Panel Cards. But, by nesting Panel
Layout and Panel Navigators inside Panel Layouts, you can create complex layouts.</p>
<p>For example, in the image shown below, we have modified the Panel Layout
(i.e. Panel Layout 1) and replaced Panel Card&nbsp; 2 with a Panel Layout (i.e.
Panel Layout 2), which in turn contains two Panel Cards. </p>
<p>Notice that the 'flow' direction on Panel Layout 2 has been set to TTB
(top-to-bottom). The 'flow' direction for Panel Layout 1 is LTR (left-to-right).</p>
<p>&nbsp;</p>
<p><img border="0" src="layout2.png" width="334" height="358"></p>
<p>&nbsp;</p>
<p>And this is by no means the end of the richness of the layout that we can
create. For example, in the image shown&nbsp; below, Panel Card 3 has been
replaced by a Panel Navigator (Panel Navigator 1).</p>
<p>Panel Navigator 1 shows Pane Card 3 initially, but (since its 'flow' property
has been set to LTR - left-to-right), when the user drags to the right on Panel
Card 3, the next Panel in the Panel Navigator 1 comes into view. In this case,
this Panel is another Panel Navigator (Panel Navigator 2) and this Panel
Navigator will initially show Panel Card 4.</p>
<p>When the user swipes upwards on Panel Card 4 (since the 'flow' property for
Panel Navigator 2 has been set to TTB - top-to-bottom), Pane Card 5 will come
into view.</p>
<p>This is clearly a very complex layout, but it is easily defined in the UX
Component builder.</p>
<p>&nbsp;</p>
<p><img border="0" src="layout3.png" width="518" height="414"></p>
<p>&nbsp;</p>
<p>The above layout can easily be envisaged using the following 'tree'
structure, which is very close to how this layout would be represented in the UX
Builder.</p>
<p>&nbsp;</p>
<p class="xbasic">Panel Layout 1</p>
<p class="xbasic">&nbsp;&nbsp;&nbsp; Panel Card 1</p>
<p class="xbasic">&nbsp;&nbsp;&nbsp; Panel Layout 2</p>
<p class="xbasic">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Panel Card 2</p>
<p class="xbasic">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Panel Navigator 1</p>
<p class="xbasic">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Panel Card 4</p>
<p class="xbasic">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Panel Card 5</p>
<p class="xbasic">&nbsp;</p>
<p>Here is how the above structure of Panels would be represented in the UX
Builder. </p>
<p><b>Note</b>: The UX Builder representation is slightly more 'complex' than
the simple tree structure shown above because the UX Builder shows an entry in
the tree for <b>both</b> the Panel start and the Panel end.</p>
<p><b>Note 2</b>: Obviously, the UX Builder shown below has been further
simplified because each of the Panel Cards shown do not actually contain any
controls. Of course, in a real component, each Panel Card would contain controls
(such as text boxes, buttons, lists, charts, etc.)</p>
<p class="xbasic">&nbsp;</p>
<p class="xbasic"><img border="0" src="complexLayoutInUXBuilder.jpg"></p>
<p class="xbasic">&nbsp;</p>
<h3>Docked Panels in a Panel Layout</h3>
<p>An advanced option for Panels allows you to set a minimum
size for a child Panel in a Panel Layout. If there is insufficient space to show
all of
the child Panels (because one or more of the child Panels have a minimum size requirement
which is greater than the available space), the Panels in the Panel Layout that
have been marked as 'dockable' (i.e. allowed to be hidden) will be docked, thus
freeing up more space to display the Panel(s) that have a minimum size.</p>
<p>Panels that have been 'docked' can be show (i.e. 'un-hidden') in one of two ways:</p>
<ol>
	<li style="font-family: Tahoma; width: 7in; font-size: 9pt; margin-left: .5in; margin-top: 0px; margin-bottom: 5px">
	Programmatically - user clicks a button whose event handler is set to show
	the 'docked' Panel</li>
	<li style="font-family: Tahoma; width: 7in; font-size: 9pt; margin-left: .5in; margin-top: 0px; margin-bottom: 5px">
	Automatically - if an orientation change event (in the case of a mobile device) or
	window resize event (in the case of a desktop browser) results in enough
	space becoming available to accommodate the minimum size of the Pane (whose
	minimum size requirement resulted in other child Panels being 'docked' in
	the first place).</li>
</ol>
<p>In applications for mobile devices this is a common pattern. For example,
when designing a 'split-view' type layout for a tablet, there will be sufficient
space when the tablet is in landscape orientation to display the two panels
(termed the 'navigator' and 'detail' Panel) in
the split-view simultaneously. But when the tablet's orientation is changed to
portrait, the 'navigation' pane in the 'split-view' will automatically be
hidden (because of the minimum size that has been set for the 'detail' Panel).</p>
<p>In the image below, we have Panel Layout with two child Panel Cards. As the
image shows, Panel Card 1 has been 'docked' (i.e. Panel Card 1 is not visible in
Page Layout 1 and in the image it is shown to the left - outside - Panel Layout
1 to indicate that it is 'there' but not shown).</p>
<p>Panel Card 1 has been docked because:</p>
<ul>
	<li>A minimum width has been set for Panel Card 2 and this width is greater
	than width of Panel Layout 1</li>
	<li>Panel Card 1 has been marked as 'dockable' (i.e. its 'Dock' property has
	been set to 'auto-collapse-before')</li>
</ul>
<p>Note: We will discuss the different 'Dock' properties in more detail below.</p>
<p>&nbsp;</p>
<p>Notice also that in the Header for Panel Layout 1 there is a button. Clicking
this button will show the 'docked' Panel (Panel Card 1).</p>
<p>&nbsp;</p>
<p><img border="0" src="layout4.png" width="440" height="358"></p>
<p>&nbsp;</p>
<p>When a docked Panel is shown there are two ways in which the currently
visible Panels can be treated.</p>
<ol>
	<li>The Panel that is shown can slide 'on top' of the currently visible
	Panels, as shown in the first image below. (Notice how Panel Card 1 has
	partially obscured the left edge of Panel Card 2)</li>
	<li>The Panel that is shown can 'push' part of the currently visible Panels
	out of view. The direction in which the visible Panels are pushed obviously
	depends on the 'flow' property of the Panel Layout. In the second image
	below, part of Panel Card 2 has been 'pushed' off the right edge of Panel
	Layout 1. </li>
</ol>
<p>&nbsp;</p>
<p><img border="0" src="layout6.png" width="434" height="358"></p>
<p>&nbsp;</p>
<p><img border="0" src="layout5.png" width="434" height="358"></p>
<p>&nbsp;</p>
<p><b>More On The Dock Property</b></p>
<p>The screenshot below shows where you can set the 'dock' property for a Panel
in a Panel Layout.</p>
<p>&nbsp;</p>
<p><img border="0" src="Panel_DockProperty.gif"></p>
<p>&nbsp;</p>
<p>The options for the 'dock' property are:</p>
<ul>
	<li>none</li>
	<li>collapse-before</li>
	<li>collapse-after</li>
	<li>auto-collapse-before</li>
	<li>auto-collapse-after</li>
</ul>
<p>&nbsp;</p>
<p>In the above example, the 'Dock' property for Panel Card 1 was set to
'auto-collapse-before', which means that the Panel Card 1 will be collapsed
automatically (but only if necessary, because some other Panel with a minimum
size needs the space occupied by this Panel).</p>
<p>However, you could configure Panel Card 1 so that it is <b>always</b>
collapsed (i.e. 'docked') regardless of the size of the browser window or
orientation of the mobile device.</p>
<p>You can also specify if the 'docked' Panel is 'before' or 'after' the visible
Panels. This property determines where the 'docked' Panel gets shown when it is
shown.</p>
<p>In the above image, when Panel Card 1 is shown it is shown on the left side
of Panel Layout 1 (because the 'flow' property of Panel Layout 1 is set to LTR
and the 'dock' property of 'Panel Card 1' is 'auto-collapse-<b>before</b>'.</p>
<p>However, had the 'dock' property of 'Panel Card 1' been set to
'auto-collapse-<b>after</b>', then when Panel Card 1 was shown, it would have
been shown on the right side of Panel Layout 1.</p>
<p>Furthermore, had the 'flow' property of Panel Layout 1 been set to TTB, then
when Panel Card 1 was shown, it would have been shown at the bottom of Panel
Layout 1.</p>
<p>&nbsp;</p>
<h2>Using Panels to Create Complex Layouts for Web Applications</h2>
<h3>The New York Times Example</h3>
<p>Panels are not just for mobile applications. You can
also use Panels in desktop Web application. Once good use of Panel Layouts is to
construct complex page layouts.</p>
<p>The New York Times web site is a good example of a complex page layout that
can easily be accomplished using Panel Layouts.</p>
<p>If you look at the image below, you will see that the page is divided into
several different 'logical' sections. </p>
<ul>
	<li>Masthead (i.e. header)&nbsp; - shaded in red</li>
	<li>Left hand navigation - shaded in blue</li>
	<li>Center content area - shaded in green</li>
	<li>Right hand navigation - shaded in yellow</li>
	<li>Footer - not shown</li>
</ul>
<p>&nbsp;</p>
<p><img border="0" src="newyorktimes.png" width="976" height="453"></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>The following structure of Panel Layouts and Panel Cards (which contain the
actual content) will duplicate the layout of the New York times site show above:</p>
<p>&nbsp;</p>
<p><img border="0" src="layout7.png" width="450" height="612"></p>
<p>&nbsp;</p>
<p>If you view the New York times side in your browser, you will notice that the
page has a fixed width and is horizontally centered in the browser window.</p>
<p>This is easily accomplished by wrapping the above structure in another Panel
Layout as shown in the image below. The structure of this 'container' Panel
Layout is:</p>
<p>&nbsp;</p>
<p class="xbasic">Panel Layout 1</p>
<p class="xbasic">&nbsp;&nbsp;&nbsp; Panel Card 1</p>
<p class="xbasic">&nbsp;&nbsp;&nbsp; Panel Layout 2 (the Panel Layout shown in
the above diagram)</p>
<p class="xbasic">&nbsp;&nbsp;&nbsp; Panel Card 2</p>
<p>&nbsp;</p>
<p>Panel Card 1 and Panel Card 2 are empty - they do not have any controls in
them. Their sole purpose is to force Panel Layout 2 to render in the center of
the screen. In addition, the widths for Panel Card 1 and Panel Card 2 are set
using the 'flex' option. As a result of this, when the browser window is
resized, the main layout (Panel Layout 2) remains horizontally centered in the
page.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><img border="0" src="layout8.png" width="670" height="652"></p>
<p>&nbsp;</p>
<p>&nbsp;</p>

</body>

</html>