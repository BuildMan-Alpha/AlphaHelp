<page>
	<topic>AlphaSportsWeb Explained</topic>
<description>This is a Legacy page. AlphaSports Web was the First Demo Project for Alpha's Web Application Server. Applies to Alpha Five Version 9</description>	
	<groups>
	<group>
		<title>AlphaSports for the Web</title>
		<sections>
<section>
		<warning>Legacy</warning>
	</section>
<section>
	<title>Initial considerations</title>
<description>Creating an application for a Web environment is an interesting challenge. Web applications require a different approach and different thinking than desktop applications. You can easily build a desktop application that has complex form designs, large amounts of data on one page, and multiple pages open simultaneously. Speed is rarely an issue with modern computers, and the current design genies allow considerable customization of any layout.</description>	
	
</section>	
<section>
	
<description>But the Web is different. The browser concept imposes a number of constraints. Browsers primarily use HTML and other "open source" concepts like JavaScript. Nearly every modern browser follows a set of universal standards to allow a Web page to display in any browser. These rules place many limitations on how various elements work, such as how a drop down list looks and behaves, how data is submitted back to a server, how buttons operate, and on and on. The layout of most Web pages is normally based on a grid or table and cell construction that requires some careful planning during design. Moving the position of an element on a page may require reconstructing the complete page. There is little room to alter the way the way the actual design elements work because they are part of the accepted rules for a browser. Any successful Web page must follow these current Web standards to work properly.</description>	
	
</section>	
<section>
	
<description>The other issue is speed. The Web employs a Client/Server model. The local browser or client first requests a page from a remote server. The server takes the request and builds the page and populates it with data. It then sends the whole page back to the client. Both of these actions require time. If the page design is complex, the server may take a noticeable time to build or populate the page. If the final page file size is large, the download time across the Web may be slow. These issues exist in any Web page construction, regardless of the server technology used. A successful Web designer must consider these limitations and frequently make compromises on the complexity of the page designs.</description>	
	
</section>	
<section>
	<title>Specifications</title>
<description>The basic goal behind the design of AlphaSports Web was a desire to create a "real world" commercial grade application that was based on the existing AlphaSports desktop demo application. The design had to consider the normal constraints of the Web environment and yet be a successful substitute for a desktop application. A common use of the Alpha Anywhere Application Server is to add Web capability to an existing desktop application. AlphaSports Web does not alter the AlphaSports desktop functionality and can co-exist with that application. However, the two applications are completely separate and only share tables and data. The Web application does not require a desktop database to operate, and can actually exist without any related database. It replaces the desktop database functionality with the Web components and pages and accesses tables and data directly.</description>	
	
</section>	

<section>
	
<description>Every application design starts with the functional requirements or specifications. This application was built around an online shopping concept, with the capability to update and maintain the supporting data using a browser interface. Early in the process, it was determined that the final design should appear simple to use with relatively few "layers" to the data. The decision was made to access most pages from a main navigation page or menu bar. To simplify navigation, a number of pages open as pop-ups, leaving the original page in view. Many pages have multiple ways to navigate to other pages, such as links in grids, hyperlinks on the pages, buttons, and even images with links.
</description>	
	
</section>		
<section>
	
<description>Nearly all of the functionality of the desktop AlphaSports database was duplicated in the Web version. This was achieved by creating two different paths within the application. First, there are the public pages that are designed for online sales and promoting the products available from AlphaSports. Most of these pages do not require any login or security. The second path within the application is the administration section. These pages can only be accessed with a specific login and have security to prevent unauthorized access. Many of these pages duplicate the data maintenance actions normally found in a desktop implementation. The login process determines the navigation path by evaluating the user ID and then sending the user to the pages allowed by their access.</description>	
	
</section>	
<section>
	
<description>A secondary purpose was to show how to use various Alpha Anywhere components effectively and efficiently. Nearly every page is built using components, many with multiple components. In fact, every basic component construction is found in AlphaSports for the Web.</description>	
	
</section>	

<section>
	<title>Building AlphaSports Web</title>
<description>To improve speed the AlphaSports Web application keeps the number of elements on each page to a minimum. Many of pages are view-only pages with links to pages that do allow editing. A page with only labels is both faster to build on the server and has less HTML text. Therefore it will build and download faster. Only pages that are used less frequently, such as some internal maintenance pages, make extensive use of input fields. Every effort was made to eliminate unnecessary HTML in AlphaSports Web. For example, instead of adding inline styles to set a cell width in a grid, most column widths were fixed by setting the column header width. The inline style adds some text, but it only is added for the column row instead of for each cell in each row. Even apparently small changes like this can have measurable impacts on speed.</description>	
	
</section>	
<section>
	
<description>A common error with grid layouts is to try to use too many rows. While showing many rows on a page may appear to be a good idea, this design approach slows page building and downloading. At some point, the speed impact negates the apparent efficiency of having everything on one page. A decision was made in AlphaSports Web to break up the data into small pieces as much as possible, use limited rows in grids, and use multiple pages. Not only are the pages faster to build, but the download times are improved, making the pages display quicker. Even removing a single field in a grid can have a significant speed impact.</description>	
	
</section>	
<section>
	
<description>Freeform regions are used in many of the components in AlphaSports. These allow more design freedom and have no real speed impact. A few grids use custom controls that provide some unique opportunities for customizing a display. In AlphaSports Web they are used to highlight products with "special" pricing. Considerable effort was spent on attention to detail to add an appearance of professionalism, such as making input text boxes a uniform length.</description>	
	
</section>		
<section>
	
<description>Many Web pages require some method to select a value from a list to populate some input value. A typical construction is a drop down list. However, a grid layout may require multiple drop down lists with one built for each record in a row. A more efficient method is to take advantage of the lookup option in Alpha Anywhere. AlphaSports Web makes extensive use of lookups. Drop downs are used in some places where the options are limited, or in the case of dialogs or single record grids where the drop down appears only once.</description>	
	
</section>	

<section>
	
<description>Another goal of this project was to build modular constructions. A page template was built for the public pages and another built for the internal or administrative pages. After the templates were refined, building other pages became very efficient as the page building process consisted of adding a single component to the template page.</description>	
	
</section>	

<section>
	
<description>As the project began to take shape, it was observed that there was an opportunity to use the same basic component design in multiple locations. One example is the single record tabbed grid used to show customer information. This was used on multiple pages by first building the component with all features needed. After placing a component on a given page, parameter overrides changed the style of the component or hide or alter certain features such as a delete option. In this way, a single component was built just once, but used many times.</description>	
	
</section>	

<section>
	
<description>Efficiency was the primary goal of the AlphaSports Web construction. Efficiency in usability through relatively simple page layouts, efficiency in construction through the modular approach, and efficiency in speed through minimizing the html on a page.
Working within the constraints of the Web is challenging, but the component concept in Alpha Anywhere removes many of the concerns. The final component output meets the "rules of the road", without the user having to write any HTML or worry about the standards. The Component Builders are very efficient tools that can make building a Web application easier and faster without compromising the final result.
</description>	
	
</section>		
			
			
		</sections>
		
		
		
		
	</group>	
		
		
<group>
	<title>Installation</title>
	<sections>
		<section>
			
	<description>The AlphaSportsWeb sample database is an optional upgrade to the AlphaSports sample database that ships with Alpha Anywhere. We created AlphaSportsWeb to illustrate how to use Alpha Anywhere web publishing to build an on-line e-commerce application. We expect that developers will use it as a starting point or as reference code when building their own applications.
</description>		
			
			
		</section>
		<section>
			<note>AlphaSportsWeb includes sample code for identifying invalid credit card numbers, for using Authorize.Net to validate credit cards, and for using PayPal for accepting electronic payments. This is sample code only and is not warranteed for commercial use. You should also consult Authorize.Net and PayPal for their latest product specifications and for guides to using features that AlphaSportsWeb has not demonstrated.</note>
		</section>
<section>
	<description>To install AlphaSportsWeb :
</description>
<steps>
	<step>
		<description>Run AlphaSportsWeb.EXE and click Next >.
</description>
	</step>
	<step>
		<description>Enter your license code and click Next >. to display the following dialog. 
</description>
<figure><link>images/ASW_Installation.gif</link></figure>
	</step>
	<step>
		<description>Optionally, check Open AlphaSports for the Web Help File.
</description>
	</step>
	<step>
		<description>Click Finish.
</description>
	</step>
	<step>
		<description>Start Alpha Anywhere.
</description>
	</step>
	<step>
		<description>Open AlphaSportsWeb. You will find it in the \Samples\AlphaSportsWeb folder under you Alpha Anywhere program directory.
</description>
	</step>
	<step>
		<description>Click the "AlphaSportsWeb" menu entry to display the following dialog. 
</description>
<figure><link>images/ASW_MainMenu.gif</link></figure>
	</step>
	<step>
		<description>Click Publish Files. This places a working copy of the application on your local webroot. This means that you can immediately start investigating the features and techniques of the application. Later, you can publish these files from the Web Projects Control Panel .
</description>
	</step>
	<step>
		<description>Click Start the Web Server. Later, you can start and stop this local copy of the Application Server from the Web Projects Control Panel.
</description>
	</step>
	<step>
		<description>Click Launch the Home Page of the Sample Application. This will display the first page that a customer would see when he visits this site.
</description>
	</step>
	<step>
		<description>Click Display the Web Applications Control Panel. This will display the pages, components, images, and other files that are the source materials for AlphaSportsWeb.
</description>
	</step>
	
	
</steps>	
	
</section>		
	<section>
		<description>The remainder of this document explains the techniques that the Alpha Five developers used when creating AlphaSportsWeb. You can always find a copy of these help files at [http://support.alphasoftware.com/alphafivehelp/index.htm].
</description>
	</section>
	
	</sections>
	
	
	
	
	
	
	
	
	
</group>	
<group>
	<title>Configuration and Publishing</title>
<sections>
<section>
	<title>Local Webroot Profile
</title>
	<description>Your initial and default profile should be Local Webroot. Here you can test the appearance of your pages and components, and logic of your code. By default, AlphaSportsWeb does not use any Application Variables. There is only one set of aliases. 
</description>
	<cases>
		<case>
			<description>For local development: PathAlias.ADB_Path = =a5.get_path()
</description>
		</case>
		<case>
			<description>For publishing to a server: PathAlias.ADB_Path = c:\data\alphasportsweb
</description>
<figure><link>images/ASW_Local_Profile.gif</link></figure>
		</case>
		
	</cases>
	
	
</section>	
<section>
	<title>InternalServer Profile</title>
	<description>The "InternalServer" profile is a template that you can modify and use for your internal (LAN) publishing activities. The assumption here is that you can publish your data using standard Windows file access. The profile publishes pages to the c:\A5Webroot directory and the data files to the c:\Data directory on the server.
There is only one set of aliases.
</description>
<cases>
	<case>
		<description>For local development: PathAlias.ADB_Path</description>
		<example><![CDATA[a5.get_path()]]></example>
	</case>
	<case>
		<description>For publishing to a server: PathAlias.ADB_Path</description>
		<example><![CDATA[c:\data\alphasportsweb]]></example>
	</case>
	
</cases>
	
</section>
<section>
	<description>The default definition for aliases should be adequate for your local development needs. To change the server alias, select General > Aliases and click . 
</description>
	<figure><link>images/ASW_Internal_Server_Profile.gif</link></figure>
</section>
<section>
	
	<description><![CDATA[The publishing process automatically copies all folders under the web project folder. Thus, the css, Images, and javascript folders appear under the c:\A5Webroot\AlphaSportsWeb folder on the server. Note the Publish to LAN > Webroot and Publish to LAN > Target Folder properties below.]]></description>
	
</section>
<section>
	
	<description><![CDATA[The Publish Database Files > Folder property defines the target directory for the Alpha Anywhere database files. The Publish Database Files > Files to Publish property lists all database files, plus all the files found under c:\AlphaSportsWeb\Images on the development computer. These files are published to c:\Data\AlphaSportsWeb\Images on the server. ]]></description>
<figure><link>images/ASW_Publishing_Folders_3.gif</link></figure>	
</section>
<section>
	
	
</section>
<section>
	<title>PublicServer Profile</title>
<description>The "PublicServer" profile is a template that you can modify and use for your external (FTP) publishing activities. The assumption here is that you can not publish your data using standard Windows file access. The profile publishes pages to the AlphaSportsWeb folder under the server's webroot and the data files to the Data\AlphaSportsWeb\ folder on the server. </description>	
	<note>The assumption here is that the server administrator will create these folders and make them accessible to your FTP program. It is unlikely that you will know the actual (physical) location of these folders on the server. 
</note>
</section>

<section>
	<description>Also take note that the FTP Address, Username, Password, and Base URL values shown below are for illustration purposes only. Again, these are values that you will define in coordination with the server administrator.
</description>
	<figure><link>images/ASW_Public_Server_Profile.gif</link></figure>
</section>
<section>
	<title>Publishing</title>
<description>To initially publish AlphaSportsWeb to your local webroot, follow these steps.
</description>
<steps>
	<step>
		<description>In the Web Projects Control Panel select Publish. to display the Publish Web Project dialog box:
</description>
	</step>
	<step>
		<description>Select "Local Webroot" in the Select Profile list.
</description>
	</step>
	<step>
		<description>Select All files in project in the Files to Publish section.
</description>
	</step>
	<step>
		<description>Clear Publish new or modified files only.
</description>
	</step>
	<step>
		<description>Click Clear Publishing History > Yes.
</description>
	</step>
	<step>
		<description>Click Publish. This action creates the folders highlighted below and copies all the project files to the appropriate locations. Note that your webroot may be defined to be a folder different from "C:\A5Webroot". 
</description>
<figure><link>images/ASW_Local_Publish_Folders.gif</link></figure>
	</step>
	
	
</steps>
	
</section>
<section>
	<title>Publishing to a Server</title>
	<description>To publish AlphaSportsWeb to a server, follow these steps.
</description>
	
	<steps>
		<step>
			<description>In the Web Projects Control Panel select Publish. to display the Publish Web Project dialog box:
</description>
		</step>
		<step>
			<description>Select "InternalServer" or "PublicServer" in the Select Profile list.
</description>
		</step>
		<step>
			<description>Select All files in project in the Files to Publish section.
</description>
		</step>
		<step>
			<description>Clear Publish new or modified files only.
</description>
		</step>
		<step>
			<description>Click Clear Publishing History > Yes.
</description>
		</step>
		<step>
			<description>Select Publish Database files.
</description>
		</step>
		<step>
			<description>Click Edit List to display the Select Database Files to Publish dialog.
</description>
		</step>
		<step>
			<description>Check the Select all tables/sets in the Database check box.
</description>
		</step>
		<step>
			<description>Click Add File and navigate to the AlphaSportsWeb\Images\ folder.
</description>
		</step>
		<step>
			<description>Select all the files in the folder and click Open.
</description>
		</step>
		<step>
			<description>Click OK.
</description>
		</step>
		<step>
			<description>Click Publish. This action creates the folders highlighted below and copies all the project files to the appropriate locations.
</description>
		</step>
		
	</steps>
	
</section>
	
	
</sections>	
	
	
</group>	
<group>
	<title>Using AlphaSportsWeb</title>
	<sections>
		<section>
			<description>The AlphaSportsWeb application offers the following features.</description>
			
		</section>
		<section>
<title>Administrative Features</title>			
<list>
	<item>
		<name-title>Feature</name-title>
		<description-title>Description</description-title>
	</item>
	<item>
		<name>Maintain product categories</name>
		<description>Use a desktop layout to edit the product_category table.</description>
	</item>
	<item>
		<name>Maintain vendors</name>
		<description>Select the Vendors menu entry.</description>
	</item>
	<item>
		<name>Maintain products</name>
		<description>Select the Products > Product Listing menu entry.</description>
	</item>
	<item>
		<name>Maintain your user name or password</name>
		<description>Select the Your Account > Your Information menu entry</description>
	</item>
	<item>
		<name>Maintain specials</name>
		<description>Select the Products > Specials List menu entry.</description>
	</item>
	<item>
		<name>Maintain customers</name>
		<description>Select the Customers > Customer List menu entry.</description>
	</item>
	<item>
		<name>View or print invoices</name>
		<description>Select the Sales > Invoices menu entry.</description>
	</item>
	<item>
		<name>Maintain internal users</name>
		<description>Select the Sales Reps menu entry.</description>
	</item>
	<item>
		<name>Print a report</name>
		<description>Select the Reports menu entry.</description>
	</item>
	<item>
		<name>Pack tables</name>
		<description>Select the Maintenance menu entry.</description>
	</item>
	<item>
		<name>Re-index tables</name>
		<description>Select the Maintenance menu entry.</description>
	</item>
	<item>
		<name>Clear empty shopping carts</name>
		<description>Select the Maintenance menu entry.</description>
	</item>
	<item>
		<name>Send an email</name>
		<description>Select the Customers > Send Email menu entry.</description>
	</item>
</list>			
			
		</section>
	<section>
		<title>Customer Features</title>
	<list>
		<item>
			<name-title>Feature</name-title>
			<description-title>Description</description-title>
		</item>
		<item>
			<name>Select a product category</name>
			<description>Click an entry in the Browse Products grid.</description>
		</item>
		<item>
			<name>View all specials</name>
			<description>Select the Home menu entry and click the Show All Specials hyperlink.</description>
		</item>
		<item>
			<name>View a larger product image and detailed description</name>
			<description>Click the Description hyperlink in any product record.</description>
		</item>
		<item>
			<name>View all products</name>
			<description>Select the Products menu entry.</description>
		</item>
		<item>
			<name>Add a product to the shopping cart</name>
			<description>Click the shopping cart image in any product record.</description>
		</item>
		<item>
			<name>View shopping cart contents</name>
			<description>Select the Shopping Cart > View Cart menu entry.</description>
		</item>
		<item>
			<name>Purchase products in shopping cart</name>
			<description>Select the Shopping Cart > Check Out menu entry.</description>
		</item>
		<item>
			<name>Modify shopping cart quantities</name>
			<description>Select the Shopping Cart > View Cart menu entry.</description>
		</item>
		<item>
			<name>View order history</name>
			<description>After logging in, select the Your Account > Order History menu entry.</description>
		</item>
		<item>
			<name>Maintain your profile</name>
			<description>After logging in, select the Your Account > Your Information menu entry.</description>
		</item>
		
	</list>	
		
		
	</section>	
		
	</sections>
	
</group>
<group>
	<title>Tables and Sets</title>
<sections>
<section>
	<description>The AlphaSportsWeb application contains the following tables and sets.
</description>
<cases>
<case><title>
component_breakdown</title><description>
The component_breakdown table contains notes about which A5W pages contain which components, and notable features to be found in each.
</description></case><case><title>
customer</title><description>
The customer table contains all information that describes a customer. The difference from the version in the AlphaSports database is the new password field.
</description></case><case><title>
dummy</title><description>
The Dummy table provides a single record with a single field with a fixed value. This record provides a common parent or link for other unrelated tables. You can see the use of the dummy table in the TGRDL_HIST tabbed gridlinker component.
</description></case><case><title>
export_users</title><description>
The export_users table contains a list of user from the web security users table. This is used solely for demonstration purposes to show a list of users intially saved in the application. This table was populated by exporting users from the Users and Groups security form. See Export Users Table Definition.
</description></case><case><title>
invoice (set)</title><description>
The invoice set contains the information that describes an order. It is the same set found in the AlphaSports database. The set makes the invoice_header table parent to the customer and invoice_items tables. The invoice_items table is parent to the product table, which is parent to the vendor table.
</description></case><case><title>
invoice_header</title><description>
The invoice_header table contains part of the information that describes an order. The difference from the version in the AlphaSports database is the new type field, which defines the source of the sale.

</description></case><case><title>
invoice_invert (set)</title><description>
The invoice_invert set makes the invoice_items table parent to the invoice_header table. The ASWSALESHIST.A5W page uses the set to build sales summary tables.

</description></case><case><title>
invoice_items</title><description>
The invoice_items tables contains the information that describes the components of an order. It is the same table found in the AlphaSports database.

</description></case><case><title>
lk_avail</title><description>
AlphaSportsWeb uses the lk_avail table to list when the products are be expected to be in stock. The sort_ord field allows the list to be presented in shortest to longest order, instead of alphabetically. See lk_avail Table Definition.

</description></case><case><title>
product</title><description>
The product table contains all information that describes a product, including pictures, and associates each with a unique ID. This table is significantly different from the version in the AlphaSports database. See Product Table Changes.

</description></case><case><title>
product_category</title><description>
The product_category table lists product categories and associates each with a unique ID. See Product Category Table Definition.

</description></case><case><title>
sales_summary_cost</title><description>
The sales_summary_cost table lists number of invoices, the last invoice date, and the last invoice number for each customer. The ASWSALESHIST.A5W page runs the Xbasic copied from the sales summary by cost operation and populates the sales_summary_cost table. See Sales Summary Cost Table Definition.

</description></case><case><title>
sales_summary_quan</title><description>
The sales_summary_quan table lists the number of units sold and the last invoice date for each product. The ASWSALESHIST.A5W page runs the Xbasic copied fromthe sales summary by quan operation and populates the sales_summary_quan table. See Sales_Summary_Quan Table Definition.

</description></case><case><title>
shipping_types</title><description>
The shipping_types table lists shipping methods and associates each with a unique ID and base cost. See Shipping_Types Table Definition.

</description></case><case><title>
shop_cart</title><description>
The shop_cart table lists items that customers have selected (placed in a shopping cart), but have not actually purchased. See Shop_Cart Table Definition.

</description></case><case><title>
shop_cart_values (set)</title><description>
The shop_cart_values set links the shop_cart table (parent) one to one with the product table (child) and specials table (child).

</description></case><case><title>
special_sales (set)</title><description>
The special_sales set links the product table (parent) links one to one with the specials table (child).

</description></case><case><title>
specials</title><description>
The specials table lists products on sales, sale prices, and the date when each sale ends.

</description></case><case><title>
vendor</title><description>
The vendor table contains all information that describes a vendor. It is the same table found in the AlphaSports database.

</description></case><case><title>
web_reports</title><description>
The web_reports table contains information necessary to run and control access to reports. See Web_Reports Table Definition.
</description></case>
	
	
</cases>
	
</section>	
<section>
	<title>Export_Users Table Definition</title>
<description>The export_users table contains the following fields.</description>	
	<cases>
		<case>
			<title>User_Id</title>
			<description>Character,8. The user_id field holds a unique ID for each user.
</description>
		</case>
		<case>
			<title>Groups</title>
			<description>Memo,10. The groups field contains a comma delimited list of security groups assigned to the user.</description>
		</case>
		
	</cases>
	
</section>

<section>
	<title>lk_avail Table Definition</title>
<description>The lk_avail table contains the following fields.</description>	
	<cases>
		<case>
			<title>ship_avail</title>
			<description>Character,20.
The ship_avail field contains a description of the length of time until a product will be back in inventory.
</description>
		</case>
		<case>
			<title>sort_ord</title>
			<description>Numeric,2,0. 
The sort_ord field provides a way to sort the table by length of time until the product will be available.
</description>
		</case>
		
	</cases>
	
</section>
<section>
	<title>Product Table Changes</title>
<description>The AlphaSportsWeb product table contains all information necessary to describe and present a product to a customer. The list below contains the fields not found in the AlphaSports product table.</description>	
	<cases>
		<case>
			<title>List</title>
			<description>Numeric,7,2 Format. 
The list field contains the price of a product, as opposed to the actual (discounted) price of a product.
</description>
		</case>
		
		<case>
			<title>Cat_Id</title>
			<description>Character,4 Format. 
The cat_id field is an index into the product_category table, which contains descriptions of product categories. The relationship is defined on the Lookups tab of the cat_id field rules.
</description>
		</case>
		<case>
			<title>Picture</title>
			<description>Image File Reference Format.
The picture field contains a picture of the product.
</description>
		</case>
		<case>
			<title>Detail</title>
			<description>Memo Format. 
The detail field contains a long description of the product.
</description>
		</case>
		<case>
			<title>Ship_Avail</title>
			<description>Character,20. The ship_avail field contains the time interval until a product will be back in inventory. The relationship is defined on the Lookups tab of the ship_avail field rules.
</description>
		</case>
		
	</cases>
</section>
<section>
	<title>Product_Category Table Definition</title>
<description>The product_category table contains the following fields.</description>	
	<cases>
		<case>
			<title>Category</title>
			<description>Character, 30 format.
The category field contains a description of a product classification.
</description>
		</case>
			<case>
			<title>Cat_Id</title>
			<description>Character, 4 format. 
The cat_id field links to the cat_id field in the product table. This link enables product table layouts to display category field descriptions.
</description>
		</case>
		
		
	</cases>
</section>

<section>
	<title>Sales_Summary_Cost Table Definition</title>
	<description>The sales_summary_cost table contains the following fields. A summary operation populates this list.
</description>
	<cases>
		<case>
			<title>Customer_Id</title>
			<description>Character,8 format.
The customer_id field links to the customer_id field in the customer table.
</description>
		</case>
		<case>
			<title>Count_Invoice_Number</title>
			<description>Numeric,10,0 format.
The count_invoice_number field holds the number of purchases that a customer has made.
</description>
		</case>
		<case>
			<title>Last_Date</title>
			<description>Date,8 format.
The last_date field holds the date of the last purchase by a customer.
</description>
		</case>
		<case>
			<title>Last_Invoice_Number</title>
			<description>Character,6 format.
The last_invoice_number field holds the invoice number of the last purchase by a customer.
</description>
		</case>
		
		
	</cases>
	
</section>
<section>
	<title>Sales_Summary_Quan Table Definition</title>
<description>The sales_summary_quan table contains the following fields. A summary operation populates this table.
</description>	
<cases>
	<case>
		<title>Product_Id</title>
		<description>Character,12 format. The product_id field links to the product_id field in the product table.
</description>
	</case>
	<case>
		<title>Total_Quantity</title>
		<description>Numeric,8,0 format. The total_quantity field contains the number of units sold for each product.
</description>
	</case>
	<case>
		<title>Last_Invoice_Header_Date</title>
		<description>Date,8 format.
The last_Invoice_Header_date field holds the date of the last product sale.
</description>
	</case>
	
	
</cases>

	
</section>
<section>
	<title>Shipping_Types Table Definition</title>
<description>The shipping_types table contains the following fields.
</description>	
	<cases>
		<case>
			<title>Ship_Code</title>
			<description>Character,4 format. 
The ship_code field contains a unique value used to identify each delivery method.
</description>
		</case>
		<case>
			<title>Delivery_By</title>
			<description>Character,20 format.
The delivery_by field holds a description of a delivery method.
</description>
		</case>
		<case>
			<title>Base_Price</title>
			<description>Numeric,6,2 format. The base_price field contains the base price assigned to each delivery method.
</description>
		</case>
		<case>
			<title>Sort_Ord</title>
			<description>Numeric,4,0 format.
The sort_ord field contains a value used to order the display of the table's fields.
</description>
		</case>
		
	</cases>
</section>
<section>
	<title>Shop_Cart Table Definition</title>
	<description>The shop_cart table contains the following fields.</description>
	
	<cases>
		<case>
			<title>Item_Id</title>
			<description>Character,8 format.
The item_id field is not used.
</description>
		</case>
		<case>
			<title>Session_Id</title>
			<description>Character,40 format. 
The Application Server assigns Session_Id. Currently, WAS will use the same session ID for each browser for every access. If you close your browser and reopen, the WAS will assign the same session ID. It is used here to identify the browser used to create the cart, to show if any items were selected by the user's browser in a previous shopping "session".
</description>
		</case>
		<case>
			<title>Cart_Id</title>
			<description>Character,36 format. 
The cart_id contains a unique identifier for each collection of items selected for purchase.
</description>
		</case>
		<case>
			<title>Prod_Id</title>
			<description>Character,12 format.
The prod_id field contains the identifier for a product selected for purchase.
</description>
		</case>
		<case>
			<title>Owner_Id</title>
			<description>Character,8 format.
The owner_id field identifies the owner of the shopping cart, which is the customer ID of the user after he or she logs on.
</description>
		</case>
		<case>
			<title>Quantity</title>
			<description>Numeric,5,0 format. 
The quantity field contains the number of unit of a product selected for purchase.
</description>
		</case>
		<case>
			<title>Open</title>
			<description>Logical,1 format. 
The open field indicates whether a selected product has been purchased.
</description>
		</case>
		<case>
			<title>Ord_Date</title>
			<description>Date,8 format. 
The ord_date field contains the date that a product was selected for purchase.
</description>
		</case>
		<case>
			<title>Ord_Time</title>
			<description>Character,8 format. 
The ord_time field contains the time that a product was selected for purchase.
</description>
		</case>
		
		
		
	</cases>
	
	
	
	
</section>
<section>
	<title>Specials Table Definition
</title>
<description>The specials table contains the following fields.
</description>	
	<cases>
		<case>
			<title>Product_Id</title>
			<description>Character,12 format. 
The product_id field contains the unique identifier for a product. This field links to the product_id field of the product table.
</description>
		</case>
				<case>
			<title>Sale_Price</title>
			<description>Numeric,7,2 format. 
The sale_price field contains the discounted sale price of a product.
</description>
		</case>
				<case>
			<title>Sale_Until</title>
			<description>Date,8 format.
The sale_until field contains the last date that a product is on sale.
</description>
		</case>
		
	</cases>
	
	
</section>
<section>
	<title>Web_Reports Table Definition
</title>
<description>The web_reports table contains the following fields.
</description>	
	<cases>
		<case>
			<title>Rpt_Id</title>
			<description>Character,4 format.
The rpt_id field contains a unique ID for an Alpha Anywhere report.
</description>
		</case>
		<case>
			<title>Rpt_Name</title>
			<description>Character,26 format. 
The rpt_name field contains the name of a defined Alpha Anywhere report.
</description>
		</case>
		<case>
			<title>Rpt_Table</title>
			<description>Character,26 format.
The rpt_table field contains the name of the dictionary file that contains the report definition.
</description>
		</case>
		<case>
			<title>Rpt_Level</title>
			<description>Numeric,2,0 format.
Not used 
</description>
		</case>
		
		
	</cases>
</section>

	
	
</sections>	
	
</group>
<group>
	<title>Operations</title>
	<sections>
		<section>
			<description>The AlphaSportsWeb application contains the following operations not found in the AlphaSports application. Because a web application cannot directly run operations stored in an Alpha Anywhere database, we created these operations and then copied their underlying Xbasic into the ASWSALESHIST.A5W page.</description>
			
		</section>
		<section>
			<description>Operations:</description>
			<cases>
				<case>
					<title>Post_Sales_Quantities</title>
					<description>Subtracts the quantity field in the invoice_items table from the qty_in_sto field of the product table.</description>
				</case>
				<case>
					<title>sales_summary_by_cust</title>
					<description>This operation was the source of the Xbasic code that the ASWSALESHIST.A5W page runs to populate the sales_summary_cust table.</description>
				</case>
				<case>
					<title>sales_summary_by_quan</title>
					<description>This operation was the source of the Xbasic code that the ASWSALESHIST.A5W page runs to populate the sales_summary_quan table.</description>
				</case>
				
			</cases>
			
		</section>
		
	</sections>
	
</group>
<group>
	<title>Variables</title>
	<sections><section>
	<description>The AlphaSportsWeb application depends on a number of session and property array variables.</description>
	<cases>
		<case>
			<description>cart_ID</description>
		</case>
		<case>
			<description>cartparms</description>
		</case>
		<case>
			<description>checkout_vars</description>
		</case>
		<case>
			<description>flds[]</description>
		</case>
		<case>
			<description>fldsc[]</description>
		</case>
		<case>
			<description>fldsi[]</description>
		</case>
		<case>
			<description>session.protectedchkout</description>
		</case>
		<case>
			<description>session.protectedchkoutprogress</description>
		</case>
		<case>
			<description>session.protectedPuser</description>
		</case>
		<case>
			<description>session.dataclear</description>
		</case>
		<case>
			<description>session.enteruserdata</description>
		</case>
		<case>
			<description>session.targetURL</description>
		</case>
		<case>
			<description>sessionID</description>
		</case>
		
	</cases>
	</section>
	<section>
		<title>sessionID (C) and cart_ID (C)</title>
	<description>

The Application Server assigns each client browser a unique sessionID. This identifier remains constant between browser sessions. The application stores sessionID in the shop_cart table.

The cart_id variable is unique for each browser session. The API_UUIDCREATE() function creates cart_id, which is a Universally Unique Identifier (UUID...otherwise known as a Globally unique ID or GUID). This is a 32 character (128 bit) hexadecimal string (not including dashes) that is guaranteed to be completely unique if you have a network card. The application stores cart_id in the shop_cart table and in the cart_id cookie.
</description>	
		
	</section>
	<section>
		
	<description>Together, cart_id and sessionID allow the customer to exit the application, then resume shopping and find previously selected (but not purchased) items in the shopping cart.</description>	
		
	</section>
	<section>
		<title>>flds[] (P), >fldsc[] (P), and fldsi[] (P)</title>
	<description>The ASWINVDET.A5W page populates the flds[] property array with the field values of the invoice_header table record, where the invoice_number field equals the value contained in inv. The script uses the .INITIALIZE_FROM_TABLE() method. The same technique to populates the fldsc[] property array with the field values of the customer table record, where the customer_id field equals the value contained in flds[1].customer_id. Another part of the script uses .INITIALIZE_PROPERTIES() to create and initialize property variables under the fldsi[] property array.

.INITIALIZE_FROM_TABLE()is a fast and easy way to extract values from a table into a format that can be manipulated, and in this case, displayed. .INITIALIZE_PROPERTIES()is a fast way to create a dot variable with default values.
</description>	
		
	</section>
	<section>
		<title>_protectedchkoutprogress>session.protectedchkoutprogress (N)</title>
	<description>The INDEX.A5W, CHECKOUTCALC.A5W, CHECKOUTCART.A5W, CHECKOUTCOMP.A5W, and CHECKOUTUSER.A5W pages use session.protectedchkoutprogress to control and verify the user's progression through the 3 checkout screens.

The session.protectedchkoutprogress variable is protected from attempted changes from the URL query string.
</description>	
		
	</section>
	<section>
	<cases>
		<case>
			<title>INDEX.A5W</title>
			<description>When a customer arrives at either of these pages, the assumption is that he or she is ready to begin shopping. as a consequence, the script resets the session.protectedchkoutprogress variable to 0, meaning checkout has not begun.
</description>
		</case>
		<case>
			<title>PRODUCTLIST.A5W
</title>
			<description></description>
		</case>
		<case>
			<title>CHECKOUTCART.A5W
</title>
			<description>When the customer has successfully added an item to a shopping cart, the script sets the checkout progress to 1.
</description>
		</case>
		<case>
			<title>CHECKOUTUSER.A5W
</title>
			<description>The checkout progress must be greater than or equal to 1 to display this page. When the customer has successfully entered all required information, the AfterValidate event of the DLG_UCHKOUT dialog component sets the checkout progress to 2.
</description>
		</case>
		<case>
			<title>CHECKOUTCOMP.A5W
</title>
			<description>The checkout progress must be greater than or equal to 2 to display this page. When the customer has successfully completed the checkout process, the script sets the checkout progress to 3.
</description>
		</case>
		<case>
			<title>CHECKOUTCALC.A5W
</title>
			<description>The checkout progress must be greater than or equal to 3 to display this page.
</description>
		</case>
		
	</cases>
	</section>
	<section>
		<title>_protectedchkout>session.protectedchkout (P)</title>
	<description>The session.protectedchkout dot variable holds the customer's shipping and billing field values input to the CHECKOUTUSER.A5W page.

The session.protectedchkout variable is protected from attempted changes from the URL query string.
</description>	
<cases>
	<case>
		<title>INDEX.A5W</title>
		<description>When a customer arrives at either of these pages, the assumption is that he or she is ready to begin shopping. as a consequence, the script deletes the session.protectedchkout variable, which may contain old data.
</description>
	</case>
	<case>
		<title>PRODUCTLIST.A5W
</title>
		<description></description>
	</case>
	<case>
		<title>CHECKOUTCALC.A5W
</title>
		<description>The page does not display, if the session.protectedchkout variable does not exist. If the variable does exist, the script copies it values to checkout_vars and deletes session.protectedchkout.
</description>
	</case>
	<case>
		<title>CHECKOUTUSER.A5W</title>
		<description>If the value of the session.dataclear variable is .T., the Activate event of the DLG_UCHKOUT dialog component initializes the session.protectedchkout variable.

If the value of the session.enteruserdata variable it NULL, the Activate event of the DLG_UCHKOUT dialog component sets the dialog's controls with the contents of the session.protectedchkout variable.
</description>
	</case>
	<case>
		<title>CHECKOUTCOMP.A5W
</title>
		<description>One of the first things that the page script does is test the value of session.protectedchkout.firstname. If NULL, the customer's information is assumed to be incomplete, and control is redirected to the CHECKOUTCART.A5W page.
Next, the script checks to see if a number of critical invoicing variables have values. If a problem is found, the script places an error message into the error_msg variable. Otherwise, the script prepares and displays the shopping cart, shipping and billing information on the page.
</description>
	</case>
	
</cases>
		
	</section>
	<section>
		<title>_protectedPuser>session.__protected.pUser (P)</title>
	<description>This pointer variable contains information about the current logged in user. The session.protectedpUser.ulink variable is populated by the security system and contains the value saved in the ulink security field for the current logged in user. The session.protectedpUser.ulink variable is used in the component grd_invhcp to set the value for the argument :WhatCustomer. The argument is used in a filter to show only records for the current logged in user. It is also used by the LOGGEDINVALUES.A5W page to identify the current logged in user. The LOGGEDINVALUES.A5W page populates the variables session.protectedpUser.name and session.protectedpUser.type for the current logged in user. 

The session.protectedpUser variable is protected from attempted changes from the URL query string.
</description>	
		
	</section>
	<section>
		<title>checkout_vars (P)</title>
<description>The CHECKOUTCALC.A5W script copies the session.protectedchkout data into checkout_vars, then deletes session.protectedchkout. This prevents the user from submitting the page a second time after clicking the "Back" button.</description>		
		
	</section>
		<section>
		<title>cartparms (P)</title>
<description>The cartparms pointer variable contains the information that describes the customer's shopping session. The CHECKOUTCART.A5W and SHOPCART.A5W pages define cartparms and pass it to the shopcart_chk() function. This function checks to see if the customer has an existing cart exists from a previous session. If so, the function returns the HTML required to display the cart's contents.

The SHOPCART_ADD.A5W page uses cartparms to check if a shopping cart remains from a previous session. If not, it uses shopcart_add() to create a new shopping cart containing the selected product.
</description>		
		
	</section>
		<section>
		<title>session.dataclear (L)</title>
<description>The CHECKOUTUSER.A5W page uses session.dataclear to indicate whether the user has pressed the "Clear" button. If so, the Activate event of the DLG_UCHKOUT dialog component erases the contents of the dialog's controls and the AfterValidate event uses it as an indication that it does not need to save the user's input.</description>		
		
	</section>
		<section>
		<title>session.enteruserdata (C)</title>
<description>The CHECKOUTUSER.A5W page uses session.dataclear to hold the user's customer ID after he presses the "adduser" button. The Activate event of the DLG_UCHKOUT dialog component uses the session.dataclear in the filter expression that retrieves the customer's data from the customer table.</description>		
		
	</section>
		<section>
		<title>session.targetURL (C)</title>
<description>The CHECKOUTUSER.A5W page uses session.targetURL to save the URL of the current page when it needs to temporarily redirect to LOGIN.A5W page. If the application user is classified as Internal, the Validate event of the DLG_UCHKOUT dialog component sets session.targetURL to NULL. This variable is only used on public pages.</description>			
	</section>
	
	</sections>
	
	
</group>
<group>
	<title>Adding an Item to the Shopping Cart</title>
<sections>
	<section>
		
		<description>INDEX.A5W and SPECIALS.A5W (containing the GRD_SPEC grid component), PRODUCTINFO.A5W (containing the GRD_PRODONE grid component), and PRODUCTLIST.A5W (containing the GRD_PRODS grid component) include the SHOPCART.JS JavaScript file into their pages. In each case the component has one or more image buttons that call the JavaScript add_to_cart_quan() function, passing the product_id value of the selected product. The JavaScript function opens and prompts for a quantity, and then opens another page as a popup and passes the product ID to that page in the page URL. If the prompt is cancelled or the value entered is 0, the JavaScript ends and no item is added to the cart. 
</description>
		
	</section>
	<section>
		<description>Variations of the following code are found in the Column Properties > Freeform Template property of the "Sale Price" field of the GRD_SPEC and GRD_PRODONE grid components. Similar code is located under the Column Properties > Freeform Template property of the "Cart" field of the GRD_PRODS grid component.</description>
		
	</section>
	
<section>
	<steps>
		<step>
			<description>In each case clicking the image button calls the add_to_cart_quan() function and passes the current value of product_id. We placed this code in a freeform template to allow the OnClick event of the image to run the Javascript.
</description>
		</step>
		<step>
			<description>The JavaScript function shows a prompt to specify the quantity to order and then displays the SHOPCART_ADD.A5W page in a new window. The product ID is a URL parameter,and is locally named prod_id. The quan is also added to the URL and is obtained from the prompt. There are another version of the function named add_to_cart() that does not open a prompt to select quantity. Instead, a default quantity of 1 will be assigned. 
</description>
		</step>
		<step>
			<description>The SHOPCART_ADD.A5W script tests to see if the cart_id variable (cookie) exists. If not, the script creates it.
</description>
		</step>
		<step>
			<description>Next, the script creates the cartparms pointer variable, and among other assignments, sets the cartparms.product_id variable to the product ID value received in the URL and sets the cartparms.quantity variable to the Quan value from the prompt.
</description>
		</step>
		<step>
			<description>SHOPCART_UDF.A5W adds a record to the shop_cart table, then prepares and returns the HTML code displayed on the page.
</description>
		</step>

	</steps>
	
	
</section>	
	
	
</sections>	
	
	
</group>
<group>
	<title>Web Publishing Components</title>
	<sections>
		<section>
			<description>The AlphaSportsWeb application contains the following web publishing components.</description>
<cases>
	<case><title>
	DLG_CUSTEDIT</title><description>
Dialog. 
Customers use this dialog to edit their user and security information.</description></case><case><title>
DLG_CUSTSEC</title><description>
Dialog. 
Administrators use this dialog to edit a customers security information.</description></case><case><title>
DLG_HDATE</title><description>
Dialog. 
Sets the "from" date to use in the filter expression that selects records for the GRD_HISTCUST and GRD_HISTQUAN grid components.
</description></case><case><title>
DLG_IEMAIL</title><description>
Dialog. 
Sends an email.</description></case><case><title>
DLG_INTUSER</title><description>
Dialog. 
Internal user use this dialog to edit their user and security infomation or the information for other internal users.
</description></case><case><title>
DLG_MAINT</title><description>
Maintenance. 
A maintenance component to pack or reindex tables.</description></case><case><title>
DLG_MAINTOPT</title><description>
Dialog. 
Selects an administrative maintenance operation to run.</description></case><case><title>
DLG_REGCART</title><description>
Dialog. 
Customers use this dialog to enter security information if they are registering for the first time.</description></case><case><title>
DLG_REPORTS</title><description>
Dialog. 
Selects an administrative report to run.</description></case><case><title>
DLG_UCHKOUT</title><description>
Dialog. 
Captures or displays the customer information required by the billing and shipping processes.</description></case><case><title>
GRD_CART</title><description>
Grid. 
Displays the contents of the customer's shopping cart. It allows the customer to change item quantities or remove items from the cart.
</description></case><case><title>
GRD_CARTOUT</title><description>
Grid. 
Displays the contents of the customer's shopping cart. It allows the customer to change item quantities or remove items from the cart.
</description></case><case><title>
GRD_CUST</title><description>
Grid. 
Administrators and logged in users use this grid to view and edit customer records.</description></case><case><title>
GRD_CUSTEMAIL</title><description>
Grid. 
A lookup that allows users to select email addresses by user name.</description></case><case><title>
GRD_CUSTLIST</title><description>
Grid. 
Administrators use this grid to select and view customer information and customer sales histories.</description></case><case><title>
GRD_CUSTN</title><description>
Grid. 
Administrators use this grid to enter new customer records.</description></case><case><title>
GRD_HISTCUST</title><description>
Grid. 
Administrators use this grid to review customer sales.</description></case><case><title>
GRD_HISTQUAN</title><description>
Grid. 
Administrators use this grid to review product sales.</description></case><case><title>
GRD_INTPROD</title><description>
Grid. 
Administrators use this grid to maintain product records.</description></case><case><title>
GRD_INTSPEC</title><description>
Grid. 
Administrators use this grid to maintain the list of products on sale.</description></case><case><title>
GRD_INTUSERLIST</title><description>
Grid. 
Administrators use this grid to show a list of internal users.</description></case><case><title>
GRD_INVHC</title><description>
Grid. 
Displays a list of invoices placed by all customers.</description></case><case><title>
GRD_INVHCP</title><description>
Grid. 
Displays a list of orders placed by a customer.</description></case><case><title>
GRD_INVHEAD</title><description>
Grid. 
Administrators use this grid to select an invoice to view the items in an order.</description></case><case><title>
GRD_INVLINES</title><description>
Grid. 
Administrators use this grid to see the details of the items in an order.</description></case><case><title>
GRD_LKCATS</title><description>
Lookup Grid. 
Provides a lookup of product category names and IDs</description></case><case><title>
GRD_LKPROD</title><description>
Lookup Grid. 
Provides a lookup of product record fields.</description></case><case><title>
GRD_LKVEN</title><description>
Lookup Grid. 
Provides a lookup of vendor names and IDs.</description></case><case><title>
GRD_LOGINDATA</title><description>
Grid. 
Used on login page as an example to show a list of users in the security system.</description></case><case><title>
GRD_PRODDET</title><description>
Grid
Administrators use this grid to maintain the details of a product listing.</description></case><case><title>
GRD_PRODNAV</title><description>
Grid. 
Customers use this grid to select a product category to filter the list of displayed products on the PRODUCTLIST.A5W page.
</description></case><case><title>
GRD_PRODIMG</title><description>
Grid. 
Administrators use this grid to maintain add images to product records</description></case><case><title>
GRD_PRODONE</title><description>
Grid. 
Customers use this grid to view the detailed description of a product before ordering it.</description></case><case><title>

GRD_PRODS</title><description>
Grid. 
Customers use this grid to view an alphabetical list of products. The customer can order a product by clicking the shopping cart image.
</description></case><case><title>
GRD_SPEC</title><description>
Grid. 
Customers use this grid to view products that are on sale with discounted prices. The customer can order a product by clicking the shopping cart image.
</description></case><case><title>
GRD_TITLEHIST</title><description>
Grid. 
A device that allows the TGRDL_HIST tabbed gridlinker to display unrelated tables.
</description></case><case><title>
GRD_VEND</title><description>
Grid. 
Administrators use this grid to input, edit, and delete vendor records.
</description></case><case><title>
GRDL_INV</title><description>
GridLinker. 
Administrators use this component to display the GRD_INVHEAD and GRD_INVLINES grid components in a parent-child relationship.
</description></case><case><title>
LG_LOGIN</title><description>
Login. 
Used to login to system as part of security system. 
</description></case><case><title>
NAV_INT</title><description>
Navigation.
Provides the mechanism for moving between the administrative pages of the application.
</description></case><case><title>
NAV_MAIN</title><description>
Navigation.
Provides the mechanism for moving between the public pages of the application.</description></case><case><title>
TGRDL_CUST</title><description>
Tabbed Grid Linker.
Administrators use this component to review and edit customer records and customer sales history.</description></case><case><title>
TGRDL_HIST</title><description>
Tabbed GridLinker.
Administrators use this component to review overall sales history.</description></case>

	
	
</cases>			
		</section>
		
		
		
		
	</sections>
	
	
	
</group>

<group>
	<title>Web Pages</title>
	<sections>
		<section>
			<description>The AlphaSportsWeb application contains the following A5W and HTML web pages.</description>
		</section>
	<section>
<cases>
	<case>
		<title>A5_INFO.A5W</title>
		<description>Administrative users use the A5_INFO.A5W page to display information about the Application Server and current sessions.</description>
	</case>
	<case>
		<title>ASWCUSTDET.A5W</title>
		<description>Administrative users use the ASWCUSTDET.A5W page to view or edit a single customer record.</description>
	</case>
	<case>
		<title>ASWCUSTOMERS.A5W</title>
		<description>Application administrators use the ASWCUSTOMERS.A5W page to maintain customer records.</description>
	</case>
	<case>
		<title>ASWCUSTONE.A5W</title>
		<description>Application administrators users use the ASWCUSTONE.A5W page to view a single customer record.</description>
	</case>
	<case>
		<title>ASWINDEX.A5W</title>
		<description>The ASWINDEX.A5W page is the landing page for internal users. The page appears after an internal user logs in, but before he or she uses the navigation component to select another page.</description>
	</case>
	<case>
		<title>ASWCUSTSEC.A5W</title>
		<description>Application administrators users use the ASWCUSTSEC.A5W page to view a single customer's security record.</description>
	</case>
	<case>
		<title>ASWINVOICES.A5W</title>
		<description>The application administrator users the ASWINVOICES.A5W page to select, view, and print the details of invoices.</description>
	</case>
	<case>
		<title>ASWMAINT.A5W</title>
		<description>The application administrator uses the ASWMAINT.A5W page to select various file maintenance actions.
</description>
	</case>
	<case>
		<title>ASWMAINTOPT.A5W</title>
		<description>The ASWMAINTOPT.A5W page runs the maintenance operation selected in the ASWMAINT.A5W page.
</description>
	</case>
	<case>
		<title>ASWPACKREINDEX.A5W</title>
		<description>The application administrator uses the ASWPACKREINDEX.A5W page to pack or reindex the tables used by the AlphaSports Web application.</description>
	</case>
	<case>
		<title>ASWPRINTRPT.A5W</title>
		<description>The application administrator uses the ASWPRINTRPT.A5W page to select a report to print.</description>
	</case>
	<case>
		<title>ASWPROCESSING.A5W</title>
		<description>The ASWPROCESSING.A5W page displays a frame set. The upper frame's content shows the system is "processing". The lower frame contains a page that is performing a maintenance operation.</description>
	</case>
	<case>
		<title>ASWPRODONE.A5W</title>
		<description>The application administrator uses the ASWPRODONE.A5W page to view or edit a product record.</description>
	</case>
	<case>
		<title>ASWPRODUCTS.A5W</title>
		<description>The application administrator uses the ASWPRODUCTS.A5W to input, edit, and delete product records.</description>
	</case>
	<case>
		<title>ASWSALESHIST.A5W</title>
		<description>The application administrator uses the ASWSALESHIST.A5W page to review the number of unit sales for products and the number of sales to customers.</description>
	</case>
	<case>
		<title>ASWSEARCH.A5W</title>
		<description>The application administrator uses the ASWSEARCH.A5W page to find the value of any field in any record in the customers, products, and invoices tables.</description>
	</case>
	<case>
		<title>ASWSENDEMAIL.A5W</title>
		<description>The application administrator would use the ASWSENDEMAIL.A5W page to send an email, presumably to someone in the customer table.</description>
	</case>
	<case>
		<title>ASWSPECLIST.A5W</title>
		<description>The application administrator uses the ASWSPECLIST.A5W page to add, edit, and delete special (sale) prices.</description>
	</case>
	<case>
		<title>ASWUPLOADIMG.A5W</title>
		<description>The application administrator uses the ASWUPLOADIMG.A5W page to add a new image to a rpoduct record.</description>
	</case>
	<case>
		<title>ASWUSERGET.A5W</title>
		<description>ASWUSERGET.A5W contains logic to determine if a logged in user has an employee record.</description>
	</case>
	<case>
		<title>ASWUSERLIST.A5W</title>
		<description>The application administrator uses the ASWUSERLIST.A5W page to show a list of internal users.</description>
	</case>
	<case>
		<title>ASWUSERONE.A5W</title>
		<description>An internal user opens the ASWUSERONE.A5W page to view or edit his or her user name and password.</description>
	</case>
	<case>
		<title>ASWVENDONE.A5W</title>
		<description>The ASWVENDONE.A5W page provides a vendor lookup function for the GRD_LKVEN grid component, which is used when the application administrator is editing or adding a product record.
</description>
	</case>
	<case>
		<title>ASWVENDORS.A5W</title>
		<description>The application administrator uses the ASWVENDORS.A5W page to add, edit, or delete vendor records.</description>
	</case>
	<case>
		<title>CHECKOUTCALC.A5W</title>
		<description>The CHECKOUTCALC.A5W page performs the final processing of an order. It updates tables, generates an invoice, optionally prints the invoice for the customer, and subtracts the items sold from inventory.</description>
	</case>
	<case>
		<title>CheckOutCalcPayPal.A5W</title>
		<description>The CheckOutCalcPayPal.A5W page performs the final processing of an order. It updates tables, generates an invoice, optionally prints the invoice for the customer, and subtracts the items sold from inventory. This variation of the CHECKOUTCALC.A5W page pairs with the CheckOutCompPayPal.A5W page to illustrate the use of PayPal.</description>
	</case>
	<case>
		<title>CHECKOUTCART.A5W</title>
		<description>The CHECKOUTCART.A5W page is the first page in the checkout process. The page verifies the product quantities the shopping cart, then sets a session variable to track the progress of the check out process.</description>
	</case>
	<case>
		<title>CHECKOUTCOMP.A5W</title>
		<description>The CHECKOUTCOMP.A5W is the 3rd page in the checkout process. The customer provides credit card payment information on this page.</description>
	</case>
	<case>
		<title>CheckOutCompPayPal.A5W</title>
		<description>The CheckOutCompPayPal.A5W is the 3rd page in the checkout process. The customer provides credit card payment information on this page. This variation of the CHECKOUTCOMP.A5W page pairs with the CheckOutCalcPayPal.A5W page to illustrate the use of PayPal.</description>
	</case>
	<case>
		<title>CHECKOUTREGISTER.A5W</title>
		<description>The CHECKOUTREGISTER.A5W page is an optional fourth step in the checkout process. It allows a new customer to enter security information to register..</description>
	</case>
	<case>
		<title>CHECKOUTUSER.A5W</title>
		<description>The CHECKOUTUSER.A5W page is the second step in the checkout process. It allows the customer to enter shipping and billing information.</description>
	</case>
	<case>
		<title>CUSTOMER.A5W</title>
		<description>A customer uses the CUSTOMER.A5W page to edit his or her contact, shipping, and billing information. The which requires a login. It contains saved information about the current logged on customer.</description>
	</case>
	<case>
		<title>FRAMEEXIT.A5W</title>
		<description>The AlphaSportsWeb application uses the FRAMEEXIT.A5W page to exit from an inner frame in a frame set. In AlphaSportsWeb frame sets display a header in the upper frame, while a processing page in the lower frame is doing some sort of computation.</description>
	</case>
	<case>
		<title>INDEX.A5W</title>
		<description>INDEX.A5W is the first page that AlphaSportsWeb displays. The page contains a list of product categories, a random list of 3 products on sale, and the NAV_MAIN navigation component, which allows the user to login to administrative pages.</description>
	</case>
	<case>
		<title>INVDETAIL.A5W</title>
		<description>The INVDETAIL.A5W page displays a printable version of an invoice.</description>
	</case>
	<case>
		<title>LOGGEDINVALUES.A5W</title>
		<description>LOGGEDINVALUES.A5W page finds values for an existing logged in user.</description>
	</case>
	<case>
		<title>LOGIN.A5W</title>
		<description>LOGIN.A5W is the main login page for all users.
</description>
	</case>
	<case>
		<title>LOGINLIST.A5W</title>
		<description>LOGINLIST.A5W is a demonstration page to show a list of users initially configured in the security system.</description>
	</case>
	<case>
		<title>NOTALLOWED.A5W</title>
		<description>NOTALLOWED.A5W will be shown to a logged in user if they don't have permssion to see a requested page </description>
	</case>
	<case>
		<title>PROCESSHEADER.A5W</title>
		<description>The PROCESSHEADER.A5W page displays content that indicates that the application is working.</description>
	</case>
	<case>
		<title>PRODUCTINFO.A5W</title>
		<description>A customer uses the PRODUCTINFO.A5W page to display a single product record which contains a larger product picture and a longer product description.
</description>
	</case>
	<case>
		<title>PRODUCTLIST.A5W</title>
		<description>A customer uses the PRODUCTLIST.A5W page to display a list of products with thumbnail pictures and prices and to purchase an item by clicking the shopping cart image.</description>
	</case>
	<case>
		<title>SALESHIST.A5W</title>
		<description>A customer view the SALESHIST.A5W page to view his or hear sales history.</description>
	</case>
	<case>
		<title>SEARCH_UDF.A5W</title>
		<description>The SEARCH_UDF.A5W page contains the search code used by the ASWSEARCH.A5W page
</description>
	</case>
	<case>
		<title>SHOPCART.A5W</title>
		<description>A customer views the SHOPCART.A5W to see the items selected for purchase.</description>
	</case>
	<case>
		<title>SHOPCART_ADD.A5W</title>
		<description>The SHOPCART_ADD.A5W page displays in a popup window to confirm that the customer has added an item to the shopping cart.</description>
	</case>
	<case>
		<title>SHOPCART_UDF.A5W</title>
		<description>The SHOPCART_UDF.A5W page provides functions for the shopping cart.</description>
	</case>
	<case>
		<title>SPECIALS.A5W</title>
		<description>A customer displays the SPECIALS.A5W page to view all products on sale.</description>
	</case>
	<case>
		<title>TEMPLATEINT.A5W</title>
		<description>We used TEMPLATEINT.A5W to simplify and speed the development process.</description>
	</case>
	<case>
		<title>TEMPLATEPUBLIC.A5W</title>
		<description>We used TEMPLATEPUBLIC.A5W to simplify and speed the development process.</description>
	</case>
	<case>
		<title>TOPPAGE.A5W</title>
		<description>The TOPPAGE.A5W page contains the page header.</description>
	</case>
	<case>
		<title>UNDERCONSTRUCT.A5W</title>
		<description>The AlphaSportsWeb application displays the UNDERCONSTRUCT.A5W page when the user attempts to display an unfinished page.</description>
	</case>
	<case>
		<title>ERRORPAGE.HTM</title>
		<description>The AlphaSportsWeb application displays ERRORPAGE.HTM only if a parameter sent to a page is missing or incorrect.</description>
	</case>
	<case>
		<title>PAGE_NOT_FOUND.HTM</title>
		<description>PAGE_NOT_FOUND.HTM is a sample page that could be used to redirect from a 404 server error</description>
	</case>
	<case>
		<title>PROCESSING.HTM</title>
		<description>The PROCESSING.HTM page is a frameset used to show a header while a page within the frameset is processing.</description>
	</case>
	
</cases>
</section>	
	</sections>
	
</group>
<group>
	<title>Removing Non-essential Code</title>
	<sections>
		<section>
			<description>When the HTML Editor places a component on an A5W page, the result for a grid looks something like this (in this case for a component named grd_prods ).</description>
		<example><![CDATA[<table>
<tr>
<td> <%A5 ?x_grd_prods.Output.Body.Grid_Echo %> </td>
</tr>
<tr>
<td> <%A5 ?x_grd_prods.Output.Body.UpdateErrors %> </td>
</tr>
<tr>
<td> <%A5 ?x_grd_prods.Output.Body.Search_HTML %> </td>
</tr>
<tr>
<td> <%A5 ?x_grd_prods.Output.Body.Grid_HTML %> </td>
</tr>
<tr>
<td> <%A5 ?x_grd_prods.Output.Body.DetailView_HTML %> </td>
</tr>
</table> ]]></example>
		</section>
		<section>
			<description>Frequently, some of these sections are not needed and can be removed to give better formatting and reduce the amount of HTML on the page. I did it on almost every page.</description>
			<cases>
				<case>
					<description>"Grid_Echo" can almost always be removed.</description>
					
				</case>
					<case>
					<description>"Update_errors" can be removed on any component that is view only (no data to update).

</description>
					
				</case>
					<case>
					<description>"Search_HTML" can be removed if there is no search section, or it is not used.</description>
					
				</case>
					<case>
					<description>"DetailView_HTML" can be removed if there is no detail section.</description>
					
				</case>
				
				
			</cases>
			
		</section>
		<section>
			<description>After a little extra formatting, the simplified version of the page code now looks like this:</description>
			<example><![CDATA[<table border="0" cellspacing="3" cellpadding="0">
<tr>
<td> <%A5 ?x_grd_prods.Output.Body.Grid_HTML %> </td>
</tr>
</table> ]]></example>
		</section>
		
	</sections>
	
</group>
<group>
	<title>Customizing AlphaSportsWeb</title>
	<sections>
<section>
	<title>Changing Styles</title>
	<description>You can change the appearance of the AlphaSportsWeb application by changing the underlying Cascading Style Sheets.
</description>
	<steps>
		<step>
			<description>Open the Web Projects Control Panel.
</description>
		</step>
		<step>
			<description>Select Edit > Web Component Style Sheets... .
</description>
		</step>
		<step>
			<description>Select the style sheet you would like to edit and click Open.
</description>
		</step>
		<step>
			<description>Refer to Webform Style Builder for more detailed instructions.
</description>
		</step>
		
	</steps>
</section>		
<section>
	
	<description>If you wish to use a different style sheet for a dialog component:
</description>
	<steps>
		<step>
			<description>Open the dialog component in the Dialog Builder.
</description>
		</step>
		<step>
			<description>Display the Form > Properties menu.
</description>
		</step>
		<step>
			<description>Click the web properties button in the Layout Options > Style name property to select a different style sheet.
</description>
		</step>
		
	</steps>
</section>		

<section>
	
	<description>If you wish to use a different style sheet for a grid component:
</description>
	<steps>
		<step>
			<description>Open the grid component in the Grid Builder.
</description>
		</step>
		<step>
			<description>Display the Grid > Properties menu.
</description>
		</step>
		<step>
			<description>Click web properties button in the Layout Options > Style name property to select a different style sheet.
</description>
		</step>
		
	</steps>
</section>			

<section>
	
	<description>If you wish to use a different style sheet for a navigation component:
</description>
	<steps>
		<step>
			<description>Open the navigation component in the Navigation System Builder.
</description>
		</step>
			<step>
			<description>Display the Navigation System menu.
</description>
		</step>
			<step>
			<description>Click web properties button in the Root Settings > Style property to select a different style sheet.
</description>
		</step>
		
	</steps>
</section>		

<section>
	
	<description>Many pages contain style overrides. You also can change these settings. The ASWCUSTDET.A5W page contains a typical example of a style override.
</description>
	<steps>
		<step>
			<description>Open the A5W page in an editor.
</description>
		</step>
		<step>
			<description>At the top of the page is a line of Xbasic that sets the variable pgstyle to the name of a CSS style. You can change the style here.
</description>
<example><![CDATA[pgstyle = "asw" 'override page styles
]]></example>
		</step>
		<step>
			<description>Alternatively, look for the section between ... tags after a line of Xbasic that contains a call to a5w_load_component(). You will see a section of code similar to the one below. Here you could set the style_name property to the name of a CSS style. From this:
</description>
			

<cases>
	<case>
		<example><![CDATA[with tmpl_NAV_INT
    ...
    style_name = pgstyle ' override style
    ...
end with]]></example>
	</case>
	<case>
		<description>to this:</description>
		<example><![CDATA[with tmpl_NAV_INT
    ...
    style_name = "asw"
    ...
end with]]></example>
	</case>
	
</cases>


		</step>
		
	</steps>
</section>		
<section>
	<title>Other Grid Component Modifications
</title>
<description>There are a number of other grid properties that you can easily modify that will change its appearance.
</description>	
	
</section>
<section>
	<title>Properties</title>
	<cases>
		<case>
			<title>Grid > Fields > Display Settings > Display format</title>
			<description>This property defines currency and date display formats.</description>
		</case>
		<case>
			<title>Grid > Fields > Summary values</title>
			<description>This set of properties enables the calculation and display of column summaries.</description>
		</case>
		<case>
			<title>Grid > Fields > Column Properties > Column heading</title>
			<description>This is the caption that appears above a column or to the left of a row.</description>
		</case>
		<case>
			<title>Grid > Fields > Column Properties > Cell in-line style</title>
			<description>This property specifies new style settings that override the style settings of the cascading style sheet.</description>
		</case>
		<case>
			<title>Grid > Properties > Layout Options > Rows of data</title>
			<description>This property sets the number of rows that appear in a grid.</description>
		</case>
		<case>
			<title>Grid > Properties > Layout Options > Font size</title>
			<description>Changing the default value of "Medium" to "Smaller" reduces the point size of the text and makes the grid smaller.</description>
		</case>
		<case>
			<title>Grid > Properties > Shading and Dividers > Alternate row shading</title>
			<description>Setting this property to TRUE causes alternative grid rows to have different colors.</description>
		</case>
		<case>
			<title>Grid > Properties > Record Navigator > Record navigator layout</title>
			<description>Use the Record Navigator Designer to restyle the navigation controls used by your grid.</description>
		</case>
		<case>
			<title>Grid > Properties > Quick Search > Has Quick Search</title>
			<description>The Quick Search feature is a fast and efficient way to help users find records in your grid.</description>
		<cases>
			<case>
				<description>"No records found" and "Total records" messages
</description>
			</case>
			<case>
				<description>HTML that appears between grid rows.
</description>
			</case>
			<case>
				<description>Properties of the tag underlying the grid.</description>
			</case>
			<case>
				<title>Grid > Properties >
Summary value options
</title>
				<description>This set of grid properties define the labels and style properties associated with summary fields (if you have defined any).</description>
			</case>
			<case>
				<title>Grid > Properties >
Show on last page only
</title>
				<description>By default column summary fields appear on each page of the grid. This property causes them to appear only on the last page of the grid.</description>
			</case>
			<case>
				<title>Grid > Properties >
Freeform Edit Regions
</title>
				<description>This set of grid properties modifies allows you to define HTML that will appear above, below, to the left, and to the right of the grid. This benefit of this feature is that it allows you to associate specific page content with the grid, no matter what page it appear upon.</description>
			</case>
			<case>
				<title>Grid > Update Settings >
Permissions > Number of new record rows
</title>
				<description>This property defines the number of blank new record rows that appear in the grid when the user is allowed to add records.</description>
			</case>
			<case>
				<title>Grid > Update Settings >
Permissions > Show new records on last page only
</title>
				<description>By default new record row(s) appear on every page of the grid. This property causes them to appear only on the last page of the grid.</description>
			</case>
			<case>
				<title>Grid > Update Settings >
Validation
</title>
				<description>This set of grid properties modifies the:</description>
				<cases>
					<case>
						<description>Text that appears in error messages when field validation errors occur.
</description>
					</case>
					<case>
						<description>The instruction message that explains to the user how to correct an error.
</description>
					</case>
					<case>
						<description>The column labels that appear above the row(s) of validation error messages.
</description>
					</case>
					
				</cases>
			</case>
			<case>
				<title>Grid > Update Settings >
Customization
</title>
				<description>This set of grid properties modifies the:</description>
				<cases>
					<case>
		
				<description>Text label of the Submit button.
</description>
			</case>
			<case>
		
				<description>Text label of the Delete checkbox.
</description>
			</case>
			<case>
				
				<description>Text label of the Cancel button.
</description>
			</case>
			<case>
			
				<description>Whether a Cancel button appears.
</description>
			</case>
				</cases>
			</case>
			
		</cases>
		
		</case>
		
		
	</cases>
	
</section>
<section>
	<title>More Consequential Modifications
</title>
<description>There are a number of more consequential modifications that you will want to make after you have carefully considered your application requirements.</description>	
	<cases>
		<case>
			<title>Grid > Fields > Column Properties > Security Groups</title>
			<description>This property sets the security groups allowed to see a grid control.</description>
		</case>
		<case>
			<title>Grid > Update Settings >
Permissions > Allow delete
</title>
			<description>Set this property to FALSE to prevent users from deleting records.</description>
		</case>
		<case>
			<title>Grid > Update Settings >
Permissions > Allow update
</title>
			<description>Set this property to FALSE to prevent users from modifying records.</description>
		</case>
		<case>
			<title>Grid > Update Settings >
Permissions > Allow insert
</title>
			<description>Set this property to FALSE to prevent users from adding new records.</description>
		</case>
		<case>
			<title>Grid > Update Settings >
Permissions > Delete Security Groups
</title>
			<description>This property sets the security groups allowed to delete a record, even when delete record functionality is enabled.</description>
		</case>
		<case>
			<title>Grid > Update Settings >
Permissions > Update Security Groups
</title>
			<description>This property sets the security groups allowed to modify a record, even when update record functionality is enabled.</description>
		</case>
		<case>
			<title>Grid > Update Settings >
Permissions > Insert Security Groups
</title>
			<description>This property sets the security groups allowed to add a record, even when insert record functionality is enabled.</description>
		</case>
		
		
	</cases>
</section>

		
	</sections>
	
</group>
<group>
	<title>Configuring Security</title>
	<sections>
		<section>
			<description>The AlphaSportsWeb application includes sophisticated group based security.
There are three steps to configure the security. 
</description>
			<steps>
				<step>
					<title>Defining Security Settings:</title>
					<description>
Select and define all of the security options .
</description>
				</step>
				<step>
					<title>Adding Users and Groups</title>
					<description>
Add users and groups into the security system and assign permissions for users 
</description>
				</step>
				<step>
					<title>Defining Page Security</title>
					<description>
Define page permission and assign groups allowed to see login pages. 
</description>
				</step>
				
			</steps>
			
		</section>
		
		<section>
			<title>Defining Security Settings</title>
	<description>The first step when configuring the web publishing security framework for Alpha Sports Web is to define the security features you want to use.</description>		
	<steps>
		<step>
			<description>Display the Web Projects Control Panel.
</description>
		</step>
		<step>
			<description>Click Security to display the Web Security dialog.
</description>
		</step>
		<step>
			<description>Select Web Security Configuration and click OK to display the Security Settings dialog. 
</description>
<figure><link>images/ASW_Security_Settings_Dialog.gif</link></figure>
		</step>
		<step>
			<description>Enable (check) the Security Policy > Security Active property.
</description>
		</step>
		<step>
			<description>Enable (check) the Security Policy > Password Required property. A large number of additional properties will appear.
</description>
		</step>
		<step>
			<description>Click the web properties button in the Security Policy > Redirect Page - login property and select "Login.a5w".
</description>
		</step>
		<step>
			<description>Click the web properties button  in the Security Policy > Redirect Page - insufficient permission property and select "notallowed.a5w".
</description>
		</step>
		<step>
			<description>Click the web drop down button to set the Login Options > Login expiration policy to "Defined time after initial login". 
</description>
		</step>
		<step>
			<description>Click the web properties button in the Login Options > Login expiration time property and select 6 months. 
</description>
		</step>
		<step>
			<description>Enable (check) the Login Options >Remember me option.
</description>
		</step>
		<step>
			<description>Click the web properties in the Login Options > Redirect Page after Login property and select "index.a5w".
</description>
		</step>
		<step>
			<description>Enter Alpha Five V8 into the Password Options > Password encryption key property.
</description>
		</step>
		<step>
			<description>Enable (check) the Password Options > Allow passwiord change at login option.
</description>
		</step>
		<step>
			<description>Click the web properties button in the Password Options > Password Validation Rules property to display the Password Validation dialog.
</description>
<cases>
	<case>
		<description>Enable (check) the Text Format > Allow digits property.
</description>
	</case>
	<case>
		<description>Enter "6" into the Data Length > Minimum Length property.
</description>
	</case>
	<case>
		<description>Enter "12" into the Data Length > Maximum Length property.
</description>
	</case>
	<case>
		<description>Click OK.
</description>
	</case>
	
</cases>
		</step>
		<step>
			<description>Enable (check) the Password Options > Password expires? option.
</description>
		</step>
		<step>
			<description>Click the web properties button in the Password Options > Password expiration time property and select 6 months. 
</description>
		</step>
		<step>
			<description>Set the Password Options > Password restricted re-use to 1. 
</description>
		</step>
		<step>
			<description>Scroll down to the Lost Data Recovery Options. Picture
</description>
<figure><link>images/ASW_Security_Settings_Dialog_2.gif</link></figure>
		</step>
		<step>
			<description>Click the web drop down button to set the Lost Data Recovery Options > Lost password action to "Recover Password ". 
</description>
		</step>
		<step>
			<description>Click the web drop down button to set the Lost Data Recovery Options > Data Required for password reset or rcovery to "Valid Email address". 
</description>
		</step>
		<step>
			<description>Click the web drop down button to set the Lost Data Recovery Options > Lost recovery method to "Send Email to user". 
</description>
		</step>
		<step>
			<description>Click the web drop down button to set the Lost Data Recovery Options >Lost recovery alternative method to "Create Email link on page ". 
</description>
		</step>
		<step>
			<description>Click the web drop down button in the Lost Data Recovery Options >Configure email to send to user with password property and accept the default layout by Clicking OK. 
</description>
		</step>
		<step>
			<description>Click the web properties button in the Lost Data Recovery Options >Configure email request from user property and accept the default layout by Clicking OK. 
</description>
		</step>
		<step>
			<description>Open the customize options by expanding the option. Picture
</description>
<figure><link>images/ASW_Security_Settings_Dialog_3.gif</link></figure>
<cases>
	<case>
		<description>1. Enable (check) the Customize Options > Show external user identifier field property.
</description>
	</case>
	<case>
		<description>2. Enter "__protected__user_pUser.Ulink" into the Customize Options > Session variable for identifier field property.
</description>
	</case>
	
</cases>
		</step>
		<step>
			<description>Click Save.
</description>
		</step>
		<step>
			<description>If you have neglected to set any required properties, a dialog similar to the following will appear. Click OK and correct these errors. Picture
</description>
<figure><link>images/WP_Security_Settings_Errors.gif</link></figure>
		</step>
		
	</steps>		
			
		</section>
		
		
		
		
		
		
		
		
		
		
		
		
		
			<section>
			<title>Adding Users and Groups</title>
		<description>All users who login to Alpha Sports Web have to be first registered in the user table.</description>	
			
			
		</section>
				
<section>
	<steps>
		<step>
			<description>Display the Web Projects Control Panel.</description>
		</step>
		<step>
			<description>Click Security to display the Web Security dialog.</description>
		</step>
		<step>
			<description>Select Users and Groups and click OK to display the Web Users and Groups dialog. </description>
		<figure><link>images/ASW_Add_Users_Groups.gif</link></figure>
		</step>
		<step>
			<description>Display the Groups tab. </description>
			<cases>
				<case>
					<description>Click Add Group, enter "Accounting", and click OK.</description>
				</case>
					<case>
					<description>Click Add Group, enter "Clerical", and click OK.</description>
				</case>
					<case>
					<description>Click Add Group, enter "Customers", and click OK.</description>
				</case>
					<case>
					<description>Click Add Group, enter "Marketing", and click OK.</description>
				</case>
			</cases>
		</step>
		<step>
			<description>Display the Users tab. The Import / Export Users option will be used to add new user. </description>
		</step>
		<step>
			<description>Click on Import / Export Users to open the selection dialog. </description>
		</step>
		<step>
			<description>Select Import User Information from Table and click OK. </description>
		</step>
		<step>
			<description>The Import to Web Users Table dialog will open. </description>
			<figure><link>images/ASW_Import_to_Web_Users_Table.gif</link></figure>
		</step>
		<step>
			<description>Click the Web drop down button for Table to Import and select the customer.dbf table. </description>
		</step>
		<step>
			<description><![CDATA[Click the filter button to open the filter builder and enter email<>"" as the filter expression. ]]></description>
		</step>
		<step>
			<description>Click the Add Field button to open the field map dialog.</description>
		</step>
		<step>
			<description>Map the fields as follows:</description>
			<list>
				<item>
					<name-title>Field in User Table 
</name-title>
					<description-title>Field in Import table 
</description-title>
				</item>
				<item>
					<name>Userid
</name>
					<description>
 
Email
 </description>
				</item>
				<item>
					<name>Password
</name>
					<description>
 
Password
 </description>
				</item>
				<item>
					<name>Email
</name>
					<description>
 
Email
 </description>
				</item>
				<item>
					<name>Ulink
</name>
					<description>
 
Customer_id
 </description>
				</item>
				
				
			</list>
		</step>
		<step>
			<description>Click the Add Groups  button to open the Select Groups Dialog dialog.</description>
		</step>
		<step>
			<description>Check the group Customers and click OK. </description>
		</step>
		<step>
			<description>Click OK to import the users from the customer table.</description>
		</step>
		<step>
			<description>Click on Import / Export Users to open the selection dialog. </description>
		</step>
		<step>
			<description>Select Import User Information from Table and click OK. </description>
		</step>
		<step>
			<description>The Import to Web Users Table dialog will open. </description>
		</step>
		<step>
			<description>Click the Web Drop Down button for Table to Import and select the internal_user.dbf table. </description>
		</step>
		<step>
			<description>Click the Add Field button to open the field map dialog.</description>
		</step>
		<step>
			<description>Map the fields as follows: </description>
			<list>
				<item>
					<name-title>Field in User Table</name-title>
					<description-title>Field in Import table </description-title>
				</item>
				<item>
					<name>Userid</name>
					<description>Email</description>
				</item>
				<item>
					<name>Password</name>
					<description>Password</description>
				</item>
				<item>
					<name>Email</name>
					<description>Email</description>
				</item>
				<item>
					<name>Ulink</name>
					<description>Emp_id</description>
				</item>
				
			</list>
		</step>
		<step>
			<description>Click OK to import the users from the internal_users table.
</description>
		</step>
		<step>
			<description>For each internal user, select groups other than Customer.
</description>
		</step>
		<step>
			<description>Click OK to close the Web Users and Groups dialog
</description>
		</step>
		
	</steps>
	
	
</section>			


<section>
		<title>Defining Page Security</title>
			<description>The third step when implementing the web security in Alpha Sports Web is to define which of your pages will fall into these three categories:
</description>
			<cases>
				<case>
					<description>pages that web users can never open (Always Denied)
</description>
				</case>
				<case>
					<description>pages that web users can open without login (Always Allowed)
</description>
				</case>
				<case>
					<description>pages that web users can open after successful login (Login Required)
</description>
				</case>
				
			</cases>
			
		</section>
		<section>
			<description>The page security for each page in Alpha Sports Web can be found by selecting the page from the Web Pages list. The security category for the page and groups allowed are listed. Defining Page Security explains how to move a page to the desired category and assign a security group if login is required.
</description>
<figure>
	<title>The Page Security assignments in the Page Security dialog.</title>
	<link>images/ASW_Page_Security.gif</link>
	</figure>
		</section>


	</sections>
</group>

	
	</groups>
	<limitations>Web publishing applications only.</limitations>
	<see>
		<ref link="Web Projects, Profiles, and Publishing">Web Projects, Profiles, and Publishing</ref>
	</see>
<links>
	<link href="http://support.alphasoftware.com/alphafivehelp/index.htm">http://support.alphasoftware.com/alphafivehelp/index.htm</link>
</links>	
	
	
	
	
</page>