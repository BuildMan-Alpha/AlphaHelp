<page>
	<topic>AlphaSportsWeb Explained</topic>
<description>Applies to Alpha Five Version 9</description>	
	<groups>
	<group>
		<title>AlphaSports for the Web</title>
		<sections>
<section>
		<warning>Legacy</warning>
	</section>
<section>
	<title>Initial considerations</title>
<description>Creating an application for a Web environment is an interesting challenge. Web applications require a different approach and different thinking than desktop applications. You can easily build a desktop application that has complex form designs, large amounts of data on one page, and multiple pages open simultaneously. Speed is rarely an issue with modern computers, and the current design genies allow considerable customization of any layout.</description>	
	
</section>	
<section>
	
<description>But the Web is different. The browser concept imposes a number of constraints. Browsers primarily use HTML and other "open source" concepts like JavaScript. Nearly every modern browser follows a set of universal standards to allow a Web page to display in any browser. These rules place many limitations on how various elements work, such as how a drop down list looks and behaves, how data is submitted back to a server, how buttons operate, and on and on. The layout of most Web pages is normally based on a grid or table and cell construction that requires some careful planning during design. Moving the position of an element on a page may require reconstructing the complete page. There is little room to alter the way the way the actual design elements work because they are part of the accepted rules for a browser. Any successful Web page must follow these current Web standards to work properly.</description>	
	
</section>	
<section>
	
<description>The other issue is speed. The Web employs a Client/Server model. The local browser or client first requests a page from a remote server. The server takes the request and builds the page and populates it with data. It then sends the whole page back to the client. Both of these actions require time. If the page design is complex, the server may take a noticeable time to build or populate the page. If the final page file size is large, the download time across the Web may be slow. These issues exist in any Web page construction, regardless of the server technology used. A successful Web designer must consider these limitations and frequently make compromises on the complexity of the page designs.</description>	
	
</section>	
<section>
	<title>Specifications</title>
<description>The basic goal behind the design of AlphaSports Web was a desire to create a "real world" commercial grade application that was based on the existing AlphaSports desktop demo application. The design had to consider the normal constraints of the Web environment and yet be a successful substitute for a desktop application. A common use of the Alpha Anywhere Application Server is to add Web capability to an existing desktop application. AlphaSports Web does not alter the AlphaSports desktop functionality and can co-exist with that application. However, the two applications are completely separate and only share tables and data. The Web application does not require a desktop database to operate, and can actually exist without any related database. It replaces the desktop database functionality with the Web components and pages and accesses tables and data directly.</description>	
	
</section>	

<section>
	
<description>Every application design starts with the functional requirements or specifications. This application was built around an online shopping concept, with the capability to update and maintain the supporting data using a browser interface. Early in the process, it was determined that the final design should appear simple to use with relatively few "layers" to the data. The decision was made to access most pages from a main navigation page or menu bar. To simplify navigation, a number of pages open as pop-ups, leaving the original page in view. Many pages have multiple ways to navigate to other pages, such as links in grids, hyperlinks on the pages, buttons, and even images with links.
</description>	
	
</section>		
<section>
	
<description>Nearly all of the functionality of the desktop AlphaSports database was duplicated in the Web version. This was achieved by creating two different paths within the application. First, there are the public pages that are designed for online sales and promoting the products available from AlphaSports. Most of these pages do not require any login or security. The second path within the application is the administration section. These pages can only be accessed with a specific login and have security to prevent unauthorized access. Many of these pages duplicate the data maintenance actions normally found in a desktop implementation. The login process determines the navigation path by evaluating the user ID and then sending the user to the pages allowed by their access.</description>	
	
</section>	
<section>
	
<description>A secondary purpose was to show how to use various Alpha Anywhere components effectively and efficiently. Nearly every page is built using components, many with multiple components. In fact, every basic component construction is found in AlphaSports for the Web.</description>	
	
</section>	

<section>
	<title>Building AlphaSports Web</title>
<description>To improve speed the AlphaSports Web application keeps the number of elements on each page to a minimum. Many of pages are view-only pages with links to pages that do allow editing. A page with only labels is both faster to build on the server and has less HTML text. Therefore it will build and download faster. Only pages that are used less frequently, such as some internal maintenance pages, make extensive use of input fields. Every effort was made to eliminate unnecessary HTML in AlphaSports Web. For example, instead of adding inline styles to set a cell width in a grid, most column widths were fixed by setting the column header width. The inline style adds some text, but it only is added for the column row instead of for each cell in each row. Even apparently small changes like this can have measurable impacts on speed.</description>	
	
</section>	
<section>
	
<description>A common error with grid layouts is to try to use too many rows. While showing many rows on a page may appear to be a good idea, this design approach slows page building and downloading. At some point, the speed impact negates the apparent efficiency of having everything on one page. A decision was made in AlphaSports Web to break up the data into small pieces as much as possible, use limited rows in grids, and use multiple pages. Not only are the pages faster to build, but the download times are improved, making the pages display quicker. Even removing a single field in a grid can have a significant speed impact.</description>	
	
</section>	
<section>
	
<description>Freeform regions are used in many of the components in AlphaSports. These allow more design freedom and have no real speed impact. A few grids use custom controls that provide some unique opportunities for customizing a display. In AlphaSports Web they are used to highlight products with "special" pricing. Considerable effort was spent on attention to detail to add an appearance of professionalism, such as making input text boxes a uniform length.</description>	
	
</section>		
<section>
	
<description>Many Web pages require some method to select a value from a list to populate some input value. A typical construction is a drop down list. However, a grid layout may require multiple drop down lists with one built for each record in a row. A more efficient method is to take advantage of the lookup option in Alpha Anywhere. AlphaSports Web makes extensive use of lookups. Drop downs are used in some places where the options are limited, or in the case of dialogs or single record grids where the drop down appears only once.</description>	
	
</section>	

<section>
	
<description>Another goal of this project was to build modular constructions. A page template was built for the public pages and another built for the internal or administrative pages. After the templates were refined, building other pages became very efficient as the page building process consisted of adding a single component to the template page.</description>	
	
</section>	

<section>
	
<description>As the project began to take shape, it was observed that there was an opportunity to use the same basic component design in multiple locations. One example is the single record tabbed grid used to show customer information. This was used on multiple pages by first building the component with all features needed. After placing a component on a given page, parameter overrides changed the style of the component or hide or alter certain features such as a delete option. In this way, a single component was built just once, but used many times.</description>	
	
</section>	

<section>
	
<description>Efficiency was the primary goal of the AlphaSports Web construction. Efficiency in usability through relatively simple page layouts, efficiency in construction through the modular approach, and efficiency in speed through minimizing the html on a page.
Working within the constraints of the Web is challenging, but the component concept in Alpha Anywhere removes many of the concerns. The final component output meets the "rules of the road", without the user having to write any HTML or worry about the standards. The Component Builders are very efficient tools that can make building a Web application easier and faster without compromising the final result.
</description>	
	
</section>		
			
			
		</sections>
		
		
		
		
	</group>	
		
		
<group>
	<title>Installation</title>
	<sections>
		<section>
			
	<description>The AlphaSportsWeb sample database is an optional upgrade to the AlphaSports sample database that ships with Alpha Anywhere. We created AlphaSportsWeb to illustrate how to use Alpha Anywhere web publishing to build an on-line e-commerce application. We expect that developers will use it as a starting point or as reference code when building their own applications.
</description>		
			
			
		</section>
		<section>
			<note>AlphaSportsWeb includes sample code for identifying invalid credit card numbers, for using Authorize.Net to validate credit cards, and for using PayPal for accepting electronic payments. This is sample code only and is not warranteed for commercial use. You should also consult Authorize.Net and PayPal for their latest product specifications and for guides to using features that AlphaSportsWeb has not demonstrated.</note>
		</section>
<section>
	<description>To install AlphaSportsWeb :
</description>
<steps>
	<step>
		<description>Run AlphaSportsWeb.EXE and click Next >.
</description>
	</step>
	<step>
		<description>Enter your license code and click Next >. to display the following dialog. 
</description>
<figure><link>images/ASW_Installation.gif</link></figure>
	</step>
	<step>
		<description>Optionally, check Open AlphaSports for the Web Help File.
</description>
	</step>
	<step>
		<description>Click Finish.
</description>
	</step>
	<step>
		<description>Start Alpha Anywhere.
</description>
	</step>
	<step>
		<description>Open AlphaSportsWeb. You will find it in the \Samples\AlphaSportsWeb folder under you Alpha Anywhere program directory.
</description>
	</step>
	<step>
		<description>Click the "AlphaSportsWeb" menu entry to display the following dialog. 
</description>
<figure><link>images/ASW_MainMenu.gif</link></figure>
	</step>
	<step>
		<description>Click Publish Files. This places a working copy of the application on your local webroot. This means that you can immediately start investigating the features and techniques of the application. Later, you can publish these files from the Web Projects Control Panel .
</description>
	</step>
	<step>
		<description>Click Start the Web Server. Later, you can start and stop this local copy of the Application Server from the Web Projects Control Panel.
</description>
	</step>
	<step>
		<description>Click Launch the Home Page of the Sample Application. This will display the first page that a customer would see when he visits this site.
</description>
	</step>
	<step>
		<description>Click Display the Web Applications Control Panel. This will display the pages, components, images, and other files that are the source materials for AlphaSportsWeb.
</description>
	</step>
	
	
</steps>	
	
</section>		
	<section>
		<description>The remainder of this document explains the techniques that the Alpha Five developers used when creating AlphaSportsWeb. You can always find a copy of these help files at [http://support.alphasoftware.com/alphafivehelp/index.htm].
</description>
	</section>
	
	</sections>
	
	
	
	
	
	
	
	
	
</group>	
<group>
	<title>Configuration and Publishing</title>
<sections>
<section>
	<title>Local Webroot Profile
</title>
	<description>Your initial and default profile should be Local Webroot. Here you can test the appearance of your pages and components, and logic of your code. By default, AlphaSportsWeb does not use any Application Variables. There is only one set of aliases. 
</description>
	<cases>
		<case>
			<description>For local development: PathAlias.ADB_Path = =a5.get_path()
</description>
		</case>
		<case>
			<description>For publishing to a server: PathAlias.ADB_Path = c:\data\alphasportsweb
</description>
<figure><link>images/ASW_Local_Profile.gif</link></figure>
		</case>
		
	</cases>
	
	
</section>	
<section>
	<title>InternalServer Profile</title>
	<description>The "InternalServer" profile is a template that you can modify and use for your internal (LAN) publishing activities. The assumption here is that you can publish your data using standard Windows file access. The profile publishes pages to the c:\A5Webroot directory and the data files to the c:\Data directory on the server.
There is only one set of aliases.
</description>
<cases>
	<case>
		<description>For local development: PathAlias.ADB_Path</description>
		<example><![CDATA[a5.get_path()]]></example>
	</case>
	<case>
		<description>For publishing to a server: PathAlias.ADB_Path</description>
		<example><![CDATA[c:\data\alphasportsweb]]></example>
	</case>
	
</cases>
	
</section>
<section>
	<description>The default definition for aliases should be adequate for your local development needs. To change the server alias, select General > Aliases and click . 
</description>
	<figure><link>images/ASW_Internal_Server_Profile.gif</link></figure>
</section>
<section>
	
	<description><![CDATA[The publishing process automatically copies all folders under the web project folder. Thus, the css, Images, and javascript folders appear under the c:\A5Webroot\AlphaSportsWeb folder on the server. Note the Publish to LAN > Webroot and Publish to LAN > Target Folder properties below.]]></description>
	
</section>
<section>
	
	<description><![CDATA[The Publish Database Files > Folder property defines the target directory for the Alpha Anywhere database files. The Publish Database Files > Files to Publish property lists all database files, plus all the files found under c:\AlphaSportsWeb\Images on the development computer. These files are published to c:\Data\AlphaSportsWeb\Images on the server. ]]></description>
<figure><link>images/ASW_Publishing_Folders_3.gif</link></figure>	
</section>
<section>
	
	
</section>
<section>
	<title>PublicServer Profile</title>
<description>The "PublicServer" profile is a template that you can modify and use for your external (FTP) publishing activities. The assumption here is that you can not publish your data using standard Windows file access. The profile publishes pages to the AlphaSportsWeb folder under the server's webroot and the data files to the Data\AlphaSportsWeb\ folder on the server. </description>	
	<note>The assumption here is that the server administrator will create these folders and make them accessible to your FTP program. It is unlikely that you will know the actual (physical) location of these folders on the server. 
</note>
</section>

<section>
	<description>Also take note that the FTP Address, Username, Password, and Base URL values shown below are for illustration purposes only. Again, these are values that you will define in coordination with the server administrator.
</description>
	<figure><link>images/ASW_Public_Server_Profile.gif</link></figure>
</section>
<section>
	<title>Publishing</title>
<description>To initially publish AlphaSportsWeb to your local webroot, follow these steps.
</description>
<steps>
	<step>
		<description>In the Web Projects Control Panel select Publish. to display the Publish Web Project dialog box:
</description>
	</step>
	<step>
		<description>Select "Local Webroot" in the Select Profile list.
</description>
	</step>
	<step>
		<description>Select All files in project in the Files to Publish section.
</description>
	</step>
	<step>
		<description>Clear Publish new or modified files only.
</description>
	</step>
	<step>
		<description>Click Clear Publishing History > Yes.
</description>
	</step>
	<step>
		<description>Click Publish. This action creates the folders highlighted below and copies all the project files to the appropriate locations. Note that your webroot may be defined to be a folder different from "C:\A5Webroot". 
</description>
<figure><link>images/ASW_Local_Publish_Folders.gif</link></figure>
	</step>
	
	
</steps>
	
</section>
<section>
	<title>Publishing to a Server</title>
	<description>To publish AlphaSportsWeb to a server, follow these steps.
</description>
	
	<steps>
		<step>
			<description>In the Web Projects Control Panel select Publish. to display the Publish Web Project dialog box:
</description>
		</step>
		<step>
			<description>Select "InternalServer" or "PublicServer" in the Select Profile list.
</description>
		</step>
		<step>
			<description>Select All files in project in the Files to Publish section.
</description>
		</step>
		<step>
			<description>Clear Publish new or modified files only.
</description>
		</step>
		<step>
			<description>Click Clear Publishing History > Yes.
</description>
		</step>
		<step>
			<description>Select Publish Database files.
</description>
		</step>
		<step>
			<description>Click Edit List to display the Select Database Files to Publish dialog.
</description>
		</step>
		<step>
			<description>Check the Select all tables/sets in the Database check box.
</description>
		</step>
		<step>
			<description>Click Add File and navigate to the AlphaSportsWeb\Images\ folder.
</description>
		</step>
		<step>
			<description>Select all the files in the folder and click Open.
</description>
		</step>
		<step>
			<description>Click OK.
</description>
		</step>
		<step>
			<description>Click Publish. This action creates the folders highlighted below and copies all the project files to the appropriate locations.
</description>
		</step>
		
	</steps>
	
</section>
	
	
</sections>	
	
	
</group>	
<group>
	<title>Using AlphaSportsWeb</title>
	<sections>
		<section>
			<description>The AlphaSportsWeb application offers the following features.</description>
			
		</section>
		<section>
<title>Administrative Features</title>			
<list>
	<item>
		<name-title>Feature</name-title>
		<description-title>Description</description-title>
	</item>
	<item>
		<name>Maintain product categories</name>
		<description>Use a desktop layout to edit the product_category table.</description>
	</item>
	<item>
		<name>Maintain vendors</name>
		<description>Select the Vendors menu entry.</description>
	</item>
	<item>
		<name>Maintain products</name>
		<description>Select the Products > Product Listing menu entry.</description>
	</item>
	<item>
		<name>Maintain your user name or password</name>
		<description>Select the Your Account > Your Information menu entry</description>
	</item>
	<item>
		<name>Maintain specials</name>
		<description>Select the Products > Specials List menu entry.</description>
	</item>
	<item>
		<name>Maintain customers</name>
		<description>Select the Customers > Customer List menu entry.</description>
	</item>
	<item>
		<name>View or print invoices</name>
		<description>Select the Sales > Invoices menu entry.</description>
	</item>
	<item>
		<name>Maintain internal users</name>
		<description>Select the Sales Reps menu entry.</description>
	</item>
	<item>
		<name>Print a report</name>
		<description>Select the Reports menu entry.</description>
	</item>
	<item>
		<name>Pack tables</name>
		<description>Select the Maintenance menu entry.</description>
	</item>
	<item>
		<name>Re-index tables</name>
		<description>Select the Maintenance menu entry.</description>
	</item>
	<item>
		<name>Clear empty shopping carts</name>
		<description>Select the Maintenance menu entry.</description>
	</item>
	<item>
		<name>Send an email</name>
		<description>Select the Customers > Send Email menu entry.</description>
	</item>
</list>			
			
		</section>
	<section>
		<title>Customer Features</title>
	<list>
		<item>
			<name-title>Feature</name-title>
			<description-title>Description</description-title>
		</item>
		<item>
			<name>Select a product category</name>
			<description>Click an entry in the Browse Products grid.</description>
		</item>
		<item>
			<name>View all specials</name>
			<description>Select the Home menu entry and click the Show All Specials hyperlink.</description>
		</item>
		<item>
			<name>View a larger product image and detailed description</name>
			<description>Click the Description hyperlink in any product record.</description>
		</item>
		<item>
			<name>View all products</name>
			<description>Select the Products menu entry.</description>
		</item>
		<item>
			<name>Add a product to the shopping cart</name>
			<description>Click the shopping cart image in any product record.</description>
		</item>
		<item>
			<name>View shopping cart contents</name>
			<description>Select the Shopping Cart > View Cart menu entry.</description>
		</item>
		<item>
			<name>Purchase products in shopping cart</name>
			<description>Select the Shopping Cart > Check Out menu entry.</description>
		</item>
		<item>
			<name>Modify shopping cart quantities</name>
			<description>Select the Shopping Cart > View Cart menu entry.</description>
		</item>
		<item>
			<name>View order history</name>
			<description>After logging in, select the Your Account > Order History menu entry.</description>
		</item>
		<item>
			<name>Maintain your profile</name>
			<description>After logging in, select the Your Account > Your Information menu entry.</description>
		</item>
		
	</list>	
		
		
	</section>	
		
	</sections>
	
</group>
<group>
	<title>Tables and Sets</title>
<sections>
<section>
	<description>The AlphaSportsWeb application contains the following tables and sets.
</description>
<cases>
<case><title>
component_breakdown</title><description>
The component_breakdown table contains notes about which A5W pages contain which components, and notable features to be found in each.
</description></case><case><title>
customer</title><description>
The customer table contains all information that describes a customer. The difference from the version in the AlphaSports database is the new password field.
</description></case><case><title>
dummy</title><description>
The Dummy table provides a single record with a single field with a fixed value. This record provides a common parent or link for other unrelated tables. You can see the use of the dummy table in the TGRDL_HIST tabbed gridlinker component.
</description></case><case><title>
export_users</title><description>
The export_users table contains a list of user from the web security users table. This is used solely for demonstration purposes to show a list of users intially saved in the application. This table was populated by exporting users from the Users and Groups security form. See Export Users Table Definition.
</description></case><case><title>
invoice (set)</title><description>
The invoice set contains the information that describes an order. It is the same set found in the AlphaSports database. The set makes the invoice_header table parent to the customer and invoice_items tables. The invoice_items table is parent to the product table, which is parent to the vendor table.
</description></case><case><title>
invoice_header</title><description>
The invoice_header table contains part of the information that describes an order. The difference from the version in the AlphaSports database is the new type field, which defines the source of the sale.

</description></case><case><title>
invoice_invert (set)</title><description>
The invoice_invert set makes the invoice_items table parent to the invoice_header table. The ASWSALESHIST.A5W page uses the set to build sales summary tables.

</description></case><case><title>
invoice_items</title><description>
The invoice_items tables contains the information that describes the components of an order. It is the same table found in the AlphaSports database.

</description></case><case><title>
lk_avail</title><description>
AlphaSportsWeb uses the lk_avail table to list when the products are be expected to be in stock. The sort_ord field allows the list to be presented in shortest to longest order, instead of alphabetically. See lk_avail Table Definition.

</description></case><case><title>
product</title><description>
The product table contains all information that describes a product, including pictures, and associates each with a unique ID. This table is significantly different from the version in the AlphaSports database. See Product Table Changes.

</description></case><case><title>
product_category</title><description>
The product_category table lists product categories and associates each with a unique ID. See Product Category Table Definition.

</description></case><case><title>
sales_summary_cost</title><description>
The sales_summary_cost table lists number of invoices, the last invoice date, and the last invoice number for each customer. The ASWSALESHIST.A5W page runs the Xbasic copied from the sales summary by cost operation and populates the sales_summary_cost table. See Sales Summary Cost Table Definition.

</description></case><case><title>
sales_summary_quan</title><description>
The sales_summary_quan table lists the number of units sold and the last invoice date for each product. The ASWSALESHIST.A5W page runs the Xbasic copied fromthe sales summary by quan operation and populates the sales_summary_quan table. See Sales_Summary_Quan Table Definition.

</description></case><case><title>
shipping_types</title><description>
The shipping_types table lists shipping methods and associates each with a unique ID and base cost. See Shipping_Types Table Definition.

</description></case><case><title>
shop_cart</title><description>
The shop_cart table lists items that customers have selected (placed in a shopping cart), but have not actually purchased. See Shop_Cart Table Definition.

</description></case><case><title>
shop_cart_values (set)</title><description>
The shop_cart_values set links the shop_cart table (parent) one to one with the product table (child) and specials table (child).

</description></case><case><title>
special_sales (set)</title><description>
The special_sales set links the product table (parent) links one to one with the specials table (child).

</description></case><case><title>
specials</title><description>
The specials table lists products on sales, sale prices, and the date when each sale ends.

</description></case><case><title>
vendor</title><description>
The vendor table contains all information that describes a vendor. It is the same table found in the AlphaSports database.

</description></case><case><title>
web_reports</title><description>
The web_reports table contains information necessary to run and control access to reports. See Web_Reports Table Definition.
</description></case>
	
	
</cases>
	
</section>	
<section>
	<title>Export_Users Table Definition</title>
<description>The export_users table contains the following fields.</description>	
	<cases>
		<case>
			<title>User_Id</title>
			<description>Character,8. The user_id field holds a unique ID for each user.
</description>
		</case>
		<case>
			<title>Groups</title>
			<description>Memo,10. The groups field contains a comma delimited list of security groups assigned to the user.</description>
		</case>
		
	</cases>
	
</section>

<section>
	<title>lk_avail Table Definition</title>
<description>The lk_avail table contains the following fields.</description>	
	<cases>
		<case>
			<title>ship_avail</title>
			<description>Character,20.
The ship_avail field contains a description of the length of time until a product will be back in inventory.
</description>
		</case>
		<case>
			<title>sort_ord</title>
			<description>Numeric,2,0. 
The sort_ord field provides a way to sort the table by length of time until the product will be available.
</description>
		</case>
		
	</cases>
	
</section>
<section>
	<title>Product Table Changes</title>
<description>The AlphaSportsWeb product table contains all information necessary to describe and present a product to a customer. The list below contains the fields not found in the AlphaSports product table.</description>	
	<cases>
		<case>
			<title>List</title>
			<description>Numeric,7,2 Format. 
The list field contains the price of a product, as opposed to the actual (discounted) price of a product.
</description>
		</case>
		
		<case>
			<title>Cat_Id</title>
			<description>Character,4 Format. 
The cat_id field is an index into the product_category table, which contains descriptions of product categories. The relationship is defined on the Lookups tab of the cat_id field rules.
</description>
		</case>
		<case>
			<title>Picture</title>
			<description>Image File Reference Format.
The picture field contains a picture of the product.
</description>
		</case>
		<case>
			<title>Detail</title>
			<description>Memo Format. 
The detail field contains a long description of the product.
</description>
		</case>
		<case>
			<title>Ship_Avail</title>
			<description>Character,20. The ship_avail field contains the time interval until a product will be back in inventory. The relationship is defined on the Lookups tab of the ship_avail field rules.
</description>
		</case>
		
	</cases>
</section>
<section>
	<title>Product_Category Table Definition</title>
<description>The product_category table contains the following fields.</description>	
	<cases>
		<case>
			<title>Category</title>
			<description>Character, 30 format.
The category field contains a description of a product classification.
</description>
		</case>
			<case>
			<title>Cat_Id</title>
			<description>Character, 4 format. 
The cat_id field links to the cat_id field in the product table. This link enables product table layouts to display category field descriptions.
</description>
		</case>
		
		
	</cases>
</section>

<section>
	<title>Sales_Summary_Cost Table Definition</title>
	<description>The sales_summary_cost table contains the following fields. A summary operation populates this list.
</description>
	<cases>
		<case>
			<title>Customer_Id</title>
			<description>Character,8 format.
The customer_id field links to the customer_id field in the customer table.
</description>
		</case>
		<case>
			<title>Count_Invoice_Number</title>
			<description>Numeric,10,0 format.
The count_invoice_number field holds the number of purchases that a customer has made.
</description>
		</case>
		<case>
			<title>Last_Date</title>
			<description>Date,8 format.
The last_date field holds the date of the last purchase by a customer.
</description>
		</case>
		<case>
			<title>Last_Invoice_Number</title>
			<description>Character,6 format.
The last_invoice_number field holds the invoice number of the last purchase by a customer.
</description>
		</case>
		
		
	</cases>
	
</section>
<section>
	<title>Sales_Summary_Quan Table Definition</title>
<description>The sales_summary_quan table contains the following fields. A summary operation populates this table.
</description>	
<cases>
	<case>
		<title>Product_Id</title>
		<description>Character,12 format. The product_id field links to the product_id field in the product table.
</description>
	</case>
	<case>
		<title>Total_Quantity</title>
		<description>Numeric,8,0 format. The total_quantity field contains the number of units sold for each product.
</description>
	</case>
	<case>
		<title>Last_Invoice_Header_Date</title>
		<description>Date,8 format.
The last_Invoice_Header_date field holds the date of the last product sale.
</description>
	</case>
	
	
</cases>

	
</section>
<section>
	<title>Shipping_Types Table Definition</title>
<description>The shipping_types table contains the following fields.
</description>	
	<cases>
		<case>
			<title>Ship_Code</title>
			<description>Character,4 format. 
The ship_code field contains a unique value used to identify each delivery method.
</description>
		</case>
		<case>
			<title>Delivery_By</title>
			<description>Character,20 format.
The delivery_by field holds a description of a delivery method.
</description>
		</case>
		<case>
			<title>Base_Price</title>
			<description>Numeric,6,2 format. The base_price field contains the base price assigned to each delivery method.
</description>
		</case>
		<case>
			<title>Sort_Ord</title>
			<description>Numeric,4,0 format.
The sort_ord field contains a value used to order the display of the table's fields.
</description>
		</case>
		
	</cases>
</section>
<section>
	<title>Shop_Cart Table Definition</title>
	<description>The shop_cart table contains the following fields.</description>
	
	<cases>
		<case>
			<title>Item_Id</title>
			<description>Character,8 format.
The item_id field is not used.
</description>
		</case>
		<case>
			<title>Session_Id</title>
			<description>Character,40 format. 
The Application Server assigns Session_Id. Currently, WAS will use the same session ID for each browser for every access. If you close your browser and reopen, the WAS will assign the same session ID. It is used here to identify the browser used to create the cart, to show if any items were selected by the user's browser in a previous shopping "session".
</description>
		</case>
		<case>
			<title>Cart_Id</title>
			<description>Character,36 format. 
The cart_id contains a unique identifier for each collection of items selected for purchase.
</description>
		</case>
		<case>
			<title>Prod_Id</title>
			<description>Character,12 format.
The prod_id field contains the identifier for a product selected for purchase.
</description>
		</case>
		<case>
			<title>Owner_Id</title>
			<description>Character,8 format.
The owner_id field identifies the owner of the shopping cart, which is the customer ID of the user after he or she logs on.
</description>
		</case>
		<case>
			<title>Quantity</title>
			<description>Numeric,5,0 format. 
The quantity field contains the number of unit of a product selected for purchase.
</description>
		</case>
		<case>
			<title>Open</title>
			<description>Logical,1 format. 
The open field indicates whether a selected product has been purchased.
</description>
		</case>
		<case>
			<title>Ord_Date</title>
			<description>Date,8 format. 
The ord_date field contains the date that a product was selected for purchase.
</description>
		</case>
		<case>
			<title>Ord_Time</title>
			<description>Character,8 format. 
The ord_time field contains the time that a product was selected for purchase.
</description>
		</case>
		
		
		
	</cases>
	
	
	
	
</section>
<section>
	<title>Specials Table Definition
</title>
<description>The specials table contains the following fields.
</description>	
	<cases>
		<case>
			<title>Product_Id</title>
			<description>Character,12 format. 
The product_id field contains the unique identifier for a product. This field links to the product_id field of the product table.
</description>
		</case>
				<case>
			<title>Sale_Price</title>
			<description>Numeric,7,2 format. 
The sale_price field contains the discounted sale price of a product.
</description>
		</case>
				<case>
			<title>Sale_Until</title>
			<description>Date,8 format.
The sale_until field contains the last date that a product is on sale.
</description>
		</case>
		
	</cases>
	
	
</section>
<section>
	<title>Web_Reports Table Definition
</title>
<description>The web_reports table contains the following fields.
</description>	
	<cases>
		<case>
			<title>Rpt_Id</title>
			<description>Character,4 format.
The rpt_id field contains a unique ID for an Alpha Anywhere report.
</description>
		</case>
		<case>
			<title>Rpt_Name</title>
			<description>Character,26 format. 
The rpt_name field contains the name of a defined Alpha Anywhere report.
</description>
		</case>
		<case>
			<title>Rpt_Table</title>
			<description>Character,26 format.
The rpt_table field contains the name of the dictionary file that contains the report definition.
</description>
		</case>
		<case>
			<title>Rpt_Level</title>
			<description>Numeric,2,0 format.
Not used 
</description>
		</case>
		
		
	</cases>
</section>

	
	
</sections>	
	
</group>
<group>
	<title>Operations</title>
	<sections>
		<section>
			<description>The AlphaSportsWeb application contains the following operations not found in the AlphaSports application. Because a web application cannot directly run operations stored in an Alpha Anywhere database, we created these operations and then copied their underlying Xbasic into the ASWSALESHIST.A5W page.</description>
			
		</section>
		<section>
			<description>Operations:</description>
			<cases>
				<case>
					<title>Post_Sales_Quantities</title>
					<description>Subtracts the quantity field in the invoice_items table from the qty_in_sto field of the product table.</description>
				</case>
				<case>
					<title>sales_summary_by_cust</title>
					<description>This operation was the source of the Xbasic code that the ASWSALESHIST.A5W page runs to populate the sales_summary_cust table.</description>
				</case>
				<case>
					<title>sales_summary_by_quan</title>
					<description>This operation was the source of the Xbasic code that the ASWSALESHIST.A5W page runs to populate the sales_summary_quan table.</description>
				</case>
				
			</cases>
			
		</section>
		
	</sections>
	
</group>
<group>
	<title>Variables</title>
	<sections><section>
	<description>The AlphaSportsWeb application depends on a number of session and property array variables.</description>
	<cases>
		<case>
			<description>cart_ID</description>
		</case>
		<case>
			<description>cartparms</description>
		</case>
		<case>
			<description>checkout_vars</description>
		</case>
		<case>
			<description>flds[]</description>
		</case>
		<case>
			<description>fldsc[]</description>
		</case>
		<case>
			<description>fldsi[]</description>
		</case>
		<case>
			<description>session.protectedchkout</description>
		</case>
		<case>
			<description>session.protectedchkoutprogress</description>
		</case>
		<case>
			<description>session.protectedPuser</description>
		</case>
		<case>
			<description>session.dataclear</description>
		</case>
		<case>
			<description>session.enteruserdata</description>
		</case>
		<case>
			<description>session.targetURL</description>
		</case>
		<case>
			<description>sessionID</description>
		</case>
		
	</cases>
	</section>
	<section>
		<title>sessionID (C) and cart_ID (C)</title>
	<description>

The Application Server assigns each client browser a unique sessionID. This identifier remains constant between browser sessions. The application stores sessionID in the shop_cart table.

The cart_id variable is unique for each browser session. The API_UUIDCREATE() function creates cart_id, which is a Universally Unique Identifier (UUID...otherwise known as a Globally unique ID or GUID). This is a 32 character (128 bit) hexadecimal string (not including dashes) that is guaranteed to be completely unique if you have a network card. The application stores cart_id in the shop_cart table and in the cart_id cookie.
</description>	
		
	</section>
	<section>
		
	<description>Together, cart_id and sessionID allow the customer to exit the application, then resume shopping and find previously selected (but not purchased) items in the shopping cart.</description>	
		
	</section>
	<section>
		<title>>flds[] (P), >fldsc[] (P), and fldsi[] (P)</title>
	<description>The ASWINVDET.A5W page populates the flds[] property array with the field values of the invoice_header table record, where the invoice_number field equals the value contained in inv. The script uses the .INITIALIZE_FROM_TABLE() method. The same technique to populates the fldsc[] property array with the field values of the customer table record, where the customer_id field equals the value contained in flds[1].customer_id. Another part of the script uses .INITIALIZE_PROPERTIES() to create and initialize property variables under the fldsi[] property array.

.INITIALIZE_FROM_TABLE()is a fast and easy way to extract values from a table into a format that can be manipulated, and in this case, displayed. .INITIALIZE_PROPERTIES()is a fast way to create a dot variable with default values.
</description>	
		
	</section>
	<section>
		<title>_protectedchkoutprogress>session.protectedchkoutprogress (N)</title>
	<description>The INDEX.A5W, CHECKOUTCALC.A5W, CHECKOUTCART.A5W, CHECKOUTCOMP.A5W, and CHECKOUTUSER.A5W pages use session.protectedchkoutprogress to control and verify the user's progression through the 3 checkout screens.

The session.protectedchkoutprogress variable is protected from attempted changes from the URL query string.
</description>	
		
	</section>
	<section>
	<cases>
		<case>
			<title>INDEX.A5W</title>
			<description>When a customer arrives at either of these pages, the assumption is that he or she is ready to begin shopping. as a consequence, the script resets the session.protectedchkoutprogress variable to 0, meaning checkout has not begun.
</description>
		</case>
		<case>
			<title>PRODUCTLIST.A5W
</title>
			<description></description>
		</case>
		<case>
			<title>CHECKOUTCART.A5W
</title>
			<description>When the customer has successfully added an item to a shopping cart, the script sets the checkout progress to 1.
</description>
		</case>
		<case>
			<title>CHECKOUTUSER.A5W
</title>
			<description>The checkout progress must be greater than or equal to 1 to display this page. When the customer has successfully entered all required information, the AfterValidate event of the DLG_UCHKOUT dialog component sets the checkout progress to 2.
</description>
		</case>
		<case>
			<title>CHECKOUTCOMP.A5W
</title>
			<description>The checkout progress must be greater than or equal to 2 to display this page. When the customer has successfully completed the checkout process, the script sets the checkout progress to 3.
</description>
		</case>
		<case>
			<title>CHECKOUTCALC.A5W
</title>
			<description>The checkout progress must be greater than or equal to 3 to display this page.
</description>
		</case>
		
	</cases>
	</section>
	<section>
		<title>_protectedchkout>session.protectedchkout (P)</title>
	<description>The session.protectedchkout dot variable holds the customer's shipping and billing field values input to the CHECKOUTUSER.A5W page.

The session.protectedchkout variable is protected from attempted changes from the URL query string.
</description>	
<cases>
	<case>
		<title>INDEX.A5W</title>
		<description>When a customer arrives at either of these pages, the assumption is that he or she is ready to begin shopping. as a consequence, the script deletes the session.protectedchkout variable, which may contain old data.
</description>
	</case>
	<case>
		<title>PRODUCTLIST.A5W
</title>
		<description></description>
	</case>
	<case>
		<title>CHECKOUTCALC.A5W
</title>
		<description>The page does not display, if the session.protectedchkout variable does not exist. If the variable does exist, the script copies it values to checkout_vars and deletes session.protectedchkout.
</description>
	</case>
	<case>
		<title>CHECKOUTUSER.A5W</title>
		<description>If the value of the session.dataclear variable is .T., the Activate event of the DLG_UCHKOUT dialog component initializes the session.protectedchkout variable.

If the value of the session.enteruserdata variable it NULL, the Activate event of the DLG_UCHKOUT dialog component sets the dialog's controls with the contents of the session.protectedchkout variable.
</description>
	</case>
	<case>
		<title>CHECKOUTCOMP.A5W
</title>
		<description>One of the first things that the page script does is test the value of session.protectedchkout.firstname. If NULL, the customer's information is assumed to be incomplete, and control is redirected to the CHECKOUTCART.A5W page.
Next, the script checks to see if a number of critical invoicing variables have values. If a problem is found, the script places an error message into the error_msg variable. Otherwise, the script prepares and displays the shopping cart, shipping and billing information on the page.
</description>
	</case>
	
</cases>
		
	</section>
	<section>
		<title>_protectedPuser>session.__protected.pUser (P)</title>
	<description>This pointer variable contains information about the current logged in user. The session.protectedpUser.ulink variable is populated by the security system and contains the value saved in the ulink security field for the current logged in user. The session.protectedpUser.ulink variable is used in the component grd_invhcp to set the value for the argument :WhatCustomer. The argument is used in a filter to show only records for the current logged in user. It is also used by the LOGGEDINVALUES.A5W page to identify the current logged in user. The LOGGEDINVALUES.A5W page populates the variables session.protectedpUser.name and session.protectedpUser.type for the current logged in user. 

The session.protectedpUser variable is protected from attempted changes from the URL query string.
</description>	
		
	</section>
	<section>
		<title>checkout_vars (P)</title>
<description>The CHECKOUTCALC.A5W script copies the session.protectedchkout data into checkout_vars, then deletes session.protectedchkout. This prevents the user from submitting the page a second time after clicking the "Back" button.</description>		
		
	</section>
		<section>
		<title>cartparms (P)</title>
<description>The cartparms pointer variable contains the information that describes the customer's shopping session. The CHECKOUTCART.A5W and SHOPCART.A5W pages define cartparms and pass it to the shopcart_chk() function. This function checks to see if the customer has an existing cart exists from a previous session. If so, the function returns the HTML required to display the cart's contents.

The SHOPCART_ADD.A5W page uses cartparms to check if a shopping cart remains from a previous session. If not, it uses shopcart_add() to create a new shopping cart containing the selected product.
</description>		
		
	</section>
		<section>
		<title>session.dataclear (L)</title>
<description>The CHECKOUTUSER.A5W page uses session.dataclear to indicate whether the user has pressed the "Clear" button. If so, the Activate event of the DLG_UCHKOUT dialog component erases the contents of the dialog's controls and the AfterValidate event uses it as an indication that it does not need to save the user's input.</description>		
		
	</section>
		<section>
		<title>session.enteruserdata (C)</title>
<description>The CHECKOUTUSER.A5W page uses session.dataclear to hold the user's customer ID after he presses the "adduser" button. The Activate event of the DLG_UCHKOUT dialog component uses the session.dataclear in the filter expression that retrieves the customer's data from the customer table.</description>		
		
	</section>
		<section>
		<title>session.targetURL (C)</title>
<description>The CHECKOUTUSER.A5W page uses session.targetURL to save the URL of the current page when it needs to temporarily redirect to LOGIN.A5W page. If the application user is classified as Internal, the Validate event of the DLG_UCHKOUT dialog component sets session.targetURL to NULL. This variable is only used on public pages.</description>			
	</section>
	
	</sections>
	
	
</group>
<group>
	<title>Adding an Item to the Shopping Cart</title>
<sections>
	<section>
		
		<description>INDEX.A5W and SPECIALS.A5W (containing the GRD_SPEC grid component), PRODUCTINFO.A5W (containing the GRD_PRODONE grid component), and PRODUCTLIST.A5W (containing the GRD_PRODS grid component) include the SHOPCART.JS JavaScript file into their pages. In each case the component has one or more image buttons that call the JavaScript add_to_cart_quan() function, passing the product_id value of the selected product. The JavaScript function opens and prompts for a quantity, and then opens another page as a popup and passes the product ID to that page in the page URL. If the prompt is cancelled or the value entered is 0, the JavaScript ends and no item is added to the cart. 
</description>
		
	</section>
	<section>
		<description>Variations of the following code are found in the Column Properties > Freeform Template property of the "Sale Price" field of the GRD_SPEC and GRD_PRODONE grid components. Similar code is located under the Column Properties > Freeform Template property of the "Cart" field of the GRD_PRODS grid component.</description>
		
	</section>
	
<section>
	<steps>
		<step>
			<description>In each case clicking the image button calls the add_to_cart_quan() function and passes the current value of product_id. We placed this code in a freeform template to allow the OnClick event of the image to run the Javascript.
</description>
		</step>
		<step>
			<description>The JavaScript function shows a prompt to specify the quantity to order and then displays the SHOPCART_ADD.A5W page in a new window. The product ID is a URL parameter,and is locally named prod_id. The quan is also added to the URL and is obtained from the prompt. There are another version of the function named add_to_cart() that does not open a prompt to select quantity. Instead, a default quantity of 1 will be assigned. 
</description>
		</step>
		<step>
			<description>The SHOPCART_ADD.A5W script tests to see if the cart_id variable (cookie) exists. If not, the script creates it.
</description>
		</step>
		<step>
			<description>Next, the script creates the cartparms pointer variable, and among other assignments, sets the cartparms.product_id variable to the product ID value received in the URL and sets the cartparms.quantity variable to the Quan value from the prompt.
</description>
		</step>
		<step>
			<description>SHOPCART_UDF.A5W adds a record to the shop_cart table, then prepares and returns the HTML code displayed on the page.
</description>
		</step>

	</steps>
	
	
</section>	
	
	
</sections>	
	
	
</group>




Web Publishing Components
Web Pages
Removing Non-essential Code
Customizing AlphaSportsWeb
Configuring Security
		
		
		
		
		
	</groups>
	<see>
		<ref>Web Projects, Profiles, and Publishing</ref>
	</see>
<links>
	<link href="http://support.alphasoftware.com/alphafivehelp/index.htm">http://support.alphasoftware.com/alphafivehelp/index.htm</link>
</links>	
	
	
	
	
</page>