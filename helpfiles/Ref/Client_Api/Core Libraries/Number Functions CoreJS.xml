<page>
    <shortlink>number functions core javascript library</shortlink>
    <topic>Number Functions Core.JS</topic>
    <description>Utility functions for working with numbers.</description>
    <sections>
        <section>
            <title>$u.n.toStr(NUMBER as number, DECIMALPLACE as number , FORMAT as string, PREFIX as string, SUFFIX as string)</title>
            <description>
                <p>Convert a number into a string. The second parameter allows you to specify decimal places to round to. The optional third parameter specifies format flags. Format flags are:</p>
            </description>
            <list>
                <item>
                    <name-title>Format Flag</name-title>
                    <description-title>Definition</description-title>
                </item>
                <item>
                    <name>B</name>
                    <description>Return a blank string if the number equals "0". </description>
                </item>
                <item>
                    <name>,</name>
                    <description>Include a thousands separator. The default string used as a thousands separator is a comma ",". The thousands separator used is defined in *[js:$u.comma]*. You can change the thousands separator to any string you desire.</description>
                </item>
                <item>
                    <name>-</name>
                    <description>Use a "-" before the number if it is negative.</description>
                </item>
                <item>
                    <name>(</name>
                    <description>Bracket the number in parentheses if it is negative.</description>
                </item>
            </list>
        </section>
        <section>
            <description>
                <p>The optional fourth parameter allows you to define a Prefix The optional fifth parameter allows you to define a Suffix.</p>
                <p>Example:</p>
            </description>
            <example><![CDATA[$u.n.toStr(11222.152,2,',','$',' (US)');
/* result is: '$11,222.15 (US)'*/

$u.n.toStr(-11222.152,2,'(,','$',' (US)');
/* result is: '($11,222.15 (US))'*/]]></example>
            <cases>
                <case>
                    <title>Thousands Separator and Decimal Character</title>
                    <description>The default value for the thousands separator and decimal character are a comma "," and period ".", respectively. These values can be changed using the *[js:$u.comma]* and *[js:$u.decimal]* properties. EG:</description>
                    <example><![CDATA[// Set the thousands separator to a period:
$u.comma = ".";

// Set the decimal to a comma:
$u.decimal = ",";

// Format the value:
$u.n.toStr(11222.152,2,",");

/* result is : 11.222,15 */]]></example>
                </case>
            </cases>
        </section>
        <section>
            <title>$u.n.toPlaceStr(NUMBER as number)</title>
            <description>
                <p>Convert a number into a place string (i.e. "1st", "2nd", "3rd", "4th", "105th"...)</p>
                <p>Example</p>
            </description>
            <example><![CDATA[$u.n.toPlaceStr(23);
/* result is: '23rd'*/]]></example>
        </section>
        <section>
            <title>$u.n.round(NUMBER as number, DECIMALPLACE as number, DIRECTION as string)</title>
            <description>Round a number to the given decimal place. The direction optional argument allows you to specify the direction you want to round. The "direction" flag has three possible values:</description>
            <list>
                <item>
                    <name-title>Direction</name-title>
                    <description-title>Description</description-title>
                </item>
                <item>
                    <name>u</name>
                    <description>Always round the number up.</description>
                </item>
                <item>
                    <name>d</name>
                    <description>Always round the number down.</description>
                </item>
                <item>
                    <name>normal</name>
                    <description>Default behavior. If the value of the digit after the rounding decimal point is less then 5 round down, otherwise round up.</description>
                </item>
            </list>
        </section>
        <section>
            <description>Example:</description>
            <example><![CDATA[$u.n.round(23.12142342342342,1);
/* result is: 23.1*/

$u.n.round(23.12,1,'u');
/* result is: 23.2*/

$u.n.round(23.18,1,'d');
/* result is: 23.1*/]]></example>
        </section>
    </sections>
</page>