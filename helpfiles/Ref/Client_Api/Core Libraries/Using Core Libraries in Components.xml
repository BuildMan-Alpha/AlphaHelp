<page>
    <shortlink>corejs using in components</shortlink>
    <topic>Using Core Libraries in Components</topic>
    <description>The following best practices should be used when using core library functions in components.</description>
    <sections>
        <section>
            <title>Prefer Component Methods When Available</title>
            <description>
                <p>Check to see if there are any existing component methods to do what you want to do before using a method in the Core library to manipulate a control in a component. Controls in Grid and UX components are more complex than their underlying HTML representation. For example, in a Grid component, when the value changes for a textbox for a field in a Detail View, Alpha Anywhere will do the following:</p>
            </description>
            <list bullet="true">
                <item>
                    <name>Set the value in the field's textbox</name>
                </item>
                <item>
                    <name>Fetch the latest data for the record if no previous edits have been made to the record</name>
                </item>
                <item>
                    <name>Mark the field as modified</name>
                </item>
                <item>
                    <name>Enable/disable buttons to Save/Undo changes</name>
                </item>
                <item>
                    <name>Fire events to execute Action Javascript, initiate Ajax Callbacks, execute custom JavaScript, recompute computed controls, update dynamic styles, and revalidate client-side expressions (show/hide, enable/disable, readonly, etc) that reference the feild's value</name>
                </item>
                <item>
                    <name>Update the component's state information</name>
                </item>
            </list>
        </section>
        <section>
            <description>
                <p>Manipulating a control's value directly using a method such as *[js:$()]* bypasses these actions, eliminating many of the built-in features that Alpha Anywhere provides. Instead, the component's *[js:.setValue()]* method should be used. The *[js:.setValue()]* method allows you to change the value of a control and ensuring any functionality that is dependent on the value changing is processed. For example:</p>
            </description>
            <example code="js"><![CDATA[{grid.object}.setValue('G','FIRSTNAME',1,'Thomas');]]></example>
        </section>
        <section>
            <description>
                <p>Other methods exist for showing or hiding controls or setting other control properties. See the JavaScript method documentation for the [Grid Component] and [UX Component] to see what methods are available.</p>
            </description>
        </section>
        <section>
            <title>Getting a Pointer to a Control</title>
            <description>
                <p>Some components offer a [method for getting a pointer to the control's HTML element]. This method can be used to get the DOM element needed by the core library function:</p>
            </description>
            <example code="js"><![CDATA[ele = {dialog.object}.getPointer("FIRSNAME");]]></example>
        </section>
        <section>
            <title>Use Placeholders</title>
            <description>
                <p>Most core functions require the id for the HTML element for the control you want to modify. The control id for a Component is typically a combination of the Component ID and Control Id.  You can construct the id yourself using [placeholders]. For example:</p>
            </description>
            <example code="js"><![CDATA[id = "{grid.controlId}";
id = "{dialog.componentName}.V.R1.FIRSTNAME";
id = "{grid.componentName}.V.R{grid.rowNumber}.LASTNAME";]]></example>
        </section>
    </sections>
    <links>
        <link link="ux%20component%20getpointer%20method">method for getting a pointer to the control's HTML element</link>
        <link link="aliases%20and%20placeholders">placeholders</link>
        <link link="grid%20component%20properties%20and%20methods">Grid Component</link>
        <link link="ux%20component%20methods">UX Component</link>
    </links>
    <see>
        <ref link="ux%20component%20getpointer%20method">{dialog.object}.getPointer() Method</ref>
        <ref link="aliases%20and%20placeholders">Aliases and Placeholders</ref>
    </see>
</page>