<page api="js">
    <shortlink>corejs e_remove</shortlink>
    <topic>$e.remove Function</topic>
    <prototype>$e.remove(ele as object|string|array, type as string, eventListener as function)</prototype>
    <arguments>
        <argument>
            <name>ele</name>
            <type>object|string|array</type>
            <description>An HTML element, an ID or NAME, or an array of HTML elements, IDs, and/or NAMEs.</description>
        </argument>
        <argument>
            <name>type</name>
            <type>string</type>
            <description>The type of event. See [$e.add] for a list of event types.</description>
        </argument>
        <argument>
            <name>eventListener</name>
            <type>function</type>
            <description>The Javascript function that was linked to the event.</description>
        </argument>
    </arguments>
    <description>Remove an event listener on one or more HTML elements.</description>
    <discussion>The $e.remove() function allows you to remove an event on a single or multiple HTML elements.</discussion>
    <note>This function only removes event handlers that were added using the $e.add() function. It cannot remove event handlers that are specified in the HTML markup.</note>
    <example code="js"><![CDATA[//Assume that the $e.add() function had been previously called to add the 'validate1()' function to the 'on blur' event for the 'firstname' control.</x>
$e.remove('firstname','blur',validate1);

//Assume that the 'validate1()' function had been bound to multiple controls.
$e.remove(['firstname','lastname'],'blur',validate1);]]></example>
    <links>
        <link href="$e.add Method.xml">$e.add</link>
    </links>
</page>