<page api="js">
    <shortlink>corejs eexecute</shortlink>
    <topic>$e.execute Function</topic>
    <prototype>$e.execute(element as HTMLElement|string, event as string)</prototype>
    <arguments>
        <argument>
            <name>element</name>
            <types>
                <type>HTMLElement</type>
                <type>string</type>
            </types>
            <description>An HTMLElement object or the ID of the element passed as a string.</description>
        </argument>
        <argument>
            <name>event</name>
            <type>string</type>
            <description>The event to execute. It can be one of the following. See "Executing Abstract Events" below for how to handle executing touch events.</description>
            <list>
                <item>
                    <name>click</name>
                    <description>When the user clicks on an element.</description>
                </item>
                <item>
                    <name>dblclick</name>
                    <description>When the user double clicks on an element.</description>
                </item>
                <item>
                    <name>mousedown</name>
                    <description>When the user presses the mouse down on an element.</description>
                </item>
                <item>
                    <name>mouseup</name>
                    <description>When the user releases the mouse button after pressing mouse down on an element.</description>
                </item>
                <item>
                    <name>mouseover</name>
                    <description>When the mouse cursor moves over an element.</description>
                </item>
                <item>
                    <name>mousemove</name>
                    <description>When the mouse cursor is being moved over an element.</description>
                </item>
                <item>
                    <name>mouseout</name>
                    <description>When the mouse cursor leaves an element.</description>
                </item>
                <item>
                    <name>keypress</name>
                    <description>When the user presses a key. Will fire repeatedly while the key is being pressed.</description>
                </item>
                <item>
                    <name>keydown</name>
                    <description>When the user presses a key. Fires on the key down.</description>
                </item>
                <item>
                    <name>keyup</name>
                    <description>When the user presses a key and then releases it.</description>
                </item>
                <item>
                    <name>focus</name>
                    <description>When the user gives focus to an element.</description>
                </item>
                <item>
                    <name>blur</name>
                    <description>When a user 'blurs' an element. I.e. when an element looses focus.</description>
                </item>
                <item>
                    <name>change</name>
                    <description>When the user makes a change in a form element.</description>
                </item>
                <item>
                    <name>reset</name>
                    <description>When the user resets the data in a form using a 'Reset' button.</description>
                </item>
                <item>
                    <name>submit</name>
                    <description>When the user clicks a form's 'Submit' button.</description>
                </item>
                <item>
                    <name>scroll</name>
                    <description>When the user scrolls a scrollable element. This could be the page itself, of a DIV that has scroll bars.</description>
                </item>
                <item>
                    <name>resize</name>
                    <description>When the user resizes the browser window.</description>
                </item>
                <item>
                    <name>load</name>
                    <description>When the page is loaded.</description>
                </item>
                <item>
                    <name>unload</name>
                    <description>When the page is unloaded (i.e. when you navigate to another page, or the browser is closed).</description>
                </item>
            </list>
        </argument>
    </arguments>
    <description>Executes an event for an HTML element, such as a TextBox, Button, or DropdownBox control.</description>
    <discussion>The $e.execute() function allows you to trigger the event for an element, such as the keypress event for a Textbox.</discussion>
    <sections>
        <section>
            <example code="js"><![CDATA[var id = 'submitButton';
$e.execute(id,'click');]]></example>
        </section>
        <section>
            <description>
                <p></p>
            </description>
            <example code="js"><![CDATA[var ele = {dialog.object}.getPointer('DropDownBox_1');
if (ele) {
    $e.execute(ele,'blur');
}]]></example>
        </section>
        <section>
            <title>Executing Abstract Events</title>
            <description>
                <p>When working with controls in Alpha Anywhere, many controls offer two sets of events, traditional [Javascript] events for mouse and keyboard events and [Javascript - (Touch, Mouse, Pointer Events)] which support touch events in touch-enabled environments. The mouse and keyboard events can be passed directly to *[js:$e.execute()]*:</p>
            </description>
            <example code="js"><![CDATA[// get a pointer to the UX textbox control
var ele = {dialog.object}.getPointer('TEXTBOX_1');
$e.execute(ele,'keyup');]]></example>
        </section>
        <section>
            <description>
                <p>The *[js:Javascript - (Touch, Mouse, Pointer Events)]*, however, are abstract events that are dynamically resolved to native events based on whether or not the environment is touch-enabled. For example, [move] will resolve to "touchmove" on a mobile device and "mousemove" on a desktop computer. If you are developing a mobile web application that will support both environments and need to programmatically execute an abstract event, you need to specify the correct event for the environment when using *[js:$e.execute()]*. This can be done using the *[js:A5.d.evnts]* object.</p>
                <p>*[js:A5.d.evnts]* is an object that maps abstract events to the event that will be triggered in the application's environment. Instead of trying to determine if the application is running on a mobile device yourself, the *[js:a5.d.evnts]* object can be used to specify the event for *[js:$e.execute()]* for the abstract events listed below:</p>
            </description>
            <list>
                <item>
                    <name-title>Abstract Event</name-title>
                    <description-title>Example Using A5.d.evnts</description-title>
                </item>
                <item>
                    <name>[click]</name>
                    <description>*[js:$e.execute(ele, A5.d.evnts.click)]*</description>
                </item>
                <item>
                    <name>[down]</name>
                    <description>*[js:$e.execute(ele, A5.d.evnts.down)]*</description>
                </item>
                <item>
                    <name>[up]</name>
                    <description>*[js:$e.execute(ele, A5.d.evnts.up)]*</description>
                </item>
                <item>
                    <name>[move]</name>
                    <description>*[js:$e.execute(ele, A5.d.evnts.move)]*</description>
                </item>
                <item>
                    <name>[dblClick]</name>
                    <description>*[js:$e.execute(ele, A5.d.evnts.dblClick)]*</description>
                </item>
            </list>
        </section>
        <section>
            <description>
                <p>With *[js:A5.d.evnts]*, your code to trigger an abstract events, such as "move", simplifies to the following:</p>
            </description>
            <example code="js"><![CDATA[// Get a pointer to the text box:
var ele = {dialog.object}.getPointer('TEXTBOX_1');

// trigger an abstract move event:
$e.execute(ele,A5.d.evnts.move);]]></example>
        </section>
        <section>
            <description>Not all [Javascript - (Touch, Mouse, Pointer Events)] events can be triggered programmatically due to their underlying implementation. For example, the swipe events do not have a native event in any environment. Rather, these events have been created to make it easier for developers to build behaviors around these actions. In the situation where no abstract event is available, you will need to place the code you would like to execute into a function that can be called from both the event and anywhere you need to programmatically execute the function.</description>
        </section>
    </sections>
    <links>
        <link link="ux control properties javascript">Javascript</link>
        <link link="ux control properties javascript touch mouse pointer events">Javascript - (Touch, Mouse, Pointer Events)</link>
        <link link="ux control properties javascript touch mouse pointer events click">click</link>
        <link link="ux control properties javascript touch mouse pointer events down">down</link>
        <link link="ux control properties javascript touch mouse pointer events up">up</link>
        <link link="ux control properties javascript touch mouse pointer events move">move</link>
        <link link="ux control properties javascript touch mouse pointer events dblclick">dblClick</link>
    </links>
    <see>
        <ref link="ux component getPointer Method">{dialog.object}.getPointer()</ref>
        <ref link="howto simulate an event">How to Simulate the 'click' Event for a Control</ref>
    </see>
</page>