<page api="js">
    <shortlink>grid component getValue method</shortlink>
    <topic parent="{grid.object}" parentType="object" elementName="getValue Method">{grid.object}.getValue Method</topic>
    <description>Get the value of a control in the Grid, Search or Detail View part.</description>
    <prototype>{grid.Object}.getValue(part,name,row - omit for Search and Detail View part)</prototype>
    <arguments>
        <argument>
            <name>part</name>
            <description>'G' , 'D' or 'S' (Grid, Detail View or Search part). MUST be all UPPERCASE</description>
        </argument>
        <argument>
            <name>row</name>
            <description>Only needed for Grid part.</description>
        </argument>
        <argument>
            <name>name</name>
            <description>MUST be all UPPERCASE</description>
        </argument>
    </arguments>
    <sections>
        <section>
            <description>Part is 'G' , 'D' or 'S' (Grid, Detail View or Search part). Row is only needed for Grid part. For new record rows, row is negative. IMPORTANT:The 'name' and 'part' parameters MUST be all UPPERCASE. </description>
        </section>
        <section>
            <title>Example</title>
            <description>IMPORTANT NOTE ABOUT USING .getValue() on a Range field in the Search Part - You cannot use this method for a field in the Search Part that has been configured as a 'Range' search.Read value in 'LASTNAME' field from the Grid part, row 4. Note that field name must be uppercase.</description>
            <example code="js"><![CDATA[var lname = {grid.object}.getValue('G','LASTNAME',4); ]]></example>
        </section>
        <section>
            <description>read value in 'LASTNAME' field from the Grid part, 'current row'. Note that field name must be uppercase.</description>
            <example code="js"><![CDATA[var lname = {grid.object}.getValue('G','LASTNAME',{grid.rowNumber}); ]]></example>
        </section>
        <section>
            <description>Note that {grid.rowNumber} cannot be used in client-side Javascript or Global Javascript functions.Instead, you must use the _selectedRow property of the Grid object to get the current row. For example:</description>
            <example code="js"><![CDATA[var rn = {grid.object}._selectedRow;
var lname = {grid.object}.getValue('G','LASTNAME',rn);]]></example>
        </section>
        <section>
            <description>Read value in 'LASTNAME' field in the Search part.</description>
            <example code="js"><![CDATA[var lname = {grid.object}.getValue('S','LASTNAME');]]></example>
        </section>
        <section>
            <description>read value in 'LASTNAME' field in the Detail View part.</description>
            <example code="js"><![CDATA[var lname = {grid.object}.getValue('D','LASTNAME');]]></example>
        </section>
        <section>
            <description>Getting value of 'range' fields in the Search part. You can't use .getValue(). You have to use low level Javascript.</description>
            <example code="js"><![CDATA[var val1 = $('{grid.componentname}.S.STARTDATE').value;
var val2 = $('{grid.componentname}.S._TO.STARTDATE').value;]]></example>
        </section>
    </sections>
    <see>
        <ref link="grid%20components">Grid Component</ref>
        <ref link="Grid Component Properties and Methods">{grid.object}</ref>
    </see>
    <terms>grid component,control,detail view,field,javascript,new record,object,record,search,search part</terms>
</page> 