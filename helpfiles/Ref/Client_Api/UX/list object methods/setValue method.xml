<page api="js">
    <shortlink>list object setvalue method</shortlink>
    <topic>listObj.setValue Method</topic>
    <syntax>listObj.setValue(value, [flagFireChangeEvent]);</syntax>
    <arguments>
        <argument>
            <name>value</name>
            <types>
                <type>A</type>          
                <type>JSON Object</type>
            </types>
            <description>The value you want to set. Can also be a JSON object for advanced use cases. See examples below.</description>
            <note>A List's value is based on the 'Return value' property specified in the List Builder.</note>
        </argument>
        <argument optional="true">
            <name>flagFireChangeEvent</name>
            <type>Boolean</type>
            <description>Default value is true. A true/false value indicating whether or not the change event should be triggered. If false, the change event will not fire.</description>
        </argument>
    </arguments>
    <description>Set the value of the List.</description>
    <discussion>
        <p>Sets the value of the List causing the corresponding row(s) in the List to be selected. The *[js:value]* of a List is based on the setting in the List Builder for the List's 'Return value' property.</p>
        <p>In the case of List that uses client-side grouping, you can also select rows based on group names. For example, select all of the rows for records in the 'California' group.</p>
    </discussion>
    <sections>
        <section>
            <description>In the example below, the List value is set to 'ALFKI'.</description>
            <note>The List's 'Return Value' property must be set to 'CustomerId' since 'ALFKI' is a CustomerId 'value'</note>
            <example><![CDATA[var listObj = {dialog.object}.getControl('LIST1');
listObj.setValue('ALFKI');]]></example>
        </section>
        <section>
            <description>When the value is set, the change event is fired. When the change event is fired, watch events are triggered. Watch events are created for calculated fields and show/hide events based on the value of the List, as well the logic that updates the dirty state for the List. You can also add your own watch events. To prevent the change event from executing, you can pass in an optional second parameter to *[js:setValue()]*. The second parameter defines whether or not the change event shoudl be fired. If *[js:false]* is passed in, the change event and subsequently watch events are not executed:</description>
            <note>You can also set the value of a List using the generic {dialog.object}.setValue() method. The .setValue() method for the List is convenient if you already have a pointer to the List control.</note>
            <example><![CDATA[//Set value and do not fire the change event:
listObj.setValue('ALFKI',false);]]></example>
        </section>
        <section>
            <title>Example: Selecting Multiple Rows</title>
            <description>An object can be passed in instead of a single value to select rows in the List. This method can be used to select multiple rows in Lists with multi-selection enabled. For example, to select all rows, pass ina  object with the property *[js:select]* set to *[js:'all']*:</description>
            <example><![CDATA[//Select all rows in a List (that has been configured to allows multiple selections)
var options = {};
options.select = 'all';
listObj.setValue(options);]]></example>
        </section>
        <section>
            <description>The *[js:group]* option can be used to select rows that contain the same value. For example, you can select all rows with the valeu of 'CA' or 'MA' as follows:</description>
            <example><![CDATA[//Select all rows in the 'CA' and 'MA' groups (de-selecting any existing rows)
var options = {};
options.select = 'group';
options.groups = ['CA','MA'];
options.additive = false;
listObj.setValue(options);]]></example>
        </section>
        <section>
            <description>The *[js:additive]* property defines whether or not the matching rows should be added to the current selection. For example, the following will add all rows in the 'NY' group to the existing selected rows in the List:</description>
            <example><![CDATA[//Select all rows in the 'NY' group (keeping any existing selections)
var options = {};
options.select = 'group';
options.groups = ['NY'];
options.additive = true;
listObj.setValue(options);]]></example>
        </section>
        <section>
            <title>Example: Selecting Rows with List Virtualization</title>
            <description>If List 'virtualization' is enabled, you can select all of the rows on a current page of records as follows:</description>
            <example><![CDATA[//In a List that has 'virtualization' turned on, select all rows in the current 'page' of records:
var options = {};
options.select = 'view';
options.additive = false;
listObj.setValue(options);]]></example>
        </section>
        <section>
            <title>Example: Add Value to Current Selection</title>
            <description>The *[js: select: 'add']* property can be usd to set the select row(s) in a List. If the List control is configured to allow multiple selection, the following code will select multiple rows:</description>
            <example code="js"><![CDATA[// Select rows with a value of 'Smith' or 'Jones'
listObj.setValue({select: 'add', value : ['Smith','Jones']});]]></example>
        </section>
        <section>
            <title>Example: Remove Value from Current Selection</title>
            <description>
                <p>Rows in a List can be deselected by passing in the *[js:select: 'remove']* option when using *[js:setValue()]*. For example, the following code will deselect multiple rows:</p>
            </description>
            <example code="js"><![CDATA[// Deselect rows with a value of 'Smith' or 'Jones'
listObj.setValue({select: 'remove', value: ['Smith','Jones']});]]></example>
        </section>
        <section>
            <title>Example: Toggle Selected State of Items in the Value Array</title>
            <description>
                <p>You can toggle the selected state of the specified rows using *[js:select: 'toggle']*. For example, the following will toggle the selected state for the rows 'Smith' and 'Jones':</p>
            </description>
            <example code="js"><![CDATA[// Toggle the selected rows if they have a value of 'Smith' or 'Jones'
listObj.setValue({select: 'toggle', value: ['Smith','Jones']});]]></example>
        </section>
        <section>
            <title>Example: Select Matching Rows</title>
            <description>
                <p>If *[js:select: 'match']* is specified, rows can be selected dynamically using a function. The function is specified with the *[js:match]* parameter. The value of the row and the data in the row will be passed to the function. The function must return a *[js:true]* or *[js:false]* value. If it returns *[js:true]*, the row will be selected. For example:</p>
            </description>
            <example code="js"><![CDATA[// Select rows that match the criteria specified by the function
var value = {};
value.select = 'match';
value.match = function(value, data) function(value,data) {
    //value and data for the current row
    if(data.Country == 'USA') return true;
    else return false;
};

listObj.setValue(value);]]></example>
        </section>
        <section>
            <title>Example: Adding Rows to the Existing Selection</title>
            <description>
                <p>The *[js:additive: true]* option will add the matching rows to the set of existing selected rows. For example:</p>
            </description>
            <example code="js"><![CDATA[// Add rows that match the criteria specified by the function
var value = {};
value.additive = true; // add matching rows to existing selected rows
value.select = 'match';
value.match = function(value, data) function(value,data) {
    //value and data for the current row
    if(data.Country == 'UK') return true;
    else return false;
};

listObj.setValue(value);]]></example>
        </section>
    </sections>
    
    <terms></terms>
    <see>
        <ref link="ux component setValue method">{dialog.object}.setValue Method</ref>
    </see>
</page>