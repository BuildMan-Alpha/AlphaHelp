<page api="js">
    <shortlink>list object addTableRow method</shortlink>
    <topic>listObj.addTableRow Method</topic>
    <syntax>listObj.addTableRow(data [,options]);</syntax>
    <arguments>
        <argument>
            <name>data</name>
            <type>JSON Object</type>
            <description>An object with the values in the List that you want to set.</description>
        </argument>
        <argument optional="true">
            <name>options</name>
            <type>JSON Object</type>
            <description>An object with optional settings. The options object can contain these properties:</description>
            <properties>
                <property optional="true">
                    <name>setFocusToTargetRow</name>
                    <type>boolean</type>
                    <description>true/false - If true, then focus will be given to the target row. The default for this property is false.</description>
                </property>
                <property optional="true">
                    <name>insertRow</name>
                    <type>boolean</type>
                    <description>true/false -- Default false. Set to true if you want to insert at a specified position in the List rather than at the end. (Requires build 4444 or above)</description>
                </property>
                <property optional="true">
                    <name>insertPosition</name>
                    <type>number|string</type>
                    <description>If options.insertRow is true, specify where in the List the new row should be inserted. options.insertPosition can either be a number or a string. If it is a number, it represents a zero based row number in the List where the new record will be inserted. If it is a string it represents the List value where the new row will be inserted.</description>
                </property>
            </properties>
        </argument>
    </arguments>
    <description>Adds a row of data to a List with a Detail View.</description>
    <discussion>
        <p>Adds a new row of data to a List that has a Detail View. By default, the new row is added at the end of the List, but you can add the new row (i.e. insert the row) at any position by setting options.</p>
    </discussion>
    <sections>
        <section>
            <example><![CDATA[//create a data object with values for the columns in the List you want to edit
var data = {};
data.FIRSTNAME = 'Cecelia';
data.LASTNAME = 'Longwood';

//define optional settings
var ops = {};
ops.setFocusToTargetRow = true;

//get a pointer to the List control and then call the .addTableRow() method
var listObj = {dialog.object}.getControl('CUSTOMERLIST')
listObj.addTableRow(data,ops);

//insert the new row at position 3 (zero based)
var ops = {};
ops.setFocusToTargetRow = true;
ops.insertRow = true;
ops.insertPosition = 3;
listObj.addTableRow(data,ops);]]></example>
        </section>
        <section>
            <description>
                <p>Contrast the *[js:.addTableRow()]* method with the List object's *[js:.appendRows()]* method.</p>
                <p>The *[js:.addTableRow()]* method is the programmatic equivalent of the user entering some values into the List Detail view controls and then clicking on the Save button to save their changes back to the List. When the user does this, the List becomes dirty and the edits that have been made to the list can be synchronized with the server.</p>
                <p>The *[js:.appendRows()]* method is a low level method that adds the data to the List, but this method does not add the necessary information to the List to cause the List row that was added to become dirty. The new row *[cannot]* be synchronized with the server.</p>
            </description>
            <note>To programmatically update a table row see the *[js:.updateTableRow()]* method.</note>
        </section>
        <section build="4355">
            <title>Adding Rows to a Table for Lists Persisted to the File System</title>
            <description>
                <p>If you are using the *[js:addTableRow()]* method in a loop, then you can add many new rows to a List quite quickly. Under certain circumstances, this can cause a problem.</p>
                <p>The circumstances under which this could cause a problem are:</p>
            </description>
            <steps>
                <step>
                    <description>The List is set to persist to storage (so that the application can function offline)</description>
                </step>
                <step>
                    <description>The *[link:List storage@ux list properties persist where]* is set to 'FileSystem'</description>
                </step>
                <step>
                    <description>The App is running in Phonegap.</description>
                </step>
            </steps>
        </section>
        <section>
            <description>
                <p>The reason that there is a potential problem under the above scenario is that writing to the File System in PhoneGap is an asynchronous operation. Each time the List is updated, the edits to the List are saved in files written to the File System. But since these write operations are asynchronous, it is possible (actually likely), that the write operation for the next record added to the List will be initiated before the write operation for the current record added to the List has completed, and so on. These overlapping write operations to the File System could corrupt the files used to store the List edits.</p>
                <p>The solution to this potential problem is to temporarily suspend persisting the List while the *[js:addTableRow()]* method is being called in a loop and then once the loop has completed, turn the suspension off and persist the List to storage.</p>
                <p>To suspend persisting to the List, you set the List's *[js:.suspendPersist]* property to true.</p>
                <p>To turn persisting back on, you set the List's *[js:.suspendPersist]* to false</p>
                <p>To manually persist the List after you have turned suspend persist off use the List's *[link:persistToStorage() method@list object persisttostorage method]*. You must pass in an empty object when calling this method.</p>
                <p>For example:</p>
            </description>
            <example code="js"><![CDATA[//persist multiple rows in a loop
var listObj = {dialog.object}.getControl('list1');

//suspend list persisting
listObj.suspendPersist = true;

//execute the .addTableRow() method in a loop

//turn list persisting back on
listObj.suspendPersist = false;

//persist the list (passing in an empty object to the .persistToStorage() method.
listObj.persistToStorage({});]]></example>
        </section>
    </sections>
    <limitations>List Control with Detail View Part</limitations>
    <see>
        <ref link="list object updateTableRow method">listObj.updateTableRow()</ref>
        <ref link="buildingdisconnectedapplications">List Control Overview</ref>
    </see>
</page>