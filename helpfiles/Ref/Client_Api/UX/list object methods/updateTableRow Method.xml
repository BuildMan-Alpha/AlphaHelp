<page api="js">
    <shortlink>list object updateTableRow method</shortlink>
    <topic>listObj.updateTableRow Method</topic>
    <prototype>listObj.updateTableRow(primaryKeyOrRowNumber, data [,options]);</prototype>
    <arguments>
        <argument>
            <name>primaryKeyOrRowNumber</name>
            <type>string|number</type>
            <description>The primary key value or row number (zero based) of the row you want to update. If this argument is a string then it is assumed to be a primary key value. If it is a number, then it is assumed to be a row number. The primary key of the List is specified in the List.</description>
        </argument>
        <argument>
            <name>data</name>
            <type>JSON Object</type>
            <description>An object with the values in the List that you want to set.</description>
        </argument>
        <argument optional="true">
            <name>options</name>
            <type>JSON Object</type>
            <description>An object with optional settings. The options object can contain the properties listed:</description>
            <properties>
                <property optional="true">
                    <name>setFocusToTargetRow</name>
                    <type>boolean</type>
                    <description>true/false - If true, then focus will be given to the target row. The default for this property is false.</description>
                </property>
            </properties>
        </argument>
    </arguments>
    <description>Updates data in a row in a List that has a Detail View.</description>
    <sections>
        <section>
            <example><![CDATA[//create a data object with values for the columns in the List you want to edit
var data = {};
data.FIRSTNAME = 'Cecelia';
data.LASTNAME = 'Longwood';

//specify the primary key of the row to update
var primaryKey = '1234';

//define optional settings
var ops = {};
ops.setFocusToTargetRow = true;

//get a pointer to the List control and then call the .updateTableRow() method
var listObj = {dialog.object}.getControl('CUSTOMERLIST')
listObj.updateTableRow(primaryKey,data,ops);]]></example>
        </section>
        <section>
            <description>
                <p>Contrast the *[js:.updateTableRow()]* method with the List object's *[js:.updateRow()]* method.</p>
                <p>The *[js:.updateTableRow()]* method is the programmatic equivalent of the user entering some values into the List Detail view controls and then clicking on the Save button to save their changes back to the List. When the user does this, the List becomes dirty and the edits that have been made to the List can be synchronized with the server.</p>
                <p>The *[js:.updateRow()]* method is a low level method that updates the data in a row, but this method does not add the necessary information to the List to cause the List row that was edited to become dirty. It does also not add the *[js:._oldData]* object to the List to store the original values that were in the List row before it was edited. The changes that were made to the List *[cannot]* be synchronized with the server.</p>
            </description>
            <note>To programmatically add a table row see the *[js:[.addTableRow()]]* method.</note>
        </section>
    </sections>
    <limitations>List Control with Detail View Part</limitations>
    <see>
        <ref link="buildingdisconnectedapplications">List Control Overview</ref>
    </see>
</page>