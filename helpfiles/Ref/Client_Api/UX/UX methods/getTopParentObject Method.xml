<page api="js">
    <shortlink>ux component getTopParentObject Method</shortlink>
    <topic parent="{dialog.object}" parentType="object" elementName="getTopParentObject Method">{dialog.object}.getTopParentObject Method</topic>
    <prototype>{dialog.object}.getTopParentObject();</prototype>
    <description>Returns a pointer to the top most parent object.</description>
    <returns>
        <return>
            <name>result</name>
            <types>
                <type>object</type>
                <type>boolean</type>
            </types>
            <description>
                <p>Returns the JavaScript object for the top parent component. The parent object will either be a [{grid.object}] or [{dialog.object}]. If no parent object exists, *[js:getTopParentObject()]* returns *[js:false]*.</p>
            </description>
        </return>
    </returns>
    <discussion>If the UX component was opened from a parent Grid or UX component, which in turn was opened from another Parent Grid or UX, and so on, returns a pointer to the top most parent object.</discussion>
    <important>
        <p>If the UX component does not have a parent object, getTopParentObject() will return *[js:false]*. You should *[always]* check the returned value of the getTopParentObject() method before using the object. This can be done by wrapping your code in an if block as shown in the example.</p>
    </important>
    <example code="js"><![CDATA[//Get a pointer to the top parent object
var po = {dialog.object}.getTopParentObject();

//If this UX Component does not have a parent then 'po' will be false. 
if (!po) {
    alert("No Parent Object exists");
}

//Here is how you can tell if the top parent component is a Grid or a UX component 
var po = {dialog.object}.getTopParentObject();
var componentType = '';
if (po) {
     if(typeof po.gridId != 'undefined') { componentType = 'grid'; }
     if(typeof po.dialogId != 'undefined') { componentType = 'dialog'; }

     alert("Top parent object's component type is " + componentType);
} else {
    alert("No Parent Object exists");
}]]></example>
    <links>
        <link link="ux component methods">{dialog.object}</link>
        <link link="grid%20component%20properties%20and%20methods">{grid.object}</link>
    </links>
    <see>
        <ref link="ux component methods">{dialog.object}</ref>
        <ref link="grid%20component%20properties%20and%20methods">{grid.object}</ref>
        <ref link="ux%20component%20getchildobject%20method">{dialog.object}.getChildObject()</ref>
        <ref link="ux%20component%20getparentobject%20method">{dialog.object}.getParentObject()</ref>
    </see>
    <terms>javascript functions</terms>
</page>