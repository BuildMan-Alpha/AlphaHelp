<page api="js">
    <shortlink>ux component ajaxCallback Method</shortlink>
    <topic parent="{dialog.object}" parentType="object" elementName="ajaxCallback Method">{dialog.object}.ajaxCallback Method</topic>
    <description>Does an Ajax callback to a server. </description>
    <prototype>{dialog.object}.ajaxCallback(part,rowNum,XbasicFunction [,callbackURL [,additionalData [, options]]]);</prototype>
    <arguments>
        <argument>
            <name>part</name>
            <types>
                <type>string</type>
            </types>
            <description>In a grid component, part indicates the Grid part (Search, Grid, or Detail View) from which data should be submitted. In a UX Component, this parameter is not used and should be an empty string.</description>
        </argument>
        <argument>
            <name>row</name>
            <types>
                <type>string</type>
            </types>
            <description>In a grid component, row indicates the Grid row from which data should be submitted. In a UX Component, this parameter is not used and should be an empty string.</description>
        </argument>
        <argument>
            <name>XbasicFunction</name>
            <types>
                <type>string</type>
            </types>
            <description>The name of the Xbasic function you want to call on the server.</description>
        </argument>
        <argument optional="true">
        <name>callbackURL</name>
        <types>
            <type>string</type>
        </types>
        <description>Default = "". This parameter is almost always set to a blank string. It can be used to specify the URL you want to call to handle the callback. For example, you could call a .php, or .asp page to handle the callback. If this value is not blank then the setting for XbasicFunction is ignored.</description>
        </argument>
        <argument optional="true">
            <name>additionalData</name>
            <types>
                <type>string</type>
            </types>
            <description>Default = "". Any additional data you want to submit. The data in the controls on the UX Component is automatically submitted. This can be used to submit additional data. Specify a string of name/value pairs. e.g. *[js:'data1=value1&amp;data2=value2']*</description>
        </argument>
        <argument optional="true">
            <name>options</name>
            <types>
                <type>object</type>
            </types>
            <description>An object with one or more additional options. Available options include:</description>
            <properties>
                <property optional="true">
                    <name>submitFormData</name>
                    <type>boolean</type>
                    <description>A true/false value. If true, form data will be submitted from the component. Set to false if you do not want to submit form data.</description>
                </property>
                <property optional="true">
                    <name>ajaxCallbackTimeout</name>
                    <type>numeric</type>
                    <description>Maximum number of milliseconds to wait for a response from the server. If no response is received, an optional *[js:errorFunction]* can be called.</description>
                </property>
                <property optional="true">
                    <name>errorFunction</name>
                    <type>function</type>
                    <description>Function to call if the callback fails.</description>
                </property>
                <property optional="true">
                    <name>onComplete</name>
                    <type>function</type>
                    <description>Function to call if the callback completes successfully.</description>
                </property>
                <property optional="true">
                    <name>deviceOfflineFunction</name>
                    <type>function</type>
                    <description>Function to call if the device is offline.</description>
                </property>
                <property optional="true">
                    <name>getLocationData</name>
                    <type>boolean</type>
                    <description>
                        <p>A true/false value. Indicates if the location (latitude and longitude) should be fetched from the browser and submitted to the server.</p>
                        <p>The *[xb:e]* object passed to ajax callback function will contain the location in the following properties: *[xb:__locationFound]* - true/false, *[xb:__locationLatitude]* - the latitude value, and *[xb:__locationLongitude]* - the longitude value.</p>
                        <p>Not all browsers support fetching the location.</p>
                    </description>
                </property>
                <property optional="true">
                    <name>enableHighAccuracy</name>
                    <type>boolean</type>
                    <description>A true/false value. Indicates if high accuracy should be used when fetching the location. Using high accuracy will take longer and use more power.</description>
                </property>
                <property optional="true">
                    <name>timeout</name>
                    <type>numeric</type>
                    <description>Amount of time to wait in milliseconds to fetch the location.</description>
                </property>
                <property optional="true">
                    <name>maximumAge</name>
                    <type>numeric</type>
                    <description>Maximum time in milliseconds to accept a previously fetched location. A value of 0 means that a new location must be fetched.</description>
                </property>
                <property optional="true">
                    <name>flagSaveListData</name>
                    <type>boolean</type>
                    <description>A true/false value. If true, list data is submitted to the server.</description>
                </property>
                <property optional="true">
                    <name>chunkedResponses</name>
                    <type>object</type>
                    <description>An object with the following properties:</description>
                    <properties>
                        <property>
                            <name>allow</name>
                            <type>boolean</type>
                            <description>A true/false value. If true, chunked responses will be used.</description>
                        </property>
                        <property>
                            <name>maxMessages</name>
                            <type>numeric</type>
                            <description>The maximum number of messages to listen for.</description>
                        </property>
                        <property>
                            <name>maxTime</name>
                            <type>numeric</type>
                            <description>The maximum number of seconds to listen for messages.</description>
                        </property>
                    </properties>
                </property>
            </properties>
        </argument>
    </arguments>
    <example><![CDATA[{dialog.object}.ajaxCallback('','','myAjaxCallback1','','data1=value1&data2=value2');]]></example>

    <sections>
        <section>
        <description>Data from the UX Component is submitted to the server. It is recommended that you use Action Javascript to write the code for you. This can be done by creating an *[ui:Ajax Callback Action]* either as a Javascript Action or as Action Javascript for a control's event.</description> 
        <note>The method has several blank arguments in order to keep the method prototype the same as for the Grid component.</note>
        </section>
    </sections>


    <see>
        <ref link="grid component ajaxcallback method">{grid.object}.ajaxCallback Method</ref>
    </see>


    <terms>ux component,ajax,ajax callback,function,Xbasic,javascript functions</terms>

</page> 
