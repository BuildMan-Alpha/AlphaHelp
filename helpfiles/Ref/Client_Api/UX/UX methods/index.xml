<page api="js">
    <shortlink>ux component methods</shortlink>
    <topic>UX Component Methods</topic>
    <description>Placeholders, properties, and methods that can be used on the client-side to interact with UX components.</description>
    <discussion>
        <p>JavaScript can be used on the client to manipulate the UX component using the *[js:{dialog.object}]* JavaScript object. *[js:{dialog.object}]* is a placeholder that is replaced with the actual JavaScript object at run-time. Methods on this object are available for manipulating the UX, including methods for saving and restoring data; working with Lists, Repeating Sections, Panels, Windows, and other controls; interacting directly with the DOM; calling into the PhoneGap framework; and more. See [Properties] and [Methods] below for a listing of what properties and methods are available for the *[js:{dialog.object}]* object.</p>
        <p>In addition, there are numerous other placeholders available to use with your component that are replaced for you at run-time, allowing you to reference things such as the UX component's alias, the name of the stylesheet in use, embedded components, and more. See [Placeholders] below for a list of what is available.</p>
    </discussion>
    <properties>
        <property readonly="true">
            <name>_dataSeriesData</name>
            <type>Object</type>
            <description>Object containing data series that have been published to the client. See the [Publish data to client-side] UX Component property to learn more. Has the following properties:</description>
            <properties>
                <property readonly="true">
                    <name>&lt;SeriesName&gt;</name>
                    <types>
                        <type>Object</type>
                        <type>Array</type>
                    </types>
                    <description>Contains the data in a series. Replace &lt;SeriesName&gt; with the name of the series. E.g. *[js:{dialog.object}._dataSeriesData.Names]*. If the series does not have a named subseries, the object will be an array. Otherwise, &lt;SeriesName&gt; will contain one or more subseries properties containing the data in the series:</description>
                    <properties>
                        <property readonly="true">
                            <name>&lt;SubSeries1&gt;</name>
                            <type>String</type>
                            <description>A CR-LF delimited string of values for a data series sub-series. Replace &lt;SubSeries1&gt; with the name of the subseries. E.g. *[js:{dialog.object}._dataSeriesData.Names.Firstname]*</description>
                        </property>
                        <property readonly="true">
                            <name>&lt;SubSeriesN&gt;</name>
                            <type>String</type>
                            <description>One or more additional properties containing a CR-LF delimited string of values for a data series sub-series. Replace &lt;SubSeriesN&gt; with the name of the subseries. E.g. *[js:{dialog.object}._dataSeriesData.Names.Lastname]*</description>
                        </property>
                    </properties>
                </property>
            </properties>
        </property>
        <property>
            <name>_rsOverwriteRowMsg</name>
            <type>string</type>
            <description>Message shown to user when data in a Repeating Section is copied into a dirty row. If not set, the default message "Overwrite existing data in row?" is used.</description>
        </property>
        <property>
            <name>_localStorageSettings</name>
            <type>Object</type>
            <description>Local storage settings for the UX Component.</description>
        </property>
        <property>
            <name>ajaxCallbackTimeout</name>
            <type>number</type>
            <description>The maximum number of milliseconds to wait for a response from an ajax callback to the server. This property can be set in the [onRenderComplete] event.</description>
        </property>
        <property readonly="true">
            <name>dialogId</name>
            <type>String</type>
            <description>The UX Component name. Equivalent to {dialog.componentName}. Prefer to use {dialog.componentName}.</description>
        </property>
        <property>
            <name>originalValues</name>
            <type>JSON array</type>
            <description>
                <p>Contains the original values for the controls in the UX Component. Values are stored in a JSON array. The contents of the array are dependent on the structure of the component.</p>
                <p>The [{dialog.object}.resetForm()] uses the values stored in *[js:originalValues]* to reset the controls in the UX component to their original state. You can change the data in this object to modify the original values for controls.</p>
                <p>
                    <example code="js" caption="Show data in the originalValues property"><![CDATA[var origValues = {dialog.object}.originalValues;
// Show values in a popup window
alert(JSON.stringify(origValues));]]></example>
                </p>
                <p>If you return JavaScript to set the row count and values of a Repeating Section in the onDialogInitialize event, you must set the original values manually. See [onDialogInitialize] for more information.</p>
            </description>
            <important>
                <p>Original values are not default values.</p>
            </important>
        </property>
        <property>
            <name>stateInfo</name>
            <type>Object</type>
            <description>A JSON object containing state information. Can be used to read and set state information for the component. See also [getStateInfo()] and [setStateInfo()].</description>
        </property>
    </properties>
    <sections>
        <section>
            <title>Placeholders</title>
            <description>Placeholders are dynamic objects that can be used JavaScript code to reference objects that are defined by the Application Server.</description>
            <list>
                <item>
                    <name-title>Placeholder</name-title>
                    <description-title>Description</description-title>
                </item>
                <item>
                    <name>{dialog.ComponentName}</name>
                    <description>Gets replaced with the alias of the UX Component. For example, if the UX alias is 'DLG1', then is replaced with 'DLG1'.</description>
                </item>
                <item>
                    <name>{dialog.ControlIdEscaped}</name>
                    <description>The control Id of the control. Special characters in the id are Javascript escaped. You must use this placeholder (and not {dialog.ControlId}) if you want to use this placeholder in a selector (such as JQuery - jQuery('#{dialog.controlIDEscaped}') )</description>
                </item>
                <item>
                    <name>{dialog.ControlId}</name>
                    <description>The control Id of the control. Note: See comment on {dialog.ControlIDEscaped}.</description>
                </item>
                <item>
                    <name>{dialog.EmbeddedCustomComponent_[Alias]}</name>
                    <description>
                        Used to get the Object name of an embedded Custom Component. Replace [Alias] with the alias you specified for the embedded Custom Component object.
                        You can use this placeholder to execute methods on the embedded Custom Component.
                    </description>
                </item>
                <item>
                    <name>{dialog.EmbeddedUX_[UXAlias]}</name>
                    <description>
                        Used to get the Object name of an embedded UX Component. Replace [UXAlias] with the alias you specified for the embedded UX object.
                        You can use this placeholder to execute methods on the embedded UX.
                    </description>
                </item>
                <item>
                    <name>{dialog.EmbeddedGrid_[GridAlias]}</name>
                    <description>
                        Used to get the Object name of an embedded Grid Component. Replace [GridAlias] with the alias you specified for the embedded Grid object.
                        You can use this placeholder to execute methods on the embedded Grid.
                    </description>
                </item>
                <item>
                    <name>{dialog.listId}</name>
                    <description>For use with the List control. Gets replaced with the ID of the current List control.</description>
                </item>
                <item>
                    <name>{dialog.object}</name>
                    <description>Gets replaced with the name of the Javascript UX Component Object. For example, if the UX alias is 'DLG1', then is replaced with 'DLG1_DlgObj'. Use this placeholder when you want to call a method of the UX Object. e.g. {Dialog.Object}.submit(), to submit the UX to the server.</description>
                </item>
                <item>
                    <name>{dialog.Style}</name>
                    <description>Gets replaced with the style name of the UX. For example, if the style is 'GlassOlive', then gets replaced with 'GlassOlive'.</description>
                </item>
            </list>
        </section>
    </sections>
    <!--list:.-->
    <links>
        <link href="#section1_Placeholders">Placeholders</link>
        <link href="#group_properties">Properties</link>
        <link href="#group_methods">Methods</link>
        <link link="ux properties publish data to client side property">Publish data to client-side</link>
        <link link="ux component getStateInfo Method">getStateInfo()</link>
        <link link="ux component setStateInfo Method">setStateInfo()</link>
        <link link="ux component saveListEdits Method">{dialog.object}.saveListEdits()</link>
        <link link="ux component resetform Method">{dialog.object}.resetForm()</link>
        <link link="ux ssevents onDialogInitialize">onDialogInitialize</link>
        <link link="onrendercomplete">onRenderComplete</link>
    </links>
</page>