<page api="js">
    <shortlink>ux component clientsidevalidatefield Method</shortlink>
    <topic parent="{dialog.object}" parentType="object" elementName="clientSideValidateField Method">{dialog.object}.clientSideValidateField Method</topic>
    <description>Executes client-side validation for a control in the UX Component.</description>
    <prototypes>
        <prototype>{dialog.object}.clientSideValidateField(colName [, rowNum [, instNum]]);</prototype>
    </prototypes>
    <arguments>
        <argument>
            <name>colName</name>
            <type>String</type>
            <description>The name of the UX control to validate.</description>
        </argument>
        <argument optional="true">
            <name>rowNum</name>
            <type>Number</type>
            <description>Default = 1. The row number. In a UX Component, the row number is always '1'. Always pass in a value of 1 when calling this method in a UX.</description>
        </argument>
        <argument optional="true">
            <name>instNum</name>
            <type>Number</type>
            <description>Default = 0. The Repeating Section instance number for the control. This argument is required if the control is in a Repeating Section.</description>
        </argument>
    </arguments>
    <returns>
        <return>
            <name>result</name>
            <types>
                <type>string</type>
            </types>
            <description>
                <p>If there are no errors, returns a blank string. If there are errors, returns the error message.</p>
            </description>
        </return>
    </returns>
    <discussion>
        <p>The *[js:{dialog.object}.clientSideValidateField()]* method executes client-side validation rules for a control in the UX Component. This method can be used to evaluate the client-side rules on demand using JavaScript. For example:</p>
    </discussion>
    <sections>
        <section>
            <example code="js"><![CDATA[var controlsToValidate = ['TXT1','TXT2','TXT3'];
var flagHasError = false;
var result = '';

for(var i = 0; i < controlsToValidate.length; i++) { 
    result = {dialog.object}.clientSideValidateField(controlsToValidate[i]);
    if(result != '') { flagHasError = true; }
}

if(!flagHasError) {dialog.object}.panelSetActive('PANELCARD_2');]]></example>
        </section>
        <section>
            <description>
                <p>To learn more, watch the video below.</p>
            </description>
        </section>
        <section>
            <videos>
                <title>Executing Client-side Validation Rules Programmatically</title>
                <description>
                    <p>When you define validation rules for controls in a UX component, the rule are evaluated when the data is submitted. There are instances where you need to evaluate the validation rules for a set of controls on demand. For example, before navigating to a new Panel Card.</p>
                    <p>This video demonstrates how to use the {dialog.object}.clientSideValidateField() method to execute client-side validation rules for a set of text boxes when the user tries to navigate to a new Panel Card.</p>
                </description>
                <date>2015-12-30</date>
                <video>
                    <name>Watch Video</name>
                    <link>https://www.viddler.com/v/66dc87ff</link>
                </video>
                <resources>
                    <resource>
                        <link>http://www.ajaxvideotutorials.com/V12Videos/ux_component_programmatically_firing_client_side_validation_rules.zip</link>
                    </resource>
                </resources>
            </videos>
        </section>
    </sections>
    <terms>javascript functions</terms>
</page>