<page>
    <shortlink>ux component seterrors method</shortlink>
    <topic parent="{dialog.object}" parentType="object" elementName="setErrors Method">{dialog.object}.setErrors Method</topic>
    <description>
        <p>Display error messages for fields in the UX component.</p>
    </description>
    <prototypes>
        <prototype>{dialog.object}.setErrors(errorObj);</prototype>
    </prototypes>
    <arguments>
        <argument>
            <name>errorsObj</name>
            <types>
                <type>array of objects</type>
            </types>
            <description>An array of objects that define an error message for a control on the component. Each entry in the array must define the following properties:</description>
            <properties>
                <property>
                    <name>id</name>
                    <types>
                        <type>string</type>
                    </types>
                    <description>The id of the control that has the error.</description>
                </property>
                <property>
                    <name>message</name>
                    <types>
                        <type>string</type>
                    </types>
                    <description>The error message for the control.</description>
                </property>
            </properties>
        </argument>
    </arguments>
    <discussion>
        <p>The *[js:{dialog.object}.setErrors()]* method can be used with custom validation to report errors for controls in a UX Component. It is often used to add data validation and error report for Custom controls or user-defined Addin controls.</p>
        <p>The method takes an array that contains one or more error objects that define the ID of the control with the error and an error message. For example:</p>
    </discussion>
    <sections>
        <section>
            <example code="js"><![CDATA[var errors = [];

errors.push({id="{dialog.componentName}.V.R1.TXT1",message="Textbox cannot be blank"});
errors.push({id="{dialog.componentName}.V.R1.CHECKBOX1",message="No option selected."});

{dialog.object}.setErrors(errors);]]></example>
        </section>
        <section>
            <description>
                <p>To learn more about the *[js:{dialog.object}.setErrors()]* method is used with Custom controls, watch the video below.</p>
            </description>
            <videos>
                <title>Understanding CustomControls</title>
                <description>
                    <p>The UX Component allows you to define two types of CustomControls - data bound and non-data bound. In both cases the HTML and Javascript for the custom control can either be specified at design-time, or (much more powerfully) generated by Xbasic at run-time.</p>
                    <p>In this video we introduce the CustomControl found in the 'Other Controls' category of the UX Builder (as opposed to the 'CustomControl' found in the 'Data Controls' category).</p>
                    <p> After introducing the basic concepts of the CustomControl, the video shows how a UX form can be dynamically generated at runtime from a definition that could be read from a database.</p>
                </description>
                <date>2016-01-19</date>
                <video>
                    <name>Watch Video</name>
                    <link>https://www.viddler.com/v/62f25eb5</link>
                </video>
                <resources>
                    <resource>
                        <link>https://www.ajaxvideotutorials.com/V12Videos/dynamicForms.zip</link>
                    </resource>
                </resources>
            </videos>
        </section>
    </sections>
    <see>
        <ref link="howto create custom controls ux">How to Create Custom Controls</ref>
        <ref link="howto create addin controls">How to Create Addin Controls</ref>
    </see>
    <terms>javascript functions</terms>
</page>