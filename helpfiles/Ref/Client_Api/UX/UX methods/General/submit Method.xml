<page api="js">
    <shortlink>ux component submit Method</shortlink>
    <topic parent="{dialog.object}" parentType="object" elementName="submit Method">{dialog.object}.submit Method</topic>
    <description>Submits the UX to the server.</description>
    <prototype>{dialog.Object}.submit([submitType [,additionalData [,optionsObject]]])</prototype>
    <arguments>
        <argument optional="true">
            <name>submitType</name>
            <type>string</type>
            <description>Custom submit type. Lets you compare different submit values, if there are multiple buttons on a UX that use submit(). The submit type can be any desired value.</description>
        </argument>
        <argument optional="true">
            <name>additionalData</name>
            <type>string</type>
            <description>Additional data to be submitted in the form of a URL query string.</description>
        </argument>
        <argument optional="true">
            <name>optionsObject</name>
            <type>JSON object</type>
            <description>
                <p>A JSON Object with additional information. The following options can be specified:</p>
            </description>
            <properties>
                <property optional="true">
                    <name>flagSaveListData</name>
                    <type>boolean</type>
                    <description>A true/false value. If true, list data is submitted to the server.</description>
                </property>
                <property optional="true">
                    <name>deviceOfflineFunction</name>
                    <type>function</type>
                    <description>Function to call if the device is offline.</description>
                </property>
                <property optional="true">
                    <name>onComplete</name>
                    <type>function</type>
                    <description>Function to call if the callback completes successfully.</description>
                </property>
                <property optional="true">
                    <name>submitFormData</name>
                    <type>boolean</type>
                    <description>A true/false value. If true, form data will be submitted from the component. Set to false if you do not want to submit form data.</description>
                </property>
                <property optional="true">
                    <name>getLocationData</name>
                    <type>boolean</type>
                    <description>
                        <p>A true/false value. Indicates if the location (latitude and longitude) should be fetched from the browser and submitted to the server.</p>
                        <p>The *[xb:e]* object passed to server-side Xbasic events will contain the location in the following properties: *[xb:__locationFound]* - true/false, *[xb:__locationLatitude]* - the latitude value, and *[xb:__locationLongitude]* - the longitude value.</p>
                        <p>Not all browsers support fetching the location.</p>
                    </description>
                </property>
                <property optional="true">
                    <name>enableHighAccuracy</name>
                    <type>boolean</type>
                    <description>A true/false value. Indicates if high accuracy should be used when fetching the location. Using high accuracy will take longer and use more power.</description>
                </property>
                <property optional="true">
                    <name>timeout</name>
                    <type>numeric</type>
                    <description>Amount of time to wait in milliseconds to fetch the location.</description>
                </property>
                <property optional="true">
                    <name>maximumAge</name>
                    <type>numeric</type>
                    <description>Maximum time in milliseconds to accept a previously fetched location. A value of 0 means that a new location must be fetched.</description>
                </property>
                <property optional="true">
                    <name>ajaxCallbackTimeout</name>
                    <type>numeric</type>
                    <description>Maximum number of milliseconds to wait for a response from the server.</description>
                </property>
                <property optional="true">
                    <name>errorFunction</name>
                    <type>function</type>
                    <description>Function to call if an error occurs.</description>
                </property>
                <property optional="true">
                    <name>chunkedResponses</name>
                    <type>object</type>
                    <description>An object with the following properties:</description>
                    <properties>
                        <property>
                            <name>allow</name>
                            <type>boolean</type>
                            <description>A true/false value. If true, chunked responses will be used.</description>
                        </property>
                        <property>
                            <name>maxMessages</name>
                            <type>numeric</type>
                            <description>The maximum number of messages to listen for.</description>
                        </property>
                        <property>
                            <name>maxTime</name>
                            <type>numeric</type>
                            <description>The maximum number of seconds to listen for messages.</description>
                        </property>
                    </properties>
                </property>
            </properties>
        </argument>
    </arguments>
    <discussion>
        <p>The *[js:submit()]* method posts data from the UX component to the server via an ajax callback.</p>
        <p>
            <example code="js"><![CDATA[{dialog.Object}.submit();]]></example>
        </p>
        <p>You can optionally include a 'submitType'. If you have multiple buttons on the UX that call the .submit() method, by specifying the 'submitType' your code in the [dialogValidate] and [afterDialogValidate] event handlers could test the value of the submitType value.</p>
        <p>
            <example code="js"><![CDATA[{dialog.Object}.submit("save_customer");
{dialog.object}.submit("send_orders");]]></example>
        </p>
        <p>The submit type value is available in Xbasic server-side events for the UX component in the 'Request.Variables.__submitType' variable.</p>
        <p>You can also optionally specify additional data to be submitted in the form of a URL query string. For example:</p>
        <p>
            <example code="js"><![CDATA[var additionalData = "value1=alpha&value2=beta";
{dialog.object}.submit("save",additionalData);]]></example>
        </p>
        <p>The additional data is available in 'Request.Variables' variable in the Xbasic server-side events for the UX component.</p>
        <p>You can also pass additional options to the *[js:submit()]* method. For example:</p>
        <p>
            <example code="js"><![CDATA[var options = {getLocationData:true};
{dialog.object}.submit("","",options);
]]></example>
        </p>
        <p>The *[js:getLocationData]* option indicates that location information from the browser should be submitted as part of the callback.</p>
    </discussion>
    <links>
        <link link="ux%20events%20afterdialogvalidate">dialogValidate</link>
        <link link="ux%20events%20dialogvalidate">afterDialogValidate</link>
    </links>
    <see>
        <ref link="ux component methods">{dialog.object}</ref>
        <ref link="ux%20events%20afterdialogvalidate">dialogValidate</ref>
        <ref link="ux%20events%20dialogvalidate">afterDialogValidate</ref>
    </see>
    <terms>ux component,button,buttons,forms,query,submit,javascript functions</terms>
</page> 
