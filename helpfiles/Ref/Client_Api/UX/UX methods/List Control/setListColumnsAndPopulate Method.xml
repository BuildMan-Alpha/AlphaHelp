<page api="js">
    <shortlink>ux component setListColumnsAndPopulate Method</shortlink>
    <topic parent="{dialog.object}" parentType="object" elementName="setListColumnsAndPopulate Method">{dialog.object}.setListColumnsAndPopulate Method</topic>
    <description>Dynamically sets the columns in a List and populates the List.</description>
    <prototype>{dialog.object}.setListColumnsAndPopulate(listId,data,options);</prototype>
    <arguments>
        <argument>
            <name>listId</name>
            <description>The ID of the List Control.</description>
        </argument>
        <argument>
            <name>data</name>
            <description>A JSON object defining the data used to populate the List.</description>
        </argument>
        <argument>
            <name>options</name>
            <description>A JSON object with settings. Options can include:</description>
            <list>
                <item>
                    <name>columnCount</name>
                    <description>The number of columns to create. For example, in a set of data with 50 columns, you may only want to show the first 5 columns in the List control.</description>
                </item>
                <item>
                    <name>columns</name>
                    <description>An array listing the fields to use for the List columns. See example code below for using JSON syntax to customize columns and insert buttons.</description>
                </item>
                <item>
                    <name>returnExpression</name>
                    <description>A JavaScript expression that defines what value to return from the List control for the selected row. This expression must prefix column names with 'data'. Eg, *[js:'data.Firstname+" "+data.Lastname']*</description>
                </item>
                <item>
                    <name>showTitle</name>
                    <description>A *[js:true]* or *[js:false]* value. Defines whether or not column titles should be displayed.</description>
                </item>
                <item>
                    <name>style</name>
                    <type>string</type>
                    <description>Defines the type of List layout. Can be *[js:'columnar']* or *[js:'freeform']*.</description>
                </item>
                <item>
                    <name>template</name>
                    <description>The Client-side Template used to render the List Layout. Only used if the List Layout is freeform.</description>
                </item>
            </list>
        </argument>
    </arguments>
    <discussion>The *[js:{dialog.object}.setListColumnsAndPopulate]*  method dynamically sets the columns in a List control and populates the List with records defined in the *[js:data]* parameter. The columns are based on the columns in the first row of data.</discussion>
    <example code="js"><![CDATA[var data = [
    {
        "Firstname": "Kathy",
        "Lastname": "Morton",
        "City": "New York",
        "State": "NY"
    }
];
//populate the List with the first 3 columns in data
var ops = {columnCount: 3};
{dialog.object}.setListColumnsAndPopulate('list',data,ops);

//specify columns
var ops = {columns: ['Firstname','State']};
{dialog.object}.setListColumnsAndPopulate('list',data,ops);

//specify the List return value
var ops = {columns: ['Firstname','State'], returnExpression: 'data.Firstname'};
{dialog.object}.setListColumnsAndPopulate('list',data,ops);

//turn off column titles
var ops = {showTitle: false};
{dialog.object}.setListColumnsAndPopulate('list',data,ops);

//freeform layout
var ops = {style: 'freeform', template: '{Firstname} {Lastname}
{City}'};
{dialog.object}.setListColumnsAndPopulate('list',data,ops);

//advanced mode - control column widths, headings and insert buttons (b1 and b2 are buttons in the initial List layout)
var ops = {
    columns: [
            {type:'field',name: 'Firstname', heading: 'First NAME', width: 'flex(2)'},
            {type: 'button',name: 'b1'},
            {type:'field',name: 'Lastname', heading: 'LAST NAME', width: 'flex(1)'},
            {type: 'button',name: 'b2'},
            {type:'field',name: 'State', heading: 'State Name', width: 'flex(.5)'}
        ]
};
{dialog.object}.setListColumnsAndPopulate('list',data,ops);]]></example>
    <see>
        <ref link="Populate List Columns and Data">How to Dynamically Populate List Columns and Data</ref>
    </see>
    <terms>ux component,list control,sql database,javascript functions</terms>
</page>
