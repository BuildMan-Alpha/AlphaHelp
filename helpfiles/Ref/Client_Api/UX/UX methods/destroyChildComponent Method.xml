<page api="js">
    <shortlink>ux component destroyChildComponent Method</shortlink>
    <topic parent="{dialog.object}" parentType="object" elementName="destroyChildComponent Method">{dialog.object}.destroyChildComponent Method</topic>
    <description>Deletes a child UX component from memory.</description>
    <prototype>{dialog.object}.destroyChildComponent(ChildUXComponentAlias)</prototype>
    <arguments>
        <argument>
            <name>ChildUXComponentAlias</name>
            <type>string</type>
            <description>
                <p>The alias of the child component. You must explicitly set the alias of the component to use this function.</p>
            </description>
        </argument>
    </arguments>
    <discussion>
        <p>For use in large applications where you need to be careful about memory usage.</p>
        <p>If you have an application with multiple child UX components, either embedded in the layout or opened using Action Javascript, this method can be used to delete the UX from memory when it's no longer needed. UX components that are shown using an action such as [Open a UX component] are kept in-memory after they've been loaded so they loaded faster on subsequent calls to the action. *[js:{dialog.object}.destroyChildComponent()]* can be used to delete the child UX from memory if it's no longer needed. For example:</p>
        <p>
            <example code="js"><![CDATA[//destroy a child UX that was give the alias 'CHILD1' when it was originally opened
{dialog.object}.destroyChildComponent('CHILD1');]]></example>
        </p>
        <p>To use this method, the child UX component must have an explicit alias (set in the *[ui:UX alias]* property when configuring Action Javascript or *[ui:Component alias]* property for an embedded UX component object).</p>
    </discussion>
    <sections>
        <section>
            <title>Videos</title>
            <videos>
                <title>Destroy Child UX Component</title>
                <description>
                    <p>A common pattern when building large mobile applications is to break the app into multiple sub-component which are called from a master component.</p>
                    <p>Once the child component is no longer needed, it is useful to be able to delete the component from memory in order to conserve the limited memory available in the browser.</p>
                    <p>The {dialog.object}.destroyChildComponent() method can be used to delete child UX components from memory, as shown in this video.</p>
                </description>
                <date>2014</date>
                <video>
                    <name>Watch Video</name>
                    <link>https://www.viddler.com/v/9cf25517</link>
                </video>
                <resources>
                    <resource>
                        <link>https://www.ajaxvideotutorials.com/V12Videos/destroyChildComponent.zip</link>
                    </resource>
                </resources>
            </videos>
        </section>
    </sections>
    <see>
        <ref link="ux component methods">{dialog.object}</ref>
    </see>
    <links>
        <link link="open%20a%20ux%20component">Open a UX component</link>
    </links>
    <terms>ux component,javascript functions</terms>
</page>