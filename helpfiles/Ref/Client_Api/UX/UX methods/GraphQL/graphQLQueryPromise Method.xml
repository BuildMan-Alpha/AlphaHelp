<page api="js" build="6945">
    <shortlink>ux component graphQLQueryPromise method</shortlink>
    <topic parent="{dialog.object}" parentType="object" elementName="graphQLQueryPromise Method">{dialog.object}.graphQLQueryPromise Method</topic>
    <description>
        <p>Executes a GraphQL query and returns a promise.</p>
    </description>
    <prototypes>
        <prototype>var promise = {dialog.object}.graphQLQueryPromise(url, queryDefinition, variables, headers, queryParameters)</prototype>
    </prototypes>
    <arguments>
        <argument>
            <name>url</name>
            <type>string</type>
            <description>
                <p>The URL of the service (e.g. http://www.mygraphqlservice.com/northwind.a5svc)</p>
            </description>
        </argument>
        <argument>
            <name>queryDefinition</name>
            <type>string</type>
            <description>
                <p>The string that defines the query</p>
            </description>
        </argument>
        <argument>
            <name>variables</name>
            <type>object</type>
            <description>
                <p>An object that defines values for each of the query variables.</p>
                <p>
                    <example code="js"><![CDATA[var variables = {"customerId":"BOLID"};]]></example>
                </p>
            </description>
        </argument>
        <argument>
            <name>headers</name>
            <type>object array</type>
            <description>
                <p>An array of objects. Each object in the array has a *[js:name]* and *[js:value]* property. Used when the service requires authentication using an api key that must be passed in the header of the request.</p>
                <p>
                    <example code="js"><![CDATA[var headers = [
    {"name":"apikey","value":"XXXXXXXXXXXXXXXXXXXX"},
    {"name":"myHeader","value":"my header value"}
];]]></example>
                </p>
            </description>
        </argument>
        <argument>
            <name>queryParameters</name>
            <type>string</type>
            <description>
                <p>A string of *[js:name=value]* pairs. Used when the service requires authentication via an api key that must be passed as a query parameter.</p>
            </description>
        </argument>
    </arguments>
    <returns>
        <return>
            <name>promise</name>
            <type>Promise</type>
            <description>
                <p>Returns a JavaScript [Promise].</p>
            </description>
        </return>
    </returns>
    <discussion>
        <p></p>
    </discussion>
    <example code="js"><![CDATA[var url = 'http://www.mygraphqlservice.com/northwind.a5svc';
var query = `
{
    GetManyCustomers {
        records {
            CustomerID
            ContactName
            CompanyName
            City
            Country
        }
    }
}
`

{dialog.object}.graphQLQueryPromise(url,query,'','').then(data => { 
    var j = JSON.parse(data);
    var lObj = {dialog.object}.getControl('list1')
    lObj.populate(j.data.GetManyCustomers.records)
});]]></example>
    <note>
        <p>This example uses [Template literals].</p>
    </note>
    <links>
        <link href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises" target="_blank">Promise</link>
        <link href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals" target="_blank">Template literals</link>
    </links>
    <see>
        <ref link="graphql">Building a GraphQL Service to Expose Data in a SQL Database</ref>
        <ref href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals" target="_blank">JavaScript Template literals (Template strings)</ref>
        <ref href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises" target="_blank">JavaScript Using Promises</ref>
    </see>
</page>