<page api="js">
    <shortlink>ux component showWaitMessage Method</shortlink>
    <topic parent="{dialog.object}" parentType="object" elementName="showWaitMessage Method">{dialog.object}.showWaitMessage Method</topic>
    <description>Displays a wait message.</description>

    <prototype>{dialog.Object}.showWaitMessage(UXWaitMessageTarget [,optionsObject])</prototype>

    <arguments>
        <argument>
            <name>UXWaitMessageTarget</name>
            <description>The type of wait message to show. This can be set to:</description>
             <list>
                <item>
                    <name-title>Wait Message Target</name-title>
                    <description-title>Description</description-title>
                </item>
                <item>
                    <name>*[js:"page"]*</name>
                    <description>The entire screen is locked, and the message is centered on the screen.</description>
                </item>
                <item>
                    <name>*[js:"container:containerId"]*</name>
                    <description>The message is shown over the container with the id *[js:containerId]*.</description>
                </item>
                <item>
                    <name>*[js:"panel:panelId"]*</name>
                    <description>The message is shown over the Panel with the id *[js:panelId]*.</description>
                </item>
                <item>
                    <name>*[js:"element:elementId"]*</name>
                    <description>the message is shown over an element (e.g. div) with the id *[js:elementId]*.</description>
                </item>
            </list>
        </argument>
        <argument>
            <name>optionsObject</name>
            <description>An optional parameter that allows you to control the appearance of the wait window. The following options are available:</description>
            <properties>
                <property optional="true">
                    <name>icon</name>
                    <type>string</type>
                    <description>Defaults to the built-in wait image. A relative or absolute URL specifying the image to display in the wait message. Set to an empty string for no image.</description>
                </property>
                <property optional="true">
                    <name>lockClassName</name>
                    <type>string</type>
                    <description>Default = *[js:_a5LockScreenCSS]*. One or more class names to apply to the lock screen overlay. If blank, uses default value.</description>
                </property>
                <property optional="true">
                    <name>message</name>
                    <type>string</type>
                    <description>A message to display shown to the right of the *[js:icon]*. The message can contain HTML.</description>
                </property>
                <property optional="true">
                    <name>msgClassName</name>
                    <type>string</type>
                    <description>Default = *[js:_a5WaitMessageCSS]*. One or more class names to apply to the wait message. If blank, uses default value.</description>
                </property>
                <property optional="true">
                    <name>waitMessageAutoCloseDelay</name>
                    <type>number</type>
                    <description>Default = *[js:5000]*. Amount of time in milliseconds to wait before automatically closing the message.</description>
                </property>
                <property optional="true">
                    <name>useCSSAnimation</name>
                    <type>boolean</type>
                    <description>Default = *[js:false]*. Indicates whether or not a CSS animation should be used.</description>
                </property>
                <property optional="true">
                    <name>cssAnimationSettings</name>
                    <type>object</type>
                    <description>An object containing settings to customize the size, color, and duration of the CSS animation. The following options are available:</description>
                    <properties>
                        <property optional="true">
                            <name>autoColor</name>
                            <type>boolean</type>
                            <description>If *[js:true]*, automatically sets the stroke and shadow color. Colors are determined by the *[js:windowTheme]*.</description>
                        </property>
                        <property optional="true">
                            <name>windowTheme</name>
                            <type>string</type>
                            <description>
                                <p>Used to determine the stroke and shadow color when *[js:autoColor]* is *[js:true]*. Can be the following values:</p>
                                <p>
                                    <list>
                                        <item>
                                            <name-title>Value</name-title>
                                            <description-title>Description</description-title>
                                        </item>
                                        <item>
                                            <name>*[js:"iOS"]*</name>
                                            <description>Sets *[js:strokeColor]* to *[js:"#fff"]* and *[js:shadowColor]* to *[js:"#eee"]*.</description>
                                        </item>
                                        <item>
                                            <name>All other values</name>
                                            <description>Sets *[js:strokeColor]* to *[js:"#333"]* and *[js:shadowColor]* to *[js:"#aaa"]*.</description>
                                        </item>
                                    </list>
                                </p>
                            </description>
                        </property>
                        <property optional="true">
                            <name>strokeColor</name>
                            <type>string</type>
                            <description>Default = *[js:"#fff"]*. A CSS color value defining the stroke color. This property is ignored if *[js:autoColor]* is set to *[js:true]*.</description>
                        </property>
                        <property optional="true">
                            <name>shadowColor</name>
                            <type>string</type>
                            <description>Default = *[js:"#eee"]*. A CSS color value defining the shadow color. This property is ignored if *[js:autoColor]* is set to *[js:true]*.</description>
                        </property>
                        <property optional="true">
                            <name>strokeWidth</name>
                            <type>number</type>
                            <description>Default = *[js:6]*. The width of the stroke in pixels.</description>
                        </property>
                        <property optional="true">
                            <name>cycleTime</name>
                            <type>number</type>
                            <description>Default = *[js:1]*. The animation cycle time in seconds. A smaller value results in a faster animation. A larger value creates a slower animation.</description>
                        </property>
                        <property optional="true">
                            <name>size</name>
                            <type>number</type>
                            <description>Default = *[js:32]*. The size in pixels of the animation.</description>
                        </property>
                    </properties>
                </property>
            </properties>
        </argument>
    </arguments>
    <discussion>
        <p>Displays a 'wait...' message over the specified target. The specified target is also 'locked' so that the user cannot interact with controls (for example click a button) that are in specified target. This method is often used at the start of an Ajax callback. When the callback is complete, the .hideWaitMessage() method is called.</p>
        <p>You can have multiple wait messages displayed at the same time, each locking a different section of the screen.</p>
        <p>Two types of wait windows can be created. You can use an animated gif, or you can use CSS3 transformations in place of an animated gif.</p>
    </discussion>
    <example code="js"><![CDATA[//display a wait message over 'CONAINER_1' and also lock the contents of 'CONTAINER_1'
{dialog.object}.showWaitMessage('container:CONTAINER_1');

//add some custom text to the wait message
var wo = {};
wo.message = 'Saving...';
{dialog.object}.showWaitMessage('container:CONTAINER_1',wo);

//use a custom gif for the wait message
var wo = {};
wo.icon = 'images/mywaitgif.gif';
{dialog.object}.showWaitMessage('container:CONTAINER_1',wo);

//use css3 animations
var wo = {};
wo.useCSSAnimation = true;
wo.cssAnimationSettings = {};
wo.cssAnimationSettings.size = 16; //set the size of the animation object to 16x16 pixels
{dialog.object}.showWaitMessage('container:CONTAINER_1',wo);]]></example>
    <see>
        <ref link="display a 'wait...' message">Display a 'Wait...' message Action Javascript</ref>
        <ref link="ux component hideWaitMessage Method">{dialog.object}.hideWaitMessage()</ref>
    </see>
    <terms>ux component,message box,wait message, popup,javascript functions</terms>
</page> 