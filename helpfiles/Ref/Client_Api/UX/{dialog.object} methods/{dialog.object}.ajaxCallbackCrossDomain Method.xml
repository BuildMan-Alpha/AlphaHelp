<page api="js">
    <shortlink>ux component ajaxCallbackCrossDomain method</shortlink>
    <topic>{dialog.object}.ajaxCallbackCrossDomain Method</topic>
    <syntax>{dialog.object}.ajaxCallbackCrossDomain(url, successFunction [, useJquery [, callbackAttributeName]]);</syntax>
    <arguments>
        <argument>
            <name>url</name>
            <type>string</type>
            <description>The URL for the Ajax callback. The URL will typically include a query string with parameters.</description>
        </argument>
        <argument>
            <name>successFunction</name>
            <type>function</type>
            <description>The name of a JavaScript function to call when the Ajax callback completes. The callback takes a single argument, 'data', that contains the JSON returned by the Ajax callback.</description>
        </argument>
        <argument optional="true">
            <name>useJquery</name>
            <type>boolean</type>
            <description>Default = false. true/false. Specifies if the callback should be made using jQuery. If true, you must load the jQuery core library. If false, jQuery is not required.</description>
        </argument>
        <argument optional="true">
            <name>callbackAttributeName</name>
            <type>string</type>
            <description>Default = 'callback'. (Advanced) Specify the name of the attribute used to send the successFunction to the Ajax callback. By convention, this is typically 'callback' or 'jsonp', though the web service you are calling may use a different name. This parameter is not used if *[js:useJquery]* is true.</description>
        </argument>
    </arguments>
    <description>Performs a cross-domain Ajax callback.</description>
    <example code="js"><![CDATA[var url = 'http://itunes.apple.com/lookup?isbn=9780316069359';
var mySuccessFunction = function (data) {
    alert(JSON.stringify(data,'','\t'));
}
var callbackParameterName = 'callback';

{dialog.object}.ajaxCallbackCrossDomain(url, mySuccessFunction,false,callbackParameterName);]]></example>
    <note>If *[js:useJquery]* is true, specifying the *[js:callbackAttributeName]* is meaningless.</note>
    <see>
        <ref link="Ajax Callback - Cross Domain">Ajax Callback - Cross Domain Action Javascript</ref>
    </see>
    <terms>javascript functions</terms>
</page>