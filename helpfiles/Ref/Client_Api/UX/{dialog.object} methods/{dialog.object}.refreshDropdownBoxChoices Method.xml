<page api="js">
   <shortlink>ux component refreshDropdownBoxChoices Method</shortlink>
   <topic>{dialog.object}.refreshDropdownBoxChoices Method</topic>
 
   <description>Does an Ajax callback to recompute the choices in a DropdownBox and repopulates the choices in the DropbownBox for the specified controlName. </description>
  <prototypes>
    <prototype>{dialog.Object}.refreshDropdownBoxChoices(controlName [,dynamicFilter [,dynamicFilterArguments [,selectedValue [,currentRowOnly]]]]);</prototype>
    <prototype>{dialog.Object}.refreshDropdownBoxChoices(controls);</prototype>
  </prototypes>
   <arguments>
    <argument>
      <name>controlName</name>
      <type>String</type>
      <description>The name of the dropdownBox control.</description>
    </argument>
    <argument>
      <name>controls</name>
      <types>
        <type>String</type>
        <type>JSON String</type>
      </types>
      <description>A comma-delimited list of controls to refresh or a JSON String specifying the controls to refresh as well as additional properties. The JSON string can specify the following options for each control:</description>
      <properties>
        <property>
          <name>controlName</name>
          <type>String</type>
          <description>The name of the dropdownBox control.</description>
        </property>
        <property optional="true">
          <name>dynamicFilter</name>
          <type>String</type>
          <description>A dynamic filter to apply when recomputing the choices in the DropdownBox.</description>
        </property>
        <property optional="true">
          <name>dynamicFilterArguments</name>
          <type>String</type>
          <description>If a dynamic filter is specified, and the filter uses arguments, this parameter contains the argument values. See *[ui:dynamicFilterArguments]* below for a description of the arguments format to use.</description>
        </property>
        <property optional="true">
          <name>selectedValue</name>
          <description>The value in the DropdownBox to select after it has been repopulated.</description>
        </property>
        <property optional="true">
          <name>currentRowOnly</name>
          <type>Boolean</type>
          <description>Default = true. If the control is in a Repeating Section, the choices in all rows in the Repeating Section are updated. If this parameter is *[js:false]*, then only the choices in the Dropbownbox in the current row are updated.</description>
        </property>
      </properties>
    </argument>
     <argument optional="true">
         <name>dynamicFilter</name>
         <type>String</type>
         <description>A dynamic filter to apply when recomputing the choices in the DropdownBox.</description>
     </argument>
     
      <argument optional="true">
         <name>dynamicFilterArguments</name>
         <type>String</type>
         <description>If a dynamic filter is specified, and the filter uses arguments, this parameter contains the argument values. The format for this argument is a CR-LF delimited string in this format: *[js:argumentValue|||dataType|argumentName]*</description>
     </argument>
      <argument optional="true">
         <name>selectedValue</name>
         <description>The value in the DropdownBox to select after it has been repopulated.</description>
     </argument>
      <argument optional="true">
         <name>currentRowOnly</name>
         <type>Boolean</type>
         <description>Default = true. If the control is in a Repeating Section, the choices in all rows in the Repeating Section are updated. If this parameter is *[js:false]*, then only the choices in the Dropbownbox in the current row are updated.</description>
     </argument>
   </arguments>
 
 
  <sections>
<section>
<description>Applies only if the choices in the Dropdownbox are based on a SQL or .dbf query.</description>
</section>
    <section>
      <title>Example</title>
      <description>Refresh the choices in the DropdownBox for the 'products' control.</description>
      <example code="js"><![CDATA[{dialog.object}.refreshDropdownBoxChoices('PRODUCTS');]]></example> 
    </section>
    
     <section>    
      <description>Refresh the choices and set the select to 'PRODUCT_X'</description>
      <example code="js"><![CDATA[{dialog.object}.refreshDropdownBoxChoices('PRODUCTS','','','PRODUCT_X'); ]]></example> 
    </section>
    
    <section>
      <description>Refresh the choices and filter choices to only show items where the 'type' field is 'a' and 'code' field is 'x'</description>
      <example code="js"><![CDATA[var controlID = 'PRODUCTS';
var filter = 'type=:whatType and code = :whatCode';
var arguments = 'a|||c|whatType\nx|||c|whatCode';

{dialog.object}.refreshDropdownBoxChoices(controlID, filter, arguments);]]></example> 
    </section>
    
    <section>
      <description>Note that in the above example the dynamicFilterArguments is a crlf delimited string (\n is the CRLF code in javascript) of the form</description>
      <example code="js"><![CDATA[value|||datatype|argumentname]]></example> 
    </section>
    
    <section>
      <title>Refreshing Multiple DropdownBoxes in a Single Callback</title>
      <description>
        <p>If you want to refresh multiple Dropdownbox controls, it is much more efficient to make a single Ajax callback that separate callbacks for each Dropdownbox. You can specify a comma delimited list of Drodownbox controls to refresh. For example:</p>
      </description>
      <example code="js"><![CDATA[//Refreshing the 'CITY' and 'COUNTRY' Dropdownboxes in a single 
//callback (specify a comma delimited list of controls)

{dialog.object}.refreshDropdownBoxChoices('CITY,COUNTRY');
]]></example>
    </section>
    <section>
    <description>
      <p>Specifying the list of dropdownBox controls precludes the option of specifying any of the optional parameters. If optional parameters are needed, then a JSON string can be used to specify the controls to refresh.</p>
      <p>The JSON string can be used to specify any optional parameters available for a single control refresh: *[js:controlName]*, *[js:dynamicFilter]*, *[js:dynamicFilterArguments]*, *[js:selectedValue]*, *[js:currentRSRowOnly]*. In the example below, a JSON string is created so a *[js:dynamicFilter]* can be added for each dropdownBox control:</p>
      </description>
      <example code="js"><![CDATA[//Refresh 'CITY' and 'COUNTRY' using JSON string syntax
var arr = [];
arr.push({controlName: "country", dynamicFilter: "country = 'usa' or country = 'uk'"});
arr.push({controlName: "city", dynamicFilter: "country = 'usa' or country = 'uk'"});

var json = JSON.stringify(arr);

{dialog.Object}.refreshDropdownBoxChoices(json);]]></example>
    </section>
  </sections>
   <see>
      <ref link="Dialog Component">{dialog.object}</ref>
   </see>
<terms>ux component,ajax,ajax callback,arguments,contains,control,current row,defaults,field,filter,forms,item,refresh,repeating section,repopulate,sql,string</terms>



</page> 
