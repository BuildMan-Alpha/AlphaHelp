<page>
    <topic>{dialog.object}.editorFromValue</topic>
    <description>Displays an EditorSet showing the specified Editor in the EditorSet to edit an arbitrary value. Contrast with the .editorFromControl() method which is used to edit a value in a UX control.</description>
    <syntax>{dialog.object}.editorFromValue(UXEditorSet,valueToEdit,settingsObject);</syntax>
    <arguments>
        <argument>
            <name>UXEditorSet</name>
            <description>the name of the EditorSet you want to open</description>
        </argument>
        <argument>
            <name>valueToEdit</name>
            <description>the value that you want to edit in the Editor</description>
        </argument>
        <argument>
            <name>settingsObject</name>
            <description>an object that must have a *[js:commit]* property which contains a function to call to 'commit' the value when the EditorSet is committed. The 'commit' function gets passed 'value' (the edited value) and 'settings' (settings.state.value is the initial value passed to the editor.) See example below.</description>
        </argument>
    </arguments>
    <discussion>Typically used in mobile applications where you want to define special editors (that display in a pop-up window or Panel) to edit some value.</discussion>
    <example><![CDATA[//Edit some arbitrary value
//first call some function you have defined to get the value you want to edit
var valueToEdit = getValueToEdit();

//next, define a settings object that has a 'commit' property to define the commit function
var settings = { 
	commit = function(value,settings) { 
		//add code here to save the edited value (passed in as 'value')
	}
}

//now open the editor
{dialog.object}.editorFromValue('EDITORSET_1','EDITOR_1',valueToEdit,settings);]]></example>
    <see>
        <ref link="Dialog Component">{dialog.object}</ref>
    </see>
    <terms>ux component,editors,editor sets,formview control,mobile forms</terms>
</page>