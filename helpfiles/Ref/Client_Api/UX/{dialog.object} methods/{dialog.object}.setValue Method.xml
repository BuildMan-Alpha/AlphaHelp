<page api="js">
    <shortlink>ux component setValue Method</shortlink>
    <topic>{dialog.object}.setValue Method</topic>
    <description>Set the value of a control in the UX Component.</description>
    <prototype>{dialog.Object}.setValue(name, value [, honorChangeEvent])</prototype>
    <arguments>
        <argument>
            <name>name</name>
            <types>
                <type>string</type>
            </types>
            <description>The UX Control ID. For multi-value controls, a '[]' must be included after the control ID. For example, *[js:'CHECKBOX_1[]']*</description>
        </argument>
        <argument>
            <name>value</name>
            <types>
                <type>A</type>
                <type>Array</type>
            </types>
            <description>The value to set in the control. Depending on the control, this may be a single value or an array.</description>
        </argument>
        <argument optional="true">
            <name>honorChangeEvent</name>
            <type>boolean</type>
            <description>Default = *[js:true]*. Causes the onChange event for the control to fire when the value is set. This includes watch events for client-side expressions (show/hide, enable/disable, calculated fields, etc) that reference the control as well as flags the field as dirty in the UX Component. If you don't want client-side events to be triggered, set the *[js:honorChangeEvent]* argument to *[js:false]*.</description>
        </argument>
    </arguments>
    <sections>
        <section>
            <title>Discussion</title>
            <description>
                <p>The *[js:setValue()]* method can be used to set the value of a control in a UX Component. </p>
            </description>
            <important>Unlike standard Javascript techniques to set the value of a control, the .setValue() method sets the control's state in the UX Object to be dirty (in the same way that the control becomes dirty if the user types a value into the control).</important>
        </section>
        <section>
            <title>Example</title>
            <description>Set value in 'LASTNAME' field.</description>
            <example>
                <![CDATA[{dialog.object}.setValue('LASTNAME','Smith');
 ]]>
            </example>
        </section>
        <section>
            <title>Repeating Sections</title>
            <description>
                <p>If the field you want to set is in a Repeating Section, use 'name:rownumber' for the field name, otherwise the row with focus will be updated.</p>
                <p>This example sets the value in 'LASTNAME' field in the 3rd row of a Repeating Section.</p>
            </description>
            <example>
                <![CDATA[{dialog.object}.setValue('LASTNAME:3','Smith'); ]]>
            </example>
        </section>
        <section>
            <title>Multi-value Controls</title>
            <description>
                <p>Checkbox and Multi-value Dropdownbox Controls that can have more than one value are set using array syntax. For example, assume that 'FAVORITECOLOR' is a checkbox control that can have multiple selections and you would like to set the value to 'alpha', 'beta', and 'gamma'. The example below will set the value:</p>
            </description>
            <example><![CDATA[{dialog.Object}.setValue('FAVAORITECOLOR[]',['alpha','beta','gamma']);]]></example>
        </section>
        <section>
            <description>Notice that the fieldname has a trailing [] - to indicate that it is an array of values, and the values you want to set are passed in in the form of a Javascript array.</description>
        </section>
    </sections>
    <see>
        <ref link="ux component methods">{dialog.object}</ref>
    </see>
    <terms>ux component,array,checkbox,checkbox control,control,defaults,dropdown,dropdown control,events,field,forms,javascript,object,users,javascript functions</terms>
</page> 

