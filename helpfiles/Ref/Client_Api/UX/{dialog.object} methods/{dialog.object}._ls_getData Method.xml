<page api="js">
    <shortlink>ux component _ls_getData method</shortlink>
    <topic>{dialog.object}._ls_getData Method</topic>
    <syntax>{dialog.object}._ls_getData([flag]);</syntax>
    <arguments>
        <argument optional="true">
            <name>flag</name>
            <type>string</type>
            <description>Specify what information should be retrieved from Local Storage. The flag can be one of the following values:</description>
            <list>
                <item>
                    <name-title>Flag</name-title>
                    <description-title>Meaning</description-title>
                </item>
                <item>
                    <name>a</name>
                    <description>All keys in Local Storage</description>
                </item>
                <item>
                    <name>aa</name>
                    <description>All keys created by UX components. Keys that are added to Local Storage all have 'ALPHA_' as a prefix. Only keys that have this prefix are returned.</description>
                </item>
                <item>
                    <name>t</name>
                    <description>All keys for *[this]* UX component. These keys all start with 'ALPHA_' followed by the namespace for the component (e.g. ALPHA_NS1). NOTE: The namespace for the component is specified in the UX component properties - Local Storage section.</description>
                </item>
                <item>
                    <name>o</name>
                    <description>All *[other]* keys  (i.e.excluding keys for this UX component). (Same as using the 'a' flag, then removing keys returned for the 't' flag).</description>
                </item>
                <item>
                    <name>oa</name>
                    <description>All UX component keys, but excluding keys for this component. (Same as using the 'aa' flag, then removing keys returned for the 't' flag).</description>
                </item>
                <item>
                    <name>v:t</name>
                    <description>Key used to persist variables for *[this]* UX component. NOTE: The UX component allows you to specify that variables in a component should be persisted to Local Storage (See Local Storage section in UX properties).</description>
                </item>
                <item>
                    <name>v:a</name>
                    <description>All UX component keys that store persisted variables (for any UX component, not just this component).</description>
                </item>
                <item>
                    <name>v:o</name>
                    <description>All UX components keys that store persisted variables, excluding *[this]* UX component (Same as using 'va' and then removing 'vt').</description>
                </item>
                <item>
                    <name>lists:t</name>
                    <description>All of the List components in this component that are persisted to Local Storage. NOTE: Not every List in a UX component is persisted to Local Storage. Each List in a UX has its own setting (defined in the List Builder) to control whether it is persisted.</description>
                </item>
                <item>
                    <name>lists:a</name>
                    <description>All of the List components (from any UX component) that are persisted to Local Storage.</description>
                </item>
                <item>
                    <name>lists:o</name>
                    <description>All of the List components, excluding the Lists in *[this]* component. (Same as using 'lists:a' and then removing 'lists:t')</description>
                </item>
            </list>
        </argument>
    </arguments>
    <description>Returns an object with information about keys stored in Local Storage.</description>
    <discussion>
        <p>The *[js:{dialog.object}._ls_getData]* method returns a JSON object containing information about keys stored in Local Storage. The data retrieved can be filtered by specifying a *[js:flag]* that defines the key to look up.</p>
        <p>The object returned by this function contains the following properties:</p>
    </discussion>
    <sections>
        <section>
            <list>
                <item>
                    <name-title>Property</name-title>
                    <description-title>Description</description-title>
                </item>
                <item>
                    <name>data</name>
                    <description>An array with information about each key found. The array has an object for each key found. The object has a key and size property indicating the key name of the item and the size in bytes of the item.</description>
                </item>
                <item>
                    <name>size</name>
                    <description>The total size in bytes of all keys found.</description>
                </item>
                <item>
                    <name>keyCount</name>
                    <description>The number of keys that were found.</description>
                </item>
            </list>
        </section>
        <section>
            <description>Example:</description>
            <example code="js"><![CDATA[//pass in the 'a' flag to get info on All keys
var obj = {dialog.object}._ls_getData('a')
console.log('Number of keys: ' + obj.keyCount);
console.log('Number of bytes: ' + obj.size);
var data = JSON.stringify(obj.data);
console.log('Data: ' + data);]]></example>
        </section>
        <section>
            <description>
                <p>Once you have retried the array of information using the {dialog.object}._ls_getData() method, you might want to delete the keys listed in the array. You can pass in the object returned by the {dialog.object}._ls_getData() method to the [{dialog.object}._ls_deleteKeys()] method.</p>
                <p>For example:</p>
            </description>
            <example code="js"><![CDATA[//delete all keys in local storage for other UX components
var obj = {dialog.object}._ls_getData('o');
{dialog.object}._ls_deleteKeys(obj);]]></example>
        </section>
    </sections>
    <links>
        <link link="ux component _ls_deleteKeys method">{dialog.object}._ls_deleteKeys()</link>
    </links>
    <see>
        <ref link="buildingdisconnectedapplications">List Control Overview</ref>
        <ref link="ux component _ls_deleteKeys method">{dialog.object}._ls_deleteKeys()</ref>
    </see>
</page>