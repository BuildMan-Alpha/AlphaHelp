<page api="js">
    <shortlink>ux component ajaxCallback Method</shortlink>
    <topic>{dialog.object}.ajaxCallback Method</topic>
    <description>Does an Ajax callback to a server. </description>
    <syntax>{dialog.object}.ajaxCallback(part,rowNum,XbasicFunction [,callbackURL [,additionalData [, options]]]);</syntax>
    <arguments>
        <argument>
            <name>part</name>
            <types>
                <type>string</type>
            </types>
            <description>In a grid component, part indicates the Grid part (Search, Grid, or Detail View) from which data should be submitted. In a UX Component, this parameter is not used and should be an empty string.</description>
        </argument>
        <argument>
            <name>row</name>
            <types>
                <type>string</type>
            </types>
            <description>In a grid component, row indicates the Grid row from which data should be submitted. In a UX Component, this parameter is not used and should be an empty string.</description>
        </argument>
        <argument>
            <name>XbasicFunction</name>
            <types>
                <type>string</type>
            </types>
            <description>The name of the Xbasic function you want to call on the server.</description>
        </argument>
        <argument optional="true">
        <name>callbackURL</name>
        <types>
            <type>string</type>
        </types>
        <description>Default = "". This parameter is almost always set to a blank string. It can be used to specify the URL you want to call to handle the callback. For example, you could call a .php, or .asp page to handle the callback. If this value is not blank then the setting for XbasicFunction is ignored.</description>
        </argument>
        <argument optional="true">
            <name>additionalData</name>
            <types>
                <type>string</type>
            </types>
            <description>Default = "". Any additional data you want to submit. The data in the controls on the UX Component is automatically submitted. This can be used to submit additional data. Specify a string of name/value pairs. e.g. *[js:'data1=value1&amp;data2=value2']*</description>
        </argument>
        <argument optional="true">
            <name>options</name>
            <types>
                <type>object</type>
            </types>
            <description>An object with one or more additional options. Available options include:</description>
            <properties>
                <property>
                    <name>ajaxCallbackTimeout</name>
                    <types>
                        <type>number</type>
                    </types>
                    <description>The length of time in milliseconds to wait until the callback times out.</description>
                </property>
                <property>
                    <name>onComplete</name>
                    <types>
                        <type>function</type>
                    </types>
                    <description>A function that will be called when the operation completes.</description>
                </property>
                <property>
                    <name>errorFunction</name>
                    <types>
                        <type>function</type>
                    </types>
                    <description>A function that will be called if an error occurs.</description>
                </property>
                <property>
                    <name>deviceOfflineFunction</name>
                    <types>
                        <type>function</type>
                    </types>
                    <description>A funciton that will be called if the device is offline and the callback cannot be performed.</description>
                </property>
            </properties>
        </argument>
    </arguments>
    <example><![CDATA[{dialog.object}.ajaxCallback('','','myAjaxCallback1','','data1=value1&data2=value2');]]></example>

    <sections>
        <section>
        <description>Data from the UX Component is submitted to the server. It is recommended that you use Action Javascript to write the code for you. This can be done by creating an *[ui:Ajax Callback Action]* either as a Javascript Action or as Action Javascript for a control's event.</description> 
        <note>The method has several blank arguments in order to keep the method prototype the same as for the Grid component.</note>
        </section>
    </sections>


    <see>
        <ref link="grid component ajaxcallback method">{grid.object}.ajaxCallback Method</ref>
    </see>


    <terms>ux component,ajax,ajax callback,function,Xbasic,javascript functions</terms>

</page> 
