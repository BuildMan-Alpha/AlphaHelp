<page api="js">
    <shortlink>ux component setFocus Method</shortlink>
    <topic>{dialog.object}.setFocus Method</topic>
    <description>Sets focus to a specified control on the dialog.</description>
    <prototypes>
        <prototype>{dialog.object}.setFocus(controlName);</prototype>
        <prototype>{dialog.object}.setFocus(controlName, repeatingSectionRowNumber);</prototype>
        <prototype></prototype>
    </prototypes>
    <arguments>
        <argument>
            <name>controlName</name>
            <type>String</type>
            <description>The control to set focus on.</description>
        </argument>
        <argument>
            <name>repeatingSectionRowNumber</name>
            <type>Number</type>
            <description>Logical row number, must be specified if using a repeating section control.</description>
        </argument>
    </arguments>
    <sections>
        <section>
            <description>If the control is inside a tab or accordion, gives focus to the appropriate tab/accordion pane. If the control is in a Repeating Section, you must also specify the logical row number.</description>
        </section>
        <section>
            <title>Example</title>
            <example code="js"><![CDATA[
// set focus to the LASTNAME control
{dialog.object}.setFocus('LASTNAME');

// set focus to the QUANTITY control in the 4th row of the repeating section:
{dialog.object}.setFocus('QUANTITY',4);]]></example>
        </section>
        <section>
            <title>Javascript Controls</title>
            <description>
                <p>The setFocus() Method works for Javascript controls (such as the List control) as well as HTML controls (such as a checkbox, textbox, etc). The motivation for adding support for Javascript controls to the .setFocus() method was to enable the following use case:</p>
                <p>Assume you have a UX component with a List control on one Panel and some other controls on another Panel. The second Panel has a button that returns focus to the first Panel. However, when focus returns to the first Panel, pressing up and down keys (when running on a desktop browser) did not navigate in the List (even though visually, the List appeared to have focus). By using the .setFocus() method in the event handler for the button that returns focus to the first Panel, you can solve this problem.</p>
            </description>
        </section>
    </sections>
    <see>
        <ref link="Dialog Component">{dialog.object}</ref>
    </see>
    <terms>ux component,control,logical,repeating section,set</terms>
</page> 