<page api="js">
    <shortlink>ux component refreshClientSideComputations Method</shortlink>
    <topic parent="{dialog.object}" parentType="object" elementName="refreshClientSideComputations Method">{dialog.object}.refreshClientSideComputations Method</topic>

    <description>Force all client-side computations (calculated fields, show/hide expression, enable expression, etc) to be recomputed. </description>
    
    <prototype>{dialog.Object}.refreshClientSideComputations([flagSynchronous]);</prototype>
    <arguments>
        <argument>
            <name>flagSynchronous</name>
            <description>An optional true/false value indicating whether the refresh should be synchronous or asynchronous. Default value is *[js:false]*. See explanation below, [Synchronous and Asynchronous Flag].</description>
        </argument>
    </arguments>
    
    <sections>
        <section>
            <title>Discussion</title>
            <description>
                <p>Client-side calculations are also known as 'watch events'. In effect, this method forces all watch events to fire. Generally, this should not be necessary as the Dialog will automatically be recalculated when necessary. However, there may be situations where a watch event would not normally fire, but you want to force it to fire.</p>
                <p>For example, say you have a watch event that is watching the value in a textbox control. The watch event will fire when the textbox control is blurred (i.e. loses focus). Suppose you want the event to fire after every keystroke, rather than having to wait until the control is blurred. You could use this method on the control's onKeyUp event to force the watch events to fire.</p>
            </description>
        </section>
        <section>
            <example><![CDATA[{dialog.Object}.refreshClientSideComputations();]]></example>
        </section>
        <section>
            <title>Synchronous and Asynchronous Flag</title>
            <description>By default, this method executes asynchronously, and the refresh is delayed for 300ms. The reason for this behavior is to prevent multiple calls to this method within a very short time, which can degrade performance of a UX component (especially in the case where the UX has a lot of watch expressions or the UX is running on a mobile device - which will have a relatively slow processor compared with a desktop machine). If multiple calls to the method are made within a 300ms window, only the last call is executed - unless the calls are made with the *[js:flagSynchronous]* flag set to *[js:true]*.</description>
        </section>
    </sections>
    <see>
        <ref link="ux component methods">{dialog.object}</ref>
    </see>

    <links>
        <link href="#section1_Synchronous and Asynchronous Flag">Synchronous and Asynchronous Flag</link>
    </links>
    <terms>ux component,control,events,show/hide,textbox,textbox control,javascript functions</terms>


</page> 
