<page api="js">
    <shortlink>ux component getControl Method</shortlink>
    <topic>{dialog.object}.getControl Method</topic>
    <description>Get a pointer to a control to call methods of an object, or set properties of an object. </description>
    <prototype>{dialog.Object}.getControl(variableName);</prototype>
    <arguments>
        <argument>
            <name>variableName</name>
            <description>The name of the control in the UX Component</description>  
        </argument>
    </arguments> 
    <sections>
        <section>
            <title>Discussion</title>
            <description>Get a pointer to a control, such as a slider, date picker, map, etc. so that you can call methods of the object, or set properties of the object. </description> 
            <note>Only controls that are implemented as Javascript objects are returned.</note>
        </section>
        <section>
            <description>For example, a slider control is implemented as a Javascript object. A standard HTML text box control, on the other hand is not implemented as a Javascript object -- it is just a standard HTML <![CDATA[<input>]]> control. If you call the .getControl() method on a textbox control, the method will return false. However, if you set certain properties on the textbox control (such as watermark, client-side formatting, mask etc) then a special 'helper' object is created for the textbox control and then the getControl() method will return a pointer to this helper object.</description>
        </section>
        <section>
            <description>
                <p>The {dialog.object}.getControl() method can used to get a pointer to a button object. Once you have a pointer to the object, you can call the .setDisabled() method.</p>
                <p>For example:</p>
            </description>
            <example><![CDATA[var bObj = {dialog.object}.getControl('BUTTON_1');
//set the button disabled
bObj.setDisabled(true);
//now enable the button
bObj.setDiabled(false);
]]></example>
            <note>As a result of this change, if you have a client-side enable expression for a button in a Repeating Section, you will need to edit the enable expression and resave it in order to re-generate the Javascript code.</note>
        </section>
        <section>
            <title>Calling setDisabled on a Button in a Repeating Section</title>
            <description>
                <p>If you have a button in a Repeating Section, the .getControl() method will point to ALL of button instances (i.e. the button in row1, row2, etc.). If you then call the .setDisabled() method, you will be set the state on the button in each row.</p>
                <p>If you want to call the .setDisabled() method for a specific button instance (say the button in row 3), then you can pass in an optional parameter to the .setDisabled() method. For example:</p>
            </description>
            <example><![CDATA[//get the instance number for row 3:
var row = {dialog.object}._repeatingSectionLogicalToPhysicalRow('SECTION_1',3);

//get a pointer the button element in row 3:
var eles = ${dialog.object}.getPointer('BUTTON_2_A5INSTANCE'+row);

//pass in eles as an optional argument to the .setDisabled() method
{dialog.object}.getControl('BUTTON_2').setDisabled(true,eles);
]]></example>
        </section>
    </sections>
    <see>
        <ref link="Dialog Component">{dialog.object}</ref>
    </see>
    <terms>ux component,control,pointer,set,set properties,javascript functions</terms>
</page> 
