<page api="" build="">
    <shortlink>ux component computesearchfrommetadataandfilterlist method</shortlink>
    <topic>{dialog.object}.computeSearchFromMetaDataAndFilterList Method</topic>
    <description>Performs a server-side query to filter/sort the data in a List based on a SQL data source.</description>
    <prototypes>
        <prototype>{dialog.object}.computeSearchFromMetaDataAndFilterList(UXListName, optionsJSON, searchDataJSON);</prototype>
    </prototypes>
    <arguments>
        <argument>
            <name>UXListName</name>
            <type>string</type>
            <description>The name of the List to search/sort.</description>
        </argument>
        <argument>
            <name>optionsJSON</name>
            <type>string</type>
            <description>A JSON object that contains the following search options:</description>
            <properties>
                <property optional="true">
                    <name>combineMultipleConditionsWith</name>
                    <type>string</type>
                    <description>If multiple search fields are specified should the conditions be combined with 'AND' or 'OR'. Defaults to 'AND'.</description>
                </property>
                <property optional="true">
                    <name>debugging</name>
                    <type>boolean</type>
                    <description>Specifies whether or not debugging information be shown. Defaults to false.</description>
                </property>
                <property optional="true">
                    <name>div</name>
                    <type>string</type>
                    <description>If *[js:optionsJSON.debugging]* is true, this property defines the name of the PLACEHOLDER control where the debugging information should be shown.</description>
                </property>
            </properties>
        </argument>
        <argument>
            <name>searchDataJSON</name>
            <type>string</type>
            <description>A JSON object that defines the search definition. The following parameters are available:</description>
            <properties>
                <property>
                    <name>searchField</name>
                    <type>string</type>
                    <description>Name of field in SQL database to search on. Required</description>
                </property>
                <property optional="true">
                    <name>searchFieldType</name>
                    <type>string</type>
                    <description>The data type of field. Defaults to 'Character'</description>
                </property>
                <property>
                    <name>searchControlValue</name>
                    <type>A</type>
                    <description>The value to search for. Required</description>
                </property>
                <property>
                    <name>searchControlValueEnd</name>
                    <type>A</type>
                    <description>The end of the range. Only required if *[js:rangeSearch]* is true. The type is the same type as the *[js:searchControlValue]*.</description>
                </property>
                <property optional="true">
                    <name>rangeSearch</name>
                    <type>boolean</type>
                    <description>Defaults to false. specify if the search is a range search. If true 'searchControlValue' is the start of the range and 'searchControlValueEnd' is the end of the range.</description>
                </property>
                <property optional="true">
                    <name>searchOption</name>
                    <type>number</type>
                    <description>
                        <p>The type of search - defaults to 2 'Is Contained In'.</p>
                        <p>
                            <list>
                                <item>
                                    <name-title>searchOption</name-title>
                                    <description-title>Description</description-title>
                                </item>
                                <item>
                                    <name>1</name>
                                    <description>'Exact Match' (may or may not be case sensitive - depends on the database)</description>
                                </item>
                                <item>
                                    <name>11</name>
                                    <description>Case-insensitive 'Exact Match' (if underlying database is case-sensitive.)</description>
                                </item>
                                <item>
                                    <name>2</name>
                                    <description>'Is Contained In'</description>
                                </item>
                                <item>
                                    <name>12</name>
                                    <description>Case-insensitive 'Is Contained In' (if underlying database is case-sensitive.)</description>
                                </item>
                                <item>
                                    <name>3</name>
                                    <description>'Starts with'</description>
                                </item>
                                <item>
                                    <name>13</name>
                                    <description>Case-insensitive 'Starts with' (if underlying database is case-sensitive.)</description>
                                </item>
                                <item>
                                    <name>4</name>
                                    <description>'Wildcard' - user must explicitly enter wildcard characters '*', '%' or '?'. If QBE syntax is turned on, multiple wildcard criteria can be used, delimited with either a comma or &amp;&amp; - use &amp;&amp; to combine criteria with an AND clause. You can use negative values (e.g. -1,-2,-3 or -4) to invert the search result (e.g. 'not equals').</description>
                                </item>
                                <item>
                                    <name>14</name>
                                    <description>Case-insensitive 'Wildcard' (if underlying database is case-sensitive.)</description>
                                </item>
                                <item>
                                    <name>20</name>
                                    <description>Combine selections with OR. For multi-valued fields (e.g. Checkbox and Dropdownbox controls that allow multi-select) For example, if a Checkbox control has 'Red', 'Green' and 'Blue' as its choices, if you check 'Red' and 'Green' and select option 20, the search is for 'Red' or 'Green' in the field</description>
                                </item>
                                <item>
                                    <name>201</name>
                                    <description>Combine selections with OR and is 'Exact Match'.</description>
                                </item>
                                <item>
                                    <name>202</name>
                                    <description>Combine selections with OR and 'Is Contained In'.</description>
                                </item>
                                <item>
                                    <name>203</name>
                                    <description>Combine selections with OR and 'Starts With'.</description>
                                </item>
                                <item>
                                    <name>21</name>
                                    <description>Combine selections with AND. For example, if a Checkbox control has 'Red', 'Green' and 'Blue' as its choices, if you check 'Red' and 'Green' and select option 21, the search is for 'Red' and 'Green' in the field</description>
                                </item>
                            </list>
                        </p>
                    </description>
                </property>
                <property optional="true">
                    <name>allowQBF</name>
                    <type>boolean</type>
                    <description>Defaults to true. Specify if the search should use QBF syntax. e.g. If QBF syntax allowed, then 'searchControlValue' can be a comma delimited list of values</description>
                </property>
                <property optional="true">
                    <name>advancedTrimCharFieldsForOracle</name>
                    <type>boolean</type>
                    <description>Defaults to false. (Applies only to Oracle) In some cases Oracle treats trailing spaces in character fields as significant.</description>
                </property>
                <property>
                    <name>sortExpression</name>
                    <type>string</type>
                    <description>The field in the SQL database to sort on. Required</description>
                </property>
                <property optional="true">
                    <name>direction</name>
                    <type>string</type>
                    <description>Defaults to ascending. Specify 'DESC' for descending sort.</description>
                </property>
            </properties>
        </argument>
    </arguments>
    <discussion>
        <p></p>
    </discussion>
    <example code="js"><![CDATA[
//Filter a List called 'LIST1' on the COUNTRY column for values 'USA', 'UK' or 'Canada'
//and sort the result in descending order by COUNTRY.
var arr = [];
var searchObject = {
    searchControlValue: ['USA','UK','Canada'],
    searchField: 'COUNTRY'
};
var sortObject = {
    sortExpression : 'COUNTRY',
    direction: 'DESC'
};
arr.push(searchObject) //you can push multiple searchObjects onto the array
arr.push(sortObject); //you can push multiple sortObjects onto the array

var searchDataJSON = JSON.stringify(arr);

var options = { } //use default values
var optionsJSON	 = JSON.stringify(options)

{dialog.object}.computeSearchFromMetaDataAndFilterList('LIST1',optionsJSON,searchDataJSON);]]></example>
    <see>
        <ref link=""></ref>
    </see>
</page>