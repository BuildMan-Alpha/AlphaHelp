<page api="js">
      <shortlink>api client api a5 namespace u class expand method </shortlink>
    <shortlink>a5.u.template.expand Method</shortlink>
    <topic>A5.u.template.expand Method</topic>
    <syntax>html = A5.u.template.expand(data, templateSettings)</syntax>
    <arguments>
        <argument>
            <name>data</name>
            <type>JSON</type>
            <description>A JSON object that defines the value for placeholders in the template.</description>
        </argument>
        <argument>
            <name>templateSettings</name>
            <type>object</type>
            <description>Defines the HTML template to expand. *[js:templateSettings]* must contain the following properties:</description>
            <properties>
                <property>
                    <name>template</name>
                    <type>string</type>
                    <description>An HTML template defined using [Client Side Template syntax].</description>
                </property>
                <property optional="true">
                    <name>partials</name>
                    <type>object</type>
                    <description>Partial template definitions.</description>
                </property>
                <property optional="true">
                    <name>nullValue</name>
                    <type>string</type>
                    <description>Default is an empty string. Defines a value to print if a property is missing or *[js:null]*.</description>
                </property>
            </properties>
        </argument>
    </arguments>
    <description>Replaces placeholders in an HTML template with the values from a JSON object. Client Side Template syntax is supported.</description>
    <discussion>A5.u.template.expand can be used to expand an HTML template using [Client Side Template syntax], defined using curly braces. The placeholders reference properties in a JSON object that is passed to the function.</discussion>
    <sections>
        <section>
            <description>The example below demonstrates an HTML template that contains two placeholders, *[js:{firstname}]* and *[js:{lastname}]*. The placeholders reference values in a JSON object: "firstname" and "lastname".</description>
            <example><![CDATA[var _d = {
    "firstname" : "Fred",
    "lastname": "Smith"
};

var _t = [
    'Hello <b>{firstname}</b> <span style="color: blue;">{lastname}</span>'
].join('');

var settings = {
    template: _t,
    partials: ''
}

var html = A5.u.template.expand(_d,settings);
var ele = $('msg2');

A5.u.element.setContent(ele, 'this is the expanded template');]]></example>
        </section>
        <section>
            <description>This example demonstrates using partials:</description>
            <example><![CDATA[//define the data
var _d = {firstname: 'Fred', lastname: 'Smith'}

//define the template
var arr = [];
arr.push('Welcome<br>');
arr.push('Hello {firstname} {lastname}<br>');
arr.push('{*partial partial1}');

var _t = arr.join('\n');

//define the settings object (template and partials)
var settings = {
    template: _t,
    partials: {
        partial1: 'from partial1: {firstname} {lastname}<br>'
    }
}

//merge the data into the template
var html = A5.u.template.expand(_d,settings);]]></example>
        </section>
        <section>
            <description>This example demonstrates how to use nullValue:</description>
            <example><![CDATA[//define the data
var _d = [
    {firstname: 'Fred', lastname: 'Smith'},
    {firstname: 'Jane', age: 22}
]
//define the template
var arr = [];
arr.push('Welcome<br>');
arr.push('First Name: {firstname}<br>');
arr.push('Last Name: {lastname}<br>');
arr.push('Age: {age}<br>');

var _t = arr.join('\n');

//define the settings object (template and nullValue)
var settings = {
    template: _t,
    nullValue: '<span style="color:#f00">Missing</span>'
}

//merge the data into the template
var html = A5.u.template.expand(_d,settings);]]></example>
        </section>
    </sections>
    <links>
        <link link="client side templates">Client Side Template syntax</link>
    </links>
    <see>
        <ref link="client side templates">Client Side Template Syntax</ref>
    </see>
</page>