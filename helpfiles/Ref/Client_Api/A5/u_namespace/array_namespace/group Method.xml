<page build="5456" api="js" generated="true">
	<shortlink>api client api a5 u array group method</shortlink>
	<topic parent="A5.u.array" parentType="namespace" elementName="group Method" >A5.u.array.group Method</topic>
	<prototype>A5.u.array.group(array,settings)</prototype>
	<arguments>
		<argument>
			<name>array</name>
			<type>array</type>
			<description>The array to group.</description>
		</argument>
		<argument>
			<name>settings</name>
			<type>object</type>
			<description>The settings to use for grouping the array.</description>
		<properties>
			<property>
				<name>by</name>
				<types><type>string</type><type>function</type><type>array</type></types>
				<description>How to group the objects in the passed in array. The value can be a string with the path to the property to use for grouping or a function that returns the group a given item is in. An array of strings and/or functions can be passed in to allow for recursive grouping.</description>
				<arguments>
					<argument>
						<name>data</name>
						<type>object</type>
						<description>The current item to be grouped.</description>
					</argument>
					<argument>
						<name>index</name>
						<type>number</type>
						<description>The current index of the item to be grouped.</description>
					</argument>
				</arguments>
			</property>
		</properties>
		</argument>
		<argument optional="true" >
			<name>groups</name>
			<type>object</type>
			<description>The settings to control created groups.</description>
		<properties>
			<property optional="true" >
				<name>required</name>
				<type>array</type>
				<description>Optional required groups.</description>
			</property>
			<property optional="true" >
				<name>missing</name>
				<types><type>string</type><type>array</type></types>
				<description>How to treat required groups that are missing from the passed in data. Values can be "include" (the default) or "exclude" which will leave missing groups out. An array of these values can be passed in to control missing groups at each level when recursive grouping is being used.</description>
			</property>
			<property optional="true" >
				<name>extra</name>
				<types><type>string</type><type>array</type></types>
				<description>How to treat groups that are not in the required groups. A value of "include" (the default) can be used to include the extra groups after the required groups. A value of "include-before" will include the extra groups before the required groups. A value of "exclude" will exclude the extra groups. An array of these values can be passed in to control extra groups at each level when recursive grouping is being used.</description>
			</property>
			<property optional="true" >
				<name>order</name>
				<types><type>string</type><type>array</type><type>function</type></types>
				<description>The order to apply to the groups. See *[link:A5.u.array.order]*.</description>
			</property>
		</properties>
		</argument>
		<argument optional="true" >
			<name>properties</name>
			<type>object</type>
			<description>The names of properties to output in the returned array of group objects.</description>
		<properties>
			<property optional="true" >
				<name>name</name>
				<types><type>string</type><type>array</type></types>
				<description>The name of the group name property. The default value is "name". An array of these property names can be passed in to control the property name at each level when recursive grouping is being used.</description>
			</property>
			<property optional="true" >
				<name>items</name>
				<types><type>string</type><type>array</type></types>
				<description>The name of the property containing the items in the group. The default value is "items". An array of these property names can be passed in to control the property name at each level when recursive grouping is being used.</description>
			</property>
			<property optional="true" >
				<name>map</name>
				<types><type>string</type><type>array</type></types>
				<description>The name of the property containing the mapping of the items in the group back to the original array indexes. The default value is "map". An array of these property names can be passed in to control the property name at each level when recursive grouping is being used.</description>
				<properties>
					<property>
						<name>groups</name>
						<type>array</type>
						<description>An array of grouped objects.</description>
					</property>
				</properties>
			</property>
		</properties>
		</argument>
	</arguments>
	<description> Group an array of object.</description>
	<discussion>
<p>
The A5.u.array.group method can be used to turn a flat array of objects into an array of groups of object.
Multiple levels of grouping can be used by passing in an array of grouping values to the "by" setting.
A grouping value can be either a string containing the path to the property in each object that should be used for group, or a function that will return the group each item is in.
</p>
<p>
When a property name is being used, certain operations can be preformed on the property.
These operations are included using a ":" after the property name.
Operations include "first", "upper", "lower" and  "round".
</p>
<p>
The "first" operator will return the first character of the property.
If more then one character wants to be returned then the number of characters can be specified in parentheses.
For example "company:first(3)" will return the first three characters of the "company" field.
</p>
<p>
The "upper" and "lower" operators can be used on fields that are strings to return the value in upper or lower case.
They can also be compounded with the "first" operator.
For example "company:first(3):upper" will return the first three characters of the "company" field in upper case.
</p>
<p>
The "round" operator will return the rounded number of a value.
If the value wants to be rounded to a decimal then the number of decimals can be specified in parentheses.
For example "score:round(2)" would return the value of the "score" field rounded to two decimal places.
</p>
<p>
For more complicated grouping a function can be used.
This function will be passed the data for each item and must return the name of the group the item is in.
If an array of names is returned then the item will be placed in each of the named groups.
</p>
</discussion>
	<example code="js">
var arr = [
	{"Firstname":"John","Lastname":"Smith","City":"Boston","State":"MA"},
	{"Firstname":"Henry","Lastname":"Rhodes","City":"New York","State":"NY"},
	{"Firstname":"Allison","Lastname":"Richards","City":"New York","State":"NY"},
	{"Firstname":"Amanda","Lastname":"Sanders","City":"Burlington","State":"MA"},
	{"Firstname":"Nancy","Lastname":"Clark","City":"Boston","State":"MA"},
	{"Firstname":"Cecelia","Lastname":"Dawkins","City":"Buffalo","State":"NY"},
	{"Firstname":"Kathy","Lastname":"Morton","City":"New York","State":"NY"}
]
var grpArr = A5.u.array.group(arr,{
	by: ['State','Lastname:first(1)'],
	groups: {
		required: [['NY','CA','MA']],
		order: ['State','Lastname']
	},
	properties: {
		name: ['state','lastInitial']
	}
});
// grpArr = [
//	{
//		"state":"NY",
//		"items":[
//			{
//				"lastInitial": "R",
//				"items": [{"Firstname":"Henry","Lastname":"Rhodes","City":"New York","State":"NY"},{"Firstname":"Allison","Lastname":"Richards","City":"New York","State":"NY"}],
//				"map": [1,2]
//			},
//			{
//				"lastInitial": "D",
//				"items": [{"Firstname":"Cecelia","Lastname":"Dawkins","City":"Buffalo","State":"NY"}],
//				"map": [5]
//			},
//			{
//				"lastInitial": "M",
//				"items": [{"Firstname":"Kathy","Lastname":"Morton","City":"New York","State":"NY"}],
//				"map": [6]
//			}
//		],
//		"map": [1,2,5,6]
//	},
//	{
//		"state": "CA",
//		"items": [],
//		"map": []
//	},
//	{
//		"state": "MA",
//		"items": [
//			{
//				"lastInitial": "S",
//				"items": [{"Firstname":"John","Lastname":"Smith","City":"Boston","State":"MA"},{"Firstname":"Amanda","Lastname":"Sanders","City":"Burlington","State":"MA"}],
//				"map":[0,3]
//			},
//			{
//				"lastInitial":"C",
//				"items":[{"Firstname":"Nancy","Lastname":"Clark","City":"Boston","State":"MA"}],
//				"map": [4]
//			}
//		],
//		"map":[0,3,4]
//	}
// ]</example>
	<annotations>/Ref/Client_Api/A5/u_namespace/array_namespace/A5.u.array.group Method.xml</annotations>
</page>
