<page api="js" generated="true">
	<shortlink>api client api a5 listbox class</shortlink>
	<topic parent="A5" parentType="namespace" elementName="ListBox Class" >A5.ListBox Class</topic>
	<arguments>
		<argument>
			<name>containerId</name>
			<type>string</type>
			<description>The ID of the element the list should be rendered in.</description>
		</argument>
		<argument>
			<name>data</name>
			<type>array</type>
			<description>Data to display in the list.</description>
		</argument>
		<argument>
			<name>settings</name>
			<type>object</type>
			<description>Settings for the list. This will override the initial values of the properties of the A5.ListBox class.</description>
		</argument>
	</arguments>
	<description> List control.</description>
	<discussion>
<p>
The list control is built for handling tabular data.
The data passed into the list can be javascript object or strings.
There are a few custom list data items that can be used to add items such as titles, static HTML and separators.
</p>
<p>
In order to inject a title, and object with a property named "*title" can be used.
The value of the "*title" property will be injected into the HTML for the title.
A property of "className" can be used to set a custom class name on the title.
A property of "navigate" set to a value of "false" can be used to make the title not appear in the list group navigator (if one is defined for the list).
</p>
<p>
In order to inject static HTML, and object with a property named "*static" can be used.
The value of the "*static" property can be either a string of HTML to inject, or a function that will return that HTML.
A property of "className" can be used to set a custom class name on the container for the static HTML.
</p>
<p>
To insert a separator, a string of "-" can be used.
</p>
<p>
In list item templates the "[scope]" template command will be the list class, through which methods and properties can be accessed.
The "[temp]" template command contains an automatically created object named "info".
This object has several useful properties.
These are "renderIndex", "index", "isFirst" and "isLast".
The "renderIndex" is the index of the list as viewed, whereas the "index" is the original index of the data for the list item in the array passed in to the list.
The "isFirst" and "isLast" properties are booleans that indicate whether or not the list item is the first or last item in the list.
</p>
</discussion>
	<properties>
		<property optional="true" >
			<name>theme</name>
			<type>string</type>
			<description>The theme to use on the list.</description>
		</property>
		<property optional="true" >
			<name>override</name>
			<type>string</type>
			<description>The overrides to use on the list.</description>
		</property>
		<property optional="true" >
			<name>inputId</name>
			<type>string</type>
			<description>The ID of the INPUT into which the value of the list should be set every time the list value changes.</description>
		</property>
		<property optional="true" >
			<name>className</name>
			<type>string</type>
			<description>The class name to put on the list container element.</description>
		</property>
		<property optional="true" >
			<name>focusClassName</name>
			<type>string</type>
			<description>The class name to put on the list container element when the list has focus.</description>
		</property>
		<property optional="true" >
			<name>disabledClassName</name>
			<type>string</type>
			<description>The class name to put on the list container element when the list has been disabled.</description>
		</property>
		<property optional="true" >
			<name>multiple</name>
			<type>boolean</type>
			<description>Whether or not the list allows multiple values to be selected.</description>
		</property>
		<property optional="true" >
			<name>separator</name>
			<type>string</type>
			<description>The separator string to use for combining multiple values when the value is being put into the INPUT specified by A5.ListBox.inputId.</description>
		</property>
		<property optional="true" >
			<name>selectionMode</name>
			<type>string</type>
			<description>The method by which multiple selection occurs. By default the CTRL or SHIFT key must be pressed to select additional values. Setting the value to "additive" will allow multiple values to be selected without the use of a keyboard.</description>
		</property>
		<property optional="true" >
			<name>loopNavigate</name>
			<type>boolean</type>
			<description>Whether or not the list should loop keyboard navigation through values in the list. If set to false (the default) then pressing the down key when the list has focus will not jump back to the top of the list once the last item in the list is hit. Setting the value to true will loop the navigation back to the beginning.</description>
		</property>
		<property optional="true" >
			<name>loopNavigateNullSelection</name>
			<type>boolean</type>
			<description>Whether or not the allow for a null value to be selected while loop navigating. If set to true (the default) then after navigating passed the end of the list, a null value will be selected before the first value in the list is.</description>
		</property>
		<property optional="true" >
			<name>allowNullSelection</name>
			<type>boolean</type>
			<description>Whether or not to allow the list to have a null selection.</description>
		</property>
		<property optional="true" >
			<name>allowNullDeselection</name>
			<type>boolean</type>
			<description>Whether or not to allow the list to deselect an item if there are no other values selected in the list.</description>
		</property>
		<property optional="true" >
			<name>allowAnyValue</name>
			<type>boolean</type>
			<description>Whether or not to allow the list to be set to have any value, regardless of whether that value is in the list. This is useful if the list needs to allow values that have been filtered out of the list to remain selected.</description>
		</property>
		<property optional="true" >
			<name>allowTextSelection</name>
			<type>boolean</type>
			<description>Whether or not to allow text selection in the list.</description>
		</property>
		<property optional="true" >
			<name>calculateValue</name>
			<type>function(data)</type>
			<description>A function that receives the data for a row, and returns the value that the row should have based on the data. For example, if the list row data had an ORDERID field, the function could return that value, and then when the user clicked on a row, the value of the list would be the ORDERID of the row clicked on.</description>
			<arguments>
				<argument>
					<name>data</name>
					<type>object</type>
					<description>The data for the row.</description>
				</argument>
			</arguments>
		</property>
		<property optional="true" >
			<name>scroll</name>
			<type>object</type>
			<description>Scroll settings for the list.</description>
			<properties>
				<property optional="true" >
					<name>axis</name>
					<type>string</type>
					<description>The axis to allow scrolling on. Values can be "x", "y" or "both".</description>
				</property>
			</properties>
		</property>
		<property>
			<name>layout</name>
			<type>string</type>
			<description>Name of the layout to use.</description>
		</property>
		<property>
			<name>layouts</name>
			<type>object</type>
			<description>The definition of named layouts to use in the A5.ListBox. See *[link:A5.ListBox Layout Object]*.</description>
		</property>
		<property optional="true" >
			<name>data</name>
			<type>object</type>
			<description>Settings for data.</description>
			<properties>
				<property optional="true" >
					<name>defaults</name>
					<type>object</type>
					<description>An optional object that contains the default values to place in a row in the list if the row is missing those values.</description>
				</property>
				<property optional="true" >
					<name>nullHTML</name>
					<type>string</type>
					<description>The HTML to use when a column of data in a row is null or undefined.</description>
				</property>
			</properties>
		</property>
		<property optional="true" >
			<name>columnLayout</name>
			<type>object</type>
			<description>Settings for columnar layouts.</description>
			<properties>
				<property optional="true" >
					<name>header</name>
					<type>object</type>
					<description>Settings for headers in column layouts.</description>
					<properties>
						<property optional="true" >
							<name>show</name>
							<type>boolean</type>
							<description>Whether or not to show column headers in the list when the list uses a columnar layout.</description>
						</property>
						<property optional="true" >
							<name>className</name>
							<type>string</type>
							<description>The class name to put on the column header element.</description>
						</property>
						<property optional="true" >
							<name>item</name>
							<type>object</type>
							<description>Settings for individual column headers.</description>
							<properties>
								<property optional="true" >
									<name>className</name>
									<type>string</type>
									<description>The class name to put on a column header element.</description>
								</property>
								<property optional="true" >
									<name>hoverClassName</name>
									<type>string</type>
									<description>The class name to put on a column header element when the user hovers over it.</description>
								</property>
								<property optional="true" >
									<name>order</name>
									<type>object</type>
									<description>Settings for the order indicator in column headers.</description>
									<properties>
										<property optional="true" >
											<name>ascendingImage</name>
											<type>string</type>
											<description>The image to use for the column when it is sorted in ascending order.</description>
										</property>
										<property optional="true" >
											<name>descendingImage</name>
											<type>string</type>
											<description>The image to use for the column when it is sorted in descending order.</description>
										</property>
										<property optional="true" >
											<name>className</name>
											<type>string</type>
											<description>The class name to put on the order image.</description>
										</property>
										<property optional="true" >
											<name>style</name>
											<type>string</type>
											<description>The CSS to put on the order image.</description>
										</property>
									</properties>
								</property>
								<property optional="true" >
									<name>resize</name>
									<type>object</type>
									<description>Settings for column resizing.</description>
									<properties>
										<property optional="true" >
											<name>location</name>
											<type>string</type>
											<description>Location for the resize handle. Value can be "before" or "after".</description>
										</property>
										<property optional="true" >
											<name>className</name>
											<type>string</type>
											<description>The class name of the indicator element shown over the column while it is being resized.</description>
										</property>
										<property optional="true" >
											<name>handle</name>
											<type>object</type>
											<description>Settings for column resizing handle.</description>
											<properties>
												<property optional="true" >
													<name>className</name>
													<type>string</type>
													<description>The class name to put on the column resize handle.</description>
												</property>
												<property optional="true" >
													<name>size</name>
													<type>string</type>
													<description>The size in CSS units of the column resize handle.</description>
												</property>
											</properties>
										</property>
									</properties>
								</property>
							</properties>
						</property>
					</properties>
				</property>
			</properties>
		</property>
		<property optional="true" >
			<name>data</name>
			<type>object</type>
			<description>Settings for columns in each row in the list.</description>
			<properties>
				<property optional="true" >
					<name>item</name>
					<type>object</type>
					<description>Settings for individual columns in each row in the list.</description>
					<properties>
						<property optional="true" >
							<name>className</name>
							<type>string</type>
							<description>The class name to put on a column in a row in the list.</description>
						</property>
						<property optional="true" >
							<name>style</name>
							<type>string</type>
							<description>The CSS to put on a column in a row in  the list.</description>
						</property>
					</properties>
				</property>
			</properties>
		</property>
		<property optional="true" >
			<name>view</name>
			<type>object</type>
			<description>Settings to control list virtualization.</description>
			<properties>
				<property optional="true" >
					<name>type</name>
					<type>string</type>
					<description>The type of virtualization to use. The default value of "default" will result in all rows of the list being render. A value of "page" will dynamically page the rows of the list. A value of "dynamic" will append rows as the user scrolls.</description>
				</property>
				<property optional="true" >
					<name>size</name>
					<type>number</type>
					<description>The number of rows to draw in the view. The default value is 50.</description>
				</property>
				<property optional="true" >
					<name>maxSize</name>
					<type>number</type>
					<description>The maximum number of rows that can be drawn in a "dynamic" view, before the view is cleared to reduce the DOM footprint of the list. The default value of "0" allows there to be no maximum size.</description>
				</property>
				<property optional="true" >
					<name>offset</name>
					<type>number</type>
					<description>In a "page" view, the "offset" is the number of rows to include from the previous page when when drawing a new page. For example, if the user was on a page that ended on row 100, and they navigated to the next page, the first visible row in the new page would be 90 if the offset was 10. In general the offset want to at least be the number of rows visible in the list, so that when the new page is drawn the scroll position of the list can appear not to change.</description>
				</property>
				<property optional="true" >
					<name>navigation</name>
					<type>object</type>
					<description>Settings for the navigation of views.</description>
					<properties>
						<property optional="true" >
							<name>pull</name>
							<type>object</type>
							<description>Settings for automatic pull navigation of views.</description>
							<properties>
								<property optional="true" >
									<name>allow</name>
									<type>boolean</type>
									<description>Whether or not to allow automatic navigation when the user pulls past either end of the list. The default value is true.</description>
								</property>
								<property optional="true" >
									<name>size</name>
									<type>number</type>
									<description>The number of pixels that the user must pull past either end of the list before the release will result in an automatic page navigation. The default is 40.</description>
								</property>
							</properties>
						</property>
						<property optional="true" >
							<name>prev</name>
							<type>object</type>
							<description>Settings for the previous page button.</description>
							<properties>
								<property optional="true" >
									<name>html</name>
									<type>string</type>
									<description>The HTML to display in the previous button that will be drawn at the top of the page. The default value is "Prev".</description>
								</property>
								<property optional="true" >
									<name>className</name>
									<type>string</type>
									<description>The class name to put on the button.</description>
								</property>
								<property optional="true" >
									<name>pressedClassName</name>
									<type>string</type>
									<description>The class name to put on the button when it is pressed, or the automatic pull size is reached.</description>
								</property>
							</properties>
						</property>
						<property optional="true" >
							<name>next</name>
							<type>object</type>
							<description>Settings for the next page button.</description>
							<properties>
								<property optional="true" >
									<name>html</name>
									<type>string</type>
									<description>The HTML to display in the next button that will be drawn at the bottom of the page. The default value is "Next".</description>
								</property>
								<property optional="true" >
									<name>className</name>
									<type>string</type>
									<description>The class name to put on the button.</description>
								</property>
								<property optional="true" >
									<name>pressedClassName</name>
									<type>string</type>
									<description>The class name to put on the button when it is pressed, or the automatic pull size is reached.</description>
								</property>
							</properties>
						</property>
					</properties>
				</property>
			</properties>
		</property>
		<property optional="true" >
			<name>group</name>
			<type>object</type>
			<description>Settings for the list group generation and navigation.</description>
		</property>
		<property optional="true" >
			<name>auto</name>
			<type>array</type>
			<description>An array of *[link:A5.ListBox Group Object]* definitions to use for grouping. The groups are processed in order, so if the array has more then one group object, each group object will be evaluated on each of the previously generated groups.</description>
		</property>
		<property optional="true" >
			<name>navigator</name>
			<type>object</type>
			<description>Settings for the list group navigator. For example the alphabetic bar on the side of a contacts list.</description>
			<properties>
				<property optional="true" >
					<name>show</name>
					<type>boolean</type>
					<description>Whether or not to show the navigator. The default value is false.</description>
				</property>
				<property optional="true" >
					<name>location</name>
					<type>string</type>
					<description>The location of the navigation. The default value is "right". Other values include "left", "top", and "bottom".</description>
				</property>
				<property optional="true" >
					<name>offset</name>
					<type>number</type>
					<description>The distance in pixels from the edge of the list the navigator will be positioned. The default value is 4.</description>
				</property>
				<property optional="true" >
					<name>size</name>
					<type>number</type>
					<description>The collapsed size of the navigator in pixels. When the user is interacting with the navigator it will grow so that all text in the navigator is visible. The default value is 28.</description>
				</property>
				<property optional="true" >
					<name>process</name>
					<type>function(title)</type>
					<description>A function that receives the title for a group, and can process the HTML to display in the group navigator.</description>
					<arguments>
						<argument>
							<name>title</name>
							<type>string</type>
							<description>The title of the group.</description>
						</argument>
					</arguments>
				</property>
			</properties>
		</property>
		<property optional="true" >
			<name>className</name>
			<type>string</type>
			<description>The class name to put on the navigator.</description>
		</property>
		<property optional="true" >
			<name>focusClassName</name>
			<type>string</type>
			<description>The class name to put on the navigator when the user is interacting with it.</description>
		</property>
		<property optional="true" >
			<name>style</name>
			<type>string</type>
			<description>The CSS to put on the navigator.</description>
		</property>
		<property optional="true" >
			<name>scroller</name>
			<type>object</type>
			<description>Settings for the list scroller.</description>
			<properties>
				<property optional="true" >
					<name>show</name>
					<type>boolean</type>
					<description>Whether or not to show the scroller. The default value is false.</description>
				</property>
			</properties>
		</property>
		<property optional="true" >
			<name>header</name>
			<type>object</type>
			<description>Settings for the list fixed header.</description>
			<properties>
				<property optional="true" >
					<name>show</name>
					<type>boolean</type>
					<description>Whether or not to show the header.</description>
				</property>
				<property optional="true" >
					<name>html</name>
					<type>string</type>
					<description>The HTML to put in the list header.</description>
				</property>
				<property optional="true" >
					<name>className</name>
					<type>string</type>
					<description>The class name to put on the list header.</description>
				</property>
				<property optional="true" >
					<name>style</name>
					<type>string</type>
					<description>The CSS to put on the list header.</description>
				</property>
			</properties>
		</property>
		<property optional="true" >
			<name>footer</name>
			<type>object</type>
			<description>Settings for the list fixed footer.</description>
			<properties>
				<property optional="true" >
					<name>show</name>
					<type>boolean</type>
					<description>Whether or not to show the footer.</description>
				</property>
				<property optional="true" >
					<name>html</name>
					<type>string</type>
					<description>The HTML to put in the list footer.</description>
				</property>
				<property optional="true" >
					<name>className</name>
					<type>string</type>
					<description>The class name to put on the list footer.</description>
				</property>
				<property optional="true" >
					<name>style</name>
					<type>string</type>
					<description>The CSS to put on the list footer.</description>
				</property>
			</properties>
		</property>
		<property optional="true" >
			<name>lock</name>
			<type>object</type>
			<description>Settings for the list lock. See *[link:A5.ListBox.setLock]*.</description>
			<properties>
				<property optional="true" >
					<name>className</name>
					<type>string</type>
					<description>The class name to put on the list lock element.</description>
				</property>
				<property optional="true" >
					<name>html</name>
					<type>string</type>
					<description>The default HTML to put in the list lock element.</description>
				</property>
			</properties>
		</property>
		<property optional="true" >
			<name>content</name>
			<type>object</type>
			<description>Settings for the list scrolling content area.</description>
			<properties>
				<property optional="true" >
					<name>header</name>
					<type>object</type>
					<description>Settings for the list content header. The content header will scroll of the top of the list but will not be re-drawn when the list is refreshed.</description>
					<properties>
						<property optional="true" >
							<name>show</name>
							<type>boolean</type>
							<description>Whether or not to show the header.</description>
						</property>
						<property optional="true" >
							<name>html</name>
							<type>string</type>
							<description>The HTML to put in the list header.</description>
						</property>
						<property optional="true" >
							<name>className</name>
							<type>string</type>
							<description>The class name to put on the list header.</description>
						</property>
						<property optional="true" >
							<name>style</name>
							<type>string</type>
							<description>The CSS to put on the list header.</description>
						</property>
					</properties>
				</property>
				<property>
					<name>footer</name>
					<type>string</type>
					<description>Settings for the list content footer. The content footer will scroll of the top of the list but will not be re-drawn when the list is refreshed.</description>
					<properties>
						<property optional="true" >
							<name>show</name>
							<type>boolean</type>
							<description>Whether or not to show the footer.</description>
						</property>
						<property optional="true" >
							<name>html</name>
							<type>string</type>
							<description>The HTML to put in the list footer.</description>
						</property>
						<property optional="true" >
							<name>className</name>
							<type>string</type>
							<description>The class name to put on the list footer.</description>
						</property>
						<property optional="true" >
							<name>style</name>
							<type>string</type>
							<description>The CSS to put on the list footer.</description>
						</property>
					</properties>
				</property>
			</properties>
		</property>
		<property optional="true" >
			<name>item</name>
			<type>object</type>
			<description>Settings for the list items.</description>
			<properties>
				<property optional="true" >
					<name>className</name>
					<type>string</type>
					<description>The class name to put on a list item.</description>
				</property>
				<property optional="true" >
					<name>hoverClassName</name>
					<type>string</type>
					<description>The class name to put on a list item when the user mouses over it.</description>
				</property>
				<property optional="true" >
					<name>selectedClassName</name>
					<type>string</type>
					<description>The class name to put on a list item when it is selected.</description>
				</property>
				<property optional="true" >
					<name>style</name>
					<type>string</type>
					<description>The CSS to put on a list item.</description>
				</property>
				<property optional="true" >
					<name>titleClassName</name>
					<type>string</type>
					<description>The class name to put on a list group title item.</description>
				</property>
				<property optional="true" >
					<name>separatorClassName</name>
					<type>string</type>
					<description>The class name to put on a list item separator.</description>
				</property>
			</properties>
		</property>
		<property optional="true" >
			<name>items</name>
			<type>object</type>
			<description>The definition of named items to be used in layouts. See *[link:A5.ListBox Item Object]*.</description>
		</property>
		<property optional="true" >
			<name>animation</name>
			<type>object</type>
			<description>Settings for list animations.</description>
			<properties>
				<property optional="true" >
					<name>swap</name>
					<type>object</type>
					<description>Settings for the list swap animation, which can be optionally played on the population of the list. See *[link:A5.ListBox.populate]*.</description>
					<properties>
						<property optional="true" >
							<name>flow</name>
							<type>string</type>
							<description>The direction the list will animate based on whether it is going to the next or previous set of data. The default value is "ltr", "rtl" may also be used.</description>
						</property>
						<property optional="true" >
							<name>duration</name>
							<type>number</type>
							<description>The length of time (in milliseconds) that the animation should take. The default value is 600.</description>
						</property>
					</properties>
				</property>
				<property optional="true" >
					<name>lock</name>
					<type>object</type>
					<description>Settings for the list lock animation, which which controls the fade of the list lock element. See *[link:A5.ListBox.setLock]*.</description>
					<properties>
						<property optional="true" >
							<name>duration</name>
							<type>number</type>
							<description>The length of time (in milliseconds) that the animation should take. The default value is 200.</description>
						</property>
					</properties>
				</property>
			</properties>
		</property>
		<property optional="true" >
			<name>disabled</name>
			<type>boolean</type>
			<description>Whether or not the list is disabled.</description>
		</property>
		<property optional="true" >
			<name>readOnly</name>
			<type>boolean</type>
			<description>Whether or not the list is read-only.</description>
		</property>
		<property optional="true" >
			<name>filter</name>
			<type>any</type>
			<description>The filter to apply to the list data. See *[link:A5.ListBox.setFilter]*.</description>
		</property>
		<property optional="true" >
			<name>order</name>
			<type>any</type>
			<description>The order to sort the list data in. See *[link:A5.ListBox.setOrder]*.</description>
		</property>
		<property readonly="true" >
			<name>selection</name>
			<type>array</type>
			<description>The indexes of the selected list rows.</description>
		</property>
		<property readonly="true" >
			<name>selectionData</name>
			<type>array</type>
			<description>The data of the selected list rows.</description>
		</property>
		<property readonly="true" >
			<name>selectionKey</name>
			<type>array</type>
			<description>The indexes of the selected list rows before ordering and filtering.</description>
		</property>
		<property readonly="true" >
			<name>value</name>
			<type>array</type>
			<description>The values of the selected list rows.</description>
		</property>
		<property readonly="true" >
			<name>state</name>
			<type>object</type>
			<description>State information object.</description>
			<properties>
				<property readonly="true" >
					<name>view</name>
					<type>object</type>
					<description>The state of the view page if the view type is "page" or "dynamic".</description>
					<properties>
						<property readonly="true" >
							<name>start</name>
							<type>number</type>
							<description>The start index of the current view page.</description>
						</property>
						<property readonly="true" >
							<name>end</name>
							<type>number</type>
							<description>The end index of the current view page.</description>
						</property>
						<property readonly="true" >
							<name>hasPrev</name>
							<type>boolean</type>
							<description>Whether or not there is a previous page.</description>
						</property>
						<property readonly="true" >
							<name>hasNext</name>
							<type>boolean</type>
							<description>Whether or not there is a next page.</description>
						</property>
					</properties>
				</property>
			</properties>
		</property>
		<property optional="true" >
			<name>onBeforePopulate</name>
			<type>function(data)</type>
			<description>Event fired before the list is populated with data. If a value of false is returned by the function the populate will not be done.</description>
			<arguments>
				<argument>
					<name>data</name>
					<type>object</type>
					<description>The data the list is being populated with.</description>
				</argument>
			</arguments>
		</property>
		<property optional="true" >
			<name>onPopulate</name>
			<type>function(data)</type>
			<description>Event fired when the list is populated with data.</description>
			<arguments>
				<argument>
					<name>data</name>
					<type>object</type>
					<description>The data the list was populated with.</description>
				</argument>
			</arguments>
		</property>
		<property optional="true" >
			<name>onBeforeListDraw</name>
			<type>function(data,index,source)</type>
			<description>Event fired before the contents of the list are drawn. At this point the data to be drawn can be manipulated before display.</description>
			<arguments>
				<argument>
					<name>data</name>
					<type>array</type>
					<description>The data to draw.</description>
				</argument>
				<argument>
					<name>index</name>
					<type>number</type>
					<description>The index in the data at which drawing is starting.</description>
				</argument>
				<argument>
					<name>source</name>
					<type>string</type>
					<description>The source of the draw command. Values can be "populate", "append-rows", "view-nav" and "view-add".</description>
				</argument>
			</arguments>
		</property>
		<property optional="true" >
			<name>onListDraw</name>
			<type>function(data,index)</type>
			<description>Event fired when the contents of the list are drawn.</description>
			<arguments>
				<argument>
					<name>data</name>
					<type>array</type>
					<description>The data drawn.</description>
				</argument>
				<argument>
					<name>index</name>
					<type>number</type>
					<description>The index in the data at which drawing started.</description>
				</argument>
			</arguments>
		</property>
		<property optional="true" >
			<name>onBeforeItemDraw</name>
			<type>function(data,index)</type>
			<description>Event fired before a list item is drawn. At this point the data to be drawn can be manipulated before display.</description>
			<arguments>
				<argument>
					<name>data</name>
					<type>object</type>
					<description>The data for the list item.</description>
				</argument>
				<argument>
					<name>index</name>
					<type>number</type>
					<description>The index of the list item.</description>
				</argument>
			</arguments>
		</property>
		<property optional="true" >
			<name>onItemDraw</name>
			<type>function(data,index)</type>
			<description>Event fired when a list item is drawn.</description>
			<arguments>
				<argument>
					<name>data</name>
					<type>object</type>
					<description>The data for the list item.</description>
				</argument>
				<argument>
					<name>index</name>
					<type>number</type>
					<description>The index of the list item.</description>
				</argument>
			</arguments>
		</property>
		<property optional="true" >
			<name>onBeforeSelect</name>
			<type>function(index)</type>
			<description>Event fired before an item in the list is selected. If a value of false is returned by the function the selection will not be done.</description>
			<arguments>
				<argument>
					<name>index</name>
					<type>number</type>
					<description>The index of the item being selected. If the index is equal to "-1" then no value is being selected.</description>
				</argument>
			</arguments>
		</property>
		<property optional="true" >
			<name>onSelect</name>
			<type>function(index)</type>
			<description>Event fired when an item in the list is selected.</description>
			<arguments>
				<argument>
					<name>index</name>
					<type>number</type>
					<description>The index of the item being selected. If the index is equal to "-1" then no value is being selected.</description>
				</argument>
			</arguments>
		</property>
		<property optional="true" >
			<name>onChange</name>
			<type>function(value)</type>
			<description>Event fired when the value of the list changes.</description>
			<arguments>
				<argument>
					<name>value</name>
					<type>string</type>
					<description>The value of the value.</description>
				</argument>
			</arguments>
		</property>
		<property optional="true" >
			<name>onClick</name>
			<type>function(value)</type>
			<description>Event fired when an item in the list is clicked.</description>
			<arguments>
				<argument>
					<name>value</name>
					<type>string</type>
					<description>The value clicked.</description>
				</argument>
			</arguments>
		</property>
		<property optional="true" >
			<name>onDblClick</name>
			<type>function(value)</type>
			<description>Event fired when an item in the list is double clicked.</description>
			<arguments>
				<argument>
					<name>value</name>
					<type>string</type>
					<description>The value double clicked.</description>
				</argument>
			</arguments>
		</property>
		<property optional="true" >
			<name>onRightClick</name>
			<type>function(value)</type>
			<description>Event fired when an item in the list is context clicked.</description>
			<arguments>
				<argument>
					<name>value</name>
					<type>string</type>
					<description>The value context clicked.</description>
				</argument>
			</arguments>
		</property>
		<property optional="true" >
			<name>onNavigate</name>
			<type>function(start,end)</type>
			<description>Event fired when the view in the list is navigated.</description>
			<arguments>
				<argument>
					<name>start</name>
					<type>number</type>
					<description>The start index of the view.</description>
				</argument>
				<argument>
					<name>end</name>
					<type>number</type>
					<description>The end index of the view.</description>
				</argument>
			</arguments>
		</property>
		<property optional="true" >
			<name>onBeforeAddRows</name>
			<type>function(data,source)</type>
			<description>Event fired before rows are added to the list. If a value of false is returned by the function the addition will not be done.</description>
			<arguments>
				<argument>
					<name>data</name>
					<type>array</type>
					<description>The data for the list items being added.</description>
				</argument>
				<argument>
					<name>source</name>
					<type>object</type>
					<description>The source of the row addition.</description>
				</argument>
				<argument>
					<name>type</name>
					<type>string</type>
					<description>The source type. Value you will "append" or "insert".</description>
				</argument>
				<argument>
					<name>index</name>
					<type>number</type>
					<description>If the type is "insert" then the index at which the new rows will be added.</description>
				</argument>
			</arguments>
		</property>
		<property optional="true" >
			<name>onAddRows</name>
			<type>function(data,source)</type>
			<description>Event fired when rows are added to the list.</description>
			<arguments>
				<argument>
					<name>data</name>
					<type>array</type>
					<description>The data for the list items added.</description>
				</argument>
				<argument>
					<name>source</name>
					<type>object</type>
					<description>The source of the row addition.</description>
				</argument>
				<argument>
					<name>type</name>
					<type>string</type>
					<description>The source type. Value you will "append" or "insert".</description>
				</argument>
				<argument>
					<name>index</name>
					<type>number</type>
					<description>If the type is "insert" then the index at which the new rows were be added.</description>
				</argument>
			</arguments>
		</property>
		<property optional="true" >
			<name>onBeforeRemoveRows</name>
			<type>function(rows)</type>
			<description>Event fired before rows are removed from the list. If a value of false is returned by the function the remove will not be done.</description>
			<arguments>
				<argument>
					<name>rows</name>
					<type>array</type>
					<description>The indexes of the rows being removed.</description>
				</argument>
			</arguments>
		</property>
		<property optional="true" >
			<name>onRemoveRows</name>
			<type>function(rows)</type>
			<description>Event fired when rows are removed from the list.</description>
			<arguments>
				<argument>
					<name>rows</name>
					<type>array</type>
					<description>The indexes of the rows removed.</description>
				</argument>
			</arguments>
		</property>
		<property optional="true" >
			<name>onBeforeUpdateRow</name>
			<type>function(index,data)</type>
			<description>Event fired before a row is updated. If a value of false is returned by the function the update will not be done.</description>
			<arguments>
				<argument>
					<name>index</name>
					<type>number</type>
					<description>The index of the item being updated.</description>
				</argument>
				<argument>
					<name>data</name>
					<type>object</type>
					<description>The updated data for the row.</description>
				</argument>
			</arguments>
		</property>
		<property optional="true" >
			<name>onUpdateRow</name>
			<type>function(index,data)</type>
			<description>Event fired when a row is updated.</description>
			<arguments>
				<argument>
					<name>index</name>
					<type>number</type>
					<description>The index of the item updated.</description>
				</argument>
				<argument>
					<name>data</name>
					<type>object</type>
					<description>The updated data for the row.</description>
				</argument>
			</arguments>
		</property>
		<property optional="true" >
			<name>onBeforeFilter</name>
			<type>function(filter)</type>
			<description>Event fired before the list is filtered. If a value of false is returned by the function the filter will not be done.</description>
			<arguments>
				<argument>
					<name>filter</name>
					<type>any</type>
					<description>The new filter for the list.</description>
				</argument>
			</arguments>
		</property>
		<property optional="true" >
			<name>onFilter</name>
			<type>function()</type>
			<description>Event fired when the list is filtered.</description>
		</property>
		<property optional="true" >
			<name>onBeforeOrder</name>
			<type>function(order)</type>
			<description>Event fired before the list is ordered. If a value of false is returned by the function the order will not be done.</description>
			<arguments>
				<argument>
					<name>order</name>
					<type>any</type>
					<description>The new order for the list.</description>
				</argument>
			</arguments>
		</property>
		<property optional="true" >
			<name>onOrder</name>
			<type>function()</type>
			<description>Event fired when the list is ordered.</description>
		</property>
		<property optional="true" >
			<name>onBeforeResize</name>
			<type>function(width,height)</type>
			<description>Event fired before the list is resized. If the layout of the list is changed by this event, then the list will preform a refresh to update to the new layout.</description>
			<arguments>
				<argument>
					<name>width</name>
					<type>number</type>
					<description>The new width of the list in pixels.</description>
				</argument>
				<argument>
					<name>height</name>
					<type>number</type>
					<description>The new height of the list in pixels.</description>
				</argument>
			</arguments>
		</property>
		<property optional="true" >
			<name>onResize</name>
			<type>function()</type>
			<description>Event fired when the list is resized.</description>
		</property>
		<property optional="true" >
			<name>onFocus</name>
			<type>function()</type>
			<description>Event fired when the list receives focus.</description>
		</property>
		<property optional="true" >
			<name>onBlur</name>
			<type>function()</type>
			<description>Event fired when the list looses focus.</description>
		</property>
	</properties>
	<note> To get a pointer to the A5.ListBox class in a UX see *[link: dialog.object.getControl Method Object]*.</note>
	<!--list:* Method-->
	<!--list:*index.xml-->
	<annotations>/Ref/Client_Api/A5/ListBox_class/index.xml</annotations>
</page>
