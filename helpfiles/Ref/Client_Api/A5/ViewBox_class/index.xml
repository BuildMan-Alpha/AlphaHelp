<page api="js" generated="true">
	<shortlink>api client api a5 viewbox class</shortlink>
	<topic parent="A5" parentType="namespace" elementName="ViewBox Class" >A5.ViewBox Class</topic>
	<arguments>
		<argument>
			<name>containerId</name>
			<type>string</type>
			<description>The ID of the element the view box should be rendered in.</description>
		</argument>
		<argument optional="true" >
			<name>data</name>
			<types><type>object</type><type>array</type></types>
			<description>Data to use in the view box. If the view box uses static HTML, and does not require data, "null" can be passed in, or the data argument can be omitted.</description>
		</argument>
		<argument>
			<name>settings</name>
			<type>object</type>
			<description>Settings for the view box. This will override the initial values of the properties of the A5.ViewBox class.</description>
		</argument>
	</arguments>
	<description> View box control.</description>
	<discussion>
<p>
The view box control can be used to accomplish a number of different control types.
For example, light weight lists, keypads, progress indicators, rating controls, etc.
This can be accomplished because the view box can contain any HTML - derived from static HTML or the expansion of a template (see *[link:A5.u.template]*).
</p>
<p>
To allow user interaction with the contents of the view box, special attributes are added to any element that should be interactive.
These attributes are "a5-item" and "a5-value".
</p>
<p>
The "a5-item" attribute contains the name of the item which the element is bound to.
The "a5-value" attribute is used in conjunction with the "a5-item" attribute to express the value to associate with the element.
The definition for the behavior of the element is contained in either the view box or current view box layout "items" property, the "a5-item" being used to select the corresponding item.
Item arguments - a way to send extra arguments to the item event handlers - can be used by adding arguments as a suffix in the "a5-item" attribute, separating them from the item name by a ":".
</p>
<p>
Any element with an "a5-item" must also have an ID.
If no ID is specified, an ID for the element will be automatically generated.
However, the ID will be regenerated every time the view box control is refreshed, meaning that between refreshes the automatic ID on any given element will change.
It is best practice to specify IDs on element that have an "a5-item".
</p>
<p>
When using a template to generate the HTML for the view box, the "[scope]" template command will be the view box class, through which methods and properties can be accessed.
</p>
</discussion>
	<properties>
		<property optional="true" >
			<name>theme</name>
			<type>string</type>
			<description>The theme to use on the view box.</description>
		</property>
		<property optional="true" >
			<name>override</name>
			<type>string</type>
			<description>The overrides to use on the view box.</description>
		</property>
		<property optional="true" >
			<name>inputId</name>
			<type>string</type>
			<description>The ID of the INPUT into which the value of the view box should be set every time the view box value changes.</description>
		</property>
		<property optional="true" >
			<name>className</name>
			<type>string</type>
			<description>The class name to put on the view box container element.</description>
		</property>
		<property optional="true" >
			<name>focusClassName</name>
			<type>string</type>
			<description>The class name to put on the view box container element when the view box has focus.</description>
		</property>
		<property optional="true" >
			<name>disabledClassName</name>
			<type>string</type>
			<description>The class name to put on the view box container element when the view box has been disabled.</description>
		</property>
		<property optional="true" >
			<name>captureFocus</name>
			<type>boolean</type>
			<description>Whether or not to allow the view box to capture focus. If set to true, then when the view box is clicked on it will receive focus, and keyboard navigation can be done. However, this will prevent INPUT controls inside the view box from getting focus.</description>
		</property>
		<property optional="true" >
			<name>multiple</name>
			<type>boolean</type>
			<description>Whether or not the view box allows multiple values to be selected.</description>
		</property>
		<property optional="true" >
			<name>separator</name>
			<type>string</type>
			<description>The separator string to use for combining multiple values when the value is being put into the INPUT specified by A5.ViewBox.inputId.</description>
		</property>
		<property optional="true" >
			<name>selectionMode</name>
			<type>string</type>
			<description>The method by which multiple selection occurs. By default the CTRL or SHIFT key must be pressed to select additional values. Setting the value to "additive" will allow multiple values to be selected without the use of a keyboard.</description>
		</property>
		<property optional="true" >
			<name>loopNavigate</name>
			<type>boolean</type>
			<description>Whether or not the view box should loop keyboard navigation through values in the view box. If set to false (the default) then pressing the down key when the view box has focus will not jump back to the top of the view box once the last item in the view box is hit. Setting the value to true will loop the navigation back to the beginning.</description>
		</property>
		<property optional="true" >
			<name>loopNavigateNullSelection</name>
			<type>boolean</type>
			<description>Whether or not the allow for a null value to be selected while loop navigating. If set to true (the default) then after navigating passed the end of the view box, a null value will be selected before the first value in the view box is.</description>
		</property>
		<property optional="true" >
			<name>allowNullSelection</name>
			<type>boolean</type>
			<description>Whether or not to allow the view box to have a null selection.</description>
		</property>
		<property optional="true" >
			<name>allowNullDeselection</name>
			<type>boolean</type>
			<description>Whether or not to allow the view box to deselect an item if there are no other values selected in the view box.</description>
		</property>
		<property optional="true" >
			<name>allowAnyValue</name>
			<type>boolean</type>
			<description>Whether or not to allow the view box to be set to have any value, regardless of whether that value is in the view box. This is useful if the view box is being used to create a value, such as if the view box is a calculator.</description>
		</property>
		<property optional="true" >
			<name>allowTextSelection</name>
			<type>boolean</type>
			<description>Whether or not to allow text selection in the view box.</description>
		</property>
		<property optional="true" >
			<name>autoRefresh</name>
			<type>boolean</type>
			<description>Whether or not to automatically refresh the view box when the user makes a selection in it.</description>
		</property>
		<property optional="true" >
			<name>animation</name>
			<type>object</type>
			<description>Animation settings.</description>
			<properties>
				<property optional="true" >
					<name>allow</name>
					<type>boolean</type>
					<description>Whether or not to allow animation. If the view box is going to be animated at any point, the value of this must be true. To support animation extra elements are added to the view box around the content. This may effect layout.</description>
				</property>
			</properties>
		</property>
		<property optional="true" >
			<name>scroll</name>
			<type>object</type>
			<description>Scroll settings for the view box.</description>
			<properties>
				<property optional="true" >
					<name>axis</name>
					<type>string</type>
					<description>The axis to allow scrolling on. Values can be "x", "y" or "both".</description>
				</property>
			</properties>
		</property>
		<property>
			<name>layout</name>
			<type>string</type>
			<description>Name of the layout to use.</description>
		</property>
		<property>
			<name>layouts</name>
			<type>object</type>
			<description>The definition of named layouts to use in the A5.ViewBox. See *[link:A5.ViewBox Layout Object]*.</description>
		</property>
		<property>
			<name>items</name>
			<type>object</type>
			<description>The definition of named items to be used in layouts. See *[link:A5.ViewBox Item Object]*.</description>
		</property>
		<property optional="true" >
			<name>templates</name>
			<type>object</type>
			<description>Global template setting.</description>
			<properties>
				<property optional="true" >
					<name>partials</name>
					<type>object</type>
					<description>The global partial templates to provide to every layout that uses templates. See *[link:A5.u.template.expand]* for information on partial templates.</description>
				</property>
			</properties>
		</property>
		<property readonly="true" >
			<name>selectionInfo</name>
			<type>object</type>
			<description>Information about the current selection.</description>
			<properties>
				<property readonly="true" >
					<name>ids</name>
					<type>array</type>
					<description>The IDs of the selected elements in the view box.</description>
				</property>
				<property readonly="true" >
					<name>active</name>
					<type>object</type>
					<description>The currently active selected item. This is usually the last element the user interacted with, and keyboard navigation will be relative to this element.</description>
					<properties>
						<property readonly="true" >
							<name>has</name>
							<type>boolean</type>
							<description>Whether there is an active item.</description>
						</property>
						<property readonly="true" >
							<name>id</name>
							<type>string</type>
							<description>The ID of the active item.</description>
						</property>
						<property readonly="true" >
							<name>value</name>
							<type>string</type>
							<description>The value of the active item.</description>
						</property>
						<property readonly="true" >
							<name>isLast</name>
							<type>boolean</type>
							<description>Whether the item is the last selectable item in the view box.</description>
						</property>
						<property readonly="true" >
							<name>isFirst</name>
							<type>boolean</type>
							<description>Whether the item is the first selectable item in the view box.</description>
						</property>
					</properties>
				</property>
				<property readonly="true" >
					<name>prev</name>
					<type>object</type>
					<description>The previous item relative to the active item.</description>
					<properties>
						<property readonly="true" >
							<name>has</name>
							<type>boolean</type>
							<description>Whether there is an previous item.</description>
						</property>
						<property readonly="true" >
							<name>id</name>
							<type>string</type>
							<description>The ID of the previous item.</description>
						</property>
						<property readonly="true" >
							<name>value</name>
							<type>string</type>
							<description>The value of the previous item.</description>
						</property>
					</properties>
				</property>
				<property readonly="true" >
					<name>next</name>
					<type>object</type>
					<description>The next item relative to the active item.</description>
					<properties>
						<property readonly="true" >
							<name>has</name>
							<type>boolean</type>
							<description>Whether there is an next item.</description>
						</property>
						<property readonly="true" >
							<name>id</name>
							<type>string</type>
							<description>The ID of the next item.</description>
						</property>
						<property readonly="true" >
							<name>value</name>
							<type>string</type>
							<description>The value of the next item.</description>
						</property>
					</properties>
				</property>
			</properties>
		</property>
		<property readonly="true" >
			<name>state</name>
			<type>object</type>
			<description>State information object. This can be read with A5.ViewBox.getState and written with A5.ViewBox.setState. And can be used to store state information that can be accessed in view box layout templates.</description>
		</property>
		<property optional="true" >
			<name>onBeforeDraw</name>
			<type>function()</type>
			<description>Event fired before the contents of the view box are drawn.</description>
		</property>
		<property optional="true" >
			<name>onDraw</name>
			<type>function(element)</type>
			<description>Event fired when the contents of the view box are drawn.</description>
			<arguments>
				<argument>
					<name>element</name>
					<type>element</type>
					<description>The view box element.</description>
				</argument>
			</arguments>
		</property>
		<property optional="true" >
			<name>onBeforePopulate</name>
			<type>function(data)</type>
			<description>Event fired before the view box is populated with data. If a value of false is returned by the function the populate will not be done.</description>
			<arguments>
				<argument>
					<name>data</name>
					<type>object</type>
					<description>The data the view box is being populated with.</description>
				</argument>
			</arguments>
		</property>
		<property optional="true" >
			<name>onPopulate</name>
			<type>function(data)</type>
			<description>Event fired when the view box is populated with data.</description>
			<arguments>
				<argument>
					<name>data</name>
					<type>object</type>
					<description>The data the view box was populated with.</description>
				</argument>
			</arguments>
		</property>
		<property optional="true" >
			<name>onBeforeSelectBegin</name>
			<type>function(value)</type>
			<description>Event fired before the selection is begun. The onSelect/onBeforeSelect will fire for each item being selected. The onBeforeSelectBegin will fire only once. If a value of false is returned, then the selection is canceled.</description>
			<arguments>
				<argument>
					<name>value</name>
					<type>string</type>
					<description>The value of the view box.</description>
				</argument>
			</arguments>
		</property>
		<property optional="true" >
			<name>onBeforeSelect</name>
			<type>function(value,itemArguments,item,element,event)</type>
			<description>Default event fired before an item in the view box is selected. If a value of false is returned by the function the selection will not be done.</description>
			<arguments>
				<argument>
					<name>value</name>
					<type>string</type>
					<description>The value being selected.</description>
				</argument>
				<argument>
					<name>itemArguments</name>
					<type>string</type>
					<description>Arguments from the specific item selected.</description>
				</argument>
				<argument>
					<name>item</name>
					<type>object</type>
					<description>The item definition object.</description>
				</argument>
				<argument>
					<name>element</name>
					<type>element</type>
					<description>The element being selected.</description>
				</argument>
				<argument>
					<name>event</name>
					<types><type>event</type><type>boolean</type></types>
					<description>The event object. If the selection was programmatic, then the event will be false.</description>
				</argument>
			</arguments>
		</property>
		<property optional="true" >
			<name>onSelect</name>
			<type>function(value,itemArguments,item,element,event)</type>
			<description>Default event fired when an item in the view box is selected.</description>
			<arguments>
				<argument>
					<name>value</name>
					<type>string</type>
					<description>The value selected.</description>
				</argument>
				<argument>
					<name>itemArguments</name>
					<type>string</type>
					<description>Arguments from the specific item selected.</description>
				</argument>
				<argument>
					<name>item</name>
					<type>object</type>
					<description>The item definition object.</description>
				</argument>
				<argument>
					<name>element</name>
					<type>element</type>
					<description>The element selected.</description>
				</argument>
				<argument>
					<name>event</name>
					<types><type>event</type><type>boolean</type></types>
					<description>The event object. If the selection was programmatic, then the event will be false.</description>
				</argument>
			</arguments>
		</property>
		<property optional="true" >
			<name>onSelectComplete</name>
			<type>function(value)</type>
			<description>Event fired when the selection is complete. The onSelect/onBeforeSelect will fire for each item being selected. The onSelectionComplete will fire only once.</description>
			<arguments>
				<argument>
					<name>value</name>
					<type>string</type>
					<description>The value of the view box.</description>
				</argument>
			</arguments>
		</property>
		<property optional="true" >
			<name>onChange</name>
			<type>function(value)</type>
			<description>Event fired when the value of the view box changes.</description>
			<arguments>
				<argument>
					<name>value</name>
					<type>string</type>
					<description>The value of the view box.</description>
				</argument>
			</arguments>
		</property>
		<property optional="true" >
			<name>onClick</name>
			<type>function(value,itemArguments,item,element,event)</type>
			<description>Default event fired when an item in the view box is clicked.</description>
			<arguments>
				<argument>
					<name>value</name>
					<type>string</type>
					<description>The value clicked.</description>
				</argument>
				<argument>
					<name>itemArguments</name>
					<type>string</type>
					<description>Arguments from the specific item clicked.</description>
				</argument>
				<argument>
					<name>item</name>
					<type>object</type>
					<description>The item definition object.</description>
				</argument>
				<argument>
					<name>element</name>
					<type>element</type>
					<description>The element clicked.</description>
				</argument>
				<argument>
					<name>event</name>
					<types><type>event</type><type>boolean</type></types>
					<description>The event object.</description>
				</argument>
			</arguments>
		</property>
		<property optional="true" >
			<name>onDblClick</name>
			<type>function(value,itemArguments,item,element,event)</type>
			<description>Default event fired when an item in the view box is double clicked.</description>
			<arguments>
				<argument>
					<name>value</name>
					<type>string</type>
					<description>The value double clicked.</description>
				</argument>
				<argument>
					<name>itemArguments</name>
					<type>string</type>
					<description>Arguments from the specific item double clicked.</description>
				</argument>
				<argument>
					<name>item</name>
					<type>object</type>
					<description>The item definition object.</description>
				</argument>
				<argument>
					<name>element</name>
					<type>element</type>
					<description>The element double clicked.</description>
				</argument>
				<argument>
					<name>event</name>
					<types><type>event</type><type>boolean</type></types>
					<description>The event object.</description>
				</argument>
			</arguments>
		</property>
		<property optional="true" >
			<name>onRightClick</name>
			<type>function(value,itemArguments,item,element,event)</type>
			<description>Default event fired when an item in the view box is context clicked.</description>
			<arguments>
				<argument>
					<name>value</name>
					<type>string</type>
					<description>The value context clicked.</description>
				</argument>
				<argument>
					<name>itemArguments</name>
					<type>string</type>
					<description>Arguments from the specific item context clicked.</description>
				</argument>
				<argument>
					<name>item</name>
					<type>object</type>
					<description>The item definition object.</description>
				</argument>
				<argument>
					<name>element</name>
					<type>element</type>
					<description>The element context clicked.</description>
				</argument>
				<argument>
					<name>event</name>
					<types><type>event</type><type>boolean</type></types>
					<description>The event object.</description>
				</argument>
			</arguments>
		</property>
		<property optional="true" >
			<name>onDown</name>
			<type>function(value,itemArguments,item,element,event)</type>
			<description>Default event fired when an item in the view box is pressed down.</description>
			<arguments>
				<argument>
					<name>value</name>
					<type>string</type>
					<description>The value pressed down.</description>
				</argument>
				<argument>
					<name>itemArguments</name>
					<type>string</type>
					<description>Arguments from the specific item pressed down.</description>
				</argument>
				<argument>
					<name>item</name>
					<type>object</type>
					<description>The item definition object.</description>
				</argument>
				<argument>
					<name>element</name>
					<type>element</type>
					<description>The element pressed down.</description>
				</argument>
				<argument>
					<name>event</name>
					<types><type>event</type><type>boolean</type></types>
					<description>The event object.</description>
				</argument>
			</arguments>
		</property>
		<property optional="true" >
			<name>onUp</name>
			<type>function(value,itemArguments,item,element,event)</type>
			<description>Default event fired when an item in the view box is release.</description>
			<arguments>
				<argument>
					<name>value</name>
					<type>string</type>
					<description>The value release on.</description>
				</argument>
				<argument>
					<name>itemArguments</name>
					<type>string</type>
					<description>Arguments from the specific item release on.</description>
				</argument>
				<argument>
					<name>item</name>
					<type>object</type>
					<description>The item definition object.</description>
				</argument>
				<argument>
					<name>element</name>
					<type>element</type>
					<description>The element release on.</description>
				</argument>
				<argument>
					<name>event</name>
					<types><type>event</type><type>boolean</type></types>
					<description>The event object.</description>
				</argument>
			</arguments>
		</property>
		<property optional="true" >
			<name>onSwipe</name>
			<type>function(value,itemArguments,item,element,event)</type>
			<description>Default event fired when an item in the view box is swiped.</description>
			<arguments>
				<argument>
					<name>value</name>
					<type>string</type>
					<description>The value swiped on.</description>
				</argument>
				<argument>
					<name>itemArguments</name>
					<type>string</type>
					<description>Arguments from the specific item swiped on.</description>
				</argument>
				<argument>
					<name>item</name>
					<type>object</type>
					<description>The item definition object.</description>
				</argument>
				<argument>
					<name>element</name>
					<type>element</type>
					<description>The element swiped on.</description>
				</argument>
				<argument>
					<name>event</name>
					<types><type>event</type><type>boolean</type></types>
					<description>The event object.</description>
				</argument>
			</arguments>
		</property>
		<property optional="true" >
			<name>onDownHold</name>
			<type>function(value,itemArguments,item,element,event)</type>
			<description>Default event fired when an item in the view box is pressed and held.</description>
			<arguments>
				<argument>
					<name>value</name>
					<type>string</type>
					<description>The value  pressed and held.</description>
				</argument>
				<argument>
					<name>itemArguments</name>
					<type>string</type>
					<description>Arguments from the specific item  pressed and held.</description>
				</argument>
				<argument>
					<name>item</name>
					<type>object</type>
					<description>The item definition object.</description>
				</argument>
				<argument>
					<name>element</name>
					<type>element</type>
					<description>The element  pressed and held.</description>
				</argument>
				<argument>
					<name>event</name>
					<types><type>event</type><type>boolean</type></types>
					<description>The event object.</description>
				</argument>
			</arguments>
		</property>
		<property optional="true" >
			<name>onFocus</name>
			<type>function()</type>
			<description>Event fired when the view box receives focus.</description>
		</property>
		<property optional="true" >
			<name>onBlur</name>
			<type>function()</type>
			<description>Event fired when the view box looses focus.</description>
		</property>
	</properties>
	<note> To get a pointer to the A5.ViewBox class in a UX see *[link: dialog.object.getControl Method Object]*.</note>
	<!--list:* Method-->
	<!--list:*index.xml-->
	<annotations>/Ref/Client_Api/A5/ViewBox_class/index.xml</annotations>
</page>
