<page api="js" generated="true">
	<shortlink>api client api a5 panellayout class</shortlink>
	<topic>A5.PanelLayout Class</topic>
	<arguments>
		<argument>
			<name>panels</name>
			<type>array</type>
			<description>The panels to use in the layout. See **[link:A5.PanelLayoutPanel Object]**.</description>
		</argument>
		<argument>
			<name>settings</name>
			<type>object</type>
			<description>Settings for the panel layout. This will override the initial values of the properties of the A5.PanelLayout class.</description>
		</argument>
	</arguments>
	<description> Panel layout.</description>
	<discussion>
<p>
The panel layout can be used to layout multiple  panels either horizontally or vertically.
</p>
<p>
Panels in the layout can be docked, so that they are viewed by request only.
Docking can be done either at the start (before) or end (after) the flow of the layout.
Panels can be set to auto collapse when there is not enough space to show all panels.
</p>
<p>
The layout will dynamically hide panels if there is not enough room to show them, even if the panels are not set to auto dock.
When this happens, navigating the hidden panels can be accomplished by using the A5.PanelLayout.firstPanel/A5.PanelLayout.prevPanel/A5.PanelLayout.nextPanel/A5.PanelLayout.lastPanel methods, or setting a particular panel active using A5.PanelLayout.setActivePanel.
</p>
<p>
Layouts also support flow collapsing - useful to allow the user to temporarily increase the size of a portion of the layout.
When the A5.PanelLayout.collapseFlow method is used, all the panels before the indicated panel will be collapsed, so that the indicated panel is the first visible panel.
If multiple panels are collapse, the expanding of them may be done in the reverse order of which they were collapsed, or all collapsing can be removed at once.
</p>
</discussion>
	<properties>
		<property optional="true" >
			<name>theme</name>
			<type>string</type>
			<description>The theme to use on the panel layout.</description>
		</property>
		<property optional="true" >
			<name>override</name>
			<type>string</type>
			<description>The overrides to use on the panel layout.</description>
		</property>
		<property optional="true" >
			<name>renderMode</name>
			<type>string</type>
			<description>If the panel layout is in a navigator or layout, renderMode controls when the panel layout is created. A blank value (the default) will create the panel automatically when the parent is created. A value of "auto-create" will create the panel when it becomes. A value of "auto-create-destroy" will do the same, but also destroy it when it is hidden.</description>
		</property>
		<property optional="true" >
			<name>flow</name>
			<type>string</type>
			<description>The flow of the panels in the layout. Values can be "ltr" (left to right), "rtl" (right to left), "ttb" (top to bottom) or "btt" (bottom to top). The default is "ltr".</description>
		</property>
		<property optional="true" >
			<name>placeholderHTML</name>
			<type>string</type>
			<description>If the panel layout is created dynamically the placeholder HTML to use until it has been created. This can be used to display a waiting message while the panel is being rendered.</description>
		</property>
		<property optional="true" >
			<name>className</name>
			<type>string</type>
			<description>The class name to put on the panel layout.</description>
		</property>
		<property optional="true" >
			<name>header</name>
			<type>object</type>
			<description>The panel header settings.</description>
			<properties>
				<property optional="true" >
					<name>show</name>
					<type>boolean</type>
					<description>Whether or not to show the panel header.</description>
				</property>
				<property optional="true" >
					<name>html</name>
					<type>string</type>
					<description>The HTML to put in the panel header. The placeholders "{panel.id}" (the ID of the panel), "{panel.name}" (the name of the panel if it is in a panel navigator or layout) and "{panel.title}" (the title of the panel if it is in a panel navigator or layout) will be automatically replaced.</description>
				</property>
				<property optional="true" >
					<name>className</name>
					<type>string</type>
					<description>The class name to put on the panel header.</description>
				</property>
				<property optional="true" >
					<name>style</name>
					<type>string</type>
					<description>The inline CSS to put on the panel header.</description>
				</property>
			</properties>
		</property>
		<property optional="true" >
			<name>body</name>
			<type>object</type>
			<description>The panel body settings.</description>
			<properties>
				<property optional="true" >
					<name>className</name>
					<type>string</type>
					<description>The class name to put on the panel body.</description>
				</property>
				<property optional="true" >
					<name>ltrClassName</name>
					<type>string</type>
					<description>The class name to put on the panel body when the flow is "ltr".</description>
				</property>
				<property optional="true" >
					<name>rtlClassName</name>
					<type>string</type>
					<description>The class name to put on the panel body when the flow is "rtl".</description>
				</property>
				<property optional="true" >
					<name>ttbClassName</name>
					<type>string</type>
					<description>The class name to put on the panel body when the flow is "ttb".</description>
				</property>
				<property optional="true" >
					<name>bttClassName</name>
					<type>string</type>
					<description>The class name to put on the panel body when the flow is "btt".</description>
				</property>
				<property optional="true" >
					<name>style</name>
					<type>string</type>
					<description>The inline CSS to put on the panel body.</description>
				</property>
			</properties>
		</property>
		<property optional="true" >
			<name>footer</name>
			<type>object</type>
			<description>The panel footer settings.</description>
			<properties>
				<property optional="true" >
					<name>show</name>
					<type>boolean</type>
					<description>Whether or not to show the panel footer.</description>
				</property>
				<property optional="true" >
					<name>html</name>
					<type>string</type>
					<description>The HTML to put in the panel footer. The placeholders "{panel.id}" (the ID of the panel), "{panel.name}" (the name of the panel if it is in a panel navigator or layout) and "{panel.title}" (the title of the panel if it is in a panel navigator or layout) will be automatically replaced.</description>
				</property>
				<property optional="true" >
					<name>className</name>
					<type>string</type>
					<description>The class name to put on the panel footer.</description>
				</property>
				<property optional="true" >
					<name>style</name>
					<type>string</type>
					<description>The inline CSS to put on the panel footer.</description>
				</property>
			</properties>
		</property>
		<property optional="true" >
			<name>overlay</name>
			<type>object</type>
			<description>The panel overlay settings. The panel overlay is for HTML elements to be absolutely positioned over the panel (such as floating buttons).</description>
			<properties>
				<property optional="true" >
					<name>show</name>
					<type>boolean</type>
					<description>Whether or not to show the panel overlay.</description>
				</property>
				<property optional="true" >
					<name>html</name>
					<type>string</type>
					<description>The HTML to put in the panel overlay. The placeholders "{panel.id}" (the ID of the panel), "{panel.name}" (the name of the panel if it is in a panel navigator or layout) and "{panel.title}" (the title of the panel if it is in a panel navigator or layout) will be automatically replaced.</description>
				</property>
			</properties>
		</property>
		<property optional="true" >
			<name>dock</name>
			<type>object</type>
			<description>The docked panel settings.</description>
			<properties>
				<property optional="true" >
					<name>method</name>
					<type>string</type>
					<description>The mother by which to show docks. Values can be "overlay" (float docked panels over the main layout), "underlay" (show docked panels as if they where hidden under the main layout) and "push" (show docks by pushing the main layout aside). The default is "overlay".</description>
				</property>
				<property optional="true" >
					<name>panel</name>
					<type>object</type>
					<description>Docked panel settings.</description>
					<properties>
						<property optional="true" >
							<name>beforeClassName</name>
							<type>string</type>
							<description>The class name to put on a docked panel if it is docked to the start of the flow.</description>
						</property>
						<property optional="true" >
							<name>afterClassName</name>
							<type>string</type>
							<description>The class name to put on a docked panel if it is docked to the end of the flow.</description>
						</property>
					</properties>
				</property>
				<property optional="true" >
					<name>flowLock</name>
					<type>object</type>
					<description>Flow lock settings for when a dock panel is shown.</description>
					<properties>
						<property optional="true" >
							<name>has</name>
							<type>boolean</type>
							<description>Whether or not to lock the flow so the user cannot interact with non-docked panels when a docked panel is shown.</description>
						</property>
						<property optional="true" >
							<name>className</name>
							<type>string</type>
							<description>The class name to put on the element used to lock the flow.</description>
						</property>
					</properties>
				</property>
			</properties>
		</property>
		<property optional="true" >
			<name>controls</name>
			<type>object</type>
			<description>Layout control bindings.</description>
			<properties>
				<property optional="true" >
					<name>prev</name>
					<type>object</type>
					<description>A previous panel button.</description>
					<properties>
						<property optional="true" >
							<name>has</name>
							<type>boolean</type>
							<description>Whether or not the panel layout has a previous panel button.</description>
						</property>
						<property optional="true" >
							<name>id</name>
							<type>string</type>
							<description>The ID of the button element (which must already be in the DOM). The default is "{panel.id}.CTRL.PREV".</description>
						</property>
						<property optional="true" >
							<name>settings</name>
							<type>object</type>
							<description>The button settings.</description>
						</property>
					</properties>
				</property>
				<property optional="true" >
					<name>next</name>
					<type>object</type>
					<description>A next panel button.</description>
					<properties>
						<property optional="true" >
							<name>has</name>
							<type>boolean</type>
							<description>Whether or not the panel layout has a next panel button.</description>
						</property>
						<property optional="true" >
							<name>id</name>
							<type>string</type>
							<description>The ID of the button element (which must already be in the DOM). The default is "{panel.id}.CTRL.NEXT".</description>
						</property>
						<property optional="true" >
							<name>settings</name>
							<type>object</type>
							<description>The button settings.</description>
						</property>
					</properties>
				</property>
				<property optional="true" >
					<name>dock</name>
					<type>array</type>
					<description>An array of buttons to bind to the showing of individual docked panels. The array should contain objects, each of which have an "id" property with the id of the button, a "panel" property with the name of the panel in the layout, and a "settings" property with the button settings. The "panel" property can be set to one of three system options instead of a panel name. These are "*before" (all the panels docked at the start), "*after" (all the panels docked at the end) and "*generic" (all docked panels). These values will dropdown a menu from the button with the a list of all the docked panels at the start and/or end of the layout.</description>
				</property>
			</properties>
		</property>
		<property optional="true" >
			<name>animation</name>
			<type>object</type>
			<description>Re-layout animation.</description>
			<properties>
				<property optional="true" >
					<name>type</name>
					<type>string</type>
					<description>The type of animation to use. Values can be "slide" (the default) or "none".</description>
				</property>
				<property optional="true" >
					<name>duration</name>
					<type>number</type>
					<description>How long the animation should take in millisecond. The default is 400.</description>
				</property>
			</properties>
		</property>
		<property readonly="true" >
			<name>state</name>
			<type>object</type>
			<description>The current state of the panel layout.</description>
			<properties>
				<property readonly="true" >
					<name>activePanel</name>
					<type>string</type>
					<description>The name of the active panel.</description>
				</property>
				<property readonly="true" >
					<name>firstPanel</name>
					<type>string</type>
					<description>The name of the first panel visible in the layout.</description>
				</property>
				<property readonly="true" >
					<name>lastPanel</name>
					<type>string</type>
					<description>The name of the last panel visible in the layout.</description>
				</property>
				<property readonly="true" >
					<name>flowCollapsed</name>
					<type>boolean</type>
					<description>Whether or not the layout flow has been collapsed.</description>
				</property>
				<property readonly="true" >
					<name>hasPrevPanel</name>
					<type>boolean</type>
					<description>Whether or not there is a previous panel.</description>
				</property>
				<property readonly="true" >
					<name>prevPanel</name>
					<type>string</type>
					<description>The name of the previous panel.</description>
				</property>
				<property readonly="true" >
					<name>hasNextPanel</name>
					<type>boolean</type>
					<description>Whether or not there is a next panel.</description>
				</property>
				<property readonly="true" >
					<name>nextPanel</name>
					<type>string</type>
					<description>The name of the next panel.</description>
				</property>
				<property readonly="true" >
					<name>hasDockPanel</name>
					<type>boolean</type>
					<description>Whether or not there are any docked panels in the layout.</description>
				</property>
				<property readonly="true" >
					<name>beforeDockPanels</name>
					<type>array</type>
					<description>The names of all the panels docked to the start of the flow.</description>
				</property>
				<property readonly="true" >
					<name>afterDockPanels</name>
					<type>array</type>
					<description>The names of all the panels docked to the end of the flow.</description>
				</property>
				<property readonly="true" >
					<name>dockPanelShown</name>
					<type>boolean</type>
					<description>Whether or not a docked panel is shown.</description>
				</property>
				<property readonly="true" >
					<name>currentDockPanel</name>
					<type>string</type>
					<description>The name of the currently shown docked panel.</description>
				</property>
			</properties>
		</property>
		<property optional="true" >
			<name>onInitialize</name>
			<type>function()</type>
			<description>Event fired when the panel is initialized. This does not necessarily mean the panel elements have been created, but rather that the class was.</description>
		</property>
		<property optional="true" >
			<name>onSize</name>
			<type>function(data)</type>
			<description>Event fired when the panel is sized.</description>
			<arguments>
				<argument>
					<name>data</name>
					<type>object</type>
					<description>The sizing data.</description>
				</argument>
				<argument>
					<name>width</name>
					<type>number</type>
					<description>The width of the panel in pixels.</description>
				</argument>
				<argument>
					<name>height</name>
					<type>number</type>
					<description>The height of the panel in pixels.</description>
				</argument>
				<argument>
					<name>changed</name>
					<type>boolean</type>
					<description>Whether the size actually changed.</description>
				</argument>
				<argument>
					<name>old</name>
					<type>object</type>
					<description>The old size of the panel.</description>
				</argument>
				<argument>
					<name>width</name>
					<type>number</type>
					<description>The old width of the panel in pixels.</description>
				</argument>
				<argument>
					<name>height</name>
					<type>number</type>
					<description>The old height of the panel in pixels.</description>
				</argument>
			</arguments>
		</property>
		<property optional="true" >
			<name>onCreate</name>
			<type>function(element,bodyElement,headerElement,footerElement)</type>
			<description>Event fired when the panel is created.</description>
			<arguments>
				<argument>
					<name>element</name>
					<type>element</type>
					<description>The panel element.</description>
				</argument>
				<argument>
					<name>bodyElement</name>
					<type>element</type>
					<description>The panel body element.</description>
				</argument>
				<argument>
					<name>headerElement</name>
					<type>element</type>
					<description>The panel header element.</description>
				</argument>
				<argument>
					<name>footerElement</name>
					<type>element</type>
					<description>The panel footer element.</description>
				</argument>
			</arguments>
		</property>
		<property optional="true" >
			<name>onBeforeDestroy</name>
			<type>function()</type>
			<description>Event fired before the panel is destroyed.</description>
		</property>
		<property optional="true" >
			<name>onDestroy</name>
			<type>function()</type>
			<description>Event fired when the panel is destroyed.</description>
		</property>
		<property optional="true" >
			<name>onLayoutRefresh</name>
			<type>function()</type>
			<description>Event fired when the panel layout is refreshed.</description>
		</property>
		<property optional="true" >
			<name>onDockPanelShow</name>
			<type>function(panel)</type>
			<description>Event fired when a docked panel is shown.</description>
			<arguments>
				<argument>
					<name>panel</name>
					<type>string</type>
					<description>The name of the dock panel shown.</description>
				</argument>
			</arguments>
		</property>
		<property optional="true" >
			<name>onDockPanelHide</name>
			<type>function(panel)</type>
			<description>Event fired when a docked panel is hidden.</description>
			<arguments>
				<argument>
					<name>panel</name>
					<type>string</type>
					<description>The name of the dock panel hidden.</description>
				</argument>
			</arguments>
		</property>
		<property optional="true" >
			<name>onBeforePanelActivate</name>
			<type>function()</type>
			<description>Event fired before a panel in the navigator is activated. Can return false to stop activation.</description>
		</property>
		<property optional="true" >
			<name>onPanelActivate</name>
			<type>function()</type>
			<description>Event fired when a panel in the navigator is activated.</description>
		</property>
	</properties>
	<!--list:* Method-->
	<!--list:*index.xml-->
</page>
