<page api="js" generated="true">
	<shortlink>api client api number toformat method</shortlink>
	<topic parent="Number" parentType="class" elementName="toFormat Method" >Number.toFormat Method</topic>
	<prototype>Number.toFormat(format)</prototype>
	<arguments>
		<argument>
			<name>format</name>
			<type>string</type>
			<description>The format to return the number in.</description>
		</argument>
	</arguments>
	<returns>
		<return>
			<name>value</name>
			<type>string</type>
			<description>A string with the result of the format when applied to the number.</description>
		</return>
	</returns>
	<description> Extension to the native number variable to convert a number into a formatted string.</description>
	<discussion>
<p>
The Number.toFormat method can be used on numbers to convert them to formatted strings.
The passed in format allows for complex operations to be preformed on the number during the conversion to a string.
</p>
<p>
"#" is used to represent an optional digit. If there is an explicit digit at the corresponding location in the number then that digit will be output - otherwise no character will be output.
</p>
<p>
"0" is used to represent a required digit. Unlike "#" if there is no explicit digit then a "0" will be output.
</p>
<p>
"_" is used to represent an optional digit. Unlike "#" a " " will be output if there is no explicit value.
</p>
<p>
"*" is used to represent no rounding. This will allow the number to be formatted to show all decimals.
"=" at the beginning of a format means the following format is a mask, and each digit of the number will be sequentially output in the mask. For example to store a phone number as a number, but present it in the standard format.
</p>
<p>
"]" at the end of a format (or before a "&lt;" or "&gt;") means round to zero.
</p>
<p>
"[" when used in conjunction with "]" means force "0" (e.g. 123 with a format of "#[00]" would output "100").
</p>
<p>
"&lt;" at the end of a format will round the decimal up. If it occurs before a "]" it will behave like the "[", only rounding the integer up.
</p>
<p>
"&gt;" behaves exactly like "&lt;" only rounding down instead of up.
</p>
<p>
";" can be used to allow for multiple formats. It can be used with an if statement (see below), or without. When used without, the first format will be used for a positive number, the second for a negative number, and optionally the third will be output when the number is equal to zero.
</p>
<p>
"if(expr)" at beginning of a format will use the expression expression ("expr" to be replaced with an expression where "n" is equal to the value of the number) for choosing one of the two formats (separated be a ";") to use.
</p>
<p>
"=(expr)" at the end of a format will allow for a custom expression ("expr" to be replaced with an expression where "n" is equal to the value of the number) to be preformed on the number before it is formatted.
</p>
<p>
"-/-" will force the decimal to be output as a fraction. To specify the denominator, a value can be put in its place. For example "-/100" will result in the fractional value of the number being rounded to the nearest hundredth.
</p>
<p>
"\" can be used to escape format characters.
</p>
<p>
The format will automatically detect the character used as the (optional) thousands separator, and the decimal.
</p>
</discussion>
	<example code="js">
var num = 1020.5893;
var numStr = '';
// currency format
numStr = num.toFormat('$#,##0.00'); // numStr = '$1,020.59'
// comma for decimal and space for thousands separator format
numStr = num.toFormat('# ##0,00'); // numStr = '1 020,59'
// round down to two decimal places
numStr = num.toFormat('0.00&gt;'); // numStr = '1020.58'
// show decimal as a fraction
num = 20.25;
numStr = num.toFormat('#,##0.* and -/-'); // numStr = '20 and 1/4'
// positive, negative and zero formats in single format
numStr = num.toFormat('$#,##0.00;$ (#,##0.00);------'); // numStr = '$1,020.25'
num = -10.34;
numStr = num.toFormat('$#,##0.00;$ (#,##0.00);------'); // numStr = '$ (10.34)'
num = 0;
numStr = num.toFormat('$#,##0.00;$ (#,##0.00);------'); // numStr = '------'
// mask format
num = 1234567890;</example>
	<annotations>/Ref/Client_Api/JavaScript Extensions/Number/Number.toFormat Method.xml</annotations>
</page>
