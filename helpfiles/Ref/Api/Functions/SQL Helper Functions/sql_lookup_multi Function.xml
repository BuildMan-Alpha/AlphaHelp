<page api="xb" build="7043">
    <shortlink>SQL_lookup_multi function</shortlink>
    <topic>SQL_lookup_multi Function</topic>
    <description>
        <p>Does a lookup into a SQL table to retrieve multiple values from a record.</p>
    </description>
    <prototypes>
        <prototype>DIM result as P = SQL_lookup_multi(C conn, C table, C filter, C fieldlist [, SQL::Arguments Args [, L portableSQL]])</prototype>
        <prototype>DIM result as P = SQL_lookup_multi(SQL::Connection conn, C table, C filter, C fieldlist [, SQL::Arguments Args [, L portableSQL]])</prototype>
    </prototypes>
    <arguments>
        <argument>
            <name>conn</name>
            <types>
                <type>SQL::Connection</type>
                <type>C</type>
            </types>
            <description>
                <p>An open SQL::Connection object, named SQL connection string, or ad-hoc SQL connection string.</p>
                <p>Using an open SQL::Connection will improve the performance of the lookup.</p>
            </description>
        </argument>
        <argument>
            <name>table</name>
            <type>C</type>
            <description>
                <p>The name of the SQL table to query.</p>
            </description>
        </argument>
        <argument>
            <name>filter</name>
            <type>C</type>
            <description>
                <p>Used to uniquely identify the record to lookup. The *[xb:filter]* can use arguments (e.g. *[xb:city = :what_city and state = :what_state]*)</p>
            </description>
        </argument>
        <argument>
            <name>fields</name>
            <type>C</type>
            <description>
                <p>A comma delimited list of fields to return.</p>
            </description>
        </argument>
        <argument optional="true">
            <name>Args</name>
            <type>SQL::Arguments</type>
            <description>
                <p>A SQL::Arguments object that defines the arguments used in the filter. Required if the filter uses SQL arguments.</p>
            </description>
        </argument>
        <argument optional="true">
            <name>portableSQL</name>
            <type>L</type>
            <description>
                <p>Default = *[xb:.f.]*. Indicates whether or not the query should be executed using Portable SQL.</p>
            </description>
        </argument>
    </arguments>
    <returns>
        <return>
            <name>result</name>
            <type>P</type>
            <description>
                <p>Returns an Xbasic object with properties for each field returned by the query. If multiple records match the filter, only data from the first record is returned. If no records match, returns an empty object.</p>
                <p>If an error occurs (e.g. the specified table doesn't exist), returns an object with the following properties:</p>
            </description>
            <properties>
                <property>
                    <name>errorText</name>
                    <type>C</type>
                    <description>A description of the error that occurred, if any.</description>
                </property>
                <property>
                    <name>flagError</name>
                    <type>L</type>
                    <description>If *[xb:.t.]*, an error occurred. Check the value of *[xb:errorText]* for information about the error.</description>
                </property>
            </properties>
        </return>
    </returns>
    <discussion>
        <p></p>
    </discussion>
    <example code="xb"><![CDATA[dim result as p
dim cs as c = "::Name::AADemo-Northwind"
result = sql_lookup_multi(cs,"customers","customerid = 'ALFKI'","city,country,contactname")

? result
= city = "Berlin"
contactname = "Maria Anders"
country = "Germany"


' Using Arguments:
dim args as SQL::Arguments
args.set("what_country","USA")
result = sql_lookup_multi(cs,"customers","country = :what_country","city,country,contactname",args)

? result
= city = "Eugene"
contactname = "Howard Snyder"
country = "USA"]]></example>
    <tip>
        <p>If you want to retrieve all records that match the filter, use [sql_records_get()] or [sql_query()].</p>
    </tip>
    <see>
        <ref link="xbasic%20guide%20sql">Working With SQL Data Using Xbasic</ref>
    </see>
    <links>
        <link link="api sql records get function">sql_records_get()</link>
        <link link="api sql query function">sql_query()</link>
    </links>
</page>