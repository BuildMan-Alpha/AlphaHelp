<page api="xb" build="4167">
    <shortlink>api sql import function</shortlink>
    <topic>sql_import Function</topic>
    <prototypes>
        <prototype>result as P = sql_import(connectionString as C, tableName as C, tableOwner as C, data as C [, replicateIdentity as L [, fieldMap as C]])</prototype>
    </prototypes>
    <arguments>
        <argument>
            <name>connectionString</name>
            <type>C</type>
            <description>The connection string (either a named or explicit connection string. If named, the *[xb:::name::]* prefix is optional)</description>
        </argument>
        <argument>
            <name>tableName</name>
            <type>C</type>
            <description>The name of the table into which you want to import data.</description>
        </argument>
        <argument>
            <name>tableOwner</name>
            <type>C</type>
            <description>The owner of the table into which you want to import data.</description>
        </argument>
        <argument>
            <name>data</name>
            <type>C</type>
            <description>The data to be imported. Can be a CSV (comma separated value) or JSON formatted text or an Excel (.xsl, .xslx) file. See examples below.</description>
        </argument>
        <argument optional="true">
            <name>replicateIdentity</name>
            <type>L</type>
            <description>.t. or .f. - defaults to .f.. Should only be set to .t. if you are importing into an empty table. If .t. then values for the auto-increment primary key (if any) that are supplied in the input data are explicitly set in the target table.</description>
        </argument>
        <argument optional="true">
            <name>fieldMap</name>
            <type>C</type>
            <description>If the columns in the input data do not match the field names in the target SQL table you can specify a map. The map is a crlf delimited string of field pairs. See example below.</description>
        </argument>
    </arguments>
    <returns>
        <return>
            <name>result</name>
            <type>P</type>
            <description>Returns an object with these properties:</description>
            <properties>
                <property readonly="true">
                    <name>error</name>
                    <type>L</type>
                    <description>Either .t. or .f., depending on whether the operation succeeded.</description>
                </property>
                <property readonly="true">
                    <name>errorText</name>
                    <type>C</type>
                    <description>The description of the error if an error occurred.</description>
                </property>
            </properties>
        </return>
    </returns>
    <description>Imports CSV or JSON data into an existing SQL table.</description>
    <discussion>The *[xb:sql_import()]* function is a helper function that imports CSV or JSON data into a SQL table.</discussion>
    <sections>
        <section>
            <note>The function is called a 'helper' function because it simply wraps the low level AlphaDAO methods for doing a bulk insert into a SQL table.</note>
        </section>
        <section>
            <title>Example: fieldMap</title>
            <description>Assume that the input data is as follows</description>
            <example><![CDATA[fname,lname
fred,smith
john,jones]]></example>
        </section>
        <section>
            <description>
                <p>Assume that the target table has column names of *[xb:firstName]* and *[xb:lastName]*.</p>
                <p>You would need to specify the following *[xb:fieldMap]*:</p>
            </description>
            <example><![CDATA[fname=firstName
lname=lastName]]></example>
        </section>
        <section>
            <description>Example:</description>
            <example code="xb"><![CDATA[dim cs as c
cs = "mydata"
tablename = "table1"
data = <<%str%
id,name,notes,dob,number
1,"Jones, Amy","Here are some notes",1992-12-18,34.56
%str%

'replicateIdentity = .f.
map = "name=fullname"

dim p as p
p = sql_import(cs,tablename,"", data,replicateIdentity,map)

?p.error

= .f.]]></example>
        </section>
        <section>
            <title>Example: Import Excel File</title>
            <example code="xb"><![CDATA[' the "::Name::" prefix is optional.
' cs = "conn" is the same as writing cs = "::Name::conn"
dim cs as c = "conn"
dim tablename as c = "Customers2"
dim data as c = "C:\path\to\sampleExcelData.xlsx"

dim result as p
p = sql_import(cs,tablename,"",data)

? p
= error = .F.
errorText = ""]]></example>
        </section>
        <section>
            <title>Example: Import JSON</title>
            <description>
                <p>JSON can also be imported into a SQL table using the *[xb:sql_import()]* function. The JSON fields must match the column names in the table.</p>
                <p>In the example below, JSON is inserted into a MySQL table called "roles":</p>
            </description>
            <example code="xb"><![CDATA[dim json as c =<<%json%
[
	{"first":"Juliet","last":"Adams"},
	{"first":"Tom","last":"Jones"},
	{"first":"Betty","last":"Smith"},
	{"first":"Pete","last":"Marshall"},
	{"first":"Victoria","last":"Winslow"},
	{"first":"Daniel","last":"Brown"}
]
%json%

? sql_import("::Name::conn","roles","",json)
= errorText = ""
haserror = .F.
recordsImported = 6

? sql_records_get("::Name::conn","SELECT * from roles","","")
= 1|Juliet|Adams|
2|Tom|Jones|
3|Betty|Smith|
4|Pete|Marshall|
5|Victoria|Winslow|
6|Daniel|Brown|]]></example>
        </section>
        <section>
            <description>
                <p>If the JSON field names do not match, a mapping can be specified that defines how to map the JSON data to the table columns:</p>
            </description>
            <example code="xb"><![CDATA[dim json2 as c =<<%json%
[
	{"firstname":"Yvette","lastname":"Eve","main_role":"CEO"},
	{"firstname":"Earl","lastname":"Grey","main_role":"Staff"}
]
%json%

dim map as c =<<%txt%
firstname=first
lastname=last
main_role=role
%txt%

? sql_import("::Name::conn","roles","",json2,.f.,map)
= errorText = ""
haserror = .F.
recordsImported = 2

? sql_records_get("::Name::conn","SELECT * FROM roles WHERE ID > 6","","")
= 7|Yvette|Eve|CEO
8|Earl|Grey|Staff]]></example>
        </section>
        <section>
            <description>
                <p>The MySQL statement to create the "roles" table is below:</p>
            </description>
            <example code="sql"><![CDATA[CREATE TABLE 'roles' (
  'id' int(11) NOT NULL AUTO_INCREMENT,
  'first' varchar(60) NOT NULL,
  'last' varchar(60) NOT NULL,
  'role' varchar(45),
  PRIMARY KEY ('id')
) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;]]></example>
        </section>
    </sections>
</page>