<page api="xb" build="4161">
    <shortlink>api create table sql function</shortlink>
    <topic>create_table_sql Function</topic>
    <prototypes>
        <prototype>result as P = create_table_sql(fieldList as C, connectionString as C, tableName as C[, mode as C])</prototype>
        <prototype>result as P = create_table_sql(fieldList as C, connectionString as SQL::Connection, tableName as C[, mode as C])</prototype>
    </prototypes>
    <arguments>
        <argument>
            <name>fieldList</name>
            <type>C</type>
            <description>A crlf string or a JSON string defining the fields in the table to be created. See below for more information.</description>
        </argument>
        <argument>
            <name>connectionString</name>
            <types>
                <type>C</type>
                <type>SQL::Connection</type>
            </types>
            <description>The connection string to the database where you want to create the SQL table. Can be either a named connection string, or an explicit connection string.</description>
        </argument>
        <argument>
            <name>tableName</name>
            <type>C</type>
            <description>Name of the table to create.</description>
        </argument>
        <argument optional="true">
            <name>mode</name>
            <type>C</type>
            <description>Can be "skip" - does not create table if there is an existing table, or "overwrite" - overwrite any existing table </description>
        </argument>
    </arguments>
    <returns>
        <return>
            <name>result</name>
            <type>P</type>
            <description>Returns an Object with these properties:</description>
            <properties>
                <property readonly="true">
                    <name>hasError</name>
                    <type>L</type>
                    <description>.T. indicates an error occurred, otherwise .F.</description>
                </property>
                <property readonly="true">
                    <name>errorText</name>
                    <type>C</type>
                    <description>Description of the error if any occurred.</description>
                </property>
                <property readonly="true">
                    <name>sqlStatement</name>
                    <type>C</type>
                    <description>The SQL statement that was generated to create the table.</description>
                </property>
            </properties>
        </return>
    </returns>
    <description>Create a table in a SQL database.</description>
    <discussion>The *[xb:fieldList]* parameter can be either a JSON array of objects defining each field, or a crlf delimited list of pipe delimited properties.</discussion>
    <sections>
        <section>
            <description>Example of a CRLF delimited *[xb:fieldList]*:</description>
            <example code="xb"><![CDATA[id|N|6|0|AutoIncrement
name|c|20
dob|d
notes|m]]></example>
        </section>
        <section>
            <description>In this example a primary key (that is not an AutoIncrement fields) is defined</description>
            <example code="xb"><![CDATA[id|c|6||PrimaryKey
name|c|20
dob|d
notes|m]]></example>
        </section>
        <section>
            <description>When defining a primary key you can designate multiple columns:</description>
            <example code="xb"><![CDATA[firstname|c|20||PrimaryKey
lastname|c|20||PrimaryKey
dob|d
notes|m]]></example>
        </section>
        <section>
            <description>Example of a JSON *[xb:fieldList]*:</description>
            <example code="json"><![CDATA[[
    {"name": "id", "type": "numeric", "size": 6, "decimals" : 0, "autoIncrement": true},
    {"name": "name", "type": "character", "size": 20},
    {"name": "dob", "type": "date"},
    {"name": "notes", "type": "memo"}
]]]></example>
        </section>
        <section>
            <description>In this next example a primary key (that is not an Auto Increment field) is defined:</description>
            <example code="json"><![CDATA[[
    {"name": "id", "type": "character", "size": 6,  "primaryKey": true},
    {"name": "name", "type": "character", "size": 20},
    {"name": "dob", "type": "date"},
    {"name": "notes", "type": "memo"}
]]]></example>
            <note>Multiple fields can have the 'primaryKey' attribute set to true.</note>
        </section>
    </sections>
</page>