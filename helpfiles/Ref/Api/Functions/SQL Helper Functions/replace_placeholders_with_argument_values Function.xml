<page>
   <topic>replace_placeholders_with_argument_values Function</topic>
    <description>Replaces placeholders (enclosed in curly parens, e.g. {arg1}, {arg2}) in a string with values in a SQL::Arguments object.</description>
  
   <syntax>s Result = replace_placeholders_with_argument_values(C string ,P args [,L flagCorrectBackTicks ])</syntax>
   <arguments>
     <argument>
         <name>string</name>
         <description>String with placeholders</description>
     </argument>
     <argument>
         <name>args</name>
         <description>Argument structure with replacement values</description>
     </argument>
     <argument>
         <name>flagCorrectBackTicks</name>
         <description>Logical</description>
     </argument>
   </arguments>
 
   <example><![CDATA[dim args as sql::arguments
args.add("arg1","selwyn")
args.add("arg2",now())
args.add("arg3",23)
txt = "hello {arg1}, the time is now {arg2} and the day is {arg3}"
txt2 = replace_placeholders_with_argument_values(txt,args)
 
?txt2
= "hello selwyn, the time is now 01/25/2011 11:00:03 77 am and the day is 23"]]></example>
   
   <see>
      <ref>There are several other ways to process templates:</ref>
      <ref>The replace_variables_in_string Function substitutes the values of dot variables in a string</ref>
      <ref>e.g. "p.firstname" becomes "Jim"</ref>
      <ref>The evaluate_string Function replaces placeholders in a string with variable values and returns a transformed string.</ref>
      <ref>The compilestringtemplate Function is much more efficient than the evaluate_string Function when used inside a loop.</ref>
      <ref>The replace_arguments_in_string Function takes a string that contains SQL::Arguments in it (e.g. ":Arg1"</ref>
      <ref>as opposed to curly brackets) and replaces the arguments with actual values.</ref>
   </see>

<terms>sql helper,arguments,contains,function,logical,replacement,string,variable</terms>



</page>