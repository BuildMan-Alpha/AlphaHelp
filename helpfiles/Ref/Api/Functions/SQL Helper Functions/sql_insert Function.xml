<page api="xb">
    <shortlink>api sql insert function</shortlink>
    <topic>sql_insert Function</topic>
    <description>Inserts a record in a SQL table.</description>
    <prototype>p result = sql_insert(A connection,c tablename,c fieldValuePairs [, L execute])</prototype>
    <arguments>
        <argument>
            <name>connection</name>
            <types>
                <type>C</type>
                <type>SQL::Connection</type>
            </types>
            <description>An open SQL::connection object, a connection string, or a named connection string.</description>
        </argument>
        <argument>
            <name>tablename</name>
            <type>C</type>
            <description>Name of the table to update.</description>
        </argument>
        <argument>
            <name>fieldValuePairs</name>
            <type>C</type>
            <description>Fields to set with corresponding values. A cr-lf list of the form *[xb:fieldname=value]* or as JSON string (see [Building the fieldValuePairs Argument] section below). Date values must be specified using *[xb:yyyy/mm/dd]* format.</description>
        </argument>
        <argument optional="true">
            <name>execute</name>
            <type>L</type>
            <description>If false, the SQL is not executed. However, you can still examine the *[xb:result.sql]* and *[xb:result.arguments]* properties to see what SQL was generated.</description>
        </argument>
    </arguments>
    <returns>
        <return>
            <name>result</name>
            <type>P</type>
            <description>An object with the following properties:</description>
            <properties>
                <property>
                    <name>error</name>
                    <type>L</type>
                    <description>If *[xb:.t.]*, an error occurred. Otherwise *[xb:.f.]*.</description>
                </property>
                <property>
                    <name>errorText</name>
                    <type>C</type>
                    <description>A detailed description of the error - if any occurred.</description>
                </property>
                <property>
                    <name>sql</name>
                    <type>C</type>
                    <description>The SQL that was generated to execute the insert.</description>
                </property>
                <property>
                    <name>Arguments</name>
                    <type>C</type>
                    <description>The XML arguments generated for the insert.</description>
                </property>
                <property>
                    <name>lastInsertedIdentity</name>
                    <type>A</type>
                    <description>The value of the primary key field (if its value was auto-generated.)</description>
                </property>
            </properties>
        </return>
    </returns>
    <discussion>This function is just a wrapper around the Xbasic AlphaDAO commands to execute a SQL insert statement, but it convenient to use for simple cases.</discussion>
    <sections>
        <section>
            <example code="xb"><![CDATA[dim cn as sql::Connection
cn.open("::Name::myconnstring")
tablename = "mytable"
fieldsValuePairs = <<%str%
name=fred smith
date of birth=1952/12/18
salary=78000
%str%

p = sql_insert(cn,tablename,fieldsValuePairs)

?p.lastInsertedIdentity
= 5]]></example>
        </section>
        <section>
            <title>Building the fieldValuePairs Argument</title>
            <description>The *[xb:fieldValuePairs]* argument is a CR-LF string of values with the format *[xb:name=value]*. The parameter can be built several ways. For a list of static values, the parameter can be built using *[link:delimiters@xbasic delimiter]*. For example:</description>
            <example code="xb"><![CDATA[dim fieldsValuePairs as c 
data = <<%txt%
name=Fred
city=Boston
%txt%]]></example>
        </section>
        <section>
            <description>The *[xb:fieldValuePairs]* argument can also be built by concatenating multiple strings together using the *[xb:+]* operator and *[link:CRLF function]*. This allows you to dynamically specify the value to populate each field. EG:</description>
            <example code="xb"><![CDATA[dim fieldsValuePairs as c 
fieldsValuePairs = ""
fieldsValuePairs = fieldsValuePairs + "name=" + e.datasubmitted.name + crlf()
fieldsValuePairs = fieldsValuePairs + "city=" +e.datasubmitted.city + crlf()]]></example>
        </section>
        <section>
            <description>Field values can also be dynamically populated using the *[link:replace_variables_in_string function]* in combination with delimiters. The *[xb:replace_variables_in_string()]* function replaces variables in a character string with the value in the variable. Using this method makes your Xbasic script easier to read:</description>
            <example code="xb"><![CDATA[dim fieldsValuePairs as c 
fieldsValuePairs = <<%txt%
name=e2.name
city=e2.city
%txt%

dim e2 as p
e2.name = e.datasubmitted.name 
e2.city = e.datasubmitted.city
fieldsValuePairs = replace_variables_in_string(data,e2,"e2")]]></example>
        </section>
        <section>
            <description>The field value pairs can also be specified as a JSON object. For example:</description>
            <example code="xb"><![CDATA[fieldsValuePairs = <<%str%
{
    "name" : "fred smith",
    "date of birth" : "1954/11/25",
    "salary" : "78000"
}
%str%]]></example>
        </section>
    </sections>
    <links>
        <link href="#section1_Building the fieldValuePairs Argument">Building the fieldValuePairs Argument</link>
    </links>
    <see>
        <ref link="api sql lookup function">sql_lookup Function</ref>
        <ref link="api sql update function">sql_update Function</ref>
    </see>
</page>