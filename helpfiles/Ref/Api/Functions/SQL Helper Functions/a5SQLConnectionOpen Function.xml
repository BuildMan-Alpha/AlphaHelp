<page>
    <topic>a5SQLConnectionOpen Function</topic>
    <description>Opens a connection to a database. This method supports using dynamic connection syntax.</description>
    <syntax>Result_Flag as L = a5SQLConnectionOpen(cn as SQL::Connection, connString as c, session as p)</syntax>
    <arguments>
        <argument>
            <name>Result_Flag</name>
            <description>TRUE (.T.) if the operation was successful; otherwise FALSE (.F.)</description>
        </argument>
        <argument>
            <name>cn</name>
            <description>A SQL::Connection object.</description>
        </argument>
        <argument>
            <name>connString</name>
            <description>The name of the dynamic connection string to use. The dynamic connection string used must be defined in the session object.</description>
        </argument>
        <argument>
            <name>session</name>
            <description>The session object variable.</description>
        </argument>
    </arguments>
    <discussion>The <![CDATA[a5SQLConnectionOpen()]]> function can be used to open a connection to a SQL database. If the connection string uses the dynamic connection syntax, it will correctly resolve the correct connection string to use.
    </discussion>
    <sections>
        <section>
        <description>
            Take, for instance, the "standard" way of opening a connection:
        </description>
        <example><![CDATA[dim cs as c 
cs = ":name::myconnstring"
dim cn as sql::connection
dim flag as l 
flag = cn.open(cs)]]></example>
        </section>
        <section>
            <description>This can be rewritten using a dynamic connection using the <![CDATA[a5SQLConnectionOpen()]]> function as follows:</description>
            <example><![CDATA['using the a5SQLConnectionOpen() function
'assume that some prior code has set this session variable
session.__protected__conn1 = "::name::myOtherConnectionString"

dim cs as c 
cs = "::name::DynamicConnection_conn1"
dim cn as sql::connection
flag = a5SQLConnectionOpen(cn,cs,session)

]]></example>
        </section>
        <section>
            <description>
                <p>Since the connection string you are trying to open is a dynamic connection (because the connection string name starts with 'DynamicConnection') the actual connection string that will be opened is the connection string specified by session.__protected__conn1.</p>
                <p>This connection string is ::name::myOtherConnectionString. So the connection opened by this function will be ::name::myOtherConnectionString.</p>
            </description>
        </section>
    </sections>
    <see>
        <ref>Building Multi-Tenant Applications - Dynamic Connection Strings</ref>
    </see>
</page>