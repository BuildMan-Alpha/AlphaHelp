<page api="xb">
    <shortlink>api extract string function</shortlink>
   <topic>EXTRACT_STRING Function</topic>
    <description>Extracts the nth occurrences of a sub-string starting with 'start_string' and ending with 'end_string'.</description>

   <syntax>Substring as C = extract_string(string as C,start_string as C,end_string as C [,occurrence as N [,include_tags as L [,case_sensitive as L [,regex_safe as L]]]])</syntax>
   <arguments>
     <argument>
         <name>extract_string</name>
         <type>C</type>
         <description>The string extracted from Search_in_String. Character</description>
     </argument>
      <argument>
         <name>string</name>
         <type>C</type>
         <description>The string to examine for the find text.</description>
     </argument>
     <argument>
         <name>start_string</name>
         <type>C</type>
         <description>The beginning characters of the find text.</description>
     </argument>
     <argument>
         <name>end_string</name>
         <type>C</type>
         <description>The ending characters of the find text. Character</description>
     </argument>
     <argument optional="true">
         <name>occurrence</name>
         <type>N</type>
         <description>Default = 1. The nth occurrence to return. The occurrence parameter can be negative, in which case, Alpha Anywhere will return the nth occurrence from the end of the string.</description>
     </argument>
     <argument optional="true">
         <name>include_tags</name>
         <type>L</type>
         <description>
            <p>Default = .F.; .T. = Include the Start_Find and Start_Find characters.</p>
            <p>.F. = Return only the text between the Start_Find and Start_Find characters.</p></description>
     </argument>
     <argument optional="true">
         <name>case_sensitive</name>
         <type>L</type>
         <description>Default = .F. , .T. = Case sensitive. , .F. = Case insensitive.</description>
     </argument>
     <argument optional="true">
         <name>regex_safe</name>
         <type>L</type>
         <description>
            <p>Default = .F. The "unsafe" characters are ., |, *, ?, +, (, ), {, }, , , ^, $ and \. If your Start_Find and End_Find do not contain any of these characters, you should set Regex_Safe to true to maximize performance.</p>
            <p>.T. = Improves performance by declaring that the start and end tags are already regular expression safe and EXTRACT_STRING() does not need to escape special characters.</p>
            <p>.F. = Unsafe characters are replaced. This decreases performance on a large string.</p>
        </description>
     </argument>
   </arguments>
   <returns>
    <return>
        <name>Substring</name>
        <type>C</type>
        <description>Returns the substring that matches the search criteria.</description>
    </return>
   </returns>
     <discussion>The EXTRACT_STRING() function extracts a sub-string from a string. The sub-string is defined by a starting and ending block of text. For example:</discussion>
   <example><![CDATA[html = <<%txt%
<table>
    <tr><td>Row 1, Col 1</td><td>Row 1, Col 2</td><td>Row 1, Col 3</td></tr>
    <tr><td>Row 2, Col 1</td><td>Row 2, Col 2</td><td>Row 2, Col 3</td></tr>
</table>
%txt%
st = "<td>"
en = "</td>"
? extract_string(html, st, en, 1)
= "Row 1, Col 1"


? extract_string(html, st, en, 3, .t.)
= "<td>Row 1, Col 3</td>"


? extract_string(html, st, en, -1)
= "Row 2, Col 3"]]></example>
  
   <see>

    <ref link="api character extraction functions">Character Extraction Functions</ref>
    

      <ref link="api character search functions">Character Search Functions</ref>
      <ref link="api character counting functions">Character Counting Functions</ref>
      <ref link="api character replacement functions">Character Replacement Functions</ref>
   </see>
<terms>string,extraction,logical,case,contains,counting,defaults,expressions,function,performance,replacement,search,text</terms>
</page>