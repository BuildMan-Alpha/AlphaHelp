<page>
   <topic>WORD_TAGGED_PATTERN Function</topic>
     <description>Perform tagged expression replacement on words in a string.</description>
   <syntax>Formatted_String as C = WORD_TAGGED_PATTERN(C tagged_input,C tagged_output,C String[,C Word_Separator])</syntax>
   <arguments>
     <argument>
         <name>tagged_input</name>
         <description>A formatted string that identifies the tags of the Input_String and the characters that separate the tags. The syntax for the Input_Format string is described below:
</description>
<link>
<item>
<name>Input Format Characters</name>
<description>Meaning</description>
</item>

<item>
<name>1-99</name>
<description>Placeholder for tagged elements (i.e. "fields"). "1" indicates first tagged element, "2" is second tagged element, and so on.
</description>
</item>

<item>
<name>*</name>
<description>Wildcard - 0 to N characters.</description>
</item>

<item>
<name>+</name>
<description>suffix Match one or more characters.</description>
</item>

<item>
<name>?</name>
<description>Single wildcard character.</description>
</item>

<item>
<name>[]</name>
<description>Square brackets denote a set of characters.</description>
</item>

<item>
<name>^</name>
<description>Indicates characters that do not match.</description>
</item>

<item>
<name>a-z</name>
<description>Lowercase letters.</description>
</item>

<item>
<name>A-Z</name>
<description>Uppercase letters.</description>
</item>

<item>
<name>0-9</name>
<description>Numbers.</description>
</item>

<item>
<name>\</name>
<description>Escape character. Used in front of   * ? or \ when you want to use these characters in the output_string.
</description>
</item>

  
</link>
     </argument>
     <argument>
         <name>tagged_output</name>
         <description>A formatted string that identifies the new sequence of the tags of the Input_String and the new characters that separate the tags.
</description>
     </argument>
     <argument>
         <name>String</name>
         <description>A character string.</description>
     </argument>
     <argument>
         <name>Word_Separator</name>
         <description>Optional. Default = CR-LF. The character string that separates lines in the list.
</description>
     </argument>
   </arguments>
 
   <discussion>

WORD_TAGGED_PATTERN() parses each "word" (or "record") in the input string (into "tags", or "fields") using the format specified by the Input_String string and creates an output result string based on the format specified by Output_Format.
The input string is divided into "words" or "records" by the separator character. The default value for the optional separator is CR-LF (i.e. chr(13) + chr(10) ).
For example, assume that you have a CR-LF delimited input_string of the form:
   </discussion>
   
   <sections><section>
   <example><![CDATA[
Smith:John:Programmer
Jones:Kelly:Designer
King:Chris:Analyst
   ]]></example>
   </section>
   
   <section>
   <description>Assume that you want to transform this string to this string:</description>
   <example><![CDATA[
John Smith - Programmer
Kelly Jones - Designer
Chris King - Analyst
]]></example>
   </section>
   
   <section>
   <description>The following command will transform the string:</description>
   <example><![CDATA[
word_tagged_pattern("1:2:3", "2 1 - 3", input_string)
]]></example>
   </section>
   <section>
   <description>For more information on the format for the Input_Format and Output_Format strings, see the TAGGED_PATTERN()functions.
</description>
   </section>
   
   </sections>
   
   
   <sections>
   
   <section>
   <title>Examples</title>
   <description>This script parses a string and creates a modified output string in an address format.</description>
   <example><![CDATA[
string = "Fred:Smith:123 Main Street:Boston:Ma:02116"
address = word_tagged_pattern("1:2:3:4:5:6", "1 2~3~4,5 6", string)
]]></example>
   </section>
   
   
       <section>
            <description>now convert the "~" to carriage return-line feed.</description>
            <example><![CDATA[
address = stritran(address, "~", crlf() )
address ->
"Fred Smith
123 Main Street
Boston,Ma 02116"
]]></example>
       </section>
       
        <section>
            <description>This script parses a U.S format date (month, day, year) and outputs a European format date (day, month, year).
</description>
            <example><![CDATA[
word_tagged_pattern("1/2/3", "2-1-3", "2/29/00") ? "29-2-00"
]]></example>
       </section>
       
       
   </sections>
   <see>
      <ref href="/Api/Functions/Data Type/Character Functions/List Processing Functions/index.xml">List Processing Functions</ref>
      <ref>Character Formatting Functions</ref>
   </see>
   <terms>list processing,default value,defaults,expressions,formatting,function,list,replacement,script,set,string</terms>
</page>