<page api="xb">
    <shortlink>api regex match function</shortlink>
   <topic>REGEX_MATCH Function</topic>
    <description>Return TRUE if regular expression tags match.</description>
    
   <syntax>Result_Flag as L = REGEX_MATCH( text as c , RegExp as c [,options as c])</syntax>
   <arguments>
      <argument>
         <name>Result_Flag</name>
         <description>.T. (TRUE) if the Expression matched the Text ; otherwise .F. (FALSE).</description>
     </argument>
     <argument>
         <name>text</name>
         <description>The character string to examine. The parentheses characters " ( " and " ) " have special meaning. If present, they enclose a regular expression argument. If you want parentheses characters to be part of the text, you must precede them with " \ " characters.
</description>
     </argument>
     <argument>
         <name> RegExp</name>
         <description>A regular expression that contains a search argument. Refer to Regular Expressions for detailed information.
</description>
     </argument>
     <argument>
         <name>options</name>
         <description>Optional. Default = "S". Specify which compatibility with a common implementation. The flags for Emacs, Awk, Grep, Egrep and Sed conventions allow the pattern to follow the conventions of those utilities (which have slightly different variants regarding what is escaped and what is not escaped).
</description>
<list>
<item>
<name>"I"</name>
<description>Ignore case</description>
</item>

<item>
<name>"E"</name>
<description>Follow Emacs conventions</description>
</item>

<item>
<name>"A"</name>
<description>Follow Awk conventions</description>
</item>

<item>
<name>"G"</name>
<description>Follow Grep conventions</description>
</item>

<item>
<name>"EG"</name>
<description>Follow Egrep conventions
</description>
</item>

<item>
<name>"S"</name>
<description>Follow Sed conventions</description>
</item>

<item>
<name>"X"</name>
<description>Extended (similar to Awk but no need to escape '' inside of []) </description>
</item>
 
</list>



     </argument>
   </arguments>
  
   <discussion>
The REGEX_MATCH() function searches Text for a match to Search_Expresssion returns .T. (TRUE) or .F. (FALSE).
   </discussion>
  
   <sections>
       <section><title>The Case Insensitive Flag</title>
            <description>The following examples show the effect of the case insensitive flag. Since F is capitalized, the string does not match.</description>
            <example><![CDATA[
? regex_match("Fred","[a-z]+")
= .F.
]]></example>
       </section>
       
        <section>
            <description>Looking for capitals and lowercase explicitly matches.</description>
            <example><![CDATA[
? regex_match("Fred","[A-Za-z]+")
= .T.
' Or, alternatively, there is a flag for 'case does not matter' - which is
helpful
' if you have a much longer string you are trying to match (i.e. - HTML tags)
? regex_match("Fred","[a-z]+","i")
= .T.
]]></example>
       </section>
       
        <section>
            <description>Or, alternatively, there is a flag for 'case does not matter', which is helpful if you have a much longer string you are trying to match (i.e. HTML tags).</description>
            <example><![CDATA[
? regex_match("Fred","[a-z]+","i")
= .T.
]]></example>
       </section>
   </sections>
   
   
    <sections>
       <section><title>Example</title>
            <description>In the first example, there are two arguments: name and ([a-z]+). Note how the first function argument uses parentheses to identify the regular expression argument. The second function argument includes parentheses in the regular expression argument. The square brackets have special meaning, as Does the plus "+" sign. This function asks: Does the string name contain one or more alphabetic characters and only alphabetic characters. The answer is .T. (TRUE).</description>
            <example><![CDATA[
? regex_match("(name)","\([a-z]+\)")
= .T.
]]></example>
       </section>
       
        <section>
            <description>In the second example the two arguments are: (name) and ([a-z]+). Both function arguments include parentheses in the regular expression argument. This function asks: Does the string name contain one or more alphabetic characters and only alphabetic characters. The answer is .F. (FALSE), because parentheses are not alphabetic characters.</description>
            <example><![CDATA[
? regex_match("\(name\)","\([a-z]+\)")
= .F.
]]></example>
       </section>
       
        <section>
            <description>In the third example the two arguments are: [name] and ([a-z]+). This function asks: Does the string [name] contain one or more alphabetic characters and only alphabetic characters. The answer is .F. (FALSE), because square brackets are not alphabetic characters.</description>
            <example><![CDATA[
? regex_match("[name]","\([a-z]+\)")
= .F.
]]></example>
       </section>
       
         <section>
            <description>In the fourth example the two arguments are: 1 and ([a-z]+). This function asks: Does the string 1 contain one or more alphabetic characters and only alphabetic characters. The answer is .F. (FALSE), because numbers are not alphabetic characters.</description>
            <example><![CDATA[
? regex_match("(1)","\([a-z]+\)")
= .F.
]]></example>
       </section>
       
   </sections>
   
   
   <see>
      <ref link="Regular Expression Functions">Regular Expression Functions</ref>
      <ref link="Extension::Regex Class">Extension::Regex Class</ref>
      <ref link="Character Search Functions">Character Search Functions</ref>
      <ref link="Extension::Regex match Method">Extension::Regex Match Method</ref>
   </see>
  
<terms>regular expression,arguments,case,contains,defaults,expressions,function,html,number,search,string,text</terms>
 

</page>