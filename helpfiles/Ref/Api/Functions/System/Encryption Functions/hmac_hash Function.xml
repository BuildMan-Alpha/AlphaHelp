<page api="xb">
    <shortlink>api hmac hash function</shortlink>
    <topic>hmac_hash Function</topic>
    <description>Generates a digital signature of the data using the key and HMACSHA1, HMACSHA256, or any other signing method supported by the .NET Framework</description>
    <prototype>C hmac_hash(C data ,C key [,C algorithm [,L toHex ]])</prototype>
    <arguments>
        <argument>
            <name>data</name>
            <type>C</type>
            <description>Data to sign</description>
        </argument>
        <argument>
            <name>key</name>
            <type>C</type>
            <description>Secret key to use for signature</description>
        </argument>
        <argument optional="true">
            <name>algorithm</name>
            <type>C</type>
            <description>Defaults to "HMACSHA1". Algorithm to use for signing.</description>
        </argument>
        <argument optional="true">
            <name>toHex</name>
            <type>L</type>
            <description>Default = .f.. Returns the value as a hex encoded value instead of a base64 encoded value. If .t., returned value is hex encoded. Otherwise, return value is base64 encoded.</description>
        </argument>
    </arguments>
    <discussion>Generates a base64 digital signature of the data using the key and HMACSHA1, HMACSHA256, or any other signing method supported by the .NET Framework. This is useful for verifying file uploads and downloads, and for signing e-commerce documents as required by sites such as Amazon.
    </discussion>
    <sections>
        <section>
            <title>Example</title>
            <description>Interactive session:</description>
            <example code="xb"><![CDATA[?HMAC_HASH("my data", "my key") 'defaults to "HMACSHA1"
= "Wnw05dPAEo44+bw1luJqAWksvhE="
 
?HMAC_HASH("my data", "my key", "HMACSHA1")
= "Wnw05dPAEo44+bw1luJqAWksvhE="
 
?HMAC_HASH("my data", "my key", "HMACSHA256")
= "kBhEzgLKNjSjjzQw7s240hvoY62kDG/wHDjYXry++nA="
 
?HMAC_HASH("my data", "my key", "HMACSHA384")
= "1819IdbuGcIweTIhYBwIK1mOmNrlpgRKK98gnDlVJyXug36wQoDWuBoGlB/GfMqc"

?HMAC_HASH("my data", "1234567890123456", "MACTripleDES") 
= "XV17/zrLgzk="
 
?HMAC_HASH("my data", "123456789012345678901234", "MACTripleDES") 
= "MvLeC8oR/vw="
 
?HMAC_HASH("my data", "my key", "hMACmd5") 'not case sensitive
= "6YeAf6EEZBgdF4BqkAQe/w=="]]></example>
        </section>
        <section>
            <note>The value returned is in base64, which is what most e-commerce sites want. If you try to compare base64 with an online hash calculator that returns hexadecimal, they will not appear to match. Also, HMAC hashes are encrypted with a key, unlike simple unencrypted hashes such as SHA-1.</note>
        </section>
        <section>
            <title>Troubleshooting Hash Problems</title>
            <description>
                <p>Given that a hash is deterministic given the same key, data and alogrithm, if a service you are calling, or a client calling your service, has a hash that doesn't match yours, it is one of the following problems:</p>
            </description>
            <cases>
                <case>
                    <description>
                        <p>The key does not match.</p>
                    </description>
                </case>
                <case>
                    <description>
                        <p>The alogrithm does not match.  Make sure you picked the same alogrithm that that service your are calling is using.</p>
                    </description>
                </case>    
                <case>
                    <description>
                        <p>The data does not match.</p>
                        <p>This can very occur because sending data over HTTP to a service, the data may be normalized in some way.</p>
                        <p>For example, carriage-return/linefeeds may be converted into linefeeds, or character encoding may change.</p>
                    </description>
                    <cases>
                        <case>
                            <description>
                                <p>If the data is being normalized in some way when it is sent, you will need to adjust the data when calculating the hash, for example, if carriage returns are getting lost, simply strip them out when computing the hash.</p>                
                            </description>
                            <example code="xb"><![CDATA[HMAC_HASH(strtran(data,crlf(),chr(10)), "my key", "HMACSHA1")]]></example>
                        </case>    
                        <case>
                            <description>
                                <p>If the data URLENCODED before it is sent, for example when it is included in a URL query parameter, you may need to urldecode it when calculating the hash.</p>                
                            </description>
                            <example code="xb"><![CDATA[HMAC_HASH(urldecode(data), "my key", "HMACSHA1")]]></example>
                        </case>
                    </cases>
                </case>    
            </cases>
        </section>
    </sections>
    <see>
        <ref link="DotNet Example: Digital Hash">DotNet Example: Digital Hash</ref>
        <ref href="https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography?view=netframework-4.7.2">.NET System.Security.Cryptography Namespace</ref>
    </see>
    <terms>dotnet,defaults,file,function,logical,namespace</terms>
</page>