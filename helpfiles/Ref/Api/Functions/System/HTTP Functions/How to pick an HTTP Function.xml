<page>
	<topic>How to pick an HTTP Function</topic>
	<description>There are two groups of HTTP functions available in the Xbasic language - those implemented purely in Xbasic and those that rely on a Microsoft object that is included with the Windows operating system.


</description>
			
	<sections>
		<section>
			<description>In general, the Microsoft-based functions are useful in a desktop application where it is known that there is a proxy server in use or the application may have wide distribution and needs to be able to handle proxy servers. If you do not need to worry about proxy servers, the pure Xbasic functions provide additional functionality which is often compelling.</description>
		</section>
		<section>
			<title>Pure Xbasic Implementation</title>
			<cases>
				<case>
					<description>HTTP_DELETE Function</description>
				</case>
				<case>
					<description>HTTP_GET Function</description>
				</case>
				<case>
					<description>HTTP_POST Function</description>
				</case>
				<case>
					<description>HTTP_PUT Function</description>
				</case>
				<case>
					<description>HTTP_FETCH Function</description>
				</case>
				
			</cases>
			
		</section>
		<section>
			<description>This group of functions uses a pure Xbasic socket implementation to initiate the connection, build and send the request, and receive the response. These functions handle all of the HTTP protocol work, but by design they do not automatically handle cookies or redirects. If cookies or following redirects are required in a specific application, additional code must be written by the developer to extend the built-in functionality.

 HTTP_FETCH() provides the underlying functionality for all of the other functions. As a result, it provides more options and flexibility but requires a bit more code to work with. In most cases, the functions specific to the HTTP method are sufficient and easier to work with. The most common reason to use HTTP_FETCH() is when a developer needs to set a custom HTTP header as part of the request.</description>
			
		</section>
	</sections>
	<sections>
		<section>
			<title>XMLHttpRequest Implementation</title>
			<cases>
				<case>
					<description>HTTP_GET_PAGE2 Function</description>
				</case>
				<case>
					<description>HTTP_POST_PAGE2 Function</description>
				</case>
			</cases>
			
		</section>
		<section>
			<description>This group of functions uses a Microsoft object (XMLHttpRequest(external link)) to make the request and receive the response. As result, the developer gives up some flexibility, but gains automatic cookie handling and redirection, as well as automatic inheritance of the proxy settings defined in Internet Explorer. These may or may not be benefits, depending on the exact application.</description>
		</section>
	</sections>
	<sections>
		<section>
			<title>Warning</title>
			<description>These functions based on XMLHttpRequest are not server-safe and cannot be used in an A5W environment. If you attempt to use them there, they will be automatically remapped to the pure Xbasic implementation. Rather than rely on this automatic remapping and possible confusion when debugging, it is strongly recommended to use the Xbasic implementation functions directly in all A5W code.</description>
		</section>
	</sections>
	
</page>