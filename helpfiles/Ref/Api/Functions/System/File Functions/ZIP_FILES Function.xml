<page api="xb">
    <shortlink>api zip files function</shortlink>
    <topic>ZIP_FILES Function</topic>
    <description>Zips up a CRLF delimited list of files. Wildcards in filenames are supported. For speed, files are combined into batches, and each batch is zipped at once.</description>
    <prototype>Result_Flag as L = zip_files(C zipfilename ,C files_to_zip [,L delete_existing [,N number_of_batches [,C flags [,C base_path ]]]])</prototype>
    <arguments>
        <argument>
            <name>zipfilename</name>
            <type>C</type>
            <description>The name of the ZIP file to create or to update. Character</description>
        </argument>
        <argument>
            <name>files_to_zip</name>
            <type>C</type>
            <description>A CR-LF or comma, delimited list of filenames. Wildcard characters are supported in filenames.</description>
        </argument>
        <argument optional="true">
            <name>delete_existing</name>
            <type>L</type>
            <description>
                <p>Determines whether existing files with the same name are deleted.</p>
                <p> .T. = The file is deleted (if it exists) before the new file is added to the zip file.</p>
                <p>.F. = Files are added to the existing zip file.</p>
            </description>
        </argument>
        <argument optional="true">
            <name>number_of_batches</name>
            <type>N</type>
            <description>Default = 1. The number of batches that the file list should be divided into. Each batch is added to the zip file in a single call to Alpha Anywhere's low level zip function. The fewer the number of batches, the faster the zip operation will be. By setting the Number_of_Batches to 1, the user will get no feedback (other than an hourglass cursor) on the zip operation. If the Number_of_Batches is set to some value greater than 1, then the Status bar will show the percentage of the job that has been completed.</description>
        </argument>
        <argument optional="true">
            <name>flags</name>
            <type>C</type>
            <description>Default = "". Additional flags that indicate the following:</description>
            <list>
                <item>
                    <name-title>Flag</name-title>
                    <description-title>Meaning</description-title>
                </item>
                <item>
                    <name>""</name>
                    <description>An empty string. The zip file does not include paths of the files that are added.</description>
                </item>
                <item>
                    <name>D</name>
                    <description>The path of each file (relative to the Base_Path ) is included in the zip file.</description>
                </item>
                <item>
                    <name>,</name>
                    <description>Indicates that the list of input files is CR-LF delimited. Use this flag if there are commas in any of the input filenames.</description>
                </item>
            </list>
        </argument>
        <argument optional="true">
            <name>base_path</name>
            <type>C</type>
            <description>Default = "". A directory path.</description>
        </argument>
    </arguments>
    <discussion>
        <p>ZIP_FILES() is a high level utility function that add a list of files to a zip file called  Zip_Filename. </p>
        <p>Result_Flag is .T. if all of the files listed in File_List are successfully added to the zip file. If Base_Path is blank, and Flags is "D", then the absolute path of each file is included in the zip file.</p>
        <p>This utility function is easier to use than the low level FILE.ZIP()method when you have to add a list of files to a zip file.</p>
    </discussion>
    <sections>
        <section>
            <title>Example</title>
            <description>The following script adds two files to a zip file.</description>
            <example code="xb">
                <![CDATA[
F1 = "C:\A5\table1.dbf"
F2 = "C:\A5\table2.dbf"
zipfile = "C:\A5\test.ZIP"
filelist = f1 + CRLF() + f2
zip_files(zipfile, filelist, .T.)

]]>
            </example>
        </section>
        <section>
            <note>ZIP_FILES does not support creating password protected zip archives.</note>
        </section>
    </sections>
    <see>
        <ref link="api UNZIP FILES Function">UNZIP_FILES()</ref>
        <ref link="FILE Functions">FILE Functions</ref>
        <ref link="File methods">FILE Methods</ref>
    </see>
    <terms>file,defaults,directory,filename,function,list,number,operation,script,set,status bar,users</terms>
</page>