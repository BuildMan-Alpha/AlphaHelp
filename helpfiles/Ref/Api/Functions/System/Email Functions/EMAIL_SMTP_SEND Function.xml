<page api="xb">
    <shortlink>api email smtp send function</shortlink>
    <topic>EMAIL_SMTP_SEND Function</topic>
    <description>The EMAIL_SMTP_SEND() function sends a message through a SMTP mail server. This function, along with EMAIL_SMTP_OPEN()and EMAIL_SMTP_CLOSE(), will allow you to send email from a computer that does not have an Alpha Anywhere email profile.</description>
    <prototype>Result as L = email_smtp_send(P pMessage ,P pSocket [,L lStatus [,L autowrap ]])</prototype>
    <arguments>
        <argument>
            <name>pMessage</name>
            <type>P</type>
            <description>A pointer variable containing the message with the following properties:</description>
            <properties>
                <property>
                    <name>from</name>
                    <type>C</type>
                    <description>The sender's email address.</description>
                </property>
                <property optional="true">
                    <name>from_alias</name>
                    <type>C</type>
                    <description>The sender's name.</description>
                </property>
                <property>
                    <name>to</name>
                    <type>C</type>
                    <description>The recipient list. Multiple entries are separated by commas. Microsoft Outlook allows you to format the address as "recipient_name". This hides the "" portion of the field from the recipient.</description>
                </property>
                <property>
                    <name>cc</name>
                    <type>C</type>
                    <description>The CC list. Multiple entries are separated by commas.</description>
                </property>
                <property optional="true">
                    <name>charset</name>
                    <type>C</type>
                    <description>Specifies the character set you want to use, ex. UTF8.</description>
                </property>
                <property optional="true">
                    <name>bcc</name>
                    <type>C</type>
                    <description>The BCC list. Multiple entries are separated by commas.</description>
                </property>
                <property>
                    <name>subject</name>
                    <type>C</type>
                    <description>The subject line of the email.</description>
                </property>
                <property>
                    <name>message</name>
                    <type>C</type>
                    <description>The body of a text message.</description>
                </property>
                <property>
                    <name>html_message</name>
                    <type>C</type>
                    <description>The body of a HTML message.</description>
                </property>
                <property optional="true">
                    <name>attachments</name>
                    <type>C</type>
                    <description>A semi-colon (;), comma, or CR-LF delimited list of filenames.</description>
                </property>
                <property optional="true">
                    <name>xmailer</name>
                    <type>C</type>
                    <description>Default = NULL. The sending email program.</description>
                </property>
                <property optional="true">
                    <name>lRelated</name>
                    <type>L</type>
                    <description>Default = .F.. If .T. = Attachments are embedded image in the HTML message. If .F. = Attachments are separate files.
                    </description>
                </property>
                <property optional="true">
                    <name>ReturnReceipt</name>
                    <type>L</type>
                    <description>Default = .F. (Requires V8, addin build 3090 or later). If .t. then an e-mail will be sent to the sender acknowledging that the recipient has read the e-mail. Note that not all e-mail clients support this feature and the recipient might decline to send the receipt.</description>
                </property>
                <property optional="true">
                    <name>headers</name>
                    <type>C</type>
                    <description>
                        <p>Default = "". Optional email headers. Email headers are specified as a CR-LF delimited list of colon separated name-value pairs. Headers can be one of the standard mail headers or a user-defined header. Prefix user-defined headers with "X-".</p>
                        <p>
                            <example code="xb"><![CDATA[dim headers as c =<<%str%
Reply-To: info@example.com
X-company: Example Co
X-campaign: Spring Launch
%str%]]></example>
                        </p>
                        <p>See *[extlink:RFC 822@https://tools.ietf.org/html/rfc822#section-4.7]* to learn more about message headers.</p>
                    </description>
                </property>
            </properties>
        </argument>
        <argument>
            <name>pSocket</name>
            <type>P</type>
            <description>A pointer variable that is populated by EMAIL_SMTP_OPEN().</description>
        </argument>
        <argument optional="true">
            <name>lStatus</name>
            <type>L</type>
            <description>Default = .F. Whether to show a progress meter or not. .T. = Show a progress meter. .F. = Do not show a progress meter.</description>
        </argument>
        <argument optional="true">
            <name>autowrap</name>
            <type>L</type>
            <description>Default = .T. Whether to force text emails to wrap at 72 characters per line. .T. = Automatically wrap all lines of text at 72 characters or less. .F. = Leave text email body unchanged.</description>
        </argument>
    </arguments>
    <returns>
        <return>
            <name>Result</name>
            <type>L</type>
            <description>Returns .T. if the message was sent successfully. Returns .F. if the message was not sent.</description>
        </return>
    </returns>
    <sections>
        <section>
            <title>Example</title>
            <example code="xb"><![CDATA[DIM pm as P

pm.from = "aaron@alphasoftware.com"
pm.from_alias = "Aaron Brown"
pm.to = "ed@alphasoftware.com"
pm.cc = "selwyn@alphasoftware.com"
pm.bcc = "richard@alphasoftware.com
pm.subject = "This is a test"
pm.message = "This is the body of the message"
pm.html_message = "HTML Body goes here

pm.attachments = <<%str%
C:\dev\test.zip
C:\my documents\report.zip
%str%

'optional header fields
pm.xmailer = "Alpha Mailer"
pm.lRelated = .F.

'optional email headers
pm.headers = <<%txt%
X-Company: Alpha Software
X-Location: Boston
X-CodeExample: Sending Email with Xbasic
Reply-To: someone@example.com
%txt%

' send message
dim ps as P
if (email_smtp_open(ps, "mail.alphasoftware.com", 25, "username", "password")) THEN
    if (email_smtp_send(pm, ps)) then
        TRACE.writeLn("Email sent","Email Log")
    else
        TRACE.writeLn("Could not send email","Email Log")
    end if
else 
    TRACE.writeLn("Could not connect to SMTP server","Email Log")
END IF
email_smtp_close(ps)]]></example>
        </section>
        <section>
            <title>Character Sets</title>
            <description>You can specify the character set when using the email_smtp_send() function.</description>
            <example code="xb"><![CDATA[DIM pm as P
pm.from = "aaron@alphasoftware.com"
pm.from_alias = "Aaron Brown"
pm.to = "ed@alphasoftware.com"
pm.subject = "This is a test"

' Text that contains non ascii characters - encoded as UTF8
pm.message = convert_acp_to_utf8("même manière")

' Indicate that we want to send the text with 'utf8' encoding
pm.charset = "utf8"

DIM ps as P
if (email_smtp_open(ps, "mail.alphasoftware.com", 25, "username", "password")) then
    if (email_smtp_send(pm, ps)) then
        TRACE.writeLn("Email sent","Email Log")
    else
        TRACE.writeLn("Could not send email","Email Log")
    end if
else 
    TRACE.writeLn("Could not connect to SMTP server","Email Log")
end if
email_smtp_close(ps)]]></example>
        </section>
    </sections>
    <see>
        <ref link="api system email functions">Email Functions</ref>
        <ref link="EMAIL_SMTP_OPEN Function">EMAIL_SMTP_OPEN()</ref>
        <ref link="EMAIL_SMTP_CLOSE Function">EMAIL_SMTP_CLOSE()</ref>
    </see>
    <terms>email,addin,components,defaults,embedded image,field,function,header,html,image,images,list,pointer,send email,text,variable</terms>
</page>