<page api="xb">
    <shortlink>api email send sparkpost function</shortlink>
    <topic>email_send_sparkpost Function</topic>
    <description>Send an email using the SparkPost service.</description>
    <prototype>p Result = email_send_sparkpost(key as c, message as A)</prototype>
   <arguments>
     <argument>
         <name>key</name>
         <type>C</type>
         <description>Your SparkPost API key. Leave blank (an empty string) to use the API key stored in [Web Project Properties].</description>
     </argument>
     <argument>
         <name>message</name>
         <types>
            <type>C</type>
            <type>P</type>
         </types>
         <description>Can be a JSON string that defines the message or object with message properties listed below. See examples for more info.</description>
            <properties>
                <property>
                    <name>from_email</name>
                    <type>C</type>
                    <description>The sender's address.</description>
                </property>
                <property optional="true">
                    <name>from_name</name>
                    <type>C</type>
                    <description>Friendly name to use in the from field.</description>
                </property>
                <property optional="true">
                    <name>reply_to</name>
                    <type>C</type>
                    <description>The email address to when the recipient replies to the message.</description>
                </property>
                <property>
                    <name>send_to</name>
                    <type>C</type>
                    <description>The recipient's address. Multiple recipients can be specified as a comma-delimited list.</description>
                </property>
                <property optional="true">
                    <name>send_to_cc</name>
                    <type>C</type>
                    <description>Additional recipients to copy on the email message. Multiple recipients can be specified as a comma-delimited list.</description>
                </property>
                <property optional="true">
                    <name>send_to_bcc</name>
                    <type>C</type>
                    <description>Additional recipients to blind carbon copy on the email message. Multiple recipients can be specified as a comma-delimited list.</description>
                </property>
                <property>
                    <name>subject</name>
                    <type>C</type>
                    <description>The email subject</description>
                </property>
                <property>
                    <name>message_html</name>
                    <type>C</type>
                    <description>The email body defined as HTML.</description>
                </property>
                <property>
                    <name>message_text</name>
                    <type>C</type>
                    <description>The email body defined as plain text. Required if *[xb:message_html]* is not defined.</description>
                </property>
                <property optional="true">
                    <name>attachments</name>
                    <type>C</type>
                    <description>A comma delimited list of file attachments.</description>
                </property>
                <property optional="true">
                    <name>attachmentsArray</name>
                    <type>p</type>
                    <description>An array of files to attach to the email. Used instead of *[xb:attachments]* to define a list of files to attach to the email. Each entry in the array must define the following properties:</description>
                    <properties>
                        <property>
                            <name>name</name>
                            <type>C</type>
                            <description>The file name.</description>
                        </property>
                        <property>
                            <name>type</name>
                            <type>C</type>
                            <description>The file mime type. Use [Context.ResolveMimeType()] to get the appropriate mime type for the file.</description>
                        </property>
                        <property>
                            <name>content</name>
                            <type>C</type>
                            <description>The contents of the file as a base64 encoded string. Use [base64encode()] to encode file contents for the message.</description>
                        </property>
                    </properties>
                </property>
                <property optional="true">
                    <name>inlineImagesArray</name>
                    <type>p</type>
                    <description>An object array containing images to include in the email message. Each object in the array must define the properties below. See examples below for more information.</description>
                    <properties>
                        <property>
                            <name>name</name>
                            <type>C</type>
                            <description>The image name.</description>
                        </property>
                        <property>
                            <name>type</name>
                            <type>C</type>
                            <description>The image mime type. Use [Context.ResolveMimeType()] to get the appropriate mime type for the image.</description>
                        </property>
                        <property>
                            <name>content</name>
                            <type>C</type>
                            <description>The contents of the image as a base64 encoded string. Use [base64encode()] to encode image contents for the message.</description>
                        </property>
                    </properties>
                </property>
                <property build="4612" optional="true">
                    <name>options</name>
                    <type>p</type>
                    <description>Additional SparkPost options. Some options may not be available for your SparkPost subscription. See [SparkPost Transmission Options] for more detailed information.</description>
                    <properties>
                        <property>
                            <name>start_time</name>
                            <type>C</type>
                            <description>Specifies time when message should be sent. Time must be specified using the format *[xb:YYYY-MM-DDTHH:MM:SS+-HH:MM]*</description>
                        </property>
                        <property>
                            <name>open_tracking</name>
                            <type>L</type>
                            <description>Enables or disables open tracking.</description>
                        </property>
                        <property>
                            <name>initial_open</name>
                            <type>L</type>
                            <description>Enables or disables initial open tracking.</description>
                        </property>
                        <property>
                            <name>click_tracking</name>
                            <type>L</type>
                            <description>Enables or disables click tracking.</description>
                        </property>
                        <property>
                            <name>transactional</name>
                            <type>L</type>
                            <description>Whether or not the email should be marked as transactional.</description>
                        </property>
                        <property>
                            <name>sandbox</name>
                            <type>L</type>
                            <description>Whether or not to use the sandbox sending domain.</description>
                        </property>
                        <property>
                            <name>skip_suppression</name>
                            <type>L</type>
                            <description>Whether or not customer suppression rules should be ignored.</description>
                        </property>
                        <property>
                            <name>ip_pool</name>
                            <type>C</type>
                            <description>The ID of a dedicated IP pool to use when sending the message.</description>
                        </property>
                        <property>
                            <name>inline_css</name>
                            <type>L</type>
                            <description>Whether to inline CSS in the &lt;style&gt; tags in the &lt;head&gt; of the email message.</description>
                        </property>
                        <property>
                            <name>perform_substitutions</name>
                            <type>L</type>
                            <description>Enable or disable substitutions.</description>
                        </property>
                    </properties>
                </property>
            </properties>
     </argument>
   </arguments>
   <returns>
    <return>
        <name>Result</name>
        <type>P</type>
        <description>
            <p>Returns an object that has the properties below that includes information about whether or not the message was delivered to the SparkPost server. The returned variable does not include information as to whether or not the message was delivered to each recipient. The return value also includes the JSON message definition that was constructed from the *[xb:message]* object.</p>
        </description>
        <properties>
            <property>
                <name>error</name>
                <type>L</type>
                <description>*[xb:.t.]* if an error occurs. Otherwise *[xb:.f.]*.</description>
            </property>
            <property>
                <name>errorText</name>
                <type>c</type>
                <description>Information about why the email failed to send if *[xb:error]* is *[xb:.t.]*.</description>
            </property>
            <property>
                <name>json</name>
                <type>c</type>
                <description>A JSON string containing the message that was generated.</description>
            </property>
            <property>
                <name>result</name>
                <type>P</type>
                <description>An object with the following properties:</description>
                <properties>
                    <property>
                        <name>errors</name>
                        <type>C</type>
                        <description>An array of error messages, if any are returned by the function call.</description>
                    </property>
                </properties>
            </property>
        </properties>
    </return>
   </returns>
   <sections>
        <section>
            <title>Using email_send_sparkpost</title>
            <description>
                <p>This Xbasic helper function can be used to send email using the SparkPost service. You must first go to sparkpost.com to get an API key. You will also be required to verify ownership of your sending domain.</p>
                <p>Once you have your API key and have verified your domain ownership, you can send email.</p>
            </description>
            <note>Currently the *[xb:email_send_sparkpost()]* function does not expose the ability to use merge variables in the HTML message. If you need this functionality, you must compose the message JSON manually. Refer to the [SparkPost documentation].</note>
        </section>
        <section>
            <title>Example</title>
            <example code="xb"><![CDATA[dim ms as p
ms.send_to = "sally@example.com"
ms.from_email = "sendername@example.com"
ms.subject = "Greetings!"
ms.message_text = "Hello there!"

dim key as c = "" ' leave blank to use key stored in Web Project Properties

dim result as p
result = email_send_sparkpost(key,ms)]]></example>
        </section>
        <section>
            <title>A more Complex Example</title>
            <example code="xb"><![CDATA[dim ms as p
ms.send_to = "john@example.com:Optional friendly name for John Smith,sally@example.com"
ms.reply_to = "harry@example.com" 'optional - use same format as send_to
ms.send_to_cc = "bill@example.com" ' optional - use same format as send_to
ms.send_to_bcc = "marisa@example.com" ' optional - use same format as send_to 
ms.from_email = "sendername@example.com"
ms.from_name = "Sales at Acme" 'friendly name - optional
ms.subject = "Information You Requested"
ms.message_html = "Here is the <b>information</b> you requested."
ms.message_text = "Plain text version of the message"
ms.attachments = "c:\alphasports\invoice.pdf,c:\alphasports\vendorlist.pdf"
dim key as c = "your sparkpostkey"
pp = email_send_SparkPost(key,ms)]]></example>
        </section>
        <section>
            <description>You can define attachments using an array syntax. Instead of defining a property called *[xb:ms.attachments]*, which has a comma delimited list of files to attach, you can define an array as shown in the example below:</description>
            <example code="xb"><![CDATA[dim ms.attachmentsArray[1] as p
ms.attachmentsArray[1].name="report.pdf"
ms.attachmentsArray[1].type= Context.ResolveMimeType("pdf")
ms.attachmentsArray[1].content=base64encode(file.to_blob("c:\myfiles\invoice.pdf"))]]></example>
        </section>
        <section>
            <description>
                <p>The body of your HTML message can optionally include in-line images. To define in-line images you can either use a property that specifies a comma-delimited list of image filenames, or you can use an array syntax:</p>
                <p>*[Array syntax]*</p>
            </description>
            <example code="xb"><![CDATA[dim ms.inlineImagesArray[1] as p
ms.inlineImagesArray[1].name = "myimage1.jpeg"
ms.inlineImagesArray[1].type = Context.ResolveMimeType("jpg")
ms.inlineImagesArray[1].content = base64encode(file.to_blob("C:\Images\4296.JPG"))]]></example>
        </section>
        <section>
            <description>*[Comma delimited filenames syntax]*</description>
            <example code="xb"><![CDATA[ms.inlineImages = "c:\movieImages\4296.jpg|myimage1.jpeg"]]></example>
        </section>
        <section>
            <description>
                <p>Notice that the comma delimited names syntax specifies the image name (the name by which you will refer to the image in the HTML body) with a | delimiter. In the above example, the image name is 'myimage1.jpeg'</p>
                <p>To use the in-line images in the HTML message body, you use this syntax:</p>
            </description>
            <example code="xb"><![CDATA[Here is your inline image!<br><img src="cid:myimage1.jpeg">]]></example>
        </section>
        <section build="4612">
            <title>Example: Click Tracking</title>
            <description>
                <p>SparkPost allows you to specify options, such as open_tracking and click_tracking (see [SparkPost API documentation]).</p>
                <p>In build 4612 and newer, you can pass in these options to the email_send_sparkpost() function as shown below:</p>
            </description>
            <example code="xb"><![CDATA[dim ms as p

'xbasic commands to set required properties of mp not shown

ms.options.open_tracking = .f.
ms.options.click_tracking = .f.
dim key as c = "your sparkpostkey"

dim pp as p
pp = email_send_sparkpost(key,ms)]]></example>
        </section>
   </sections>
   <links>
        <link href="https://developers.sparkpost.com/api/">SparkPost documentation</link>
        <link href="https://developers.sparkpost.com/api/">SparkPost API documentation</link>
        <link link="server%20ref%20web%20project%20settings#section2_SparkPost%20key">Web Project Properties</link>
        <link link="api%20objects%20context%20object%20resolve%20mime%20type%20method">Context.ResolveMimeType()</link>
        <link link="api%20base%2064%20encode%20function">base64encode()</link>
        <link href="https://developers.sparkpost.com/api/transmissions/#transmissions-post-send-inline-content">SparkPost Transmission Options</link>
   </links>
   <see>
        <ref link="xb email send sendgrid function">email_send_sendgrid Function</ref>
   </see>
   <terms>SparkPost,spark post,send email,attachments</terms>
</page>