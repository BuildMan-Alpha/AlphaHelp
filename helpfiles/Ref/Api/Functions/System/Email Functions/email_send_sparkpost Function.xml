<page api="xb">
    <shortlink>api email send sparkpost function</shortlink>
    <topic>email_send_sparkpost Function</topic>
    <description>Send an email using the SparkPost service.</description>
    <prototype>p Result = email_send_sparkpost(key as c, message as A)</prototype>
   <arguments>
     <argument>
         <name>key</name>
         <type>C</type>
         <description>Your SparkPost API key.</description>
     </argument>
     <argument>
         <name>message</name>
         <types>
            <type>C</type>
            <type>P</type>
         </types>
         <description>Can be a JSON string that defines the message or a dot variable with message properties. See examples below.</description>
     </argument>
   </arguments>
   <returns>
    <return>
        <name>Result</name>
        <type>P</type>
        <description>Returns a dot variable that includes information about whether or not the message was delivered to the SparkPost server. The returned dot variable does not include information as to whether or not the message was delivered to each recipient. The return value also includes the JSON message definition that was constructed from the *[xb:message]* object.</description>
    </return>
   </returns>
   <sections>
        <section>
            <title>Using email_send_sparkpost</title>
            <description>
                <p>This Xbasic helper function can be used to send e-mail using the SparkPost service. This service is similar to the Mandrill service. You must first go to sparkpost.com to get an API key. You will also be required to verify ownership of your sending domain.</p>
                <p>Once you have your API key and have verified your domain ownership, you can send e-mail in much the same way that you may have used the [email_send_mandrill Function].</p>
            </description>
            <note>Currently the *[xb:email_send_sparkpost()]* function does not expose the ability to use merge variables in the HTML message. If you need this functionality, you must compose the message JSON manually. Refer to the [SparkPost documentation].</note>
        </section>
        <section>
            <example code="xb"><![CDATA[dim ms as p
ms.send_to = "john@acme.com:Optional friendly name for John Smith,sally@acme.com"
ms.send_to_cc = "bill@acme.com" ' optional - use same format as send_to
ms.send_to_bcc = "marisa@acme.com" ' optional - use same format as send_to 
ms.from_email = "sendername@acme.com"
ms.from_name = "Sales at Acme" 'friendly name - optional
ms.subject = "Information You Requested"
ms.message_html = "Here is the <b>information</b> you requested."
ms.message_text = "Plain text version of the message"
ms.attachments = "c:\alphasports\invoice.pdf,c:\alphasports\vendorlist.pdf"
dim key as c = "your sparkpostkey"
pp = email_send_SparkPost(key,ms)]]></example>
        </section>
        <section>
            <description>You can define attachments using an array syntax. Instead of defining a property called *[xb:ms.attachments]*, which has a comma delimited list of files to attach, you can define an array as shown in the example below:</description>
            <example code="xb"><![CDATA[dim ms.attachmentsArray[1] as p
ms.attachmentsArray[1].name="report.pdf"
ms.attachmentsArray[1].type=resolve_mime_type("pdf")
ms.attachmentsArray[1].content=base64encode(file.to_blob("c:\myfiles\invoice.pdf"))]]></example>
        </section>
        <section>
            <description>
                <p>The body of your HTML message can optionally include in-line images. To define in-line images you can either use a property that specifies a comma-delimited list of image filenames, or you can use an array syntax:</p>
                <p>*[Array syntax]*</p>
            </description>
            <example code="xb"><![CDATA[dim ms.inlineImagesArray[1] as p
ms.inlineImagesArray[1].name = "myimage1.jpeg"
ms.inlineImagesArray[1].type = resolve_mime_type("jpg")
ms.inlineImagesArray[1].content = base64encode(file.to_blob("C:\Images\4296.JPG"))]]></example>
        </section>
        <section>
            <description>*[Comma delimited filenames syntax]*</description>
            <example code="xb"><![CDATA[ms.inlineImages = "c:\movieImages\4296.jpg|myimage1.jpeg"]]></example>
        </section>
        <section>
            <description>
                <p>Notice that the comma delimited names syntax specifies the image name (the name by which you will refer to the image in the HTML body) with a | delimiter. In the above example, the image name is 'myimage1.jpeg'</p>
                <p>To use the in-line images in the HTML message body, you use this syntax:</p>
            </description>
            <example code="xb"><![CDATA[Here is your inline image!<br><img src="cid:myimage1.jpeg">]]></example>
        </section>
   </sections>
   <links>
        <link link="api email send mandrill Function">email_send_mandrill Function</link>
        <link href="https://developers.sparkpost.com/api/">SparkPost documentation</link>
   </links>
   <see>
        <ref link="api email send mandrill function">email_send_mandrill Function</ref>
   </see>
   <terms>SparkPost,spark post,send email,attachments</terms>
</page>