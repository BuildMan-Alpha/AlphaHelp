<page api="xb">
    <shortlink>api http delete function</shortlink>
    <topic>HTTP_DELETE Function</topic>
    <description>Use the HTTP method DELETE to retrieve the specified URL</description>
    <prototype>Result as P = http_delete(url as C [,cookie as C [,port as N [,timeout as N [,show_before_send as L [,validate_ssl_cert as L]]]]])</prototype>
    <arguments>
        <argument>
            <name>url</name>
            <type>C</type>
            <description>The URL of the page to retrieve.</description>
        </argument>
        <argument optional="true">
            <name>cookie</name>
            <type>C</type>
            <description>Default = "". Cookie data. Limited  to 8 MBytes.</description>
        </argument>
        <argument optional="true">
            <name>port</name>
            <type>N</type>
            <description>Default = -1. The port to use.</description>
        </argument>
        <argument optional="true">
            <name>timeout</name>
            <type>N</type>
            <description>Default = 8000 milliseconds. The number of  milliseconds to wait before timing out.</description>
        </argument>
        <argument optional="true">
            <name>show_before_send</name>
            <type>L</type>
            <description>Default = .F.. When .T., displays the request  before being sent. Useful for debugging.</description>
        </argument>
        <argument optional="true">
            <name>validate_ssl_cert</name>
            <type>L</type>
            <description>Default = .T.. If the specified URL starts with "https://", this flag controls whether or not the certificate offered by the server will be validated. If set to .T., the request  will always fail. If set to .F., the request may succeed, but the  server's identity is not guaranteed. </description>
        </argument>
    </arguments>
    <returns>
        <return>
            <name>Result</name>
            <type>P</type>
            <description>A dot variable containing the server's response.</description>
            <properties>
                <property readonly="true">
                    <name>error_text</name>
                    <type>C</type>
                    <description>The error message, if any. If no error occurs, error_text will be empty.</description>
                </property>
                <property readonly="true">
                    <name>error_code</name>
                    <type>N</type>
                    <description>The error number, if any. If no error occurs, error_code will be 0.</description>
                </property>
                <property readonly="true">
                    <name>headers</name>
                    <type>C</type>
                    <description>Response headers. If error_code is 0, the result will contain a dot variable, parsed_headers, with a property representing each response header.</description>
                </property>
                <property readonly="true">
                    <name>body</name>
                    <type>C</type>
                    <description>Response body.</description>
                </property>
                <property readonly="true">
                    <name>parsed_headers</name>
                    <type>P</type>
                    <description>Contains all the headers in the response split out into individual properties. If an error occurred when trying to communicate with the server, parsed_headers will be empty. parsed_headers will always contain the following properties in addition to the headers in the response:</description>
                    <properties>
                        <property readonly="true">
                            <name>http_version</name>
                            <type>C</type>
                            <description>The HTTP version used.</description>
                        </property>
                        <property readonly="true">
                            <name>reason_phrase</name>
                            <type>C</type>
                            <description>A description of the status code.</description>
                        </property>
                        <property readonly="true">
                            <name>status_code</name>
                            <type>N</type>
                            <description>The response status code. See [Status Codes] for a list of status codes.</description>
                        </property>
                    </properties>
                </property>
            </properties>
        </return>
    </returns>
    <discussion>The HTTP_DELETE() function requests a URL using HTTP/1.1 DELETE. The function supports cookies and returns a pointer with the parsed response from the server. If *[xb:error_code]* is "0", *[xb:parsed_response]* will contain the headers in the result:</discussion>
    <sections>
        <section>
            <example code="xb"><![CDATA[result = http_delete("www.alphasoftware.com")

? result.error_code
= 0

? result.parsed_headers
= CFRAY = "667102072ce518a1-EWR"
cfrequestid = "0afa7f987a000018a1e31a1000000001"
Connection = "close"
ContentLength = "17"
ContentType = "text/plain;charset=UTF-8"
Date = "Tue, 29 Jun 2021 17:52:19 GMT"
http_version = "HTTP/1.1"
NEL = {"report_to":"cf-nel","max_age":604800}
reason_phrase = "Forbidden"
ReportTo = {"endpoints":[{"url":"https:\/\/a.nel.cloudflare.com\/report\/v2?s=fefbfvD1oZR7DXtvijmVUvb359n5gwRK7oMnjrKznNPcgPBhSqn1Mfy%2Bwdmuj%2FWWwtaXKdXGE%2B%2ByISllrhRfsfif9DUYNR0HbB%2FFgIeQ6dNk5oSqAE3FB9CvchoiQtIAON4%3D"}],"group":"cf-nel","max_age":604800}
Server = "cloudflare"
SetCookie = "__cfruid=4b542505c6439ecba2883eb38b3c24660bb358d2-1624989139; path=/; domain=.www.alphasoftware.com; HttpOnly"
status_code = 403]]></example>
        </section>
        <section>
            <description>Status code 200 indicates that the page exists. Status code 404 indicates that it does not. Other status codes you may encounter, along with the meanings of each, are documented in [Status Codes].</description>
        </section>        
        <section>
            <title>Handling Redirects</title>
            <description>When the server responds with a 30* code, HTTP_POST() does not automatically use the new URL. The developer needs to examine result.parsed_headers.status_code, then if appropriate, try the URL provided in result.parsed_headers.location. Refer to [HTTP_GET()] for an example.</description>
        </section>
    </sections>
    <links>
        <link link="status codes">Status Codes</link>
        <link link="api http get function">HTTP_GET()</link>
    </links>
    <see>
        <ref link="api how to pick an http function">How to pick an HTTP Function</ref>
        <ref link="status codes">HTTP Status Codes</ref>
    </see>
    <terms>http,arguments,control,defaults,delete,display,error,function,https,number,pages,pointer,variable</terms>
</page>