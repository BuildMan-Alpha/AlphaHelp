<page api="xb">
    <shortlink>api thread create function</shortlink>
    <topic>THREAD_CREATE Function</topic>
    <description>Create a thread - requires a unique thread name , code to run - allows for 'base' variable frame to be passed in.</description>
    <prototype>V THREAD_CREATE(C thread_name,C Xbasic_code[,P variable])</prototype>
    <arguments>
        <argument>
            <name>thread_name</name>
            <type>C</type>
            <description>A character string to be used as the name of the thread. This thread name must be unique among all currently running threads. There will always be a thread named "Main" running, so you cannot use this name.</description>
        </argument>
        <argument>
            <name>Xbasic_code</name>
            <type>C</type>
            <description>The string of code that should be run in this background thread.</description>
        </argument>
        <argument optional="true">
            <name>variable</name>
            <type>P</type>
            <description>A pointer to a namespace you would like to use as the context for the thread. This is similar to passing pVariables into a UDF and then using *[xb:with pVariables]* ... *[xb:end with]*.</description>
        </argument>
    </arguments>
    <discussion>
        <p>The THREAD_CREATE() function creates a new thread.</p>
    </discussion>
    <sections>
        <section>
            <note>XBASIC_ERROR_LOG()is very useful for threading because it will create a log along with some debugging information if or when a thread abnormally terminates. Without this, there is no way to tell why your thread quit.</note>
        </section>
        <section>
            <warning>No user interface related commands are allowed in a thread. Using any command that attempts to create or manipulate any type of user interface from within a thread will cause Alpha Anywhere to hang. Examples of such invalid functions include debug() , ui_*, StatusBar.*, ControlPanel.*, trace.*, etc.</warning>
        </section>
        <section>
            <title>Example</title>
            <example><![CDATA[
thread_create("mythread", <<%code%
while flag_run
    ' do a bunch of stuff
end while
%code%)

]]>            </example>
        </section>
        <section>
            <description>Then when you want to stop the thread, you can do the following from another script, the interactive window, etc:</description>
            <example><![CDATA[
tv = thread_variables("mythread")
tv.flag_run = .f.
delete tv

]]>            </example>
        </section>
        <section>
            <description>The following script removes unwanted temporary files. This thread works at the lowest priority.</description>
            <example><![CDATA[
function RaysCleanup as V()
thread_create(thread_name_create("Ray's cleanup"),<<%code%
dim self as P
dim files as C
self = thread.current()
self.set_priority(-2)
files = filefind.get(a5.Get_private_Path() + chr(92) + "$$*.*",0,"pn")
*for_each(x,file.remove(x),files)
files = filefind.get(a5.Get_private_Path() + chr(92) + "*.pdf",0,"pn")
*for_each(x,file.remove(x),files)
files = filefind.get(a5.get_path() + chr(92) + "$$*.*",0,"pn")
*for_each(x,file.remove(x),files)
%code%)
end function

]]>            </example>
        </section>
    </sections>
    <limitations>Desktop applications only.</limitations>
    <see>
        <ref link="THREAD_NAME_CREATE Function">THREAD_NAME_CREATE()</ref>
        <ref link="THREAD_VARIABLES Function">THREAD_VARIABLES()</ref>
        <ref link="XBASIC_ERROR_LOG Function">XBASIC_ERROR_LOG()</ref>
        <ref link="Xbasic with end with">WITH ... END WITH</ref>
    </see>
    <terms>thread,debugging,error,function,pointer,script,string,user interface,variable</terms>
</page>