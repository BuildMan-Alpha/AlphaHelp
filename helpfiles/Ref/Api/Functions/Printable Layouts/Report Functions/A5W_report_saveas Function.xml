<page api="xb">
    <shortlink>api a5w report saveas function</shortlink>
    <topic>a5w_report_saveas Function</topic>
    <description>The a5w_report_saveas() method prints LayoutName to file in PDF, HTML, RTF, or TXT formats. If no format is specified, the PDF format is used. If a report needs to get access to global variables defined in a .a5w page, you must call this function, and not Report.SaveAs()</description>
    <prototype>filenameOut as C = a5w_report_saveAs(C LayoutName [,C Saveas_format [,C Filter [,C Order [,C Filename [,P globalVariables [,P PrintOptions [,SQL::Arguments Arguments [,P Options ]]]]]]])</prototype>
    <arguments>
        <argument>
            <name>LayoutName</name>
            <type>C</type>
            <description>The report to print. The report must include a fully qualified path to the report location. If specifying a SSRS report, use the format *[xb:reportName.ssrs.a5rpt]*. See examples below.</description>
        </argument>
        <argument>
            <name>Saveas_format</name>
            <type>C</type>
            <description>Type of file to create. Can be one of the following values:</description>
            <list>
                <item>
                    <name-title>Format</name-title>
                    <description-title>Description</description-title>
                </item>
                <item>
                    <name>PDF</name>
                    <description>Creates a PDF file.</description>
                </item>
                <item>
                    <name>Excel</name>
                    <description>Exports report as an Excel file.</description>
                </item>
                <item>
                    <name>HTML</name>
                    <description>Creates an HTML report.</description>
                </item>
                <item>
                    <name>RTF</name>
                    <description>Creates an RTF file.</description>
                </item>
                <item>
                    <name>Text</name>
                    <description>Creates a text file.</description>
                </item>
            </list>
        </argument>
        <argument>
            <name>Filter</name>
            <type>C</type>
            <description>Filter expression to apply to report. Specify an empty string for no filter. Not supported for SSRS reports.</description>
        </argument>
        <argument>
            <name>Order</name>
            <type>C</type>
            <description>Order expression to apply to report detail. Specify an empty string for no order. Not supported for SSRS reports.</description>
        </argument>
        <argument>
            <name>Filename</name>
            <type>C</type>
            <description>Name of file to create.</description>
        </argument>
        <argument>
            <name>globalVariables</name>
            <type>P</type>
            <description>
                <p>A pointer to the global variables. Pass in [global_variables()] if you do not need to define your own global variables. Not supported for SSRS reports. See explanation below for more information.</p>
            </description>
        </argument>
        <argument optional="true">
            <name>PrintOptions</name>
            <type>P</type>
            <description>Default = [null_value()]. PDF Driver options. Not supported for SSRS reports. See [Report.SaveAs()] for more details.</description>
        </argument>
        <argument optional="true">
            <name>Arguments</name>
            <type>SQL::Arguments</type>
            <description>Default = [null_value()]. Optional SQL Arguments (if required by the report data source.)  See [Report.SaveAs()] for more information.</description>
        </argument>
        <argument optional="true">
            <name>Options</name>
            <type>P</type>
            <description>Default = [null_value()]. Additional options. See [Report.SaveAs()] for available options.</description>
        </argument>
    </arguments>
    <returns>
        <return>
            <name>filenameOut</name>
            <type>C</type>
            <descrption>The filename where the report output is stored. Generally, this will be the same as what is specified in the *[xb:Filename]* parameter, unless the file extension was changed.</descrption>
        </return>
    </returns>
    <discussion>The *[xb:a5w_report_saveas]* function generates a Report from the Application Server.</discussion>
    <sections>
        <section>
            <example><![CDATA[a5w_report_saveAs("customer List@[PathAlias.ADB_Path]\myalphaworkspace.alb","PDF","","","c:\data\custlist.pdf",global_variables())]]></example>
            <note>*[xb:[PathAlias.ADB_Path]]* is an alias for the application webroot.</note>
        </section>
        <section>
            <title>Specifying the Report to Print</title>
            <description>Reports can be defined in the workspace library or as individual report files on the Web Projects Control Panel. The LayoutName must include a fully qualified path to the location of the report file. Depending on where the report is located, you can specify the path as follows:</description>
            <note>Use Project Reports (*.a5rpt) in web and mobile applications when creating reports.</note>
            <list>
                <item>
                    <name-title>Report Location</name-title>
                    <description-title>Layout Name</description-title>
                </item>
                <item>
                    <name>Workspace Library (*.alb)</name>
                    <description>"MyReport@C:/Path/To/Workspace/Library/MyWorkspace.alb"</description>
                </item>
                <item>
                    <name>Project Report (*.a5rpt)</name>
                    <description>"C:/Path/To/Webroot/MyReport.a5rpt"</description>
                </item>
            </list>
        </section>
        <section>
            <description>The example below shows how to use the *[xb:[PathAlias.ADB_Path]]* placeholder when specifying the location of the workspace library.</description>
            <example><![CDATA['Print a report stored in the workspace library:
a5w_report_saveAs("myReport@[PathAlias.ADB_Path]\MyWorkspace.alb","PDF","","","myReport.pdf",global_variables())]]></example>
        </section>
        <section>
            <description>The next example shows how to use the [context.request.applicationRoot] property when specifying the location of a Project Report (a report saved as a *.a5rpt file.)</description>
            <example><![CDATA['Print a Project Report:
a5w_report_saveAs(a5_removeTrailingBackslash(context.request.applicationRoot) + chr(92) + "myReport.a5rpt","PDF","","","myReport.pdf",global_variables())]]></example>
        </section>
        <section>
            <title>Global Variables in Web Applications</title>
            <description>
                <p>In a desktop application, global variables are accessible throughout the application. Passing a pointer to the global variables is not necessary.</p>
                <p>In a web application, global variables are variables defined on on the .a5w page and exist for the duration of the page. They are not accessible to other .a5w pages. You can use the [global_variables() method] to create a pointer to the global variables defined in an .a5w page</p>
            </description>
            <example><![CDATA[dim globalvars as p
globalvars = global_variables()
globalvars.userName = "John Smith"]]>
            </example>
        </section>
        <section>
            <description>If you have global variables that are used by the report, you must create and pass the global variable to the *[xb:a5w_report_saveas]* method in a web application.</description>
            <example><![CDATA[dim globalvars as p
globalvars = global_variables()
globalvars.myglobal1 = "foo"

dim layout_name as c
layout_name = a5_removeTrailingBackslash(context.request.applicationRoot) + chr(92) + "customerList.a5rpt"

a5w_report_saveAs(layout_name,"PDF","","","c:\data\custlist.pdf",globalvars)]]></example>
        </section>
        <section build="4388">
            <title>Printing SSRS Reports</title>
            <description>
                <p>Reports created using SQL Server Reporting Services can be generated from Xbasic using the *[xb:a5w_report_saveAs()]* function. If the SSRS report has any parameters, they can be specified using the *[xb:Arguments]* parameter. For example:</p>
            </description>
            <example code="xb"><![CDATA[dim reportName as c
reportName = "customersbystate.ssrs.a5rpt"

dim args as sql::Arguments
args.add("whatcountry","UK")

dim filename as c

filename = a5w_report_saveAs(reportname,"pdf","","","c:\pdf\report1.pdf",null_value(),null_value(),args)
sys_open( filename)]]></example>
        </section>
        <section>
            <description>
                <p>Not all parameters are supported for SSRS reports. Specifically, you cannot use the filter, order, global variables or print options parameters.</p>
            </description>
        </section>
    </sections>
    <terms>reports,a5w,arguments,expressions,file,filename,filter,function,global variables,pdf,pointer,sql,variable</terms>
    <see>
          <ref link="api printable layouts report functions">Report Functions and Methods</ref>
        <ref link="Report.SaveAs Function">Report.SaveAs Function</ref>
    </see>
    <links>
        <link link="Report.SaveAs Function">Report.SaveAs()</link>
        <link link="GLOBAL_VARIABLES Function">global_variables() method</link>
        <link link="GLOBAL_VARIABLES Function">global_variables()</link>
        <link link="api null value function">null_value()</link>
        <link link="Understanding and Using Session Variables">session variables</link>
        <link link="api objects context request object">context.request.applicationRoot</link>
    </links>
</page>