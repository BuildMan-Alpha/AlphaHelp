<page>
    <shortlink>A5_xb_runReport Function</shortlink>
    <topic>A5_xb_runReport Function</topic>
    <description>Generates the HTML and Javascript to display a report.</description>
    <syntax>c output = A5_xb_runReport(p inputProps)</syntax>
    <arguments>
        <argument>
            <name>inputProps</name>
            <type>P</type>
            <description>Defines the Report to run and various properties of the Report. This object can have the following properties:</description>
            <properties readonly="true">
                <property>
                    <name>inputProps.reportName</name>
                    <type>C</type>
                    <description>The fully qualified report, label or letter name. For example:</description>
                    <example><![CDATA[inputProps.reportName = "Report1@myworkspace.alb"]]></example>
                </property>
                <property>
                    <name>inputProps.initialView</name>
                    <type>C</type>
                    <description>Can either be 'HTML' or 'PDF'. Specify if you want to see a PDF or HTML view of the report. HTML is recommended as it is substantially faster. If the user wants a PDF version of the report, they can click the 'PDF' button on the report toolbar.</description>
                </property>
                <property>
                    <name>inputProps.filter</name>
                    <type>C</type>
                    <description>Report filter. In the case of a report based on .dbf tables, filter can use Xbasic functions. The .filter can use arguments. For example:</description>
                    <example><![CDATA[country = :whatcountry]]></example>
                    <section>
                        <description>
                            <p>In the case of a report based on SQL data, it is recommended that you use the .sqlFilter property rather than the .filter property. If you do specify a .filter property for a SQL report, Alpha Five will try to convert the .filter to a SQL filter. If the filter cannot be converted, the filter will be applied to the data after it has been loaded into a temporary .dbf table from the SQL database.</p>
                        </description>
                    </section>
                </property>
                <property>
                    <name>inputProps.order</name>
                    <type>C</type>
                    <description>
                        <p>Order for the report. </p>
                        <p>In the case of a report based on SQL data, it is recommended that you use the .sqlOrder property rather than the .order property.</p>
                    </description>
                </property>
                <property>
                    <name>inputProps.sqlFilter</name>
                    <type>C</type>
                    <description>WHERE clause for a report based on SQL data. The sqlFilter can use arguments. For example:</description>
                    <example><![CDATA[country = :whatcountry]]></example>
                    <section>
                        <description>
                            <p>It is recommended that you use arguments in the filter rather than literal values. The argument values can be passed in in the .arguments property. (See below)</p>
                        </description>
                    </section>
                </property>
                <property>
                    <name>inputProps.sqlOrder</name>
                    <type>C</type>
                    <description>Order clause for a report based on SQL data.</description>
                </property>
                <property>
                    <name>inputProps.arguments</name>
                    <type>C</type>
                    <description>
                        <p>Argument values must be supplied if the report filter uses arguments.</p>
                        <p>A CR-LF delimited string indicating each argument, its type and value. For example:</p>
                    </description>
                    <example><![CDATA[inputProps.arguments = <<%str%
arg1|c|John
arg2|n|23
arg3|d|12/18/1952
%str%]]></example>
                </property>
                <property>
                    <name>inputProps.componentAlias</name>
                    <type>C</type>
                    <description>Alias of the component. Only needed if the report initial view is HTML.</description>
                </property>
                <property>
                    <name>inputProps.reportDiv</name>
                    <type>C</type>
                    <description>The name of the DIV where the report will be shown.</description>
                </property>
                <property>
                    <name>inputProps.width</name>
                    <type>C</type>
                    <description>Width of the report</description>
                </property>
                <property>
                    <name>inputProps.height</name>
                    <type>C</type>
                    <description>Height of the report</description>
                </property>
                <property>
                    <name>inputProps.styleName</name>
                    <type>C</type>
                    <description>Only needed for HTML reports. Specify the style name (e.g. iOs, etc) for the style of the HTML controls in the HTML Report Viewer.</description>
                </property>
                <property optional="true">
                    <name>inputProps.pdfOptions</name>
                    <type>P</type>
                    <description>(Optional). In the case where the initial view is PDF, a crlf delimited list of PDF options. See [Report.SaveAs] for available PDF options.</description>
                </property>
                <property optional="true">
                    <name>inputProps.buttons</name>
                    <type>P</type>
                    <description>
                        <p>(Applies only when initialView is HTML)</p>
                        <p>By default, all of the buttons on the HTML Report View toolbar are turned on. These buttons are: Export as PDF, Export as Excel, Export as Word, Export as Text and Print HTML. You can optionally control whether a button is shown and you can control properties of each button (such as text, icon, style and bubble help).</p>
                        <p>The following properties are available to control the HTML Report View toolbar:</p>
                    </description>
                    <properties>
                        <property optional="true">
                            <name>inputProps.buttons.pdf</name>
                            <type>L</type>
                            <description>Set to .t. or .f. to control whether or not the PDF button appears on the Toolbar. If omitted, the default is .t.</description>
                        </property>
                        <property optional="true">
                            <name>inputProps.buttons.excel</name>
                            <type>L</type>
                            <description>Set to .t. or .f. to control whether or not the Excel button appears on the Toolbar. If omitted, the default is .t.</description>
                        </property>
                        <property optional="true">
                            <name>inputProps.buttons.word</name>
                            <type>L</type>
                            <description>Set to .t. or .f. to control whether or not the Word button appears on the Toolbar. If omitted, the default is .t.</description>
                        </property>
                        <property optional="true">
                            <name>inputProps.buttons.text</name>
                            <type>L</type>
                            <description>Set to .t. or .f. to control whether or not the Text button appears on the Toolbar. If omitted, the default is .t.</description>
                        </property>
                        <property optional="true">
                            <name>inputProps.buttons.printHTML</name>
                            <type>L</type>
                            <description>Set to .t. or .f. to control whether or not the Print HTML button appears on the Toolbar. If omitted, the default is .t.</description>
                        </property>
                        <property optional="true">
                            <name>inputProps.buttons.&lt;buttonType&gt;.text</name>
                            <type>C</type>
                            <description>&lt;buttonType&gt; must be: pdfButton, excelButton, wordButton, textButton, or printHTMLButton, depending on what type of button you are configuring. Allows you to specify the text label for the button. For example:</description>
                            <example><![CDATA[inputProps.buttons.pdfButton.text = "PDF"]]></example>
                        </property>
                        <property optional="true">
                            <name>inputProps.buttons.&lt;buttonType&gt;.buttonType</name>
                            <type>C</type>
                            <description>Allows you to specify the button style. Options are: Text only, Image only, Text followed by Image, Image followed by text, Image above text, Text above image.</description>
                        </property>
                        <property optional="true">
                            <name>inputProps.buttons.&lt;buttonType&gt;.imageName</name>
                            <type>C</type>
                            <description>Allows you to specify the image for the button (if the image is configured to show an image). If using a built in image, use this syntax:</description>
                            <example><![CDATA[inputProps.buttons.pdfButton.imageName = "images/$$application.adobe.pdf.png.a5image"]]></example>
                        </property>
                        <property optional="true">
                            <name>inputProps.buttons.&lt;buttonType&gt;.bubbleHelp</name>
                            <type>C</type>
                            <description>Allows you to specify the bubble help for the button.</description>
                        </property>
                    </properties>
                </property>
            </properties>
        </argument>
    </arguments>
    <discussion>
        <p>Action Javascript is typically used to generate reports in an application. If you want to dynamically choose the report to create, however, you must use another method to generate the report. The *[xb:a5_xb_runReport()]* function can be used in an Ajax callback to dynamically run a report at run-time. When the report is finished running, the response is sent back to the client to display the report.</p>
    </discussion>
    <sections>
        <section>
            <title>Example</title>
            <description>
                <p>In this example, we show how you can create a UX component that allows a user to select a report and then click a button to print the report.</p>
                <p>Assume that the UX component has the following controls:</p>
            </description>
            <cases>
                <case>
                    <description>
                        <p>A Dropdown called 'WhatReport' in which the user can select the report to print.</p>
                    </description>
                </case>
                <case>
                    <description>
                        <p>A control in which the user can enter the name of a state if the selected report is 'Customers'</p>
                    </description>
                </case>
                <case>
                    <description>
                        <p>A control in which the user can enter an invoice number if the selected report is 'Invoices'.</p>
                    </description>
                </case>
                <case>
                    <description>
                        <p>A button to print the selected report, filtered on the data in the appropriate control (state name or invoice number).</p>
                    </description>
                </case>
                <case>
                    <description>
                        <p>A static text control with this in it (this is where the report will be rendered):</p>
                    </description>
                    <example><![CDATA[<div id="rep1"></div>]]></example>
                </case>
            </cases>
        </section>
        <section>
            <description>
                <p>In this example, the button will make an Ajax callback to a function (called say 'printReportXB'). Here is how the printReportXB function would be defined. </p>
            </description>
            <example><![CDATA[function printReportXB as c (e as p)
    delete p

    'the p object we are going to define now is passed into
    'a5_xb_runReport() to define the report we want to print
    dim p as p
    dim report as c

    'the name of the report that the user selected is in the
    'e.datasubmitted.whatreport variable
    report = e.datasubmitted.whatreport

    'convert the short report name to a fully qualified report name
    if report = "customer" then
        p.reportName = "CustomerReport@ProjectReport"
        p.SQLFilter = "State = :whatstate "

        'set the value of the arguments property to define any arguments used
        ' in the filter
        p.arguments = "whatState|c|" + e.datasubmitted.stateName
    else
        p.reportName = "Invoice@ProjectReport"
        p.sqlfilter = "invoice = :whatInvoice"

        'set the value of the arguments property to define any arguments used
        ' in the filter
        p.arguments = "whatInvoice|n|" + e.datasubmitted.invoiceNumber
    end if

    'set the initial report view to HTML. Can also set to PDF
    p.initialView = "html"


    'since we are using HTML reporting we specify the alias of the host component
    p.componentAlias = e.tmpl.alias

    'the id of the div where the report will be shown
    p.reportdiv = "rep1"

    'the size of the report
    p.width = "12in"
    p.height = "4in"

    'the style to use for the HTML Report Viewer. We want the style to match the
    'style of the host component, so we pass in the style name used by the UX component
    p.styleName = e.tmpl.style_name

    'Turn off the 'Export to Text' button on the Report Toolbar
    P.buttons.text = .f.

    'Set the bubble help for the 'Print HTML' button to some text that uses
    'language tags
    P.buttons.printHTMLButton.bubbleHelp = "<a5:r>Print</a5:r>"

    dim js as c
    'Passing in tmpl and rtc is optional. however, if you don't then language tags
    'in the buttons will not be evaluated.
    'In this case, we used a language tag in the bubble help for one of the buttons
    js = a5_xb_runReport(p, e.tmpl, e.rtc)

    printReportXB = js

end function]]></example>
            <note>
                <p>This example demonstrates running a Project report. To run a Workspace report, the syntax for the fully qualified report name is *[xb:&lt;report name&gt;@&lt;workspace name&gt;.alb]*. EG, *[xb:MyReport@MyAppWorkspace.alb]*.</p>
                <p>Workspace reports are only recommended for use in Desktop applications. Use Project reports in a Web or Mobile Alpha Anywhere application.</p>
            </note>
        </section>
        <section>
            <title>Specifying PDF Options</title>
            <description>
                <p>The PDF options parameters are defined as a CR-LF delimited list. A complete list of PDF options are listed in the [Report.SaveAs] article. The example below demonstrates how this is done:</p>
            </description>
            <example><![CDATA[dim pdfOptions as C
pdfOptions =<<%str%
DIM Concatenate as L
DIM HasWatermark as L = .T.
DIM MultilingualSupport as L = .T.
DIM EmbedFonts as L
DIM LinearizeForWeb as L
DIM Colors2GrayScale as L
DIM ConvertHyperlinks as L
DIM WatermarkType as C = "Text"
DIM WatermarkText as C = "D R A F T"
DIM WatermarkFontName as C = "Times New Roman"
DIM WatermarkFontSize as N = 172
DIM WatermarkRotation as N = 450
DIM WatermarkColorHex as C = "E8FED2"
DIM WatermarkHorizPos as N = 120
DIM WatermarkVertPos as N = -120
DIM WatermarkOnTop as L
DIM WatermarkPDF as C
DIM Encrypt as L
DIM OwnerPassword as C
DIM UserPassword as C
DIM CanPrint as L = .T.
DIM CanModifyDocument as L = .T.
DIM CanCopy as L = .T.
DIM CanAddNotes as L = .T.
DIM Use128BitKey as L = .T.
DIM JpegQuality as C = "Low"
%str%]]></example>
        </section>
        <section>
            <description>
                <p>You can also specify PDF options globally for the Alpha Anywhere project in the Web Project Properties. See [PDF Printing Options] for more information.</p>
            </description>
        </section>
        <section>
            <title>Additional Resources</title>
            <description>
                <p>To learn more, watch the video below:</p>
            </description>
            <videos>
                <video>
                    <name>Watch Video</name>
                    <link>http://www.ajaxvideotutorials.com/V12Videos/ux_component_a5_xb_runReport.swf</link>
                </video>
            </videos>
        </section>
        <section>
            <note>This video demonstrates running Workspace reports. In web or mobile applications, Project reports are used instead of Workspace reports.</note>
        </section>
    </sections>
    <links>
        <link href="/documentation/index?search=report.saveas%20function">Report.SaveAs</link>
        <link href="">PDF Printing Options</link>
    </links>
</page>