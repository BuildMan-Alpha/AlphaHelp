<page api="xb">
      <shortlink>api between num function</shortlink>
   <topic>BETWEEN_NUM Function</topic>
   <description>Creates a string using the Between() function</description>
 
   <prototype>Filter_Expression as C = between_num(C field ,N num1 ,N num2 )</prototype>
   <arguments>
      <argument>
         <name>Filter_Expression</name>
         <description>A character  filter expression that evaluates to a logical value and selects records  from a table.
</description>
     </argument>
     <argument>
         <name>field</name>
         <description>The name of a field that you wish to write a filter  expression against.</description>
     </argument>
     <argument>
         <name>num1</name>
         <description>A numeric variable or value that contains the first  or lowest value to include in the filter. Numeric</description>
     </argument>
     <argument>
         <name>num2</name>
         <description>A numeric variable or value that contains the last or  highest value to include in the filter. Numeric</description>
     </argument>
   </arguments>
     <discussion>
BETWEEN_NUM()  returns a character  filter expression that uses the two number values and selects records  from the table. This function is only useful in Xbasic scripts. Field_Name is a numeric field or expression to search  on. Low_Value and High_Value are numeric variables.  They are the first and last values in a range of records to find.
Frequently in Xbasic scripts, you need to specify a filter expression  in quotes. It can get quite tricky to do this if your Low_Value and High_Value values are stored in variables.  For example, the following code fragment shows how to specify a filter  expression for an Xbasic query:

   </discussion>
   
   <sections>
       <section> 
            <example><![CDATA[
dim shared First as N 
dim shared Last as N
t = tbl.open("customer") 
query.filter = "between(qty, " + First + ", "  + Last + ")" 
t.query_create()
]]></example>
       </section>
       
       <section>
            <description>Assuming that First contains 3, and Last contains 10, query.filter will contain the following  value:
</description>
            <example><![CDATA[
"between(qty, 3, 10)"
]]></example>
       </section>
       <section>
            <description>This is a valid filter expression. However, it is very cumbersome to  write the expression that defines the query.filter variable. The BETWEEN_CHAR() utility function makes it easier to write  this filter expression. For example:
</description>
            <example><![CDATA[
query.filter = between_num("qty", First, Last)
]]></example>
       </section>
       <section>
            <description>If you are searching on fields/expressions of other types, use the appropriate  utility function. Assuming that lastname, qty, and invoice_date are  field names.
</description>
       </section>
   </sections>
   
   <sections><section>
   	<list>
   		





   		<item>
   			<name-title>Field Type</name-title>
   			<description-title>Function and Example</description-title>
   		</item>
   		
   		<item>
   			<name>Character</name>
   			<description>BETWEEN_CHAR(): between_char("lastname",  first, last)</description>
   		</item>
   		<item>
   			<name>Numeric</name>
   			<description>BETWEEN_NUM(): between_num("qty", first,  last)</description>
   		</item>
   		<item>
   			<name>Date</name>
   			<description>BETWEEN_DATE(): between_date("invoice_date",  first, last)</description>
   		</item>
   		<item>
   			<name>Record number</name>
   			<description>BETWEEN_RECORD(): between_record(first, last)</description>
   		</item>
   		
   		
   	</list></section>
   </sections>
   
   <sections><section>
   <example><![CDATA[between_char("Lastname","Smith", "Jones")  -> "between(lastname, \"Smith\", \"Jones\")"
between_num("Qty", start, end) -> "between(qty,  3, 10)", assuming the start and end variables contain 3 and 10
between_date("Invoice_Date", start, end) -> "between(invoice_date, {1/1/2000}, {12/31/2000})",  assuming the start and end variables contain {1/1/2000} and {12/31/2000}.
between_record(start, end) -> "between(recno() , 3,  10)", assuming the start and end variables contain 3 and 10  'The following example shows how these functions can be used in situations where a quoted filter string is expected:'(Note that since the function RETURNS a quoted string, it is not necessary to quote the value assigned to query.filter)query.filter = between_char("Lastname","Smith","Jones")query.order = "Lastname"dim tbl as p dim i as p tbl = table.open("customers")i = tbl.query_create()  startDate = {1/1/2007}endDate = {1/31/2008}query.filter = between_date("OrderDate",startDate,endDate)query.order = "OrderId"tbl = table.open("Orders")i = tbl.query_create() 
  ]]> </example>
   </section></sections>
   
   <see>
      <ref link="Xbasic Functions">Expression  Evaluation Functions</ref>
      <ref link="Writing Expressions">Writing  Expressions</ref>
   </see>
   <terms>expressions,contains,field,filter,function,logical,number,record,search,searching,string,variable,writing,Xbasic</terms>
</page>