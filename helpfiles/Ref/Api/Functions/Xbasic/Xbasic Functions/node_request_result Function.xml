<page api="xb">
    <shortlink>api node request result function</shortlink>
    <topic>node_request_result Function</topic>
    <prototype>Result as P = node_request_result (nodeService as c, pData as p [, flagRestartNode as L [, flagShowCommandWindow as L [, flagAllowDebug as L [, opsIn as P]]]])</prototype>
    <arguments>
        <argument>
            <name>nodeService</name>
            <type>C</type>
            <description>Name of the node service to run.</description>
        </argument>
        <argument>
            <name>pData</name>
            <type>P</type>
            <description>Pointer to parameters to pass to the node service.</description>
        </argument>
        <argument optional="true">
            <name>flagRestartNode</name>
            <type>L</type>
            <description>
                <p>.t. or .f. value. Default .f.</p>
                <p>Flag indicating whether or not the node server should be restarted when node_request is called. .t. restarts the node server. Restarting the node server can be useful for debugging purposes. flagRestartNode should be set to .f. in a production environment.</p>
            </description>
        </argument>
        <argument optional="true">
            <name>flagShowCommandWindow</name>
            <type>L</type>
            <description>
                <p>.t. or .f. value. Default .f.</p>
                <p>Show the command window for the node service handler (allows developer to see feedback using console.log() in the handler).</p>
            </description>
        </argument>
        <argument optional="true">
            <name>flagAllowDebug</name>
            <type>L</type>
            <description>
                <p>.t. or .f. value. Default .f.</p>
                <p>Enable node debugger (requires that the node debugger be launched).</p>
            </description>
        </argument>
        <argument optional="true">
            <name>opsIn</name>
            <type>P</type>
            <description>Default = null_value(). A dot variable used to define optional [Helper::NodeAttachments]. Can have the following properties:</description>
            <properties>
                <property>
                    <name>attachmentsIn</name>
                    <type>Helper::NodeAttachments</type>
                    <description>A [Helper::NodeAttachments] object to pass into the Node Service.</description>
                </property>
                <property>
                    <name>attachmentsOut</name>
                    <type>Helper::NodeAttachments</type>
                    <description>A [Helper::NodeAttachments] object that is returned from the Node Service.</description>
                </property>
            </properties>
        </argument>
    </arguments>
    <returns>
        <return>
            <name>Result</name>
            <type>P</type>
            <description>Returns a dot variable containing the parsed JSON object returned by the Node Service. Includes the following properties:</description>
            <properties>
                <property>
                    <name>result</name>
                    <type>A</type>
                    <description>The parsed JSON results returned by the Node Service.</description>
                </property>
                <property>
                    <name>error</name>
                    <type>C</type>
                    <description>An error message, if an error occurred. Otherwise blank.</description>
                </property>
                <property>
                    <name>attachments</name>
                    <type>Helper::NodeAttachments</type>
                    <description>A [Helper::NodeAttachments] object that contains binary data returned from the node service.</description>
                </property>
            </properties>
        </return>
    </returns>
    <description>Calls a node service from Xbasic and returns the parsed JSON.</description>
    <discussion>A wrapper around the node_request() function, except that instead of returning a JSON string, the JSON is already parsed and the function returns a .result and .error property. If there was no error, the .error property is blank.</discussion>
    <example code="xb"><![CDATA[dim pIn as p
pIn.x = 4
pIn.y = 3

dim pOut as p
pOut = node_request_result("multiply",pIn)

?pOut.error
= ""  'empty string indicates no errors.

?pOut.result
= 12]]></example>
    <links>
        <link link="api helper nodeattachments class method">Helper::NodeAttachments</link>
    </links>
    <see>
        <ref link="api node request function">node_request()</ref>
        <ref link="node services workspace">Node Services</ref>
        <ref link="node modules workspace">Node Modules</ref>
    </see>
</page>