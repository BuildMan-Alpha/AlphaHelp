<page api="xb">
    <shortlink>api star tree from outline function</shortlink>
   <topic>*TREE_FROM_OUTLINE Function</topic>
    <description>Transform an outline string to a tree string.</description>
  
   <prototype>Tree_Data as C = *TREE_FROM_OUTLINE(C outlinedef[,C outline_ident[,C separator[,L expandBranch]]])</prototype>
   <arguments>
     <argument>
         <name>Tree_Data</name>
         <description>Data formatted for display in a tree control.</description>
     </argument>
     <argument>
         <name>outlinedef</name>
         <description>A CR-LF delimited list indented with instances of Indent_String.</description>
     </argument>
     <argument>
         <name>outline_ident</name>
         <description>Optional. Default = "" (8 spaces). A character that separates the "branches" in the tree data.
</description>
     </argument>
     <argument>
         <name>separator</name>
         <description>Optional. Default = ".". A character string that represents an indent level in the indented list.
</description>
     </argument>
     <argument>
         <name>expandBranch</name>
         <description>Logical</description>
     </argument>
   </arguments>
   <discussion>
The *TREE_FROM_OUTLINE() function converts an indented list into data formatted for display in a tree control.

   </discussion>
   <example><![CDATA[
dim outline as C
? outline
= customer
+orders
++items
++salespeople
+payment
++checks
Location
+State
? *tree_from_outline(outline,"+",".")
= customer.orders.items
customer.orders.salespeople
customer.payment.checks
Location.State

]]></example>
   
   <see>
      <ref link="api formatting functions">Character Formatting Functions</ref>
      <ref link="api list processing functions">List Processing Functions</ref>
      <ref link="api star tree to outline function">*TREE_TO_OUTLINE()</ref>
   </see>
   
<terms>tree control,display,formatting,function,list,list processing,logical,string</terms>

</page>