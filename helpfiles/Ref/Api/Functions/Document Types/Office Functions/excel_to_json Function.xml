<page api="xb" build="5864">
    <shortlink>excel_to_json function</shortlink>
    <topic>excel_to_json Function</topic>
    <description>
        <p>Takes an Excel file and returns a string of JSON data.</p>
    </description>
    <prototypes>
        <prototype>C result = excel_to_json(C filename [, C filter [, C order [, C argumentsXML [, C sheetName [, L flagReturnArray [, L flagHTMLEncode]]]]]])</prototype>
    </prototypes>
    <arguments>
        <argument>
            <name>filename</name>
            <type>C</type>
            <description>
                <p>The file name of the Excel file.</p>
            </description>
        </argument>
        <argument optional="true">
            <name>filter</name>
            <type>C</type>
            <description>
                <p>Default = "". An optional SQL WHERE clause. Ignored if data is read from multiple sheets.</p>
            </description>
        </argument>
        <argument optional="true">
            <name>order</name>
            <type>C</type>
            <description>
                <p>Default = "". An optional SQL ORDER clause. Ignored if data is read from multiple sheets.</p>
            </description>
        </argument>
        <argument optional="true">
            <name>argumentsXML</name>
            <type>C</type>
            <description>
                <p>Default = "". Required if arguments are used in the filter.</p>
            </description>
        </argument>
        <argument optional="true">
            <name>sheetName</name>
            <type>C</type>
            <description>
                <p>Default = the first sheet. The name of the Excel sheet to read records from.  If you do not specify a value, the first sheet in the file is assumed. You can specify a comma delimited list of sheets, or *[xb:*]* (to get all sheets). If you specify * or more than one sheet, you cannot specify a *[xb:filter]* or *[xb:order]* and the result is a JSON array with data for each sheet.</p>
            </description>
        </argument>
        <argument optional="true">
            <name>flagReturnArray</name>
            <type>L</type>
            <description>
                <p>Default = *[xb:.f.]*. This property only applies when *[xb:sheetName]* is set to "*". When set to *[xb:.f.]*, the function returns a JSON object where each sheet name is a property in the array. For example:</p>
                <p>
                <example code="json"><![CDATA[{
    "Sheet1": [
        {
            "ID": 1,
            "Name": "Janet"
        },
        {
            "ID": 2,
            "Name": "Steven"
        }
    ],
    "Sheet2": [
        {
            "ID": 1,
            "Name": "Maria"
        },
        {
            "ID": 2,
            "Name": "Taylor"
        }
    ]
}]]></example>
                </p>
                <p>If set to *[xb:.t.]*, data is returned as an array of objects. E.g.:</p>
                <p>
                    <example code="json"><![CDATA[[
{
"sheetname": "Sheet1",
"json": "[\r\n{\r\n\t\"ID\": 1,\r\n\t\"Name\": \"Janet\"\r\n},\r\n{\r\n\t\"ID\": 2,\r\n\t\"Name\": \"Steven\"\r\n}]"
},
{
"sheetname": "Sheet2",
"json": "[\r\n{\r\n\t\"ID\": 1,\r\n\t\"Name\": \"Maria\"\r\n},\r\n{\r\n\t\"ID\": 2,\r\n\t\"Name\": \"Taylor\"\r\n}]"
}]]]></example>
                </p>
            </description>
        </argument>
        <argument optional="true" build="6655">
            <name>flagHTMLEncode</name>
            <type>L</type>
            <description>
                <p>Internal Use Only</p>
            </description>
        </argument>
    </arguments>
    <returns>
        <return>
            <name>result</name>
            <types>
                <type>C</type>
            </types>
            <description>
                <p>Returns the Excel file as JSON array where each record is an object in the JSON array.</p>
            </description>
        </return>
    </returns>
    <example code="xb"><![CDATA[dim fn as c = "C:\excelfiles\myExcelDoc.xlsx";
dim filter as c = ""
dim order as c = "
dim xmlArgs as c = ""
dim sheet as c = "products"

dim result as c
result = excel_to_json(fn, filter, order, xmlArgs, sheet)

showvar(result)]]></example>
</page>