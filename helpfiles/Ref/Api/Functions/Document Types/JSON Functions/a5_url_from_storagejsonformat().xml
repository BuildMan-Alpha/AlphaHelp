<page>
	<shortlink>a5_url_from_storageJSONFormat()</shortlink>
	<topic>a5_url_from_storageJSONFormat Function</topic>
	<syntax>C result = a5_url_from_storageJSONFormat(json as C [, numberOfSecondsBeforeURLExpires as N ])	</syntax>
	<arguments>
		<argument>
			<name>json</name>
			<type>C</type>
			<description>A JSON object.</description>
		</argument>
		<argument optional="true">
			<name>numberOfSecondsBeforeURLExpires</name>
			<type>N</type>
			<description>Default value is 240. Defines the number of seconds before the URL expires.</description>
		</argument>
	</arguments>
	<videos>
		<video>
			<name>Watch Video Part 1</name>
			<link>http://www.ajaxvideotutorials.com/V12Videos/ux_amazon_s3_1.swf</link>
		</video>
		<video>
			<name>Watch Video Part 2</name>
			<link>http://www.ajaxvideotutorials.com/V12Videos/ux_amazon_s3_2.swf</link>
		</video>
	</videos>
	<description>Generates a signed URL to download a file from Amazon S3 storage.</description>
	<discussion>The a5_url_from_storageJSONFormat Function takes a JSON definition, such as "{cs: 'alphamediacapture',object: 'my_movies7.xlsx',source: 'S3'}", for an object in storage on a site like Amazon S3. It then uses this JSON to generate a signed URL so that the object can be downloaded and displayed on the client from storage.</discussion>
	<sections>
		<section>
			<description>The a5_url_from_storageJSONFormat function generates a signed URL to download a file from Amazon S3 storage. The a5_url_from_storageJSONFormat function can be used to display/download a file from storage (e.g. Amazon S3) directly, with very little load on the Alpha server. The purpose of the function is to take a JSON string that defines the address of an object in storage (e.g. Amazon S3) and to generate a signed URL that can be used to download the object directly to the client from storage without having to first download the object to the Alpha server and then have the Alpha server send the file to the client.</description>
		</section>
		<section>
			<description>The JSON string format that defines the address of an object in storage is:</description>
			<example><![CDATA[{cs: 'storage connection string', object: 'name of object', source: 'vendor'}]]></example>
			<note>Currently the only vendor supported is Amazon S3 so vendor must be set to 'S3'</note>
		</section>
		<section>
			<note>The storage connection string is defined by selecting the Tools, Storage Connection Strings menu when the Web Projects Control Panel has focus. When you define storage connection strings you have the option of encrypting the storage connection string. You must NOT encrypt the storage connection string or else Alpha Anywhere will not be able to parse the storage connection string to determine your storage credentials.</note>
		</section>
		<section>
			<description>For example, assume you have a named storage connection string called 'myS3bucket'. A JSON string that defines the address of an object called 'ProductPrices.pdf' would be:</description>
			<example><![CDATA[{cs: 'myS3bucket', object: 'ProductPrices.pdf', source: 'S3'}]]></example>
		</section>

		<section>
			<description>To generate a URL to display or download this object you would do the following:</description>
			<example><![CDATA[dim address as c address =
<<%txt% 
{ 
cs: 'myS3bucket', 
object: 'ProductPrices.pdf', 
source: 'S3' 
} 
%txt% 
dim url as c 
url=a 5_url_from_storateJSONformat(address)]]></example>
		</section>
		<section>
			<description>The resulting URL would look something like this (assuming that the bucket name specified in the connection string was 'myBucket'):</description>
			<example><![CDATA[https://s3.amazonaws.com/myBucket/ProductPrices.pdf?
AWSAccessKeyId=key Expires=expiration&Signature=signature]]></example>
		</section>
		<section>
			<description>Where:</description>
			<cases>
				<case>
					<title>key</title>
					<description>your access key - as defined in the storage connection string</description>
				</case>
				<case>
					<title>expires </title>
					<description>indicates how long the URL can be used for (only applies if the object was uploaded to storage as 'Protected Read')</description>
				</case>
				<case>
					<title>signature</title>
					<description>
						<p>A special signature based on the credentials specified in the storage connection string.</p>
						<p>By default, the expires property is 240 seconds. That means that if the URL is used more than 240 seconds after it was generated, Amazon S3 will return a 'permission denied' error. The a5_url_from_storageJSONFormat() function takes an optional second argument where you can specify how long the URL is good for in seconds. The default value for this parameter is 240.</p>
					</description>
				</case>
			</cases>
		</section>
		<section>
			<description>The a5_url_from_storageJSONFormat() Function takes a JSON definition, such as "{cs: 'alphamediacapture',object: 'my_movies7.xlsx',source: 'S3'}", for an object in storage on a site like Amazon S3. It then uses this JSON to generate a signed URL so that the object can be downloaded and displayed on the client from storage. Because the upload occurs directly to the Amazon servers, almost no load is placed on the Alpha Application Server itself. In fact, the only work the Alpha Server needs to do is to sign the URL used for the upload of each file every time a callback is made. This is necessary because the secret key for your Amazon account is stored on the Alpha server. The second argument in the a5_url_from_storageJSONFormat() definition is a 'numberOfSecondsBeforeURLExpires' flag. If the stored object is protected, this flag specifies the number of seconds that the URL can be used after it has been generated, the default being 240 seconds. If the URL is used more than 240 seconds after being generated, Amazon S3 will return a 'permission denied' error.</description>
		</section>
		<section>
			<description>To use a5_url_from_storageJSONFormat() it is necessary to create a storage connection string. You can do this by clicking on the Tools dropdown menu in the Web Projects Control Panel toolbar and selecting the Storage Connection Strings option. The Storage Connection Strings dialog will open. You can click New to open the Add New Connection String dialog and Build to open the Storage Connection String Builder. When you define storage connection strings you have the checkbox option to 'Encrypt Connection String'. You must NOT encrypt the storage connection string. Otherwise Alpha Anywhere will not be able to parse the storage connection string and determine your storage credentials. The Storage Connection String Builder lets you define your Access Key. You can also define whether you want to use a special signature, that is generated in part from the Secret Key setting, in the Storage Connection String Builder. A signature in this case means a unique security token that a user can identify but that is never the same.</description>
		</section>
		<section>
			<description>Currently the only vendor supported by Alpha Anywhere is Amazon S3 so the Storage Provider must be set to 'AmazonS3'. The Amazon S3 File Upload has a number of features. It gives you the ability to upload a single file or multiple files and to set rules for the maximum size of an individual file; or all files, if multiple file upload is supported. It also shows the progress of files being uploaded and allows you to cancel a file upload. Amazon S3 File Upload has a full event model that allows you to completely customize the action when downloading objects. In other words, you have the ability to get feedback on your download while it is going on; and possibly interrupt a download if you are tired of waiting for something to finish. Another useful feature is the capacity to specify the name, including the sub-folder name, for each object that is stored on S3. A Javascript function can be called to dynamically compute the fully qualified name of the object on S3. You also have the option to set the read permission on the uploaded files, i.e. if they are to be public read or authenticated read.</description>
			<note>Action Javascript has an action for the UX component to upload files to a bucket in Amazon S3 storage. This action is not available for the Grid Component. However, the standard 'File Upload' and 'Image Upload' actions in Action Javascript, which are supported in the Grid now supports an option to target the upload to Amazon S3.</note>
		</section>
	</sections>
	<see>
		<ref href="/documentation/index?search=a5_sql_nested_query_to_json_document()">a5_sql_nested_query_to_json_document()</ref>
		<ref href="/documentation/index?search=a5_xbasictreetojsontree()">a5_xbasictreetojsontree()</ref>
		<ref href="/documentation/index?search=JSON Data">JSON Data</ref>
	</see>
	<terms>JSON,a5,display,function,object,string</terms>
</page>