<page api="xb">
    <shortlink>a5_sql_nested_query_to_json_document Function</shortlink>
    <topic>a5_sql_nested_query_to_json_document Function</topic>
    <description>Execute queries against one or more SQL databases, returning the result as a JSON document.</description>
    <prototype>P result = a5_sql_nested_query_to_json_document(options as P, Args as SQL::Arguments [, Mode as C])</prototype>
    <arguments>
        <argument>
            <name>options</name>
            <type>P</type>
            <description>The options object that is passed into the function has these properties:</description>
            <properties>
                <property optional="true">
                    <name>connectionString</name>
                    <type>C</type>
                    <description>The connection string for the query. This is an optional property. You can also specify a query string to use for each nested query. If you do not specify *[xb:connectionString]*, then you MUST specify a connection string for each query. Typically, you are querying against a single database, so it's more efficient to specify the *[xb:connectionString]* property instead of a connection string for each SQL statement.</description>
                </property>
                <property>
                    <name>SQL</name>
                    <type>C</type>
                    <description>
                        <p>A CRLF delimited list of JSON objects containing the SQL statements to execute. The indentation in the parameter (using tabs) indicates the hierarchy of the query. See [below] for more details.</p>
                        <p>Each JSON object has the following properties:</p>
                        <p>
                            <list>
                                <item>
                                    <name>*[xb:sql]*</name>
                                    <description>Required. The SQL statement to execute.</description>
                                </item>
                                <item>
                                    <name>*[xb:name]*</name>
                                    <description>Required. A unique name identifying this query. This name is used for the child records in the generated JSON document.</description>
                                </item>
                                <item>
                                    <name>*[xb:parentKey]*</name>
                                    <description>Only required for child queries. Defines the field in the child SQL statement that joins the child query with the parent query.</description>
                                </item>
                                <item>
                                    <name>*[xb:key]*</name>
                                    <description>Only required for child queries. Defines the field in the child's parent SQL query that joins the child query with the parent query.</description>
                                </item>
                                <item>
                                    <name>*[xb:connectionString]*</name>
                                    <description>Required if *[xb:options.connectionString]* is not specified or if the SQL queries retrieve data from different databases.</description>
                                </item>
                                <item>
                                    <name>*[xb:limit]*</name>
                                    <description>Optional. The maximum number of records to retrieve for the query.</description>
                                </item>
                            </list>
                        </p>
                    </description>
                </property>
                <property optional="true">
                    <name>flagUseSubSelects</name>
                    <type>L</type>
                    <description>Indicates if child SQL queries use a SQL Sub-select in the WHERE clause. If you are querying against a single database, this is the most efficient option. If each query specifies its own connection string, then this flag must be set to *[xb:.F.]*. </description>
                </property>
                <property optional="true">
                    <name>sparse</name>
                    <type>L</type>
                    <description>If *[xb:.T.]*, suppresses parent key values in child records.</description>
                </property>
                <property optional="true">
                    <name>convertToText</name>
                    <type>L</type>
                    <description>If *[xb:.T.]*, converts all dates to strings. If *[xb:.F.]*, preserves data types.</description>
                </property>
            </properties>
        </argument>
        <argument>
            <name>Args</name>
            <type>SQL::Arguments</type>
            <description>The arguments used by SQL statements defined in the *[xb:SQL]* property.</description>
        </argument>
        <argument optional="true">
            <name>Mode</name>
            <type>C</type>
            <description>Internal use only.</description>
        </argument>
        <argument optional="true">
            <name>wfin</name>
            <type>P</type>
            <description>
                <p>Internal use only.</p>
            </description>
        </argument>
    </arguments>
    <returns>
        <return>
            <name>result</name>
            <types>
                <type>P</type>
            </types>
            <description>
                <p>Returns an object with the following properties:</p>
            </description>
            <properties>
                <property>
                    <name>hasError</name>
                    <type>L</type>
                    <description>*[xb:.T.]* if the operation succeed. Otherwise, *[xb:.F.]*</description>
                </property>
                <property>
                    <name>errorText</name>
                    <type>C</type>
                    <description>If *[xb:hasError]* is *[xb:.T.]*, contains additional information about why the query failed.</description>
                </property>
                <property>
                    <name>data</name>
                    <type>C</type>
                    <description>A JSON string containing the results of the query.</description>
                </property>
            </properties>
        </return>
    </returns>
    <discussion>This function is inspired by NoSQL databases that return a JSON document with a query result. The JSON document return by such a query often contains nested JSON documents. For example for each customer, show orders for that customer, and for each order, show order details for that order.</discussion>
    <sections>
        <section>
            <description>Here is a sample JSON document returned by this function showing customers, nested orders, and nested order details:</description>
            <example><![CDATA[{
    "customer": [
        {
            "customerId": "HUNGO",
            "companyName": "Hungry Owl All-Night Grocers",
            "orders": [
                {
                    "orderid": "10298",
                    "customerid": "HUNGO",
                    "value": "10298",
                    "orderDetails": [
                        {
                            "OrderID": "10298",
                            "ProductID": "2",
                            "UnitPrice": "15.2",
                            "Quantity": "40",
                            "Discount": "0"
                        }
                    ]
                },
                {
                    "orderid": "10309",
                    "customerid": "HUNGO",
                    "value": "10309",
                    "orderDetails": [
                        {
                            "OrderID": "10309",
                            "ProductID": "4",
                            "UnitPrice": "17.6",
                            "Quantity": "20",
                            "Discount": "0"
                        },
                        truncated for brevity....
]]></example>
        </section>
        <section>
            <title>options.SQL parameter</title>
            <description>The example below shows how to set the *[xb:options.sql]* parameter:</description>
            <example><![CDATA[options.sql = <<%txt%
{sql: 'select * from customers where country = :whatCountry ', name: 'customer' }
	{sql:'select * from orders', name: 'orders', parentKey: 'cId', key: 'cId'}
%txt%]]></example>
        </section>
        <section>
            <description>Notice that the *[xb:options.sql]* property is a CRLF delimited string of JSON strings in this format:</description>
            <example><![CDATA[options.SQL = <<%txt%
{JSON string 1}
	{JSON string2}
%txt%]]></example>
        </section>
        <section>
            <description>
                <p>The fact that *[xb:{JSON string 2}]* is indented (using a single Tab character NOT spaces) is significant. The indentation indicates that this query is an immediate child of the query in the line above it.</p>
                <p>You can have multiple levels of indentation. and multiple queries with the same parent, for example:</p>
            </description>
            <example><![CDATA[options.SQL = <<%txt%
{JSON string 1}
	{JSON string2}
		{JSON string 3}
	{JSON string 4}
%txt%]]></example>
        </section>
        <section>
            <description>In the above example, the SQL query defined by *[xb:{JSON string 3}]* is a child of *[xb:{JSON string2}]*. The query defined by *[xb:{JSON string 1}]* has two child queries. A real world example of an hierarchy that would be defined using the above structure might be:</description>
            <example><![CDATA[Customers
	Orders
		OrderDetails
	Payments
]]></example>
        </section>
        <section>
            <title>Example 1 - Simple two level query</title>
            <example><![CDATA[dim ops as p
ops.connectionString = "::Name::northwind"
ops.sql = <<%txt%
{sql: 'select * from customers where country = :whatCountry ', name: 'customer' }
	{sql: 'select * from orders', name: 'orders', parentKey: 'customerid', key: 'customerId'}
%txt%
dim args as sql::Arguments
args.add("whatCountry","France")
p = a5_sql_nested_query_to_json_document(ops,args)
?p.data

 = {
    "customer": [
        {
            "CustomerID": "BLONP",
            "ContactTitle": "Marketing Manager",
            "CompanyName": "Blondesddsl piére et fils",
            "Address": "24, place Klöber",
            "ContactName": "Frédérique Citeaux",
            "City": "Strasbourg",
            "Region": null,
            "PostalCode": "67000",
            "Country": "France",
            "Phone": "88.60.15.31",
            "Fax": "88.60.15.32",
            "image": null,
            "imageThumb": null,
            "orders": [
                {
                    "OrderID": "10265",
                    "CustomerID": "BLONP",
                    "EmployeeID": "2",
                    "OrderDate": "07/25/1996 12:00:00 00 am",
                    "RequiredDate": "08/22/1996 12:00:00 00 am",
                    "ShippedDate": "08/12/1996 12:00:00 00 am",
                    "ShipVia": "1",
                    "Freight": "55.28",
                    "ShipAddress": "24, place Klöber",
                    "ShipCity": "Strasbourg",
                    "ShipRegion": null,
                    "ShipName": "Blondel piére et fils",
                    "ShipPostalCode": "67000",
                    "ShipCountry": "France"
                },
                {
                    "OrderID": "10297",
                    "CustomerID": "BLONP",
                    "EmployeeID": "5",
                    "OrderDate": "09/04/1996 12:00:00 00 am",
                    "RequiredDate": "10/16/1996 12:00:00 00 am",
                    "ShippedDate": "09/10/1996 12:00:00 00 am",
                    "ShipVia": "2",
                    "Freight": "5.74",
                    "ShipAddress": "24, place Klöber",
                    "ShipName": "Blondel piére et fils",
                    truncated for brevity......
]]></example>
        </section>
        <section>
            <title>Example 2 - Simple three level query</title>
            <example><![CDATA[dim ops as p
ops.connectionString = "::Name::northwind"
ops.sql = <<%txt%
{sql: 'select * from customers where country = :whatCountry ', name: 'customer' }
	{sql: 'select * from orders', name: 'orders', parentKey: 'customerid', key: 'customerId'}
		{sql: 'select * from [order details]', name: 'orderDetails', parentKey: 'orderId', key: 'orderId'}
%txt%

dim args as sql::Arguments
args.add("whatCountry","France")
p = a5_sql_nested_query_to_json_document(ops,args)

]]></example>
        </section>
        <section>
            <title>Example 3 - Three level query </title>
            <description>A three level query, where each query is in a different database (the connection string is specified for each query). </description>
            <example><![CDATA['since each query specifies its own connection string, the flagUseSubSelects flag must 
'be set to .f.
ops.flagUseSubSelects = .f.

ops.sql = <<%txt%
{sql: 'select * from customers where country = :whatCountry ', name: 'customer' , connectionString: '::Name::northwind'}
	{sql: 'select * from orders', name: 'orders', parentKey: 'customerid', key: 'customerId', connectionString: '::Name::northwind2'}
		{sql: 'select * from [order details]', name: 'orderDetails', parentKey: 'orderId', key: 'orderId' , connectionString: '::Name::northwind2'}
%txt%

dim args as sql::Arguments
args.add("whatCountry","France")

p = a5_sql_nested_query_to_json_document(ops,args)]]></example>
        </section>
        <section>
            <title>Limiting the Number of Child Records</title>
            <description>
                <p>If you want to limit the number of records retrieved at any level in the hierarchy, you can using the limit property.</p>
                <p>To limit the number of records at the top level of the hierarchy, you would simply use the FIRST clause in your SQL select statement. However, for child queries, using the FIRST clause in the SQL will not work (because you want the FIRST n records within EACH parent group, not the FIRST n records in ALL parent groups).</p>
                <p>To limit the number of records in a child query, you use the 'limit' property in the JSON object that defines the query.</p>
                <p>For example in the code shown below we are fetching the first 5 orders for each customer:</p>
            </description>
            <example><![CDATA[dim ops as p
ops.connectionString = "::Name::northwind"
ops.sql = <<%txt%
{sql: 'select * from customers', name: 'customer' }
	{sql: 'select * from orders', name: 'orders', parentKey: 'customerid', key: 'customerId', limit: 5}
%txt%]]></example>
            <note>If you do use a FIRST clause in a child SQL statement, the SQL statement is automatically parsed and the FIRST clause is removed and converted into a 'limit' property in the JSON definition. So, the following two objects are actually equivalent:</note>
        </section>
        <section>
            <example><![CDATA[ops.connectionString = "::Name::northwind"
ops.sql = <<%txt%
{sql: 'select * from customers', name: 'customer' }
	{sql: 'select * from orders', name: 'orders', parentKey: 'customerid', key: 'customerId', limit: 5}
%txt%

ops.connectionString = "::Name::northwind"
ops.sql = <<%txt%
{sql: 'select * from customers', name: 'customer' }
	{sql: 'select FIRST 5 * from orders', name: 'orders', parentKey: 'customerid', key: 'customerId'}
%txt%]]></example>
        </section>
        <section>
            <title>Eliminating Key Values</title>
            <description>By default, the JSON that is created shows the parent key value in the child data. For example in the example JSON shown below (which shows a customer, and all of their orders), the 'CustomerID' property is shown n each item in the 'orders' array. This is really not necessary.</description>
            <example><![CDATA[= {
    "customer": [
        {
            "CustomerID": "BLONP",
            "CompanyName": "Blondesddsl piére et fils",
            "orders": [
                {
                    "OrderID": "10265",
                    "ContactName": "Frédérique Citeaux",
                    "CustomerID": "BLONP",
                    "EmployeeID": "2",
                    "OrderDate": "07/25/1996 12:00:00 00 am",
                    "ShipVia": "1",
                    "Freight": "55.28",]]></example>
        </section>
        <section>
            <description>In order to suppress parent key values in child records, you can set the 'sparse' property to .t. in the object you pass into the a5_sql_nested_query_to_json_document() function. For example:</description>
            <example><![CDATA[dim ops as p
ops.sparse = .t.
ops.connectionString = "::Name::northwind"
ops.sql = <<%txt%
{sql: 'select * from customers', name: 'customer' }
	{sql: 'select * from orders', name: 'orders', parentKey: 'customerid', key: 'customerId', limit: 5}
%txt%]]></example>
        </section>
        <section>
            <title>Preserving Data Types in the JSON</title>
            <description>You can use the convertToText property in the options that you pass in to control whether the generated JSON converts all data to strings, or preserves data types. For example:</description>
            <example><![CDATA[ops.convertToText = .f.
p = a5_sql_nested_query_to_json_document(ops,args)]]></example>
        </section>
        <section>
            <description>would result in JSON that looked like this:</description>
            <example><![CDATA["customer": [
    {
        "customerId": "GREAL",
        "companyName": "Great Lakes Food Market",
        "orders": [
            {
                "orderid": 10528,
                "orderdate": new Date(1997,05,06,00,00,0),
                "value": 10528,
                truncated for brevity......]]></example>
        </section>
        <section>
            <description>Notice that the 'orderDate', 'orderId', and 'value' properties are typed.</description>
        </section>
    </sections>
    <links>
        <link href="#section1_options.SQL%20parameter">below</link>
    </links>
    <see>
        <ref link="a5_merge_json_into_template Function">a5_merge_json_into_template()</ref>
        <ref link="a5_url_from_storagejsonformat Function">a5_url_from_storagejsonformat()</ref>
        <ref link="JSON Data">JSON Data</ref>
    </see>
    <terms>JSON,a5,contains,database,function,nosql,query,sql</terms>
</page>