<page api="xb">
    <shortlink>json_sqlQuery Function</shortlink>
    <topic>json_sqlQuery Function</topic>
    <syntax>json_sqlQuery(json as C,sqlStatement as C[,argsIn as A [, columnTypes as C [, otherOpsIn as A]]])</syntax>
    <arguments>
        <argument>
            <name>json</name>
            <type>C</type>
            <description>The JSON object to query.</description>
        </argument>
        <argument>
            <name>sqlStatement</name>
            <type>C</type>
            <description>The SQL statement to execute on the JSON.</description>
        </argument>
        <argument optional="true">
            <name>argsIn</name>
            <type>sql::arguments</type>
            <description>Default null_value(). An optional SQL::Arguments object that defines any arguments used in the SQL query. This property is required if your SQL query uses arguments.</description>
        </argument>
        <argument optional="true">
            <name>columnTypes </name>
            <type>C</type>
            <description>Default ""</description>
        </argument>
        <argument optional="true">
            <name>otherOpsIn</name>
            <type>A</type>
            <description>Default null_value()</description>
        </argument>
    </arguments>
    <description>json_sqlQuery Function allows you to filter a JSON array using a simple SQL query syntax.</description>
    <discussion>For example assume you have a JSON string as shown below. The JSON is an array of objects. You can think of this as a table with the following fields: firstname, lastname, city and state.</discussion>
    <sections>
        <section>
            <example><![CDATA[dim json as c 
json = <<%str%
[
    {"firstname":"John","lastname":"Smith","city":"Boston","state":"MA"},
    {"firstname":"Fred","lastname":"Jones","city":"Cambridge","state":"MA"},
    {"firstname":"Tom","lastname":"King","city":"New York","state":"NY"}
]
%str%]]></example>
        </section>
        <section>
            <description>Assume that you want to apply a filter to this string to retrieve certain records and also to sort the result. The SQL that you would need to express your query might be:
            </description>
        <example><![CDATA[select * from JSONTABLE WHERE state = 'MA' ORDER BY lastname]]></example>
        </section>
        <section>
            <description>Or if you would like to use arguments in your SQL, you might express your query as:
            </description>
            <example><![CDATA[select * from JSONTABLE WHERE state = :whatstate ORDER BY lastname]]></example>
        </section>
        <section>
            <description>Here is how you can use the json_sqlQuery() function:</description>
            <example><![CDATA[dim args as sql::arguments 
args.add("whatstate","MA")
dim jsonResult as c 
json2 = json_sqlQuery(json,"select * from jsontable where state = :whatstate ORDER BY lastname",args)]]></example>
        </section>
        <section>
            <description>The resulting string will be:</description>
            <example><![CDATA[[
    {firstname: 'Fred', lastname: 'Jones', city: 'Cambridge', state: 'MA'},
    {firstname: 'John', lastname: 'Smith', city: 'Boston', state: 'MA'}
]]]></example>
        </section>
    </sections>
    <see>
        <ref link="json_select Function">json_select()</ref>
        <ref link="json_standardize Function">json_standardize()</ref>
        <ref link="JSON Data">JSON Data</ref>
    </see>
    <terms>JSON,array,arguments,filter,function,query,record,sql,sql query,string</terms>
</page>