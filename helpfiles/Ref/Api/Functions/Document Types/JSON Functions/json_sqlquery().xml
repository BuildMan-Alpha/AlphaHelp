<page>
	
	<topic>json_sqlquery()</topic>
	<description>json_sqlQuery() Function allows you to filter a JSON array using a simple SQL query syntax.</description>

	<syntax>json_sqlquery(c json ,c sqlstatement [,* argsin [,c columntypes [,* otheropsin ]]])</syntax>
	
	
<discussion>
For example assume you have a JSON string as shown below. The JSON is an array of objects. You can think of this as a table with the following fields: firstname, lastname, city and state.
</discussion>
	
	<sections>
		<section>
			<example><![CDATA[dim json as c 
json = <<%str%
[
{firstname: 'John', lastname: 'Smith', city: 'Boston', state: 'MA'},
{firstname: 'Fred', lastname: 'Jones', city: 'Cambridge', state: 'MA'},
{firstname: 'Tom', lastname: 'King', city: 'New York', state: 'NY'}
]
%str%]]></example>
		</section>
		
		<section>
			<description>Assume that you want to apply a filter to this string to retrieve certain records and also to sort the result. The SQL that you would need to express your query might be:
			</description>
		<example><![CDATA[select * from JSONTABLE WHERE state = 'MA' ORDER BY lastname]]>	</example>
		</section>
		
		<section>
			<description>Or if you would like to use arguments in your SQL, you might express your query as:
			</description>
			<example><![CDATA[select * from JSONTABLE WHERE state = :whatstate ORDER BY lastname]]></example>
		</section>
			
		<section>
			<description>Here is how you can use the json_sqlQuery() function:</description>
			<example><![CDATA[dim args as sql::arguments 
args.add("whatstate","MA")
dim jsonResult as c 
json2 = json_sqlQuery(json,"select * from jsontable where state = :whatstate ORDER BY lastname",args)]]></example>
		</section>
		
		<section>
			<description>The resulting string will be:</description>
			<example><![CDATA[[
    {firstname: 'Fred', lastname: 'Jones', city: 'Cambridge', state: 'MA'},
    {firstname: 'John', lastname: 'Smith', city: 'Boston', state: 'MA'}
]]]>	</example>
		</section>
		
	</sections>

	<see>
		<ref href="/Api/Functions/Document Types/JSON Functions/json_select().xml">json_select()</ref>
		<ref href="/Api/Functions/Document Types/JSON Functions/json_standardize().xml">json_standardize()</ref>
		<ref href="/Server/Guide/Design/Api/JSON Data.xml">JSON Data</ref>
	</see>
	
	<terms>JSON,array,arguments,filter,function,query,record,sql,sql query,string</terms>
	
</page>