<page api="xb">
	<shortlink>json_sample_array Function</shortlink>
	<topic>json_sample_array Function</topic>
	<description>Enumerate top level properties in array entries and return name + count.</description>
	<prototype>C result = json_sample_array(jsonText as C[, format as C[,limit as N]])</prototype>
	<arguments>
		<argument>
			<name>jsonText</name>
			<type>C</type>
			<description>JSON to enumerate.</description>
		</argument>
		<argument optional="true">
			<name>format</name>
			<type>C</type>
			<description>Optional formatting directives that format the output. Format can include the following directives:</description>
			<list>
				<item>
					<name-title>Option</name-title>
					<description-title>Description</description-title>
				</item>
				<item>
					<name>$n</name>
					<description>name</description>
				</item>
				<item>
					<name>$i</name>
					<description>case insensitive name,</description>
				</item>
				<item>
					<name>$t</name>
					<description>type (C-charcter/N-number/L-logical/Z-null/?-unknown)</description>
				</item>
				<item>
					<name>$c</name>
					<description>count - occurences of field,</description>
				</item>
				<item>
					<name>$m</name>
					<description>records sampled,</description>
				</item>
				<item>
					<name>$s</name>
					<description>field is sparse (true or false).</description>
				</item>
				<item>
					<name>$r</name>
					<description>Recurse into child objects.</description>
				</item>
				<item>
					<name>$a</name>
					<description>Recurse into array objects, adding [] suffix.</description>
				</item>
				<item>
					<name>$o</name>
					<description>Recurse into objects, adding {} suffix.</description>
				</item>
			</list>
		</argument>
		<argument optional="true">
			<name>limit</name>
			<type>N</type>
			<description></description>
		</argument>
	</arguments>
	<sections>
		<section>
			<description>Uses format spec parameters.  Note that you can combine specs - i.e.  $ao for arrays and objects, $ar  for arrays and recursion.</description>
		</section>
		<section>
		</section>
		<section>
			<title>Examples</title>
			<example><![CDATA[dim json as c 
json = <<%json%
[
	{"Firstname" : "Fred", "Lastname" : "Smith"},
	{"Firstname" : "Harry", "Lastname" : "Jones","age" : 30},
]
%json%
? json_sample_array(json)
= Firstname
Lastname
age

? json_sample_array(json,"$n - $t")
= Firstname - C
Lastname - C
age - N]]></example>
		</section>
		<section>
			<description>Example showing recursion into name.</description>
			<example><![CDATA[dim json as c 
json = <<%json%
[
	{"Firstname" : "Fred", "Lastname" : "Smith" , "address" : { "city" : "Boston" , "state" : "ma" } },
	{"Firstname" : "Harry", "Lastname" : "Jones","age" : 30},
]
%json%
? json_sample_array(json,"$r")
= Firstname
Lastname
address.city
address.state
age]]></example>
		</section>
		<section>
			<description> Example showing recursion into arrays and objects.</description>
		<example><![CDATA[json = <<%json%
[
    {
        "Firstname": "John",
        "Lastname": "Smith",
        "City": "Boston",
        "State": "MA",
        "Company": {
            "name": "alpha",
            "software": true
        },
        "children": [
            {
                "name": "Jill"
            },
            {
                "name": "Jack"
            }
        ]
    }
]
%json%

dim newField as c = json_sample_array(json,"$ao|$s")

? newField
= Firstname|false
Lastname|false
City|false
State|false
Company{}
Company{}.name|false
Company{}.software|false
children[]
children[].name|false]]></example>
		</section>
	</sections>
	<see>
		<ref link="json_reformat_safe Function">json_reformat_safe()</ref>
		<ref link="a5_sql_schema_to_json Function">a5_sql_schema_to_json()</ref>
		<ref link="JSON Data">JSON Data</ref>
	</see>
	<terms>JSON,function,array</terms>
</page>