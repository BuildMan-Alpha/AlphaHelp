<page>
	<shortlink>json_filter()</shortlink>
	<topic>json_filter Function</topic>
	<syntax>c result = json_filter(c json [, c propertyNames [, L exclude]] )</syntax>
	<arguments>
		<argument>
			<name>json</name>
			<type>C</type>
			<description>input string of JSON data</description>
		</argument>
		<argument optional="true">
			<name>propertyNames</name>
			<type>C</type>
			<description>comma delimited list of the property names in the JSON string that you want to filter.</description>
		</argument>
		<argument optional="true">
			<name>exclude</name>
			<type>L</type>
			<description>.t. or .f. - default .f. - if exclude = .t. the specified propertyNames are excluded from the JSON string</description>
		</argument>
	</arguments>
	<description>The json_filter() Function - Extracts or omits certain properties from a JSON string. NOTE: Conceptually, this function is similar to the filter_string() function, except that it operates on JSON strings.</description>

	<example><![CDATA['extract object with a single field
dim json as c 
json = <<%txt%
{
    "one" : 1 , 
    "two" : "TWO" , 
    "three" : [ 1 ,2 ,3 ]
}
%txt%

? json_filter(json,"one")
= {  "one" : 1}


? json_filter(json,"two")
= {  "two" : "TWO"}

? json_filter(json,"three")
= {  "three" : [ 1 ,2 ,3 ]}

'exclude a single field
? json_filter(json,"one",.t.)
= {  "two" : "TWO" , "three" : [ 1 ,2 ,3 ]}


? json_filter(json,"two",.t.)
= {  "one" : 1 , "three" : [ 1 ,2 ,3 ]}

? json_filter(json,"three",.t.)
= {  "one" : 1 , "two" : "TWO"}


'include multiple (comma separated) fields
? json_filter(json,"one,two")
= {  "one" : 1 , "two" : "TWO"}
? json_filter(json,"one,three")
= {  "one" : 1 , "three" : [ 1 ,2 ,3 ]}


]]>	</example>


	<see>
		<ref href="/documentation/index?search=json_extract()">json_extract()</ref>
		<ref href="/documentation/index?search=json_flatten()">json_flatten()</ref>
		<ref href="/documentation/index?search=JSON Data">JSON Data</ref>
	</see>
	
	
	<terms>JSON,filter,defaults,function,list,string</terms>
	
	
</page>