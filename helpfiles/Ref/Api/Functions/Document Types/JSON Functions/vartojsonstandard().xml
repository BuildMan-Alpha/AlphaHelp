<page>
	<group>JSON Functions</group>
	<shortlink>varToJSONStandard()</shortlink>
	<topic>varToJSONStandard Function</topic>
	<syntax>varToJSONStandard(var as A [,flagSpecialTags as L[,flagCondense as L [,indent as C [,flagQuotesOnPropNames as L [,jQueryFormat as L [,flagHonorNulls as L [,opsIn as A]]]]]]])</syntax>
	<arguments>
		<argument>
			<name>var</name>
			<type>P</type>
			<description>The variable to convert into a standard JSON object.</description>
		</argument>
		<argument optional="true">
			<name>flagSpecialTags</name>
			<type>L</type>
			<description>Default is .f.</description>
		</argument>
		<argument optional="true">
			<name>flagCondense</name>
			<type>L</type>
			<description>Default is .f.</description>
		</argument>
		<argument optional="true">
			<name>intent</name>
			<type>C</type>
			<description>Default is ""</description>
		</argument>
		<argument optional="true">
			<name>flagQuotesOnPropNames</name>
			<type>L</type>
			<description>Default is .t.</description>
		</argument>
		<argument optional="true">
			<name>jQueryFormat</name>
			<type>L</type>
			<description>Default is .t.</description>
		</argument>
		<argument optional="true">
			<name>flagHonorNulls</name>
			<type>L</type>
			<description>Default is .t.</description>
		</argument>
		<argument optional="true">
			<name>opsIn</name>
			<type>A</type>
			<description>Default is null_value()</description>
		</argument>
	</arguments>
	<description>Converts an Xbasic variable to a JSON representation. If flagSpecialTags is .t. then you can use {function} and optional {functionArguments:var1,var2} in a property value to encode as a function. You can also use {Javascript} for arbitrary Javascript.</description>
	<note>This function is similar to the *[xb:varToJSON]* function. Prefer to use the *[xb:varToJSONStandard]* function.</note>
	<example><![CDATA[']]></example>
	<see>
		<ref href="/documentation/index?search=vartojsonhash()">vartojsonhash()</ref>
		<ref href="/documentation/index?search=xbasic_expression_to_json()">xbasic_expression_to_json()</ref>
		<ref href="/documentation/index?search=JSON Data">JSON Data</ref>
	</see>
	<terms>JSON,function</terms>
</page>