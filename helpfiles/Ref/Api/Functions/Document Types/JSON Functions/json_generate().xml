<page>
	<shortlink>json_generate Function</shortlink>
	<topic>json_generate Function</topic>
	<description>Generate takes a variable, an Xbasic dot variable, and returns JSON.</description>
	<syntax>C jsonText = json_generate(var as P [, flagSpecialFlags as L [, flagCondense as L [,indent as C [,flagHonorNulls as L]]]])</syntax>
	<arguments>
		<argument>
			<name>var</name>
			<type>P</type>
			<description>An xbasic dot variable you want to convert to JSON.</description>	
		</argument>
		<argument optional="true">
			<name>flagSpecialFlags</name>
			<type>L</type>
			<description>Use if you want to generate a JavaScript object literal rather than a JSON object.</description>
		</argument>
		<argument optional="true">
			<name>flagCondense</name>
			<type>L</type>
			<description>Specify whether or not the JSON should be generated on a single line. If .f., the JSON will be nicely formatted with tabs and new lines.</description>
		</argument>
		<argument optional="true">
			<name>indent</name>
			<type>C</type>
			<description>Only applies if *[xb:flagCondense]* is .f.. Specifies the character prefix to use on all indented lines. Typically used to include &amp;nbsp; character to make the JSON string look nice in an HTML document.</description>
		</argument>
		<argument optional="true">
			<name>flagHonorNulls</name>
			<type>L</type>
			<description>Default value is .f.. If *[xb:flagHonorNulls]* is .t., a null value is emitted for variables that are blank strings.</description>
		</argument>
	</arguments>
	<discussion>This function should be used in place of varToJSON() which will be deprecated. The json_generate() function is identical to varToJSON() in all respects, except that the attribute name and string values are quoted using double quotes in accordance with the official JSON specification. </discussion>
	<sections>
		<section>
			<note>The JSON spec does not escape single quotes. </note>
		</section>
		<section>
			<title>Example</title>
			<example><![CDATA[dim pj as p
pj.text = "some text with ' single quote"
?json_generate(pj)
= {
    "text": "some text with ' single quote"
}]]></example>
		</section>
		<section>
			<title>Using flagSpecialFlags</title>
			<description>
				<p>flagSpecialFlags is used when you are trying to generate a Javascript object literal (rather than a JSON string).</p>
				<p>For example:</p>
			</description>
			<example><![CDATA[dim p as p
p.name = "foo"
p.function = "{javascript}function() { alert('hello') }

?json_generate(p,.t.)

= {
	"name": "foo",
	"function": function() { alert('hello') }
}]]></example>
		</section>
		<section>
			<description>Without flagSpecialFlags set to .t., the property values would be strings, converting *[xb:function]*'s value to a string rather than adding it as a function. EG:</description>
			<example><![CDATA[{
	"name": "foo",
	"function": "{javascript}function() { alert('hello') }"
}]]></example>
		</section>
		<section>
			<title>Using flagHonorNulls</title>
			<description></description>
			<example><![CDATA[dim p as p
p.name = "sarah"
p.age = null_value()
p.function = "{javascript}null"

? json_generate(p,.t.,.f.,"",.t.)
= {
	"name": "sarah",
	"age": null,
	"function": null
}]]></example>
		</section>
	</sections>
	<see>
		<ref href="/documentation/index?search=json_parse Function">json_parse()</ref>
		<ref href="/documentation/index?search=JSON Data">JSON Data</ref>
	</see>
	<terms>JSON,function,string,text,xbasic</terms>
</page>