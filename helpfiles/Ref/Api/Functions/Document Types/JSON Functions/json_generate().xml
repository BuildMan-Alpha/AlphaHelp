<page>
	<shortlink>json_generate()</shortlink>
	<topic>json_generate Function</topic>
	<description>Generate takes a variable, an Xbasic dot variable, and returns JSON.</description>
	<syntax>C jsonText = json_generate(var as P [, flagSpecialTags as L [, flagCondense as L [,indent as C [,flagHonorNulls as L [,opsIn as P ]]]]])</syntax>
	<arguments>
		<argument>
			<name>var</name>
			<description>pointer to variable.</description>	
		</argument>
		<argument optional="true">
			<name>flagSpecialTags</name>
			<type>L</type>
			<description></description>
		</argument>
		<argument optional="true">
			<name>flagCondense</name>
			<type>L</type>
			<description></description>
		</argument>
		<argument optional="true">
			<name>indent</name>
			<type>C</type>
			<description></description>
		</argument>
		<argument optional="true">
			<name>flagHonorNulls</name>
			<type>L</type>
			<description></description>
		</argument>
		<argument optional="true">
			<name>opsIn</name>
			<type>P</type>
			<description></description>
		</argument>
	</arguments>
	<discussion>This function should be used in place of varToJSON() which will be deprecated. The json_generate() function is identical to varToJSON() in all respects, except that the attribute name and string values are quoted using double quotes in accordance with the official JSON specification. </discussion>
	<sections>
		<section>
			<note>The JSON spec does not escape single quotes. </note>
		</section>
		<section>
			<title>Example</title>
			<example><![CDATA[dim pj as p
pj.text = "some text with ' single quote"
?json_generate(pj)
= {
    "text": "some text with ' single quote"
}]]></example>
		</section>
	</sections>
	<see>
		<ref href="/documentation/index?search=vartojson()">varToJSON()</ref>
		<ref href="/documentation/index?search=json_parse()">json_parse()</ref>
		<ref href="/documentation/index?search=JSON Data">JSON Data</ref>
	</see>
	<terms>JSON,function,string,text,xbasic</terms>
</page>