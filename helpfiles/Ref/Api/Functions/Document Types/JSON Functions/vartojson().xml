<page deprecated="true">
	<deprecated>This method is deprecated. Use [json_generate()] instead.</deprecated>
	<group>JSON Functions</group>
	<shortlink>varToJSON Function</shortlink>
	<topic>varToJSON Function</topic>
	<prototype>C Result = varToJSON(* var [,L flagSpecialTags [,L flagCondense [,C indent [,L flagQuotesOnPropNames [,L flagHonorNulls ]]]]])</prototype>
	<arguments>
		<argument>
			<name>var</name>
			<type>A</type>
			<description>Variable to convert to JSON</description>	
		</argument>
		<argument optional="true">
			<name>flagSpecialTags</name>
			<type>L</type>
			<description>(optional) Set to .T. to use {...} tags; defaults to .F.</description>
			</argument>
		<argument optional="true">
			<name>flagCondense</name>
			<type>L</type>
			<description>(optional) Set to .T. to remove pretty formatting</description>
			</argument>
		<argument optional="true">
			<name>indent</name>
			<type>C</type>
			<description>(optional) Set to some number of spaces for indented formatting</description>
			</argument>
		<argument optional="true">
			<name>flagQuotesOnPropNames</name>
			<type>L</type>
			<description>(optional) Set to .T. to quote property names</description>
			</argument>
		<argument optional="true">
			<name>flagHonorNulls</name>
			<type>L</type>
			<description>(optional)</description>
		</argument>
	</arguments>
	<description>Converts an Xbasic variable to a JSON representation.</description>
	<discussion>
		<p>The varToJSON() function converts an Xbasic variable to a JSON representation. If flagSpecialTags is .t. then you can use {function} and optional {functionArguments:var1,var2} in a property value to encode as a function. You can also use {Javascript} for arbitrary Javascript. With varToJSON vs varToJSONStandard the difference is that JSONStandard uses double quotes while varToJSON assumes single quotes. The varToJSONStandard() function is preferred.</p>
		<p>See Also a5_JSON_Prep Function</p>
	</discussion>
	<sections>
		<section>
			<description>Try this in an interactive session.</description>	
			<example><![CDATA[dim p as p
p.name = "selwyn"
p.onchange = "{function}alert('onchange')"
p.onClick = "{function}alert('onclick')"
?p
= name = "selwyn"
onchange = "{function}alert('onchange')"
onClick = "{function}alert('onclick')"

x = varToJSON(p,.f.)
?x
= {
	name: 'selwyn',
	onchange: '{function}alert(\'onchange\')',
	onClick: '{function}alert(\'onclick\')'
}

y = varToJSON(p,.t.)
?y
= {
	name: 'selwyn',
	onchange: function() {alert('onchange')},
	onClick: function() {alert('onclick')}
}]]></example>
		</section>
		<section>
			<description>
				<p>In the script example below</p>
				<p>1. We use {functionarguments:arg1,arg2,arg3} to specify arguments for a functions</p>
				<p>2. We demonstrate how Xbasic property arrays translate to js arrays of object literals</p>
				<p>3. We demonstrate how the helper function a5_json_prep() removes properties with blank values (e.g. p.city).</p>
			</description>
			<example><![CDATA[dim p as p
dim p.children[0] as p

p.name = "selwyn"
p.surname = "{function}alert('onchange')"
i = p.children.append()
p.children[i].name = "{function}alert('onclick')"
p.children[i].age = 4
i = p.children.append()
p.children[i].name = "Joe"
p.children[i].age = 6
p.city = "Smith"

p.myfunc = "Emma"+"Zoe"

a5_JSON_Prep(p)
showvar(varToJSON(p,.t.))]]></example>
		</section>
		<section>
			<description>This will display:</description>	
			<example><![CDATA[{
	children: [
		{
			name: function() {alert('onclick')},
			age: 4
		},
		{
			name: 'Joe',
			age: 6
		}	
],
	name: 'selwyn',
	surname: function() {alert('onchange')},
	city: 'Smith',
	myfunc: 'EmmaZoe'
}]]></example>
		</section>
	</sections>
	<links>
		<link link="json_generate Function">json_generate()</link>
	</links>
	<see>
		<ref link="json_generate Function">json_generate()</ref>

	</see>
	<terms>JSON,array,arguments,defaults,function,number,object,onclick,script,variable,Xbasic</terms>
</page>