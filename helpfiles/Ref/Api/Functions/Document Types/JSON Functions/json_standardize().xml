<page>
	<shortlink>json_standardize()</shortlink>
	<topic>json_standardize Function</topic>
	<description>JSON_standardize function takes a non-standard JSON string and standardizes it. It also corrects for trailing commas in the JSON (which are illegal). Returns the standardized JSON.</description>
	<syntax>json_standardize(json as C [,flagReformat as L ])</syntax>
	<arguments>
		<argument>
			<name>json</name>
			<type>C</type>
			<description>A string containing the JSON to standardize.</description>
		</argument>
		<argument optional="true">
			<name>flagReformat</name>
			<type>L</type>
			<description>Default is .t.. Reformats the JSON if .t.. Otherwise, doesn't modify the JSON formatting.</description>
		</argument>
	</arguments>
	<example><![CDATA[?json_standardize("{name: 'Fred', age: 21}")
= {
    "name": "Fred",
    "age": 21
}

' Standardize the JSON, but don't change the formatting:
?json_standardize("{name: 'Fred', age: 21,}",.f.)
= {"name":"Fred","age":21}]]></example>
	<see>
		<ref href="/documentation/index?search=json_sqlquery()">json_sqlquery()</ref>
		<ref href="/documentation/index?search=json_to_bson()">json_to_bson()</ref>
		<ref href="/documentation/index?search=JSON Data">JSON Data</ref>
	</see>
	
	<terms>JSON,function</terms>
	
</page>