<page>
    <shortlink>json_to_xml Function</shortlink>
    <topic>json_to_xml Function</topic>
    <syntax>c xml = json_to_xml(json as C [, attribute as C [, format as C ]])</syntax>
    <arguments>
        <argument>
            <name>json</name>
            <type>C</type>
            <description></description>
        </argument>
        <argument>
            <name>attribute</name>
            <type>C</type>
            <description></description>
        </argument>
        <argument>
            <name>format</name>
            <type>C</type>
            <description>Format to use when generating the XML.</description>
        </argument>
    </arguments>
    <description>json_to_xml Function - Convert JSON to XML - Takes a string of JSON data and converts it to XML. json_to_xml Function - ATOM Format - The json_to_xml function can now generate XML using the "atom" format:</description>
    <sections>
        <section>
            <title>Example</title>
            <example><![CDATA[dim json as c 
json = <<%txt%
{ "firstname" : "john" ,
    "lastname" : "public" ,
    "num" : [1,2,3] ,
    "flag" : true ,
    "place" : { "state" : "Texas"} } 
%txt%

dim xml as c
xml = json_to_xml(json, "person")
showvar(xml)]]></example>
        </section>
        <section>
            <description>The resulting XML string looks like this:</description>
            <example><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<person>
   <firstname>john</firstname>
   <lastname>public</lastname>
   <num>1</num>
   <num>2</num>
   <num>3</num>
   <flag>true</flag>
   <place>
      <state>Texas</state>
   </place>
</person>]]></example>
        </section>
        <section>
            <title>Formatting XML in ATOM Format</title>
            <description>XML can also be formatted by specifying an optional third parameter, *[xb:format]*. Consider the following example:</description>
            <example><![CDATA[js = <<%str%
{
    "OrderId":10248,
    "ProductID":11,
    "UnitPrice":14,
    "Quantity":12,
    "Discount":0
}
%str%

dim xml as c 
xml = json_to_xml(js)
showvar(xml)]]></example>
        </section>
        <section>
            <description>This generates xml using the default encoding:</description>
            <example><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<data>
   <OrderId>10248</OrderId>
   <ProductID>11</ProductID>
   <UnitPrice>14</UnitPrice>
   <Quantity>12</Quantity>
   <Discount>0</Discount>
</data>
]]></example>
        </section>
        <section>
            <description>To convert the JSON to xml using the atom format, the format is defined and passed into the json_to_xml function:</description>
            <example><![CDATA[dim format as c 
format = <<%str%
{ "format" : "atom"}
%str%

dim xml as c = json_to_xml(js,"",format)
showvar(xml)]]></example>
        </section>
        <section>
            <description>The resulting XML is in Atom format:</description>
            <example><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<atom:entry xmlns:atom="http://www.w3.org/2005/Atom"
xmlns:m="http://schemas.microsoft.com/ado/2007/08/dataservices/metadata"
xmlns:d="http://schemas.microsoft.com/ado/2007/08/dataservices">
  <atom:content type="application/xml">
     <m:properties>
         <d:OrderId>10248</d:OrderId>
         <d:ProductID>11</d:ProductID>
         <d:UnitPrice>14</d:UnitPrice>
         <d:Quantity>12</d:Quantity>
         <d:Discount>0</d:Discount>
     </m:properties>
  </atom:content>
</atom:entry>]]></example>
        </section>
        <section>
            <description>Here is another example that demonstrates generating xml using the Atom format:</description>
            <example><![CDATA[js = <<%str%
{
    "OrderId":10248,
    "ProductID":11,
    "UnitPrice":14,
    "Quantity":12,
    "Discount":0
}
%str%

dim xml as c 
xml = json_to_xml(js)
? xml
= <?xml version="1.0" encoding="UTF-8"?>
<data>
   <OrderId>10248</OrderId>
   <ProductID>11</ProductID>
   <UnitPrice>14</UnitPrice>
   <Quantity>12</Quantity>
   <Discount>0</Discount>
</data>

dim format as c 
format = <<%str%
{ "format" : "atom"}
%str%

dim xml as c = json_to_xml(js,"",format)
?xml
= <?xml version="1.0" encoding="UTF-8"?>
<atom:entry xmlns:atom="http://www.w3.org/2005/Atom"
xmlns:m="http://schemas.microsoft.com/ado/2007/08/dataservices/metadata"
xmlns:d="http://schemas.microsoft.com/ado/2007/08/dataservices">
  <atom:content type="application/xml">
     <m:properties>
         <d:OrderId>10248</d:OrderId>
         <d:ProductID>11</d:ProductID>
         <d:UnitPrice>14</d:UnitPrice>
         <d:Quantity>12</d:Quantity>
         <d:Discount>0</d:Discount>
     </m:properties>
  </atom:content>
</atom:entry>]]></example>
        </section>
    </sections>
    <see>
        <ref link="json_to_bson Function">json_to_bson()</ref>
        <ref link="json_validate Function">json_validate()</ref>
        <ref link="JSON Data">JSON Data</ref>
    </see>
    <terms>JSON,function,string,xml</terms>
</page>