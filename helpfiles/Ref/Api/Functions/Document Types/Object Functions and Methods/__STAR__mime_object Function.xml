<page api="xb">
    <shortlink>api star mime object function</shortlink>
    <topic>*mime_object Function</topic>
    <prototypes>
        <prototype>P *MIME_OBJECT(mimeType as c,data as c)</prototype>
        <prototype>P *MIME_OBJECT(mimeType as c,data as b)</prototype>
    </prototypes>
    <arguments>
        <argument>
            <name>mimeType</name>
            <description>Mime type object represents (i.e. text/html for example)</description>
        </argument>
        <argument>
            <name>data</name>
            <description>Data for object (html would be a character, a PNG image would be binary).</description>
        </argument>
    </arguments>
    <description>
        <p>Returns a mime object, recognized by layouts to set extended types for variable and calculated fields.</p>
        <p>The object contains the fields 'mime_type' and 'content'. If your 'content' is a string (i.e. HTML/SVG vs PNG/BMP) then the ToString() function can be used on the object.</p>
    </description>
    <sections>
        <section>
            <example>
                <![CDATA[
mo = *mime_object("html","hello <b>world</b>")
? mo.mime_type = "html"

? mo.content = hello <b>world</b>

? mo.ToString() = "hello <b>world</b>"
]]>
            </example>
        </section>
        <section>
            <title>Properties of Object</title>
            <description>The object returned by *[xb:*mime_object]* has the following properties and methods:</description>
        </section>
    </sections>
    <properties>
        <property readonly="true">
            <name>cache_limit</name>
            <type>N</type>
            <description>The cache limit.</description>
        </property>
        <property readonly="true">
            <name>content</name>
            <type>B</type>
            <description>The mime object content.</description>
        </property>
        <property readonly="true">
            <name>mime_type</name>
            <type>C</type>
            <description>The mime type.</description>
        </property>
    </properties>
    <methods>
        <method>
            <syntax>C AlphaType()</syntax>
            <description>Return the alpha field type that best represents the mime type.</description>
        </method>
        <method>
            <syntax>P Clone()</syntax>
            <description>Create a copy of an object instance.</description>
        </method>
        <method>
            <syntax>C ExpandToData(urlText as c)</syntax>
            <description>Gets base64 encoded data version of URL (for embedding).</description>
            <arguments>
                <argument>
                    <name>urlText</name>
                    <type>C</type>
                    <description>The URL to encode.</description>
                </argument>
            </arguments>
        </method>
        <method>
            <syntax>L Lookup(urlText as c)</syntax>
            <description>Lookup a built-in Alpha Anywhere resource.</description>
            <arguments>
                <argument>
                    <name>urlText</name>
                    <type>C</type>
                    <description>Resource to lookup.</description>
                </argument>
            </arguments>
        </method>
        <method>
            <syntax>P NewInstance()</syntax>
            <description>Create a new object instance of the same type.</description>
        </method>
        <method>
            <syntax>C ToExpression()</syntax>
            <description>Return expression (for persisting values).</description>
        </method>
        <method>
            <syntax>C ToString()</syntax>
            <description>Return text (if mime type is based on text).</description>
        </method>
    </methods>
    <terms>object,function,image,images,layout,variable</terms>
</page>