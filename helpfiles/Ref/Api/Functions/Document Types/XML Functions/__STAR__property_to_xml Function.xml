<page api="xb">
    <shortlink>api star property to xml function</shortlink>
    <topic>*property_to_xml Function</topic>
    <description>Save property to XML.</description>
    <prototype>dim resultXML as C = *PROPERTY_TO_XML(prop as p,topTag as c[,flags as c])</prototype>
    <arguments>
        <argument>
            <name>prop</name>
            <type>P</type>
            <description>The dot variable to convert to XML.</description>
        </argument>
        <argument>
            <name>topTag</name>
            <type>C</type>
            <description>The name of the top-level XML tag.</description>
        </argument>
        <argument optional="true">
            <name>flags</name>
            <type>C</type>
            <description>Optional flags.</description>
        </argument>
    </arguments>
    <returns>
        <return>
            <name>resultXML</name>
            <types>
                <type>C</type>
            </types>
            <description>Returns an XML representation of the dot variable.</description>
        </return>
    </returns>
    <sections>
        <section>
            <example code="xb"><![CDATA[DIM test as P
test.namefirst = "John"
test.namelast = "Smith"
test.otherxml =<<%xml%
<note>
<to>Dion</to>
<from>Dave</from>
<heading>Reminder</heading>
<body>Don't forget Wednesday's Q&mp;A session!</body>
</note>
%xml%

DIM output  as C
output = *property_to_xml(test,"test")
? output
= <test
namefirst = "John"
namelast = "Smith"
otherxml = "&lt;note&gt;
&lt;to&gt;Dion&lt;/to&gt;
&lt;from&gt;Dave&lt;/from&gt;
&lt;heading&gt;Reminder&lt;/heading&gt;
&lt;body&gt;Don't forget Wednesday's Q&amp;mp;A session!&lt;/body&gt;
&lt;/note&gt;
" />]]></example>
        </section>
        <section build="1856">
            <title>Understanding __A5_elementContent and  __A5_Xml_Manifest</title>
            <description>Some meta information is included when XML content is converted to a dot variable. This information is required in order to provide round-trip support (convert XML to a property array and then back to original XML format.) Consider the following very simple snippet of XML.</description>
            <example>
                <![CDATA[xml = <<%txt%
<name city-name="boston">
    Fred Smith
</name>
%txt%]]>
            </example>
        </section>
        <section>
            <description>If you view this XML using the XML viewer function (showXML()), you will see this:</description>
            <example code="xb"><![CDATA[showXML(xml)]]></example>
            <figure>
                <link>images/parseXML1.jpg</link>
            </figure>
        </section>
        <section>
            <description>You will notice that the XML has an attribute called 'city-name'. This is not a valid Xbasic variable name, so the attribute has to be renamed (to 'city_name'). In order that the *property_to_xml() function can get back to the same XML that was originally parsed, a list of all of the attribute names that were changed is kept in the special __A5_Xml_Manifest property.</description>
            <figure>
                <link>images/parseXML2.jpg</link>
            </figure>
        </section>
        <section>
            <description>
                <p>Also, you will notice that in the XML snippet, the 'name' element has a value and also it has attributes. The attribute values are shown as properties and the element value is shown using the special property name '__A5_elementContent'.</p>
                <p>Here is how you can parse the above XML into an Xbasic dot variable:</p>
            </description>
            <example>
                <![CDATA[ delete p
dim p as p

'set the optional 3rd flag to .t. to use the special properties
*property_from_xml(xml,p,.t.)

'convert the dot variable into a script so we can 'see' what's in the variable
?*variable_to_script(p)
= DIM name as P
DIM name.city_name as C = "boston"
DIM name.__A5_elementContent as C = <<%str%

Fred Smith
%str%
DIM __A5_Xml_Manifest as C = <<%str%
@Mapping:
city_name=city-name%str%

'now, go back to XML
?*property_to_xml(p,"")
= <name city-name = "boston" >
    Fred Smith
</name>]]>
            </example>
        </section>
        <section>
            <description>Notice how this is a perfect 'round-trip'! The generated XML is the same as the initial XML that was parsed. Now, try the above exercise without using the new optional flag on the *property_to_xml() function</description>
            <example>
                <![CDATA[delete p
dim p as p

*property_from_xml(xml,p,.f.)

'convert the dot variable into a script so we can 'see' what's in the variable

?*variable_to_script(p)
= DIM name as P
DIM name.city_name as C = "boston"]]>
            </example>
        </section>
        <section>
            <description>Notice how the Xbasic dot variable only has the value of the attribute. It does NOT have the value of the element!</description>
        </section>
    </sections>
    <see>
        <ref link="server xb parsing xml documents with xbasic">Parsing XML Documents with Xbasic</ref>
    </see>
    <terms>xml,function,pointer,save</terms>
</page>