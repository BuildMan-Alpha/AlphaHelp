<page api="xb">
    <shortlink>api star property from xml function</shortlink>
    <topic>*property_from_xml Function</topic>
    <description>Read property from XML, if reversible flag is set, the XML we generate will match (adds levels to handle scaling tags - i.e. adding runs of tags and mapping names).</description>
    <prototypes>
        <prototype>V *PROPERTY_FROM_XML(xml as c,prop as p[, reversible as l])</prototype>
    </prototypes>
    <arguments>
        <argument>
            <name>xml</name>
            <type>C</type>
            <description>The XML to parse into a dot variable.</description>
        </argument>
        <argument>
            <name>prop</name>
            <type>P</type>
            <description>A dot variable that will be populated with the parsed XML.</description>
        </argument>
        <argument optional="true">
            <name>reversible</name>
            <type>L</type>
            <description>Default = .f. If .t., mapping information for the XML format will be included in the *[xb:prop]* variable.</description>
        </argument>
    </arguments>
    <discussion>
        <p>*property_from_xml() populates an Xbasic Dot Variable with XML Attribute/Element Values. Xbasic has always had very strong XML parsing features (see [Parsing XML Documents with Xbasic]), however the new *property_from_xml() function provides a new way in working with XML. This function populates an Xbasic dot variable with the data from the XML document. Once you have he Xbasic variable, it is very easy to extract a specific element or attribute value from the XML document.</p>
    </discussion>
    <sections>
        <section>
            <title>Example</title>
            <example code="xb"><![CDATA[dim xml as c = http_get_page2("http://feeds.gawker.com/lifehacker/full")
dim content as p
*property_from_xml(xml,content)
dim xmlvalue as c 
xmlvalue = content.rss.channel.item[17].title

'to get all of the titles, use the .dump_properties() method
dim allTitles as c 
allTitles = content.rss.channel.item.dump_properties("title")]]></example>
        </section>
        <section build="1856">
            <title>Understanding __A5_elementContent and  __A5_Xml_Manifest</title>
            <description>Some meta information is included when XML content is converted to a dot variable. This information is required in order to provide round-trip support (convert XML to a property array and then back to original XML format.) Consider the following very simple snippet of XML.</description>
            <example>
                <![CDATA[xml = <<%txt%
<name city-name="boston">
    Fred Smith
</name>
%txt%]]>
            </example>
        </section>
        <section>
            <description>If you view this XML using the XML viewer function (showXML()), you will see this:</description>
            <example code="xb"><![CDATA[showXML(xml)]]></example>
            <figure>
                <link>images/parseXML1.jpg</link>
            </figure>
        </section>
        <section>
            <description>You will notice that the XML has an attribute called 'city-name'. This is not a valid Xbasic variable name, so the attribute has to be renamed (to 'city_name'). In order that the *property_to_xml() function can get back to the same XML that was originally parsed, a list of all of the attribute names that were changed is kept in the special __A5_Xml_Manifest property.</description>
            <figure>
                <link>images/parseXML2.jpg</link>
            </figure>
        </section>
        <section>
            <description>
                <p>Also, you will notice that in the XML snippet, the 'name' element has a value and also it has attributes. The attribute values are shown as properties and the element value is shown using the special property name '__A5_elementContent'.</p>
                <p>Here is how you can parse the above XML into an Xbasic dot variable:</p>
            </description>
            <example>
                <![CDATA[ delete p
dim p as p

'set the optional 3rd flag to .t. to use the special properties
*property_from_xml(xml,p,.t.)

'convert the dot variable into a script so we can 'see' what's in the variable
?*variable_to_script(p)
= DIM name as P
DIM name.city_name as C = "boston"
DIM name.__A5_elementContent as C = <<%str%

Fred Smith
%str%
DIM __A5_Xml_Manifest as C = <<%str%
@Mapping:
city_name=city-name%str%

'now, go back to XML
?*property_to_xml(p,"")
= <name city-name = "boston" >
    Fred Smith
</name>]]>
            </example>
        </section>
        <section>
            <description>Notice how this is a perfect 'round-trip'! The generated XML is the same as the initial XML that was parsed. Now, try the above exercise without using the new optional flag on the *property_to_xml() function</description>
            <example>
                <![CDATA[delete p
dim p as p

*property_from_xml(xml,p,.f.)

'convert the dot variable into a script so we can 'see' what's in the variable

?*variable_to_script(p)
= DIM name as P
DIM name.city_name as C = "boston"]]>
            </example>
        </section>
        <section>
            <description>Notice how the Xbasic dot variable only has the value of the attribute. It does NOT have the value of the element!</description>
        </section>
        <section>
            <title>Videos</title>
            <videos>
                <title>Working with XML Documents</title>
                <description>
                    <p>The *property_from_xml() function and XML document viewer make it easy to work with XML documents. Watch the video below to learn how to use these features when working with XML documents using Xbasic.</p>
                </description>
                <video>
                    <name>Watch Video</name>
                    <link>https://www.viddler.com/v/53c03ff3</link>
                </video>
            </videos>
        </section>
    </sections>
    <links>
        <link link="server xb parsing xml documents with xbasic">Parsing XML Documents with Xbasic</link>
    </links>
    <see>
        <ref link="server xb parsing xml documents with xbasic">Parsing XML Documents with Xbasic</ref>
    </see>
    <terms>xml,function,logical,pointer</terms>
</page> 