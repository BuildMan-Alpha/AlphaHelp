<page>
	<topic>CallResult</topic>
	<description>Provides detailed information about the result of a function call.</description>
	<discussion>The CallResult object provides detailed information about the result of a function call. For objects that can maintain state across calls (such as SQL::Connection or SQL::Socket), functions often return true (.t.) or false (.f.) indicating success or failure. You can interrogate the object for more information by accessing the CallResult property and its members to get a result code, text, and further information specific to the environment for database and communications objects and functions.

Note: Some functions return CallResult directly. This is especially important when the object is shared by multiple threads or, for some other reason, can't "remember" the result of a previous call. A good example of this is INET::Socket::Accept() which returns a CallResult and a socket (as a reference parameter). This function can be called by several threads at once, so returning true or false would not work, as the object's CallResult property may change between the time you return from the call to Accept() and the time you access the CallResult property.

You can use the CallResult object in your own functions and classes to format more complete status information and return it to callers. 
</discussion>
	
	
	<properties>
		<property>
			<name>.Canceled</name>
			<type>L</type>
			<description>Read Write. Indicates whether the user cancelled the operation.</description>
		</property>
		<property>
			<name>.Code</name>
			<type>N</type>
			<description>Read Write. An Alpha Anywhere error code.
</description>
		</property>
		<property>
			<name>.Error</name>
			<type>L</type>
			<description>Read Write. Indicates whether there was an error.</description>
		</property>
		<property>
			<name>.NativeCode</name>
			<type>N</type>
			<description>Read Write. Error code from an underlying class.</description>
		</property>
		<property>
			<name>.NativeText</name>
			<type>C</type>
			<description>Read Write. Error message from an underlying class.</description>
		</property>
		<property>
			<name>.ReturnDataValue</name>
			<type>A</type>
			<description>Read Write. Value set by the called function.</description>
		</property>
		<property>
			<name>.RowsAffected</name>
			<type>L</type>
			<description>Read Write. Number of data table rows affected by a SQL operation.</description>
		</property>
		<property>
			<name>.Success</name>
			<type>L</type>
			<description>Read Write. Indicates whether the operation succeeded or failed.</description>
		</property>
		<property>
			<name>.Text</name>
			<type>C</type>
			<description>Read Write. An error message. This is normally read from Alpha5.errors.</description>
		</property>
		
	</properties>
<sections>
	<section>
		<title>Example</title>
		<description>This is the default state of the object.</description>
		<example><![CDATA[dim error as CallResult

? error

= Canceled = .F.
 Code = 0
 Error = .F.
 NativeCode = 0
 NativeText = ""
 ReturnDataValue = <No data returned>
 RowsAffected = 0
 Success = .T.
 Text = "Success"
 ]]></example>
		
	</section>
	<section>
	
		<description>Setting the . Code property also sets the .Text property.</description>
		<example><![CDATA[error.code = 815

? error

= Canceled = .F.
 Code = 815
 Error = .T.
 NativeCode = 0
 NativeText = ""
 ReturnDataValue = <No data returned>
 RowsAffected = 0
 Success = .F.
 Text = "Missing function, name or value"
 ]]></example>
		
	</section>
	<section>
		<description>As of Version 11, you may add your own error codes to Alpha5.errors in the reserved range (20000 - 24999).</description>
	
	</section>
	
</sections>
<see>
	<ref link="Xbasic Objects and Classes">Xbasic Objects and Classes</ref>
	<ref>User-defined Error Codes V11</ref>
</see>
	
</page>