<page>
   <topic>SQL::DeleteStatement::Execute Function</topic>
   <syntax>Result_Flag as L = Execute([SQLConnection as SQL::Connection | SQLConnectionString as C] [, Arguments as SQL::Arguments | Arguments as C])</syntax>
   <arguments>
   <argument>
         <name>Result_Flag</name>
         <description>TRUE (.T.) if the operation was successful; otherwise FALSE (.F.).
</description>
     </argument>
     <argument>
         <name>SQL::DeleteStatement</name>
         <description>A SQL::DeleteStatement object.
</description>
     </argument>
     
     
     <argument>
         <name>SQLConnection</name>
         <description>Optional. A SQL::Connection object and with a defined .ConnectionString property.
</description>
     </argument>
     <argument>
         <name> Arguments</name>
         <description>Optional. A connection string.
</description>
     </argument>
   </arguments>
   <description>Execute the current statement using the current or passed connection.
Optionally providing argument values as an object or as XML.
</description>
   <discussion>
The .Execute() method retrieves data and populates a SQL::ResultSet object. It connects to the back-end database using the information in the SQL::Connection::ConnectionString property or in the ConnectString string, then executes the SQL statement in the SQL::DeleteStatement.SQLStatement property. Note: Argument values are merged with those already set on the query.
   </discussion>
  
   <sections>
       <section><title>Example</title>
            <description>Dimension the variables. This script will need SQL::Connection and SQL::DeleteStatement objects to delete the data.</description>
            <example><![CDATA[
dim conn as SQL::Connection
dim del as SQL::DeleteStatement
dim connString as C
dim sql_delete as C
]]></example>
       </section>
       
       <section>
            <description>Assign values to the character variables.</description>
            <example><![CDATA[
connString = "{A5API='Access', FileName='c:\program files\a5v7\mdbfiles\alphasports.mdb'}"
]]></example>
       </section>
       
       <section>
            <description>Note that the DELETE command uses the SubString()portability function as part of the WHERE clause.</description>
            <example><![CDATA[
sql_delete = "DELETE FROM Customer_copy WHERE substring(lastname,1,1) = 'A'"
]]></example>
       </section>
       
       <section>
            <description>Establish the connection.</description>
            <example><![CDATA[
IF .not. conn.open(connString) THEN
    end
END IF
]]></example>
       </section>
       
       <section>
            <description>Check the SQL DELETE statement.</description>
            <example><![CDATA[
IF .not. del.parse(sql_delete) THEN
    ui_msg_box("Error", del.callresult.text)
    end
END IF
]]></example>
       </section>
       <section>
            <description>Execute the SQL DELETE statement.</description>
            <example><![CDATA[
IF .not. del.execute(conn)
    ui_msg_box("Error", del.callresult.text)
    end
END IF
]]></example>
       </section>
   </sections>
   <see>
      <ref>SQL::DeleteStatement Object</ref>
      <ref href="/Api/Functions/System/Developer Functions/FUNCTION_LIMITATIONS_GET Function.xml">Limitations</ref>
   </see>
   <terms>sql,arguments,database,delete,function,object,operation,populate,script</terms>
</page>