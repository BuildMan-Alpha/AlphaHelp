<page api="xb">
    <shortlink>api sql namespace insert statement object</shortlink>
    <topic>SQL::InsertStatement Object</topic>
    <description>The SQL::InsertStatement object encapsulates the parsing and properties of a SQL INSERT statement. as a result, it has the most properties. Its children are the various clauses that make up a complete INSERT statement.</description>
    <sections>
        <section>
            <title>Example</title>
            <description>The following script inserts a new record.</description>
            <example code="xb"><![CDATA[dim conn as SQL::Connection
dim ins as SQL::InsertStatement
dim qry as SQL::Query
dim rs as SQL::ResultSet
dim cs as SQL::CallResult
dim connString as C
dim sql_insert as C
dim sql_query as C]]></example>
        </section>
        <section>
            <description>Next, define the connection string and the SQL INSERT statement. Note the syntax of the command. The fields that will receive data and the corresponding values are in two comma delimited sets.</description>
            <example code="xb"><![CDATA[connString = "{A5API='Access', FileName='c:\program files\a5v7\mdbfiles\alphasports.mdb'}"
sql_insert = "insert into customer (firstname, lastname, bill_city, bill_postal_code, bill_state_region) values ('George', 'Jones', 'Arlington', '02000', 'VA')"]]></example>
        </section>
        <section>
            <description>Open the connection and parse the insert command.</description>
            <example code="xb"><![CDATA[IF .not. conn.open(connString) THEN
    end
END IF
IF .not. ins.parse(sql_insert) THEN
    ui_msg_box("Error", ins.callresult.text)
    end
END IF]]></example>
        </section>
        <section>
            <description>Insert the new record into the table.</description>
            <example code="xb"><![CDATA[ins.execute(conn)
cs = ins.CallResult
ui_msg_box("Call result", cs.Text)]]></example>
        </section>
        <properties>
            <property readonly="true">
                <name>Arguments</name>
                <type>SQL::Arguments</type>
                <description>Arguments for the current query.</description>
            </property>
            <property readonly="true">
                <name>CallResult</name>
                <type>SQL::CallResult</type>
                <description>Call results.</description>
            </property>
            <property>
                <name>Column</name>
                <type>List of SQL::Query::ColumnReference</type>
                <description>The items in the column list.</description>
            </property>
            <property readonly="true">
                <name>ColumnReferences
                </name>
                <type>ReferenceList of SQL::Query::ColumnReference</type>
                <description>An array of all column references in the query (including nested occurrences). Behaves the same way as  .SelectTableReferences.</description>
            </property>
            <property>
                <name>Connection</name>
                <type>SQL::Connection</type>
                <description>Current open connection</description>
            </property>
            <property readonly="true">
                <name>ErrorColumn</name>
                <type>N</type>
                <description>The column number of the last error reported by the parser.</description>
            </property>
            <property readonly="true">
                <name>ErrorText</name>
                <type>C</type>
                <description>The text of the last parser error reported.</description>
            </property>
            <property readonly="true">
                <name>FunctionReferences</name>
                <type>ReferenceList of SQL::Query::ValueExpression</type>
                <description>An array of all function calls. Behaves the same way as  .SelectTableReferences.</description>
            </property>
            <property readonly="true">
                <name>ObjectDefinitions</name>
                <type>C</type>
                <description>For internal debugging purposes. Returns a string description of the mapping between the ANTLR grammar and the Xbasic objects.</description>
            </property>
            <property readonly="true">
                <name>ParseTree</name>
                <type>C</type>
                <description>For internal debugging. A string description of the underlying parse tree.</description>
            </property>
            <property readonly="true">
                <name>SelectTableReferences</name>
                <type>ReferenceList of SQL::Query::SelectTableReference</type>
                <description>An array of all table references in the from clause and those joined to them. This array is created when the property is requested, but can become out of date. Use the Resynch() function on any variable holding this list when any changes are made.</description>
            </property>
            <property>
                <name>SQLStatement</name>
                <type>C</type>
                <description>A variable that can be assigned a syntax string without parsing it. If no value is passed to the ::Parse()method, this value is used.</description>
            </property>
            <property>
                <name>Table</name>
                <type>SQL::Query::SelectTableReference</type>
                <description>The table to be inserted into.</description>
            </property>
            <property readonly="true">
                <name>TokenTypeName</name>
                <type>C</type>
                <description>"Query".</description>
            </property>
            <property>
                <name>Value</name>
                <type>ReferenceList of SQL::Query::ValueExpression</type>
                <description>An array of all column values be set.</description>
            </property>
            <property>
                <name>XML</name>
                <type>C</type>
                <description>Creates XML from the tree or recreates the tree from the XML.</description>
            </property>
        </properties>
    </sections>
    <!--list:.-->
    <see>
        <ref>SQL Objects</ref>
        <ref>SQL Enumerated Types</ref>
    </see>
</page>