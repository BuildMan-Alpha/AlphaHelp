<page api="xb">
	<shortlink>api sql namespace update statement object</shortlink>
	<topic>SQL::UpdateStatement Object</topic>
	<description>The SQL::UpdateStatement object encapsulates the parsing and properties of a SQL UPDATE statement. as a result, it has the most properties. Its children are the various clauses that make up a complete UPDATE statement.</description>
	
	<sections>
		<section>
			<title>Example</title>
			<description>Note that the fields to update and the corresponding value are specified in a comma delimited list of name/value pairs.</description>
			<example><![CDATA[dim conn as SQL::Connection
dim upd as SQL::UpdateStatement
dim cs as SQL::CallResult
dim connString as C
dim sql_update as C
connString = "{A5API='Access', FileName='c:\program files\a5v7\mdbfiles\alphasports.mdb'}"
sql_update = "update customer set bill_city = 'Phoenix', bill_postal_code = '08000', bill_state_region = 'AZ' where customer_id = 1"
if .not. conn.open(connString) then
    end
end if
if .not. upd.parse(sql_update) then
    ui_msg_box("Error", upd.callresult.text)
    end
end if
if .not. upd.execute(conn) then
    end
end if
cs = upd.CallResult
ui_msg_box("Call result", cs.Text) ]]></example>
		</section>
		
	</sections>
<properties>
	<property>
		<name>Arguments</name>
		<type>SQL::Arguments</type>
		<description>Read Only. Arguments for the current query.</description>
	</property>
	
	<property>
		<name>CallResult</name>
		<type>SQL::CallResult</type>
		<description>Read Only. Call results.</description>
	</property>
	
	<property>
		<name>ColumnReferences</name>
		<type>ReferenceList of SQL::Query:: ColumnReference</type>
		<description>Read Only. An array of all column references in the query (including nested occurrences). Behaves the same way as  .SelectTableReferences.
</description>
	</property>
	
	<property>
		<name>Connection</name>
		<type>SQL::Connection</type>
		<description>Read Write. Current open connection</description>
	</property>
	
	<property>
		<name>ErrorColumn</name>
		<type>N</type>
		<description>Read Only. The column number of the last error reported by the parser.</description>
	</property>
	
	<property>
		<name>ErrorText</name>
		<type>C</type>
		<description>Read Only. The text of the last parser error reported.</description>
	</property>
	
	<property>
		<name>FunctionReferences</name>
		<type>ReferenceList of SQL::Query:: ValueExpression</type>
		<description>Read Only. An array of all function calls. Behaves the same way as  .SelectTableReferences.
</description>
	</property>
	
	<property>
		<name>ObjectDefinitions</name>
		<type>C</type>
		<description>Read Only. For internal debugging. Returns a string description of the mapping between the ANTLR grammar and the Xbasic objects.
</description>
	</property>
	
	<property>
		<name>ParseTree</name>
		<type>C</type>
		<description>Read Only. For internal debugging. A string description of the underlying parse tree.</description>
	</property>
	
	<property>
		<name>Set</name>
		<type>ReferenceList of SQL::Query::Assignment</type>
		<description>Read Write. Column = Value objects (SQL::Query::Assignment) to be used in setting values.
</description>
	</property>
	
	<property>
		<name>SelectTableReferences</name>
		<type>ReferenceList of SQL::Query::SelectTableReference</type>
		<description>Read Only. An array of all table references in the from clause and those joined to them. This array is created when the property is requested, but can become out of date. Use the Resynch()function on any variable holding this list when any changes are made.
</description>
	</property>
	
	<property>
		<name>SQLStatement</name>
		<type>C</type>
		<description>Read Write. A variable that can be assigned a syntax string without parsing it. If no value is passed to the ::Parse()method, this value is used.
</description>
	</property>
	
	<property>
		<name>Table</name>
		<type>SQL::Query:: SelectTableReference</type>
		<description>Read Write. The table to be inserted into.</description>
	</property>
	
	<property>
		<name>TokenTypeName</name>
		<type>C</type>
		<description>Read Only. "Query".</description>
	</property>
	
	<property>
		<name>Where</name>
		<type>SQL::Query:: LogicalExpression</type>
		<description>Read Write. An expression for the WHERE clause.</description>
	</property>
	
	<property>
		<name>XML</name>
		<type>C</type>
		<description>Read Write. Creates XML from the tree or recreates the tree from the XML.</description>
	</property>
	
	
</properties>	
	<!--list:.-->
<see>
	<ref>SQL Objects</ref>
	<ref>SQL Enumerated Types</ref>
	
</see>	
	
</page>