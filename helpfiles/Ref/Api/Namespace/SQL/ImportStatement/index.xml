<page api="xb">
	<shortlink>api sql namespace import statement object</shortlink>
	<topic>SQL::ImportStatement Object</topic>
	<description>The SQL::ImportStatement object parses and executes an Alpha Anywhere Portable SQL import statements of the general form. </description>
	<prototype>IMPORT  WITH [ APPEND | REPLACE ] INTO ' Target_Table_Name ' | : Table_Argument [ DBFDEFINITION ' Database_Definition ' | : Database_Argument ] ( FROM Source_Table_Name ) | Select_Statement</prototype>
	<arguments>
		<argument>
			<name>Target_Table_Name</name>
			<type>C</type>
			<description>The full path and table name of an Alpha Anywhere .DBF table that will receive the data.</description>
		</argument>
		<argument>
			<name>Table_Argument</name>
			<type>C</type>
			<description>An argument that provides a full path and table name of an Alpha Anywhere .DBF table.</description>
		</argument>
		<argument>
			<name>Database_Definition</name>
			<type>C</type>
			<description>A series of field names and specifications in the format: FieldName, Type, Length, DecimalPlaces. DBFDEFINITION can override column names and precision, but must map positionally to an appropriate type.</description>
		</argument>
		<argument>
			<name>Database_Argument</name>
			<description>An argument that provides a series of field names and specifications in the format: FieldName, Type, Length, DecimalPlaces.</description>
			<properties>
				<property>
					<name>FieldName</name>
					<type>C</type>
					<description>The name of the target field.</description>
				</property>
				<property>
					<name>Type</name>
					<type>C</type>
					<description>The type of the field. Refer to Create a New Table for valid field types.</description>
				</property>
				<property>
					<name>Length</name>
					<type>N</type>
					<description>The total number of character positions for the field.</description>
				</property>
				<property>
					<name>DecimalPlaces</name>
					<type>N</type>
					<description>For numbers only. The number of character positions after the decimal point.</description>
				</property>
			</properties>
		</argument>
		<argument>
			<name>Source_Table_Name</name>
			<type>C</type>
			<description>The specification for an external (non-Alpha Anywhere) table that will provide the data.</description>
		</argument>
		<argument>
			<name>Select_Statement</name>
			<type>C</type>
			<description>A SQL SELECT statement that retrieves data from an external (non-Alpha Anywhere) table. The syntax parsed for the SELECT statement (as with other statements) is portable SQL. The connection passed into the execute function determines the syntax executed.</description>
		</argument>
	</arguments>
	<sections>
		<section>
			<description>The SQL::ImportStatement object appends or replaces records in an Alpha Anywhere .DBF table. The object may optionally use a reference table to define the target table's structure or it may define the target table's field structure in-line.</description>
		</section>
		<section>
			<title>Syntax Examples</title>
			<description>In these three cases the target table is created to match the requirements of the imported data.</description>
			<example code="xb"><![CDATA[import with replace into 'c:\test.dbf' select * from customers where city = :city"
import with replace into 'c:\test.dbf' FROM customers"
import with replace into :targettable DBFDEFINITION :dbfDefinition FROM customers]]></example>
		</section>
		<section>
			<description>In these two cases the target table is created to the specifications included in the statements.</description>
			<example code="xb"><![CDATA[import with replace into :targettable DBFDEFINITION ' CUSTOMER_ID,C,15,0 COMPANYNAME,C,40,0 CONTACTNAME,C,30,0 ' FROM customers
import with replace into 'c:\test.dbf' DBFDEFINITION ' CUSTOMER_ID,C,15,0 COMPANYNAME,C,40,0 CONTACTNAME,C,30,0 ' FROM customers]]></example>
		</section>
	</sections>
	<sections>
		<section>
			<title>Examples</title>
			<description>Example usage</description>
			<example code="xb"><![CDATA[dim c as SQL::connection
dim i as SQL::importstatement 
if c.open("{a5api=access,filename=c:\northwind.mdb,username=admin}")
    if i.parse(importsyntax)
        i.Arguments.set("targettable", TargetTableName)
        i.Arguments.set("dbfdefinition", DBFDefinition)
        i.Arguments.set("city", "London")
        EventScript = GetEventScript(TargetTableName)
        if i.executewithevents(c, EventScript)
            ? success handling code
        else
            ? error handling code
        end if
    else
        ? error handling code
    end if
    ? error handling code
end if ]]></example>
		</section>
		<section>
			<description>Using the ::PARSE() method.</description>
			<example code="xb"><![CDATA[dim import as SQL::ImportStatement
import.Parse("import with replace into 'c:\test.dbf' select * from customers where city = :city") ]]></example>
		</section>
		<section>
			<description>Using the ::EXECUTE() method.</description>
			<example code="xb"><![CDATA[dim import as SQL::ImportStatement
dim stat as C
 
stat = "import with replace into 'c:\test.dbf' select * from customers where city = :city""
import.Execute( stat )
import.ExecuteWithEvents(c, EventScript) ]]></example>
		</section>
		<section>
			<description>Using the ::ExecuteWithEvents() method.</description>
			<example code="xb"><![CDATA[dim import as SQL::ImportStatement
dim stat as C
dim EventScript as C
stat = "import with replace into 'c:\test.dbf' select * from customers where city = :city""
import.ExecuteWithEvents(stat, EventScript) ]]></example>
		</section>
	</sections>
	<sections>
		<section>
			<description>The SQL::ImportStatement object supports UpdateBegin(), UpdateEnd(), and UpdateProgress().</description>
		</section>
	</sections>
	<properties>
		<property readonly="true">
			<name>Arguments</name>
			<type>SQL::Arguments</type>
			<description>Arguments for the current query.</description>
		</property>
		<property readonly="true">
			<name>CallResult</name>
			<type>SQL::CallResult</type>
			<description>Call results.</description>
		</property>
		<property readonly="true">
			<name>ColumnReferences</name>
			<type>ReferenceList of SQL::Query::ColumnReference</type>
			<description>An array of all column references in the query (including nested occurrences).</description>
		</property>
		<property>
			<name>Connection</name>
			<type>SQL::Connection</type>
			<description>Current open connection</description>
		</property>
		<property>
			<name>DBFDefinition</name>
			<type>C</type>
			<description>An optional definition for the local table (can override size and name, but must be type compatible with the corresponding column data type being imported)</description>
		</property>
		<property readonly="true">
			<name>ErrorColumn</name>
			<type>N</type>
			<description>The column number of the last error reported by the parser.</description>
		</property>
		<property readonly="true">
			<name>ErrorText</name>
			<type>C</type>
			<description>The text of the last parser error reported.</description>
		</property>
		<property readonly="true">
			<name>FunctionReferences</name>
			<type>ReferenceList of SQL::Query::ValueExpression</type>
			<description>An array of all function calls. Behaves the same way as the SelectTableReference object.</description>
		</property>
		<property readonly="true">
			<name>ObjectDefinitions</name>
			<type>C</type>
			<description>For Debugging. Returns a string description of the mapping between the ANTLR grammar and the Xbasic objects.</description>
		</property>
		<property readonly="true">
			<name>ParseTree</name>
			<type>C</type>
			<description>For Debugging. A string description of the underlying parse tree.</description>
		</property>
		<property>
			<name>SQLStatement</name>
			<type>C</type>
			<description>A variable that can be assigned a syntax string without parsing it. If no value is passed to the Parse() method, this value is used.</description>
		</property>
		<property>
			<name>ReplaceOption</name>
			<type>SQL::Query::ReplaceOption</type>
			<description>Append or Replace</description>
		</property>
		<property>
			<name>Table</name>
			<type>C</type>
			<description>The table to be imported into.</description>
		</property>
		<property>
			<name>TokenTypeName</name>
			<type>C</type>
			<description>Mode E. For SQL::Query, this property returns "Query".</description>
		</property>
		<property>
			<name>Source</name>
			<types>
				<type>SQL::SelectStatement</type>
				<type>SQL::Query::TableReference</type>
			</types>
			<description>The table reference or the select statement that defines the source of the data.</description>
		</property>
		<property>
			<name>XML</name>
			<type>C</type>
			<description>Creates XML from the parse tree or recreates the tree from the XML.</description>
		</property>
	</properties>
	<!--list:.-->
	<see>
		<ref>SQL Objects</ref>
	</see>
</page>