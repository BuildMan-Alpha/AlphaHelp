<page api="xb">
    <shortlink>api sql namespace schema object</shortlink>
    <topic>SQL::Schema Object</topic>
    <description>SQL::Schema Object properties and methods.</description>
    <properties>
        <property>
            <name>XML</name>
            <type>C</type>
            <description>The schema in XML format.</description>
        </property>
        <property readonly="true">
            <name>Name</name>
            <type>C</type>
            <description>The unique name of the table. Note: The table must be unique for the owner, but may not be globally unique.</description>
        </property>
        <property readonly="true">
            <name>NativeAPI</name>
            <type>C</type>
            <description>The name of the API active when this object was created. </description>
        </property>
        <property readonly="true">
            <name>NativeSyntax</name>
            <type>C</type>
            <description>The name of the syntax at the time the object was created.</description>
        </property>
        <property readonly="true">
            <name>Comment</name>
            <type>C</type>
            <description>The comment stored for the table (if the database supports it).</description>
        </property>
        <property readonly="true">
            <name>Owner</name>
            <type>C</type>
            <description>The SQL database user or group that owns the table.</description>
        </property>
        <property>
            <name>Catalog</name>
            <type>C</type>
            <description>String Catalog property</description>
        </property>
        <property>
            <name>Schema</name>
            <type>C</type>
            <description>String Schema property</description>
        </property>
        <property readonly="true">
            <name>Table</name>
            <type>SQL::TableInfo[]</type>
            <description>An array of table ( SQL::TableInfo ) definitions.</description>
        </property>
        <property readonly="true">
            <name>TableInDependencyOrder</name>
            <type>SQL::TableInfo[]</type>
            <description>An array of table ( SQL::TableInfo ) definitions ordered from the top of the dependency hierarchy.</description>
        </property>
        <property>
            <name>CallResult</name>
            <type>SQL::CallResult</type>
            <description>CallResult property</description>
        </property>
    </properties>
    <!--list:.-->
    <description>A SQL::Schema object (a database description) is a container for one or more SQL::TableInfo objects (table descriptions).</description>
    <discussion>This example creates an array containing five SQL::TableInfo objects.</discussion>
    <sections>
        <section>
            <note>As of the writing of this help topic, it is impossible to DIM an array of objects based on a class. The following code sample shows a work-around.</note>
        </section>
        <section>
            <example><![CDATA[
dim ti as SQL::TableInfo
dim arr[5] as P
arr[1] = ti
for i = 2 to 5
    arr[i] = ti.clone()
next i]]></example>
        </section>
        <section>
            <note>The TableInDependencyOrder property lists all tables in the order they should be created and populated in copying them to a new database.</note>
        </section>
    </sections>
    <sections>
        <section>
            <title>Example</title>
            <description>This example interactive window session shows how to use the sql::schema object and the tablesReferencing and tablesReferencedBy methods of the sql::schema object. The connection string is pointing to a SQL Server version of Northwind.</description>
            <example><![CDATA[
dim cn as sql::connection 
 ?cn.open("::Name::nw")
 = .T.
 dim s as sql::Schema
 ?cn.GetSchema(s)
 = .T.

 ?s.TableNumber("customers")
 = 2
 dim tiCustomer as sql::TableInfo
 tiCustomers = s.table[2]
 r1 = s.TablesReferencedBy(tiCustomers)
 ?r1.table.count 
 = 0
 r2 = s.TablesReferencing(tiCustomers)
 ?r2.table.Count
 = 1
 ?r2.table1.name 
 = "Orders"
 dim tiOrders as sql::TableInfo 
 ?s.tableNumber("orders")
 = 5
 tiOrders = s.table[5]
 r3 = s.TablesReferencedBy(tiOrders)
 ?r3.Table.count 
 = 3
 ?r3.table[1].name 
 = "Customers"
 ?r3.table[2].name 
 = "Employees"
 ?r3.table[3].name 
 = "Shippers"
 r4 = s.TablesReferencing(tiOrders)
 ?r4.Table.count 
 = 1

 ?r4.table[1].name 
 = "Order Details"]]></example>
        </section>
    </sections>
    <see>
        <ref link="SQL Namepsace">SQL</ref>
    </see>
    <terms>sql,array,collection,container,containers,database,dbf,excel,help,index,list,object,script,session,sql database,string,time,users,window,writing,xml</terms>
</page>