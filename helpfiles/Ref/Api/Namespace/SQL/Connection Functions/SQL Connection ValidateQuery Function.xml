<page>
   <topic>SQL::Connection::ValidateQuery Function </topic>
   <syntax>Result_Flag as L = ValidateQuery(SQLStatement as C [, Arguments as SQL::Arguments])</syntax>
   <arguments>
    <argument>
         <name>Result_Flag</name>
         <description>TRUE (.T.) if the operation was successful; otherwise FALSE (.F.).
</description>
     </argument>
      <argument>
         <name>SQL::Connection</name>
         <description>

 
A SQL::Connection object.
 </description>
     </argument>
     
     
     
     <argument>
         <name>SQLStatement</name>
         <description>A SQL SELECT statement.
</description>
     </argument>
     <argument>
         <name> Arguments</name>
         <description>Optional. A SQL::Arguments object. One or more arguments to be resolved when the SELECT statement is executed.
</description>
     </argument>
   </arguments>
   <description>Validate a SQL query on the connection.</description>
   <discussion>
The ValidateQuery() method validates the syntax of a SQL statement.
   </discussion>
   <example><![CDATA[
dim conn as SQL::Connection
dim connString as C
dim query as C
connString = "{A5API='Access', FileName='c:\program files\a5v8\mdbfiles\alphasports.mdb'}"
if .not. conn.open(connString)
    ui_msg_box("Error", conn.CallResult.text)
    end
end if
query = "select * from cust where lastname > "
if .not. conn.ValidateQuery(query)
    ui_msg_box("Error", conn.CallResult.text)
else
    ui_msg_box("", "Query is OK")
end if
query = "select * from cust where lastname > 'a'"
if .not. conn.ValidateQuery(query)
    ui_msg_box("Error", conn.CallResult.text)
else
    ui_msg_box("", "Query is OK")
end if
conn.close()
]]></example>
   
   <see>
      <ref>SQL::Connection Object</ref>
   </see>
   <terms>sql,connection,arguments,function,object,operation,query,sql query</terms>
</page>