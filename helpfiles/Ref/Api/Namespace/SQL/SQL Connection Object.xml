<page>
	<topic>SQL::Connection Object</topic>
	
<description>A SQL::Connection instance represents a potential or active database session.</description>
<discussion><![CDATA[The SQL::Connection object is the heart of all database activity. Each instance of SQL::Connection represents a potential or active database session. In order to do anything with a SQL database you must first create (or dimension) a variable and associate it with a programming interface (API) and with a vendor syntax ( Oracle, Access, etc.).]]></discussion>


<sections>
<section>
<title>Using the Connection Object</title>
<description>The following sample script creates a SQL::Connection object and opens a connection to a Microsoft Access database.</description>
<example><![CDATA[DIM c as SQL::Connection
DIM cs as C
cs = "{A5API='Access', A5Syntax='Access', FileName='C:\Program Files\a5v6\MDBFiles\Alphasports.mdb', UserName='Admin'}"
? c.Open(cs)
= .T.]]></example>

</section>
</sections>
	
	
	
	
	
	
	<properties>
		<property generated="true">
			<name>CurrentAPI</name>
			<type>C</type>
			<description><![CDATA[Type: C, Mode: R
 The name of the current application programming interface being used. For example: Access, Oracle, ODBC, MySQL.
]]> </description>
	</property>
	
	
		<property generated="true">
			<name>CurrentSyntax</name>
			<type>C</type>
			<description><![CDATA[Type: C, Mode: R
 The dialect of SQL (and typically the vendor or product) being used to interact with the database.
 ]]></description>
		</property>
		<property generated="true">
			<name>IsOpen</name>
			<type>L</type>
			<description><![CDATA[Type: L
 
Mode: R
 
Returns true if the connection is currently open and false if it has not been opened yet or has been closed.
 ]]></description>
		</property>
		<property generated="true">
			<name>CallResult</name>
			<type></type>
			<description><![CDATA[Type: "SQL::CallResult"
 
Mode: R
 
Returns the results of the last call.
 ]]></description>
		</property>
		<property generated="true">
			<name>ResultSet</name>
			<type>P</type>
			<description><![CDATA[Type: "SQL::ResultSet"
 
Mode: R
 
Returns the currently active result set, or an error if there isn't one.
 ]]></description>
		</property>
		<property generated="true">
			<name>ConnectionString</name>
			<type>C</type>
			<description><![CDATA[Type: C
 
Mode: RW
 
The current connection string in syntax format. Should be set by ::SetConnectString().
]]> </description>
		</property>
		<property generated="true">
			<name>SchemaCacheEnabled</name>
			<type>L</type>
			<description><![CDATA[Type: L
 
Mode: RW
 
Default = TRUE (.T.). When this property is set to TRUE (.T.), schema objects retrieved (such as SQL::TableInfo) will be cached for the connection (disconnecting and some update functions clear the cache), when false, all objects are not cached and subsequent requests for a schema object will go directly to the database.
]]> </description>
		</property>
		<property generated="true">
			<name>BulkReadEnabled</name>
			<type>L</type>
			<description>Logical BulkReadEnabled property</description>
		</property>
		<property generated="true">
			<name>BulkWriteEnabled</name>
			<type>L</type>
			<description>Logical BulkWriteEnabled property</description>
		</property>
		<property generated="true">
			<name>PortableSQLEnabled</name>
			<type>L</type>
			<description><![CDATA[Type: L,
 
Mode: RW
 
Default = FALSE (.F.). When this property is set to true, SQL statements passed to the ApplyData(), Execute(), ToOpenTable(), ToGridComponentDataObject(), ToOpenTable(), ToPropertyArray(), ToString(), ToXML(), and ValidateQuery() methods are checked to see if they are supported Portable SQL Statements and, if so, then translated to native syntax before being processed. Statements that are not supported are passed directly through to the underlying database driver as if PortableSQLEnabled were false.
 ]]></description>
		</property>
		<property generated="true">
			<name>LoginTimeout</name>
			<type>C</type>
			<description><![CDATA[Type: C,
 
Mode: RW
 
Timeout values are "Default", "Infinite", or a string containing an integer specifying the timeout in seconds. Must be set prior to opening the connection. 
]]> </description>
		</property>
		<property generated="true">
			<name>ConnectionTimeout</name>
			<type>C</type>
			<description><![CDATA[Type: C,
 
Mode: RW
 
Timeout values are "Default", "Infinite", or a string containing an integer specifying the timeout in seconds. Must be set prior to opening the connection. 
]]> </description>
		</property>
		<property generated="true">
			<name>QueryTimeout</name>
			<type>C</type>
			<description><![CDATA[Type: C,
 
Mode: RW
 
Timeout values are "Default", "Infinite", or a string containing an integer specifying the timeout in seconds. Must be set prior to executing a query.
 ]]></description>
		</property>
		
		
		
		<property generated="true">
			<name>TraceSQL</name>
			<type>L</type>
			<description>Logical TraceSQL property</description>
		</property>
		<property generated="true">
			<name>TraceContext</name>
			<type>L</type>
			<description>Logical TraceContext property</description>
		</property>
		<property generated="true">
			<name>InitialCommand</name>
			<type>C</type>
			<description>String InitialCommand property</description>
		</property>
		<property generated="true">
			<name>CurrentProvider</name>
			<type>C</type>
			<description>String CurrentProvider property</description>
		</property>
		<property generated="true">
			<name>CurrentProviderDatasource</name>
			<type>C</type>
			<description>String CurrentProviderDatasource property</description>
		</property>
		<property generated="true">
			<name>SSL</name>
			<type>L</type>
			<description>Logical SSL property</description>
		</property>
		<property generated="true">
			<name>UseServerSidePrepare</name>
			<type>L</type>
			<description>Logical UseServerSidePrepare property</description>
		</property>
	</properties>
	<methods>
		<methodref generated="true">
			<name>Open</name>
			<ref link="/documentation/index?search=SQL::Connection::Open Function">Open</ref>
			<description><![CDATA[Connect to a database. (See help for SetConnectionString for details on constructing a connect string.)]]></description>
		</methodref>
		<methodref generated="true">
			<name>Close</name>
			<ref link="/documentation/index?search=SQL::Connection::Close Function">Close</ref>
			<description>Close a SQL connection.</description>
		</methodref>
		<methodref generated="true">
			<name>ClearSchemaCache</name>
			<ref link="/documentation/index?search=SQL::Connection::ClearSchemaCache Function">ClearSchemaCache</ref>
			<description>Clear any schema data cached by the connection.</description>
		</methodref>
		<methodref generated="true">
			<name>ClearPortableSQLCache</name>
			<ref>ClearPortableSQLCache</ref>
<description><![CDATA[Clear any parsed and translated portable SQL statements cached by the connection.]]></description>
		</methodref>
		<methodref generated="true">
			<name>MaskPassword</name>
			<ref link="/documentation/index?search=SQL::Connection::MaskPassword Function">MaskPassword</ref>
			<description><![CDATA[Changes the characters in a password string so they will not display well.
Please Note! 
This is not a form of encryption!!!
The purpose of masking a password is to prevent it from displaying in a readable form.
If you choose to embed a password in a script, it is only as secure as your script.]]></description>
		</methodref>
		<methodref generated="true">
			<name>UnmaskPassword</name>
			<ref>UnmaskPassword</ref>
			<description><![CDATA[Changes the characters in a password string so they will display clearly after MaskPassword() has been calleed.
Please Note! 
This is not a form of encryption!!!
The purpose of masking a password is to prevent it from displaying in a readable form.
If you choose to embed a password in a script, it is only as secure as your script.]]></description>
		</methodref>
		<methodref generated="true">
			<name>GeographySupported</name>
			<ref href="/documentation/index?search=SQL::Connection::GeographySupported">GeographySupported</ref>
			<description><![CDATA[Returns true if the syntax passed supports geography features.
If you do not provide a syntax name, the current syntax is used.
If no syntax is assigned yet, the function will return false.]]></description>
		</methodref>
		<methodref generated="true">
			<name>ListAPIs</name>
			<ref link="/documentation/index?search=SQL::Connection::ListAPIs Function">ListAPIs</ref>
			<description><![CDATA[Create a crlf() delimited list of installed SQL Application Programming Interfaces.]]></description>
		</methodref>
		<methodref generated="true">
			<name>ListSupportedAPIs</name>
			<ref>ListSupportedAPIs</ref>
			<description><![CDATA[Create a crlf() delimited list of SQL Application Programming Interfaces supported.]]></description>
		</methodref>
		<methodref generated="true">
			<name>ListAPIsWithCatagories</name>
			<ref>ListAPIsWithCatagories</ref>
			<description>Create a crlf() delimited list of installed SQL Application Programming Interfaces with categories.</description>
		</methodref>
		<methodref generated="true">
			<name>ListSyntaxes</name>
			<ref link="/documentation/index?search=SQL::Connection::ListSyntaxes Function">ListSyntaxes</ref>
			<description>Create a crlf() delimited list of installed SQL Syntaxes.</description>
		</methodref>
		<methodref generated="true">
			<name>ListAutoIncrementImplementations</name>
			<ref link="/documentation/index?search=SQL::Connection::ListAutoIncrementImplementations Function">ListAutoIncrementImplementations</ref>
			<description>Create a crlf() delimited list of auto-increment implementations for the current SQL syntax.</description>
		</methodref>
		<methodref generated="true">
			<name>ListProcedureLanguages</name>
			<ref link="/documentation/index?search=SQL::Connection::ListProcedureLanguages Function">ListProcedureLanguages</ref>
			<description>Create a crlf() delimited list of procedure languages for the current SQL syntax.</description>
		</methodref>
		<methodref generated="true">
			<name>ListPortableSQLFunctions</name>
			<ref link="/documentation/index?search=SQL::Connection::ListPortableSQLFunctions Function">ListPortableSQLFunctions</ref>
			<description><![CDATA[Create a crlf() delimited list of portable SQL functions.

Within each row, the tab delimited columns are: Name, Prototype, Description, Aggregate=Y/N, Summary=Y/N, Category

If you provide a syntax name, only functions supported by that syntax will be included.
If you do not provide a syntax name, all functions will be included.

Note: Geography functions are only supported for some databases.]]></description>
		</methodref>
		<methodref generated="true">
			<name>ListProperties</name>
			<ref link="/documentation/index?search=SQL::Connection::ListProperties Function">ListProperties</ref>
			<description><![CDATA[Create a list of all connection property names and values in the format <name>tab<value>crlf.]]></description>
		</methodref>
		<methodref generated="true">
			<name>GetAdditionalProperties</name>
			<ref>GetAdditionalProperties</ref>
			<description>Create a list of additional (database specific) connection properties as they were entered in the connection string dialog.</description>
		</methodref>
		<methodref generated="true">
			<name>SetConnectionString</name>
			<ref link="/documentation/index?search=SQL::Connection::SetConnectionString Function">SetConnectionString</ref>
			<description><![CDATA[Set the connection string with required parameters:
The actual values will depend on how you are connecting to your database.
The connect string can be in one of two formats:

  Format 1 - {name1='value1',name2='value2'...nameN='valueN'}
     Example:
     connectstring = "{UserName='Fred',Password='secret'}"
     myconn.SetConnectionString(connectstring)

  Format 2 - name1<tab>value1<crlf> for each entry:
     Example:
     connectstring = "UserName" + chr(9) + "Fred" + crlf()
     connectstring = connectstring + "Password" + chr(9) + "secret" + crlf()
     myconn.SetConnectionString(connectstring)
     
     ]]></description>
		</methodref>
		<methodref generated="true">
			<name>SetSyntaxHandlerScript</name>
			<ref link="/documentation/index?search=SQL::Connection::SetSyntaxHandlerScript Function">SetSyntaxHandlerScript</ref>
			<description><![CDATA[Assign a handler script for the connection to override the default behavior of some or all of the event functions below:
    Note: Syntax generation functions return true if a statement has been created and false if it has not.
Examples:

  GenerateAddUserStatement as L (UserName as C, Statement BYREF AS C)

  GenerateSelectStatement as L (TableInfo as SQL::TableInfo, Statement BYREF AS C)]]></description>
		</methodref>
		<methodref generated="true">
			<name>SelectAfterSupported</name>
			<ref>SelectAfterSupported</ref>
			<description><![CDATA[Returns true if the syntax and database version passed supports the portable SQL syntax 'SELECT FIRST n AFTER m'.
If you do not provide a syntax name, the current syntax is used.
If you do not provide a database version, the current version (if specified) is used.
If no syntax is assigned yet, the function will return false.]]></description>
		</methodref>
		<methodref generated="true">
			<name>AddEventScript</name>
			<ref link="/documentation/index?search=SQL::Connection::AddEventScript Function">AddEventScript</ref>
			<description><![CDATA[Add a connection event script with functions to handle one or more of the following events: 

    UpdateBegin(Connection as SQL::Connection, RowsExpected as N, BYREF ProgressInterval as N, Cancel BYREF as L)
    UpdateProgress(Connection as SQL::Connection, RowsUpdated as N, RowsExpected as N, Cancel BYREF as L)
    UpdateEnd(Connection as SQL::Connection, RowsUpdated as N)]]></description>
		</methodref>
		<methodref generated="true">
			<name>RemoveEventScript</name>
			<ref link="/documentation/index?search=SQL::Connection::RemoveEventScript Function">RemoveEventScript</ref>
			<description>Remove an event script previously added with AddEventScript.</description>
		</methodref>
		<methodref generated="true">
			<name>GenerateSelectStatement</name>
			<ref link="/documentation/index?search=SQL::Connection::GenerateSelectStatement Function">GenerateSelectStatement</ref>
			<description>Generate a SQL Select statement for the table passed in.</description>
		</methodref>
		<methodref generated="true">
			<name>GenerateInsertStatement</name>
			<ref link="/documentation/index?search=SQL::Connection::GenerateInsertStatement Function">GenerateInsertStatement</ref>
			<description><![CDATA[Generate a SQL Insert statement for the table passed in.
Note: If UseBatchQualifiers is true then field values will be generated as arguments prefaced with 'new.' 
so a result set can be the source of the data.]]></description>
		</methodref>
		<methodref generated="true">
			<name>GenerateUpdateStatement</name>
			<ref link="/documentation/index?search=SQL::Connection::GenerateUpdateStatement Function">GenerateUpdateStatement</ref>
			<description>Generate a SQL Update statement for the table passed in.
Note: If UseBatchQualifiers is true then field values will be generated as arguments 
prefaced with 'new.'  and 'old.' so a result set can be the source of the data.</description>
		</methodref>
		<methodref generated="true">
			<name>GenerateDeleteStatement</name>
			<ref link="/documentation/index?search=SQL::Connection::GenerateDeleteStatement Function">GenerateDeleteStatement</ref>
			<description>Generate a SQL Delete statement for the table passed in.
Note: If UseBatchQualifiers is true then field values will be generated as arguments 
prefaced with and 'old.' so a result set can be the source of the data.</description>
		</methodref>
		<methodref generated="true">
			<name>GenerateRetrieveRowQuery</name>
			<ref link="/documentation/index?search=SQL::Connection::GenerateRetrieveRowQuery Function">GenerateRetrieveRowQuery</ref>
			<description><![CDATA[Generate a SQL statement to retrieve a specific row for the table passed in.
Key columns are generated as arguments.
If Rows is greater than 1 then a set of of arguments will be generated for each row in 
the following format:
    <first 20 characters of the key column name> + "_" + the row number.
		For example:		CustomerID becomes CustomerID_1, CustomerID_2 and so on.
Note:  If the table has no primary key, retrieve is meaningless and no string is returned.]]></description>
		</methodref>
		<methodref generated="true">
			<name>GenerateRowQualifiers</name>
			<ref link="/documentation/index?search=SQL::Connection::GenerateRowQualifiers Function">GenerateRowQualifiers</ref>
			<description><![CDATA[Generate a crlf delimited list of row qualifiers in the format: 

  <field_name><tab>argument_name<crlf>
Note:  If the table has no primary key, row qualifiers are meaningless and no qualifiers are returned.]]></description>
		</methodref>
		<methodref generated="true">
			<name>GenerateWhereClause</name>
			<ref link="/documentation/index?search=SQL::Connection::GenerateWhereClause Function">GenerateWhereClause</ref>
			<description><![CDATA[Generate a SQL WHERE clause for a table, based on the update criteria specified.
Note: If UseBatchQualifiers is true then fields will be prefaced with ':old.' 
so a result set can be the source of the data.]]></description>
		</methodref>
		<methodref generated="true">
			<name>GenerateColumnWhereClause</name>
			<ref>GenerateColumnWhereClause</ref>
			<description>Generate a SQL WHERE clause for a table column.
Note: If UseBatchQualifiers is true then fields will be prefaced with ':old.' so a result set can be the source of the data.</description>
		</methodref>
		<methodref generated="true">
			<name>GenerateNativeTypeString</name>
			<ref link="/documentation/index?search=SQL::Connection::GenerateNativeTypeString Function">GenerateNativeTypeString</ref>
			<description>Generate a SQL type string for type passed in using the current syntax.
TableInfo is optional, but provides additional information that is useful.</description>
		</methodref>
		<methodref generated="true">
			<name>GenerateNativeTableName</name>
			<ref link="/documentation/index?search=SQL::Connection::GenerateNativeTableName Function">GenerateNativeTableName</ref>
			<description>Generate a formatted table name suitable for a SQL query in using the current syntax.</description>
		</methodref>
		<methodref generated="true">
			<name>GenerateNativeColumnName</name>
			<ref link="/documentation/index?search=SQL::Connection::GenerateNativeColumnName Function">GenerateNativeColumnName</ref>
			<description>Generate a formatted column name suitable for a SQL query in using the current syntax.</description>
		</methodref>
		<methodref generated="true">
			<name>GenerateCreateSchemaScript</name>
			<ref>GenerateCreateSchemaScript</ref>
			<description>Generate a SQL script containing CREATE TABLE statements for each of the tables in the schema definition passed in.</description>
		</methodref>
		<methodref generated="true">
			<name>GenerateDropSchemaScript</name>
			<ref>GenerateDropSchemaScript</ref>
			<description>Generate a SQL script containing DROP TABLE statements for each of the tables in the schema definition passed in.</description>
		</methodref>
		<methodref generated="true">
			<name>GenerateCreateTableStatement</name>
			<ref link="/documentation/index?search=SQL::Connection::GenerateCreateTableStatement Function">GenerateCreateTableStatement</ref>
			<description>Generate a SQL CREATE TABLE statement for the table passed in.</description>
		</methodref>
		<methodref generated="true">
			<name>GenerateDropTableStatement</name>
			<ref link="/documentation/index?search=SQL::Connection::GenerateDropTableStatement Function">GenerateDropTableStatement</ref>
			<description>Generate a SQL DROP TABLE statement for the table passed in.</description>
		</methodref>
		<methodref generated="true">
			<name>GenerateCreateDatabaseStatement</name>
			<ref link="/documentation/index?search=SQL::Connection::GenerateCreateDatabaseStatement Function">GenerateCreateDatabaseStatement</ref>
			<description>Generate a SQL Create Database statement for the table passed in.
 Note: Not all databases vendors support creating a database through SQL.</description>
		</methodref>
		<methodref generated="true">
			<name>GenerateDropDatabaseStatement</name>
			<ref link="/documentation/index?search=SQL::Connection::GenerateDropDatabaseStatement Function">GenerateDropDatabaseStatement</ref>
			<description>Generate a SQL Drop Database statement for the table passed in.
 Note: Not all database vendors support dropping a database through SQL.</description>
		</methodref>
		<methodref generated="true">
			<name>GenerateCreateIndexStatement</name>
			<ref link="/documentation/index?search=SQL::Connection::GenerateCreateIndexStatement Function">GenerateCreateIndexStatement</ref>
			<description>Generate a SQL Create Index statement for the table and index passed in.</description>
		</methodref>
		<methodref generated="true">
			<name>GenerateDropIndexStatement</name>
			<ref link="/documentation/index?search=SQL::Connection::GenerateDropIndexStatement Function">GenerateDropIndexStatement</ref>
			<description>Generate a SQL Drop Index statement for the table passed in.</description>
		</methodref>
		<methodref generated="true">
			<name>GenerateAddUserStatement</name>
			<ref link="/documentation/index?search=SQL::Connection::GenerateAddUserStatement Function">GenerateAddUserStatement</ref>
			<description>Generate a SQL Add User statement.</description>
		</methodref>
		<methodref generated="true">
			<name>GenerateDropUserStatement</name>
			<ref link="/documentation/index?search=SQL::Connection::GenerateDropUserStatement Function">GenerateDropUserStatement</ref>
			<description>Generate a SQL Drop User statement.</description>
		</methodref>
		<methodref generated="true">
			<name>GenerateAddUserGroupStatement</name>
			<ref link="/documentation/index?search=SQL::Connection::GenerateAddUserGroupStatement Function">GenerateAddUserGroupStatement</ref>
			<description>Generate a SQL Add User Group statement.</description>
		</methodref>
		<methodref generated="true">
			<name>GenerateDropUserGroupStatement</name>
			<ref link="/documentation/index?search=SQL::Connection::GenerateDropUserGroupStatement Function">GenerateDropUserGroupStatement</ref>
			<description>Generate a SQL Drop User Group statement.</description>
		</methodref>
		<methodref generated="true">
			<name>GenerateAddUserToGroupStatement</name>
			<ref link="/documentation/index?search=SQL::Connection::GenerateAddUserToGroupStatement Function">GenerateAddUserToGroupStatement</ref>
			<description>Generate a SQL Add User To Group statement.</description>
		</methodref>
		<methodref generated="true">
			<name>GenerateDropUserFromGroupStatement</name>
			<ref link="/documentation/index?search=SQL::Connection::GenerateDropUserFromGroupStatement Function">GenerateDropUserFromGroupStatement</ref>
			<description>Generate a SQL Drop User From Group statement.</description>
		</methodref>
		<methodref generated="true">
			<name>GenerateGrantAccessStatement</name>
			<ref link="/documentation/index?search=SQL::Connection::GenerateGrantAccessStatement Function">GenerateGrantAccessStatement</ref>
			<description>Generate a SQL Grant Access statement.</description>
		</methodref>
		<methodref generated="true">
			<name>GenerateRevokeAccessStatement</name>
			<ref link="/documentation/index?search=SQL::Connection::GenerateRevokeAccessStatement Function">GenerateRevokeAccessStatement</ref>
			<description>Generate a SQL Revoke Access statement.</description>
		</methodref>
		<methodref generated="true">
			<name>IsReservedWord</name>
			<ref>IsReservedWord</ref>
			<description>Returns true if Word is a reserved word in the context of the current connection syntax.</description>
		</methodref>
		<methodref generated="true">
			<name>GenerateLastInsertedIdentityStatement</name>
			<ref link="/documentation/index?search=SQL::Connection::GenerateLastInsertedIdentityStatement Function">GenerateLastInsertedIdentityStatement</ref>
			<description>Generate a SQL statement to retrieve the identity from the last insert statement (may be specific to the table passed in).</description>
		</methodref>
		<methodref generated="true">
			<name>GetExampleSyntaxScript</name>
			<ref link="/documentation/index?search=SQL::Connection::GetExampleSyntaxScript Function">GetExampleSyntaxScript</ref>
			<description>Retrieve the syntax handler source for an example syntax handler.</description>
		</methodref>
		<methodref generated="true">
			<name>GetTemplateSyntaxScript</name>
			<ref link="/documentation/index?search=SQL::Connection::GetTemplateSyntaxScript Function">GetTemplateSyntaxScript</ref>
			<description>Retrieve the template syntax handler source for creating your own syntax handler.</description>
		</methodref>
		<methodref generated="true">
			<name>GetConnectDialogScript</name>
			<ref link="/documentation/index?search=SQL::Connection::GetConnectDialogScript Function">GetConnectDialogScript</ref>
			<description>Retrieve the API specific XDialog syntax for the dialog to prompt for a connection string</description>
		</methodref>
		<methodref generated="true">
			<name>GetConnectionProperty</name>
			<ref>GetConnectionProperty</ref>
			<description>Retrieve a connection property by name.</description>
		</methodref>
		<methodref generated="true">
			<name>GetConnectionString</name>
			<ref>GetConnectionString</ref>
			<description>Retrieve the current connection string.</description>
		</methodref>
		<methodref generated="true">
			<name>ShowADONETConnectionStringDialog</name>
			<ref>ShowADONETConnectionStringDialog</ref>
			<description>Display a dialog to select an ADO.NET provider and format a connection string.</description>
		</methodref>
		<methodref generated="true">
			<name>ListADONETProviders</name>
			<ref>ListADONETProviders</ref>
			<description>Returns a TAB and CRLF delimited list of providers with display names</description>
		</methodref>
		<methodref generated="true">
			<name>ListADONETProviderDataSources</name>
			<ref>ListADONETProviderDataSources</ref>
			<description>Returns a TAB and CRLF delimited list of data sources for a provider with display names</description>
		</methodref>
		<methodref generated="true">
			<name>FlushADONETProviderCache</name>
			<ref>FlushADONETProviderCache</ref>
			<description>Clears out loaded ADO.NET providers after installing a new provider</description>
		</methodref>
		<methodref generated="true">
			<name>BeginTransaction</name>
			<ref link="/documentation/index?search=SQL::Connection::BeginTransaction Function">BeginTransaction</ref>
			<description>Begin a batch of SQL updates, inserts and/or deletes that need to succeed or fail as a group.</description>
		</methodref>
		<methodref generated="true">
			<name>CommitTransaction</name>
			<ref link="/documentation/index?search=SQL::Connection::CommitTransaction Function">CommitTransaction</ref>
			<description>Apply a set of changes started with BeginTransaction.</description>
		</methodref>
		<methodref generated="true">
			<name>RollBackTransaction</name>
			<ref link="/documentation/index?search=SQL::Connection::RollBackTransaction Function">RollBackTransaction</ref>
			<description>Undo a set of changes started with BeginTransaction, but not yet applied (CommitTransaction hasn't been called).</description>
		</methodref>
		<methodref generated="true">
			<name>Execute</name>
			<ref link="/documentation/index?search=SQL::Connection::Execute Function">Execute</ref>
			<description><![CDATA[Execute a SQL statement on the connection.
Note: To execute more than one command in a single call, 
      separate each query with a single line containing only '\' at the beginning.]]></description>
		</methodref>
		<methodref generated="true">
			<name>ExecuteForValue</name>
			<ref>ExecuteForValue</ref>
			<description>Execute a SQL statement on the connection and get the first column of the first row of the result.</description>
		</methodref>
		<methodref generated="true">
			<name>ValidateQuery</name>
			<ref link="/documentation/index?search=SQL::Connection::ValidateQuery Function">ValidateQuery</ref>
			<description>Validate a SQL query on the connection.</description>
		</methodref>
		<methodref generated="true">
			<name>AffectedRows</name>
			<ref link="/documentation/index?search=SQL::Connection::AffectedRows Function">AffectedRows</ref>
			<description>Return affected rows.</description>
		</methodref>
		<methodref generated="true">
			<name>FreeResult</name>
			<ref link="/documentation/index?search=SQL::Connection::FreeResult Function">FreeResult</ref>
			<description><![CDATA[Release the result set from the last SQL select statement.
Note:  Calling FreeResult is not generally necessary.  Call it to free resources when there will be a delay between queries.]]></description>
		</methodref>
		<methodref generated="true">
			<name>ToOpenTable</name>
			<ref link="/documentation/index?search=SQL::Connection::ToOpenTable Function">ToOpenTable</ref>
			<description><![CDATA[Fetch data to an open .DBF table using a SQL query
Note:
The column types returned for each column by the query must match the respective column in the local table.]]></description>
		</methodref>
		<methodref generated="true">
			<name>ToDBF</name>
			<ref link="/documentation/index?search=SQL::Connection::ToDBF Function">ToDBF</ref>
			<description>Fetch data to a local .DBF table using a SQL query</description>
		</methodref>
		<methodref generated="true">
			<name>ToString</name>
			<ref link="/documentation/index?search=SQL::Connection::ToString Function">ToString</ref>
			<description>Fetch data to a string using a SQL query.</description>
		</methodref>
		<methodref generated="true">
			<name>ToFormattedString</name>
			<ref>ToFormattedString</ref>
			<description>Fetch data to a string using a SQL query.</description>
		</methodref>
		<methodref generated="true">
			<name>ToJSON</name>
			<ref link="/documentation/index?search=SQL::Connection::ToJSON Function">ToJSON</ref>
			<description>Fetch data to an JSON formatted string using a SQL query.
</description>
		</methodref>
		<methodref generated="true">
			<name>ToJSONObjectSyntax</name>
			<ref>ToJSONObjectSyntax</ref>
			<description>Fetch data to JSON object syntax using a SQL query.
</description>
		</methodref>
		<methodref generated="true">
			<name>ToJSONFile</name>
			<ref>ToJSONFile</ref>
			<description>Fetch data to JSON object syntax using a SQL query.
</description>
		</methodref>
		<methodref generated="true">
			<name>ToCSV</name>
			<ref>ToCSV</ref>
			<description>Fetch data to Comma Separated Variable format.
</description>
		</methodref>
		<methodref generated="true">
			<name>ToXML</name>
			<ref link="/documentation/index?search=SQL::Connection::ToXML Function">ToXML</ref>
			<description>Fetch data to an XML formatted string using a SQL query.
</description>
		</methodref>
		<methodref generated="true">
			<name>ToExcel</name>
			<ref>ToExcel</ref>
			<description>Fetch data to an Excel 2003 xls file using a SQL query.
</description>
		</methodref>
		<methodref generated="true">
			<name>ToPropertyArray</name>
			<ref link="/documentation/index?search=SQL::Connection::ToPropertyArray Function">ToPropertyArray</ref>
			<description><![CDATA[Fetch data to a property array using a SQL query.
Note: You must dim the array first:  DIM MyArray[1] as P
]]></description>
		</methodref>
		<methodref generated="true">
			<name>ToGridComponentDataObject</name>
			<ref link="/documentation/index?search=SQL::Connection::ToGridComponentDataObject Function">ToGridComponentDataObject</ref>
			<description><![CDATA[Fetch data to a Grid Component Data Object using a SQL Query.
Note: You must dim the arrays first:  DIM MyArray[1] as P
]]></description>
		</methodref>
		<methodref generated="true">
			<name>InsertData</name>
			<ref link="/documentation/index?search=SQL::Connection::Insertdata Function">InsertData</ref>
			<description>Apply new rows to a table in the currently connected database using a result set.</description>
		</methodref>
		<methodref generated="true">
			<name>UpdateData</name>
			<ref link="/documentation/index?search=SQL::Connection::UpdateData Function">UpdateData</ref>
			<description>Apply changes to existing rows in a table in the currently connected database using a result set.</description>
		</methodref>
		<methodref generated="true">
			<name>DeleteData</name>
			<ref link="/documentation/index?search=SQL::Connection::Deletedata Function">DeleteData</ref>
			<description>Delete rows from a table in the currently connected database using a result set.</description>
		</methodref>
		<methodref generated="true">
			<name>ApplyData</name>
			<ref link="/documentation/index?search=SQL::Connection::ApplyData Function">ApplyData</ref>
			<description>Apply the query to a table in the currently connected database using the result set provided.</description>
		</methodref>
		<methodref generated="true">
			<name>ApplyCurrentRow</name>
			<ref>ApplyCurrentRow</ref>
			<description>Apply the query to a table in the currently connected database using the current row of the result set provided.</description>
		</methodref>
		<methodref generated="true">
			<name>ResultSetFromDBF</name>
			<ref link="/documentation/index?search=SQL::Connection::ResultSetFromDBF Function">ResultSetFromDBF</ref>
			<description><![CDATA[Create a SQL::ResultSet object for a table.
This object can be passed to SQL update functions.
Note: Use of the ParentTable, ADBPath and AbsolutePositioning arguments is an advanced
user feature and requires some understanding of caching for SQL.]]></description>
		</methodref>
		<methodref generated="true">
			<name>ResultSetFromADORecordSet</name>
			<ref link="/documentation/index?search=SQL::Connection::ResultSetFromADORecordSet Function">ResultSetFromADORecordSet</ref>
			<description>Create a SQL::ResultSet object for an ADODB RecordSet.</description>
		</methodref>
		<methodref generated="true">
			<name>CreateDatabase</name>
			<ref link="/documentation/index?search=SQL::Connection::CreateDatabase Function">CreateDatabase</ref>
			<description>Create a new database.</description>
		</methodref>
		<methodref generated="true">
			<name>DropDatabase</name>
			<ref link="/documentation/index?search=SQL::Connection::DropDatabase Function">DropDatabase</ref>
			<description>Remove a database.</description>
		</methodref>
		<methodref generated="true">
			<name>CreateSchemaTables</name>
			<ref>CreateSchemaTables</ref>
			<description>Create all tables in the schema in the currently connected database using the TableInfo specifications in the schema.</description>
		</methodref>
		<methodref generated="true">
			<name>DropSchemaTables</name>
			<ref>DropSchemaTables</ref>
			<description>Drop all tables defined in the schema from the currently connected database.</description>
		</methodref>
		<methodref generated="true">
			<name>CreateTable</name>
			<ref>CreateTable</ref>
			<description>Create a table in the currently connected database using the TableInfo specification.</description>
		</methodref>
		<methodref generated="true">
			<name>DropTable</name>
			<ref>DropTable</ref>
			<description>Drop a table from the currently connected database.</description>
		</methodref>
		<methodref generated="true">
			<name>LastInsertedIdentity</name>
			<ref link="/documentation/index?search=SQL::Connection::LastInsertedIdentity Function">LastInsertedIdentity</ref>
			<description>Get the identity value from the last insert for the current session.</description>
		</methodref>
		<methodref generated="true">
			<name>CreateIndex</name>
			<ref link="/documentation/index?search=SQL::Connection::CreateIndex Function">CreateIndex</ref>
			<description>Create an index on the specified table in the currently connected database using the TableInfo and IndexInfo specifications.</description>
		</methodref>
		<methodref generated="true">
			<name>DropIndex</name>
			<ref link="/documentation/index?search=SQL::Connection::DropIndex Function">DropIndex</ref>
			<description>Drop the index named from table specified in the currently connected database.</description>
		</methodref>
		<methodref generated="true">
			<name>GetTableInfo</name>
			<ref link="/documentation/index?search=SQL::Connection::GetTableInfo Function">GetTableInfo</ref>
			<description>Get the definition of a table.
</description>
		</methodref>
		<methodref generated="true">
			<name>GetTableInfoFromDBF</name>
			<ref>GetTableInfoFromDBF</ref>
			<description>Get the definition of a DBF table from an open table or by name.
</description>
		</methodref>
		<methodref generated="true">
			<name>GetSchema</name>
			<ref link="/documentation/index?search=SQL::Connection::GetSchema Function">GetSchema</ref>
			<description>Get a schema definition.
</description>
		</methodref>
		<methodref generated="true">
			<name>ListServers</name>
			<ref link="/documentation/index?search=SQL::Connection::ListServers Function">ListServers</ref>
			<description>Return a list of servers for the current connection Application Programming Interface(API).</description>
		</methodref>
		<methodref generated="true">
			<name>GetPreferredSyntax</name>
			<ref link="/documentation/index?search=SQL::Connection::GetPreferredSyntax Function">GetPreferredSyntax</ref>
			<description>Return a the most appropriate syntax for the server specified or an empty string if not known.</description>
		</methodref>
		<methodref generated="true">
			<name>ListDatabases</name>
			<ref link="/documentation/index?search=SQL::Connection::ListDatabases Function">ListDatabases</ref>
			<description>Return a list of databases from the current server.</description>
		</methodref>
		<methodref generated="true">
			<name>ListTables</name>
			<ref>ListTables</ref>
			<description><![CDATA[Return a list of tables for the current database.

Example Usage:

	dim Filter as SQL::TableFilter
	Filter.IncludeViews = .t.
	Connection.ListTables(Filter)

Note: The overload below is still allowed, but is obsolute.  Use a TableFilter argument instead.

	C ListTables( [IncludeTables as L [, IncludeViews as L [, IncludeLinkedTables as L [, IncludeSystemTables as L [, IncludeSynonyms as L [, IncludeAliases as L]]]]]])]]></description>
		</methodref>
		<methodref generated="true">
			<name>ListTablesWithTypes</name>
			<ref>ListTablesWithTypes</ref>
			<description><![CDATA[Return a list of tables for the current database suffixed with (<type>).

Example Usage:

	dim Filter as SQL::TableFilter
	Filter.IncludeViews = .t.
	Connection.ListTables(Filter)

Note: The overload below is still allowed, but is obsolute.  Use a TableFilter argument instead.

	C ListTablesWithTypes( [IncludeTables as L [, IncludeViews as L [, IncludeLinkedTables as L [, IncludeSystemTables as L [, IncludeSynonyms as L [, IncludeAliases as L]]]]]])]]></description>
		</methodref>
		<methodref generated="true">
			<name>PrimaryKeyExpression</name>
			<ref link="/documentation/index?search=SQL::Connection::PrimaryKeyExpression Function">PrimaryKeyExpression</ref>
			<description>Return the primary key expression for a Table.</description>
		</methodref>
		<methodref generated="true">
			<name>AddUser</name>
			<ref link="/documentation/index?search=SQL::connection::AddUser Function">AddUser</ref>
			<description>Create a new user in the currently connected database or server.</description>
		</methodref>
		<methodref generated="true">
			<name>DropUser</name>
			<ref link="/documentation/index?search=SQL::Connection::DropUser Function">DropUser</ref>
			<description>Remove the user named from the currently connected database or server.</description>
		</methodref>
		<methodref generated="true">
			<name>AddUserGroup</name>
			<ref link="/documentation/index?search=SQL::Connection::AddUserGroup Function">AddUserGroup</ref>
			<description>Create a new user group in the currently connected database or server.</description>
		</methodref>
		<methodref generated="true">
			<name>DropUserGroup</name>
			<ref link="/documentation/index?search=SQL::Connection::DropUserGroup Function">DropUserGroup</ref>
			<description>Remove the user group named from the currently connected database or server.</description>
		</methodref>
		<methodref generated="true">
			<name>AddUserToGroup</name>
			<ref link="/documentation/index?search=SQL::Connection::AddUserToGroup Function">AddUserToGroup</ref>
			<description>Make the user a member of the group in the currently connected database or server.</description>
		</methodref>
		<methodref generated="true">
			<name>DropUserFromGroup</name>
			<ref link="/documentation/index?search=SQL::Connection::DropUserFromGroup Function">DropUserFromGroup</ref>
			<description>Remove the user from the group in the currently connected database or server.</description>
		</methodref>
		<methodref generated="true">
			<name>GrantAccess</name>
			<ref link="/documentation/index?search=SQL::Connection::GrantAccess Function">GrantAccess</ref>
			<description>Grant to a user or group the access specified, optionally, on the resource named.</description>
		</methodref>
		<methodref generated="true">
			<name>RevokeAccess</name>
			<ref link="/documentation/index?search=SQL::Connection::RevokeAccess Function">RevokeAccess</ref>
			<description>Revoke from a user or group the access specified, optionally, on the resource named.</description>
		</methodref>
		<methodref generated="true">
			<name>GetAuth</name>
			<ref>GetAuth</ref>
			<description>Get auth object for connection.</description>
		</methodref>
	</methods>
	<see>
		<ref link="/documentation/index?search=SQL Namepsace">SQL</ref>
	</see>
<terms>sql,connection,arguments,column,create table,current row,database,dbf,delete,display,events,excel,expressions,field,file,index,insert,language,list,new user,object,primary key,programming,query,script,sql query,string,tabs,template,templates,users,variable,xdialog,xml</terms>
</page>