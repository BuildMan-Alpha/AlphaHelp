<page api="xb">
	<shortlink>api sql namespace table info class</shortlink>
	<topic>SQL::TableInfo Class</topic>
	<description>Functions for inspecting information about tables.</description>
	<discussion>
		<p>The SQL::TableInfo object returns information about a database table. It can be useful when importing data from or exporting data to back-end tables. The easiest way to get a SQL::TableInfo object is to use the SQL::Connection::GetTableInfo() method. The following code was run in the Interactive window.</p>
		<p>
			<example code="xb"><![CDATA[dim conn as SQL::Connection
dim ti as SQL::TableInfo

' Define the connection string and open the connection.
? conn.open("{A5API=Access,FileName='C:\Program Files\a5v8\MDBFiles\Alphasports.mdb',UserName='Admin'}")
= .T.

' Get the TableInfo
? conn.GetTableInfo(ti, "customer")
= .T.]]></example>
		</p>
		<p>Note that the SQL::TableInfo object is passed as an argument, along with the name of the table to investigate.</p>
		<p>Properties and methods of the SQL::TableInfo object are listed below.</p>
	</discussion>
	<properties>
		<property generated="true">
			<name>XML</name>
			<type>C</type>
			<description>The schema in XML format.</description>
		</property>
		<property generated="true" readonly="true">
			<name>TableType</name>
			<type>SQL::TableType</type>
			<description>An enumerated type describing the table type. </description>
		</property>
		<property generated="true" readonly="true">
			<name>TableTypeName</name>
			<type>C</type>
			<description>
				<p>This is the displayable name of the enumeration value in TypeName.</p>
				<p>
					<example code="xb"><![CDATA[? tt.TableType 
= -1
? tt.TableTypeName 
= "Invalid"
tt.tabletype 
= View
? tt.TableType 
= 1
? tt.TableTypeName 
= "View"]]></example>
				</p>
			</description>
		</property>
		<property generated="true" readonly="true">
			<name>Catalog</name>
			<type>C</type>
			<description>Catalog property</description>
		</property>
		<property generated="true" readonly="true">
			<name>Schema</name>
			<type>C</type>
			<description>Schema property</description>
		</property>
		<property generated="true" readonly="true">
			<name>Owner</name>
			<type>C</type>
			<description>The database user or group that owns the table. </description>
		</property>
		<property generated="true">
			<name>TableName</name>
			<type>C</type>
			<description>TableName property</description>
		</property>
		<property generated="true" readonly="true">
			<name>UniqueName</name>
			<type>C</type>
			<description>A concatenation of the owner (if any) and name properties. </description>
		</property>
		<property generated="true" readonly="true">
			<name>Name</name>
			<type>C</type>
			<description>The unique name of the table. The table must be unique for the owner, but need not be globally unique. </description>
		</property>
		<property generated="true" readonly="true">
			<name>NativeAPI</name>
			<type>C</type>
			<description>The name of the API active when this object was created. </description>
		</property>
		<property generated="true" readonly="true">
			<name>NativeSyntax</name>
			<type>C</type>
			<description>The name of the syntax at the time the object was created. </description>
		</property>
		<property generated="true" readonly="true">
			<name>Comment</name>
			<type>C</type>
			<description>The comment stored for the table, if the database supports it. </description>
		</property>
		<property generated="true">
			<name>Alias</name>
			<type>C</type>
			<description>Alias property</description>
		</property>
		<property generated="true" readonly="true">
			<name>Updateable</name>
			<type>L</type>
			<description>True (.T.) if the table is updatable.</description>
		</property>
		<property generated="true" readonly="true">
			<name>CanUpdateInTransaction</name>
			<type>L</type>
			<description>If a table has a large text or binary column and the database can not cache updates for multiple rows, this value will be false. </description>
		</property>
		<property generated="true">
			<name>SizeToFit</name>
			<type>L</type>
			<description>When set to true, . DBFRowSyntax will return lengths adjusted based on the actual data. Notes: </description>
			<note>Call .UpdateStatistics() before getting the DBFRowSyntax. If the longest column is zero length, the default length is 15. SizeToFit will limit the size of inserted or updated fields on imported or linked tables to the maximum size of the previous values.</note>
		</property>
		<property generated="true">
			<name>SelectRowLimit</name>
			<type>N</type>
			<description>Defaults to -1 (no limit). This property is used when generating select statements to limit the number of rows retrieved. </description>
		</property>
		<property generated="true">
			<name>SelectRowStartingOffset</name>
			<type>N</type>
			<description>SelectRowStartingOffset property</description>
		</property>
		<property generated="true" readonly="true">
			<name>LastKnownRowCount</name>
			<type>N</type>
			<description>Set by calling .UpdateStatistics(). </description>
		</property>
		<property generated="true" readonly="true">
			<name>DBFRowSyntax</name>
			<type>C</type>
			<description>
				<p>The DBFRowSyntax property shows how to define a DBF table with the same columns and data as the source database.</p>
				<p>
					<example code="xb"><![CDATA[? ti.Name
= "customer"
? ti.Updateable
= .T.
? ti.NativeSyntax
= "Access"
? ti.DBFRowSyntax
= CUSTOMER_ID,N,10,0
FIRSTNAME,C,20,0
LASTNAME,C,20,0
COMPANY,C,32,0
PHONE,C,20,0
FAX,C,20,0
BILL_ADDRESS1,C,40,0
BILL_ADDRESS2,C,40,0
BILL_CITY,C,20,0
BILL_STATE_REGION,C,20,0
BILL_POSTAL_CODE,C,10,0
BILL_COUNTRY,C,20,0
SHIP_ADDRESS1,C,40,0
SHIP_ADDRESS2,C,40,0
SHIP_CITY,C,20,0
SHIP_STATE_REGION,C,20,0
SHIP_POSTAL_CODE,C,10,0
SHIP_COUNTRY,C,20,0
SHIP_SAME,L,1,0
EMAIL,C,60,0 ]]></example>
				</p>

			</description>
		</property>
		<property generated="true" readonly="true">
			<name>PrimaryKeyExpression</name>
			<type>C</type>
			<description>The subscript value to use when referencing the Index property to access the primary key index. If there is no primary key defined, this property will have a value of -1. If the value is an integer greater than or equal to 1, the primary key may be accessed using the syntax IndexPrimaryKeySubscript. </description>
		</property>
		<property generated="true">
			<name>PrimaryKeySubscript</name>
			<type>N</type>
			<description>PrimaryKeySubscript property</description>
		</property>
		<property generated="true" readonly="true">
			<name>IdentityColumnSubscript</name>
			<type>N</type>
			<description>Returns the index of the column which is auto-increment or identity (-1 if none). </description>
		</property>
		<property generated="true">
			<name>QueryAlias</name>
			<type>C</type>
			<description>
				<p>This is an advanced property used to get more information about a column.</p>
				<p>The QueryAlias property is only populated when a query object ( SQL::Query, SQL::Statement, etc.) is validated. After calling SQL::Query::Validate, the query object has a SQL::ResultSet object (no data, just definitions). The TableInfo property of the SQL::ResultSet is an array of SQL::TableInfo objects that describe the tables in the FROM clause (this is used by the query genie to map select list columns to the source table definition to get more information about the actual column.</p>
				<p>
					<example code="xb"><![CDATA[dim q as sql::query
dim c as sql::connection
?c.open("{a5api=access,filename=c:\northwind.mdb,user=admin}")
= .T.
?q.parse("select * from customers cust")
= .T. 
?q.validate(c) 
= .T. 
?q.resultset.tableinfo1.queryalias 
= "cust"]]></example>
				</p>
			</description>
		</property>
		<property generated="true" readonly="true">
			<name>Column</name>
			<type>SQL::IndexColumnInfo[]</type>
			<description>An array of index column ( SQL::IndexColumnInfo ) definitions. </description>
		</property>
		<property generated="true" readonly="true">
			<name>Index</name>
			<type>SQL::IndexInfo[]</type>
			<description>An array of index ( SQL::IndexInfo ) definitions. </description>
		</property>
		<property generated="true">
			<name>IdentitySequenceName</name>
			<type>C</type>
			<description>IdentitySequenceName property</description>
		</property>
		<property generated="true">
			<name>ActiveLinkDBFRowSyntax</name>
			<type>C</type>
			<description>ActiveLinkDBFRowSyntax property</description>
		</property>
	</properties>
	<!--list:.-->
	<see>
		<ref link="SQL Namepsace">SQL</ref>
	</see>
	<terms>sql,array,column,database,defaults,enumeration,field,genie,index,list,map,number,object,primary key,query,text,time,users,xml</terms>
</page>