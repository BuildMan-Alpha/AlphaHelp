<page api="xb">
    <shortlink>api sql namespace result set object to string function</shortlink>
    <topic parent="SQL::ResultSet" parentType="class" elementName="ToString Method">SQL::ResultSet ToString Method</topic>
    <description>Copy the ResultSet to a string.</description>
    <prototype>List as C = ToString([RowsToCopy = -1 as N [, StartRow = -1 as N [, DisplayFormat = .t. as L [, ColumnSeparator as C [, RowSeparator as C, [, ReferenceColumns as SQL::TableInfo [, UserContext as P]]]]]])</prototype>
    <arguments>
        <argument optional="true">
            <name>RowsToCopy</name>
            <type>N</type>
            <description>Default = -1 (all). The number of rows to copy.</description>
        </argument>
        <argument optional="true">
            <name>StartRow</name>
            <type>N</type>
            <description>Default = 1 (first). The first row to copy.</description>
        </argument>
        <argument optional="true">
            <name> DisplayFormat</name>
            <type>L</type>
            <description>
                <p>Default = *[xb:.t.]*. Indicates whether or not data should be formatted for display in a page or dialog. If *[xb:.f.]*, data will not be formatted. If *[xb:.t.]*, data fields such as binary data and logical fields will be formatted for best display in a page or dialog. IE:</p>
                <p>
                    <list bullet="true">
                        <item>
                            <name>Binary data is displayed as the literal "&lt;binary data&gt;"" rather than being embedded in the generated output.</name>
                        </item>
                        <item>
                            <name>Logical data will display as T or F rather than *[xb:.t.]* and *[xb:.f.]*.</name>
                        </item>
                        <item>
                            <name>Date, time, and datetime values will be displayed in the default date display format rather than the canonical format (such as YYYY-MM-DD).</name>
                        </item>
                        <item>
                            <name>Geography types will be converted to *[extlink:Well-Known-Text@https://en.wikipedia.org/wiki/Well-known_text_representation_of_geometry]* format.</name>
                        </item>
                    </list>
                </p>
            </description>
        </argument>
        <argument optional="true">
            <name>ColumnSeparator</name>
            <type>C</type>
            <description>Default = "\t" (tab character). The separator used between column values.</description>
        </argument>
        <argument optional="true">
            <name>RowSeparator</name>
            <type>C</type>
            <description>Default = crlf() (newline). The separator used between rows.</description>
        </argument>
        <argument optional="true">
            <name>ReferenceColumns</name>
            <type>SQL::TableInfo</type>
            <description>When data is formatted for a column in the result set: (1) if ReferenceColumns has a column with a matching name, that object will be used to format the data; (2) otherwise the ColumnInfo property of the result set is used to format the data.</description>
        </argument>
        <argument optional="true">
            <name>UserContext</name>
            <type>P</type>
            <description>The user context is passed into the evaluation of the expression when data is formatted.</description>
        </argument>
    </arguments>
    <returns>
        <return>
            <name>List</name>
            <types>
                <type>C</type>
            </types>
            <description>
                <p>A tab and CR-LF delimited list of fields and records.</p>
            </description>
        </return>
    </returns>
    <discussion>
        <p>The ToString() method copies the SQL::ResultSet to a tab and CR-LF delimited list.</p>
    </discussion>
    <example code="xb" caption="Generating a CR-LF delimited list of customers from 'Spain' in the Northwind customers table."><![CDATA[dim cn as SQL::Connection
dim cr as SQL::CallResult
dim args as SQL::Arguments
dim sql as C = "select * from customers where country = :country"
args.set("country","Spain")

if (cn.open("::name::AADemo-Northwind")) then
    if (cn.execute(sql,args)) then
        dim results as c
        results = cn.resultSet.toString()
        showvar(results)
    else
        cr = cn.CallResult
        ui_msg_box("error",cr.text)
    end if
    cn.close()
else
    cr = cn.CallResult
    ui_msg_box("error",cr.text)
end if]]></example>
    <terms>sql,column,defaults,expressions,field,function,list,number,object,tabs,users</terms>
</page>