<page api="xb">
    <shortlink>api sql namespace result set object to json file function</shortlink>
    <topic parent="SQL::ResultSet" parentType="class" elementName="ToJSONFile Method">SQL::ResultSet ToJSONFile Method</topic>
    <prototypes>
        <prototype>Result as L = toJSONFile(TargetFile as C [, RowsToCopy as N [, StartRow as N [, UpperCaseNames as L [, ConvertToText as L [, DateTimeFormat as C [, DateFormat as C [, ReferenceColumns as SQL::TableInfo [, UserContext as P]]]]]]]])</prototype>
    </prototypes>
    <arguments>
        <argument>
            <name>TargetFile</name>
            <type>C</type>
            <description>The name of the file to store the JSON, including the file path.</description>
        </argument>
        <argument optional="true">
            <type>N</type>
            <name> RowsToCopy</name>
            <description>number of rows to use</description>
        </argument>
        <argument optional="true">
            <type>N</type>
            <name> StartRow</name>
            <description>first row to use</description>
        </argument>
        <argument optional="true">
            <type>L</type>
            <name> UpperCaseNames</name>
            <description>Uppercase names if .T.</description>
        </argument>
        <argument optional="true">
            <type>L</type>
            <name> ConvertToText</name>
            <description>If .T. (default) single-quote numeric and logical values</description>
        </argument>
        <argument optional="true">
            <type>C</type>
            <name> DateTimeFormat</name>
            <description>Format string for dateTime values, as used by the time Function, e.g. "yyyy-MM-dd"</description>
        </argument>
        <argument optional="true">
            <type>C</type>
            <name>DateFormat</name>
            <description>Format string for date values, as used by the time Function</description>
        </argument>
        <argument optional="true">
            <type>SQL::TableInfo</type>
            <name>ReferenceColumns</name>
            <description>When data is formatted for a column in the result set: (1) if ReferenceColumns has a column with a matching name, that object will be used to format the data; (2) otherwise the ColumnInfo property of the result set is used to format the data.</description>
        </argument>
        <argument optional="true">
            <type>P</type>
            <name>UserContext</name>
            <description>The user context is passed into the evaluation of the expression when data is formatted.</description>
        </argument>
    </arguments>
    <returns>
        <return>
            <name>Result</name>
            <types>
                <type>L</type>
            </types>
            <description>Returns *[xb:.t.]* if the operation is successful. Otherwise, returns *[xb:.f.]*. If the operation fails, the *[xb:callResult]* of the ResultSet object will contain more information.</description>
        </return>
    </returns>
    <description>Convert a ResultSet to JSON object and store in TargetFile</description>
    <discussion>
        <p>The *[xb:toJSONFile]* method converts the SQL::ResultSet object to JSON then saves it in the specified target file. For example:</p>
    </discussion>
    <example code="xb"><![CDATA[
    dim cn as SQL::Connection
cn.open("::Name::AADemo-Northwind")
if (cn.execute("SELECT * FROM customers") ) then
    dim filename as c = "C:\Users\YOUR_USER_NAME\Documents\results.js"
    cn.resultSet.ToJSONFile(filename)
    ' Display the JSON File:
    dim contents as c = FILE.to_string(filename)
    showvar(contents)
end if
cn.close()]]></example>
    <see>
        <ref link="api json functions">JSON Functions</ref>
        <ref link="json data">Working with JSON Data</ref>
    </see>
</page>