<page>
	<shortlink>api sql query namespace logical expression object</shortlink>
	<topic>SQL::Query::LogicalExpression Object</topic>
	<description>Internal use only. The SQL::Query::LogicalExpression object describes a logical expression used in a SELECT statement. A logical expression returns a logical (boolean) result. Logical expressions are used in the WHERE clause and as input to value expressions and function arguments.

The SQL::Query::LogicalExpression object is simple, but any operand may be an expression itself, meaning that a tree of operator and their respective operands can nest down many levels.
</description>
<sections>
	<section>
		
		<steps>
			<step>
				<description>The parser checks for parentheses and uses them to build the proper tree, but does not currently remember where the original script included them. as a result, the routines that generate SQL generally wrap parentheses in the output to guarantee correctness.</description>
			</step>
			<step>
				<description>The parser checks many cases for the correct number and type of operands. If you build the tree in Xbasic, you are responsible for validating the syntax tree.</description>
			</step>
			
		</steps>
	</section>
	
	
</sections>

	<properties>
		<property>
			<name>ColumnReferences</name>
			<type>ReferenceList of SQL::Query:: ColumnReference</type>
			<description>Read Only. An array of all column references in the query (including nested occurrences). Behaves the same way as  .SelectTableReferences.
 </description>
		</property>
		<property>
			<name>LogicalOperator</name>
			<type>SQL::Query::LogicalOperator</type>
			<description>Read Write. See Enumerated Type Values.</description>
		</property>
		<property>
			<name>Operand</name>
			<type>List Object of one of the following object types: SQL::Query:: ValueExpression, SQL::Query:: LogicalExpression, SQL::Query:: ColumnReference, SQL::Query</type>
			<description>Read Write. The operands for the respective operator.
</description>
		</property>
		<property>
			<name>ErrorColumn</name>
			<type>N</type>
			<description>Read Only. The column number of the last error reported by the parser.</description>
		</property>
		<property>
			<name>ErrorText</name>
			<type>C</type>
			<description>Read Only. The text of the last parser error reported.</description>
		</property>
		<property>
			<name>FunctionReferences</name>
			<type>ReferenceList of SQL::Query:: ValueExpression</type>
			<description>Read Only. An array of all function calls. Behaves the same way as  .SelectTableReferences.
</description>
		</property>
		<property>
			<name>ObjectDefinitions</name>
			<type>C</type>
			<description>Read Only. For internal debugging. Returns a string description of the mapping between the ANTLR grammar and the Xbasic objects.
</description>
		</property>
		<property>
			<name>ParseTree</name>
			<type>C</type>
			<description>Read Only. For internal debugging. A string description of the underlying parse tree.
</description>
		</property>
		<property>
			<name>SQLStatement</name>
			<type>C</type>
			<description>Read Write. A variable that can be assigned a syntax string without parsing it. If no value is passed to the Parse() method, this value is used.
</description>
		</property>
		<property>
			<name>SelectTableReferences</name>
			<type>ReferenceList of SQL::Query:: SelectTableReference</type>
			<description>Read Only. An array of all table references in the query (including those nested inside of sub-selects and joins). This array is created when the property is requested, but can become out of date. Use the Resynch() function on any variable holding this list when any changes are made.</description>
		</property>
		<property>
			<name>TokenTypeName</name>
			<type>C</type>
			<description>Read Only. "LogicalExpression".</description>
		</property>
		<property>
			<name>XML</name>
			<type>C</type>
			<description>Read Write. Creates XML from the tree or recreates the tree from the XML.</description>
		</property>
		
		
	</properties>
	
	<methods>
		<method>
			<name>::Parse()</name>
			<description>Parses the SQL statement passed (or the value previously set into the .SQLStatement property).</description>
		</method>
		<method>
			<name>::Reset()</name>
			<description>Resets the query as if it had just been created.
</description>
		</method>
	</methods>
	
	
	
	
	
	
	<see>
		<ref>SQL Objects</ref>
		<ref>SQL Enumerated Types</ref>
	</see>
	
</page>