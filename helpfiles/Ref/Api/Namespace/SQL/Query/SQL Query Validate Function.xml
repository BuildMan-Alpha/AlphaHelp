<page api="xb">
   <topic>SQL::Query::Validate Function</topic>
    <description>Execute the current statement using the current or passed connection.</description>
   <syntax>Result_Flag as L = Validate([SQLConnection as SQL::Connection | SQLConnectionString as C] [UpdateStatistics as L])</syntax>
   <arguments>
    <argument>
         <name>Result_Flag</name>
         <description>
 
TRUE (.T.) if the operation was successful; otherwise FALSE (.F.).
 </description>
     </argument>
      <argument>
         <name>SQL::Query</name>
         <description>A SQL::Query object created with a DIM statement.
</description>
     </argument>
     
     
     <argument>
         <name>SQLConnection</name>
         <description>Optional. A SQL::Connection object with a defined .ConnectionString property.
</description>
     </argument>
     
      <argument>
         <name>SQLConnectionString</name>
         <description>Optional. A connection string.
</description>
     </argument>
     
     
   </arguments>
  
   <discussion>
The .Validate() method prepares the query and validates it, but does not execute it. (In some implementations the query is executed with a limit on rows set to 1). The intent is to force the query through a server side parse and report problems. If successful, the SQL::Query.ResultSet property has a full definition of the columns that would be returned including the underlying table from which the column would be retrieved. The augmentation of the result set with this information is expensive, so it is intended as a design-time tool, not as a run-time option.
The method connects to the back-end database using the information in the SQL::Connection::ConnectionString property or in the ConnectString string, then executes the current SQL statement stored in the SQL::Query.SQLStatement property.
Note: Not every database is thorough about validation.
   </discussion>
  
   
   <see>
      <ref link="SQL::Query Object">SQL::Query Object</ref>
     </see>
  
</page>