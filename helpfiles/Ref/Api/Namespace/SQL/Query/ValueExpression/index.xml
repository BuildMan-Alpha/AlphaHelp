<page>
	<shortlink>api sql query namespace value expression object</shortlink>
	<topic>SQL::Query::ValueExpression Object</topic>
	<description>Internal use only. The SQL::Query::ValueExpression object describes a value expression used in a SELECT statement. A value expression returns a data value. Value expressions are used in the select list, the WHERE clause and as input to logical and value expressions and as function arguments.
The expression object is simple, but any operand may be an expression itself, meaning that a tree of operator and their respective operands can nest down many levels.
</description>
			
	<sections>
		<section>
			
<title>Notes</title>			
			<steps>
				<step>
					<description>The parser checks for parentheses and uses them to build the proper tree, but does not currently remember where the original script included them. as a result, the routines that generate SQL generally wrap parentheses in the output to guarantee correctness.</description>
				</step>
				<step>
					<description>The parser checks many cases for the correct number and type of operands. If you build the tree in Xbasic, you are responsible for validating the syntax tree.</description>
				</step>
				
			</steps>
			
		</section>
		
		
		
	</sections>
	
<properties>
	<property>
		<name>ColumnReferences</name>
		<type>
ReferenceList of SQL::Query:: ColumnReference</type>
		<description>Read Only. An array of all column references in the query (including nested occurrences). Behaves the same way as  .SelectTableReferences.
 </description>
	</property>
	<property>
		<name>ArithmeticOperator</name>
		<type>SQL::Query:: ArithmeticOperator</type>
		<description>Read Write. See the enumeration</description>
	</property>
	<property>
		<name>Operand</name>
		<type>List Object of variables in any of the following types: SQL::Query:: ValueExpression, SQL::Query:: ColumnReference, SQL::Query, Literals, Character, Numeric, Date, Time, Logical</type>
		<description>Read Write. The arguments for the operator.</description>
	</property>
	<property>
		<name>ErrorColumn</name>
		<type>N</type>
		<description>Read Only. The column number of the last error reported by the parser.</description>
	</property>
	<property>
		<name>ErrorText</name>
		<type>C</type>
		<description>Read Only. The text of the last parser error reported.</description>
	</property>
	<property>
		<name>FunctionReferences</name>
		<type>ReferenceList of SQL::Query:: ValueExpression</type>
		<description>Read Only. An array of all function calls). Behaves the same way as  .SelectTableReferences.
</description>
	</property>
	<property>
		<name>ObjectDefinitions</name>
		<type>C</type>
		<description>Read Only. For internal debugging. Returns a string description of the mapping between the ANTLR grammar and the Xbasic objects.
</description>
	</property>
	<property>
		<name>ParseTree
</name>
		<type>C</type>
		<description>Read Only. For internal debugging. A string description of the underlying parse tree.</description>
	</property>
	<property>
		<name>SQLStatement</name>
		<type>C</type>
		<description>Read Write. A variable that can be assigned a syntax string without parsing it. If no value is passed to the .Parse()method, this value is used.
</description>
	</property>
	<property>
		<name>SelectTableReferences</name>
		<type>ReferenceList of SQL::Query:: SelectTableReference</type>
		<description>Read Only. An array of all table references in the query (including those nested inside of sub-selects and joins). This array is created when the property is requested, but can become out of date.
Use the Resynch() method on any variable holding this list when any changes are made </description>
	</property>
	<property>
		<name>TokenTypeName</name>
		<type>C</type>
		<description>Read Only. "ValueExpression".
</description>
	</property>
	<property>
		<name>XML</name>
		<type>C</type>
		<description>Read Write. Creates XML from the tree or recreates the tree from the XML.
</description>
	</property>
	
</properties>	
<methods>
	<method>
		<name>::Parse()</name>
		<description>Accepts an optional text string and parses it. If the parse is successful, the elements of the SQL statement will be available immediately as Properties of the object.
</description>
	</method>
	<method>
		<name>::Reset()</name>
		<description>Reinitializes the object as if it had just been declared.</description>
	</method>
	
</methods>
	
	<see>
		<ref>SQL Objects</ref>
		<ref>SQL Enumerated Types</ref>
	</see>
	
</page>