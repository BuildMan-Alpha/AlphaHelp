<page api="xb">
    <shortlink>api sql namespace query object</shortlink>
    <topic>SQL::Query Object</topic>
    <description>SQL::Query object methods and related enumerations and objects.</description>
    <discussion>The SQL::Query object implements Portable SQL. The SQL::Query object parses Portable SQL statements and converts them to the native SQL dialect of the target database. The SQL::Query object is the root of all queries. As a result, it has the most properties. Its children are the various clauses that make up a complete SELECT statement.</discussion>
    <sections>
        <section>
            <example code="xb"><![CDATA[dim conn as SQL::Connection
dim qry as SQL::Query
dim rs as SQL::ResultSet
dim connString as C
dim select_exp as C
connString = "{A5API='Access', FileName='c:\program files\a5v7\mdbfiles\alphasports.mdb'}"
select_exp = "select Lastname from customer where bill_state_region = 'ma'"
conn.open(connString)
qry.execute(conn)
rs = qry.resultset]]></example>
        </section>
        <section>
            <description>In the simplest case, you can declare a variable and parse a string. From there you can explore the resulting query as an Xbasic object, or dump the parse tree by looking at the .ParseTree property, or even convert the query to XML using the XML property. For example:</description>
            <example code="xb"><![CDATA[dim Q as SQL::Query
Q.Parse("select customer, cost, 'Hello' as Message from orderheader o order by customer")
? Q.ParseTree
= 
{ select:55  -1:213   0:213   NONE:202 
  { SELECT_LIST:180
    { SELECT_ITEM:181
      { COLUMN_REFERENCE:188  :193   customer:143 }      :192 }  
    { SELECT_ITEM:181
      { COLUMN_REFERENCE:188  :193   cost:143 }      :192 }  
    { SELECT_ITEM:181
      { VALUE_EXPRESSION:212  NONE:140 
        { LIST:178  Hello:214 }      }      Message:192 }  }
  { TABLE_LIST:184
    { SELECT_TABLE_REFERENCE:189  :195   orderheader:193   o:194   JOIN_LIST:196 }  }
  { LOGICAL_EXPRESSION:211  EMPTY:170   LIST:178 }
  { GROUPBY_CLAUSE:207  GROUPBY_LIST:208 
    { LOGICAL_EXPRESSION:211  EMPTY:170   LIST:178 }  }
  { ORDERBY_CLAUSE:204
    { ORDERBY_ITEM:205
      { COLUMN_REFERENCE:188  :193   customer:143 }      EMPTY:170 }  }  UNION_LIST:209   ORDERBY_CLAUSE:204 }

? Q.XML
= <CommonAST text="select" type="55">
<CommonAST text="-1" type="213">
</CommonAST>
<CommonAST text="0" type="213">
</CommonAST>
<CommonAST text="NONE" type="202">
</CommonAST>
<CommonAST text="SELECT_LIST" type="180">
<CommonAST text="SELECT_ITEM" type="181">
<CommonAST text="COLUMN_REFERENCE" type="188">
<CommonAST text="" type="193">
</CommonAST>
<CommonAST text="customer" type="143">
</CommonAST>
</CommonAST>
<CommonAST text="" type="192">
</CommonAST>
</CommonAST>
<CommonAST text="SELECT_ITEM" type="181">
<CommonAST text="COLUMN_REFERENCE" type="188">
<CommonAST text="" type="193">
</CommonAST>
<CommonAST text="cost" type="143">
</CommonAST>
</CommonAST>
<CommonAST text="" type="192">
</CommonAST>
</CommonAST>
<CommonAST text="SELECT_ITEM" type="181">
<CommonAST text="VALUE_EXPRESSION" type="212">
<CommonAST text="NONE" type="140">
</CommonAST>
<CommonAST text="LIST" type="178">
<CommonAST text="Hello" type="214">
</CommonAST>
</CommonAST>
</CommonAST>
<CommonAST text="Message" type="192">
</CommonAST>
</CommonAST>
</CommonAST>
<CommonAST text="TABLE_LIST" type="184">
<CommonAST text="SELECT_TABLE_REFERENCE" type="189">
<CommonAST text="" type="195">
</CommonAST>
<CommonAST text="orderheader" type="193">
</CommonAST>
<CommonAST text="o" type="194">
</CommonAST>
<CommonAST text="JOIN_LIST" type="196">
</CommonAST>
</CommonAST>
</CommonAST>
<CommonAST text="LOGICAL_EXPRESSION" type="211">
<CommonAST text="EMPTY" type="170">
</CommonAST>
<CommonAST text="LIST" type="178">
</CommonAST>
</CommonAST>
<CommonAST text="GROUPBY_CLAUSE" type="207">
<CommonAST text="GROUPBY_LIST" type="208">
</CommonAST>
<CommonAST text="LOGICAL_EXPRESSION" type="211">
<CommonAST text="EMPTY" type="170">
</CommonAST>
<CommonAST text="LIST" type="178">
</CommonAST>
</CommonAST>
</CommonAST>
<CommonAST text="ORDERBY_CLAUSE" type="204">
<CommonAST text="ORDERBY_ITEM" type="205">
<CommonAST text="COLUMN_REFERENCE" type="188">
<CommonAST text="" type="193">
</CommonAST>
<CommonAST text="customer" type="143">
</CommonAST>
</CommonAST>
<CommonAST text="EMPTY" type="170">
</CommonAST>
</CommonAST>
</CommonAST>
<CommonAST text="UNION_LIST" type="209">
</CommonAST>
<CommonAST text="ORDERBY_CLAUSE" type="204">
</CommonAST>
</CommonAST>]]></example>
        </section>
        <section>
            <description>In addition, the XML string can be assigned to a different query.</description>
            <example><![CDATA[dim Q2 as SQL::Query
Q2.XML = Q.XML
? Q2.ParseTree
= 
{ select:55  -1:213   0:213   NONE:202 
  { SELECT_LIST:180
    { SELECT_ITEM:181
      { COLUMN_REFERENCE:188  :193   customer:143 }      :192 }  
    { SELECT_ITEM:181
      { COLUMN_REFERENCE:188  :193   cost:143 }      :192 }  
    { SELECT_ITEM:181
      { VALUE_EXPRESSION:212  NONE:140 
        { LIST:178  Hello:214 }      }      Message:192 }  }
  { TABLE_LIST:184
    { SELECT_TABLE_REFERENCE:189  :195   orderheader:193   o:194   JOIN_LIST:196 }  }
  { LOGICAL_EXPRESSION:211  EMPTY:170   LIST:178 }
  { GROUPBY_CLAUSE:207  GROUPBY_LIST:208 
    { LOGICAL_EXPRESSION:211  EMPTY:170   LIST:178 }  }
  { ORDERBY_CLAUSE:204
    { ORDERBY_ITEM:205
      { COLUMN_REFERENCE:188  :193   customer:143 }      EMPTY:170 }  }  UNION_LIST:209   ORDERBY_CLAUSE:204 }]]></example>
        </section>
        <section>
            <title>Using Arguments</title>
            <description>This script show how to use an argument when you want to substitute a value at run time. This syntax does not directly use a SQL::Arguments object. Instead, it allows the SQL::Query object to create its own SQL::Arguments object.</description>
            <example code="xb"><![CDATA[q.Parse("SELECT CompanyName, City FROM Customers WHERE City = :city")
? q.Arguments.Count
= 1
? q.Arguments.Set("City", "London")
= .T.
c.Open(cs)
q.Execute(c)
? q.ResultSet.ToString()
= B's Beverages London
Consolidated Holdings London
Eastern Connection London
North/South London
Seven Seas Imports London]]></example>
        </section>
        <section>
            <description>This syntax uses a SQL::Arguments object, adds a name/value pair with the SQL::Argument.Add() method, and passes the object as part of the SQL::Connection::Execute() query.</description>
            <example code="xb"><![CDATA[dim args as SQL::Arguments
dim conn as SQL::Connection
sql = "SELECT TOP 2 CompanyName, City FROM Customers WHERE City = :city"
args.Add("city", "London")
? conn.Execute(sql, args)
= .T.
? conn.ResultSet.ToString()
= B's Beverages London
Consolidated Holdings London
Eastern Connection London
North/South London
Seven Seas Imports London]]></example>
        </section>
        <section>
            <title>Related Objects</title>
            <!--list:*index.xml-->
        </section>
        <section>
            <title>Related Enumerations</title>
            <!--list:*Type.xml-->
        </section>
    </sections>
    <properties>
        <property readonly="true">
            <name>Arguments</name>
            <type>SQL::Arguments</type>
            <description>Arguments for the current query.</description>
        </property>
        <property readonly="true">
            <name>CallResult</name>
            <type>SQL::CallResult</type>
            <description>Call results.</description>
        </property>
        <property>
            <name>Column</name>
            <type>List of SQL::Query:: SelectItem</type>
            <description>List of the items in the select column list.</description>
        </property>
        <property readonly="true">
            <name>ColumnReferences</name>
            <type>ReferenceList of SQL::Query::ColumnReference</type>
            <description>An array of all column references in the query (including nested occurrences). Behaves the same way as  .SelectTableReferences.</description>
        </property>
        <property>
            <name>Connection</name>
            <type>SQL::Connection</type>
            <description>Current open connection</description>
        </property>
        <property>
            <name>DuplicateOption</name>
            <type>SQL::Query::DuplicateOption</type>
            <description>See Enumerated Type Values.</description>
        </property>
        <property readonly="true">
            <name>ErrorColumn</name>
            <type>N</type>
            <description>The column number of the last error reported by the parser.</description>
        </property>
        <property readonly="true">
            <name>ErrorText</name>
            <type>C</type>
            <description>The text of the last parser error reported.</description>
        </property>
        <property>
            <name>First</name>
            <type>N</type>
            <description>&#160;</description>
        </property>
        <property readonly="true">
            <name>FunctionReferences</name>
            <type>ReferenceList of SQL::Query::ValueExpression</type>
            <description>An array of all function calls. Behaves the same way as  .SelectTableReferences.</description>
        </property>
        <property>
            <name>GroupBy</name>
            <type>SQL::Query::GroupBy</type>
            <description>The GROUP BY clause. This object always exists. If the list inside is empty, no GROUP BY was coded.</description>
        </property>
        <property>
            <name>NestedOrderBy</name>
            <type>List of SQL::Query::ColumnOrder</type>
            <description>A list of column order objects. If the list is empty, no ORDER BY clause  was coded. .NestedOrderBy comes before .Union. This was in a test case, so I am supporting it (for now). </description>
        </property>
        <property readonly="true">
            <name>ObjectDefinitions</name>
            <type>C</type>
            <description>For internal debugging. Returns a string description of the mapping between the ANTLR grammar and the Xbasic objects.</description>
        </property>
        <property>
            <name>OrderBy</name>
            <type>List of SQL::Query::ColumnOrder</type>
            <description>A list of column order objects. If the list is empty, no ORDER BY clause was coded.</description>
        </property>
        <property readonly="true">
            <name>ParseTree</name>
            <type>C</type>
            <description>For internal debugging. A string description of the underlying parse tree.</description>
        </property>
        <property>
            <name>ResolveColumnTables</name>
            <type>L</type>
            <description>Set to .T. if Execute should populate descriptions of tables and columns. This can affect performance.</description>
        </property>
        <property readonly="true">
            <name>ResultSet</name>
            <type>SQL::ResultSet</type>
            <description>Descriptions and/or data from the last Execute or Validate function call.</description>
        </property>
        <property readonly="true">
            <name>SelectTableReferences</name>
            <type>ReferenceList of SQL::Query::SelectTableReference</type>
            <description>An array of all table references in the from clause and those joined to them. This array is created when the property is requested, but can become out of date. Use the Resynch() function on any variable holding this list when any changes are made.</description>
        </property>
        <property>
            <name>SQLStatement</name>
            <type>C</type>
            <description>A variable that can be assigned a syntax string without parsing it. If no value is passed to the .Parse() method, this value is used.</description>
        </property>
        <property>
            <name>Table</name>
            <type>List of SQL::Query::SelectTableReference</type>
            <description>The items in the FROM clause or in a JOIN clause.</description>
        </property>
        <property readonly="true">
            <name>TableReferences</name>
            <type>ReferenceList of SQL::Query::SelectTableReference</type>
            <description>An array of all table references in the query (including those nested inside of sub-selects and joins). This array is created when the property is requested, but can become out of date. Use the Resynch() function on any variable holding this list when any changes are made. </description>
        </property>
        <property>
            <name>TokenTypeName</name>
            <type>C</type>
            <description>"Query"</description>
        </property>
        <property>
            <name>Union</name>
            <type>List of SQL::Query::Union</type>
            <description>A list (could be empty) of UNION clauses with their respective queries.</description>
        </property>
        <property>
            <name>Where</name>
            <type>SQL::Query::LogicalExpression</type>
            <description>An expression for the WHERE clause.</description>
        </property>
        <property>
            <name>XML</name>
            <type>C</type>
            <description>Creates XML from the tree or recreates the tree from the XML.</description>
        </property>
    </properties>
    <!--list:*Method.xml-->
    <see>
        <ref>SQL Objects</ref>
        <ref>SQL Enumerated Types</ref>
    </see>
    <links>
        <link href="Assignment/index.xml">SQL::Query::Assignment Object</link>
        <link href="ColumnOrder/index.xml">SQL::Query::ColumnOrder Object</link>
        <link href="ColumnReference/index.xml">SQL::Query::ColumnReference Object</link>
        <link href="GroupBy/index.xml">SQL::Query::GroupBy Object</link>
        <link href="Join/index.xml">SQL::Query::Join Object</link>
        <link href="LogicalExpression/index.xml">SQL::Query::LogicalExpression Object</link>
        <link href="ReplaceOption/index.xml">SQL::Query::ReplaceOption Object</link>
        <link href="SelectItem/index.xml">SQL::Query::SelectItem Object</link>
        <link href="SelectTableReference/index.xml">SQL::Query::SelectTableReference Object</link>
        <link href="TableReference/index.xml">SQL::Query::TableReference Object</link>
        <link href="Union/index.xml">SQL::Query::Union Object</link>
        <link href="ValueExpression/index.xml">SQL::Query::ValueExpression Object</link>
        <link href="SQL Query ArithmeticOperator Enumerated Type.xml">SQL::Query::ArithmeticOperator Enumerated Type</link>
        <link href="SQL Query DuplicateOption Enumerated Type.xml">SQL::Query::DuplicateOption Enumerated Type</link>
        <link href="SQL Query LogicalOperator Enumerated Type.xml">SQL::Query::LogicalOperator Enumerated Type</link>
        <link href="SQL Query Order Enumerated Type.xml">SQL::Query::Order Enumerated Type</link>
        <link href="SQL Query OuterJoinType Enumerated Type.xml">SQL::Query::OuterJoinType Enumerated Type</link>
    </links>
</page>