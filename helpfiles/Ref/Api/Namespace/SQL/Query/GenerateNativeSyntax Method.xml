<page api="xb">
    <shortlink>api sql namespace query object generate native syntax function</shortlink>
    <topic parent="SQL::Query" parentType="class" elementName="GenerateNativeSyntax Method">SQL::Query::GenerateNativeSyntax Method</topic>

    <description>Generate a native SQL statement using the selected syntax associated with the current or passed connection.</description>


    <prototype>SQL_Statement as C = GenerateNativeSyntax([SQLConnection as [SQL::Connection | C])</prototype>
    <arguments>
        <argument optional="true">
            <name>SQLConnection</name>
            <types>
                <type>SQL::Connection</type>
                <type>C</type>
            </types>
            <description>A connection string or SQL::Connection object with a defined .ConnectionString property.
            </description>
        </argument>
    </arguments>
    <returns>
        <return>
            <name>SQL_Statement</name>
            <types>
                <type>C</type>
            </types>
            <description>
                <p>The native SQL equivalent of a Portable SQL expression.</p>
            </description>
        </return>
    </returns>
    <discussion>
The .GenerateNativeSyntax() method returns the native SQL version of the Portable SQL stored in the SQL::Query.SQLStatement property.
    </discussion>
    <example><![CDATA[
dim qry as SQL::Query
dim conn as SQL::Connection
dim connString as C
connString = "{A5API='Access', FileName='c:\program files\a5v7\mdbfiles\alphasports.mdb'}"
? conn.open(connString)
= .T.
? qry.parse("Select * from Customer WHERE substring(lastname,1,1) = 'a'")
= .T.
? qry.GenerateNativeSyntax(connString)
= "SELECT * FROM CustomerWHERE (Mid(lastname, 1, 1) = 'a')"
]]>    </example>

    <see>
        <ref link="SQL::Query Object">SQL::Query Object</ref>

    </see>

</page>