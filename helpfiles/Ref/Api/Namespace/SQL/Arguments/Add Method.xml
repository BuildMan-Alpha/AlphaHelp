<page api="xb">
    <shortlink>api sql namespace arguments add function</shortlink>
    <topic>SQL::Arguments Add Function</topic>
    <description>Add an argument to the collection or L Add(SQL::Argument Argument)</description>
    <prototype>Result_Flag as L = Add(Name as C [,Value as A [, Usage as SQL::ArgumentUsage [,IsNull as L = .f.]]])
    </prototype>
    <arguments>
        <argument>
            <name>Name</name>
            <type>C</type>
            <description>The unique name of an argument. See the [SQL::Argument class].</description>
        </argument>
        <argument optional="true">
            <name>Value</name>
            <type>A</type>
            <description>Optional. The data may be a simple data type (listed below), a character array, or a numeric array.</description>
            <list bullet="true">
                <item>
                    <name>"Blob"</name>
                </item>
                <item>
                    <name>"Character"</name>
                </item>
                <item>
                    <name>"Date"</name>
                </item>
                <item>
                    <name>"Logical"</name>
                </item>
                <item>
                    <name>"Numeric"</name>
                </item>
                <item>
                    <name>"Short Time"</name>
                </item>
                <item>
                    <name>"Time"</name>
                </item>
            </list>
        </argument>
        <argument optional="true">
            <name>Usage</name>
            <type>SQL::ArgumentUsage</type>
            <description>Defines how the argument should be used. See [SQL::ArgumentUsage Enumerated Type] for more information.</description>
        </argument>
        <argument optional="true">
            <name>IsNull</name>
            <type>L</type>
            <description>Default value is false (.f.). If true (.T.), set this argument to a NULL value. See also [SQL::Arguments SetNull Function].</description>
        </argument>
    </arguments>
    <sections>
        <section>
            <description>The Add() method adds a new argument to a SQL::Arguments object. You can optionally specify the value and usage of the argument. Returns true (.t.) if the operation is successful and false (.f.) if it fails.</description>
        </section>
        <section>
            <title>Example</title>
            <example><![CDATA[dim args as SQL::Arguments
? args.add("city", "Boston")
= .T.

? args.add("state", "MA")
= .T.

? args.ArgumentNumber("state")
= 2]]></example>
        </section>
        <section>
            <title>Setting an Argument to NULL</title>
            <description>This example demonstrates setting the argument to NULL.</description>
            <example><![CDATA[dim args as SQL::Arguments
args.add("nullField", "", SQL::ArgumentUsage::InputArgument, .t.)

? args.find("nullField").isNull
= .T.]]></example>
        </section>
        <section>
            <title>Filtering a SQL Query with Arguments Using Add</title>
            <description>This script prompts for a value, then returns a filtered list of records.</description>
            <figure>
                <title>Results after searching for "Spain".</title>
                <link>images/add1.png</link>
            </figure>
            <note>The *[xb:ui_msg_box]* and *[xb:sql_resultset_preview]* functions are only available in desktop applications.</note>
            <example><![CDATA[dim conn as SQL::Connection
dim sql as C
dim vCity as C
dim args as SQL::Arguments

vCity = ui_get_text("City", "Show Customers in what city?")
sql = "select contactname from customers where city = :city Order By CustomerID"

if .not. conn.open("::Name::AADemo-Northwind")
    ui_msg_box("Error", conn.CallResult.text)
    end
end if

if .not. args.Add("city", vCity)
    end
end if

if .not. conn.execute(sql, args)
    ui_msg_box("Error", conn.CallResult.text)
    end
end if

sql_resultset_preview(conn.resultset)]]></example>
        </section>
        <section>
            <title>Adding an Argument Array</title>
            <description>
                <p>An argument can be an array of values. Array arguments are often used with IN clauses. For example, in the code below an array argument is used to get a list of records with a CustomerID that matches one of the following values: "ALFKI", "BOLID", "FRANK", or "OCEAN". The resulting query is returned as JSON and displayed using *[xb:showvarjson()]*</p>
            </description>
            <example code="xb"><![CDATA[dim sql as c = "SELECT CustomerID, CompanyName FROM Customers WHERE CustomerID IN (:what_customers)"
dim args as SQL::Arguments
dim customers[0] as C
customers.push("ALFKI")
customers.push("BOLID")
customers.push("FRANK")
customers.push("OCEAN")

args.add("what_customers",customers)

dim cn as SQL::Connection
if (cn.open("::Name::AADemo-Northwind")) then
	dim JSON as C
	JSON = cn.toJSON(sql,args)
	showvarjson(JSON)
	cn.close()
end if]]></example>
        </section>
        <section>
            <description>
                <p>Here is the JSON returned by the query:</p>
            </description>
            <example code="json"><![CDATA[[
    {
        "CustomerID": "ALFKI",
        "CompanyName": "Alfreds Futterkiste"
    },
    {
        "CustomerID": "BOLID",
        "CompanyName": "Bólido Comidas preparadas"
    },
    {
        "CustomerID": "FRANK",
        "CompanyName": "Frankenversand"
    },
    {
        "CustomerID": "OCEAN",
        "CompanyName": "Océano Atlántico Ltda."
    }
]]]></example>
        </section>
    </sections>
    <links>
        <link link="sql::argument class">SQL::Argument class</link>
        <link link="sql::argumentusage enumerated type">SQL::ArgumentUsage Enumerated Type</link>
        <link link="sql::arguments setnull function">SQL::Arguments SetNull Function</link>
    </links>
    <see>
        <ref link="api%20argument%20add%20array%20argument%20function">argument_add_array_argument Function</ref>
        <ref link="sql::arguments set function">SQL::Arguments Set Function</ref>
        <ref link="sql::arguments setnull function">SQL::Arguments SetNull Function</ref>
        <ref link="sql::argumentusage enumerated type">SQL::ArgumentUsage Enumerated Type</ref>
    </see>
    <terms>reporting,list,script</terms>
</page>