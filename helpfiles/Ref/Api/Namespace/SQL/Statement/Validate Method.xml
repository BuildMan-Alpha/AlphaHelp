<page api="xb">
      <shortlink>api sql namespace statement object validate function</shortlink>
   <topic parent="SQL::Statement" parentType="class" elementName="Validate Method">SQL::Statement::Validate Method</topic>
      <description>Execute the current statement using the current or passed connection.</description>
   
   <prototype>Result_Flag as L = Validate([SQLConnection as SQL::Connection | SQLConnectionString as C] [UpdateStatistics as L])</prototype>
   <arguments>
   <argument>
         <name>Result_Flag</name>
         <description>TRUE (.T.) if the operation was successful; otherwise FALSE (.F.).
</description>
     </argument>
     <argument>
         <name>SQLConnection</name>
         <description>Optional. A SQL::Connection object created with a DIM statement with a defined .ConnectionString property.
</description>
     </argument>
     
     <argument>
         <name>SQLConnectionString</name>
         <description>Optional. A connection string.
</description>
     </argument>
   </arguments>

   <discussion>
The .Validate() method prepares the query and validates it, but does not execute it. (In some implementations the query is executed with a limit on rows set to 1). The intent is to force the query through a server side parse and report problems.
The method connects to the back-end database using the information in the SQL::Connection::ConnectionString property or in the ConnectString string, then executes the current SQL statement stored in the SQL::Statement.SQLStatement property.
Note: Not every database is thorough about validation.
   </discussion>
   <example><![CDATA[
dim conn as SQL::Connection
dim connString as C
dim stat as SQL::Statement
dim sql_insert as C
connString = "{A5API='Access', FileName='c:\program files\a5v7\mdbfiles\alphasports.mdb'}"
sql_insert = "insert into customer (firstname, lastname, bill_city, bill_postal_code,bill_state_region) values ('George', 'Jones', 'Arlington', '02000', 'VA')"
? conn.open(connString)
= .T.
? stat.parse(sql_insert)
= .T.
? stat.validate(conn)
= .T.
]]></example>
  
   <see>
      <ref link="SQL::Statement Object">SQL::Statement Object</ref>
      <ref>About Validation</ref>
      
   </see>
   <terms>sql,database,function,object,operation,query,reports,server side,validation</terms>
</page>