<page>
	<topic>SQL::Statement Object</topic>
	<description>The SQL::Statement object encapsulates the parsing and properties of a SQL SELECT, INSERT, UPDATE, or DELETE statement. as a result, it's properties will change depending on the last successfully processed SQL statement. Look at the related SQL::Query, SQL::InsertStatement, SQL::UpdateStatement, or SQL::DeleteStatement objects for available properties in each of these cases.</description>
	
	
<sections>
	<section>
		<title>Example</title>
		<description>The following script inserts a new record.</description>
		<example><![CDATA[dim conn as SQL::Connection
dim stat as SQL::Statement
dim qry as SQL::Query
dim rs as SQL::ResultSet
dim cs as SQL::CallResult
dim connString as C
dim sql_insert as C
dim sql_query as C]]></example>
	</section>
	<section>
		
		<description>Next, define the connection string and the SQL INSERT statement. Note the syntax of the command. The fields that will receive data and the corresponding values are in two comma delimited sets.</description>
		<example><![CDATA[connString = "{A5API='Access', FileName='c:\program files\a5v7\mdbfiles\alphasports.mdb'}"sql_insert = "insert into customer (firstname, lastname, bill_city, bill_postal_code, bill_state_region) values ('George', 'Jones', 'Arlington', '02000', 'VA')"
 ]]></example>
	</section>
	<section>
		
		<description>Open the connection and parse the insert command.</description>
		<example><![CDATA[IF .not. conn.open(connString) THEN
    end
END IF
IF .not. stat.parse(sql_insert) THEN
    ui_msg_box("Error", stat.callresult.text)
    end
END IF ]]></example>
	</section>
	
	<section>
		
		<description>Insert the new record into the table.</description>
		<example><![CDATA[stat.execute(conn)
cs = stat.CallResult
ui_msg_box("Call result", cs.Text) ]]></example>
	</section>
	
</sections>	
<properties>
	<property>
		<name>Arguments
</name>
		<type>SQL::Arguments</type>
		<description>Read Only. Arguments for the current query.
</description>
	</property>
	<property>
		<name>CallResult
</name>
		<type>SQL::CallResult</type>
		<description>Read Only. Call results.
</description>
	</property>
	<property>
		<name>ColumnReferences
</name>
		<type>ReferenceList of SQL::Query:: ColumnReference</type>
		<description>Read Only. An array of all column references in the query (including nested occurrences). Behaves the same way as  .SelectTableReferences.
</description>
	</property>
	<property>
		<name>Connection
</name>
		<type>
SQL::Connection
 
 </type>
		<description>Read Write. Current open connection
</description>
	</property>
	<property>
		<name>ErrorColumn
</name>
		<type>N</type>
		<description>Read Only. The column number of the last error reported by the parser.
</description>
	</property>
	<property>
		<name>ErrorText
</name>
		<type>C</type>
		<description>Read Only. The text of the last parser error reported.
</description>
	</property>
	<property>
		<name>
FunctionReferences
 

 </name>
		<type>ReferenceList of SQL::Query:: ValueExpression</type>
		<description>Read Only. 
 
An array of all function calls. Behaves the same way as  .SelectTableReferences.
 </description>
	</property>
	<property>
		<name>ObjectDefinitions
</name>
		<type>C</type>
		<description>
 Read Only. For internal debugging. Returns a string description of the mapping between the ANTLR grammar and the Xbasic objects.</description>
	</property>
	<property>
		<name>ParseTree
</name>
		<type>C</type>
		<description>Read Only. For internal debugging. A string description of the underlying parse tree.
</description>
	</property>
	<property>
		<name>SQLStatement</name>
		<type>C</type>
		<description>Read Write. A variable that can be assigned a syntax string without parsing it. If no value is passed to the ::Parse()method, this value is used.
</description>
	</property>
	<property>
		<name>
TokenTypeName
 
 </name>
		<type>C</type>
		<description>Read Only. For a SQL::Query object this property returns "Query", and so on. If no statement has been parsed, this property returns "Statement".
</description>
	</property>
	<property>
		<name>XML
</name>
		<type>C</type>
		<description>Read Write. Creates XML from the tree or recreates the tree from the XML.
</description>
	</property>
	
	
</properties>
<methods>
	<methodref>
		<name>Execute</name>
		<ref link="SQL::Statement::Execute Function">Execute</ref>
		<description>Accepts an optional SQL::Connection object or connection string and executes the current SELECT statement on that or its current connection.</description>
	</methodref>
	<methodref>
		<name>GenerateNativeSyntax</name>
		<ref link="SQL::Statement::GenerateNativeSyntax Function">GenerateNativeSyntax</ref>
		<description>Accepts an optional SQL::Connection object or connection string (which it promptly forgets) and executes the current SELECT statement on that or its current connection. Returns the string that the ::Execute()or ::Validate()methods would pass to the connection. Note: This string is target syntax specific.</description>
	</methodref>
	<methodref>
		<name>Parse</name>
		<ref link="SQL::Statement::Parse Function">Parse</ref>
		<description>Accepts an optional text string and parses it. If the parse is successful, the elements of the SQL statement will be available immediately as Properties of the object.</description>
	</methodref>
	<methodref>
		<name>Reset</name>
		<ref link="SQL::Statement::Reset Function">Reset</ref>
		<description>Reinitializes the object as if it had just been declared.</description>
	</methodref>
	<methodref>
		<name>Validate</name>
		<ref link="SQL::Statement::Validate Function">Validate</ref>
		<description>Accepts an optional SQL::Connection object or connection string (which it promptly forgets) and validates the current SELECT statement on the connection that is passed or the current connection.</description>
	</methodref>
	
</methods>
<see>
	<ref>SQL Objects</ref>
	<ref>SQL Enumerated Types</ref>
</see>


</page>