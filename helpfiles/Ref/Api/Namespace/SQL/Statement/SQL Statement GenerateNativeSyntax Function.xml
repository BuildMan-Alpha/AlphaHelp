<page api="xb">
    <shortlink>api sql namespace statement object generate native syntax function</shortlink>
   <topic>SQL::Statement::GenerateNativeSyntax Function</topic>
    <description>Generate a native SQL statement using the selected syntax associated with the current or passed connection.</description>

   <prototype>SQL_Statement as C = GenerateNativeSyntax([SQLConnection as SQL::Connection | SQLConnectionString as C])</prototype>
   <arguments>
   <argument>
         <name>SQL_Statement</name>
         <description>The native SQL equivalent of a Portable SQL expression.
</description>
     </argument>
     <argument>
         <name>SQLConnection</name>
         <description>Optional. A SQL::Connection object created with a DIM statement with a defined .ConnectionString property.
</description>
     </argument>
     
     <argument>
         <name>SQLConnection</name>
         <description>Optional. A connection string.
</description>
     </argument>
   </arguments>
     <discussion>
The .GenerateNativeSyntax() method returns the native SQL version of the Portable SQL stored in the SQL::Statement.SQLStatement property.
   </discussion>
   <example><![CDATA[
dim stat as SQL::Statement
dim connString as C
dim sql_delete as C
connString = "{A5API='Access', FileName='c:\program files\a5v7\mdbfiles\alphasports.mdb'}"
sql_delete = "DELETE FROM Customer_copy WHERE substring(lastname,1,1) = 'A'"
conn.open(connString)
stat.parse(sql_delete)
? stat.GenerateNativeSyntax(conn)
= "DELETE FROM Customer_copyWHERE (Mid(lastname, 1, 1) = 'A')"
]]></example>
   
   <see>
      <ref link="SQL::Statement Object">SQL::Statement Object</ref>
    </see>
 <terms>sql,function,native sql,object</terms>
</page>