<page>
   <topic>SQL::Schema::ListTablesWithTypes Function</topic>
      <description><![CDATA[Return a list of tables for the current database suffixed with (<type>).]]></description>

   
   
  <prototypes> <prototype>Table_List as C = ListTablesWithTypes(P Filter)</prototype>
  <prototype>Table_List as C = .ListTablesWithTypes( [ IncludeTables as L [, IncludeViews as L [, IncludeSystemTables as L [, IncludeSynonyms as L [, IncludeAliases as L ]]]]] )</prototype>
  </prototypes>
   <arguments>
   <argument>
         <name>Table_List
</name>
         <description>The retrieved list of tables.
</description>
     </argument>
     <argument>
         <name>SQL::Schema</name>
         <description>

 
A SQL::Schema object.
 </description>
     </argument>
     <argument>
         <name>IncludeTables
</name>
         <description>Optional. Default = .T. (TRUE) = Include tables
</description>
     </argument>
     <argument>
         <name>IncludeViews
</name>
         <description>Optional. Default = .T. (TRUE) = Include views
</description>
     </argument>
     <argument>
         <name>IncludeSystemTables
</name>
         <description>
 
Optional. Default = .T. (TRUE) = Include system tables
 </description>
     </argument>
     <argument>
         <name>IncludeSynonyms
</name>
         <description>Optional. Default = .T. (TRUE) = Include synonyms
</description>
     </argument>
     <argument>
         <name>IncludeAliases
</name>
         <description>Optional. Default = .T. (TRUE) = Include aliases
</description>
     </argument>
     
     
     <argument>
         <name>Filter</name>
         <description>Pointer</description>
     </argument>
   </arguments>
   <discussion>
The ListTablesWithTypes() method returns a list of tables in the cache for the current database suffixed with type. For example a table named Categories is returned as Categories (Table) where a view called Category Summary is returned as Category Summary (View).
   </discussion>
   <example><![CDATA[
dim conn as SQL::Connection
dim sch as SQL::Schema
connString = "{A5API='Access', FileName='c:\program files\a5v8\mdbfiles\alphasports.mdb'}"
if .not. conn.open(connString)
   ui_msg_box("Error", conn.CallResult.text)
   end
end if
if .not. conn.GetSchema(sch) then
   ui_msg_box("Error", conn.CallResult.text)
   conn.close()
   end
end if
ui_msg_box("Tables", sch.ListTablesWithTypes())
conn.close()
]]></example>
   
   <see>
      <ref>SQL::Connection Object</ref>
   </see>
   <terms>sql,schema,aliases,database,defaults,filter,function,list,object,pointer,system</terms>
</page>