<page>
   <topic>SQL::Query::GenerateNativeSyntax Function</topic>
   <syntax>SQL_Statement as C = GenerateNativeSyntax([SQLConnection as SQL::Connection | SQLConnectionString as C])</syntax>
   <arguments>
    <argument>
         <name>SQL_Statement</name>
         <description>The native SQL equivalent of a Portable SQL expression.
</description>
     </argument>
      <argument>
         <name>SQL::Query</name>
         <description>A SQL::Query object created with a DIM statement.
</description>
     </argument>
     
     <argument>
         <name>SQLConnection</name>
         <description>Optional. A SQL::Connection object with a defined .ConnectionString property.
</description>
     </argument>
     
      <argument>
         <name>SQLConnectionString</name>
         <description>Optional. A connection string.
</description>
     </argument>
     
     
     
   </arguments>
   <description>Generate a native SQL statement using the selected syntax associated with the current or passed connection.</description>
   <discussion>
The .GenerateNativeSyntax() method returns the native SQL version of the Portable SQL stored in the SQL::Query.SQLStatement property.
   </discussion>
   <example><![CDATA[
dim qry as SQL::Query
dim conn as SQL::Connection
dim connString as C
connString = "{A5API='Access', FileName='c:\program files\a5v7\mdbfiles\alphasports.mdb'}"
? conn.open(connString)
= .T.
? qry.parse("Select * from Customer WHERE substring(lastname,1,1) = 'a'")
= .T.
? qry.GenerateNativeSyntax(connString)
= "SELECT * FROM CustomerWHERE (Mid(lastname, 1, 1) = 'a')"
]]></example>
   
   <see>
      <ref>SQL::Query Object</ref>
     
   </see>
   
</page>