<page>
   <topic>SQL::Connection::ApplyData Function</topic>
     <description>Apply the query to a table in the currently connected database using the result set provided.</description>
 
   <syntax>Result_Flag as L = ApplyData(SQLStatement as C, ResultSet as SQL::ResultSet [, EventScript as C [,SQL::TableInfo TableInfo [, MapTableInfoUsingColumnIndex = .t. as L]])</syntax>
   <arguments>
   <argument>
         <name>Result_Flag</name>
         <description>TRUE (.T.) if the operation was successful; otherwise FALSE (.F.).
</description>
     </argument>
     <argument>
         <name>SQL::Connection</name>
         <description>A SQL::Connection object.
</description>
     </argument>
     
     
     
     <argument>
         <name>SQLStatement</name>
         <description>An SQL INSERT, DELETE, or UPDATE statement.
</description>
     </argument>
     <argument>
         <name> ResultSet</name>
         <description>A SQL::ResultSet object that contains transactions to apply.
</description>
     </argument>
     <argument>
         <name> EventScript</name>
         <description>Optional. Default = "". An Xbasic Script implementing any of the following functions:
In each case, the Context argument is the connection itself.
</description>
<list>
<item>
<name>UpdateBegin()</name>
</item>

<item>
<name>UpdateProgress()</name>
</item>

<item>
<name>UpdateEnd()</name>
</item>

</list>
     </argument>
     <argument>
         <name>TableInfo</name>
         <description>Optional. A SQL::TableInfo object.
 </description>
     </argument>
     <argument>
         <name> MapTableInfoUsingColumnIndex = .t.</name>
         <description>Logical</description>
     </argument>
   </arguments>
   <discussion>
The ApplyData() method applies inserts, updates, and deletes to a table in the currently connected database. The result set contains the transactions to apply. See SQL Events for a description of the events that can be scripted.
   </discussion>
 
   <sections>
       <section><title>Example</title>
            <description>This script creates a new table and inserts the contents of a SQL::ResultSet into the table.</description>
            <example><![CDATA[
dim conn as SQL::Connection
dim ti as SQL::TableInfo
dim rs as SQL::ResultSet
dim connstring as C
dim tbl as P
dim insert as C
connstring = "{A5API=Access,FileName='C:\Program Files\A5V8\MDBFiles\Alphasports.mdb', UserName='Admin'}"
if .not. conn.Open(connstring) then
    ui_msg_box("Error", conn.CallResult.text)
    end
end if
if .not. SQL_TableInfoOfDBF("c:\program files\a5v8\samples\alphasports\Customer.dbf", ti) then
    ui_msg_box("Error", "Cannot populate SQL::TableInfo")
    end
end if
ti.Name = "AlphaSportsCustomer"
if .not. conn.CreateTable(ti) then
    ui_msg_box("Error", conn.CallResult.text)
    end
end if
insert = conn.GenerateInsertStatement(ti)
tbl = table.open("c:\program files\a5v8\samples\alphasports\Customer.dbf")
rs = conn.ResultSetFromDBF(tbl)
if .not. conn.ApplyData(insert, rs)
    ui_msg_box("Error", conn.CallResult.text)
    end
end if
tbl.close()
conn.close()
]]></example>
       </section>
   </sections>
   <see>
      <ref href="/documentation/index?search=SQL::Connection Object">SQL::Connection Object</ref>
   </see>
 <terms>sql,connection,arguments,contains,database,defaults,delete,events,function,insert,logical,object,operation,query,script,transactions,xbasic</terms>
</page>