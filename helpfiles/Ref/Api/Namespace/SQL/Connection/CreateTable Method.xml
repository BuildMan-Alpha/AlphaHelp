<page api="xb">
    <shortlink>api sql namespace connection class function</shortlink>
    <topic parent="SQL::Connection" parentType="class" elementName="CreateTable Method">SQL::Connection CreateTable Method</topic>
    <description>Create a table in the currently connected database using the TableInfo specification.</description>

    <prototype>Result_Flag as L = CreateTable(TableInfo as SQL::TableInfo)</prototype>
    <arguments>
        <argument>
            <name>TableInfo</name>
            <type>SQL::TableInfo</type>
            <description>A SQL::TableInfo object.</description>
        </argument>
    </arguments>
    <returns>
        <return>
            <name>Result_Flag</name>
            <description>TRUE (.T.) if the operation was successful; otherwise FALSE (.F.).</description>
            <types>
                <type>L</type>
            </types>
        </return>
    </returns>
    <discussion>
The CreateTable() method creates a table in the currently connected database using the TableDef specification.

SQL::Connection::CreateTable (which calls GenerateCreateTableSyntax) can recognize and map geography types. This can be a fairly complicated process as described in Database-specific Geography Tasks V11. Oracle, for example, requires that a spatial index be created to use comparison functions. Some databases require separate code to add geography/geometry columns.

    </discussion>

    <sections>
        <section>
            <title>Example</title>
            <description>Note that a new field must have a name, length, and an Intermediate type.</description>
            <example><![CDATA[
dim ti as SQL::TableInfo
dim conn as SQL::Connection
dim dt as SQL::DataTypeInfo
if .not. conn.open("{A5API=Access,FileName='C:\Program Files\A5V8\MDBFiles\Alphasports.mdb', UserName='Admin'}") then
    ui_msg_box("Error", conn.CallResult.text)
    end
end if
dt.Name = "Name"
dt.Length = 50
dt.IntermediateType = "Character"
ti.name = "NewTable"
if ti.AddColumn(dt) = 0 then
    end
end if
if .not. conn.CreateTable(ti) then
    ui_msg_box("Error", conn.CallResult.text)
end if
conn.close()
]]>            </example>
        </section>
    </sections>
    <see>
        <ref link="SQL::Connection Object">SQL::Connection Object</ref>
    </see>
    <terms>sql,geography,connection,database,field,function,object,operation</terms>
</page>