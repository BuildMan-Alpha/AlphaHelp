<page api="xb">
    <shortlink>api sql namespace connection class set connection string function</shortlink>
    <topic parent="SQL::Connection" parentType="class" elementName="SetConnectionString Method">SQL::Connection SetConnectionString Method</topic>
    <description>Set the connection string with required parameters. The actual values will depend on how you are connecting to your database.</description>
    <prototype>L SetConnectionString(SQLConnectionString as C)</prototype>
    <arguments>
        <argument>
            <name>SQLConnectionString</name>
            <type>C</type>
            <description>A string that contains the parameters required to locate the database, identify the target table, and establish a connection to it. The connect string can be in one of the following formats:</description>
            <list bullet="true">
                <item>
                    <name>Format 1 - {name1='value1',name2='value2'...nameN='valueN'}</name>
                </item>
                <item>
                    <name>Format 2 - name1value1 name2value2 ...nameNvalueN</name>
                </item>
                <item>
                    <name>A named connection string. E.g. "::Name::AADemo-Northwind"</name>
                </item>
            </list>
        </argument>
    </arguments>
    <returns>
        <return>
            <name>Result_Flag</name>
            <types>
                <type>L</type>
            </types>
            <description>TRUE (.T.) if the operation was successful; otherwise FALSE (.F.).</description>
        </return>
    </returns>

    <discussion>
The SetConnectionString() method sets the connection string with required parameters. The actual values will depend on how you are connecting to your database.
    </discussion>


    <sections>
        <section>
            <title>Example</title>
            <description>The connect string can be in one of two formats: Format 1 {name1='value1',name2='value2'...nameN='valueN'}
Example:</description>
            <example><![CDATA[

connectstring = "{UserName='Fred',Password='secret'}"
myconn.SetConnectionString(connectstring)
]]>            </example>
        </section>

        <section>
            <description>Another example using Format 1</description>
            <example><![CDATA[
dim conn as SQL::Connection
dim cs as C
cs = "{A5API=Access,FileName='C:\Program Files\A5V8\MDBFiles\Alphasports.mdb',UserName='Admin'}"
if .not. conn.open(cs) then
    ui_msg_box("Error", conn.CallResult.text)
    end
end if
if .not. conn.SetConnectionString(cs) then
    ui_msg_box("Error", conn.CallResult.text)
end if
conn.close()
]]>            </example>
        </section>
        <section>
            <description><![CDATA[Format 2, name1<tab>value1<crlf> for each entry:
Example:]]></description>
            <example><![CDATA[
connectstring = "UserName" + chr(9) + "Fred" + crlf()
connectstring = connectstring + "Password" + chr(9) + "secret" + crlf()
myconn.SetConnectionString(connectstring)]]>
            </example>
        </section>
        <section>
            <description>Another example using Format 2</description>
            <example><![CDATA[
dim conn as SQL::Connection
dim cs as C
cs = "A5API" + chr(9) + "Access" + crlf()+ "FileName" + chr(9) + "C:\Program Files\A5V8\MDBFiles\Alphasports.mdb" + crlf()+ "UserName" + chr(9) + "Admin"
if .not. conn.open(cs) then
    ui_msg_box("Error", conn.CallResult.text)
    end
end if
if .not. conn.SetConnectionString(cs) then
    ui_msg_box("Error", conn.CallResult.text)
end if
conn.close()
]]>            </example>
        </section>
    </sections>
    <see>
        <ref link="SQL::Connection Object">SQL::Connection Object</ref>
    </see>
    <terms>sql,connection,contains,function,object,string</terms>
</page>