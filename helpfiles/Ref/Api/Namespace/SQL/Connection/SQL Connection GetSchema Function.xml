<page api="xb">
        <shortlink>api sql namespace connection class get schema function</shortlink>
   <topic>SQL::Connection::GetSchema Function</topic>
    <description>Get a schema definition.
</description>
   <prototype>Result_Flag as L = SQL::TableInfo GetSchema(BYREF Schema as SQL::Schema [, TableOwner as C [, IncludeTables as L [, IncludeViews as L [,IncludeLinkedTables as L [, IncludeSystemTables as L [, IncludeSynonyms as L [, IncludeAliases as L]]]]]]])</prototype>
   <arguments>
    <argument>
         <name>Result_Flag</name>
         <description>TRUE (.T.) if the operation was successful; otherwise FALSE (.F.).
</description>
     </argument>
      <argument>
         <name>SQL::Connection</name>
         <description>A SQL::Connection object.
</description>
     </argument>
     
     
     
     <argument>
         <name>BYREF Schema</name>
         <description>A SQL::Schema object created with the DIM statement.
</description>
     </argument>
     <argument>
         <name> TableOwner</name>
         <description>Optional. Default = "". The owner of the database.
</description>
     </argument>
     <argument>
         <name> IncludeTables</name>
         <description>Optional. Default = .T. Whether to include table definitions.
</description>
     </argument>
     <argument>
         <name> IncludeViews</name>
         <description>Optional. Default = .T. Whether to include view definitions.
</description>
     </argument>
     <argument>
         <name>IncludeLinkedTables</name>
         <description>Optional. Default = .T. Whether to include linked table definitions.
</description>
     </argument>
     <argument>
         <name> IncludeSystemTables</name>
         <description>Optional. Default = .T. Whether to include system table definitions.
</description>
     </argument>
     <argument>
         <name> IncludeSynonyms</name>
         <description>Optional. Default = .T. Whether to include synonym definitions.
</description>
     </argument>
     <argument>
         <name> IncludeAliases</name>
         <description>Optional. Default = .T. Whether to include alias definitions.
</description>
     </argument>
   </arguments>
  
   <discussion>
The GetSchema() method returns a collection of the tables requested for the current database and optionally for those owned by a specific user.
   </discussion>
   <example><![CDATA[
dim conn as SQL::Connection
dim sch as SQL::Schema
dim connString as C
connString = "{A5API='Access', FileName='c:\program files\a5v8\mdbfiles\alphasports.mdb'}"
if .not. conn.open(connString)
    ui_msg_box("Error", conn.CallResult.text)
    end
end if
if .not. conn.GetSchema(sch)
    ui_msg_box("Error", conn.CallResult.text)
    end
end if
file.from_string("c:\schema.txt", sch.xml)
conn.close()
]]></example>
   
   <see>
      <ref link="SQL::Connection Object">SQL::Connection Object</ref>
   </see>
  <terms>sql,connection,collection,database,defaults,function,object,operation,system</terms>
</page>