<page api="xb" build="0">
    <shortlink>sql connection tocsvfile method</shortlink>
    <topic parent="SQL::Connection" parentType="class" elementName="ToCSVFile Method">SQL::Connection ToCSVFile Method</topic>
    <description>
        <p>Fetch data using a SQL query and save the data to file as a CSV formatted string.</p>
    </description>
    <prototypes>
        <prototype>dim result as C = ToCSVFile(TargetFile as C, SQLStatement as C [, Arguments as SQL::Arguments] [, IncludeHeaderRow as L = .f. [, RowsToCopy as N = -1[, StartRow as N = -1 [, UpperCaseNames as L = .f. [, DateTimeFormat  as C = "" [, DateFormat  as C = "" [, TextToSubstituteForBinary as C = "&lt;Binary Data&gt;"]]]]]]]])</prototype>
    </prototypes>
    <arguments>
        <argument>
            <name>TargetFile</name>
            <types>
                <type>C</type>
            </types>
            <description>The name of the file to store the data, including the file path.</description>
        </argument>
        <argument>
            <name>SQLStatement</name>
            <type>C</type>
            <description>A SQL SELECT statement.</description>
        </argument>
        <argument optional="true">
            <name>Arguments</name>
            <type>SQL::Arguments</type>
            <description>Default = *[xb:null_value()]*. A SQL::Arguments object. One or more arguments to be resolved when the SELECT statement is executed.</description>
        </argument>
        <argument optional="true">
            <name>IncludeHeaderRow</name>
            <type>L</type>
            <description>
                <p>Default = *[xb:.f.]*. If true, the first row in the result will be the column names.</p>
            </description>
        </argument>
        <argument optional="true">
            <name>RowsToCopy</name>
            <type>N</type>
            <description>
                <p>Default = *[xb:-1]* (copy all rows). The number of rows to copy.</p>
            </description>
        </argument>
        <argument optional="true">
            <name>StartRow</name>
            <type>N</type>
            <description>
                <p>Default = *[xb:-1]* (start with next row in the result set). The starting row.</p>
            </description>
        </argument>
        <argument optional="true">
            <name>UpperCaseNames</name>
            <type>L</type>
            <description>
                <p>Default = *[xb:.f.]*. If true and the header row is included, the header row column names will be converted to uppercase.</p>
            </description>
        </argument>
        <argument optional="true">
            <name>DateTimeFormat</name>
            <type>C</type>
            <description>
                <p>Default = *[xb:""]*. The date time format used to format date time fields in the CSV file. See [Date and Time Format Elements] for more information about date time formats.</p>
            </description>
        </argument>
        <argument optional="true">
            <name>DateFormat</name>
            <type>C</type>
            <description>
                <p>Default = *[xb:""]*. The date format used to format date fields in the CSV file. See [Date and Time Format Elements] for more information about date formats.</p>
            </description>
        </argument>
        <argument optional="true">
            <name>TextToSubstituteForBinary</name>
            <type>C</type>
            <description>
                <p>Default = *[xb:"&lt;Binary Data&gt;"]*. A text string used in place of binary data in the CSV file.</p>
            </description>
        </argument>
    </arguments>
    <returns>
        <return>
            <name>result</name>
            <types>
                <type>L</type>
            </types>
            <description>Returns *[xb:.T.]* if the data was successfully saved to a CSV file. If result is *[xb:.F.]*, the file was not created. Check the result of SQL::ResultSet's callResult object for more info about the error.</description>
        </return>
    </returns>
    <example code="xb"><![CDATA[dim cn as SQL::Connection
cn.open("::Name::AADemo-Northwind")

dim filename as c = "C:\Users\someuser\Documents\orders.csv"
dim sql as c = "select FIRST 5 * from orders"

? cn.toCSVFile(filename,sql)
= .T.]]></example>
    <links>
        <link link="api%20date%20and%20time%20format%20elements">Date and Time Format Elements</link>
    </links>
</page>