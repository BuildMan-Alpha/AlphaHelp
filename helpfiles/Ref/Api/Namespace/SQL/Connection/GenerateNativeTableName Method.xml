<page api="xb">
    <shortlink>api sql namespace connection class generate native table name function</shortlink>
    <topic parent="SQL::Connection" parentType="class" elementName="GenerateNativeTableName Method">SQL::Connection GenerateNativeTableName Method</topic>
    <description>Generate a formatted table name suitable for a SQL query in using the current syntax.</description>
    <prototype>Table_Name as C = GenerateNativeTableName as C (TypeInfo as SQL::TableInfo)</prototype>
    <arguments>
        <argument>
            <name>TypeInfo</name>
            <type>SQL::TableInfo</type>
            <description>SQL::TableInfo</description>
        </argument>
    </arguments>
    <returns>
        <return>
            <name>Table_Name</name>
            <types>
                <type>C</type>
            </types>
            <description>
                <p>Formatted table name.</p>
            </description>
        </return>
    </returns>
    <discussion>
The GenerateNativeTableName method generates a formatted table name suitable for a SQL query in using the current syntax.
    </discussion>
    <example><![CDATA[
dim conn as SQL::Connection
dim ti as SQL::TableInfo
dim connString as C
dim select_exp as C
connString = "{A5API='Access', FileName='c:\program files\a5v8\mdbfiles\alphasports.mdb'}"
select_exp = "select Lastname from customer where bill_state_region = 'ma'"
if .not. conn.open(connString)
    ui_msg_box("Error", conn.CallResult.text)
    end
end if
if .not. conn.GetTableInfo(ti, "customer")
    ui_msg_box("Error", conn.CallResult.text)
    end
end if
ui_msg_box("Native Type String", conn.GenerateNativeTableName(ti))
conn.close()
]]>    </example>

    <see>
        <ref href="SQL::Connection Object">SQL::Connection Object</ref>
    </see>
    <terms>sql,connection,function,object,query,sql query</terms>
</page>