<page api="xb">
    <shortlink>api sql namespace connection class generate insert statement function</shortlink>
    <topic parent="SQL::Connection" parentType="class" elementName="GenerateInsertStatement Method">SQL::Connection GenerateInsertStatement Method</topic>
    <description>Generate a SQL Insert statement for the table passed in.
    </description>
    <prototype>Statement as C = GenerateInsertStatement as C (TableInfo as SQL::TableInfo [, ReplicateIdentity = .f. as L [, UseBatchQualifiers = .t. as L [,SourceTableInfo as SQL::TableInfo]]])</prototype>
    <arguments>
        <argument>
            <name>TableInfo</name>
            <type>SQL::TableInfo</type>
            <description>SQL::TableInfo</description>
        </argument>
        <argument optional="true">
            <name> ReplicateIdentity</name>
            <type>L</type>
            <description>Default = .F. If ReplicateIdentity is .T., the statement will include any identity column. When the insert statement is executed, identity values must be available.</description>
        </argument>
        <argument optional="true">
            <name> UseBatchQualifiers</name>
            <type>L</type>
            <description>Default = .T. Changes the syntax of SQL INSERT, DELETE, and UPDATE statements.
            </description>
        </argument>
        <argument optional="true">
            <name>SourceTableInfo</name>
            <type>SQL::TableInfo</type>
            <description>SQL::TableInfo</description>
        </argument>
    </arguments>
    <returns>
        <return>
            <name>Statement</name>
            <types>
                <type>C</type>
            </types>
            <description>
                <p>A SQL INSERT statement.</p>
            </description>
        </return>
    </returns>
    <discussion>
The GenerateInsertStatement() method generates a SQL INSERT statement for the table passed in.
When UseBatchQualifiers is explicitly set to .T., the appropriate column values are generated in the format :old. or :new. (All :old. for DELETE or WHERE clauses, all :new. for INSERT and a mixture for UPDATE statements).
Note: If UseBatchQualifiers is true then field values will be generated as arguments prefaced with 'new.' 
so a result set can be the source of the data.
    </discussion>

    <sections>
        <section>
            <title>Example</title>
            <description>This statement is used when the values for insertion should come from the new data values in a result set.</description>
            <example><![CDATA[
INSERT INTO tablename (column1, column2) VALUES (:new.value1, :new.value2)
]]>            </example>
        </section>

        <section>
            <description>If UseBatchQualifiers is set to .F., these function will generate the value entries as simple arguments (with one exception) so you can build an arguments collection up and execute the statement.</description>
            <example><![CDATA[
INSERT INTO tablename (column1, column2) VALUES (:column1, :column2)
]]>            </example>
        </section>

        <section>
            <description>This script creates a new table and inserts the contents of a SQL::ResultSet into the table.</description>
            <example><![CDATA[
dim conn as SQL::Connection
dim ti as SQL::TableInfo
dim rs as SQL::ResultSet
dim connstring as C
dim tbl as P
dim insert as C
connstring = "{A5API=Access, FileName='C:\Program Files\A5V8\MDBFiles\Alphasports.mdb', UserName='Admin'}"
ti.Name = "AlphaSportsCustomerX"
if .not. conn.Open(connstring) then
    ui_msg_box("Error", conn.CallResult.text)
    end
end if
SQL_TableInfoOfDBF("c:\program files\a5v8\samples\alphasports\Customer.dbf", ti)
if .not. conn.CreateTable(ti) then
    ui_msg_box("Error", conn.CallResult.text)
    end
end if
insert = conn.GenerateInsertStatement(ti)
tbl = table.open("c:\program files\a5v8\samples\alphasports\Customer.dbf")
rs = conn.ResultSetFromDBF(tbl)
if .not. conn.ApplyData(insert, rs) then
    ui_msg_box("Error", conn.CallResult.text)
end if
tbl.close()
conn.close()
]]>            </example>
        </section>





    </sections>
    <see>
        <ref link="SQL::Connection Object">SQL::Connection Object</ref>
    </see>
    <terms>sql,connection,arguments,collection,column,defaults,delete,field,function,insert,object,script</terms>
</page>