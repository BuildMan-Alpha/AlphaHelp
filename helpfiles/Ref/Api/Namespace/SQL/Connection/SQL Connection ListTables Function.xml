<page api="xb">
   <shortlink>api sql namespace connection class list tables function</shortlink>
   <topic>SQL::Connection::ListTables Function</topic>
     <description>Return a list of tables for the current database.</description>
   <prototypes><prototype><![CDATA[Table_List as C = <SQL::Connection>.ListTables([TableFilter as SQL::TableFilter])]]></prototype>
   <prototype><![CDATA[Table_List as C = <SQL::Connection>.ListTables( [ IncludeTables as L [, IncludeViews as L [, IncludeSystemTables as L [, IncludeSynonyms as L [, IncludeAliases as L ]]]]] )]]></prototype>
   </prototypes>
   <arguments>
   
   <argument>
         <name>Table_List</name>
         <description>The retrieved list of tables.
</description>
     </argument>
     
     <argument>
         <name>
<![CDATA[<SQL::Connection>]]></name>
         <description>A SQL::Connection object.
</description>
     </argument>
     
     <argument>
         <name>TableFilter</name>
         <description>SQL::TableFilter
</description>
     </argument>
     
     
     <argument>
         <name>IncludeTables
</name>
         <description>Optional. Default = .T. (TRUE) = Include tables
</description>
     </argument>
     
     <argument>
         <name>IncludeViews
</name>
         <description>Optional. Default = .F. (FALSE) = Include views
</description>
     </argument>
     
     <argument>
         <name>IncludeSystemTables
</name>
         <description>Optional. Default = .F. (FALSE) = Include system tables
</description>
     </argument>
     
       <argument>
         <name>IncludeSynonyms
</name>
         <description>Optional. Default = .F. (FALSE) = Include synonyms
</description>
     </argument>
     
       <argument>
         <name>IncludeAliases
</name>
         <description>Optional. Default = .F. (FALSE) = Include aliases
</description>
     </argument>
   </arguments>
 <sections><section>
  <description>The ListTables() method returns a list of tables for the current database.</description>
  <note>The overload below is obsolete.  Use a TableFilter argument instead. See [About ListTables and ListTablesWithTypes] for more information.</note>
 </section> 
 <section>
     <example><![CDATA[C ListTables( [IncludeTables as L [, IncludeViews as L [, IncludeLinkedTables as L [, IncludeSystemTables as L [, IncludeSynonyms as L [, IncludeAliases as L]]]]]])]]></example>
  </section>
   <section>
   <title>Example</title>
   <example><![CDATA[
dim conn as SQL::Connection
dim connString as C
connString = "{A5API='Access', FileName='c:\program files\a5v8\mdbfiles\alphasports.mdb'}"
if .not. conn.open(connString)
    ui_msg_box("Error", conn.CallResult.text)
    end
end if
ui_msg_box("Tables", conn.ListTables(.T., .T., .T., .T., .T.))
conn.close()
]]></example>
</section>
       <section>
            <description>Example Usage:</description>
            <example><![CDATA[
dim Filter as SQL::TableFilter
	Filter.IncludeViews = .t.
	Connection.ListTables(Filter)
]]></example>
       </section>
   </sections>
   <links>
        <link href="About ListTables and ListTablesWithTypes.xml">About ListTables and ListTablesWithTypes</link>
   </links>
   <see>
      <ref link="SQL::Connection Object">SQL::Connection Object</ref>
      <ref>AlphaDAO - ListTables and ListTablesWithTypes Methods V11</ref>
   </see>
<terms>sql,connection,aliases,arguments,defaults,function,list,object,system</terms>
</page>