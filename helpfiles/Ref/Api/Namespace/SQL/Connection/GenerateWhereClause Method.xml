<page api="xb">
    <shortlink>api sql namespace connection class generate where clause function</shortlink>
    <topic parent="SQL::Connection" parentType="class" elementName="GenerateWhereClause Method">SQL::Connection GenerateWhereClause Method</topic>
    <description>Generate a SQL WHERE clause for a table, based on the update criteria specified.</description>
    <prototype>Select_Clause as C = GenerateWhereClause as C (TableInfo as SQL::TableInfo, Criteria as SQL::UpdateWhereCriteria [, UseBatchQualifiers = .t. as L [, UseOldNewPrefix = .f. as L ][, SourceTableInfo as SQL::TableInfo]])</prototype>
    <arguments>
        <argument>
            <name>TableInfo</name>
            <type>SQL::TableInfo</type>
            <description>A SQL::TableInfo object for the table created with the DIM statement.
            </description>
        </argument>
        <argument>
            <name>Criteria</name>
            <type>SQL::UpdateWhereCriteria</type>
            <description>A SQL::UpdateWhereCriteria object for the table created with the DIM statement.
            </description>
        </argument>
        <argument optional="true">
            <name>UseBatchQualifiers</name>
            <type>L</type>
            <description>Default = .T. Changes the syntax of SQL INSERT, DELETE, and UPDATE statements.
            </description>
        </argument>
        <argument optional="true">
            <name>UseOldNewPrefix</name>
            <type>L</type>
            <description>Default = .F.</description>
        </argument>
        <argument optional="true">
            <name>SourceTableInfo</name>
            <type>SQL::TableInfo</type>
            <description>SQL::TableInfo</description>
        </argument>
    </arguments>
    <returns>
        <return>
            <name>Select_Clause</name>
            <types>
                <type>C</type>
            </types>
            <description>
                <p>A SQL WHERE clause.</p>
            </description>
        </return>
    </returns>
    <sections>
        <section>
            <note>If UseBatchQualifiers is true then fields will be prefaced with ':old.' so a result set can be the source of the data.</note>
        </section>

        <section>
            <description>
                <p>The GenerateWhereClause() method generates a SQL WHERE clause based on the value of  (see the values for the type SQL::UpdateWhereCriteria ) that can be attached to an update statement. The WHERE clause will uniquely identify a row to be updated based on the primary key, the primary key and all updatable columns or all columns that are valid for a where clause (for example IMAGE types can not be used in a where clause when using the SQLServer database).</p>
                <p>When UseBatchQualifiers is explicitly set to .T., the appropriate column values are generated in the format :old. or :new. (All :old. for DELETE or WHERE clauses, All :new. for INSERT and a mixture for UPDATE statements).</p>
            </description>
        </section>
        <section>
            <title>Example</title>
            <example><![CDATA[
INSERT INTO tablename (column1, column2) VALUES (:new.value1, :new.value2)
DELETE FROM tablename WHERE column1 = :old.value1
]]>            </example>
        </section>

        <section>
            <description>If UseBatchQualifiers is set to .F., these function will generate the value entries as simple arguments (with one exception) so you can build an arguments collection up and execute the statement.</description>
            <example><![CDATA[
INSERT INTO tablename (column1, column2) VALUES (:value1, :value2)
]]>            </example>
        </section>

        <section>
            <description>The exception is that UPDATE statements need to differentiate between new and old values (note the prefix of "new__").</description>
            <example><![CDATA[
UPDATE tablename SET column1 = :new__value1 WHERE column2 = :value2
]]>            </example>
        </section>


    </sections>
    <see>
        <ref link="SQL::Connection Object">SQL::Connection Object</ref>
    </see>
    <terms>sql,connection,arguments,collection,column,defaults,delete,field,function,image,images,insert,logical,object,primary key</terms>
</page>