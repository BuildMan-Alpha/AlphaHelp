<page api="xb">
    <shortlink>api sql namespace connection class execute function</shortlink>
    <topic>SQL::Connection::Execute Function</topic>
    <description>Execute a SQL statement on the connection.</description>
    <prototype>Result_Flag as L = Execute(SQLStatement as C [, Arguments as SQL::Arguments [, EventScript as C [, ReferenceTableInfo as SQL::TableInfo [, GetRowCount as L]]]])</prototype>
    <arguments>
        <argument>
            <name>SQLStatement</name>
            <type>C</type>
            <description>A SQL SELECT statement.</description>
        </argument>
        <argument optional="true">
            <name>Arguments</name>
            <type>SQL::Arguments</type>
            <description>Default = null_value(). A SQL::Arguments object. One or more arguments to be resolved when the SELECT statement is executed.</description>
        </argument>
        <argument optional="true">
            <name> EventScript</name>
            <type>C</type>
            <description>Default = "". One or more event scripts. See [SQL Events].</description>
        </argument>
        <argument optional="true">
            <name> ReferenceTableInfo</name>
            <type>SQL::TableInfo</type>
            <description>Default = null_value(). An optional SQL::TableInfo object.</description>
        </argument>
        <argument optional="true">
            <name> GetRowCount</name>
            <type>L</type>
            <description>If .t. (true), gets the row count for the SQL query.</description>
        </argument>
    </arguments>
    <returns>
        <return>
            <name>Result_Flag</name>
            <types>
                <type>L</type>
            </types>
            <description>TRUE (.T.) if the operation was successful; otherwise FALSE (.F.).</description>
        </return>
    </returns>
    <sections>
        <section>
            <note>To execute more than one command in a single call, separate each query with a single line containing only '\' at the beginning.</note>
        </section>
        <section>
            <description>The *[xb:execute()]* method executes a query on the connection using SQL. This query can be any valid syntax accepted by the database to which you are connected.</description>
        </section>
        <section>
            <title>Example</title>
            <description>This script prompts for a value, then returns a filtered list of records.</description>
            <example>
                <![CDATA[
dim conn as SQL::Connection
dim sql as C
dim vCity as C
dim args as SQL::Arguments
vCity = ui_get_text("City", "Show Companies in what city?")
sql = "select lastname, firstname from customer where bill_city = :city Order By Company"
if .not. conn.open("{A5API=Access, FileName='C:\Program Files\a5v8\MDBFiles\Alphasports.mdb', UserName='Admin'}")
    ui_msg_box("Error", conn.CallResult.text)
    end
end if
if .not. args.Add("city", vCity)
    end
end if
if .not. conn.execute(sql, args)
    ui_msg_box("Error", conn.CallResult.text)
    end
end if
sql_resultset_preview(conn.resultset)
conn.close()
]]>
            </example>
        </section>
        <section build="4958">
            <title>Update and Delete Operations</title>
            <description>
                <p>When you execute a SQL UPDATE or DELETE operation, if the WHERE clause does not find any records to operate on, the *[xb:SQL::Connection.execute()]* method returns .F. by default.</p>
                <p>In some cases, it may be desirable for the *[xb:SQL::Connection.execute()]* method to return .T. and treat the "no records found" condition as a warning and not an error. The *[xb:SQL::Connection.callResult.rowsAffected]* property can be checked to see if any work was actually done.</p>
                <p>To change the default behavior so that the "no records found" condition is a warning, you can either 1) manually update the connection string to add this property to the connection string:</p>
            </description>
            <example code="xb"><![CDATA[A5ReportNotFoundAsWarning=Y]]></example>
            <important>
                <p>This property is not exposed in the connection string builder.</p>
            </important>
        </section>
        <section>
            <description>
                <p>or 2) set a property on the connection object. For example:</p>
            </description>
            <example code="xb"><![CDATA[dim cn as SQL::Connection
cn.ReportNotFoundAsWarning = .t.]]></example>
        </section>
    </sections>
    <links>
        <link link="api sql events">SQL Events</link>
    </links>
    <see>
        <ref link="SQL::Connection Object">SQL::Connection Object</ref>
    </see>
    <terms>sql,connection,arguments,database,function,list,logical,object,operation,query,script</terms>
</page>