<page api="xb">
    <shortlink>api sql namespace connection class list tables with types function</shortlink>
    <topic parent="SQL::Connection" parentType="class" elementName="ListTablesWithTypes Method">SQL::Connection ListTablesWithTypes Method</topic>
    <description>Return a list of tables for the current database suffixed with (&lt;type&gt;).</description>
    <prototypes>
        <prototype>Table_List as C = ListTablesWithTypes([TableFilter as SQL::TableFilter])</prototype>
        <prototype>Table_List as C = ListTablesWithTypes( [ IncludeTables as L [, IncludeViews as L [, IncludeSystemTables as L [, IncludeSynonyms as L [, IncludeAliases as L ]]]]])</prototype>
    </prototypes>
    <arguments>
        <argument optional="true">
            <name>TableFilter</name>
            <type>SQL::TableFilter</type>
            <description>SQL::TableFilter</description>
        </argument>
        <argument optional="true">
            <name>IncludeTables
            </name>
            <type>L</type>
            <description>Optional. Default = .T. (TRUE) = Include tables
            </description>
        </argument>
        <argument optional="true">
            <name>IncludeViews
            </name>
            <type>L</type>
            <description>Optional. Default = .F. (FALSE) = Include views
            </description>
        </argument>
        <argument optional="true">
            <name>IncludeSystemTables
            </name>
            <type>L</type>
            <description>Optional. Default = .F. (FALSE) = Include system tables
            </description>
        </argument>
        <argument optional="true">
            <name>IncludeSynonyms</name>
            <type>L</type>
            <description>Optional. Default = .F. (FALSE) = Include synonyms
            </description>
        </argument>
        <argument optional="true">
            <name>IncludeAliases
            </name>
            <type>C</type>
            <description>Optional. Default = .F. (FALSE) = Include aliases
            </description>
        </argument>
    </arguments>
    <returns>
        <return>
            <name>Table_List
            </name>
            <description>The retrieved list of tables.
            </description>
            <types>
                <type>C</type>
            </types>
        </return>
    </returns>
    <discussion>The ListTablesWithTypes() method returns a list of tables for the current database suffixed with type.</discussion>
    <sections>
        <section>
            <example><![CDATA[dim cn as sql::connection
?cn.open("::Name::SQLServerNorthwind")
dim Filter as SQL::TableFilter
Filter.IncludeViews = .t.
Filter.IncludeSystemTables = .t.
 
?cn.listtableswithtypes(Filter)]]></example>
        </section>
        <section>
            <description>The next example uses the old, obsolete method of passing in options. You should prefer the method above that uses a SQL::TableFilter object specify the types of tables to list. See [About ListTables and ListTablesWithTypes] for more information.</description>
            <example><![CDATA[
dim conn as SQL::Connection
dim connString as C
connString = "{A5API='Access', FileName='c:\program files\a5v8\mdbfiles\alphasports.mdb'}"
if .not. conn.open(connString)
    ui_msg_box("Error", conn.CallResult.text)
    end
end if

ui_msg_box("Tables and Types", conn.ListTablesWithTypes(.t.,.t.,.t.,.t.,.t.))
conn.close()
]]>            </example>
        </section>
    </sections>
    <links>
        <link href="About ListTables and ListTablesWithTypes.xml">About ListTables and ListTablesWithTypes</link>
    </links>
    <see>
        <ref link="SQL::Connection Object">SQL::Connection Object</ref>
        <ref>AlphaDAO - ListTables and ListTablesWithTypes Methods</ref>
    </see>
    <terms>sql,connection,aliases,arguments,database,defaults,function,list,object,system</terms>
</page>