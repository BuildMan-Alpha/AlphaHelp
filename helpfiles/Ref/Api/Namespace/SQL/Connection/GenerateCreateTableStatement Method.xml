<page api="xb">
    <shortlink>api sql namespace connection class generate create table statement function</shortlink>
    <topic parent="SQL::Connection" parentType="class" elementName="GenerateCreateTableStatement Method">SQL::Connection GenerateCreateTableStatement Method</topic>
    <description>Generate a SQL CREATE TABLE statement for the table passed in.</description>
    <prototype>Statement as C = GenerateCreateTableStatement as C (TableInfo as SQL::TableInfo)</prototype>
    <arguments>
        <argument>
            <name>TableInfo</name>
            <type>SQL::TableInfo</type>
            <description>A SQL::TableInfo object.
            </description>
        </argument>
    </arguments>
    <returns>
        <return>
            <name>Statement</name>
            <types>
                <type>C</type>
            </types>
            <description>
                <p>A SQL CREATE TABLE statement.</p>
            </description>
        </return>
    </returns>
    <discussion>
The GenerateCreateTableStatement() method generates a SQL CREATE TABLE statement for the table defined by .
    </discussion>
    <example><![CDATA[
dim conn as SQL::Connection
dim ti as SQL::TableInfo
dim statement as C
if .not. sql_TableInfoOfDBF("c:\program files\a5v8\samples\alphasports\product.dbf", ti)
    ui_msg_box("Error", "Could not create SQL::TableInfo")
    end
end if
if .not. conn.open("{A5API=Access, FileName='C:\Databases\Northwind\northwind.mdb', UserName='Admin'}") then
    ui_msg_box("Error", conn.CallResult.text)
    end
end if
statement = conn.GenerateCreateTableStatement(ti)
ui_msg_box("Create Table Statement", statement)
]]>    </example>

    <see>
        <ref link="SQL::Connection Object">SQL::Connection Object</ref>
    </see>
    <terms>sql,connection,create table,function,object</terms>
</page>