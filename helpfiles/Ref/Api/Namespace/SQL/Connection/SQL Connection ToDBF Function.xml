<page api="xb">
     <shortlink>api sql namespace connection class todbf function</shortlink>
   <topic>SQL::Connection::ToDBF Function</topic>
     <description>Fetch data to a local .DBF table using a SQL query</description>
 
   <syntax>Result_Flag as L = ToDBF(SQLStatement as C, [Arguments as SQL::Arguments, ] FileName as C [, Append = .t. as L [, EventScript =  as C [, MapByPosition = .f. as L [, LocalTableDefinition as SQL::TableInfo]]]])</syntax>
   <arguments>
   <argument>
         <name>Result_Flag</name>
         <description>TRUE (.T.) if the operation was successful; otherwise FALSE (.F.).
</description>
     </argument>
     <argument>
         <name>SQL::Connection</name>
         <description>A SQL::Connection object.
</description>
     </argument>
     
     
     
     
     <argument>
         <name>SQLStatement</name>
         <description>A SQL SELECT statement.
</description>
     </argument>
     <argument>
         <name> Arguments</name>
         <description>Optional. A SQL::Arguments object. One or more arguments to be resolved when the SELECT statement is executed.
</description>
     </argument>
     <argument>
         <name>  FileName</name>
         <description>The path and name of the Alpha Anywhere .DBF table to be created.
</description>
     </argument>
     <argument>
         <name> Append = .t.</name>
         <description>Optional. Logical</description>
         <list>
<item>
<name>.T. = If the file exists, AlphaDAO will add or replace records.</name>
</item>

<item>
<name>.F. = AlphaDAO will overwrite an existing file.</name>
</item>

</list>
         
         
     </argument>
     <argument>
         <name> EventScript = </name>
         <description>Optional. Default = "". EventScript is an Xbasic Script implementing any of the following functions. In each case, the Context argument is the connection itself.
</description>
<list>
<item>
<name>UpdateBegin()</name>
</item>

<item>
<name>UpdateProgress()</name>
</item>

<item>
<name>UpdateEnd()</name>
</item>

</list>


     </argument>
     <argument>
         <name> MapByPosition = .f.</name>
         <description>Optional. Default = .F. If the query has named columns differently than in an existing table, you will want to map by position.</description>
     </argument>
     <list>
     <item>
     <name>.T. = Columns will be mapped by position.</name>
     </item>
      <item>
     <name>.F. = Columns will be mapped by name.</name>
     </item>
     
     </list>
     
     <argument>
         <name> LocalTableDefinition</name>
         <description>Optional. A SQL::TableInfo object. The definition for the new table will be taken from the result set unless an (optional) SQL::TableInfo object is passed in. In this case, overrides will be honored. The columns in TableInfo must match the columns in the result set by type, but need not match by length, precision, or name (if MapByPosition is true).
</description>
     </argument>
   </arguments>
   <discussion>
The ToDBF() method fetches rows to a new or existing .DBF table using a SQL query. The function supports options for specifying a unique key to update local table against. If ReturnRow is passed, the rows are returned into this variable.
   </discussion>
   <example><![CDATA[
dim conn as SQL::Connection
dim sql as C
dim vCity as C
dim args as SQL::Arguments
dim cs as C
dim rs as SQL::ResultSet
cs = "{A5API=Access,FileName='C:\Program Files\a5v8\MDBFiles\Alphasports.mdb', UserName='Admin'}"
vCity = ui_get_text("City", "Show Companies in what city?")
sql = "select lastname, firstname from customer where bill_city = :city Order By Company"
if .not. conn.open(cs)
    ui_msg_box("Error", conn.CallResult.text)
    end
end if
if .not. args.Set("city", vCity)
    conn.close()
    end
end if
if .not. conn.execute(sql, args)
    ui_msg_box("Error", conn.CallResult.text)
    conn.close()
    end
end if
rs = conn.ResultSet
if .not. rs.ToDBF("c:\program files\a5v8\samples\alphasports\newtable2.dbf", "", 3, 1 )
    ui_msg_box("Error", conn.CallResult.text)
end if
conn.close()
]]></example>
  
   <see>
      <ref link="SQL::Connection Object">SQL::Connection Object</ref>
   </see>
<terms>sql,connection,arguments,column,defaults,file,filename,function,logical,map,object,operation,query,script,sql query,Xbasic</terms>
</page>