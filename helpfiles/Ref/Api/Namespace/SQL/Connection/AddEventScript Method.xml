<page api="xb">
    <shortlink>api sql namespace connection class add event script function</shortlink>
    <topic parent="SQL::Connection" parentType="class" elementName="AddEventScript Method">SQL::Connection AddEventScript Method</topic>
    <description>Add a connection event script with functions to handle one or more events.
    </description>
    <prototype>Result_Flag as L = AddEventScript(ScriptSource as C [, Name as C])</prototype>
    <arguments>
        <argument>
            <name>Result_Flag</name>
            <description>TRUE (.T.) if the operation was successful; otherwise FALSE (.F.).</description>
        </argument>
        <argument>
            <name>SQL::Connection</name>
            <description>A SQL::Connection object.</description>
        </argument>
        <argument>
            <name>ScriptSource</name>
            <description>Optional. Default = "". An Xbasic Script implementing any of the following functions. In each case, the Context argument is the connection itself.</description>
            <list>
                <item>
                    <name>UpdateBegin()</name>
                </item>
                <item>
                    <name>UpdateProgress()</name>
                </item>
                <item>
                    <name>UpdateEnd()</name>
                </item>
            </list>
        </argument>
        <argument>
            <name> Name</name>
            <description>The name of the script.</description>
        </argument>
    </arguments>
    <discussion>
        <p>The AddEventScript() method adds an additional event script (see SQL Events ) to the connection. You can have more than one event script on a connection. The scripts are invoked in order from the most recently added to the least recently added. Scripts can be given a name (allowing you to selectively delete them by name).</p>
        <p>Add a connection event script with functions to handle one or more of the following events:</p>
        <p>
            <list>
                <item>
                    <name>UpdateBegin(Connection as SQL::Connection, RowsExpected as N, BYREF ProgressInterval as N, Cancel BYREF as L)</name>
                </item>
                <item>
                    <name>UpdateProgress(Connection as SQL::Connection, RowsUpdated as N, RowsExpected as N, Cancel BYREF as L)</name>
                </item>
                <item>
                    <name>UpdateEnd(Connection as SQL::Connection, RowsUpdated as N)</name>
                </item>
            </list>
        </p>
    </discussion>
    <sections>
        <section>
            <title>Example</title>
            <description>
                <p>The calling script replaces the ROWCOUNT placeholder in the event script with a numerical value before submitting it.</p>
                <p>The event script is a series of Xbasic commands presented as a CR-LF delimited list.</p>
            </description>
            <example code="xb"><![CDATA[
EventScriptTemplate = <<%code% '======================================================
FUNCTION UpdateBegin(Context as P, RowsExpected as N, BYREF ProgressInterval as N, BYREF Cancel as L)
if ROWCOUNT > 0
    ProgressInterval = ROWCOUNT / 100
end if
dim num as n = 0
ui_modeless_dlg_box("Progress",<<%dlg% {progress=80num}; {justify=center}
;
'%dlg%,<<%code2%
if left(a_dlg_button,4) = "set:" then
    num = vala_dlg_button,5?
end if
If a_dlg_button ="Cancel" then
    ui_modeless_dlg_close("Progress")
end if
%code2%)
ui_yield()
END FUNCTION
'-----------------------------------------------------
FUNCTION UpdateProgress(Context as P, RowsUpdated as N, RowsExpected as N, BYREF Cancel as L)
trace.Writeln("" + (rowsupdated/rowcount))
ui_yield()
ui_dlg_event("progress","set: " + (rowsupdated/rowcount),"I")
ui_yield()' to be sure we processed the cancel button click
END FUNCTION
'-----------------------------------------------------
FUNCTION UpdateEnd(Context as P, RowsUpdated as N)
on error resume next
ui_modeless_dlg_close("Progress")
ui_yield()
END FUNCTION
'======================================================
%code%
]]></example>
        </section>
        <section>
            <description>The calling script adds the event script and names it "Import".</description>
            <example code="xb"><![CDATA[dim sqlconn as SQL::Connection
dim cs as C
cs = "{A5API='SQLServer', A5Syntax='SQLServer', Database='Database', Password='password', Server='URL', UserName='UserName'}"
sqlconn.open(cs)

if EventScript > "" then
    sqlconn.addEventScript(EventScript, "Import")
end if 
sqlconn.close()
]]></example>

        </section>


    </sections>
    <see>
        <ref link="SQL::Connection Object">SQL::Connection Object</ref>
    </see>
    <terms>sql,connection,arguments,defaults,delete,events,function,object,operation,placeholder,script,Xbasic</terms>
</page>