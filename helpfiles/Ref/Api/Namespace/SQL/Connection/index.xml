<page api="xb">
	<shortlink>api sql namespace connection object</shortlink>
	<topic>SQL::Connection Object</topic>
	
<description>A SQL::Connection instance represents a potential or active database session.</description>
<discussion><![CDATA[The SQL::Connection object is the heart of all database activity. Each instance of SQL::Connection represents a potential or active database session. In order to do anything with a SQL database you must first create (or dimension) a variable and associate it with a programming interface (API) and with a vendor syntax ( Oracle, Access, etc.).]]></discussion>


<sections>

<section>
<title>Using the Connection Object</title>
<description>The following sample script creates a SQL::Connection object and opens a connection to a Microsoft Access database.</description>
<example><![CDATA[DIM c as SQL::Connection
DIM cs as C
cs = "{A5API='Access', A5Syntax='Access', FileName='C:\Program Files\a5v6\MDBFiles\Alphasports.mdb', UserName='Admin'}"
? c.Open(cs)
= .T.]]></example>

</section>
</sections>

	<properties>
		<property generated="true">
			<name>CurrentAPI</name>
			<type>C</type>
			<description><![CDATA[Type: C, Mode: R
 The name of the current application programming interface being used. For example: Access, Oracle, ODBC, MySQL.
]]> </description>
	</property>
	
	
		<property generated="true">
			<name>CurrentSyntax</name>
			<type>C</type>
			<description><![CDATA[Type: C, Mode: R
 The dialect of SQL (and typically the vendor or product) being used to interact with the database.
 ]]></description>
		</property>
		<property generated="true">
			<name>IsOpen</name>
			<type>L</type>
			<description><![CDATA[Type: L
 
Mode: R
 
Returns true if the connection is currently open and false if it has not been opened yet or has been closed.
 ]]></description>
		</property>
		<property generated="true">
			<name>CallResult</name>
			<type></type>
			<description><![CDATA[Type: "SQL::CallResult"
 
Mode: R
 
Returns the results of the last call.
 ]]></description>
		</property>
		<property generated="true">
			<name>ResultSet</name>
			<type>P</type>
			<description><![CDATA[Type: "SQL::ResultSet"
 
Mode: R
 
Returns the currently active result set, or an error if there isn't one.
 ]]></description>
		</property>
		<property generated="true">
			<name>ConnectionString</name>
			<type>C</type>
			<description><![CDATA[Type: C
 
Mode: RW
 
The current connection string in syntax format. Should be set by ::SetConnectString().
]]> </description>
		</property>
		<property generated="true">
			<name>SchemaCacheEnabled</name>
			<type>L</type>
			<description><![CDATA[Type: L
 
Mode: RW
 
Default = TRUE (.T.). When this property is set to TRUE (.T.), schema objects retrieved (such as SQL::TableInfo) will be cached for the connection (disconnecting and some update functions clear the cache), when false, all objects are not cached and subsequent requests for a schema object will go directly to the database.
]]> </description>
		</property>
		<property generated="true">
			<name>BulkReadEnabled</name>
			<type>L</type>
			<description>Logical BulkReadEnabled property</description>
		</property>
		<property generated="true">
			<name>BulkWriteEnabled</name>
			<type>L</type>
			<description>Logical BulkWriteEnabled property</description>
		</property>
		<property generated="true">
			<name>PortableSQLEnabled</name>
			<type>L</type>
			<description><![CDATA[Type: L,
 
Mode: RW
 
Default = FALSE (.F.). When this property is set to true, SQL statements passed to the ApplyData(), Execute(), ToOpenTable(), ToGridComponentDataObject(), ToOpenTable(), ToPropertyArray(), ToString(), ToXML(), and ValidateQuery() methods are checked to see if they are supported Portable SQL Statements and, if so, then translated to native syntax before being processed. Statements that are not supported are passed directly through to the underlying database driver as if PortableSQLEnabled were false.
 ]]></description>
		</property>
		<property generated="true">
			<name>LoginTimeout</name>
			<type>C</type>
			<description><![CDATA[Type: C,
 
Mode: RW
 
Timeout values are "Default", "Infinite", or a string containing an integer specifying the timeout in seconds. Must be set prior to opening the connection. 
]]> </description>
		</property>
		<property generated="true">
			<name>ConnectionTimeout</name>
			<type>C</type>
			<description><![CDATA[Type: C,
 
Mode: RW
 
Timeout values are "Default", "Infinite", or a string containing an integer specifying the timeout in seconds. Must be set prior to opening the connection. 
]]> </description>
		</property>
		<property generated="true">
			<name>QueryTimeout</name>
			<type>C</type>
			<description><![CDATA[Type: C,
 
Mode: RW
 
Timeout values are "Default", "Infinite", or a string containing an integer specifying the timeout in seconds. Must be set prior to executing a query.
 ]]></description>
		</property>
		
		
		
		<property generated="true">
			<name>TraceSQL</name>
			<type>L</type>
			<description>Logical TraceSQL property</description>
		</property>
		<property generated="true">
			<name>TraceContext</name>
			<type>L</type>
			<description>Logical TraceContext property</description>
		</property>
		<property generated="true">
			<name>InitialCommand</name>
			<type>C</type>
			<description>String InitialCommand property</description>
		</property>
		<property generated="true">
			<name>CurrentProvider</name>
			<type>C</type>
			<description>String CurrentProvider property</description>
		</property>
		<property generated="true">
			<name>CurrentProviderDatasource</name>
			<type>C</type>
			<description>String CurrentProviderDatasource property</description>
		</property>
		<property generated="true">
			<name>SSL</name>
			<type>L</type>
			<description>Logical SSL property</description>
		</property>
		<property generated="true">
			<name>UseServerSidePrepare</name>
			<type>L</type>
			<description>Logical UseServerSidePrepare property</description>
		</property>
		<property build="4958">
			<name>ReportNotFoundAsWarning</name>
			<types>
				<type>L</type>
			</types>
			<description>Default = .F.. Defines whether or not to return an error if no records are modified when performing an Update or Delete operation. If .F., *[xb:SQL::Connection.execute()]* will treat "no records found" as an error (default behavior). If .T., *[xb:SQL::Connection.execute()]* will treat "no records found" as a warning. See [SQL::Connection.execute()] for more information. (Requires build 4958)</description>
		</property>
	</properties>
	<!--list:!*Method.xml-->
	<!--list:*Method.xml-->
	<links>
		<link link="api sql namespace connection class execute function">SQL::Connection.execute()</link>
	</links>
	<see>
		<ref link="SQL Namepsace">SQL</ref>
	</see>
<terms>sql,connection,arguments,column,create table,current row,database,dbf,delete,display,events,excel,expressions,field,file,index,insert,language,list,new user,object,primary key,programming,query,script,sql query,string,tabs,template,templates,users,variable,xdialog,xml</terms>
</page>