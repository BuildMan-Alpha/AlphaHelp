<page api="xb">
    <shortlink>api sql namespace connection object</shortlink>
    <topic>SQL::Connection Object</topic>
    <description>A SQL::Connection instance represents a potential or active database session.</description>
    <discussion>
        <![CDATA[The SQL::Connection object is the heart of all database activity. Each instance of SQL::Connection represents a potential or active database session. In order to do anything with a SQL database you must first create (or dimension) a variable and associate it with a programming interface (API) and with a vendor syntax ( Oracle, Access, etc.).]]>
    </discussion>
    <groups>
        <group>
            <title>Using the Connection Object</title>
            <sections>
                <section>
                    <description>The following sample script creates a SQL::Connection object and opens a connection to a Microsoft Access database.</description>
                    <example code="xb">
                        <![CDATA[DIM c as SQL::Connection
DIM cs as C
cs = "{A5API='Access', A5Syntax='Access', FileName='C:\Program Files\a5v6\MDBFiles\Alphasports.mdb', UserName='Admin'}"
? c.Open(cs) 
= .T.]]>
                    </example>
                </section>
            </sections>
        </group>
        <group>
            <sections>
                <section>
                    <pages>
                        <page>
                            <properties>
                                <property readonly="true">
                                    <name>CurrentAPI</name>
                                    <type>C</type>
                                    <description>The name of the current application programming interface being used. For example: Access, Oracle, ODBC, MySQL.</description>
                                </property>
                                <property readonly="true">
                                    <name>CurrentSyntax</name>
                                    <type>C</type>
                                    <description>The dialect of SQL (and typically the vendor or product) being used to interact with the database.</description>
                                </property>
                                <property readonly="true">
                                    <name>IsOpen</name>
                                    <type>L</type>
                                    <description>Returns true if the connection is currently open and false if it has not been opened yet or has been closed.</description>
                                </property>
                                <property readonly="true">
                                    <name>CallResult</name>
                                    <type>SQL::CallResult</type>
                                    <description>Returns the results of the last call.</description>
                                </property>
                                <property readonly="true">
                                    <name>ResultSet</name>
                                    <type>SQL::ResultSet</type>
                                    <description>Returns the currently active result set, or an error if there isn't one.</description>
                                </property>
                                <property>
                                    <name>ConnectionString</name>
                                    <type>C</type>
                                    <description>The current connection string in syntax format. Should be set by ::SetConnectString().</description>
                                </property>
                                <property>
                                    <name>SchemaCacheEnabled</name>
                                    <type>L</type>
                                    <description>Default = TRUE (.T.). When this property is set to TRUE (.T.), schema objects retrieved (such as SQL::TableInfo) will be cached for the connection (disconnecting and some update functions clear the cache), when false, all objects are not cached and subsequent requests for a schema object will go directly to the database.</description>
                                </property>
                                <property readonly="true">
                                    <name>BulkReadEnabled</name>
                                    <type>L</type>
                                    <description>BulkReadEnabled property</description>
                                </property>
                                <property readonly="true">
                                    <name>BulkWriteEnabled</name>
                                    <type>L</type>
                                    <description>BulkWriteEnabled property</description>
                                </property>
                                <property>
                                    <name>PortableSQLEnabled</name>
                                    <type>L</type>
                                    <description>Default = FALSE (.F.). When this property is set to true, SQL statements passed to the ApplyData(), Execute(), ToOpenTable(), ToGridComponentDataObject(), ToOpenTable(), ToPropertyArray(), ToString(), ToXML(), and ValidateQuery() methods are checked to see if they are supported Portable SQL Statements and, if so, then translated to native syntax before being processed. Statements that are not supported are passed directly through to the underlying database driver as if PortableSQLEnabled were false.</description>
                                </property>
                                <property>
                                    <name>LoginTimeout</name>
                                    <type>C</type>
                                    <description>Timeout values are "Default", "Infinite", or a string containing an integer specifying the timeout in seconds. Must be set prior to opening the connection.</description>
                                </property>
                                <property>
                                    <name>ConnectionTimeout</name>
                                    <type>C</type>
                                    <description>Timeout values are "Default", "Infinite", or a string containing an integer specifying the timeout in seconds. Must be set prior to opening the connection.</description>
                                </property>
                                <property>
                                    <name>QueryTimeout</name>
                                    <type>C</type>
                                    <description>Timeout values are "Default", "Infinite", or a string containing an integer specifying the timeout in seconds. Must be set prior to executing a query.</description>
                                </property>
                                <property>
                                    <name>TraceSQL</name>
                                    <type>L</type>
                                    <description>TraceSQL property</description>
                                </property>
                                <property>
                                    <name>TraceContext</name>
                                    <type>L</type>
                                    <description>TraceContext property</description>
                                </property>
                                <property>
                                    <name>InitialCommand</name>
                                    <type>C</type>
                                    <description>InitialCommand property</description>
                                </property>
                                <property>
                                    <name>CurrentProvider</name>
                                    <type>C</type>
                                    <description>CurrentProvider property</description>
                                </property>
                                <property>
                                    <name>CurrentProviderDatasource</name>
                                    <type>C</type>
                                    <description>CurrentProviderDatasource property</description>
                                </property>
                                <property>
                                    <name>SSL</name>
                                    <type>L</type>
                                    <description>SSL property</description>
                                </property>
                                <property>
                                    <name>UseServerSidePrepare</name>
                                    <type>L</type>
                                    <description>UseServerSidePrepare property</description>
                                </property>
                                <property build="4958">
                                    <name>ReportNotFoundAsWarning</name>
                                    <types>
                                        <type>L</type>
                                    </types>
                                    <description>Default = .F.. Defines whether or not to return an error if no records are modified when performing an Update or Delete operation. If .F., *[xb:SQL::Connection.execute()]* will treat "no records found" as an error (default behavior). If .T., *[xb:SQL::Connection.execute()]* will treat "no records found" as a warning. See [SQL::Connection.execute()] for more information. (Requires build 4958)</description>
                                </property>
                            </properties>
                        </page>
                    </pages>
                </section>
            </sections>
        </group>
        <group>
            <sections>
                <section>
                    <pages>
                        <page>
                            <!--list:*Method.xml-->
                        </page>
                    </pages>
                </section>
            </sections>
        </group>
        <group>
            <title>An Important Note About Assigning the ResultSet Property to Variables</title>
            <sections>
                <section>
                    <description>
                        <p>Except for a few database providers, the client driver does not support multiple active result sets. Attempting to execute a new query while processing the results of a previous query does not work.</p>
                        <p>In order to simplify the most common case, AlphaDAO connections automatically disassociate from an active ResultSet and reconnect to the database when a new query is executed, but there is still a variable referencing the active result set.</p>
                        <p>This is fine in most cases, but can cause unexpected behavior within a transaction. Because the SQL::Connection object "disconnects" from the referenced result set (and the connection that owns it), the transaction is effectively lost.</p>
                        <p>In order to prevent this behavior, use the DELETE keyword on any variable that has been assigned a ResultSet property prior to executing another query.</p>
                        <p>Below are some examples of code that can cause a problem with connections showing how to avoid the problem.</p>
                    </description>
                    <example code="xb">
                        <![CDATA[' Basic example showing two active result sets
' Note: At the end of this section there are two active result sets 
' and two active connections.
DIM c as SQL::Connection
DIM cs as C
cs = "{A5API='Access', A5Syntax='Access', FileName='C:\Program Files\a5v6\MDBFiles\Alphasports.mdb', UserName='Admin'}"
? c.Open(cs) 
= .T.
?c.Execute("select * from Customers")
rs = c.ResultSet
?c.Execute("select * from Orders")]]></example>
                </section>
                <section>
                    <description>
                        <p>What happens if we are in a transaction?</p>
                        <p>At the end of this section there are two active connections. The UPDATE statements are executed on two different connections, the latter is NOT in the transaction.</p>
                    </description>
                    <example code="xb"><![CDATA[DIM c as SQL::Connection
DIM cs as C
cs = "{A5API='Access', A5Syntax='Access', FileName='C:\Program Files\a5v6\MDBFiles\Alphasports.mdb', UserName='Admin'}"
? c.Open(cs) 
= .T.
?c.BeginTransaction()
?c.Execute("Update ...")
?c.Execute("select * from Orders")
rs = c.ResultSet
?c.Execute("update ...")]]></example>
                </section>
                <section>
                    <description>
                        <p>How do we fix the problem?</p>
                        <p>By using the DELETE statement, we release the result set and the SQL::Connection object will not reconnect to the database.</p>
                        <p>At the end of this section there is a single connection. The UPDATE statements are executed on the same connection.</p>
                    </description>
                    <example code="xb"><![CDATA[DIM c as SQL::Connection
DIM cs as C
cs = "{A5API='Access', A5Syntax='Access', FileName='C:\Program Files\a5v6\MDBFiles\Alphasports.mdb', UserName='Admin'}"
? c.Open(cs) 
= .T.
?c.BeginTransaction()
?c.Execute("Update ...")
?c.Execute("select * from Orders")
rs = c.ResultSet
'.. do something with the result set
DELETE rs
?c.Execute("update ...")]]></example>
                </section>
            </sections>
        </group>
    </groups>
    <links>
        <link link="api sql namespace connection class execute function">SQL::Connection.execute()</link>
    </links>
    <see>
        <ref link="SQL Namepsace">SQL</ref>
    </see>
    <terms>sql,connection,arguments,column,create table,current row,database,dbf,delete,display,events,excel,expressions,field,file,index,insert,language,list,new user,object,primary key,programming,query,script,sql query,string,tabs,template,templates,users,variable,xdialog,xml</terms>
</page>