<page>
   <topic>SQL::Connection::BeginTransaction Function</topic>
    <description>Begin a batch of SQL updates, inserts and/or deletes that need to succeed or fail as a group.</description>
   
   <syntax>Result_Flag as L = BeginTransaction()</syntax>
<arguments>
<argument>
<name>Result_Flag
</name>
<description>TRUE (.T.) if the operation was successful; otherwise FALSE (.F.).</description>
</argument>

<argument>
<name>SQL::Connection</name>
<description>A SQL::Connection object.</description>
</argument>


</arguments>   
   
   
  <discussion>
The BeginTransaction() method begins a batch of SQL updates, inserts and/or deletes that need to succeed or fail as a group.
   </discussion>
 
   <sections>
       <section><title>Example</title>
            <description>First, create and define variables. The select_cmd will select the records to copy. The delete_cmd will select the records to delete.</description>
            <example><![CDATA[
dim conn as sql::connection
dim select_cmd as C
dim delete_cmd as C
select_cmd = "select * from ProductA"
delete_cmd = "delete * from ProductA"
]]></example>
       </section>
       
       <section>
            <description>Establish the connection. If there is an error, display a message, and end the script.</description>
            <example><![CDATA[
if .not.conn.open("{A5API=Access,FileName='C:\Program Files\A5V8\MDBFiles\Alphasports.mdb',UserName='Admin'}") then
    ui_msg_box("Error", "Could not establish connection" + crlf()+ conn.CallResult.text)
    end
end if
]]></example>
       </section>
       
       <section>
            <description>Select the data to copy. If there is an error, display a message, and end the script.</description>
            <example><![CDATA[
if .not. conn.execute(select_cmd) then
    ui_msg_box("Error", "Could not execute query" + crlf()+ conn.CallResult.text)
    end
end if
]]></example>
       </section>
       
       <section>
            <description>If the records were established, it is time to begin the transaction with the BeginTransaction() method.</description>
            <example><![CDATA[
conn.BeginTransaction()
]]></example>
       </section>
       
       <section>
            <description>Copy records from ProductA to ProductB. If there is an error, roll back the transaction with the RollBackTransaction() method, display a message, and end the script.</description>
            <example><![CDATA[
if .not. conn.InsertData("", "ProductB", conn.ResultSet)
    ui_msg_box("Error", "Could not insert data into ProductB")
    conn.RollBackTransaction()
    end
end if
]]></example>
       </section>
       
       <section>
            <description>Delete the records in ProductA. If there is an error, roll back the transaction, display a message, and end the script.</description>
            <example><![CDATA[
if .not. conn.execute(delete_cmd)
    ui_msg_box("Error", "Could not delete data from ProductA" + crlf()+ conn.CallResult.text)
    conn.RollBackTransaction()
    end
end if
]]></example>
       </section>
       
       <section>
            <description>Finally, commit the transaction and close the connection.</description>
            <example><![CDATA[
conn.CommitTransaction()
conn.close()
]]></example>
       </section>
       
       <section><title>Note</title>
            <description>Do not run conn.GetTableInfo() methods in the body of a transaction, as they execute their own transactions. You can run them before the transaction begins, or on a different connection.</description>
         
       </section>
   </sections>
   <see>
      <ref link="SQL::Connection Object">SQL::Connection Object</ref>
   </see>
<terms>sql,connection,delete,display,function,insert,object,operation,record,time,transactions</terms>
</page>