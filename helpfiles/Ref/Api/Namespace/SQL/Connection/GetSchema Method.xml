<page api="xb">
    <shortlink>api sql namespace connection class get schema function</shortlink>
    <topic parent="SQL::Connection" parentType="class" elementName="GetSchema Method">SQL::Connection GetSchema Method</topic>
    <description>Get a schema definition.
    </description>
    <prototype>Result_Flag as L = SQL::TableInfo GetSchema(BYREF Schema as SQL::Schema [, TableOwner as C [, IncludeTables as L [, IncludeViews as L [,IncludeLinkedTables as L [, IncludeSystemTables as L [, IncludeSynonyms as L [, IncludeAliases as L]]]]]]])</prototype>
    <arguments>
        <argument>
            <name>BYREF Schema</name>
            <type>SQL::Schema</type>
            <description>A SQL::Schema object created with the DIM statement.
            </description>
        </argument>
        <argument optional="true">
            <name> TableOwner</name>
            <type>C</type>
            <description>Default = "". The owner of the database.
            </description>
        </argument>
        <argument optional="true">
            <name> IncludeTables</name>
            <type>L</type>
            <description>Default = .T. Whether to include table definitions.
            </description>
        </argument>
        <argument optional="true">
            <name> IncludeViews</name>
            <type>L</type>
            <description>Default = .T. Whether to include view definitions.
            </description>
        </argument>
        <argument optional="true">
            <name>IncludeLinkedTables</name>
            <type>L</type>
            <description>Default = .T. Whether to include linked table definitions.
            </description>
        </argument>
        <argument optional="true">
            <name> IncludeSystemTables</name>
            <type>L</type>
            <description>Default = .T. Whether to include system table definitions.
            </description>
        </argument>
        <argument optional="true">
            <name> IncludeSynonyms</name>
            <type>L</type>
            <description>Default = .T. Whether to include synonym definitions.
            </description>
        </argument>
        <argument optional="true">
            <name> IncludeAliases</name>
            <type>L</type>
            <description>Default = .T. Whether to include alias definitions.
            </description>
        </argument>
    </arguments>
    <returns>
        <return>
            <name>Result_Flag</name>
            <description>TRUE (.T.) if the operation was successful; otherwise FALSE (.F.).
            </description>
            <types>
                <type>L</type>
            </types>
        </return>
    </returns>
    <discussion>
The GetSchema() method returns a collection of the tables requested for the current database and optionally for those owned by a specific user.
    </discussion>
    <example><![CDATA[
dim conn as SQL::Connection
dim sch as SQL::Schema
dim connString as C
connString = "{A5API='Access', FileName='c:\program files\a5v8\mdbfiles\alphasports.mdb'}"
if .not. conn.open(connString)
    ui_msg_box("Error", conn.CallResult.text)
    end
end if
if .not. conn.GetSchema(sch)
    ui_msg_box("Error", conn.CallResult.text)
    end
end if
file.from_string("c:\schema.txt", sch.xml)
conn.close()
]]>    </example>

    <see>
        <ref link="SQL::Connection Object">SQL::Connection Object</ref>
    </see>
    <terms>sql,connection,collection,database,defaults,function,object,operation,system</terms>
</page>