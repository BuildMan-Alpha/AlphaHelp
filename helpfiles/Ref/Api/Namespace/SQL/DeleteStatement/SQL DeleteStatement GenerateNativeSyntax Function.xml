<page api="xb">
  <shortlink>api sql namespace delete statement class generate native syntax function</shortlink>
   <topic>SQL::DeleteStatement::GenerateNativeSyntax Function</topic>
    <description>Generate a native SQL statement using the selected syntax associated with the current or passed connection.</description>
 
   <prototype>SQL_Statement as C =  GenerateNativeSyntax([SQLConnection as SQL::Connection | SQLConnectionString as C])</prototype>
   <arguments>
    <argument>
         <name>SQL_Statement</name>
         <description>The native SQL equivalent of a Portable SQL expression.
</description>
     </argument>
      <argument>
         <name>SQL::DeleteStatement</name>
         <description>A SQL::DeleteStatement object.
</description>
     </argument>
     
     
     <argument>
         <name>SQLConnection</name>
         <description>SQL::Connection | SQLConnectionString</description>
     </argument>
      <argument>
         <name>ConnectString</name>
         <description>Optional. A connection string.
</description>
     </argument>
     
     
   </arguments>
    <discussion>
The .GenerateNativeSyntax() method returns the native SQL version of the Portable SQL stored in the SQL::DeleteStatement.SQLStatement property.
   </discussion>
   <example><![CDATA[
dim conn as SQL::Connection
dim del as SQL::DeleteStatement
dim connString as C
dim sql_delete as C
connString = "{A5API='Access', FileName='c:\program files\a5v7\mdbfiles\alphasports.mdb'}"
sql_delete = "DELETE FROM Customer_copy WHERE substring(lastname,1,1) = 'A'"
conn.open(connString)
del.parse(sql_delete)
? del.GenerateNativeSyntax(conn)
= "DELETE FROM Customer_copyWHERE (Mid(lastname, 1, 1) = 'A')"
]]></example>
   
   <see>
      <ref>SQL::DeleteStatement Object</ref>
     </see>
  <terms>sql,function,native sql,object</terms>
</page>