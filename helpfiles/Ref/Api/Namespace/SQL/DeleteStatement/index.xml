<page api="xb">
    <shortlink>api sql namespace delete statement class</shortlink>
    <topic>SQL DeleteStatement Object</topic>
    <description>SQL DeleteStatement Object properties, methods, and examples.</description>
    <sections>
        <section>
            <title>Example</title>
            <description>Note that the fields to update and the corresponding value are specified in a comma delimited list of name/value pairs.</description>
            <example code="xb"><![CDATA[dim conn as SQL::Connection
dim del as SQL::DeleteStatement
dim qry as SQL::Query
dim rs as SQL::ResultSet
dim connString as C
dim sql_delete as C
dim sql_query as C]]></example>
        </section>
        <section>
            <description>Assign values to the character variables.</description>
            <example code="xb"><![CDATA[connString = "{A5API='Access', FileName='c:\program files\a5v7\mdbfiles\alphasports.mdb'}"
sql_query = "select * from customer_copy order by lastname"]]></example>
        </section>
        <section>
            <description>Note that the DELETE command uses the SubString()portability function as part of the WHERE clause.</description>
            <example code="xb"><![CDATA[sql_delete = "DELETE FROM Customer_copy WHERE substring(lastname,1,1) = 'A'"
]]></example>
        </section>
        <section>
            <description>Establish the connection.</description>
            <example code="xb"><![CDATA[IF .not. conn.open(connString) THEN
    end
END IF]]></example>
        </section>
        <section>
            <description>Check the SQL DELETE statement.</description>
            <example code="xb"><![CDATA[IF .not. del.parse(sql_delete) THEN
    ui_msg_box("Error", del.callresult.text)
    end
END IF]]></example>
        </section>
        <section>
            <description>Execute the SQL DELETE statement.</description>
            <example code="xb"><![CDATA[IF .not. del.execute(conn)
    ui_msg_box("Error", del.callresult.text)
    end
END IF]]></example>
        </section>
        <section>
            <description>Now, look at the results.</description>
            <example code="xb"><![CDATA[qry.parse(sql_query)
qry.execute(conn)
rs = qry.resultset
a5_sqlresultsetpreview(rs)
conn.close()]]></example>
        </section>
    </sections>
    <properties>
        <property readonly="true">
            <name>Arguments</name>
            <type>SQL::Arguments</type>
            <description>Arguments for the current query.</description>
        </property>
        <property readonly="true">
            <name>CallResult</name>
            <type>SQL::CallResult</type>
            <description>Call results.</description>
        </property>
        <property readonly="true">
            <name>ColumnReferences</name>
            <type>ReferenceList of SQL::Query::ColumnReference</type>
            <description>An array of all column references in the query (including nested occurrences). Behaves the same way as  .SelectTableReferences.</description>
        </property>
        <property>
            <name>Connection</name>
            <type>SQL::Connection</type>
            <description>Current open connection</description>
        </property>
        <property readonly="true">
            <name>ErrorColumn</name>
            <type>N</type>
            <description>The column number of the last error reported by the parser.</description>
        </property>
        <property readonly="true">
            <name>ErrorText</name>
            <type>C</type>
            <description>The text of the last parser error reported.</description>
        </property>
        <property readonly="true">
            <name>FunctionReferences</name>
            <type>ReferenceList of SQL::Query::ValueExpression</type>
            <description>An array of all function calls. Behaves the same way as  .SelectTableReferences.</description>
        </property>
        <property readonly="true">
            <name>ObjectDefinitions</name>
            <type>C</type>
            <description>For internal debugging. Returns a string description of the mapping between the ANTLR grammar and the Xbasic objects.</description>
        </property>
        <property readonly="true">
            <name>ParseTree</name>
            <type>C</type>
            <description>For internal debugging. A string description of the underlying parse tree.</description>
        </property>
        <property readonly="true">
            <name>SelectTableReferences</name>
            <type>ReferenceList of SQL::Query::SelectTableReference</type>
            <description>An array of all table references in the from clause and those joined to them. This array is created when the property is requested, but can become out of date. Use the Resynch()function on any variable holding this list when any changes are made. </description>
        </property>
        <property>
            <name>SQLStatement</name>
            <type>C</type>
            <description>A variable that can be assigned a syntax string without parsing it. If no value is passed to the ::Parse()method, this value is used. </description>
        </property>
        <property>
            <name>Table</name>
            <type>SQL::Query:: SelectTableReference</type>
            <description>The table to be inserted into.</description>
        </property>
        <property readonly="true">
            <name>TokenTypeName</name>
            <type>C</type>
            <description>"Query". </description>
        </property>
        <property>
            <name>Where</name>
            <type>SQL::Query:: LogicalExpression</type>
            <description>An expression for the WHERE clause.</description>
        </property>
        <property>
            <name>XML</name>
            <type>C</type>
            <description>Creates XML from the tree or recreates the tree from the XML.</description>
        </property>
    </properties>
    <!--list:.-->
    <see>
        <ref>SQL Objects</ref>
        <ref>SQL Enumerated Types</ref>
    </see>
</page>