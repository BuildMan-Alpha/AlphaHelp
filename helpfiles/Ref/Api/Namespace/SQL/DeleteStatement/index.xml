<page>
	<topic>SQL DeleteStatement Object</topic>
	<description>SQL DeleteStatement Object properties, methods, and examples.</description>
	
	<sections>
		<section><title>Example</title>
			<description>Note that the fields to update and the corresponding value are specified in a comma delimited list of name/value pairs.</description>
			<example><![CDATA[dim conn as SQL::Connection
dim del as SQL::DeleteStatement
dim qry as SQL::Query
dim rs as SQL::ResultSet
dim connString as C
dim sql_delete as C
dim sql_query as C]]></example>
		</section>
		
		<section>
			<description>Assign values to the character variables.</description>
			<example><![CDATA[connString = "{A5API='Access', FileName='c:\program files\a5v7\mdbfiles\alphasports.mdb'}"
sql_query = "select * from customer_copy order by lastname"]]></example>
		</section>
		
		<section>
			<description>Note that the DELETE command uses the SubString()portability function as part of the WHERE clause.</description>
			<example><![CDATA[sql_delete = "DELETE FROM Customer_copy WHERE substring(lastname,1,1) = 'A'"
]]></example>
		</section>
		
		<section>
			<description>Establish the connection.</description>
			<example><![CDATA[IF .not. conn.open(connString) THEN
    end
END IF]]></example>
		</section>
		
		<section>
			<description>Check the SQL DELETE statement.</description>
			<example><![CDATA[IF .not. del.parse(sql_delete) THEN
    ui_msg_box("Error", del.callresult.text)
    end
END IF]]></example>
		</section>
		
		<section>
			<description>Execute the SQL DELETE statement.</description>
			<example><![CDATA[IF .not. del.execute(conn)
    ui_msg_box("Error", del.callresult.text)
    end
END IF]]></example>
		</section>
		
		<section>
			<description>Now, look at the results.</description>
			<example><![CDATA[qry.parse(sql_query)
qry.execute(conn)
rs = qry.resultset
a5_sqlresultsetpreview(rs)
conn.close()]]></example>
		</section>
		
		
	</sections>
	<properties>
		<property>
			<name>Arguments</name>
			<type>SQL::Arguments</type>
			<description>
Mode R. Arguments for the current query.</description>
		</property>
		
		<property>
			<name>CallResult</name>
			<type>SQL::CallResult</type>
			<description>Mode R. Call results.</description>
		</property>
		
		<property>
			<name>ColumnReferences</name>
			<type>ReferenceList of SQL::Query::

ColumnReference</type>
			<description>Mode R. An array of all column references in the query (including nested occurrences). Behaves the same way as  .SelectTableReferences.</description>
		</property>
		
		<property>
			<name>Connection
</name>
			<type>SQL::Connection</type>
			<description>
Mode RW. Current open connection</description>
		</property>
		
		<property>
			<name>ErrorColumn
</name>
			<type>N
</type>
			<description>
Mode R. The column number of the last error reported by the parser.</description>
		</property>
		
		<property>
			<name>ErrorText
</name>
			<type>C
</type>
			<description>Mode R. The text of the last parser error reported.</description>
		</property>
		
		<property>
			<name>FunctionReferences
</name>
			<type>ReferenceList of SQL::Query::

ValueExpression
</type>
			<description>Mode R. An array of all function calls. Behaves the same way as  .SelectTableReferences.
 </description>
		</property>
		
		<property>
			<name>ObjectDefinitions
</name>
			<type>C
</type>
			<description>Mode R. For internal debugging. Returns a string description of the mapping between the ANTLR grammar and the Xbasic objects.
 </description>
		</property>
		
		<property>
			<name>ParseTree
</name>
			<type>C
</type>
			<description>Mode R. For internal debugging. A string description of the underlying parse tree.</description>
		</property>
		
		<property>
			<name>SelectTableReferences</name>
			<type>ReferenceList of SQL::Query::

SelectTableReference</type>
			<description>
Mode R. An array of all table references in the from clause and those joined to them. This array is created when the property is requested, but can become out of date. Use the Resynch()function on any variable holding this list when any changes are made.
 </description>
		</property>
		
		<property>
			<name>SQLStatement</name>
			<type>C</type>
			<description>Mode RW. A variable that can be assigned a syntax string without parsing it. If no value is passed to the ::Parse()method, this value is used.
 </description>
		</property>
		
		<property>
			<name>Table
</name>
			<type>SQL::Query:: SelectTableReference</type>
			<description>Mode RW. The table to be inserted into.</description>
		</property>
		<property>
			<name>TokenTypeName
</name>
			<type>C</type>
			<description>
Mode R. "Query". </description>
		</property>
		<property>
			<name>Where</name>
			<type>
SQL::Query:: LogicalExpression
 
 </type>
			<description>Mode RW. An expression for the WHERE clause.</description>
		</property>
		<property>
			<name>XML</name>
			<type>C</type>
			<description>Mode RW. Creates XML from the tree or recreates the tree from the XML.</description>
		</property>
		
		
	</properties>
	<methods>
		<method>
			<name>Execute</name>
			<ref href="/documentation/index?search=SQL::DeleteStatement::Execute Function">Execute</ref>
			<description>Accepts an optional SQL::Connection object or connection string and executes the current SELECT statement on that or its current connection.</description>
		</method>
		<method>
			<name>GenerateNativeSyntax</name>
			<ref href="/documentation/index?search=SQL::DeleteStatement::GenerateNativeSyntax Function">GenerateNativeSyntax</ref>
			<description> Accepts an optional SQL::Connection object or connection string and executes the current SELECT statement on that or its current connection. Returns the string that .Execute() or .Validate() methods would pass to the connection. Note:  This string is target syntax specific. </description>
		</method>
		<method>
			<name>Parse</name>
			<ref href="/documentation/index?search=SQL::DeleteStatement::Parse Function">Parse</ref>
			<description> Accepts an optional text string and parses it. If the parse is successful, the elements of the SQL statement will be available immediately as Properties of the object. </description>
		</method>
		<method>
			<name>Reset</name>
			<ref href="/documentation/index?search=SQL::DeleteStatement::Reset Function">Reset</ref>
			<description>Reinitializes the object as if it had just been declared. </description>
		</method>
		<method>
			<name>Validate</name>
			<ref href="/documentation/index?search=SQL::DeleteStatement::Validate Function">Validate</ref>
			<description> Accepts an optional SQL::Connection object or connection string and validates the current SELECT statement on the connection that is passed or the current connection. </description>
		</method>
		
		
	</methods>
	<see>
		<ref>SQL Objects</ref>
		<ref>SQL Enumerated Types</ref>
	</see>
	
	
</page>