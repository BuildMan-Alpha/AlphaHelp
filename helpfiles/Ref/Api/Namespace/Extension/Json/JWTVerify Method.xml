<page generated="true">
	<shortlink>api extension namespace json class jwt verify method</shortlink>
	<topic>Extension::Json JWTVerify Method</topic>
	<prototype static="true">.JWTVerify as c (token as C, secret as C[,options as c])</prototype>
	<arguments>
		<argument>
			<name>token</name>
			<description>JWT Token</description>
		</argument>
		<argument>
			<name>secret</name>
			<description>Secret that token was hashed againstt.</description>
		</argument>
		<argument>
			<name>options</name>
			<description>Specify a Algorithm used to hash, or pass complext options.</description>
		</argument>
	</arguments>
	<description>Verify a  javascript web token, return json if valid, otherwise return an empty string.</description>
	<example>
' First create a token	
dim token as c = extension::JSON::JWTSign(json_sanitize("{ fname : 'john' , lname : 'public'}"),"shhhh!")
? token
= "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmbmFtZSI6ImpvaG4iLCJsbmFtZSI6InB1YmxpYyIsImlhdCI6MTQ3Nzc3OTA2M30.xwGMV_POhwEoj-mH1PsgscL-uqOfBMLnNsD2SsOtqXE"

' Verify will return JSON packet if the supplied secret is valid
? extension::JSON::JWTVerify(token,"shhhh!")
= {"fname":"john","lname":"public","iat":1477779063}

' Pass it an incorrect secret - and verify will return a blank string
? extension::JSON::JWTVerify(token,"boo!")
= ""
	</example>
    <sections> 
        <section>
            <title>Using the optional parameter to specifiy alternate algorithms.</title>
            <description>
            The default behaviour is to try the various hash schemas, you can specify the exact hash schemes using a comma separated list.
            </description>
            <example>
            dim token as c = extension::JSON::JWTSign(json_sanitize("{ fname : 'john' , lname : 'public'}"),"shhhh!","HS512")
? token
= "eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJmbmFtZSI6ImpvaG4iLCJsbmFtZSI6InB1YmxpYyIsImlhdCI6MTQ4MzczNTY1MH0.EBW04-jWCb405BUzbSuzoq19pWiAo6gLKhHfPic2WBClD6TKKqPzfttYtzTEPr45JoxTmK8oIcYKaVg5FZ4CAg"

' We are using a different hash
? extension::JSON::JWTVerify(token,"shhhh!","HS256")
= ""

' So include the hash we are using
? extension::JSON::JWTVerify(token,"shhhh!","HS512")
= {"fname":"john","lname":"public","iat":1483735650}

' Comma separated list of accepted hash encodings works as well.
? extension::JSON::JWTVerify(token,"shhhh!","HS256,HS512")
= {"fname":"john","lname":"public","iat":1483735650}

            </example>
        </section>
    </sections>	
</page>
