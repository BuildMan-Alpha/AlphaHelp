<page generated="true" api="xb" build="4142">
	<topic parent="Extension::Json" parentType="class" elementName="JSONShred Method">extension::JSON JSONShred Method</topic>
	<prototype static="true">.JSONShred as c (JSON as C, JSONFieldtemplate  as C [, topName as C])</prototype>
	<arguments>
		<argument>
			<name>JSON</name>
			<type>C</type>
			<description>JSON to 'shred'</description>
		</argument>
		<argument>
			<name>JSONFieldtemplate</name>
			<type>C</type>
			<description>Shape of the JSON we want to 'shred'.  In addition to fields specified by {&lt;fieldname&gt;}, 
			there are built fields, described below.</description>
			<list>
            <item>
                <name>{./begincurly}</name>
                <description>Emit a '{' in the template.</description>
            </item>
            <item>
                <name>{./endcurly}</name>
                <description>Emit a '}' in the template.</description>
            </item>
            <item>
                <name>{./number}</name>
                <description>When included, Emit this field as a numeric value rather than string value.</description>
            </item>
            <item>
                <name>{./logical}</name>
                <description>When included, Emit this field as a logical value rather than string value.</description>
            </item>
            <item>
                <name>{./replace}</name>
                <description>When included, indicate that this field replaces an existing field (remove the field if it exists).</description>
            </item>
            <item>
                <name>{./delete}</name>
                <description>The field named is not emitted, but instead causes an existing field to be removed.</description>
            </item>
            <item>
                <name>{./wrap}</name>
                <description>Emits an object field that 'contains' all the fields that follow (including the existing fields).</description>
            </item>
            <item>
                <name>{./row}</name>
                <description>Emit counter for the 'row' in the current branch.</description>
            </item>
            <item>
                <name>{./count}</name>
                <description>Emit the number of rows in the current branch.</description>
            </item>
            <item>
                <name>{./index}</name>
                <description>Emit counter for the 'row' from that first branch to the current location.</description>
            </item>
            <item>
                <name>{./start}</name>
                <description>Emit the 'index' for the first row in the current branch.</description>
            </item>
            <item>
                <name>{./rowz}</name>
                <description>Emit counter for the 'row' in the current branch, but assume numbering starts a '0' instead of '1'.</description>
            </item>
            <item>
                <name>{./indexz}</name>
                <description>Emit counter for the 'row' from that first branch to the current location, but assume numbering starts a '0' instead of '1'.</description>
            </item>
            <item>
                <name>{./startz}</name>
                <description>Emit the 'index' for the first row in the current branch, but assume numbering starts a '0' instead of '1'.</description>
            </item>
            <item>
                <name>{./&lt;child&gt;/./start}</name>
                <description>Emit the 'start' Index of the first entry in a specified child array field.</description>
            </item>
            <item>
                <name>{./&lt;child&gt;/./count}}</name>
                <description>Emit the count  of the entries in a specified child array field.</description>
            </item>
            <item>
                <name>{./&lt;child&gt;/./startz}</name>
                <description>Emit the 'start' Index of the first entry in a specified child array field, but assume numbering starts a '0' instead of '1'.</description>
            </item>
        </list>			
		</argument>
		<argument>
			<name>topName</name>
			<type>C</type>
			<description>Optional 'topname' (if ommitted __top) is used. This is the name of the parent array in the result.</description>
		</argument>
	</arguments>
	<description>Takes a complex JSON structure with nested arrays and turns it into a flat list of arrays with no nested arrays. 
	The way in which the JSON should be 'shredded' is described by a template (which can contain definitions for 'key' fields to be added to the child arrays in the result).</description>
	
    <sections> 
        <section>
            <title>Example Shred Parent/Child/Grandchild JSON</title>
            <description>
                In this example, each levels already has all the keys required. Therfore, we we just need to describe the 'shape' of JSON data we want to shred. (The template does not need to define any 'key' fields.)
            </description>
    <example>
<![CDATA[    
dim schema as c 
schema = <<%str%
[
    {
        "orders" : [
            {
                "OrderItems" : [
                  { 
                  }
                ]
            }
        ]
    }
]
%str%

dim JSON as c = <<%str%
[
        {
            "CustomerID": "ALFKI",
            "CompanyName": "Alfreds Futterkistes",
            "orders": [
                {
                    "OrderID": "10643",
                    "CustomerID": "ALFKI",
                    "OrderDate": "08/25/1997 12:00:00 000 am",
                    "orderItems": [
                        {
                            "OrderID": "10643",
                            "ProductID": "28",
                            "Quantity": "15",
                            "UnitPrice": "2"
                        },
                        {
                            "OrderID": "10643",
                            "ProductID": "39",
                            "Quantity": "21",
                            "UnitPrice": "18"
                        }
                    ]
                },
                {
                    "OrderID": "10702",
                    "CustomerID": "ALFKI",
                    "OrderDate": "10/13/1997 12:00:00 000 am",
                    "orderItems": [
                        {
                            "OrderID": "10702",
                            "ProductID": "3",
                            "Quantity": "6",
                            "UnitPrice": "10"
                        },
                        {
                            "OrderID": "10702",
                            "ProductID": "76",
                            "Quantity": "15",
                            "UnitPrice": "18"
                        }
                    ]
                }
            ]
        },
        {
            "CustomerID": "ANATR",
            "CompanyName": "Ana Trujillo Emparedados y helados",
            "orders": [
                {
                    "OrderID": "10308",
                    "CustomerID": "ANATR",
                    "OrderDate": "09/18/1996 12:00:00 000 am",
                    "orderItems": [
                        {
                            "OrderID": "10308",
                            "ProductID": "69",
                            "Quantity": "1",
                            "UnitPrice": "3"
                        },
                        {
                            "OrderID": "10308",
                            "ProductID": "70",
                            "Quantity": "5",
                            "UnitPrice": "12"
                        }
                    ]
                }
            ]
        }
]
%str%

dim out as c = extension::JSON::JSONShred(JSON,schema)	
]]></example>            
        </section>
        <section>
        <description>
           The output produced by the shredding operation is an object where the nested data is collected into arrays under a single top level object (called '__top' in this example because the optional topName parameter was not supplied).
        </description>
    <example>
<![CDATA[
{
    "__top": [
        {
            "CustomerID": "ALFKI",
            "CompanyName": "Alfreds Futterkistes"
        },
        {
            "CustomerID": "ANATR",
            "CompanyName": "Ana Trujillo Emparedados y helados"
        }
    ],
    "orders": [
        {
            "OrderID": "10643",
            "CustomerID": "ALFKI",
            "OrderDate": "08/25/1997 12:00:00 000 am"
        },
        {
            "OrderID": "10702",
            "CustomerID": "ALFKI",
            "OrderDate": "10/13/1997 12:00:00 000 am"
        },
        {
            "OrderID": "10308",
            "CustomerID": "ANATR",
            "OrderDate": "09/18/1996 12:00:00 000 am"
        }
    ],
    "OrderItems": [
        {
            "OrderID": "10643",
            "ProductID": "28",
            "Quantity": "15",
            "UnitPrice": "2"
        },
        {
            "OrderID": "10643",
            "ProductID": "39",
            "Quantity": "21",
            "UnitPrice": "18"
        },
        {
            "OrderID": "10702",
            "ProductID": "3",
            "Quantity": "6",
            "UnitPrice": "10"
        },
        {
            "OrderID": "10702",
            "ProductID": "76",
            "Quantity": "15",
            "UnitPrice": "18"
        },
        {
            "OrderID": "10308",
            "ProductID": "69",
            "Quantity": "1",
            "UnitPrice": "3"
        },
        {
            "OrderID": "10308",
            "ProductID": "70",
            "Quantity": "5",
            "UnitPrice": "12"
        }
    ]
}
]]></example>        
        </section>
    </sections>



</page>
