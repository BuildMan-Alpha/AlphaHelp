<page generated="true" api="xb" build="4142">
	<topic parent="Extension::Json" parentType="class" elementName="JsonForceObjectArray Method">extension::json JsonForceObjectArray Method</topic>
	<prototype static="true">.JsonForceObjectArray as c (json  as C [, fieldName as C])</prototype>
	<arguments>
		<argument>
			<name>json</name>
			<type>C</type>
			<description>Json to process arrays of non objects.</description>
		</argument>
		<argument>
			<name>fieldName</name>
			<type>C</type>
			<description>&#160;</description>
		</argument>
	</arguments>
	<description>Arrays of type other than object are wrapped in an object.</description>
	<discussion>
	    In the example below, the 'experience' array has strings , this function will quickly wrap all the strings in an object with a pprovided name (if name is ommitted, the name __value is defaulted).
	</discussion>
	<example>
<![CDATA[
dim json as c = <<%json%
[
   {
       "programmer" : "Fred" ,
       "experience" : [ "C++" , "Java" , "C#" , "Javascript" ]
   },
   {
       "programmer" : "Joe" ,
       "experience" : [ "C#" , "Javascript" , "Python" , "Go" ]
   }   
]
%json%

dim out as c = extension::json::JsonForceObjectArray(json) 
? json_reformat(out)
[
    {
        "programmer": "Fred",
        "experience": [
            {
                "language": "C++"
            },
            {
                "language": "Java"
            },
            {
                "language": "C#"
            },
            {
                "language": "Javascript"
            }
        ]
    },
    {
        "programmer": "Joe",
        "experience": [
            {
                "language": "C#"
            },
            {
                "language": "Javascript"
            },
            {
                "language": "Python"
            },
            {
                "language": "Go"
            }
        ]
    }
]
]]>	
	</example>
</page>
