<page generated="true" api="xb">
	<shortlink>api extension json templatereplace method</shortlink>
	<topic parent="Extension::Json" parentType="class" elementName="TemplateReplace Method">extension::json TemplateReplace Method</topic>
	<description>Replace template values embedded in JSON values.</description>
	<prototype static="true">.TemplateReplace as c (json as C, namedResource  as C [, variables  as A [, args  as P]])</prototype>
	<arguments>
		<argument>
			<name>json</name>
			<type>C</type>
			<description>Json to process</description>
		</argument>
		<argument>
			<name>namedResource</name>
			<type>C</type>
			<description>named resource to use for named resource credentail template entries.</description>
		</argument>
		<argument>
			<name>variables</name>
			<type>A</type>
			<description>Variables (properties or json) to replace in template.</description>
		</argument>
		<argument>
			<name>args</name>
			<type>P</type>
			<description>Arguments to replace in template.</description>
		</argument>
	</arguments>
	<returns>
		<return>
			<name>result</name>
			<type>c</type>
			<description>Returns processed JSON</description>
		</return>
	</returns>
	<discussion>
	   <p>Json TemplateReplace is the front end for extension::Curl::RequestTemplate(), but doesn't make a request.</p>
	   <p>If You want to see the request with replacements before it is posted to curl, you can use extension::json::TemplateReplace, then pass the returned JSON to the extension::Curl::Request()</p>
	</discussion>
    <example><![CDATA[
dim json as c = <<%json%
{
    firstname : "{firstname}",
    lastname : "{lastname}",
    city : ":city"
}
%json%

dim obj.firstname as c = "fred"
dim obj.lastname as c = "jones"
dim args as sql::Arguments
args.Add("city","Boston")

? extension::json::TemplateReplace(json,"",obj,args)
= {
    "firstname" : "fred",
    "lastname" : "jones",
    "city" : "Boston"
}   
]]></example>
</page>
