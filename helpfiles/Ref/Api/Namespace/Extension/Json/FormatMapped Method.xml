<page generated="true" api="xb" build="4346">
    <topic parent="Extension::Json" parentType="class" elementName="FormatMapped Method">extension::json FormatMapped Method</topic>
    <prototype static="true">dim reformatted_json as c = extension::Json::FormatMapped(jsonMap as C, json as C)</prototype>
    <description>Format mapped json (create the structured json).</description>
    <arguments>
        <argument>
            <name>jsonMap</name>
            <type>C</type>
            <description>Specifies the mapping of properties in the source JSON to properties in the desired JSON format.</description>
        </argument>
        <argument>
            <name>json</name>
            <type>C</type>
            <description>The JSON to format.</description>
        </argument>
    </arguments>
    <returns>
        <return>
            <name>reformatted_json</name>
            <types>
                <type>C</type>
            </types>
            <description>Returns the JSON reformatted based on the map specification.</description>
        </return>
    </returns>
    <discussion>
        <p>It is sometimes necessary to 'reshape' a JSON document, changing property names, creating arrays and objects from properties, etc.</p>
        <p>The *[xbasic:extension::JSON::FormatMapped()]* method allows you to do this.</p>
        <p>The method takes two arguments:</p>
    </discussion>
    <sections>
        <section>
            <list bullet="true">
                <item>
                    <name>A map that describes how the JSON should be reshaped (the map is itself a JSON document)</name>
                </item>
                <item>
                    <name>A JSON file that contains the JSON data to reshape</name>
                </item>
            </list>
        </section>
        <section>
            <description>For example, consider the following input JSON file:</description>
        </section>
        <section>
            <example code="xb">
                <![CDATA[
dim jsonIn as c
jsonIn = <<%str%
{
    "id" : "001",
    "fname" : "John" ,
    "lname" : "Doe",
    "address1" : "12 Main Street",
    "address2" : "Box 20"
}
%str%
]]>
            </example>
        </section>
        <section>
            <description>Suppose you want to reshape this JSON document so that it looks like the JSON below:</description>
            <example code="json"><![CDATA[{
    "person": {
        "id": "001",
        "firstname": "john",
        "lastname": "public",
        "address": [
            "12 Main Street",
            "box 20"
        ]
    }
}]]></example>
        </section>
        <section>
            <description>To transform the JSON, a Map definition needs to be created. The Map defines how the JSON properties in the source JSON format "map" to properties in the destination JSON format. Map definition shown below would transform the input JSON file above into the desired transformation:</description>
        </section>
        <section>
            <example code="json">
                <![CDATA[
dim jsonMap as c = <<%str%
{
    "person" : {
        "id" : "id" ,
        "firstname" : "fname" ,
        "lastname" : "lname" ,
        "address" : [ "address1" , "address2" ]
    }
}
%str%
]]>
            </example>
        </section>
        <section>
            <description>
                <p>Notice that in the input JSON, there is a flat list of properties. The first name and last name properties are called "fname" and "lname".</p>
                <p>In the output document, the first name and last name properties are called "firstname" and "lastname", the two address fields are in an array called "address" and all of the properties are now a child of a new object called "person".</p>
                <p>Using the Map definition, the input JSON can be transformed into the desired format using the *[xb:FormatMapped]* method:</p>
            </description>
        </section>
        <section>
            <example code="xb"><![CDATA[dim jsonOut as c
jsonOut = extension::Json::FormatMapped(jsonmap,jsonin)
jsonOut2 = json_reformat(jsonOut) 'format the JSON]]></example>
        </section>
    </sections>
</page>
