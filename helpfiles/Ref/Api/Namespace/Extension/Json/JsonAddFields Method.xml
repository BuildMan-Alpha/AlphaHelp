<page generated="true" api="xb">
	<topic>extension::json JsonAddFields Method</topic>
	<prototype static="true">.JsonAddFields as c (json as C, jsonFieldtemplate as C)</prototype>
	<arguments>
		<argument>
			<name>json</name>
			<type>C</type>
			<description>JSON to process.</description>
		</argument>
		<argument>
			<name>jsonFieldtemplate</name>
			<type>C</type> 		
			<description>Template with 'shape' of JSON to process, including fields to add. In addition to fields specified by {&lt;fieldname&gt;}, 
			there are built fields, described below.</description>			
			<list>
            <item>
                <name>{./begincurly}</name>
                <description>Emit a '{' in the template.</description>
            </item>
            <item>
                <name>{./endcurly}</name>
                <description>Emit a '}' in the template.</description>
            </item>
            <item>
                <name>{./number}</name>
                <description>When included, Emit this field as a numeric value rather than string value.</description>
            </item>
            <item>
                <name>{./logical}</name>
                <description>When included, Emit this field as a logical value rather than string value.</description>
            </item>
            <item>
                <name>{./replace}</name>
                <description>When included, indicate that this field replaces an existing field (remove the field if it exists).</description>
            </item>
            <item>
                <name>{./delete}</name>
                <description>The field named is not emitted, but instead causes an existing field to be removed.</description>
            </item>
            <item>
                <name>{./wrap}</name>
                <description>Emits an object field that 'contains' all the fields that follow (including the existing fields).</description>
            </item>
            <item>
                <name>{./row}</name>
                <description>Emit counter for the 'row' in the current branch.</description>
            </item>
            <item>
                <name>{./count}</name>
                <description>Emit the number of rows in the current branch.</description>
            </item>
            <item>
                <name>{./index}</name>
                <description>Emit counter for the 'row' from that first branch to the current location.</description>
            </item>
            <item>
                <name>{./start}</name>
                <description>Emit the 'index' for the first row in the current branch.</description>
            </item>
            <item>
                <name>{./rowz}</name>
                <description>Emit counter for the 'row' in the current branch, but assume numbering starts a '0' instead of '1'.</description>
            </item>
            <item>
                <name>{./indexz}</name>
                <description>Emit counter for the 'row' from that first branch to the current location, but assume numbering starts a '0' instead of '1'.</description>
            </item>
            <item>
                <name>{./startz}</name>
                <description>Emit the 'index' for the first row in the current branch, but assume numbering starts a '0' instead of '1'.</description>
            </item>
            <item>
                <name>{./&lt;child&gt;/./start}</name>
                <description>Emit the 'start' Index of the first entry in a specified child array field.</description>
            </item>
            <item>
                <name>{./&lt;child&gt;/./count}}</name>
                <description>Emit the count  of the entries in a specified child array field.</description>
            </item>
            <item>
                <name>{./&lt;child&gt;/./startz}</name>
                <description>Emit the 'start' Index of the first entry in a specified child array field, but assume numbering starts a '0' instead of '1'.</description>
            </item>
        </list>
		</argument>
	</arguments>
	<description>Adds fields from a template that matches the 'shape' of the input json.</description>
	<discussion>
	    This function allows for fields to be added, populated using a template.  The template is populated from field references enclosed in '{}', 
	    parent object fields can be pulled in using a "../" prefix on the field, multiple "../" prefix in front  of a field can look up multiple levels (i.e. 
	    grandparent).
	</discussion>
	<example>
<![CDATA[
dim schema as c 
schema = <<%str%
[
    {
        "orders" : [
            {
                "RecordId" : "{../CustomerID} {OrderId}",                
                "OrderItems" : [
                  {
                      "OrderID" : "{../OrderId}"
                  }
                ]
            }
        ]
    }
]
%str%

dim json as c = <<%str%
[
        {
            "CustomerID": "ALFKI",
            "CompanyName": "Alfreds Futterkistes",
            "orders": [
                {
                    "OrderID": "10643",
                    "OrderDate": "08/25/1997 12:00:00 000 am",
                    "orderItems": [
                        {
                            "ProductID": "28",
                            "Quantity": "15",
                            "UnitPrice": "2"
                        },
                        {
                            "ProductID": "39",
                            "Quantity": "21",
                            "UnitPrice": "18"
                        }
                    ]
                } 
            ]
        }
]
%str%

dim out as c = extension::JSON::JsonAddFields(json,schema)
? out
[
    {
        "CustomerID": "ALFKI",
        "CompanyName": "Alfreds Futterkistes",
        "orders": [
            {
                "RecordId": "ALFKI 10643",
                "OrderID": "10643",
                "OrderDate": "08/25/1997 12:00:00 000 am",
                "orderItems": [
                    {
                        "OrderID": "10643",
                        "ProductID": "28",
                        "Quantity": "15",
                        "UnitPrice": "2"
                    },
                    {
                        "OrderID": "10643",
                        "ProductID": "39",
                        "Quantity": "21",
                        "UnitPrice": "18"
                    }
                ]
            }
        ]
    }
]
]]>	
	</example>
	<sections>
	<section>
	<title>Escaped Curly Brace Support</title>
	<description>
	   If you want to generate curly braces in the template, you can use the *[{./begincurly}]* and *[{./endcurly}]* built in template fields.
    </description>	
	<example><![CDATA[
dim json as c = <<%str%
[
   { "id" : "a" },
   { "id" : "b" }   
]
%str%
dim tmpl as c = <<%str%
[
  {
    "IdInBrackets" : "{./begincurly}{id}{./endcurly}"
  }
]
%str%
dim out as c = extension::JSON::JsonAddFields(json,tmpl)
? json_reformat(out)
[
    {
        "IdInBrackets": "{a}",
        "id": "a"
    },
    {
        "IdInBrackets": "{b}",
        "id": "b"
    }
]
	]]></example>
	</section>
	<section>
	<title>Row Counter support</title>
	<description>
	   The *[{./row}]* builtin template field Adds a row counter that starts at '1'.  
	   If you want a row counter that starts a '0' use the *[{./rowz}]* builtin template 
	   field instead.
    </description>	
	<example><![CDATA[
dim json as c = <<%str%
[
   { "id" : "a" ,
     "kids" : [
        { "subid" : "aa" },
        { "subid" : "ab" }
     ]
   },
   { "id" : "b" ,
     "kids" : [
        { "subid" : "ba" },
        { "subid" : "bb" },
        { "subid" : "bc" }
     ]
   }   
]
%str%
dim tmpl as c = <<%str%
[
  {
     "kids" : [
       {
         "index" : "{./row}"
       }
     ]
  }
]
%str%
dim out as c = extension::JSON::JsonAddFields(json,tmpl)
? json_reformat(out)
[
    {
        "id": "a",
        "kids": [
            {
                "index": "1",
                "subid": "aa"
            },
            {
                "index": "2",
                "subid": "ab"
            }
        ]
    },
    {
        "id": "b",
        "kids": [
            {
                "index": "1",
                "subid": "ba"
            },
            {
                "index": "2",
                "subid": "bb"
            },
            {
                "index": "3",
                "subid": "bc"
            }
        ]
    }
]
	]]></example>
	</section>
	<section>
	<title>Consecutive Row Counter support</title>
	<description>
	   The *[{./index}]* builtin template field Adds a row counter that starts at '1', 
	   the difference between *[{./index}]* and *[{./row}]* is that while *[{./row}]* is
	   reset for every new child, *[{./index}]* never gets reset so it reflects the
	   Consecutive row for all records of the same type.  
	   If you want a row counter that starts a '0' use the *[{./indexz}]* builtin template 
	   field instead.
    </description>	
<example><![CDATA[
'Date Created: 14-Feb-2017 11:00:55 AM
'Last Updated: 14-Feb-2017 11:00:55 AM
'Created By  : Cian
'Updated By  : Cian
dim json as c = <<%str%
[
   { "id" : "a" ,
     "kids" : [
        { "subid" : "aa" },
        { "subid" : "ab" }
     ]
   },
   { "id" : "b" ,
     "kids" : [
        { "subid" : "ba" },
        { "subid" : "bb" },
        { "subid" : "bc" }
     ]
   }   
]
%str%
dim tmpl as c = <<%str%
[
  {
     "kids" : [
       {
         "index" : "{./index}"
       }
     ]
  }
]
%str%
dim out as c = extension::JSON::JsonAddFields(json,tmpl)
? json_reformat(out)
[
    {
        "id": "a",
        "kids": [
            {
                "index": "1",
                "subid": "aa"
            },
            {
                "index": "2",
                "subid": "ab"
            }
        ]
    },
    {
        "id": "b",
        "kids": [
            {
                "index": "3",
                "subid": "ba"
            },
            {
                "index": "4",
                "subid": "bb"
            },
            {
                "index": "5",
                "subid": "bc"
            }
        ]
    }
]
]]></example>	
	</section>
	<section>
	<title>Start Index and Row Count Support </title>
	<description>
	   The *[{./start}]* and *[{./count}]* builtin template fields retreive the first 'index' in
	   the current set of rows, and the number of rows in the current set of rows.	If zero based index is preferred  use the*[{./startz}]* built in field.
    </description>	
<example><![CDATA[	
dim json as c = <<%str%
[
   { "id" : "a" ,
     "kids" : [
        { "subid" : "aa" },
        { "subid" : "ab" }
     ]
   },
   { "id" : "b" ,
     "kids" : [
        { "subid" : "ba" },
        { "subid" : "bb" },
        { "subid" : "bc" }
     ]
   }   
]
%str%
dim tmpl as c = <<%str%
[
  {
     "kids" : [
       {
          "index" : "{./index}",
          "start" : "{./start}",
          "count" : "{./count}"
       }
     ]
  }
]
%str%
dim out as c = extension::JSON::JsonAddFields(json,tmpl)
? json_reformat(out)	
[
    {
        "id": "a",
        "kids": [
            {
                "index": "1",
                "start": "1",
                "count": "2",
                "subid": "aa"
            },
            {
                "index": "2",
                "start": "1",
                "count": "2",
                "subid": "ab"
            }
        ]
    },
    {
        "id": "b",
        "kids": [
            {
                "index": "3",
                "start": "3",
                "count": "3",
                "subid": "ba"
            },
            {
                "index": "4",
                "start": "3",
                "count": "3",
                "subid": "bb"
            },
            {
                "index": "5",
                "start": "3",
                "count": "3",
                "subid": "bc"
            }
        ]
    }
]	
]]></example>	
	</section>
	<section>
	<title>Count and Start of a Child</title>
	<description>
	   The *[{./&lt;child&gt;/./start}]* and *[{./&lt;child&gt;/./count}]* builtin template fields retreive the first 'index' in
	   the specified child of the current row, and the number of rows in the specified child.	If zero based index is preferred 
	   use the*[{./&lt;child&gt;/./startz}]* built in field.
    </description>	
<example><![CDATA[	
dim json as c = <<%str%
[
   { "id" : "a" ,
     "kids" : [
        { "subid" : "aa" },
        { "subid" : "ab" }
     ]
   },
   { "id" : "b" ,
     "kids" : [
        { "subid" : "ba" },
        { "subid" : "bb" },
        { "subid" : "bc" }
     ]
   }   
]
%str%
dim tmpl as c = <<%str%
[
  {
     "kidstart" : "{./number}{./kids/./start}",
     "nkid" : "{./number}{./kids/./count}",
     "kids" : [
       {
       }
     ]
  }
]
%str%
dim out as c = extension::JSON::JsonAddFields(json,tmpl)
? json_reformat(out)
[
    {
        "kidstart": 1,
        "nkid": 2,
        "id": "a",
        "kids": [
            {
                "subid": "aa"
            },
            {
                "subid": "ab"
            }
        ]
    },
    {
        "kidstart": 3,
        "nkid": 3,
        "id": "b",
        "kids": [
            {
                "subid": "ba"
            },
            {
                "subid": "bb"
            },
            {
                "subid": "bc"
            }
        ]
    }
]
]]></example>

	</section>
	</sections>
	
</page>
