<page>
	<topic>DotNet::Services.RegisterClass Method</topic>
			<description>Connects a single class in a .NET assembly to the Alpha Anywhere type system within a namespace.</description>

	<syntax>RegisterClass as L (
     ParentNamespace as C,
     AssignedClassName as C,
     SourceClassName	as C,
     Assembly as DotNet::AssemblyReference = null_value())</syntax>
	<arguments>
		<argument>
			<name>ParentNameSpace</name>
			<description>Optional. If an empty string is provided, the class is registered under the DotNet namespace.</description>
		</argument>
		<argument>
			<name>AssignedClassName</name>
			<description>Optional. If an empty string is provided the class is registered using the full class name. All namespaces in the path will be added to the parent namespace.</description>
		</argument>
		<argument>
			<name>Assembly</name>
			<description>Optional. If not supplied, the class will be loaded from the GAC. If the Assembly is not provided and the class is not in the GAC, the registration will fail.</description>
		</argument>
		
	</arguments>
	
	<sections>
		<section>
			<note>Before writing production code that uses this method inside a function, consider creating a class wrapper as described in this article.</note>
		</section>
		
	</sections>
	
	
	
		<sections>
		<section>
			<title>Discussion</title>
			<description>RegisterClass() connects a single class in a .NET assembly to the Alpha Anywhere type system within a namespace. Once the class is registered, which is required once per execution of Alpha Anywhere, instances can be DIMmed in any script.

</description>
			<note>You can completely rename the type (from the Xbasic perspective) and use the new name whenever you DIM a variable of that type.
</note>
		</section>
		
		
		
	</sections>
	<sections>
		<section>
			<title>Examples of registration results:</title>
			
		</section>
		<section>
			
			
			<cases>
				<case>
					<title>Parent Namespace</title>
					<description>""</description>
				</case>
				<case>
					<title>Assigned ClassName</title>
					<description>""</description>
				</case>
				<case>
					<title>SourceClassName</title>
					<description>System.Text.StringBuilder</description>
				</case>
				<case>
					<title>Resulting Type </title>
					<description>DotNet::System::Text::StringBuilder </description>
				</case>
				
			</cases>
			
			
		</section>
		<section>
			<cases>
				<case>
					<title>Parent Namespace</title>
					<description>"Foo"</description>
				</case>
				<case>
					<title>Assigned ClassName</title>
					<description>""</description>
				</case>
				<case>
					<title>SourceClassName</title>
					<description>System.Text.StringBuilder</description>
				</case>
				<case>
					<title>Resulting Type </title>
					<description>Foo::System::Text::StringBuilder </description>
				</case>
				
			</cases>
			
		</section>
		<section>
			<cases>
				<case>
					<title>Parent Namespace</title>
					<description>"Bar"</description>
				</case>
				<case>
					<title>Assigned ClassName</title>
					<description>"Mine"</description>
				</case>
				<case>
					<title>SourceClassName</title>
					<description>System.Text.StringBuilder</description>
				</case>
				<case>
					<title>Resulting Type </title>
					<description>Bar::Mine</description>
				</case>
				
			</cases>
			
			
		</section>
	</sections>
	<sections>
		<section>
			<title>Example Usage:</title>
			<description>Registering a system type.</description>
			<example><![CDATA[Dim Services as DotNet::Services
If Services.RegisterClass( "MyNameSpace", "StringBuilder",\
         "System.Text.StringBuilder") 
    Dim Instance as MyNameSpace::StringBuilder
Else
    UI_Msg_Box("Error registering class " + Assy.FullName,\
         Services.CallResult.Text)
End if ]]></example>
		</section>
		<section>
			<description>The StringBuilder class is cached in the GAC, so this registration will succeed. Some less-used System classes are not cached in the GAC and will require an assembly reference to load successfully. The DotNetPath function can be used to supply the standard location for the DLLs in the System and Microsoft namespaces.

 You can easily determine if a class is in the GAC using the Alpha Anywhere Interactive window:</description>
			<example><![CDATA[dim Sv as DotNet::Services
?Sv.RegisterClass("", "", "")
= .F.
?Sv.RegisterClass("", "", "System.Text.StringBuilder")
= .T. ]]></example>
		</section>
		<section>
			<description>See the Big Integers sample for working code to register a class in the System or Microsoft namespace that is not in the GAC.
Registering a single class from an assembly on disk:</description>
			<example><![CDATA[Dim Services    as DotNet::Services
Dim Assy	as DotNet::AssemblyReference
Assy.FileName	= "System.Numerics.BigInteger"
 
If Services.RegisterClass("MyNameSpace", \
  "",  \
  "", \
  Assy) 
    Dim Instance as MyNameSpace::StringBuilder
else
    UI_Msg_Box("System.Text.StringBuilder" + \
        Assy.FullName, Services.CallResult.Text)
End if ]]></example>
		</section>
		<section>
			<description>While the Assy.FileName in this example is given without a full path, it is often necessary to provide a full path to register a class successfully from a DLL.</description>
			
		</section>
	</sections>
<see>
	<ref>.NET Framework Support in Alpha Anywhere</ref>
	<ref>DotNet::AssemblyReference</ref>
	<ref>DotNet::Services</ref>
	<ref href="/documentation/index?search=DotNet::Services.CreateObject Method">CreateObject Method</ref>
	<ref href="/documentation/index?search=DotNet::Services.CallStaticFunction Method">CallStaticFunction Method</ref>
	<ref href="/documentation/index?search=DotNet::Services.ConstructGenericTypeName Static Method">ConstructGenericTypeName Method</ref>
	<ref href="/documentation/index?search=DotNet::Services.GetStaticProperty Method">GetStaticProperty Method</ref>
	<ref href="/documentation/index?search=SetStaticProperty Method">SetStaticProperty Method</ref>
	<ref href="/documentation/index?search=DotNet::Services.RegisterClass Method">RegisterClass Method</ref>
	<ref href="/documentation/index?search=DotNet::Services.RegisterAssembly Method">RegisterAssembly Method</ref>
	<ref href="/documentation/index?search=DotNet::Services.RegisterNamespace Method">RegisterNamespace Method</ref>
	<ref href="/documentation/index?search=DotNet::Services.GenerateWebServiceClientFromURL Method">GenerateWebServiceClientFromURL Method</ref>
	<ref href="/documentation/index?search=DotNet::Services.GenerateWebServiceClientFromWSDL Method">GenerateWebServiceClientFromWSDL Method</ref>
	<ref href="/documentation/index?search=Preloaded .NET Classes">Preloaded .NET Classes </ref>
	<ref href="/documentation/index?search=Writing Xbasic wrapper classes for .NET classes">Writing Xbasic wrapper classes for .NET classes </ref>
	<ref href="/documentation/index?search=DotNetPath Function">DotNetPath Function</ref>
	<ref>DotNet Examples </ref>
</see>	
	
	
</page>