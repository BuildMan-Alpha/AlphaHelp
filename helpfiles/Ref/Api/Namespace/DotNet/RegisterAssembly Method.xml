<page api="xb">
	<shortlink>api dotnet namespace services class register assembly method</shortlink>
	<topic>DotNet::Services.RegisterAssembly Method</topic>
	<description>Connects an assembly and all of its classes to the Alpha Anywhere type system within a namespace
</description>
	<syntax>RegisterAssembly as L (ParentNamespace as C, Assembly as DotNet::AssemblyReference)</syntax>
	
	<sections>
		<section>
			<description>RegisterAssembly() connects an assembly and all of its classes to the Alpha Anywhere type system within a namespace
 The basic idea here is that you can "register" a .NET assembly in an Alpha Anywhere namespace and use it as if it were built in. This type can be DIMmed in any script after the type is registered.
 Once the assembly is registered, which is required once per execution of Alpha Anywhere, instances can be DIMmed for each of its classes in any script.
</description>
			<note>ParentNameSpace is optional. If an empty string is provided, the class is registered under the DotNet namespace.
</note>
		</section>
		
	</sections>
	
	<sections>
		<section>
			<title>Example</title>
			<description>Adding an assembly from the global assembly cache to the XBasic type system.</description>
			<example><![CDATA[Dim Assy          as DotNet::AssemblyReference
Dim Services      as DotNet::Services
 
Assy.Name                    = "SampleAssembly"
Assy.Version                 = "1.0.2004.0"
Assy.Culture                 = "neutral"
Assy.PublicKeyToken          = "8744b20f8da049e3"
 
If .not. Services.RegisterAssembly("MyNameSpace",  Assy) 
    UI_Msg_Box("Error registering assembly " + \
       Assy.Name, Services.CallResult.Text)
    End 
End if
 
Dim Instance as MyNameSpace::MyClass ]]></example>
			
		</section>
		
	</sections>
	
<see>
	<ref>.NET Framework Support in Alpha Anywhere</ref>
	<ref>DotNet::AssemblyReference</ref>
	<ref>DotNet::Services</ref>
	<ref link="DotNet::Services.CreateObject Method">CreateObject Method</ref>
	<ref link="DotNet::Services.CallStaticFunction Method">CallStaticFunction Method</ref>
	<ref link="DotNet::Services.ConstructGenericTypeName Static Method">ConstructGenericTypeName Method</ref>
	<ref link="DotNet::Services.GetStaticProperty Method">GetStaticProperty Method</ref>
	<ref link="SetStaticProperty Method">SetStaticProperty Method</ref>
	<ref link="DotNet::Services.RegisterClass Method">RegisterClass Method</ref>
	<ref link="DotNet::Services.RegisterAssembly Method">RegisterAssembly Method</ref>
	<ref link="DotNet::Services.RegisterNamespace Method">RegisterNamespace Method</ref>
	<ref link="DotNet::Services.GenerateWebServiceClientFromURL Method">GenerateWebServiceClientFromURL Method</ref>
	<ref link="DotNet::Services.GenerateWebServiceClientFromWSDL Method">GenerateWebServiceClientFromWSDL Method</ref>
	<ref link="Preloaded .NET Classes">Preloaded .NET Classes </ref>
	<ref link="Writing Xbasic wrapper classes for .NET classes">Writing Xbasic wrapper classes for .NET classes </ref>
	<ref link="DotNetPath Function">DotNetPath Function</ref>
	<ref>DotNet Examples </ref>
</see>	
</page>