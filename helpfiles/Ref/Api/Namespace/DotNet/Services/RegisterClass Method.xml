<page api="xb">
    <shortlink>api dotnet namespace services class register class method</shortlink>
    <topic>DotNet::Services.RegisterClass Method</topic>
    <description>Connects a single class in a .NET assembly to the Alpha Anywhere type system within a namespace.</description>
    <prototype>dim Result as L = RegisterClass(ParentNamespace as C, AssignedClassName as C, SourceClassName as C, Assembly as DotNet::AssemblyReference = null_value())</prototype>
    <arguments>
        <argument>
            <name>ParentNameSpace</name>
            <type>C</type>
            <description>If an empty string is provided, the class is registered under the DotNet namespace.</description>
        </argument>
        <argument>
            <name>AssignedClassName</name>
            <type>C</type>
            <description>If an empty string is provided the class is registered using the full class name. All namespaces in the path will be added to the parent namespace.</description>
        </argument>
        <argument>
            <name>SourceClassName</name>
            <type>C</type>
            <description></description>
        </argument>
        <argument optional="true">
            <name>Assembly</name>
            <type>DotNet::AssemblyReference</type>
            <description>If not supplied, the class will be loaded from the [GAC]. If the Assembly is not provided and the class is not in the GAC, the registration will fail.</description>
        </argument>
    </arguments>
    <returns>
        <return>
            <name>Result</name>
            <type>L</type>
            <description>Returns .t. or .f. whether or not the operation succeeds. The DotNet::Services CallResult property will contain additional information about the error.</description>
        </return>
    </returns>
    <discussion>RegisterClass() connects a single class in a .NET assembly to the Alpha Anywhere type system within a namespace. Once the class is registered, which is required once per execution of Alpha Anywhere, instances can be DIMmed in any script.</discussion>
    <sections>
        <section>
            <note>Before writing production code that uses this method inside a function, consider creating a class wrapper as described in [this article].</note>
        </section>
        <section>
            <note>You can completely rename the type (from the Xbasic perspective) and use the new name whenever you DIM a variable of that type.</note>
        </section>
        <section>
            <title>Examples of registration results:</title>
            <description>
                <table>
                    <tr><th>Parent Namespace</th><th>Assigned ClassName</th><th>Source ClassName</th><th>Resulting Type</th></tr>
                    <tr><td>""</td><td>""</td><td>System.Text.StringBuilder</td><td>DotNet::System::Text::StringBuilder</td></tr>
                    <tr><td>"Foo"</td><td>""</td><td>System.Text.StringBuilder</td><td>Foo::System::Text::StringBuilder</td></tr>
                    <tr><td>"Bar"</td><td>"Mine"</td><td>System.Text.StringBuilder</td><td>Bar::Mine</td></tr>
                </table>
            </description>
        </section>
        <section>
            <title>Example Usage:</title>
            <description>Registering a system type.</description>
            <example>
                <![CDATA[Dim Services as DotNet::Services
If Services.RegisterClass( "MyNameSpace", "StringBuilder",\
 "System.Text.StringBuilder") 
 Dim Instance as MyNameSpace::StringBuilder
Else
 UI_Msg_Box("Error registering class " + Assy.FullName,\
 Services.CallResult.Text)
End if ]]>
            </example>
        </section>
        <section>
            <description>
                <p>The StringBuilder class is cached in the GAC, so this registration will succeed. Some less-used System classes are not cached in the GAC and will require an assembly reference to load successfully. The [DotNetPath function] can be used to supply the standard location for the DLLs in the System and Microsoft namespaces.</p>
                <p>You can easily determine if a class is in the GAC using the Alpha Anywhere Interactive window:</p>
            </description>
            <example>
                <![CDATA[dim Sv as DotNet::Services
? Sv.RegisterClass("", "", "")
= .F.

? Sv.RegisterClass("", "", "System.Text.StringBuilder")
= .T. ]]>
            </example>
        </section>
        <section>
            <description>
                <p>See the [Big Integers example] for working code to register a class in the System or Microsoft namespace that is not in the GAC.</p>
                <p>Registering a single class from an assembly on disk:</p>
            </description>
            <example><![CDATA[Dim Services as DotNet::Services
Dim Assy as DotNet::AssemblyReference
Assy.FileName = "System.Numerics.BigInteger"

If Services.RegisterClass("MyNameSpace", "", "", Assy)
    Dim Instance as MyNameSpace::StringBuilder
else
    UI_Msg_Box("System.Text.StringBuilder" + \
End if ]]></example>
        </section>
        <section>
            <description>While the Assy.FileName in this example is given without a full path, it is often necessary to provide a full path to register a class successfully from a DLL.</description>
        </section>
    </sections>
    <links>
        <link link="server ref gac">GAC</link>
        <link link="server xb Writing Xbasic wrapper classes for dotNET classes">this article</link>
        <link link="api dotnet path function">DotNetPath function</link>
        <link link="server DotNet Example Big Integers">Big Integers example</link>
    </links>
</page>