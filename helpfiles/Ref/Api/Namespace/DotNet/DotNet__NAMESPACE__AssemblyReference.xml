<page api="xb">
	<topic>DotNet::AssemblyReference Class</topic>
	
	
	<description>Defines an assembly by either referencing a file or through elements that make up the canonical name.</description>
	<discussion>AssemblyReference is a data-only class that defines an assembly by either referencing a file or through elements that make up the canonical name. The purpose of this class is to simplify calling functions on the DotNet::Services object.
 Canonical names are used to reference assemblies that are registered in the .NET Global Assembly Cache (GAC). The use of this cache allows for sharing of assemblies (much like installing a DLL into System32 or registering an OLE type with multiple versions). The objective is to be sure that multiple versions of an assembly can coexist in a managed way.
 Referencing an assembly by file name (typically a "private assembly") is used for assemblies that are NOT registered in the global cache and are stored in a directory the application knows how to find.</discussion>
	
	
	<properties>
		<property>
			<name>FileName</name>
			<type>C</type>
			<description>-</description>
		</property>
		<property>
			<name>Name</name>
			<type>C</type>
			<description>-</description>
		</property>
		<property>
			<name>Version</name>
			<type>C</type>
			<description>-</description>
		</property>
		<property>
			<name>Culture</name>
			<type>C</type>
			<description>-</description>
		</property>
		<property>
			<name>PublicKeyToken</name>
			<type>C</type>
			<description>-</description>
		</property>
		<property>
			<name>FullName</name>
			<type>C</type>
			<description>Read Only</description>
		</property>
		
		
	</properties>
	
	<sections>
		<section>
			<note>This class is not intended to replace the .NET class System.Reflection.AssemblyName. Its sole purpose is to describe an assembly that is to be loaded in the functions below.</note>
		</section>
	</sections>
	
	
	<sections>
		<section>
			<title>Example</title>
			<steps>
				<step>
					<description>Create a reference to an assembly by file name.
</description>
					<example><![CDATA[Dim Assy as DotNet::AssemblyReference
 
Assy.FileName = MyAssembly.dll]]></example>
				</step>
				<step>
					<description>Create a reference to an assembly by name, version, culture and public key token.
</description>
					<example><![CDATA[Dim Assy          as DotNet::AssemblyReference
 
Assy.Name		= "SampleAssembly"
Assy.Version		= "1.0.2004.0"
Assy.Culture		= "neutral"
Assy.PublicKeyToken	= "8744b20f8da049e3"]]></example>
				</step>
			</steps>
		</section>
		<section>
			<description>When an instance of this class is passed to one of the functions in the DotNet::Services class, FileName takes precedence.</description>
			<cases>
				<case>
					<description>If FileName is populated, the assembly will be loaded from the path and file provided. </description>
				</case>
				<case>
					<description>If FileName is empty, the called function will construct the canonical form of the name to use in loading the assembly; for example "SampleAssembly, Version=1.0.2004.0, Culture=neutral, PublicKeyToken=8744b20f8da049e3" </description>
				</case>
			</cases>
		</section>
		
		
	</sections>
	
<see>
	<ref>.NET Framework Support in Alpha Anywhere</ref>
	<ref>DotNet::AssemblyReference</ref>
	<ref>DotNet::Services</ref>
	<ref link="DotNet::Services.CreateObject Method">CreateObject Method</ref>
	<ref link="DotNet::Services.CallStaticFunction Method">CallStaticFunction Method</ref>
	<ref link="DotNet::Services.ConstructGenericTypeName Static Method">ConstructGenericTypeName Method</ref>
	<ref link="DotNet::Services.GetStaticProperty Method">GetStaticProperty Method</ref>
	<ref link="SetStaticProperty Method">SetStaticProperty Method</ref>
	<ref link="DotNet::Services.RegisterClass Method">RegisterClass Method</ref>
	<ref link="DotNet::Services.RegisterAssembly Method">RegisterAssembly Method</ref>
	<ref link="DotNet::Services.RegisterNamespace Method">RegisterNamespace Method</ref>
	<ref link="DotNet::Services.GenerateWebServiceClientFromURL Method">GenerateWebServiceClientFromURL Method</ref>
	<ref link="DotNet::Services.GenerateWebServiceClientFromWSDL Method">GenerateWebServiceClientFromWSDL Method</ref>
	<ref link="Preloaded .NET Classes">Preloaded .NET Classes </ref>
	<ref link="Writing Xbasic wrapper classes for .NET classes">Writing Xbasic wrapper classes for .NET classes </ref>
	<ref link="DotNetPath Function">DotNetPath Function</ref>
	<ref>DotNet Examples </ref>
</see>
		
	
	
	
	
	
	
</page>