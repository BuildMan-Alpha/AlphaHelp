<page>
    <shortlink>api Active Directory Domain ValidateCredentials method</shortlink>
    <topic>ValidateCredentials Method</topic>
    <prototypes>
		<prototype>ValidateCredentials as L (userId as C, password as C)</prototype>
	</prototypes>
    <description>
		Validate a user's credentials, userId and password, against and Active Directory domain.
	</description>
	<arguments>
        <argument>
            <name>userId</name>
            <type>C</type>
            <description>The user id/name of a user.</description>
        </argument>
        <argument>
            <name>password</name>
            <type>C</type>
            <description>The password for the userId.</description>
        </argument>
	</arguments>
	<returns>
        <return>
            <name>user</name>
            <types>
                <type>L</type>
            </types>
            <description>
			<p>Returns .T. if a user and password are valid. .F. if either are invalid. Check the domain object's CallResult to see if the method succeeds. The CallResult.Code will contain a reason for the invalid credentials if validation fails.</p>
			<p>It is best practice to reveal as little as possible to an end user on authentication failure. An attacker knowing a "user doesn't exist" means they will keep on trying until 
			they find a name that doesn't return that error and then they'll know they'll have a valid user name. On the other hand, generic authentication error messages may cause more support
			calls. Authentication errors should be logged in a secure way so that an authorized person can provide support to the user failing to log in.</p>
			<p>
			On failure possible CallResult.Code values are
				<list>
					<item>
						<name>WindowsServices::ActiveDirectory::Domain::VALIDATE_CREDENTIALS_USER_DOESNT_EXIST</name>
						<description>
							<p>Value 50004</p>
							<p>The user does not exist.</p>
						</description>
					</item>
					<item>
						<name>WindowsServices::AcitveDirectory::Domain::VALIDATE_CREDENTIALS_ACCOUNT_LOCKED_OUT</name>
						<description>
							<p>Value 50011</p>
							<p>The user is locked out from logging in.</p>
						</description>
					</item>
					<item>
						<name>WindowsServices::AcitveDirectory::Domain::VALIDATE_CREDENTIALS_CREDENTIALS_INVALID</name>
						<description>
							<p>Value 50008</p>
							<p>The userId or password is invalid.</p>
						</description>
					</item>
					<item>
						<name>WindowsServices::AcitveDirectory::Domain::VALIDATE_CREDENTIALS_SYSTEM_ERROR</name>
						<description>
							<p>Value 50012</p>
							<p>A system error occurred during credential validation. See the CallResult.Text for a more detailed message.</p>
						</description>
					</item>
				</list>
			</p>
			</description>
        </return>
    </returns>
    <sections>
        <section>
            <example><![CDATA['The follow line assumes that the machine is joined to an Active Directory domain and is allow to query Active Directory.
dim domain as WindowsServices::ActiveDirectory::Domain = new WindowsServices::ActiveDirectory::Domain()
if .not. domain.CallResult.Success then
	?"There was an error connecting to an Active Directory domain: " + domain.CallResult.Text + crlf()
	goto exitTestFunction
end if
	
?"The domain name is " + domain.Name + crlf()

dim userid as c = "JohnDoe"
dim password as c = "secret"

dim loggedIn as label

loggedIn = domain.ValidateCredentials(userid, password)
if .not. domain.CallResult.Success then
	if domain.CallResult.Code = WindowsServices::ActiveDirectory::Domain::VALIDATE_CREDENTIALS_SYSTEM_ERROR then
		?"Validate credentials failed for " + userId + ": " + domain.CallResult.Text + crlf()
	else
		?"Validate credentials failed: " + userId + ": " + domain.CallResult.Code + crlf()
	end if
	goto exitTestFunction
end if

?"The credentials for " + userid + " are valid."
	
exitTestFunction:
]]></example>
        </section>
    </sections>
</page>