<page api="xb">
	<shortlink>api inet namespace ssl context class index</shortlink>
	<topic>INET::SSLContext Class</topic>
	<properties>
	
		<property generated="true">
			<name>PrivateKeyFile</name>
			<type>C</type>
			<description>Type "C". String PrivateKeyFile property. The path and name of the private key file.
 </description>
		</property>
		<property generated="true">
			<name>CertificateFile</name>
			<type>C</type>
			<description>Type "C". The path and name of the SSL Server Certificate file.
</description>
		</property>
		<property generated="true">
			<name>CertificateAuthorityFile</name>
			<type>C</type>
			<description>Type "C". The path and name of the SSL Certificate Authority file.
</description>
		</property>
		<property generated="true">
			<name>CertificateChainFile</name>
			<type>C</type>
			<description>Type "C". The path and name of the SSL Certificate Chain file.
</description>
		</property>
		<property generated="true">
			<name>Password</name>
			<type>C</type>
			<description>Type "C". String Password property</description>
		</property>
		<property generated="true">
			<name>CallResult</name>
			<type></type>
			<description>Information about success or failure.
</description>
		</property>
		<property generated="true">
			<name>CipherList</name>
			<type>C</type>
			<description>Type "C". String CipherList property</description>
		</property>
		<property generated="true">
			<name>RequireValidCertificate</name>
			<type>L</type>
			<description>Type "L". Logical RequireValidCertificate property</description>
		</property>
	</properties>
	<!--list:.-->
<description>Methods for working with SSL certificates and encrypted data.</description>
<discussion>When using SSL, you need to provide a server side certificate, a private key, and often a password as part of the context. The INET::SSLSocket method automatically creates the context object, which can be accessed by referencing the Context property. Alternatively, you can create a context object and assign it to each new INET::SSLSocket. Since initializing the context is fairly expensive to establish, you can get better performance by sharing the context among sockets. 
</discussion>
  
  <sections><section><title>Example</title>
  <description>This example does not use the INET::SSLContext object.</description>
  <example><![CDATA[
dim Socket as INET::SSLSocket
Socket.Context.CertificateFile = CertificatePath + "secure.alphafiveonline.com.crt"
Socket.Context.PrivateKeyFile = CertificatePath + "secure.alphafiveonline.com.key"
Socket.Context.password = ""
  ]]></example>
  </section>
  
  <section>
  <description>This example uses the INET::SSLContext object.</description>
  <example><![CDATA[
dim Context as SQLContext
dim Socket as INET::SSLSocket
Context.CertificateFile = CertificatePath + "secure.alphafiveonline.com.crt"
Context.PrivateKeyFile = CertificatePath + "secure.alphafiveonline.com.key"
Context.password = ""
if .not. Context.EstablishContext()
' Check Context.callresult and write code to handle error
end if
Socket.Context = Context
  ]]></example>
  </section>
  
  </sections>
  
  <limitations>Desktop applications only.</limitations>
	<see>
		<ref>INET</ref>
	</see>
	
<terms>INET,socket,encryption,function,logical,object,password,performance,server side,string</terms>
	
</page>