<page api="xb">
	<shortlink>api inet namespace ssl socket class index</shortlink>
	<topic>INET::SSLSocket Class</topic>
	<description>Properties and methods in the SSLSocket class.</description>
	<properties>
		<property generated="true">
			<name>Context</name>
			<type></type>
			<description>Context property</description>
		</property>
		<property generated="true">
			<name>IsBusy</name>
			<type>L</type>
			<description>Logical IsBusy property</description>
		</property>
		<property generated="true">
			<name>IsOpen</name>
			<type>L</type>
			<description>Logical IsOpen property</description>
		</property>
		<property generated="true">
			<name>IsReadable</name>
			<type>L</type>
			<description>Logical IsReadable property</description>
		</property>
		<property generated="true">
			<name>IsWriteable</name>
			<type>L</type>
			<description>Logical IsWriteable property</description>
		</property>
		<property generated="true">
			<name>RemoteAddress</name>
			<type>C</type>
			<description>String RemoteAddress property</description>
		</property>
		<property generated="true">
			<name>LocalAddress</name>
			<type>C</type>
			<description>String LocalAddress property</description>
		</property>
		<property generated="true">
			<name>RemotePort</name>
			<type>N</type>
			<description>Numeric RemotePort property</description>
		</property>
		<property generated="true">
			<name>LocalPort</name>
			<type>N</type>
			<description>Numeric LocalPort property</description>
		</property>
		<property generated="true">
			<name>Handle</name>
			<type>N</type>
			<description>Numeric Handle property</description>
		</property>
		<property generated="true">
			<name>CallResult</name>
			<type></type>
			<description>CallResult property</description>
		</property>
		<property generated="true">
			<name>Blocking</name>
			<type>L</type>
			<description>Logical Blocking property</description>
		</property>
		<property generated="true">
			<name>Broadcast</name>
			<type>L</type>
			<description>Logical Broadcast property</description>
		</property>
		<property generated="true">
			<name>Debug</name>
			<type>L</type>
			<description>Logical Debug property</description>
		</property>
		<property generated="true">
			<name>Delay</name>
			<type>L</type>
			<description>Logical Delay property</description>
		</property>
		<property generated="true">
			<name>KeepAlive</name>
			<type>L</type>
			<description>Logical KeepAlive property</description>
		</property>
		<property generated="true">
			<name>Linger</name>
			<type>L</type>
			<description>Logical Linger property</description>
		</property>
		<property generated="true">
			<name>OutOfBandInLine</name>
			<type>L</type>
			<description>Logical OutOfBandInLine property</description>
		</property>
		<property generated="true">
			<name>Route</name>
			<type>L</type>
			<description>Logical Route property</description>
		</property>
		<property generated="true">
			<name>ReceiveBufferSize</name>
			<type>N</type>
			<description>Numeric ReceiveBufferSize property</description>
		</property>
		<property generated="true">
			<name>ReceiveTimeout</name>
			<type>N</type>
			<description>Numeric ReceiveTimeout property</description>
		</property>
		<property generated="true">
			<name>ReuseAddress</name>
			<type>L</type>
			<description>Logical ReuseAddress property</description>
		</property>
		<property generated="true">
			<name>SendBufferSize</name>
			<type>N</type>
			<description>Numeric SendBufferSize property</description>
		</property>
		<property generated="true">
			<name>SendTimeout</name>
			<type>N</type>
			<description>Numeric SendTimeout property</description>
		</property>
		<property generated="true">
			<name>BytesAvailable</name>
			<type>N</type>
			<description>Numeric BytesAvailable property</description>
		</property>
		<property generated="true">
			<name>IsListening</name>
			<type>L</type>
			<description>Logical IsListening property</description>
		</property>
	</properties>
	<!--list:.-->
<sections><section>
<description>The INET::SSLSocket object is a version of INET::Socket that supports reading and writing data between client and server computers. The following code provides an overview of how socket communications are designed.</description>

<list>
<item>
<name-title>Client Computer
</name-title>
<description-title>
 
Host Computer
 </description-title>
</item>

<item>
<name></name>
<description>



dim ServerSocket as INET::Socket
dim ClientSocket as INET::Socket
dim CTX as INET::SSLContext
 
Define CTX properties

ServerSocket.Listen()
ServerSocket.Accept(ClientSocket)
 </description>




</item>

<item>
<name>dim LocalSocket as INET::Socket
LocalSocket.Connect()
LocalSocket.Write()
</name>
<description></description>
</item>

<item>
<name></name>
<description>ClientSocket.Read()

ClientSocket.Write()
</description>
</item>

<item>
<name>LocalSocket.Read()
</name>
<description></description>
</item>


<item>
<name>There may be more exchanges of data.
</name>
<description></description>
</item>


<item>
<name>LocalSocket.Close()
</name>
<description></description>
</item>


<item>
<name></name>
<description>ClientSocket.Close()
</description>
</item>


<item>
<name>More sessions with other client computers.
</name>
<description></description>
</item>


<item>
<name></name>
<description>ServerSocket.Close()
</description>
</item>



</list>

</section></sections>
   
<sections><section><title>Example</title>
<description>This example code shows how to use the methods of the INET::SSLSocket object.</description>
<example><![CDATA[
dim ssl as inet::sslsocket
dim Result as C
dim Temp as C
ssl.context.requirevalidcertificate = .f.
if ssl.connect("toshiba1000", 443, 2000) then
    if ssl.write("GET / HTTP/1.0" + crlf() + crlf()) then
        FoundData = ssl.read(temp, 10000, -1)
        while FoundData
            on error resume next
            Result = Result + Temp
            FoundData = .f.
            if ssl.isopen then
                FoundData = ssl.read(temp, 10000, -1)
            end if
        end while
        a5_show_variable(Result, "Test OpenSSL HTTP Client - Response")
    else
        ui_msg_box("Request Error", ssl.callresult.text)
    end if
    ssl.close()
else
    ui_msg_box("Connect Error", ssl.callresult.text)
end if
]]></example>
   </section>
   
<section>
<description>This code illustrates a simple SSL HTTP Server.</description>
<example><![CDATA[
dim ResponseHeader as C
dim ResponseFooter as C
dim ctx as INET::SSLContext
dim ssl as inet::sslsocket
dim doc as inet::httpdocument
dim Request as C
dim Temp as C
ResponseHeader = <<%str%
HTTP/1.1 200 OK
Server: SampleAlphaFiveSSL
Content-Type: text/html

Request
%str%
ResponseFooter = <<%str%
]]></example>
</section>   
   
   
   
   
   </sections>
   
   
   
   
   
	<see>
		<ref>INET</ref>
	</see>
	
<terms>INET,socket,arguments,blob,contains,debug,file,function,http,object,overview,session,string,writing</terms>
	
	
</page>