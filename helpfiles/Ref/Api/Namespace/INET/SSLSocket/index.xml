<page>
	<topic>INET::SSLSocket Class</topic>
	<description>Properties and methods in the SSLSocket class.</description>
	<properties>
		<property generated="true">
			<name>Context</name>
			<type></type>
			<description>Context property</description>
		</property>
		<property generated="true">
			<name>IsBusy</name>
			<type>L</type>
			<description>Logical IsBusy property</description>
		</property>
		<property generated="true">
			<name>IsOpen</name>
			<type>L</type>
			<description>Logical IsOpen property</description>
		</property>
		<property generated="true">
			<name>IsReadable</name>
			<type>L</type>
			<description>Logical IsReadable property</description>
		</property>
		<property generated="true">
			<name>IsWriteable</name>
			<type>L</type>
			<description>Logical IsWriteable property</description>
		</property>
		<property generated="true">
			<name>RemoteAddress</name>
			<type>C</type>
			<description>String RemoteAddress property</description>
		</property>
		<property generated="true">
			<name>LocalAddress</name>
			<type>C</type>
			<description>String LocalAddress property</description>
		</property>
		<property generated="true">
			<name>RemotePort</name>
			<type>N</type>
			<description>Numeric RemotePort property</description>
		</property>
		<property generated="true">
			<name>LocalPort</name>
			<type>N</type>
			<description>Numeric LocalPort property</description>
		</property>
		<property generated="true">
			<name>Handle</name>
			<type>N</type>
			<description>Numeric Handle property</description>
		</property>
		<property generated="true">
			<name>CallResult</name>
			<type></type>
			<description>CallResult property</description>
		</property>
		<property generated="true">
			<name>Blocking</name>
			<type>L</type>
			<description>Logical Blocking property</description>
		</property>
		<property generated="true">
			<name>Broadcast</name>
			<type>L</type>
			<description>Logical Broadcast property</description>
		</property>
		<property generated="true">
			<name>Debug</name>
			<type>L</type>
			<description>Logical Debug property</description>
		</property>
		<property generated="true">
			<name>Delay</name>
			<type>L</type>
			<description>Logical Delay property</description>
		</property>
		<property generated="true">
			<name>KeepAlive</name>
			<type>L</type>
			<description>Logical KeepAlive property</description>
		</property>
		<property generated="true">
			<name>Linger</name>
			<type>L</type>
			<description>Logical Linger property</description>
		</property>
		<property generated="true">
			<name>OutOfBandInLine</name>
			<type>L</type>
			<description>Logical OutOfBandInLine property</description>
		</property>
		<property generated="true">
			<name>Route</name>
			<type>L</type>
			<description>Logical Route property</description>
		</property>
		<property generated="true">
			<name>ReceiveBufferSize</name>
			<type>N</type>
			<description>Numeric ReceiveBufferSize property</description>
		</property>
		<property generated="true">
			<name>ReceiveTimeout</name>
			<type>N</type>
			<description>Numeric ReceiveTimeout property</description>
		</property>
		<property generated="true">
			<name>ReuseAddress</name>
			<type>L</type>
			<description>Logical ReuseAddress property</description>
		</property>
		<property generated="true">
			<name>SendBufferSize</name>
			<type>N</type>
			<description>Numeric SendBufferSize property</description>
		</property>
		<property generated="true">
			<name>SendTimeout</name>
			<type>N</type>
			<description>Numeric SendTimeout property</description>
		</property>
		<property generated="true">
			<name>BytesAvailable</name>
			<type>N</type>
			<description>Numeric BytesAvailable property</description>
		</property>
		<property generated="true">
			<name>IsListening</name>
			<type>L</type>
			<description>Logical IsListening property</description>
		</property>
	</properties>
	<methods>
		<methodref generated="true">
			<name>Reconnect</name>
			<ref link="INET::SSLSocket::Reconnect Method">Reconnect</ref>
			<description>Reestablish the connection with an SSL partner (session settings may have changed).</description>
		</methodref>
		<methodref generated="true">
			<name>StartSSLSession</name>
			<ref link="INET::SSLSocket StartSSLSession Method Function">StartSSLSession</ref>
			<description>Begins an SSL session with a socket that is already opened.
If successful the socket remains secure until closed.
If unsuccessful both sockets will be closed.
After this call you should no long reference OpenSocket.</description>
		</methodref>
		<methodref generated="true">
			<name>Accept</name>
			<ref link="INET::SSLSocket::Accept Method">Accept</ref>
			<description>Accept a new connection (the socket must already be listening).
Returns a status object with information about the success of the call
If the call is successful, AcceptedSocket contains the new instance of INET::Socket.

HandshakeReadTimeout is appropriate for SSL sockets only.

Example: Result = MyListener.Accept(AcceptedSocket, 750)
         if Result.Success then 
         ...</description>
		</methodref>
		<methodref generated="true">
			<name>Close</name>
			<ref link="INET::SSLSocket::Close Method">Close</ref>
			<description>Close an open connection.</description>
		</methodref>
		<methodref generated="true">
			<name>GetOptions</name>
			<ref link="INET::SSLSocket GetOptions Method Function">GetOptions</ref>
			<description>Get one or more option values in a single call:
Options - One or more of the following:
A - Accepting
L - Linger
K - Keep Alive
R - Reuse Address
N - Don't route
D - Delay
X - Debug
I - Receive buffer size
O - Send buffer size
T - Timeout</description>
		</methodref>
		<methodref generated="true">
			<name>Connect</name>
			<ref link="INET::SSLSocket::Connect Method">Connect</ref>
			<description>Open a connection to the requested host and port.
Note: ConnectTimeout is in milliseconds.</description>
		</methodref>
		<methodref generated="true">
			<name>Listen</name>
			<ref link="INET::SSLSocket Listen Method Function">Listen</ref>
			<description>Open a socket to listen for incoming requests.</description>
		</methodref>
		<methodref generated="true">
			<name>Peek</name>
			<ref link="INET::SSLSocket Peek Method Function">Peek</ref>
			<description>Read received characters from into stringNote:  Peek does not remove the charaters from the receive buffer.</description>
		</methodref>
		<methodref generated="true">
			<name>QueryTCP</name>
			<ref>QueryTCP</ref>
			<description>Returns .t. the TCP connection described by the arguments matches
an active connection with the requested state.</description>
		</methodref>
		<methodref generated="true">
			<name>Read</name>
			<ref link="INET::SSLSocket::Read Method">Read</ref>
			<description>Read characters from socket into string.</description>
		</methodref>
		<methodref generated="true">
			<name>ReadBinary</name>
			<ref link="INET::SSLSocket::ReadBinary Method">ReadBinary</ref>
			<description>Read bytes from socket into a BLOB variable.</description>
		</methodref>
		<methodref generated="true">
			<name>ReadLine</name>
			<ref link="INET::SSLSocket::ReadLine Method">ReadLine</ref>
			<description>Reads a line from the receive buffer.
A line is terminated by a carriage-return and a line feed.
If nothing is available, an empty string is returned.</description>
		</methodref>
		<methodref generated="true">
			<name>SetOptions</name>
			<ref link="INET::SSLSocket::SetOptions Method">SetOptions</ref>
			<description>Set one or more options in a single call:
Options - One or more of the following:
[-]L - Linger
K    - Keep Alive
R    - Reuse Address
N    - Don't route
[-]D - Delay
X    - Debug
I=#  - Receive buffer size
O=#  - Send buffer size
T=#  - Timeout
TS=# - Send timeout
TR=# - Receive timeout</description>
		</methodref>
		<methodref generated="true">
			<name>Write</name>
			<ref link="INET::SSLSocket::Write Method">Write</ref>
			<description>Write string data.</description>
		</methodref>
		<methodref generated="true">
			<name>WriteBinary</name>
			<ref link="INET::SSLSocket WriteBinary Method Function">WriteBinary</ref>
			<description>Write binary data.</description>
		</methodref>
		<methodref generated="true">
			<name>SendFile</name>
			<ref link="INET::SSLSocket::SendFile Method">SendFile</ref>
			<description>Send the file named.</description>
		</methodref>
		<methodref generated="true">
			<name>ReadUntil</name>
			<ref link="INET::SSLSocket ReadUntil Method Function">ReadUntil</ref>
			<description>Reads from the input stream until the delimiter is encountered or a timeout occurs.
If the function returns false, there may still be data in the returned buffer.
This means that the read timed out before receiving the delimiter.
If ReturnDelimiter is true, the delimiter is returned with the string.</description>
		</methodref>
		<methodref generated="true">
			<name>ReadChunked</name>
			<ref>ReadChunked</ref>
			<description>Read all chunks from an HTTP chunked data stream and return them in one binary object.</description>
		</methodref>
		<methodref generated="true">
			<name>ReadAndDiscard</name>
			<ref>ReadAndDiscard</ref>
			<description>Read up to Length bytes of data from the socket and returns.  All data read is discarded</description>
		</methodref>
	</methods>
   
<sections><section>
<description>The INET::SSLSocket object is a version of INET::Socket that supports reading and writing data between client and server computers. The following code provides an overview of how socket communications are designed.</description>

<list>
<item>
<name-title>Client Computer
</name-title>
<description-title>
 
Host Computer
 </description-title>
</item>

<item>
<name></name>
<description>



dim ServerSocket as INET::Socket
dim ClientSocket as INET::Socket
dim CTX as INET::SSLContext
 
Define CTX properties

ServerSocket.Listen()
ServerSocket.Accept(ClientSocket)
 </description>




</item>

<item>
<name>dim LocalSocket as INET::Socket
LocalSocket.Connect()
LocalSocket.Write()
</name>
<description></description>
</item>

<item>
<name></name>
<description>ClientSocket.Read()

ClientSocket.Write()
</description>
</item>

<item>
<name>LocalSocket.Read()
</name>
<description></description>
</item>


<item>
<name>There may be more exchanges of data.
</name>
<description></description>
</item>


<item>
<name>LocalSocket.Close()
</name>
<description></description>
</item>


<item>
<name></name>
<description>ClientSocket.Close()
</description>
</item>


<item>
<name>More sessions with other client computers.
</name>
<description></description>
</item>


<item>
<name></name>
<description>ServerSocket.Close()
</description>
</item>



</list>

</section></sections>
   
<sections><section><title>Example</title>
<description>This example code shows how to use the methods of the INET::SSLSocket object.</description>
<example><![CDATA[
dim ssl as inet::sslsocket
dim Result as C
dim Temp as C
ssl.context.requirevalidcertificate = .f.
if ssl.connect("toshiba1000", 443, 2000) then
    if ssl.write("GET / HTTP/1.0" + crlf() + crlf()) then
        FoundData = ssl.read(temp, 10000, -1)
        while FoundData
            on error resume next
            Result = Result + Temp
            FoundData = .f.
            if ssl.isopen then
                FoundData = ssl.read(temp, 10000, -1)
            end if
        end while
        a5_show_variable(Result, "Test OpenSSL HTTP Client - Response")
    else
        ui_msg_box("Request Error", ssl.callresult.text)
    end if
    ssl.close()
else
    ui_msg_box("Connect Error", ssl.callresult.text)
end if
]]></example>
   </section>
   
<section>
<description>This code illustrates a simple SSL HTTP Server.</description>
<example><![CDATA[
dim ResponseHeader as C
dim ResponseFooter as C
dim ctx as INET::SSLContext
dim ssl as inet::sslsocket
dim doc as inet::httpdocument
dim Request as C
dim Temp as C
ResponseHeader = <<%str%
HTTP/1.1 200 OK
Server: SampleAlphaFiveSSL
Content-Type: text/html

Request
%str%
ResponseFooter = <<%str%
]]></example>
</section>   
   
   
   
   
   </sections>
   
   
   
   
   
	<see>
		<ref>INET</ref>
	</see>
	
<terms>INET,socket,arguments,blob,contains,debug,file,function,http,object,overview,session,string,writing</terms>
	
	
</page>