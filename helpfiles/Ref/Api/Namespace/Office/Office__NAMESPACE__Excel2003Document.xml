<page api="xb">
	<topic>Office::Excel2003Document Class</topic>
	
	<description>The Office::Excel2003Document class is the parent class for creation and editing of Excel 2003 documents.</description>
	
<properties>
	<property>
		<name>ActiveSheetIndex</name>
		<type>N</type>
		<description>Read Only.</description>
	</property>
	<property>
		<name>CallResult</name>
		<type>CallResult </type>
		<description>Read Only.</description>
	</property>
	<property>
		<name>ErrorMessage</name>
		<type>C </type>
		<description>Read Only.</description>
	</property>
	<property>
		<name>FileName</name>
		<type>C</type>
		<description>Read Only.</description>
	</property>
	<property>
		<name>FontCount</name>
		<type>N</type>
		<description>Read Only.</description>
	</property>
	<property>
		<name>FormatCount</name>
		<type>N</type>
		<description>Read Only.</description>
	</property>
	<property>
		<name>SheetCount</name>
		<type>N</type>
		<description>Read Only.</description>
	</property>
	
	
</properties>	
	
<methods>
	<method>
		<name>Clear as V()</name>
		<description>Reinitialize the Excel document as a new one. Important Note: Be sure that you have saved any existing document data using Save or SaveToBlob() before calling this function. </description>
	</method>
	
	<method>
		<name>Load as L (FileName as C) </name>
		<description>Load the contents of an existing Excel (.xls) file. </description>
	</method>
	
	<method>
		<name>Save as L (FileName as C) </name>
		<description>Save the document to an Excel 2003 (.xls) file. </description>
	</method>
	
	<method>
		<name>LoadFromBlob as L (Data as B)</name>
		<description>Load the Excel Document from a memory image of an Excel (.xls) file. </description>
	</method>
	
	<method>
		<name>SaveToBlob as L (BYREF Data as B)</name>
		<description>Save the document to a memory image of an Excel 2003 (.xls) file. </description>
	</method>
	
	<method>
		<name>AddSheet as Office::Spreadsheet (Name as C = "")</name>
		<description>Add a new spreadsheet to the document assigning it the name provided. </description>
	</method>
	
	<method>
		<name>AddSheetFromResultSet as Office::Spreadsheet(ResultSet as SQL::ResultSet, SheetName as C, IncludeHeadings as L = .t., RowsToCopy as N = -1 , StartRow as N = -1, ReferenceColumns as SQL::TableInfo = null_value(), UserContext as P = null_value())</name>
		<description>Create a new spreadsheet and add it to the document. Add the data in the result set. Optionally include headings, select a range of rows and include a SQL::TableInfo and user context to handle advanced transformations. </description>
	</method>
	
	<method>
		<name>AddSheetFromDBF as Office::Spreadsheet(Table as P, SheetName as C, IncludeHeadings as L = .t., RowsToCopy as N = -1, StartRow as N = -1, ReferenceColumns as SQL::TableInfo = null_value(), UserContext as P = null_value())</name>
		<description>Create a new spreadsheet and add it to the document. Add the data in the table. Optionally include headings, select a range of rows and include a SQL::TableInfo and user context to handle advanced transformations. </description>
	</method>
	
	<method>
		<name>CopySheet as Office::Spreadsheet(Name as C, Index as N)</name>
		<description>Add a new spreadsheet to the document with the name specified by copying the contents of the sheet at index N. </description>
	</method>
	
	<method>
		<name>DeleteSheet as L(Index as N)</name>
		<description>Delete the sheet at the index specified from the Excel document. </description>
	</method>
	
	<method>
		<name>FindSheet as L (BYREF Sheet as Office::Spreadsheet, Name as C)</name>
		<description>Get a spreadsheet by name. </description>
	</method>
	
	<method>
		<name>GetSheet as Office::Spreadsheet (Index as N)</name>
		<description>Get the spreadsheet at the index specified. </description>
	</method>
	
	<method>
		<name>AddFormat as Office::Format(InitialFormat as Office::Format = null_value())</name>
		<description>Create a new format and add it to the document. You can pass an existing format to copy its values into the new one. </description>
	</method>
	
	<method>
		<name>GetFormat as Office::Format(Index as N)</name>
		<description>Get the format indexed by Index. Index must be a value between 1 and the number of formats returned by the FormatCount property. </description>
	</method>
	<method>
		<name>AddFont as Office::Font(InitialFont as Office::Font = null_value())</name>
		<description>Create a new font and add it to the document. You can pass an existing font to copy its values into the new one. </description>
	</method>
	
	<method>
		<name>GetFont as Office::Font(Index as N)</name>
		<description>Get the font indexed by Index. Index must be a value between 1 and the number of fonts returned by the FontCount property. </description>
	</method>
	
	<method>
		<name>DefaultFont as L (BYREF FontName as C, BYREF FontSize as N)</name>
		<description>Get the default font name and size for this workbook. </description>
	</method>
	
	<method>
		<name>SetDefaultFont as V(FontName as C, FontSize as N)</name>
		<description>Set a default font name and size for this workbook. </description>
	</method>
	
	<method>
		<name>AddCustomNumericFormat as N(FormatString as C)</name>
		<description>Add a new numeric format to the document. The contents of the format string must be a valid format expression for Excel. Consult Microsoft's documentation for rules for valid Excel format expressions. </description>
	</method>
	
	<method>
		<name>CustomNumericFormat as C(Index as N)</name>
		<description>Get the format expression for the custom numeric format at the index specified. </description>
	</method>
	<method>
		<name>SetActiveSheet as V(Index as N)</name>
		<description>Set the index of the spreadsheet that is considered active/current. </description>
	</method>
	
	<method>
		<name>AddPicture as N(FileName as C)</name>
		<description>Add a new picture to the document from the file specified. Formats supported include BMP, DIB, PNG, JPG and WMF. Use the index value returned to reference the picture in other functions such as Office::Spreadsheet::SetPicture(). </description>
	</method>
	
	<method>
		<name>AddPicture as N(Image as B)</name>
		<description>Add a new picture to the document from a blob value. Formats supported include BMP, DIB, PNG, JPG and WMF. Use the index value returned to reference the picture in other functions such as Office::Spreadsheet::SetPicture(). </description>
	</method>
	
	<method>
		<name>SetLocale as V(Locale as C)</name>
		<description>Set the locale name for the document.</description>
	</method>
</methods>	
	
<see>
	<ref link="Office Namespace">Office</ref>
	<ref link="Office Enumerations">Office Enumerations</ref>
	
</see>
	
	
	
</page>