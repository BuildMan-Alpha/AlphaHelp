<page api="xb">
	<shortlink>api office namespace spreadsheet class</shortlink>
	<topic>Office::Spreadsheet Class</topic>
<description>Spreadsheet Class Properties and Methods</description>
	<properties>
		<property generated="true">
			<name>FirstRow</name>
			<type>N</type>
			<description>Numeric FirstRow property</description>
		</property>
		<property generated="true">
			<name>NextAvailableRow</name>
			<type>N</type>
			<description>Numeric NextAvailableRow property</description>
		</property>
		<property generated="true">
			<name>FirstColumn</name>
			<type>N</type>
			<description>Numeric FirstColumn property</description>
		</property>
		<property generated="true">
			<name>NextAvailableColumn</name>
			<type>N</type>
			<description>Numeric NextAvailableColumn property</description>
		</property>
		<property generated="true">
			<name>DisplayGridLines</name>
			<type>L</type>
			<description>Logical DisplayGridLines property</description>
		</property>
		<property generated="true">
			<name>PrintGridLines</name>
			<type>L</type>
			<description>Logical PrintGridLines property</description>
		</property>
		<property generated="true">
			<name>Zoom</name>
			<type>N</type>
			<description>Numeric Zoom property</description>
		</property>
		<property generated="true">
			<name>PrintZoom</name>
			<type>N</type>
			<description>Numeric PrintZoom property</description>
		</property>
		<property generated="true">
			<name>Landscape</name>
			<type>L</type>
			<description>Logical Landscape property</description>
		</property>
		<property generated="true">
			<name>Paper</name>
			<type>N</type>
			<description>Numeric Paper property</description>
		</property>
		<property generated="true">
			<name>Header</name>
			<type>C</type>
			<description>String Header property</description>
		</property>
		<property generated="true">
			<name>HeaderMargin</name>
			<type>N</type>
			<description>Numeric HeaderMargin property</description>
		</property>
		<property generated="true">
			<name>Footer</name>
			<type>C</type>
			<description>String Footer property</description>
		</property>
		<property generated="true">
			<name>FooterMargin</name>
			<type>N</type>
			<description>Numeric FooterMargin property</description>
		</property>
		<property generated="true">
			<name>CenterHorizontally</name>
			<type>L</type>
			<description>Logical CenterHorizontally property</description>
		</property>
		<property generated="true">
			<name>CenterVertically</name>
			<type>L</type>
			<description>Logical CenterVertically property</description>
		</property>
		<property generated="true">
			<name>MarginLeft</name>
			<type>N</type>
			<description>Numeric MarginLeft property</description>
		</property>
		<property generated="true">
			<name>MarginRight</name>
			<type>N</type>
			<description>Numeric MarginRight property</description>
		</property>
		<property generated="true">
			<name>MarginTop</name>
			<type>N</type>
			<description>Numeric MarginTop property</description>
		</property>
		<property generated="true">
			<name>MarginBottom</name>
			<type>N</type>
			<description>Numeric MarginBottom property</description>
		</property>
		<property generated="true">
			<name>PrintRowColumn</name>
			<type>L</type>
			<description>Logical PrintRowColumn property</description>
		</property>
		<property generated="true">
			<name>Name</name>
			<type>C</type>
			<description>String Name property</description>
		</property>
		<property generated="true">
			<name>GroupSummaryBelow</name>
			<type>L</type>
			<description>Logical GroupSummaryBelow property</description>
		</property>
		<property generated="true">
			<name>GroupSummaryRight</name>
			<type>L</type>
			<description>Logical GroupSummaryRight property</description>
		</property>
		<property generated="true">
			<name>NamedRangeCount</name>
			<type>N</type>
			<description>Numeric NamedRangeCount property</description>
		</property>
	</properties>
	<methods>
		<method generated="true">
			<name>CellIsDateValue</name>
			<prototype>.CellIsDateValue as L (Row as N, Column as N)</prototype>
			<arguments>
				<argument>
					<name>Row</name>
					<description>Numeric</description>
				</argument>
				<argument>
					<name>Column</name>
					<description>Numeric</description>
				</argument>
			</arguments>
			<description>Returns true if the cell is a date value.</description>
		</method>
		<method generated="true">
			<name>CellType</name>
			<prototype>.CellType as N (Row as N, Column as N)</prototype>
			<arguments>
				<argument>
					<name>Row</name>
					<description>Numeric</description>
				</argument>
				<argument>
					<name>Column</name>
					<description>Numeric</description>
				</argument>
			</arguments>
			<description>Returns the enumerated type CellType indicating the contents of the cell.</description>
		</method>
		<method generated="true">
			<name>Clear</name>
			<prototype>.Clear as L ([FirstRow  as N [, LastRow  as N [, FirstColumn  as N [, LastColumn  as N]]]])</prototype>
			<arguments>
				<argument>
					<name>FirstRow</name>
					<description>Numeric</description>
				</argument>
				<argument>
					<name>LastRow</name>
					<description>Numeric</description>
				</argument>
				<argument>
					<name>FirstColumn</name>
					<description>Numeric</description>
				</argument>
				<argument>
					<name>LastColumn</name>
					<description>Numeric</description>
				</argument>
			</arguments>
			<description>Clear part or all of the spreadsheet.</description>
		</method>
		<method generated="true">
			<name>ClearPrintArea</name>
			<prototype>.ClearPrintArea as V ()</prototype>
			<description>Clears the print area.</description>
		</method>
		<method generated="true">
			<name>ClearPrintRepeats</name>
			<prototype>.ClearPrintRepeats as V ()</prototype>
			<description>Clears repeated rows and columns on each page.</description>
		</method>
		<method generated="true">
			<name>ColumnWidth</name>
			<prototype>.ColumnWidth as N (Column as N)</prototype>
			<arguments>
				<argument>
					<name>Column</name>
					<description>Numeric</description>
				</argument>
			</arguments>
			<description>Returns the currently assigned width for a column.</description>
		</method>
		<method generated="true">
			<name>CopyCell</name>
			<prototype>.CopyCell as L (SourceRow as N, SourceColumn as N, DestinationRow as N, DestinationColumn as N)</prototype>
			<arguments>
				<argument>
					<name>SourceRow</name>
					<description>Numeric</description>
				</argument>
				<argument>
					<name>SourceColumn</name>
					<description>Numeric</description>
				</argument>
				<argument>
					<name>DestinationRow</name>
					<description>Numeric</description>
				</argument>
				<argument>
					<name>DestinationColumn</name>
					<description>Numeric</description>
				</argument>
			</arguments>
			<description>Copy the cell and its format from SourceRow/Column to DestinationRow/Column.</description>
		</method>
		<method generated="true">
			<name>DeleteMerge</name>
			<prototype>.DeleteMerge as L (Row as N, Column as N)</prototype>
			<arguments>
				<argument>
					<name>Row</name>
					<description>Numeric</description>
				</argument>
				<argument>
					<name>Column</name>
					<description>Numeric</description>
				</argument>
			</arguments>
			<description>Removes merged cells.</description>
		</method>
		<method generated="true">
			<name>DeleteNamedRange</name>
			<prototype>.DeleteNamedRange as V (Name as C)</prototype>
			<arguments>
				<argument>
					<name>Name</name>
					<description>Character</description>
				</argument>
			</arguments>
			<description>Deletes the range named.</description>
		</method>
		<method generated="true">
			<name>GetMerge</name>
			<prototype>.GetMerge as L (Row as N, Column as N, FirstRow as N, LastRow as N, FirstColumn as N, LastColumn as N)</prototype>
			<arguments>
				<argument>
					<name>Row</name>
					<description>Numeric</description>
				</argument>
				<argument>
					<name>Column</name>
					<description>Numeric</description>
				</argument>
				<argument>
					<name>FirstRow</name>
					<description>Numeric</description>
				</argument>
				<argument>
					<name>LastRow</name>
					<description>Numeric</description>
				</argument>
				<argument>
					<name>FirstColumn</name>
					<description>Numeric</description>
				</argument>
				<argument>
					<name>LastColumn</name>
					<description>Numeric</description>
				</argument>
			</arguments>
			<description>Get the merged cell range that a particular cell belongs to.</description>
		</method>
		<method generated="true">
			<name>GetNamedRange</name>
			<prototype>.GetNamedRange as L (Index as N, Name as C, FirstRow as N, LastRow as N, FirstColumn as N, LastColumn as N)</prototype>
			<arguments>
				<argument>
					<name>Index</name>
					<description>Numeric</description>
				</argument>
				<argument>
					<name>Name</name>
					<description>Character</description>
				</argument>
				<argument>
					<name>FirstRow</name>
					<description>Numeric</description>
				</argument>
				<argument>
					<name>LastRow</name>
					<description>Numeric</description>
				</argument>
				<argument>
					<name>FirstColumn</name>
					<description>Numeric</description>
				</argument>
				<argument>
					<name>LastColumn</name>
					<description>Numeric</description>
				</argument>
			</arguments>
			<description>Gets the range of rows and columns for a named range.</description>
		</method>
		<method generated="true">
			<name>GroupColumns</name>
			<prototype>.GroupColumns as L (FirstColumn as N, LastColumn  as N [, Collapsed  as L])</prototype>
			<arguments>
				<argument>
					<name>FirstColumn</name>
					<description>Numeric</description>
				</argument>
				<argument>
					<name>LastColumn</name>
					<description>Numeric</description>
				</argument>
				<argument>
					<name>Collapsed</name>
					<description>Logical</description>
				</argument>
			</arguments>
			<description>Group FirstColumn through LastColumn.  If Collapsed is set to true the group of columns will be collapsed.</description>
		</method>
		<method generated="true">
			<name>GroupRows</name>
			<prototype>.GroupRows as L (FirstRow as N, LastRow  as N [, Collapsed  as L])</prototype>
			<arguments>
				<argument>
					<name>FirstRow</name>
					<description>Numeric</description>
				</argument>
				<argument>
					<name>LastRow</name>
					<description>Numeric</description>
				</argument>
				<argument>
					<name>Collapsed</name>
					<description>Logical</description>
				</argument>
			</arguments>
			<description>Group FirstRow through LastRow.  If Collapsed is set to true the group of rows will be collapsed.</description>
		</method>
		<method generated="true">
			<name>InsertColumn</name>
			<prototype>.InsertColumn as L (FirstColumn as N, LastColumn as N)</prototype>
			<arguments>
				<argument>
					<name>FirstColumn</name>
					<description>Numeric</description>
				</argument>
				<argument>
					<name>LastColumn</name>
					<description>Numeric</description>
				</argument>
			</arguments>
			<description>Insert new columns from FirstColumn to LastColumn.</description>
		</method>
		<method generated="true">
			<name>InsertRow</name>
			<prototype>.InsertRow as L (FirstRow as N, LastRow as N)</prototype>
			<arguments>
				<argument>
					<name>FirstRow</name>
					<description>Numeric</description>
				</argument>
				<argument>
					<name>LastRow</name>
					<description>Numeric</description>
				</argument>
			</arguments>
			<description>Insert new rows from FirstRow to LastRow.</description>
		</method>
		<method generated="true">
			<name>IsBlank</name>
			<prototype>.IsBlank as L (Row as N, Column as N, Format as P)</prototype>
			<arguments>
				<argument>
					<name>Row</name>
					<description>Numeric</description>
				</argument>
				<argument>
					<name>Column</name>
					<description>Numeric</description>
				</argument>
				<argument>
					<name>Format</name>
					<description>Pointer</description>
				</argument>
			</arguments>
			<description>Returns true if a cell is blank. Assigns the current cell format to Format.</description>
		</method>
		<method generated="true">
			<name>IsFormula</name>
			<prototype>.IsFormula as L (Row as N, Column as N)</prototype>
			<arguments>
				<argument>
					<name>Row</name>
					<description>Numeric</description>
				</argument>
				<argument>
					<name>Column</name>
					<description>Numeric</description>
				</argument>
			</arguments>
			<description>Returns true if the cell contains a formula.</description>
		</method>
		<method generated="true">
			<name>Read</name>
			<prototype>.Read as A (Row as N, Column as N, Format as P)</prototype>
			<arguments>
				<argument>
					<name>Row</name>
					<description>Numeric</description>
				</argument>
				<argument>
					<name>Column</name>
					<description>Numeric</description>
				</argument>
				<argument>
					<name>Format</name>
					<description>Pointer</description>
				</argument>
			</arguments>
			<description>Returns the data contents of a cell and updates Format with the cell's format.  
Note: Check the contents using CellType if the cell might contain an error.</description>
		</method>
		<method generated="true">
			<name>ReadComment</name>
			<prototype>.ReadComment as C (Row as N, Column as N)</prototype>
			<arguments>
				<argument>
					<name>Row</name>
					<description>Numeric</description>
				</argument>
				<argument>
					<name>Column</name>
					<description>Numeric</description>
				</argument>
			</arguments>
			<description>Returns the text value of any comment assigned to the cell.</description>
		</method>
		<method generated="true">
			<name>ReadError</name>
			<prototype>.ReadError as N (Rows as N, Column as N)</prototype>
			<arguments>
				<argument>
					<name>Rows</name>
					<description>Numeric</description>
				</argument>
				<argument>
					<name>Column</name>
					<description>Numeric</description>
				</argument>
			</arguments>
			<description>Returns the error value, if any for a cell</description>
		</method>
		<method generated="true">
			<name>ReadFormula</name>
			<prototype>.ReadFormula as C (Row as N, Column as N, Format as P)</prototype>
			<arguments>
				<argument>
					<name>Row</name>
					<description>Numeric</description>
				</argument>
				<argument>
					<name>Column</name>
					<description>Numeric</description>
				</argument>
				<argument>
					<name>Format</name>
					<description>Pointer</description>
				</argument>
			</arguments>
			<description>Returns the formula, if any, associated with the cell. Assigns the current cell format to Format.</description>
		</method>
		<method generated="true">
			<name>RemoveColumn</name>
			<prototype>.RemoveColumn as L (FirstColumn as N, LastColumn as N)</prototype>
			<arguments>
				<argument>
					<name>FirstColumn</name>
					<description>Numeric</description>
				</argument>
				<argument>
					<name>LastColumn</name>
					<description>Numeric</description>
				</argument>
			</arguments>
			<description>Remove columns FirstColumn through LastColumn.</description>
		</method>
		<method generated="true">
			<name>RemoveRow</name>
			<prototype>.RemoveRow as L (FirstRow as N, LastRow as N)</prototype>
			<arguments>
				<argument>
					<name>FirstRow</name>
					<description>Numeric</description>
				</argument>
				<argument>
					<name>LastRow</name>
					<description>Numeric</description>
				</argument>
			</arguments>
			<description>Remove rows FirstRow through LastRow.</description>
		</method>
		<method generated="true">
			<name>RowHeight</name>
			<prototype>.RowHeight as N (Row as N)</prototype>
			<arguments>
				<argument>
					<name>Row</name>
					<description>Numeric</description>
				</argument>
			</arguments>
			<description>Returns the currently assigned height for a row.</description>
		</method>
		<method generated="true">
			<name>SetBlank</name>
			<prototype>.SetBlank as L (Row as N, Column as N, Format as P)</prototype>
			<arguments>
				<argument>
					<name>Row</name>
					<description>Numeric</description>
				</argument>
				<argument>
					<name>Column</name>
					<description>Numeric</description>
				</argument>
				<argument>
					<name>Format</name>
					<description>Pointer</description>
				</argument>
			</arguments>
			<description>Sets the contents of a cell to a blank value and assigns a format.</description>
		</method>
		<method generated="true">
			<name>SetColumn</name>
			<prototype>.SetColumn as L (First as N, Last as N, Width  as N [, Format  as P [, Hidden  as L]])</prototype>
			<arguments>
				<argument>
					<name>First</name>
					<description>Numeric</description>
				</argument>
				<argument>
					<name>Last</name>
					<description>Numeric</description>
				</argument>
				<argument>
					<name>Width</name>
					<description>Numeric</description>
				</argument>
				<argument>
					<name>Format</name>
					<description>Pointer</description>
				</argument>
				<argument>
					<name>Hidden</name>
					<description>Logical</description>
				</argument>
			</arguments>
			<description>Assigns a width and, optionally, a format for a column.  May also hide or show a column.</description>
		</method>
		<method generated="true">
			<name>SetFormat</name>
			<prototype>.SetFormat as L (StartRow as N, StartColumn as N, EndRow as N, EndColumn as N, Format as P)</prototype>
			<arguments>
				<argument>
					<name>StartRow</name>
					<description>Numeric</description>
				</argument>
				<argument>
					<name>StartColumn</name>
					<description>Numeric</description>
				</argument>
				<argument>
					<name>EndRow</name>
					<description>Numeric</description>
				</argument>
				<argument>
					<name>EndColumn</name>
					<description>Numeric</description>
				</argument>
				<argument>
					<name>Format</name>
					<description>Pointer</description>
				</argument>
			</arguments>
			<description>Set the format for a block of cells.</description>
		</method>
		<method generated="true">
			<name>SetHorizontalPageBreak</name>
			<prototype>.SetHorizontalPageBreak as L (Row  as N [, PageBreak  as L])</prototype>
			<arguments>
				<argument>
					<name>Row</name>
					<description>Numeric</description>
				</argument>
				<argument>
					<name>PageBreak</name>
					<description>Logical</description>
				</argument>
			</arguments>
			<description>Set a horizontal page break on the row specified.  Pass false to remove the break.</description>
		</method>
		<method generated="true">
			<name>SetMerge</name>
			<prototype>.SetMerge as L (FirstRow as N, LastRow as N, FirstColumn as N, LastColumn as N)</prototype>
			<arguments>
				<argument>
					<name>FirstRow</name>
					<description>Numeric</description>
				</argument>
				<argument>
					<name>LastRow</name>
					<description>Numeric</description>
				</argument>
				<argument>
					<name>FirstColumn</name>
					<description>Numeric</description>
				</argument>
				<argument>
					<name>LastColumn</name>
					<description>Numeric</description>
				</argument>
			</arguments>
			<description>Merges cells from the first row and column through the last row and column specified.</description>
		</method>
		<method generated="true">
			<name>SetNamedRange</name>
			<prototype>.SetNamedRange as V (Name as C, FirstRow as N, LastRow as N, FirstColumn as N, LastColumn as N)</prototype>
			<arguments>
				<argument>
					<name>Name</name>
					<description>Character</description>
				</argument>
				<argument>
					<name>FirstRow</name>
					<description>Numeric</description>
				</argument>
				<argument>
					<name>LastRow</name>
					<description>Numeric</description>
				</argument>
				<argument>
					<name>FirstColumn</name>
					<description>Numeric</description>
				</argument>
				<argument>
					<name>LastColumn</name>
					<description>Numeric</description>
				</argument>
			</arguments>
			<description>Creates a named range for the rows and columns.</description>
		</method>
		<method generated="true">
			<name>SetPicture</name>
			<prototype>.SetPicture as V (Row as N, Column as N, PictureId  as N [, Scale  as N])</prototype>
			<arguments>
				<argument>
					<name>Row</name>
					<description>Numeric</description>
				</argument>
				<argument>
					<name>Column</name>
					<description>Numeric</description>
				</argument>
				<argument>
					<name>PictureId</name>
					<description>Numeric</description>
				</argument>
				<argument>
					<name>Scale</name>
					<description>Numeric</description>
				</argument>
			</arguments>
			<description>Assign a picture to a cell using the identifier returned the function Office::ExcelDocument::AddPicture().
Scale the picture proportionally using 1.0 as full sized."</description>
		</method>
		<method generated="true">
			<name>SetPrintArea</name>
			<prototype>.SetPrintArea as V (FirstRow as N, LastRow as N, FirstColumn as N, LastColumn as N)</prototype>
			<arguments>
				<argument>
					<name>FirstRow</name>
					<description>Numeric</description>
				</argument>
				<argument>
					<name>LastRow</name>
					<description>Numeric</description>
				</argument>
				<argument>
					<name>FirstColumn</name>
					<description>Numeric</description>
				</argument>
				<argument>
					<name>LastColumn</name>
					<description>Numeric</description>
				</argument>
			</arguments>
			<description>Sets the print area.</description>
		</method>
		<method generated="true">
			<name>SetPrintRepeatColumns</name>
			<prototype>.SetPrintRepeatColumns as V (FirstColumn as N, LastColumn as N)</prototype>
			<arguments>
				<argument>
					<name>FirstColumn</name>
					<description>Numeric</description>
				</argument>
				<argument>
					<name>LastColumn</name>
					<description>Numeric</description>
				</argument>
			</arguments>
			<description>Sets repeated columns on each page from FirstColumn to LastColumn.</description>
		</method>
		<method generated="true">
			<name>SetPrintRepeatRows</name>
			<prototype>.SetPrintRepeatRows as V (FirstRow as N, LastRow as N)</prototype>
			<arguments>
				<argument>
					<name>FirstRow</name>
					<description>Numeric</description>
				</argument>
				<argument>
					<name>LastRow</name>
					<description>Numeric</description>
				</argument>
			</arguments>
			<description>Sets repeated rows on each page from FirstRow to LastRow.</description>
		</method>
		<method generated="true">
			<name>SetRow</name>
			<prototype>.SetRow as L (Row as N, Height  as N [, Format  as P [, Hidden  as L]])</prototype>
			<arguments>
				<argument>
					<name>Row</name>
					<description>Numeric</description>
				</argument>
				<argument>
					<name>Height</name>
					<description>Numeric</description>
				</argument>
				<argument>
					<name>Format</name>
					<description>Pointer</description>
				</argument>
				<argument>
					<name>Hidden</name>
					<description>Logical</description>
				</argument>
			</arguments>
			<description>Assigns a height and, optionally, a format for a row.  May also hide or show a row.</description>
		</method>
		<method generated="true">
			<name>SetVerticalPageBreak</name>
			<prototype>.SetVerticalPageBreak as L (Column  as N [, PageBreak  as L])</prototype>
			<arguments>
				<argument>
					<name>Column</name>
					<description>Numeric</description>
				</argument>
				<argument>
					<name>PageBreak</name>
					<description>Logical</description>
				</argument>
			</arguments>
			<description>Set a vertical page break on the column specified.  Pass false to remove the break.</description>
		</method>
		<method generated="true">
			<name>Split</name>
			<prototype>.Split as V (Row as N, Column as N)</prototype>
			<arguments>
				<argument>
					<name>Row</name>
					<description>Numeric</description>
				</argument>
				<argument>
					<name>Column</name>
					<description>Numeric</description>
				</argument>
			</arguments>
			<description>Split the sheet at the row and column specified.</description>
		</method>
		<method generated="true">
			<name>Write</name>
			<prototype>.Write as L (Row as N, Column as N, Value as A, Format as P)</prototype>
			<arguments>
				<argument>
					<name>Row</name>
					<description>Numeric</description>
				</argument>
				<argument>
					<name>Column</name>
					<description>Numeric</description>
				</argument>
				<argument>
					<name>Value</name>
					<description>Any type</description>
				</argument>
				<argument>
					<name>Format</name>
					<description>Pointer</description>
				</argument>
			</arguments>
			<description>Sets data value of a cell and assigns a format.</description>
		</method>
		<method generated="true">
			<name>WriteComment</name>
			<prototype>.WriteComment as V (Row as N, Column as N, Comment  as C [, Author  as C [, Width  as N [, Height  as N]]])</prototype>
			<arguments>
				<argument>
					<name>Row</name>
					<description>Numeric</description>
				</argument>
				<argument>
					<name>Column</name>
					<description>Numeric</description>
				</argument>
				<argument>
					<name>Comment</name>
					<description>Character</description>
				</argument>
				<argument>
					<name>Author</name>
					<description>Character</description>
				</argument>
				<argument>
					<name>Width</name>
					<description>Numeric</description>
				</argument>
				<argument>
					<name>Height</name>
					<description>Numeric</description>
				</argument>
			</arguments>
			<description>Assigns a comment and author to a cell giving it the designated text box size (in pixels).</description>
		</method>
		<method generated="true">
			<name>WriteFormula</name>
			<prototype>.WriteFormula as L (Row as N, Column as N, Value as C, Format as P)</prototype>
			<arguments>
				<argument>
					<name>Row</name>
					<description>Numeric</description>
				</argument>
				<argument>
					<name>Column</name>
					<description>Numeric</description>
				</argument>
				<argument>
					<name>Value</name>
					<description>Character</description>
				</argument>
				<argument>
					<name>Format</name>
					<description>Pointer</description>
				</argument>
			</arguments>
			<description>Assigns a formula to a cell and assigns a format.</description>
		</method>
	</methods>
  
	<see>
		<ref link="Office Namespace">Office</ref>
	</see>
<terms>Office,box,column,contains,error,function,header,height,horizontal,landscape,pages,picture,text</terms>
	
</page>