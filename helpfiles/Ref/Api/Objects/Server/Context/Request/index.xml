<page>
    <shortlink>api objects context request object</shortlink>
    <topic>Context.Request Object</topic>
    <description>The Context.Request object contains properties and methods available for working with the current HTTP request.</description>
    <properties>
        <property readonly="true">
            <name>ApplicationRoot</name>
            <type>C</type>
            <description>Context.Request.ApplicationRoot is the absolute physical path to the application on the server. Read Only.</description>
        </property>
        <property readonly="true">
            <name>ApplicationRootUrl</name>
            <type>C</type>
            <description>Context.Request.ApplicationRootUrl is the root url to the application. This is guaranteed to end with a forward slash ("/"). Read Only.</description>
        </property>
        <property readonly="true">
            <name>A5wIncludePath</name>
            <type>C</type>
            <description>Context.Request.A5wIncludePath is the absolute physical path to the location of the application's a5w files. Read Only.</description>
        </property>
        <property readonly="true">
            <name>A5wIncludePath</name>
            <type>C</type>
            <description>Context.Request.A5wIncludePath is the absolute physical path to the location of the application's a5w files. Read Only.</description>
        </property>
        <property readonly="true">
            <name>Body</name>
            <type>B</type>
            <description>The full body of the HTTP request. This is the raw data of the request body of a POST or PUT. If the request body is text, use *[link:Context.Request.GetBodyAsText()@./index.xml#section_GetBodyAsText Method]* method to get the raw data property decoded to text. This will be empty for a GET request, as a GET does not include a body. Read Only.</description>
        </property>
        <property readonly="true">
            <name>ContentLength</name>
            <type>N</type>
            <description>Context.Request.ContentLength is the length of the current request's content. Read Only.</description>
        </property>
        <property readonly="true">
            <name>ContentType</name>
            <type>C</type>
            <description>Context.Request.ContentType is the *[extlink:MIME@https://www.iana.org/assignments/media-types/media-types.xhtml]* type of the current request's content such as text/html or application/json. Read Write.</description>
        </property>
        <property readonly="true">
            <name>Cookies</name>
            <type>System::Web::HttpCookieCollection</type>
            <description>Context.Request.Cookies is the collection of the current request's cookies. Read Only</description>
        </property>
        <property readonly="true">
            <name>Form</name>
            <type>System::Collections::Specialized::NameValueCollection</type>
            <description>Context.Request.Form is the collection of the current request's form variables. The collection will have 0 entries if the page making the request does not have any forms on it. Read Only.</description>
        </property>
        <property readonly="true">
            <name>Headers</name>
            <type>System::Collections::Specialized::NameValueCollection</type>
            <description>Context.Request.Headers is the collection of the current request's HTTP headers. Read Only.</description>
        </property>
        <property readonly="true" build="4594">
            <name>HeadersAsText</name>
            <type>C</type>
            <description>Context.Request.HeadersAsText is a CrLf() delimited list of the request's HTTP headers. Read Only.</description>
        </property>
        <property readonly="true">
            <name>Host</name>
            <type>C</type>
            <description>Context.Request.Host is the value of the *[extlink:HTTP Host header@http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.23]*. Read Only.</description>
        </property>
        <property readonly="true">
            <name>HttpMethod</name>
            <type>C</type>
            <description>Context.Request.HttpMethod is the current request's *[extlink:HTTP method@http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html]* such as GET, POST, or HEAD. Read Only.</description>
        </property>
        <property readonly="true">
            <name>IsLocal</name>
            <type>L</type>
            <description>Context.Request.IsLocal indicates whether the current request was made on the same machine as the server. For instance, the request made by a browser was "http://localhost/index.a5w". This can be useful to add what may be sensitive diagnostic/debug information to a response knowing that it will only be added when the request was made on the same machine as the server. Read Only.</description>
        </property>
        <property readonly="true">
            <name>IsWorkingPreview</name>
            <type>L</type>
            <description>Context.Request.IsWorkingPreview will be .T. if the request is being processed in working preview. Otherwise, it is .F. Read Only.</description>
        </property>
        <property readonly="true">
            <name>Params</name>
            <type>System::Collections::Specialized::NameValueCollection</type>
            <description>Context.Request.Params is a single collection that includes all the items in the following collections in this order: QueryString, Form, Cookies, and ServerVariables. Read Only.</description>
        </property>
        <property readonly="true" build="4594">
            <name>PhysicalPath</name>
            <type>C</type>
            <description>Context.Request.PhysicalPath is the physical path to the file being requested. Read Only.</description>
        </property>
        <property readonly="true">
            <name>QueryString</name>
            <type>System::Collections::Specialized::NameValueCollection</type>
            <description>
                <p>Context.Request.QueryString is a collection of the current request's query string's parsed name/value pairs. To get an unparsed query string use the ToString() method: Context.Request.QueryString.ToString(). To get the "firstName" query string value from this request, "http://www.acme.com/search/?firstName=John&amp;lastName=Doe" use the following Xbasic: *[xb:Context.Request.QueryString.Get("firstName")]*</p>
                <p>Read Only.</p>
            </description>
        </property>
        <property readonly="true" build="4594">
            <name>QueryStringAsText</name>
            <type>C</type>
            <description>Context.Request.QueryStringAsText is the URL decoded query part of the request url. For example: CompanyName=Alpha Software&amp;City=Burlington&amp;State=MA</description>
        </property>
        <property readonly="true">
            <name>RawUrl</name>
            <type>C</type>
            <description>Context.Request.RawUrl is the current request's URL with the protocol and domain prefix removed. The RawUrl for a request made with this URL "http://www.acme.com/search/?firstName=John&amp;lastName=Doe" would be "/search/?firstName=John&amp;lastName=Doe". Read Only.</description>
        </property>
        <property readonly="true">
            <name>Referer</name>
            <type>C</type>
            <description>Context.Request.Referer is the value of the *[extlink:HTTP Referer header@http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.36]*. Read Only.</description>
        </property>
        <property readonly="true">
            <name>Remote_Addr</name>
            <type>C</type>
            <description>Context.Request.Remote_Addr is an alias of UserHostAddress and is provided for compatibility with Alpha Anywhere web applications that were written to run on the stand-alone server. Read Only.</description>
        </property>
        <property readonly="true">
            <name>Request_Uri</name>
            <type>C</type>
            <description>Context.Request.Request_Uri is an alias of RawUrl and is provided for compatibility with Alpha Anywhere web applications that were written to run on the stand-alone server. Read Only.</description>
        </property>
        <property readonly="true">
            <name>ScriptName</name>
            <type>C</type>
            <description>Context.Request.ScriptName is an alias for the current request's PATH_INFO server variable. Read Only.</description>
        </property>
        <property readonly="true">
            <name>Script_Name</name>
            <type>C</type>
            <description>Context.Request.Script_Name is an alias for ScriptName. Read Only.</description>
        </property>
        <property readonly="true">
            <name>ServerVariables</name>
            <type>System::Collections::Specialized::NameValueCollection</type>
            <description>
                <p>Context.Request.ServerVariables is a collection of the web server variables. The follow is a list of variables that are supported on both IIS and the stand-alone application server. When running under IIS there may be other server variables available. See the *[extlink:Microsoft documentation@https://msdn.microsoft.com/en-us/library/ms524602.aspx]* for more details.</p>
                <p>
                    <list>
                        <item>
                            <name>ALL_HTTP</name>
                        </item>
                        <item>
                            <name>ALL_RAW</name>
                        </item>
                        <item>
                            <name>APPL_MD_PATH</name>
                        </item>
                        <item>
                            <name>APPL_PHYSICAL_PATH</name>
                        </item>
                        <item>
                            <name>AUTH_PASSWORD</name>
                        </item>
                        <item>
                            <name>AUTH_TYPE</name>
                        </item>
                        <item>
                            <name>AUTH_USER</name>
                        </item>
                        <item>
                            <name>CERT_COOKIE</name>
                        </item>
                        <item>
                            <name>CERT_FLAGS</name>
                        </item>
                        <item>
                            <name>CERT_ISSUER</name>
                        </item>
                        <item>
                            <name>CERT_KEYSIZE</name>
                        </item>
                        <item>
                            <name>CERT_SECRETKEYSIZE</name>
                        </item>
                        <item>
                            <name>CERT_SERIALNUMBER</name>
                        </item>
                        <item>
                            <name>CERT_SERVER_ISSUER</name>
                        </item>
                        <item>
                            <name>CERT_SERVER_SUBJECT</name>
                        </item>
                        <item>
                            <name>CONTENT_LENGTH</name>
                        </item>
                        <item>
                            <name>CONTENT_TYPE</name>
                        </item>
                        <item>
                            <name>GATEWAY_INTERFACE</name>
                        </item>
                        <item>
                            <name>HEADER_</name>
                            <description>HeaderName interpreted as-is. For example, if you specify HEADER_MY-HEADER, the server searches for a request header named MY-HEADER.</description>
                        </item>
                        <item>
                            <name>HTTP_</name>
                            <description>HeaderName with underscores interpreted as dashes. For example, if you specify HTTP_MY_HEADER, the server searches for a request header named MY-HEADER.</description>
                        </item>
                        <item>
                            <name>HTTP_ACCEPT</name>
                        </item>
                        <item>
                            <name>HTTP_ACCEPT_ENCODING</name>
                        </item>
                        <item>
                            <name>HTTP_ACCEPT_LANGUAGE</name>
                        </item>
                        <item>
                            <name>HTTP_CONNECTION</name>
                        </item>
                        <item>
                            <name>HTTP_COOKIE</name>
                        </item>
                        <item>
                            <name>HTTP_HOST</name>
                        </item>
                        <item>
                            <name>HTTP_METHOD</name>
                        </item>
                        <item>
                            <name>HTTP_REFERER</name>
                        </item>
                        <item>
                            <name>HTTP_URL</name>
                        </item>
                        <item>
                            <name>HTTP_USER_AGENT</name>
                        </item>
                        <item>
                            <name>HTTP_VERSION</name>
                        </item>
                        <item>
                            <name>HTTPS</name>
                        </item>
                        <item>
                            <name>HTTPS_KEYSIZE</name>
                        </item>
                        <item>
                            <name>HTTPS_SECRETKEYSIZE</name>
                        </item>
                        <item>
                            <name>HTTPS_SERVER_ISSUER</name>
                        </item>
                        <item>
                            <name>HTTPS_SERVER_SUBJECT</name>
                        </item>
                        <item>
                            <name>LOGON_USER</name>
                        </item>
                        <item>
                            <name>PATH_INFO</name>
                        </item>
                        <item>
                            <name>QUERY_STRING</name>
                        </item>
                        <item>
                            <name>REMOTE_ADDR</name>
                        </item>
                        <item>
                            <name>REMOTE_HOST</name>
                        </item>
                        <item>
                            <name>REMOTE_USER</name>
                        </item>
                        <item>
                            <name>REQUEST_METHOD</name>
                        </item>
                        <item>
                            <name>SCRIPT_NAME</name>
                        </item>
                        <item>
                            <name>SCRIPT_TRANSLATED</name>
                        </item>
                        <item>
                            <name>SERVER_NAME</name>
                        </item>
                        <item>
                            <name>SERVER_PORT</name>
                        </item>
                        <item>
                            <name>SERVER_PORT_SECURE</name>
                        </item>
                        <item>
                            <name>SERVER_PROTOCOL</name>
                        </item>
                        <item>
                            <name>SERVER_SOFTWARE</name>
                        </item>
                        <item>
                            <name>UNENCODED_URL</name>
                        </item>
                        <item>
                            <name>URL</name>
                        </item>
                    </list>
                </p>
                <p>The following code is an example of how to retrieve a server variable:</p>
                <p>
                    <example code="xb"><![CDATA[Context.Request.ServerVariables.Get("HTTP_REFERER")]]></example>
                </p>
            </description>
        </property>
        <property readonly="true">
            <name>TemporaryDirectory</name>
            <type>C</type>
            <description>Context.Request.TemporaryDirectory is the path to a temporary directory that is a unique for the request and is valid for the duration of a request. When the request is finished the directory is deleted. The directory path will always end with a back-slash ("\"). Read Only.</description>
        </property>
        <property build="5722">
            <name>TimeoutBehavior</name>
            <type>A5INETServerIntegration::RequestTimeoutBehavior</type>
            <description>
                <p>Context.Request.TimeoutBehavior is the setting for how a request timeout is determined. This setting allows a specific request to timeout differently than the system defined (default) timeout behavior. Use this setting if a request needs continue processing beyond a cancelled or dropped network connection or if the request process could take longer than 2 minutes. Typically requests should be processed as quickly as possible so that web server threads can be used to process other requests. Long running processing or processing that needs to be deterministic and have recoverability (restart if a resource like network, disk, or database is unavailable during processing) should be done through a workflow or other task processing subsystem.</p>
                <p>This setting is active only for the current request from the point the value is set until the value is reset or the request ends.The value may be a combination of the following values:</p>
                <p>
                    <list>
                        <item>
                            <name>Default</name>
                            <description>The Default option uses the system defined behavior which is to cancel request processing if the connection to the client is closed and to terminate a request after 2 minutes of processing.</description>
                        </item>
                        <item>
                            <name>ClientNoLongerConnected</name>
                            <description>The ClientNoLongerConnected option tracks whether the connection to the client is closed and if it is closed the request processing is terminated.</description>
                            </item>
                        <item>
                            <name>Duration</name>
                            <description>The Duration option tracks the duration of the request process. Once the duration defined by TimeoutDurationSeconds is exceeded the request	processing is terminated. Use this option without the ClientNoLongerConnected option to let request processing continue even if the connection to the client is closed.</description>
                        </item>
                    </list>
                </p>
                <p>The following code is an example of how to set a request to terminate only after a 5 minute duration:</p>
                <p>
                    <example code="xb"><![CDATA[Context.Request.TimeoutBehavior = A5AS::A5INETServerIntegration::RequestTimeoutBehavior::Duration
Context.Request.TimeoutDurationSeconds = 300]]></example>
                </p>
                <p>The following code is an example of how to set a request to terminate after a 3 minute duration or a closed client connection:</p>
                <p>
                    <example code="xb"><![CDATA[Context.Request.TimeoutBehavior = A5AS::A5INETServerIntegration::RequestTimeoutBehavior::Duration .and. A5AS::A5INETServerIntegration::RequestTimeoutBehavior::ClientNoLongerConnected
Context.Request.TimeoutDurationSeconds = 180]]></example>
                </p>
            </description>
        </property>
        <property build="5722">
            <name>TimeoutDurationSeconds</name>
            <type>N</type>
            <description>Context.Request.TimeoutDurationSeconds is the amount of time in seconds that a request is allowed to run before it is terminated. This is used in conjunction when Context.Request.TimeoutBehavior includes the A5AS::A5INETServerIntegration::RequestTimeoutBehavior::Duration option.</description>
        </property>
        <property readonly="true">
            <name>UserAgent</name>
            <type>C</type>
            <description>Context.Request.UserAgent is the UserAgent string that is sent by the browser. Read Only.</description>
        </property>
        <property readonly="true">
            <name>UserHostAddress</name>
            <type>C</type>
            <description>Context.Request.UserHostAddress is the IP host address of the remote client. Read Only.</description>
        </property>
        <property readonly="true">
            <name>Variables</name>
            <type>P</type>
            <description>Context.Request.Variables. Read Only.</description>
        </property>
    </properties>
    <!--list:.-->
</page>