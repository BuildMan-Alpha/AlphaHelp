<page>
    <topic>Context.Session Object</topic>
    <description>Context.Session object properties and methods.</description>
    <sections>
        <section>
            <description>The Context.Session object contains properties and methods available for working with a server session. On the stand-alone application server session data is stored in memory in the same process as the application server. On IIS session data can be stored in one of many different ways. Session data can be stored in process like the stand-alone application server, in a state server which is another process on the same machine as the web server, or in a database (SQL or NoSql) depending on the session state provider that is selected for the application. Methods on the session object may have different performance characteristics depending on the session storage that is used.</description>
            <note>The Context.Session object has a *[link:CallResult]* property. Use this property to see if a method call or property get succeeds before using a method's returned value or property's value. See the following examples: </note>
        </section>
        <section>
            <example><![CDATA[dim errorMsg as C = ""
Context.Session.Add("lastVisitedPage", "secret")
if .not. *[link:Context.Session.CallResult.Success@./index.xml#section1_CallResult]* then
     'Note: This error is most likely caught and handled and does not cause a page error. 
     error_generate(Context.Session.CallResult.Text) 
end if ]]></example>
        </section>
    </sections>
    <properties>
        <property readonly="true">
            <name>CallResult</name>
            <type>CallResult</type>
            <description>Context.Session.CallResult is used to check the success or failure of a method call or property get or set in the Context.Session object. See the note in the Context.Session class description above for more details and example. Read Only</description>
        </property>
        <property readonly="true">
            <name>CookieMode</name>
            <type>System::Web::HttpCookieMode</type>
            <description>Context.Session.CookieMode indicates whether the application is configured for cookieless sessions.</description>
        </property>
        <property readonly="true">
            <name>Count </name>
            <type>N</type>
            <description>Context.Session.Count is the number of items in the session-state collection. Read Only.</description>
        </property>
        <property readonly="true">
            <name>IsCookieless</name>
            <type>L</type>
            <description>Context.Session.IsCookieless indicates where the session id is returned to the client. If .T. the session id is added to the URL. Otherwise, the session id is stored in a cookie. Read Only.</description>
        </property>
        <property readonly="true">
            <name>IsNewSession</name>
            <type>L</type>
            <description>Context.Session.IsNewSession if .T. indicates the session was create during the current request. Otherwise, the session was created by some prior request. Read Only.</description>
        </property>
        <property readonly="true">
            <name>IsReadOnly</name>
            <type>L</type>
            <description>Context.Session.IsReadOnly if .T. indicates the session is read-only. Otherwise, the session is read-write. </description>
        </property>
        <property readonly="true">
            <name>IsSynchronized</name>
            <type>L</type>
            <description>Context.Session.IsSynchronized if .T. indicates that access to the session-state variables is thread safe. Otherwise, manual synchronization of session-state variable access needs to be done. Read Only</description>
        </property>
        <property readonly="true">
            <name>Keys</name>
            <type>System::Collections::Specialized::NameObjectCollectionBase::KeysCollection</type>
            <description>Context.Session.Keys is a collection of all the keys in the session-state. Read Only.</description>
        </property>
        <property readonly="true">
            <name>Mode</name>
            <type>System::Web::SessionState::SessionStateMode</type>
            <description>Context.Session.Mode specifies how the session-state is stored. Read Only.</description>
        </property>
        <property readonly="true">
            <name>SessionId</name>
            <type>C</type>
            <description>Context.Session.SessionId is the unique identifier for the session. Read Only</description>
        </property>
        <property>
            <name>Timeout</name>
            <type>N</type>
            <description>Context.Session.Timeout gets or sets the time, in minutes, for a session to be terminated due to inactivity. Read Write.</description>
        </property>
        <property readonly="true">
            <name>Timestamp</name>
            <type>T</type>
            <description>Context.Session.Timestamp is the timestamp for when the session was created. The value is local time on the server. Read Only.</description>
        </property>
        <property readonly="true">
            <name>UniqueDataKey</name>
            <type>C</type>
            <description>Context.Session.UniqueDataKey generated a unique value each time it is accessed. The value is the 32 digits of a Guid prepended with "DTA" resulting in a value that looks like this: DTA114ea94b16924e30ace6bef15c75d8f4. Read Only.</description>
        </property>
        <property readonly="true">
            <name>Variables</name>
            <type>P</type>
            <description>Context.Session.Variables is the way to access session-state collection values directly. Using Context.Session.Variables.MySessionVar = "MySessionVarValue" is equivalent to using Context.Session.Add("MySessionVar", "MySessionVarValue"). Note that Context.Session.MySessionVar is also equivalent to Context.Session.Variables.MySessionVar, but that Context.Session.Variables.MySessionVar is preferred. See an example .a5w page below.</description>
            <section>
                <note>The Server Programming Changes for Version 11 states that session variables can only be strings and that other variables types are not supported and may not work as expected. This also means that dots (".") are not allowed in the session variable name. That is, Context.Session.Variables.MySessionVar.FirstName is not allowed.</note>
            </section>
            <section>
                <example><![CDATA[<html>
<head> </head> 
<body> 
<pre>
<%a5 
  Context.Session.Variables.ASessionVar = "Value for ASessionVar." 
  Context.Session.Add("AnotherSessionVar", "Value for AnotherSessionVar.")
  ? *html_escape(property_to_string(Context.Session.Variables)) + crlf() 
  Context.Session.SaveData("ASessionVar", "Changed value for ASessionVar.") 
  ?*html_escape(property_to_string(Context.Session.Variables)) + crlf() 
%> 
</pre>
</body>
</html>]]></example>
            </section>
        </property>
    </properties>
    <!--list:.-->
</page>