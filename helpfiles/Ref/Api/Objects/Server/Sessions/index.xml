<page>
    <shortlink>api objects session object</shortlink>
    <topic>Session Object</topic>
    <description>The Session object is used to work with the server session. The *[xb:Session]* and *[xb:Context.Session]* object are the same and can be used interchangeably in Xbasic scripts running on both the Standard Application Server and Application Server for IIS. See [Context.Session] for a list of properties and methods for the *[xb:Session]* object.</description>
    <sections>
        <section>
            <title>Sessions</title>
            <description>
                <p>Web requests are stateless, that is each request from a client (web browser) to a server is separate from any previous requests and no information about previous requests is available to the current request. You should think of each page as a separate Xbasic script - once one is finished, the next knows nothing about the previous. This can make the building of web applications quite difficult as the developer needs to track this state information within each web page returned by the server.</p>
                <p>The [Standard Application Server] and [Application Server for IIS] use sessions and [Session Variables] (as explained below) to overcome this limitation of web servers. As long as the Application Server is licensed to handle the number of active requested sessions, a request from a client will cause a new session to be created. The server will then associate future requests from that client with the same session until the session expires. A session expires when a request has not been received from the associated client within the time period set by the *[ui:Session Lifetime]*.</p>
                <p>Sessions are tracked with cookies. If cookies are not enabled on a specific client computer, the server cannot track the session.</p>
            </description>
            <obsolete>
                <p>Support for cookieless session tracking was removed from the Standard Application Server and is no longer supported in Alpha Anywhere build 4811 or newer. This eliminated the small possibility that previously existed of "session hijacking". Your application users must support cookies in order to use sessions with the Standard Application Server.</p>
            </obsolete>
        </section>
        <section>
            <description>
                <p>When a session is created by the server, some information is automatically stored in it - the session ID and a timestamp. As an application developer, you can also store other information in the session in order to make it available to subsequent requests without explicitly passing it to that request.</p>
                <p>To create a "session" level variable, simply name it *[xb:session.varname]*. It will then be persistent across all page views and can be later referenced as *[xb:session.varname]* in subsequent pages.</p>
                <p>To illustrate this limitation of web programming and the session solution, look at the following example.</p>
            </description>
        </section>
        <section>
            <example code=""><![CDATA[<%a5 greeting = "Hello World" %>
<HTML>
<HEAD><TITLE>Session Variables</TITLE></HEAD>
<BODY>
<%a5 ? greeting %>
</BODY>
</HTML>]]></example>
            <figure>
                <link>images/WP_nosessions1.gif</link>
            </figure>
        </section>
        <section>
            <example code=""><![CDATA[<HTML>
<HEAD><TITLE>Session Variables</TITLE></HEAD>
<BODY>
<%a5 ? greeting %>
</BODY>
</HTML>]]></example>
            <figure>
                <link>images/WP_nosessions2.gif</link>
            </figure>
        </section>
        <section>
            <description>In the example above, the second page has no access to the variables created in the first, so an error is generated when the second page tries to use the undefined variable greeting. But if the variable is instead created as Session.greeting it will be available to all pages using the same session as can be seen below.</description>
            <example code=""><![CDATA[<%a5 Session.greeting = "Hello World" %>
<HTML>
<HEAD><TITLE>Session Variables</TITLE></HEAD>
<BODY>
<%a5 ? Session.greeting %>
</BODY>
</HTML>]]></example>
            <figure>
                <link>images/WP_withsessionvars.gif</link>
            </figure>
        </section>
        <section>
            <example code=""><![CDATA[<HTML>
<HEAD><TITLE>Session Variables</TITLE></HEAD>
<BODY>
<%a5 ? Session.greeting %>
</BODY>
</HTML>]]></example>
            <figure>
                <link>images/WP_withsessionvars.gif</link>
            </figure>
        </section>
        <section>
            <title>Session Variables</title>
            <description>
                <p>The values automatically stored in each session by the server are documented in [Context.Session]. *[xb:Context.session]* and *[xb:session]* are the same object and can be used interchangeably. Variables added to the session object using either *[xb:Context.Session]* or *[xb:session]* can be accessed by either.</p>
                <p>Session variables have global scope and are visible to any functions you may call from you A5W page.</p>
            </description>
            <note>When you are building an expression, you are not inside a running web session so there are no session variables available to the builder. You have to manually type in the names of the variables.</note>
        </section>
        <section>
            <title>Session ID</title>
            <description>
                <p>A Session ID is a unique ID that the Application Server assigns to each client. It uses the session ID to keep session information associated with the appropriate client. When the client sends a request to the Application Server, it needs to include this session ID so that the server knows which client is making the request.</p>
                <p>The Application Server will use a cookie to track the user's session ID. If the user has disabled cookies, then the session ID will be appended onto the end of each URL.</p>
                <p>When the session times out, the Application Server will issue a new session ID when the user reconnects. If the server decides it can re-use a session ID, it may issue the same session ID to the user. However, any session variables that were associated with the user's previous session will no longer be available and must be recreated.</p>
            </description>
        </section>
        <section>
            <title>Additional Topics</title>
            <!--list:.-->
        </section>
    </sections>
    <links>
        <link link="api objects context session object">Context.Session</link>
        <link link="Application Server">Standard Application Server</link>
        <link link="IIS">Application Server for IIS</link>
        <link href="#section1_Session Variables">Session Variables</link>
    </links>
    <see>
        <ref link="api objects context session object">Context.Session</ref>
        <ref link="api xbasic session functions">Session Functions</ref>
        <ref link="server a5w understanding and using session variables">Understanding and Using Session Variables</ref>
    </see>
</page>