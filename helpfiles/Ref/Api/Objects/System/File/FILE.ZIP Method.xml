<page api="xb">
    <shortlink>FILE.ZIP Function</shortlink>
    <topic>FILE.ZIP Function</topic>
    <description>Zip files listed - expects a comma separated list.</description>
    <prototype>Result_Flag as L = Zip(C zipfilename,C files[,C zip_flags[,C base_path]])</prototype>
    <arguments>
        <argument>
            <name>Result_Flag</name>
            <type>L</type>
            <description>.T. = The zip file was successfully created.</description>
        </argument>
        <argument>
            <name>zipfilename</name>
            <type>C</type>
            <description>The name of the zip file to create. If you do not specify an extension, Alpha Anywhere will automatically add the ".ZIP" extension.</description>
        </argument>
        <argument>
            <name>files</name>
            <type>C</type>
            <description>Files to add to the zip file. Wildcards are allowed (e.g. " c:\Alpha Anywhere\data\invoices\*.* "). Otherwise, provide a comma, or CR-LF delimited list of file names. If you provide a CR-LF delimited list, you must add ',' to the list of flags.</description>
        </argument>
        <argument optional="true">
            <name>zip_flags</name>
            <type>C</type>
            <description>Default = "" (No paths are stored.) The following flags can be used in the zip command:</description>
            <list>
                <item>
                    <name-title>Flag</name-title>
                    <description-title>Meaning</description-title>
                </item>
                <item>
                    <name>d</name>
                    <description>Include absolute paths in the zip file.</description>
                </item>
                <item>
                    <name>base path</name>
                    <description>Store paths in the zip file that are relative to the base path.</description>
                </item>
                <item>
                    <name>,</name>
                    <description>Indicate that the list of files is CR-LF delimited, not comma delimited. Use this flag if there are commas in any of the filenames.</description>
                </item>
            </list>
        </argument>
        <argument optional="true">
            <name>base_path</name>
            <type>C</type>
            <description>The base path to store in the zip file.</description>
        </argument>
    </arguments>
    <discussion>
        <p>The FILE.ZIP() method adds a file or files to a zip file called Zip_Filename. If Zip_Filename does not exists it is created. If Zip_Filename already exists, then the files in the File_List are added to the existing zip file. File_List can include wildcard characters.</p>
        <p>A zip file is a highly compressed files that contains one or more files. Zip files are ideal for creating backups of your database applications.</p>
    </discussion>
    <sections>
        <section>
            <title>Example</title>
            <description>For example, the following flag string specifies that the zip file should contain paths that are relative to the "c:\mydata" folder:</description>
            <example code="xb">
                <![CDATA[
file.zip(myzip,"c:\mydata\*.*" ,"d","c:\mydata")
]]>
            </example>
        </section>
        <section>
            <description>Example create a zip file of all of the files in c:\a5data\invoice.</description>
            <example code="xb">
                <![CDATA[
FILE.ZIP("c:\backup.ZIP","c:\a5data\invoice\*.*")
]]>
            </example>
        </section>
        <section>
            <description>Example create a zip file of all of the files in the current database folder.</description>
            <example code="xb">
                <![CDATA[
path = :a5.get_path()
zip_filename = "backup_data"
'construct full filename - chr(92) is \ character.
full_zip_filename = alltrim(path) + chr(92) + zip_filename
'Check to see if zip file exists. If it does, delete it.
If file.exists(full_zip_filename ) then
    file.remove(full_zip_filename)
End if
file.zip(full_zip_filename,path + chr(92) + "*.*")
]]>
            </example>
        </section>
        <section>
            <note>FILE.ZIP does not support creating password protected zip archives.</note>
        </section>
    </sections>
    <see>
        <ref link="FILE.UNZIP Function">FILE.UNZIP()</ref>
        <ref link="FILE.ZIPLIST Function">FILE.ZIPLIST()</ref>
        <ref link="file functions">File Functions</ref>
        <ref link="file methods">File Methods</ref>
    </see>
    <terms>file,contains,database,function,list,string</terms>
</page>