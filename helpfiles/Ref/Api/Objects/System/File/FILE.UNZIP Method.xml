<page api="xb">
    <shortlink>FILE.UNZIP Function</shortlink>
    <topic>FILE.UNZIP Function</topic>
    <description>Extract files from a zip file.</description>
    <prototype static="true">Result_Flag as L = FILE.UnZip(C zipfilename[,C files[,C path[,c unzip_flags]]])</prototype>
    <arguments>
        <argument>
            <name>zipfilename</name>
            <type>C</type>
            <description>The name of the zip file. It is necessary to explicitly specify the .ZIP extension.</description>
        </argument>
        <argument optional="true">
            <name>files</name>
            <type>C</type>
            <description>A pattern that selects files from the zip file. Wildcards are allowed.</description>
        </argument>
        <argument optional="true">
            <name>path</name>
            <type>C</type>
            <description>The target directory for the unzipped files.</description>
        </argument>
        <argument optional="true">
            <name>unzip_flags</name>
            <type>C</type>
            <description>Additional flags to control how the zip file is decompressed. Available flags are listed below:</description>
            <list>
                <item>
                    <name-title>Flag</name-title>
                    <description-title>Meaning</description-title>
                </item>
                <item>
                    <name>"P"</name>
                    <description>Creates the same subfolder structure under Destination_Folder that the original files had.</description>
                </item>
            </list>
        </argument>
    </arguments>
    <returns>
        <return>
            <name>Result_Flag</name>
            <types>
                <type>L</type>
            </types>
            <description>Returns *[xb:.T.]* if the operation is successful. Otherwise *[xb:.F.]*.</description>
        </return>
    </returns>
    <discussion>
        <p>The FILE.UNZIP() method extracts the files that match the mask from Zip_Filename, and places the files in the Output_Directory. If the files are successfully extracted, Result_Flag will be *[xb:.T.]*.</p>
    </discussion>
    <sections>
        <section>
            <title>Examples:</title>
            <description>Extract files from backup.zip to c:\temp.</description>
            <example code="xb">
                <![CDATA[
FILE.unzip("c:\backup.zip", "*.*", "c:\temp")]]>
            </example>
        </section>
        <section>
            <description>Extract .dbf files from backup.zip to c:\temp.</description>
            <example code="xb">
                <![CDATA[
FILE.unzip("c:\backup.zip", "*.dbf", "c:\temp")
]]>
            </example>
        </section>
        <section>
            <note>FILE.UNZIP does not support extracting password protected zip archives.</note>
        </section>
        <section>
            <title>Extracting files with path information</title>
            <description>
                <p>If the zip file was created with path information stored in the zip file, then the mask must include the path that is stored in the zip file. For example, using the FILE.ZIPLIST() method, you can see the internal name for all files in the zip file.</p>
            </description>
            <example code="xb">
                <![CDATA[
? FILE.ziplist("c:\backup.zip", "n" + crlf())
data/backup/Mesurements.Dbf
data/backup/Mesurements.Cdx
data/backup/Mesurements.Ddd
data/backup/Mesurements.Ddm
data/backup/Mesurements.Ddx
]]>
            </example>
        </section>
        <section>
            <description>In the above example, the zip file contains path information. Therefore, to unzip a file ( measurements.dbf, for example) from this file you would use the command:</description>
            <example code="xb">
                <![CDATA[
FILE.unzip("c:\backup.zip", "data\backup\measurements.dbf", "c:\temp")]]>
            </example>
        </section>
        <section>
            <description>Or, to unzip all of the files in this zip file:</description>
            <example code="xb">
                <![CDATA[
FILE.unzip("c:\backup.zip", "data\backup\*.*", "c:\temp")]]>
            </example>
        </section>
        <section>
            <description>On the other hand, consider a zip file that was created without path information:</description>
            <example code="xb">
                <![CDATA[
? FILE.ziplist("c:\backup.zip","n" + crlf())
Mesurements.Dbf
Mesurements.Cdx
Mesurements.Ddd
Mesurements.Ddm
Mesurements.Ddx]]>
            </example>
        </section>
        <section>
            <description>In this case, the mask will not include path information. For example:</description>
            <example code="xb">
                <![CDATA[
FILE.unzip("c:\backup.zip", "measurements.dbf", "c:\temp")]]>
            </example>
        </section>
        <section>
            <description>Or, to unzip all of the files in this zip file:</description>
            <example code="xb">
                <![CDATA[
FILE.unzip("c:\backup.zip", "*.*", "c:\temp")]]>
            </example>
        </section>
    </sections>
    <see>
        <ref link="file.zip function">FILE.ZIP()</ref>
        <ref link="FILE.ZIPLIST Function">FILE.ZIPLIST()</ref>
        <ref link="api UNZIP FILES function">UNZIP_FILES()</ref>
        <ref link="file functions">File Functions</ref>
        <ref link="file methods">File Methods</ref>
    </see>
    <terms>file,contains,directory,function,mask</terms>
</page>