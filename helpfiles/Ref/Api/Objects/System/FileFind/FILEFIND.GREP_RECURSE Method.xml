<page>
      <shortlink>api objects system filefind object grep recurse function</shortlink>
   <topic>FILEFIND.GREP_RECURSE Function</topic>
   <description>Same as grep() but recurses subdirectories.</description>
   
   <prototype>Line_List as C = Grep_Recurse(C file_pattern,C regular_expression[,N file_attribute[,C grep_format[,C regex_options]]])</prototype>
   <arguments>
     <argument>
         <name>Line_List</name>
         <description>A list containing of one line per file that contains text that matches the Regular_Expression. Each line contains the filename, line number, and the line containing the matching text.
</description>
     </argument>
     <argument>
         <name>file_pattern</name>
         <description>A pattern to select file names using wildcard characters like '*' and '? '.
</description>
     </argument>
     <argument>
         <name>regular_expression</name>
         <description>Optional. Default = 0 (normal files). The File_Attribute parameter is a numeric value specifying the type of file to find. You can find files that have one or more of the following attributes:</description>

   
   
     </argument>
     <argument>
         <name>file_attribute</name>
         <description>Numeric</description>
<list>
<item>
<name>FILE_FIND_NORMAL</name>
</item>

<item>
<name>FILE_FIND_READONLY</name>
</item>

<item>
<name>FILE_FIND_HIDDEN</name>
</item>

<item>
<name>FILE_FIND_SYSTEM</name>
</item>

<item>
<name>FILE_FIND_LABEL</name>
</item>

<item>
<name>FILE_FIND_DIRECTORY</name>
</item>

<item>
<name>FILE_FIND_ARCHIVE</name>
</item>

<item>
<name>FILE_FIND_AND_FLAGS</name>
</item>

<item>
<name>FILE_FIND_NOT_READONLY</name>
</item>

<item>
<name>FILE_FIND_NOT_DIRECTORY</name>
</item>

<item>
<name>FILE_FIND_NOT_ARCHIVE</name>
</item>

<item>
<name>FILE_FIND_AND_NOT_FLAGS</name>
</item>


</list>
   
         
         
     </argument>
     <argument>
         <name>grep_format</name>
         <description>Character</description>
<list>
<item>
<name>"\0" = All text.</name>
</item>

<item>
<name>"\N" = Tagged text expression.</name>
</item>

<item>
<name>"N" = No copy of unmatched text.</name>
</item>

<item>
<name>"F" = Only process first match.</name>
</item>

<item>
<name>"$(OFFSET)" = Return the offset of the match.</name>
</item>

<item>
<name>"$(LENGTH)" = Return the length of the match.</name>
</item>

<item>
<name>"$(END)" = Return the ending offset of the match.</name>
</item>

<item>
<name>"$(LINE)" = Return the line the match started on.</name>
</item>

<item>
<name>"$(ENDLINE)" = Return the line the match ended on.</name>
</item>

<item>
<name>"$(LINES)" = Return the number of lines the match crosses.</name>
</item>

<item>
<name>"$(LINETEXT)" = Return the complete line(s) of text the match(es) occurred on.</name>
</item>

<item>
<name>"$(LINEOFFSET)" = Return the offset of the beggining of the match line.</name>
</item>

<item>
<name>"$(ENDLINEOFFSET)" = Return the offset of the end of the line the match ended on.</name>
</item>

<item>
<name>"$(COUNT)" = Return the number of matches encountered so far.</name>
</item>

<item>
<name>"$(NEXTLINE)" = Advance the search pointer to the next line.</name>
</item>
</list>
         
         
         
         
         
         
         
         
         
         
         
         
         
     </argument>
     <argument>
         <name>regex_options</name>
         <description>Optional. Default = "S". Specify which compatibility with a common implementation. ThE flags for Emacs, Awk, Grep, Egrep and Sed conventions allow the pattern to follow the conventions of those utilities (which have slightly different variants regarding what is escaped and what is not escaped).</description>
 <list>
 <item>
 <name>"I" = Ignore case</name>
 </item>
 
 <item>
 <name>"E" = Follow Emacs conventions</name>
 </item>
 
 <item>
 <name>"A" = Follow Awk conventions</name>
 </item>
 <item>
 <name>"G" = Follow Grep conventions</name>
 </item>
 
 <item>
 <name>"EG" = Follow Egrep conventions</name>
 </item>
 
 <item>
 <name>"S" = Follow Sed conventions</name>
 </item>
 
 <item>
 <name>"X" = Extended (similar to Awk but no need to escape '' inside of [])</name>
 </item>
 
 </list>
 
 
 
     </argument>
 
 
 
 
   </arguments>
   
   <discussion>
The FILEFIND.GREP_RECURSE() method executes a regular expression against the contents of the files in the current directory and its sub-directories that match a specified file pattern and returns a list of filenames and text.
   </discussion>
   <example><![CDATA[
file.dir_put("c:\\")
? filefind.grep_recurse("*.txt", "(W|w)indows")
= ALPHA4V8\README.TXT 26:Running With Windows 95
ALPHA4V8\README.TXT 33: Using Alpha Four with Microsoft Windows for Workgroups
ALPHA4V8\README.TXT 136:To configure Windows for Workgroups to work properly with Alpha Four,
ALPHA4V8\README.TXT 429:Field Rules: Lookup Windows can Now Use Custom Column Headings and Custom
Textpad\README.TXT 15: o MS Windows 95, NT 3.51, or later versions of Windows.
Textpad\README.TXT 15: o MS Windows 95, NT 3.51, or later versions of Windows.
Textpad\README.TXT 20: Please note that Windows 3.1 with Win32s is not supported.
frame55\fmreg.txt 25:HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\App Paths\FRAMEMAKER.EXE
frame55\Readme.txt 31:file named README (Readme.txt, in Windows). This file is in the
frame55\FrameLog_00.01.28_16.12.44.txt 6:Window System: MSWindows
]]></example>
  
   <see>
      <ref>File Functions and  Methods</ref>
      <ref>FILEFIND Methods</ref>
      <ref link="Regular Expression Functions">Regular  Expressions</ref>
      <ref href="/Api/Functions/Data Type/Character Functions/Regular Expressions Functions/Regular Expressions Functions and Methods.html">Regular  Expressions Functions and Methods</ref>
   </see>
   
<terms>filefind,case,contains,directory,expressions,file,function,list,number,pointer,search</terms>
   
   
   
   
  </page>