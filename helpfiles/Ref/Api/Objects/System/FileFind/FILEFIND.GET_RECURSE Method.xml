<page>
   <topic>FILEFIND.GET_RECURSE Function</topic>
    <description> wrapper for filefind.get() that recursively finds all files in pattern.  Path is the starting path.</description>

   <syntax>FILEFIND as C = filefind.get_recurse(C path ,C pattern [,N file_attribute [,C filefindformat [,C SkipFolders ]]])</syntax>
   <arguments>
     <argument>
         <name>path</name>
         <description>The folder where the file search begins.</description>
     </argument>
     <argument>
         <name>pattern</name>
         <description>A pattern to select file names using wildcard characters like '*' and '? '.</description>
     </argument>
     <argument>
         <name>file_attribute</name>
         <description>Optional. Default = FILE_FIND_NORMAL. The File Attribute parameter is a numeric value specifying the type of file to find. You can find files that have one or more of the following attributes:
To find files that have combinations of attributes, add the attribute values together. For example, to find all hidden system files, use 6 (2 + 4) (or FILE_FIND_HIDDEN + FILE_FIND_SYSTEM, which evaluates to 6) as the attribute.
Note : You can either specify the numeric value for the attribute, or you can use the system variable name. For example, FILE_FIND_NORMAL has a value of 0.

</description>
<list>
<item>
<name-title>File Attribute</name-title>
<description-title>Description</description-title>
</item>

<item>
<name>FILE_FIND_NORMAL</name>
<description>Normal</description>
</item>

<item>
<name>FILE_FIND_READONLY</name>
<description>Read-only</description>
</item>

<item>
<name>FILE_FIND_HIDDEN</name>
<description>Hidden</description>
</item>

<item>
<name>FILE_FIND_SYSTEM</name>
<description>System</description>
</item>

<item>
<name>FILE_FIND_LABEL</name>
<description>Label</description>
</item>

<item>
<name>FILE_FIND_DIRECTORY</name>
<description>Directory</description>
</item>

<item>
<name>FILE_FIND_ARCHIVE</name>
<description>Archive</description>
</item>

<item>
<name>FILE_FIND_AND_FLAGS</name>
<description>Specifies that multiple flags should be ANDed together rather than ORed. By default flags are ORed.
</description>
</item>

<item>
<name>FILE_FIND_NOT_READONLY</name>
<description>Files that are NOT read-only</description>
</item>

<item>
<name>FILE_FIND_NOT_DIRECTORY</name>
<description>Files that are NOT directory files</description>
</item>

<item>
<name>FILE_FIND_NOT_ARCHIVE</name>
<description>Files that do not have their archive bit turned on.</description>
</item>

<item>
<name>FILE_FIND_AND_NOT_FLAGS</name>
<description>Specifies that when multiple "NOT" flags are used that the flags should be ANDed together.</description>
</item>

</list>
     </argument>
     <argument>
         <name>filefindformat</name>
         <description>Optional. Default = "pn". Specifies the type of file to retrieve. The format string can contain these characters:
The format characters, D, H and S can be followed by optional true and false values enclosed in parentheses. E.g. the format string " D(directory - )(file - )N " would list entries in a folder. Each entry would be prefixed with either " directory - ", or " file - ", depending on its type. The C, R and T options can be followed by ( Format_String ). See TIME() function for Format_String options.
</description>

<list>
<item>
<name>Format Character</name>
<description>Represents</description>
</item>

<item>
<name>P</name>
<description>Path</description>
</item>

<item>
<name>N</name>
<description>Filename</description>
</item>

<item>
<name>D</name>
<description>Directory - "d" if file is a directory, "-" if not.</description>
</item>

<item>
<name>H</name>
<description>Hidden - "h" if file is hidden, "-" if not.</description>
</item>


<item>
<name>S</name>
<description>System - "s" if file is a system file, "-" if not.</description>
</item>


<item>
<name>T</name>
<description>Date and time file was last updated</description>
</item>


<item>
<name>L</name>
<description>Size</description>
</item>

<item>
<name>C</name>
<description>Creation date and time</description>
</item>

<item>
<name>R</name>
<description>Last time read</description>
</item>


<item>
<name>A</name>
<description>Archive bit</description>
</item>

<item>
<name>X</name>
<description>DOS short name (8.3), if the file is a long file name</description>
</item>
</list>

     </argument>
     <argument>
         <name>SkipFolders</name>
         <description>Character</description>
     </argument>
   </arguments>
     <discussion>
The FILEFIND.GET_RECURSE() method is a high level wrapper for FILEFIND.GET() that recursively searches sub-directories to find all files that match a pattern.
   </discussion>
   
   <sections>
       <section>
            <description>The following example assembles a CR-LF delimited list of all HTML files in and below the doc_dir directory.
</description>
            <example><![CDATA[
htm_FILEFIND = filefind.get_recurse(doc_dir, "*.htm", FILE_FIND_NORMAL+FILE_FIND_NOT_DIRECTORY, "P|N" + crlf())
]]></example>
       </section>
   </sections>
   <see>
      <ref>File Functions and  Methods</ref>
      <ref>FILEFIND Methods</ref>
      <ref href="/Api/Objects/index.xml">Directory Functions</ref>
   </see>
   
   <terms>filefind,directory,file,function,html,list,search,string,system,time,variable</terms>
   
</page>