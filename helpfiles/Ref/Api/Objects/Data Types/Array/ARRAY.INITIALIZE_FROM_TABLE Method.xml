<page api="xb">
     <shortlink>api objects array initialize from table function</shortlink>
    <topic>ARRAY.INITIALIZE_FROM_TABLE Function</topic>
    <description>Initialize property array subfields from a table.</description>
    <prototypes>
        <prototype>V &lt;ARRAY&gt;.initialize_from_table( tablename as C [, filter as C [, order as C [, append as L [, columns as C]]]])</prototype>
        <prototype>V &lt;ARRAY&gt;.initialize_from_table( tablename as C [, filter as C [, order as C ]] )</prototype>
        <prototype>V &lt;ARRAY&gt;.initialize_from_table( table_pointer as P [, filter as C [, order as C ]] )</prototype>
        <prototype>V &lt;ARRAY&gt;.initialize_from_table( map_table_pointer as P [, filter as C [, order as C ]] )</prototype>
    </prototypes>
    <arguments>
        <argument>
            <name>tablename</name>
            <type>C</type>
            <description>The fully qualified name of a table.</description>
        </argument>
        <argument>
            <name>table_pointer</name>
            <type>P</type>
            <description>A pointer to an open table.</description>
        </argument>
        <argument>
            <name>map_table_pointer</name>
            <type>P</type>
            <description>A pointer created with the TABLE.OPENMAP() method.</description>
        </argument>
        <argument optional="true">
            <name>filter</name>
            <description>Optional. Default = all records. A character filter expression that evaluates to a logical value. Selects records from the table.</description>
        </argument>
        <argument optional="true">
            <name>order</name>
            <description>Optional. Default = record order. A character order expression that sorts selected records.</description>
        </argument>
        <argument optional="true">
            <name>append</name>
            <description>Logical</description>
        </argument>
        <argument optional="true">
            <name>columns</name>
            <description>Optional. A crlf delimited list of fieldnames in the source table to use when populating the array.</description>
        </argument>
    </arguments>
    <discussion>The &lt;ARRAY&gt;.INITIALIZE_FROM_TABLE() method loads field values from a table into a property array. If an optional Filter and Order parameter are specified, only records that satisfy the Filter are loaded. The records are loaded in the order specified by Order.</discussion>
    <sections>
        <section>
            <title>Example</title>
            <description>Assume a table (Names.dbf) contains the following entries:</description>
        </section>
        <section>
            <content><![CDATA[<table>
    <tr><th>Name</th><th>City</th><th>Age</th><th>Hobby</th></tr>
    <tr><td>John</td><td>Sudbury</td><td>40</td><td>Skiing</td></tr>
    <tr><td>Frank</td><td>Boston</td><td>24</td><td>Diving</td></tr>
    <tr><td>Joanne</td><td>Lincoln</td><td>28</td><td>Karate</td></tr>
</table>]]></content>
        </section>
        <section>
            <example><![CDATA[dim names[5] as P
Names.initialize_from_table("c:\program files\a5\data\name.dbf")]]></example>
        </section>
        <section>
            <description>This initializes an array with a Name, City, Age and Hobby property:</description>
            <example><![CDATA[? names.dump_properties("Name|City|Age|Hobby")
= John|Sudbury|40|Skiing
Frank|Boston|24|Diving
Joanne|Lincoln|28|Karate]]></example>
        </section>
        <section>
            <description>To sort the array by city:</description>
            <example><![CDATA[names.sort("", "city")

? names.dump_properties("Name|City|Age|Hobby")
= Frank|Boston|24|Diving
Joanne|Lincoln|28|Karate
John|Sudbury|40|Skiing]]></example>
        </section>
    </sections>
    <sections>
        <section>
            <title>Filter and Order Expressions</title>
            <description>The following example shows how to use filter and order expressions.</description>
            <example><![CDATA[dim tbl as P
dim arr_count as N
dim indx as P
tbl = table.open("travel time")
query.filter = "office_time<>\"\" .and. start_time<>\"\" .and. date<>{}"
indx = tbl.query_create()
arr_count = indx.records_get()
indx.close()
tbl.close()
dim raw[arr_count] as P
raw.initialize_from_table("travel time", "office_time<>\"\" .and. start_time<>\"\" .and. date<>{}", "date")]]></example>
        </section>
    </sections>
    <see>
        <ref link="table.openmap function">TABLE.OPENMAP()</ref>
    </see>
    <terms>array,field,filter,function,table</terms>
</page>                                          