<page api="xb">
   <shortlink>api objects array dump properties function</shortlink>
   <topic>Array dump_properties Method</topic>
   <description>Dump the properties array to a string of newline separated entries.</description>
   <prototype>dim String as C = &lt;array&gt;.dump_properties(C format[,C filter])</prototype>
   <arguments>
     <argument>
         <name>format</name>
         <type>C</type>
         <description>Defines the array properties to print and how to format the output. The *[xb:format]* is defined as: "*[xb:Prop1 [| Prop2...[| PropN ]]][| *Index ]*" where *[xb:Prop1 ... PropN]* are the names of array properties. *[xb:*Index]* is an optional argument that prints the index of the array element.</description>
     </argument>
     <argument optional="true">
         <name>filter</name>
         <type>C</type>
         <description>Default = all elements. A logical expression that uses any of the array properties.</description>
     </argument>
     
   </arguments>
   <returns>
       <return>
           <name>String</name>
           <types>
               <type>C</type>
           </types>
           <description>Returns a CR-LF delimited list of formatted strings containing the values defined by the *[xb:format]* argument.</description>
       </return>
   </returns>
   
<discussion>
  <p>The *[xb:&lt;array&gt;.dump_properties()]* method creates a CR-LF delimited string of a single dimensional property array's contents. This is the reverse of the *[xb:&lt;array&gt;.initialize_properties()]* method.</p>
  <p>Used in conjunction with the *[xb:&lt;array&gt;.initialize_properties()]* method, this method can be used to copy one array's contents to another.</p>
  <p>The *[xb:format]* defines which of the array's properties you want to dump, and the format of the output string. For example, the *[xb:format]* "*[xb:Name|Age|Position]*" will create a CR-LF delimited string with the name, age, and position properties of an array with the "*[xb:|]*" character between elements. Each element in the *[xb:format]* can be followed by an optional "*[xb::*]*" directive. This causes Alpha Anywhere to dump out that array element with a one character prefix indicating the element's data type.</p>
  <p>The optional *[xb:filter]* allows you to specify a filter expression that involves any of the array properties.</p>
</discussion>
   
<sections>
<section>
<description>Assume an array "A" contains the following elements:</description>
</section>
<section>
  <description>
    <table>
        <tr><th>Element</th><th>Name</th><th>Age</th><th>Birthday</th></tr>  
        <tr><td>A[1]</td><td>Fred</td><td>20</td><td>12/3/1980</td></tr>
        <tr><td>A[2]</td><td>Tom</td><td>40</td><td>11/3/1960</td></tr>
        <tr><td>A[3]</td><td>Joanne</td><td>50</td><td>4/1/1950</td></tr>
    </table>
  </description>
   </section>
<section>
<example><![CDATA[? a.dump_properties("Name|Age|BirthDay")
= "Fred|20|12/03/1980
Tom|40|11/03/1960
Joanne|50|04/01/1950"

? a.dump_properties("Name:*|Age:*|BirthDay:*")
= "CFred|N20|D12/03/1980
CTom|N40|D11/03/1960
CJoanne|N50|D04/01/1950"

? a.dump_properties("Name","Age>20")
= "Tom
Joanne"
dim a[5] as p 

 a.initialize_properties("name,state",<<%str% 
 cian,NY 
 eavan,NY 
 selwyn,MA 
 lachlan,NY 
 richard,MA 
 %str%) 

 ? a.dump_properties("name|*index","state='NY'") 
 = cian|1 
 eavan|2 
 lachlan|4 

 ? a.dump_properties("name|*index","state='MA'") 
 = selwyn|3 
 richard|5]]></example>   
   
   </section>
</sections>

<terms>array,arguments,contains,defaults,expressions,filter,function,logical,number,string</terms>
</page>