<page>
	<topic>StringScanner Methods</topic>
	<description>
		<p>The StringScanner object provides high performance string manipulation functions. The StringScanner functions operate at the location of the current offset in the text buffer. The initial position is 1. All functions (except those with optional negative numeric arguments) work from the current offset position towards the end of the buffer.</p>
		<p>The StringScanner.ScanXXX() functions position the offset immediately after any found text. The StringScanner.SkipXXX() functions position the offset at the beginning of any found text.</p>
	</description>
	<sections>
		<section>
			<title>Properties</title>
			<list>
				<item>
					<name>Property</name>
					<description>Description</description>
				</item>
				<item>
					<name>Offset</name>
					<description>The offset position from the start of the buffer. The first position in the buffer is 1.</description>
				</item>
				<item>
					<name>Text</name>
					<description>The contents of the buffer.</description>
				</item>
			</list>	
		</section>	
	<section>
		<title>Methods</title>
		<list>
			<item>
				<name>[StringScanner.Create()]</name>
				<description>
					Type P. 
					Creates a new StringScanner object.
				</description>
			</item>
			<item>
				<name>[StringScanner.Delete()]</name>
				<description>
					Type V.
					Deletes N bytes from the buffer starting at the offset.
				</description>
			</item>
			<item>
				<name>[StringScanner.GetLineNumber()]</name>
				<description>
					Type N.
					Returns the line number of the offset.
				</description>
			</item>
			<item>
				<name>[StringScanner.GetLineText()]</name>
				<description>
					Type C.
					 Returns the text of the line that the offset is on.
				</description>
			</item>
			<item>
				<name>[StringScanner.GetRemainder()]</name>
				<description>Type C.Return text from the current position to the end of the string.
				</description>
			</item>
			<item>
				<name>[StringScanner.GetToOffset()]</name>
				<description>
					Type C.
					Returns text from the from the beginning of the string to the current offset.
				</description>
			</item>
<item>
<name>[StringScanner.GotoLineStart()]</name>
<description>
Type N.
Positions the offset to the beginning of the current line.
</description>
</item>
<item>
<name>[StringScanner.Replace()]</name>
<description>
Type V.
Inserts text and optionally replaces a specified number of bytes at the current position.
</description>
</item>
<item>
<name>[StringScanner.ReplaceSmatch()]</name>
<description>
Type L.
Replaces the next instance of Find_Text with Replace_Text. Uses wildcard characters.
</description>
</item>
<item>
<name>[StringScanner.ReplaceSmatchI()]</name>
<description>
Type L.
Replaces the next instance of Find_Text (case insensitive) with Replace_Text. Uses wildcard characters.
</description>
</item>
<item>
<name>[StringScanner.ReplaceString()]</name>
<description>
Type L.
Replaces the next instance of Find_Text with Replace_Text.
</description>
</item>
<item>
<name>[StringScanner.ReplaceStringI()]</name>
<description>
Type L.
Replaces the next instance of Find_Text (case insensitive) with Replace_Text.
</description>
</item>
<item>
<name>[StringScanner.Reset()]</name>
<description>
Type V.
Moves the offset to the beginning of the buffer (position = 1).
</description>
</item><item><name>[StringScanner.ScanOver()]</name>
		<description> Type C. 
 
Moves the offset by a specified number (positive or negative) of characters and returns the text between the starting and ending positions.
 </description></item><item><name>[StringScanner.ScanOverSmatch()]</name>
		<description> Type C. 
 
Looks for Find_Text at the offset and returns the text between the starting and ending positions. Uses wildcard characters.
 </description></item><item><name>[StringScanner.ScanOverSmatchI()]</name>
		<description> Type C. 
 
Looks for Find_Text (case insensitive) at the offset and returns the text between the starting and ending positions. Uses wildcard characters.
 </description></item><item><name>[StringScanner.ScanSmatch()]</name>
		<description> Type L. 
 
Indicates whether the Find_Text can be between the offset and the end of the buffer.
 </description></item><item><name>[StringScanner.ScanSmatchI()]</name>
		<description> Type L. 
 
Indicates whether the Find_Text (case insensitive) can be between the offset and the end of the buffer.
 </description></item><item><name>[StringScanner.ScanToAlpha()]</name>
		<description> Type C. 
 
Positions the offset after the next alphabetic character and returns the text between the starting and ending positions of the offset.
 </description></item><item><name>[StringScanner.ScanToAlphaNum()]</name>
		<description> Type C. 
 
Positions the offset after the next alphanumeric character and returns the text between the starting and ending positions of the offset.
 </description></item><item><name>[StringScanner.ScanToCharacter()]</name>
		<description> Type C. 
 
Moves the offset forward until it finds a character not in Find_Chars and returns the textbetween the starting and ending positions of the offset.
 </description></item><item><name>[StringScanner.ScanToDigit()]</name>
		<description> Type C. 
 
Positions the offset after the next number (0 to 9) that it finds and returns the text between the starting and ending positions of the offset.
 </description></item><item><name>[StringScanner.ScanToSmatch()]</name>
		<description> Type C. 
 
Positions the offset after the next instance of the search argument. Uses wildcard characters.
 </description></item><item><name>[StringScanner.ScanToSmatchI()]</name>
		<description> Type C. 
 
Positions the offset after the next instance of the search argument (case insensitive). Uses wildcard characters.
 </description></item><item><name>[StringScanner.ScanToString()]</name>
		<description> Type C. 
 
Positions the offset after the next instance of the Find_Text and returns the text between the starting and ending positions of the offset.
 </description></item><item><name>[StringScanner.ScanToStringI()]</name>
		<description> Type C. 
 
Positions the offset after the next instance of the Find_Text (case insensitive) and returns the text between the starting and ending positions of the offset.
 </description></item><item><name>[StringScanner.ScanToToken()]</name>
		<description> Type C. 
 
Moves the offset to the indicated kind of token.
 </description></item><item><name>[StringScanner.ScanToWhitespace()]</name>
		<description> Type C. 
 
Positions the offset after the next white space character and returns the text between the starting and ending positions of the offset.
 </description></item><item><name>[StringScanner.ScanTypedToken()]</name>
		<description> Type C. 
 
Returns the next Token_Found in the format Kind:Token.
 </description></item><item><name>[StringScanner.SkipOver()]</name>
		<description> Type L. 
 
Moves the offset Count characters. The argument can be positive (moving towards the end of the buffer) or negative (moving towards the start of the buffer).
 </description></item><item><name>[StringScanner.SkipOverAlpha()]</name>
		<description> Type N. 
 
Positions the offset after the next non-alpha character and returns the number of characters skipped.
 </description></item><item><name>[StringScanner.SkipOverAlphaNum()]</name>
		<description> Type N. 
 
Positions the offset after the next non-alphanumeric character and returns the number of characters skipped.
 </description></item><item><name>[StringScanner.SkipOverCharacter()]</name>
		<description> Type N. 
 
Positions the offset after the first character not in the group and returns the number of characters skipped over.
</description></item><item><name>[StringScanner.SkipOverDigit()]</name>
		<description> Type N. 
 
Positions the offset after the first non-numeric character and returns the number of characters skipped over.
 </description></item><item><name>[StringScanner.SkipOverSmatch()]</name>
		<description> Type N. 
 
Positions the offset after the search text and returns the number of characters skipped over. Uses wildcard characters.
 </description></item><item><name>[StringScanner.SkipOverSmatchI()]</name>
		<description> Type N. 
 
Positions the offset after the search text (case insensitive) and returns the number of characters skipped over. Uses wildcard characters.
 </description></item><item><name>[StringScanner.SkipOverString()]</name>
		<description> Type N. 
 
Positions the offset at the beginning of the search text and returns the number of characters skipped over.
 </description></item><item><name>[StringScanner.SkipOverStringI()]</name>
		<description> Type N. 
 
Positions the offset at the beginning of the search text (case insensitive) and returns the number of characters skipped over.
 </description></item><item><name>[StringScanner.SkipOverToken()]</name>
		<description> Type N. 
 
Positions the offset after the next token of the specified type, and returns the characters moved.
 </description></item><item><name>[StringScanner.SkipOverWhitespace()]</name>
		<description> Type N. 
 
Positions the offset after the next non-white space character and returns the number of characters skipped.
 </description></item><item><name>[StringScanner.SkipToAlpha()]</name>
		<description> Type L. 
 
Positions the offset at the beginning of the next alphabetic character and returns true if successful.
 </description></item><item><name>[StringScanner.SkipToAlphaNum()]</name>
		<description> Type L.
 
Positions the offset at the beginning of the next alphanumeric character and returns true if successful.
 </description></item><item><name>[StringScanner.SkipToCharacter()]</name>
		<description> Type L.
 
Positions the offset at the next characters in the search list and returns true if successful.
 </description></item><item><name>[StringScanner.SkipToDigit()]</name>
		<description> Type L.
 
Positions the offset at the next digit (0-9) is encountered and returns true if successful.
 </description></item><item><name>[StringScanner.SkipToString()]</name>
		<description> Type L.
 
Positions the offset at the beginning of the search text and returns true if successful.
 </description></item><item><name>[StringScanner.SkipToStringI()]</name>
		<description> Type L.
 
Positions the offset at the beginning of the search text (case insensitive) is found and returns true if successful.
 </description></item><item><name>[StringScanner.SkipToToken()]</name>
		<description> Type L.
 
Positions the offset after the found token.
 </description></item><item><name>[StringScanner.SkipToWhitespace()]</name>
		<description> Type L.
 
Positions the offset at the next white space character and returns true if successful.
 </description></item>
</list>	
	
	
</section>	
	<section>
	<title>Example</title>	
	<description>
		The following function removes a block of lines from the alphafivehelp.hhc text file that is over 20,000 lines in length. The block to be removed is defined by a "<![CDATA[<ul>]]>" and its matching "<![CDATA[</ul>]]>" tag. This block follows immediately after the line containing the text defined by lt. The variable dst defines the directory that contains the alphafivehelp.hhc file.</description>	
	<example><![CDATA[function remove_toc_entries as V ( dst as C, lt as C )
dim fbuffer as C
dim outbuffer as C
dim lbuffer as C
dim ulcount as N = 0
dim counting as L = .F.
dim at_i as N
dim buf as P
dim ln as N]]></example>	
		
	</section>
	<section>
	<description>Read the text into a buffer and create the StringScanner object.</description>	
	<example><![CDATA[outbuffer = ""
fbuffer = file.to_string(dst + "alphafivehelp.hhc")
buf = stringscanner.create(fbuffer)]]></example>	
		
	</section>
	<section>
	<description>Move the offset to the line that contains the search text.</description>	
	<example><![CDATA[if (buf.SkipToStringI("<param name=\"Name\" value=\"" + lt + "\">") = .T.) then
    ' if the text is found, get the line number
    ln = buf.GetLineNumber()
    ' move the offset to the start of the line
    buf.GotoLineStart(ln)
    ' copy everything up to the offset into the output buffer
    outbuffer = buf.GetToOffset()
end if]]></example>	
		
	</section>
	<section>
	
	<description>Look for the starting "<![CDATA[<ul>]]>" tag.</description>	
	<example><![CDATA[if (buf.SkipToStringI("<ul>") = .T.) then
    ' if found, move the offset past it
    buf.ScanOver(5)
    ulcount = 1
    ' find the corresponding "</ul>" tag
    while (ulcount > 0)
        if (buf.SkipToStringI("</ul>") = .T.) then
            lbuffer = buf.GetLineText()
            if ("<ul>" $ lbuffer) then
                ulcount = ulcount + 1
            end if
            if ("</ul>" $ lbuffer) then
                ulcount = ulcount - 1
            end if
            buf.ScanOver(5)
        end if
    end while
end if]]></example>	
		
	</section>
	<section>
	
	<description>Get the line number.</description>	
	<example><![CDATA[ln = buf.GetLineNumber()+ 1
' move the offset to the start of the next line
buf.GotoLineStart(ln)
' copy everything after the offset into the output buffer
outbuffer = outbuffer + buf.GetRemainder()]]></example>	
		
	</section>
	<section>
	
	<description>Save the output buffer into a new copy of alphafivehelp.hhc.</description>	
	<example><![CDATA[file.from_string(dst + "alphafivehelp.hhc", outbuffer)
end function]]></example>	
		
	</section>
</sections>	
	<links>
		<link href="StringScanner.Create Method.xml">StringScanner.Create()</link>
		<link href="StringScanner.Delete Method.xml">StringScanner.Delete()</link>
		<link href="StringScanner.GotoLineStart Method.xml">StringScanner.GotoLineStart()</link>
		<link href="StringScanner.Reset Method.xml">StringScanner.Reset()</link>
		<link href="Get/StringScanner.GetLineNumber Method.xml">StringScanner.GetLineNumber()</link>
		<link href="Get/StringScanner.GetLineText Method.xml">StringScanner.GetLineText()</link>
		<link href="Get/StringScanner.GetRemainder Method.xml">StringScanner.GetRemainder()</link>
		<link href="Get/StringScanner.GetToOffset Method.xml">StringScanner.GetToOffset()</link>
		<link href="Replace/StringScanner.Replace Method.xml">StringScanner.Replace()</link>
		<link href="Replace/StringScanner.ReplaceSmatch Method.xml">StringScanner.ReplaceSmatch()</link>
		<link href="Replace/StringScanner.ReplaceSmatchI Method.xml">StringScanner.ReplaceSmatchI()</link>
		<link href="Replace/StringScanner.ReplaceString Method.xml">StringScanner.ReplaceString()</link>
		<link href="Replace/StringScanner.ReplaceStringI Method.xml">StringScanner.ReplaceStringI()</link>
		<link href="ScanOver/StringScanner.ScanOver Method.xml">StringScanner.ScanOver()</link>
		<link href="ScanOver/StringScanner.ScanOverSmatch Method.xml">StringScanner.ScanOverSmatch()</link>
		<link href="ScanOver/StringScanner.ScanOverSmatchI Method.xml">StringScanner.ScanOverSmatchI()</link>
		<link href="Scan/StringScanner.ScanSmatch Method.xml">StringScanner.ScanSmatch()</link>
		<link href="Scan/StringScanner.ScanSmatchI Method.xml">StringScanner.ScanSmatchI()</link>
		<link href="Scan/StringScanner.ScanToAlpha Method.xml">StringScanner.ScanToAlpha()</link>
		<link href="Scan/StringScanner.ScanToAlphaNum Method.xml">StringScanner.ScanToAlphaNum()</link>
		<link href="Scan/StringScanner.ScanToCharacter Method.xml">StringScanner.ScanToCharacter()</link>
		<link href="Scan/StringScanner.ScanToDigit Method.xml">StringScanner.ScanToDigit()</link>
		<link href="Scan/StringScanner.ScanToSmatch Method.xml">StringScanner.ScanToSmatch()</link>
		<link href="Scan/StringScanner.ScanToSmatchI Method.xml">StringScanner.ScanToSmatchI()</link>
		<link href="Scan/StringScanner.ScanToString Method.xml">StringScanner.ScanToString()</link>
		<link href="Scan/StringScanner.ScanToStringI Method.xml">StringScanner.ScanToStringI()</link>
		<link href="Scan/StringScanner.ScanToToken Method.xml">StringScanner.ScanToToken()</link>
		<link href="Scan/StringScanner.ScanToWhitespace Method.xml">StringScanner.ScanToWhitespace()</link>
		<link href="Scan/StringScanner.ScanTypedToken Method.xml">StringScanner.ScanTypedToken()</link>
		<link href="SkipOver/StringScanner.SkipOver Method.xml">StringScanner.SkipOver()</link>
		<link href="SkipOver/StringScanner.SkipOverAlpha Method.xml">StringScanner.SkipOverAlpha()</link>
		<link href="SkipOver/StringScanner.SkipOverAlphaNum Method.xml">StringScanner.SkipOverAlphaNum()</link>
		<link href="SkipOver/StringScanner.SkipOverCharacter Method.xml">StringScanner.SkipOverCharacter()</link>
		<link href="SkipOver/StringScanner.SkipOverDigit Method.xml">StringScanner.SkipOverDigit()</link>
		<link href="SkipOver/StringScanner.SkipOverSmatch Method.xml">StringScanner.SkipOverSmatch()</link>
		<link href="SkipOver/StringScanner.SkipOverSmatchI Method.xml">StringScanner.SkipOverSmatchI()</link>
		<link href="SkipOver/StringScanner.SkipOverString Method.xml">StringScanner.SkipOverString()</link>
		<link href="SkipOver/StringScanner.SkipOverStringI Method.xml">StringScanner.SkipOverStringI()</link>
		<link href="SkipOver/StringScanner.SkipOverToken Method.xml">StringScanner.SkipOverToken()</link>
		<link href="SkipOver/StringScanner.SkipOverWhitespace Method.xml">StringScanner.SkipOverWhitespace()</link>
		<link href="SkipTo/StringScanner.SkipToAlpha Method.xml">StringScanner.SkipToAlpha()</link>
		<link href="SkipTo/StringScanner.SkipToAlphaNum Method.xml">StringScanner.SkipToAlphaNum()</link>
		<link href="SkipTo/StringScanner.SkipToCharacter Method.xml">StringScanner.SkipToCharacter()</link>
		<link href="SkipTo/StringScanner.SkipToDigit Method.xml">StringScanner.SkipToDigit()</link>
		<link href="SkipTo/StringScanner.SkipToString Method.xml">StringScanner.SkipToString()</link>
		<link href="SkipTo/StringScanner.SkipToStringI Method.xml">StringScanner.SkipToStringI()</link>
		<link href="SkipTo/StringScanner.SkipToToken Method.xml">StringScanner.SkipToToken()</link>
		<link href="SkipTo/StringScanner.SkipToWhitespace Method.xml">StringScanner.SkipToWhitespace()</link>
	</links>
	<see>
		<ref href="/documentation/index?search=Character Replacement Functions">Character Replacement Functions</ref>
		<ref href="/documentation/index?search=Character Search Functions">Character Search Functions</ref>
		<ref href="/documentation/index?search=How to implement comma_to_crlf honoring delimiters">How to implement comma_to_crlf honoring delimiters</ref>
	</see>
	
</page>