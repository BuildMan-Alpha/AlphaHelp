<page>
    <shortlink>Form View Control Actions</shortlink>
    <topic>Form View Control Actions</topic>
    <description>Perform some action on a Form View control.</description>
    <sections>
        <section>
            <title>Actions</title>
            <description>The following actions can be performed using the *[ui:Form View Control Actions]* action:</description>
            <cases>
                <case>
                    <title nested="2">Set Form View field value</title>
                    <description>
                        <p>Set the value of a field in the FormView control.</p>
                    </description>
                </case>
                <case>
                    <title nested="2">Refresh</title>
                    <description>
                        <p>Reload the original data from the data source for the FormView.</p>
                    </description>
                </case>
                <case>
                    <title nested="2">Clear Errors</title>
                    <description>
                        <p>Clear all errors in the FormView.</p>
                    </description>
                </case>
                <case>
                    <title nested="2">Commit</title>
                    <description>
                        <p>Commits the data in the FormView to the FormView's data source.</p>
                    </description>
                </case>
                <case>
                    <title nested="2">Populate Form</title>
                    <description>
                        <p>Populates the FormView with data.</p>
                    </description>
                </case>
                <case>
                    <title nested="2">New Record</title>
                    <description>
                        <p>Displays a new record in the FormView.</p>
                    </description>
                </case>
                <case>
                    <title nested="2">Navigate</title>
                    <description>
                        <p>Set focus to the 'first', 'last', 'next', or 'prev' field on the FormView. The associated Editor (if defined) will be opened.</p>
                    </description>
                </case>
                <case>
                    <title nested="2">Set Active Layout</title>
                    <description>
                        <p>If the FormView defines multiple Layouts, selects the active Layout.</p>
                    </description>
                </case>
                <case>
                    <title nested="2">Set Active Tab Pane</title>
                    <description>
                        <p>If the FormView Layout uses Tabs, set the active Pane in the Tab control.</p>
                    </description>
                </case>
                <case>
                    <title nested="2">Refresh value in Editor</title>
                    <description>
                        <p>If a value in the FormView is currently being edited in an Editor, refreshes the value shown in the editor.</p>
                    </description>
                </case>
                <case build="4497">
                    <title nested="2">Set state variables</title>
                    <description>
                        <p>Set FormView state variables. State variables can be referenced in the FormView template syntax *[cst:[temp].variables.variableName]*</p>
                    </description>
                </case>
                <case build="4497">
                    <title nested="2">Get state variables</title>
                    <description>
                        <p>Sets a variable to the FormView's state variables object.</p>
                    </description>
                </case>
            </cases>
        </section>
        <section build="4497">
            <title>Getting and Setting State Variables</title>
            <description>
                <p>State variables can be referenced in the FormView layout templates (and therefore in client-side show/hide and enable expressions) using this syntax:</p>
            </description>
            <example code="js"><![CDATA[[temp].state.your_variable_name]]></example>
        </section>
        <section>
            <description>
                <p>Say you had a container in a FormView layout that contained several controls. You wanted to show this container if a session variable (called say myVar1) was equal to 'alpha'.</p>
                <p>Here is how you would do this:</p>
                <p>Set the show/hide expression for the container to</p>
            </description>
            <example code="js"><![CDATA[[temp].state.myVar1 == 'alpha']]></example>
        </section>
        <section>
            <description>
                <p>In the client-side onRenderComplete event, execute this code to set the FormView control's myVar1 state variable to the value of the session variable.</p>
            </description>
            <example code="js"><![CDATA[var myVar1 = {dialog.Object}.getSessionVariable('MYVAR1');
{dialog.object}.formViewSetStateVariables('FORMVIEW_1',{myVar1: myVar1});]]></example>
            <note>In order to reference session variables in client side expressions, they must be published to the client. See *[ui:UX Properties]* &gt; *[ui:Other]* &gt; [Published session variables].</note>
        </section>
        <section>
            <description>To learn more, check out the video below, "Client-side Show/Hide and Enable Expressions that Reference External Data".</description>
        </section>
        <section>
            <title>Form View Control Action Properties</title>
            <list>
                <item>
                    <name>Action name</name>
                    <description>Specify the Action that you want to execute.</description>
                </item>
                <item>
                    <name>Form View Control Id</name>
                    <description>Specify the Form View control you want to perform an action on.</description>
                </item>
                <item>
                    <name>Navigation direction</name>
                    <description>Navigation direction property. Choices include *[ui:First]*, *[ui:Last]*, *[ui:Next]*, *[ui:Prev]*.</description>
                </item>
                <item>
                    <name>Field to set</name>
                    <description>Field to set property.</description>
                </item>
                <item>
                    <name>Field value Javascript</name>
                    <description>Specify Javascript code to get the value that you want to set the Form View field to. Your code must 'return' the value. e.g. return 'Smith';</description>
                </item>
                <item>
                    <name>Form data Javascript</name>
                    <description>Specify Javascript code to get the data to populate the form. Your code must 'return' an object with properties for each field in the form.</description>
                </item>
                <item>
                    <name>Layout name</name>
                    <description>Specify the Layout name. (Case-sensitive)</description>
                </item>
            </list>
        </section>
        <section>
            <title>Videos</title>
            <videos>
                <title>Client-side Show/Hide and Enable Expressions that Reference External Data</title>
                <description>
                    <p>Typically, the client-side show/hide and enable expressions in a FormView layout reference field values that are in the data being displayed in the Form. For example, the Form might have a field called Country and you might want to show a container only when the Country field has a certain value.</p>
                    <p>However, there are also use cases where you want to reference external data (i.e. the value in some other control on the UX) in a client-side expression. This video shows how this is done using FormView state variables.</p>
                </description>
                <date>2017-08-14</date>
                <video>
                    <name>Watch Video</name>
                    <link>https://share.vidyard.com/watch/WCxphK3UE4AqGVvxMzVXJS</link>
                </video>
                <resources>
                    <resource>
                        <link>https://www.ajaxvideotutorials.com/V12Videos/showhideformview.zip</link>
                    </resource>
                </resources>
            </videos>
        </section>
    </sections>
    <limitations>UX Component Only</limitations>
    <links>
        <link link="ux properties published session variables">Published session variables</link>
    </links>
    <see>
        <ref link="action javascript for the ux">Action Javascript for the UX</ref>
    </see>
</page>