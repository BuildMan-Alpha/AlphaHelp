<page>
    <shortlink>action javascript phonegap scan barcode</shortlink>
    <topic>PhoneGap - Scan Barcode</topic>
    <description>Barcode scanning can be added to any PhoneGap app using the *[ui:PhoneGap - Scan Barcode]* action javascript.</description>
    <discussion>
        <p>The "PhoneGap - Scan Barcode" action allows you to scan barcodes in a PhoneGap application.</p>
    </discussion>
    <sections>
        <section>
            <figure>
                <title>Barcode scanner on an Android Device</title>
                <link>images/scanBarcodeAndroid.png</link>
            </figure>
        </section>
        <section>
            <description>
                <p>A barcode is a way to encode information, such as a URL, item price, or airplane ticket information, as a black and white image. QR Codes are popular form of barcode, often used in advertisements to encode a URL to a website. A mobile device with a barcode scanner can be used scan the QR Code and then navigate to the URL, making it easy for people to visit a website without having to manually type the URL into a web browser.</p>
            </description>
            <figure>
                <title>Barcode scanner on an iOS Device</title>
                <link>images/scanBarcodeiOS.png</link>
            </figure>
        </section>
        <section>
            <description>
                <p>A variety of PhoneGap plugins are available for adding barcode scanning to a mobile application. The *[phonegap-plugin-barcodescanner]* is integrated into Alpha Anywhere as an Action Javascript action available in the UX Component. By adding the *[ui:PhoneGap - Scan Barcode]* action to the click event for a button or image, you can quickly integrate barcode scanning to any mobile app.</p>
            </description>
            <important>When you build the PhoneGap application be sure to select the *[Bar Code Scanner]* plugin in the Third Party PhoneGap Plugins section.</important>
        </section>
        <section>
            <description>
                <p>The plugin is configured using properties. These properties are explained below.</p>
            </description>
            <figure>
                <link>images/barcode.png</link>
            </figure>
        </section>
        <section>
            <title>Scan Barcode Properties</title>
            <list>
                <item>
                    <name>Prefer front camera</name>
                    <description>If checked, the front camera (the camera on the front of the device) will be used to scan barcodes if the device has a front camera. Otherwise, the barcode scanner will use the back camera.</description>
                </item>
                <item>
                    <name>Show flip camera button</name>
                    <description>If checked, a button for swapping between the front and back camera will be added to the barcode scanner.</description>
                </item>
                <item>
                    <name>Prompt</name>
                    <description>*[Android only.]* On Android devices, you can specify a prompt that is shown when the scanner is opened. The *[ui:Prompt]* property can be used to define the prompt to be shown when the scanner is opened.</description>
                </item>
                <item>
                    <name>Orientation</name>
                    <description>*[Android only.]* On Android devices, the barcode scanner can be configured to use a fixed orientation or rotate with the device. If set to *[ui:Portrait]* or *[ui:Landscape]*, the Android device will use a fixed orientation (portrait or landscape, respectively.) Selecting *[ui:Rotate]* will cause the scanner to rotate with the device's orientation.</description>
                </item>
            </list>
        </section>
        <section>
            <title>Javascript Properties</title>
            <description>You can define an event handler for the *[ui:onSuccess]* and *[ui:onFailure]* Javascript events.</description>
            <cases>
                <case>
                    <title nested="2">onSuccess</title>
                    <description>If you want to do anything with the scanned barcode data, you must define an event handler for the *[ui:onSuccess]* event. The *[ui:onSuccess]* event is triggered if the scan is successful. Your JavaScript can reference *[js:result.text]*, *[js:result.format]*, and *[js:result.cancelled]*:</description>
                    <list>
                        <item>
                            <name>result.text</name>
                            <description>The text representation of the barcode data.</description>
                        </item>
                        <item>
                            <name>result.format</name>
                            <description>The barcode format. For example, "QR_CODE" or "CODE_128". For a list of supported barcode formats for various devices, see the NPM plugin documentation for *[extlink:phonegap-plugin-barcodescanner@https://www.npmjs.com/package/phonegap-plugin-barcodescanner]*</description>
                        </item>
                        <item>
                            <name>result.cancelled</name>
                            <description>Specifies whether or not the action was cancelled. If the value of *[js:result.cancelled]* is 0, the scan was successful. If the value is 1, the user cancelled the scan.</description>
                        </item>
                    </list>
                </case>
                <case>
                    <description>
                        <p>Your JavaScript can, for example, check the barcode format and perform validation. If the barcode format is correct, then the decoded data can then be processed. For example, UPC_E codes are commonly used for POS Retail systems. The following JavaScript could be added to the onSuccess event to insert UPC_E data in to a list after a barcode was scanned:</p>
                    </description>
                    <example code="js"><![CDATA[if (result.cancelled == 0) {
	if (result.format == "UPC_E") {
		// Append entry to List
		var obj = {dialog.object}.getControl("PRODUCTS");
		if (obj) {
			var data = {};
			data["ITEM"] = result.text;
			obj.appendRows(data);
		} else {
			alert("List 'PRODUCTS' does not exist.");
		}
	} else {
		alert("Barcode is incorrect format. Format was '"+result.format+"'. Expected 'UPC_E'.");
	}
}]]></example>
                </case>
                <case>
                    <description>
                        <p>[Download sample component] (requires Alpha Anywhere 4.5.0 or newer.)</p>
                    </description>
                </case>
                <case>
                    <title nested="2">onFailure</title>
                    <description>The *[ui:onFailure]* event is triggered if the barcode scan fails. The *[js:error]* parameter passed to the event contains additional information about why the scan failed. This can be used to provide additional information to the user. For example:</description>
                    <example code="js"><![CDATA[alert("An error occured while scanning the barcode. Error was " + error);]]></example>
                </case>
            </cases>
        </section>
    </sections>
    <links>
        <link href="./components/barCodeScanner.zip">Download sample component</link>
    </links>
    <see>
        <ref link="action javascript for the ux">Action Javascript for the UX</ref>
        <ref href="https://www.npmjs.com/package/phonegap-plugin-barcodescanner">phonegap-plugin-barcodescanner documentation on NPM</ref>
    </see>
</page>