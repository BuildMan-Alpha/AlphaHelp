<page>
    <shortlink>List Control Actions</shortlink>
    <topic>List Control Actions</topic>
    <description>Perform some action on a List control (e.g. refresh the List, etc) in a UX Component.</description>
    <discussion>
        <p>Used with the UX Component.</p>
        <p>A number of actions can be performed on a List Control. The List Control Actions action allows you to perform the following actions:</p>
    </discussion>
    <groups>
        <group>
            <title>Available Actions</title>
            <sections>
                <section>
                    <title>Refresh Data</title>
                    <description>
                        <p>Perform an Ajax Callback to the server to refresh the data in the List.</p>
                    </description>
                    <note>This action is only meaningful if the List was populated with data that was computed on the server. For example, if the List data source is *[ui:SQL]*, *[ui:DBF]*, *[ui:Custom]*, etc. If the List data source is set to *[ui:Javascript function]*, then this action is meaningless.</note>
                </section>
                <section>
                    <title>Refresh Cascading Lists</title>
                    <description>
                        <p>Perform an Ajax Callback to refresh the data in the child List(s) for a particular List.</p>
                        <p>For example, the current List might show a list of Customers. This List might have a child List that shows Orders, and the Orders List might have a child List that shows OrderDetails. If you perform this action on the Customers List, it will update the data in the Orders List and the OrderDetails List.</p>
                    </description>
                </section>
                <section>
                    <title>Refresh Row</title>
                    <description>Perform an Ajax Callback to refresh the data in the current row.</description>
                    <note>This action is only meaningful if the List was populated with data that was computed on the server. For example, if the List data source is *[ui:SQL]*, *[ui:DBF]*, *[ui:Custom]*, etc.</note>
                </section>
                <section>
                    <title>Refresh Row by Key</title>
                    <description>Perform an Ajax Callback to refresh a specific row of data. The row to refresh is specified by the primary key value.</description>
                    <note>This action is only meaningful if the List was populated with data that was computed on the server. For example, if the List data source is *[ui:SQL]*, *[ui:DBF]*, *[ui:Custom]*, etc.</note>
                </section>
                <section>
                    <title>Navigate</title>
                    <description>Perform an Ajax Callback to navigate data in the List. You can specify *[ui:First]*, *[ui:Next]*, *[ui:Prev]*, or *[ui:Last]* as the target page.</description>
                    <note>This action is only meaningful if the List was populated with data that was computed on the server and if *[ui:pagination]* was turned on in the List definition and the pagination method is set to *[ui:NavigationButtons]*. For example, if the List data source is *[ui:SQL]*, *[ui:DBF]*, *[ui:Custom]*, etc.</note>
                </section>
                <section>
                    <title>Navigate to Page</title>
                    <description>Perform an Ajax Callback to navigate data in the List. You can specify a target page number. For example, page 3.</description>
                    <note>This action is only meaningful if the List was populated with data that was computed on the server and if *[ui:pagination]* was turned on in the List definition and the pagination method is set to *[ui:NavigationButtons]*. For example, if the List data source is *[ui:SQL]*, *[ui:DBF]*, *[ui:Custom]*, etc.</note>
                </section>
                <section>
                    <title>Fetch More</title>
                    <description>Perform an Ajax Callback to fetch the next page of data for the List. The number of records that are fetched is determined by the setting for the *[ui:Page Size]* in the List definition.</description>
                    <note>This action is only meaningful if the List was populated with data that was computed on the server and if *[ui:pagination]* was turned on in the List definition and the pagination method is set to *[ui:FetchMore]*. For example, if the List data source is *[ui:SQL]*, *[ui:DBF]*, *[ui:Custom]*, etc.</note>
                </section>
                <section>
                    <title>Fetch Records by Key Value</title>
                    <description>Perform an Ajax Callback to fetch a record specified by a key value. You can specify multiple key values. The fetched records are appended to the List.</description>
                    <note>This action is only meaningful if the List was populated with data that was computed on the server. For example, if the List data source is *[ui:SQL]*, *[ui:DBF]*, *[ui:Custom]*, etc.</note>
                </section>
                <section>
                    <title>Filter List - Client-side</title>
                    <description>Filers the records shown in the List using a client-side filter. No Ajax Callback is made.</description>
                </section>
                <section>
                    <title>Filter List - Server-side</title>
                    <description>Perform an Ajax Callback to filter the data shown in the List.</description>
                    <note>This action is only meaningful if the List was populated with data that was computed on the server. For example, if the List data source is *[ui:SQL]*, *[ui:DBF]*, *[ui:Custom]*, etc.</note>
                    <note>This action requires you to specify the filter expression. You might prefer to use the [Filter Records in a List Control] action to filter records. This action allows the user to enter search criteria into controls on the UX (much like the *[ui:Search Part]* in a Grid component.)</note>
                </section>
                <section>
                    <title>Client-side sort</title>
                    <description>Sorts the data in the List. The sorting is done in the browser - no Ajax Callback is made.</description>
                </section>
                <section>
                    <title>Client-side group breaks</title>
                    <description>
                        <p>Sorts the data in the List and adds group breaks to the List. You can define headers and footers for each group break, and you can define multiple levels of grouping. You can also include summary data (such as the number of rows in a group or the total for a column in the group) in the header or footer.</p>
                        <p>A client-side sort is performed on the List data.</p>
                    </description>
                    <note>This action is a super-set of the *[ui:Client-side sort]* action.</note>
                </section>
                <section>
                    <title>Client-side group breaks - remove</title>
                    <description>Remove client-side group breaks.</description>
                </section>
                <section>
                    <title>Snow List Navigator</title>
                    <description>
                        <p>Display a List Navigator.</p>
                        <p>The List Navigator is a scrollable window with a list of all the *[ui:Group Breaks]* in the List. You can quickly scroll to a section of the list by dragging on the List Navigator.</p>
                    </description>
                    <note>This action is only meaningful if the List has group breaks. These group breaks can either have been defined as server-side group breaks (in the case where the List data is based on a SQL, DBF, or Custom data source), or client-side group breaks.</note>
                </section>
                <section>
                    <title>Hide List Navigator</title>
                    <description>
                        <p>Hide the List Navigator if it was previously shown.</p>
                        <p>The List Navigator is a scrollable window with a list of all the *[ui:Group Breaks]* in the List. You can quickly scroll to a section of the list by dragging on the List Navigator.</p>
                    </description>
                </section>
                <section>
                    <title>Server-side sort</title>
                    <description>Perform an Ajax Callback to sort the data in the List.</description>
                    <note>This action is only meaningful if the List was populated with data that was computed on the server. For example, if the List data source is *[ui:SQL]*, *[ui:DBF]*, *[ui:Custom]*, etc.</note>
                </section>
                <section>
                    <title>Select Active Layout</title>
                    <description>If you have defined multiple *[ui:Layouts]* for a List, this action allows you to select which *[ui:Layout]* to make active.</description>
                </section>
                <section>
                    <title>Remove selected rows from List</title>
                    <description>Removes the currently selected rows from a List. If the List has been configured to allow multiple rows to be selected, then this action will remove all of the rows that are currently selected.</description>
                </section>
                <section>
                    <title>Remove all rows from List</title>
                    <description>Clears out all rows in the List.</description>
                </section>
                <section>
                    <title>Move selected rows from one List to another List</title>
                    <description>Moves the currently selected rows to another List.</description>
                </section>
                <section>
                    <title>Move all rows from one List to another List</title>
                    <description>Moves all the rows in a List to another List.</description>
                </section>
                <section>
                    <title>Shift position of selected rows</title>
                    <description>Moves the currently selected rows in a List. You can specify the following moving directions: *[ui:Top]*, *[ui:Up]*, *[ui:Down]*, or *[ui:Bottom]*.</description>
                </section>
                <section>
                    <title>Populate controls with data from current row in List</title>
                    <description>
                        <p>Populates controls on the UX with data from the current row in the List.</p>
                        <p>For example, assume the List has these columns: *[ui:Firstname]*, *[ui:Lastname]*, *[ui:City]*, and *[ui:State]*.</p>
                        <p>Assume tht you have placed textbox controls on the UX with these names: *[ui:FN]*, *[ui:LN]*, *[ui:CITY]*, and *[ui:STATE_REGION]*.</p>
                        <p>This action will set the value of *[ui:FN]*, *[ui:LN]*, *[ui:CITY]*, and *[ui:STATE_REGION]* controls with the data from the current row in the List.</p>
                        <p>*[link:Click here@components/ux_populateListOnSelect.zip]* to download a component that demonstrates populating text boxes with the data from the currently selected row in a List Control is selected.</p>
                    </description>
                </section>
                <section>
                    <title>Scroll to row number</title>
                    <description>Scroll the List so the specified row number (zero based) is scrolled into view.</description>
                </section>
                <section>
                    <title>Scroll to List value</title>
                    <description>
                        <p>Scroll the List so that the row with the specified value is visible.</p>
                        <p>For example, if the List has been configured to return values from the *[ui:Lastname]* column, you can specify *[ui:Smith]* as the value to scroll to, and the row with the Lastname value of *[ui:Smith]* will be scrolled into view.</p>
                    </description>
                </section>
                <section>
                    <title>Show/hide List Item Footer</title>
                    <description>If you have defined a List Item Footer, this action will toggle the visibility of the footer, or explicitly show or hide it.</description>
                </section>
                <section>
                    <title>List Detail View Actions</title>
                    <description>
                        <p>If the List was configured to have a *[ui:Detail View]*, this action allows you to perform some actions on the List's *[ui:Detail View]*.</p>
                        <p>For some actions listed, if you are adding this event to a button, you may want to only enable the button if the List's Detail View has been edited. You can put the following expression in the button's Client-side Enable Expression:</p>
                        <p>*[js:dialog.listDetailView.LIST1.isDirty = true]*</p>
                        <p>The actions available are listed below:</p>
                    </description>
                    <list>
                        <item>
                            <name-title>Detail View Action</name-title>
                            <description-title>Description</description-title>
                        </item>
                        <item>
                            <name>Submit Detail View Edits to List</name>
                            <description>Saves edits to the record in the detail view to the List.</description>
                        </item>
                        <item>
                            <name>Submit List Edits to the Server</name>
                            <description>Synchronizes edits made to records in the List to the server.</description>
                        </item>
                        <item>
                            <name>New Detail View Record</name>
                            <description>Enter a new record using the List Detail View.</description>
                        </item>
                        <item>
                            <name>Reset Detail View Form</name>
                            <description>Reset the Detail View Form, undoing any changes made to the record.</description>
                        </item>
                        <item>
                            <name>Reset Data in Current Row</name>
                            <description>Undo the changes made to the current row in the List.</description>
                        </item>
                    </list>
                </section>
                <section>
                    <title>Export Data to Excel or Ascii</title>
                    <description>You can export data in a List control to either Excel or to Ascii files.</description>
                    <videos>
                        <video>
                            <description>Watch Video</description>
                            <link>http://www.ajaxvideotutorials.com/V12Videos/ux_list_export_data_to_excel.swf</link>
                        </video>
                    </videos>
                </section>
                <section>
                    <description>After the export file has been created you can either download the file to the client, or call an Xbasic function to further process the exported file. A typical use case where you might want to call an Xbasic function to process the exported file would be if you wanted to email the file to a list of recipients, or upload the file to cloud storage, such as Amazon S3 storage.    In the case where the List is based on a SQL query you have the option of:    </description>
                    <cases>
                        <case>
                            <description>exporting the data in the List     </description>
                        </case>
                        <case>
                            <description>exporting the data in the List query    </description>
                        </case>
                    </cases>
                </section>
                <section>
                    <description>Consider the case where you have defined a List and have turned on the pagination feature. You might have set the page size to 100 rows. The query that the List is based on might have 1,000 records, but the List will only show 100 rows of data at a time. If the export is based on the 'Data in the List' the export file will have 100 rows in it (because the List only has one page of data - 100 rows - in memory at any time). However, if the export is based on 'Data in the List Query' the export file will have 1,000 rows in it (subject to the Max Records setting which might limit the number of rows in the export file).    To export data in a List you can use Action Javascript to define the code.    </description>
                    <steps>
                        <step>
                            <description>Select the 'List Control Actions' in Action Javascript    </description>
                            <figure>
                                <link>images/listExportExcel_1.jpg</link>
                            </figure>
                        </step>
                        <step>
                            <description>Select the 'Export List data to Excel/Ascii' action from the list of available actions.    </description>
                            <figure>
                                <link>images/listExportExcel_2.jpg</link>
                            </figure>
                        </step>
                        <step>
                            <description>Click the smart field to define the 'Export list data settings'.    </description>
                        </step>
                    </steps>
                </section>
                <section>
                    <description>In the case where the List is based on a SQL query, the builder shows the 'Export what' property which can be set to 'Data in List query' or 'Data shown in List'.    If the 'Export what' property is set to 'Data in List query' the 'Maximum number of records to export' property is shown.    </description>
                    <figure>
                        <link>images/listExportExcel_3.jpg</link>
                    </figure>
                </section>
                <section>
                    <description>In the case where the 'Export what' property is set to 'Data shown in List' or if the List is not based on a SQL query (in which case the data that is exported is always the 'Data shown in List'), the 'Customize field sizes and column heading in export file' property is shown.     </description>
                    <note>The 'Customize field sizes and column heading in export file' property is only shown if the 'Export format' is Excel.</note>
                </section>
                <section>
                    <description>This property allows you to customize the column headings in the Excel file and control the data types of the data in the excel file.    </description>
                    <figure>
                        <link>images/list_export_customizefieldsproperty.jpg</link>
                    </figure>
                </section>
                <section>
                    <description>To customize fields, click the smart field for the 'Customize field sizes and column heading in export file' property. A build opens up where you can enter a CR-LF delimited list of definition - one for each field  you want to customize. The syntax for the definition can be shown by clicking the 'Show syntax help' hyperlink. The syntax allows you to specify the data type, size and column heading of each column in the Excel file.</description>
                    <figure>
                        <link>images/listExport_customizeColumns.jpg</link>
                    </figure>
                </section>
            </sections>
        </group>
        <group>
            <title>Properties for Configuring List Control Actions</title>
            <sections>
                <section>
                    <title>List Control Action Properties</title>
                    <list>
                        <item>
                            <name>Action name</name>
                            <description>Specify the List Action that you want to execute. See [Available Actions] above for a description of each available action.</description>
                        </item>
                        <item>
                            <name>List Id</name>
                            <description>Specify the List you want to perform an action on.</description>
                        </item>
                        <item>
                            <name>Export list data settings</name>
                            <description>Export list data settings property.</description>
                        </item>
                        <item>
                            <name>List Id(s)</name>
                            <description>Specify the List(s) you want to perform an action on. You can enter a comma delimited list of ListIds if you want to refresh the data in more than one list in a single Ajax callback.</description>
                        </item>
                        <item>
                            <name>List navigator settings</name>
                            <description>List navigator settings property.</description>
                        </item>
                        <item>
                            <name>Direction</name>
                            <description>Specify the direction in which you want to navigate. (Only applies to Lists that are set to paginate data). Choices include *[ui:First]*, *[ui:Previous]*, *[ui:Next]*, *[ui:Last]*.</description>
                        </item>
                        <item>
                            <name>Page number</name>
                            <description>Specify the page number</description>
                        </item>
                        <item>
                            <name>Key values</name>
                            <description>Specify a comma delimited list of key values for records you want to retrieve and add to the List. The list of keys is *[CASE SENSITIVE]*. If the primary key of a record has multiple columns, separate each segment of the key with 3 pipes (|||); e.g. *[xb:John|||Smith]*. To retrieve the records for customers 23, 57 and 35, enter *[xb:23,57,35]*.</description>
                        </item>
                        <item>
                            <name>Records to refresh</name>
                            <description>Specify a comma delimited list of key values for records you want to refresh. If the primary key of a record has multiple columns, separate each segment of the key with 3 pipes (|||); e.g. *[xb:John|||Smith]*. To retrieve the records for customers 23, 57 and 35, enter *[xb:23,57,35]*. If a key value specified here is not currently in the List, it can optionally be added to the List. See the 'Add to List' property.</description>
                        </item>
                        <item>
                            <name>Add to List</name>
                            <description>If a key value that is specified in the 'Records to refresh' list is not currently in the List, it can optionally be added to the List.</description>
                        </item>
                        <item>
                            <name>Search field</name>
                            <description>Specify the name of the control that contains the value to search for.</description>
                        </item>
                        <item>
                            <name>Filter expression</name>
                            <description>Specify the filter expression for the List. You can use arguments in the filter. E.g. *[xb:state = :stateName]*</description>
                        </item>
                        <item>
                            <name>Order expression</name>
                            <description>Specify the order expression.</description>
                        </item>
                        <item>
                            <name>Argument values</name>
                            <description>If your filter expression uses arguments, specify the argument values. Syntax is a CR-LF delimited list where each line in the list is *[xb:argumentValue|||datatype|argumentName]*. E.g. *[xb:Boston|||C|whatCity]*</description>
                        </item>
                        <item>
                            <name>Layout name</name>
                            <description>Specify the name of the Layout you want to select</description>
                        </item>
                        <item>
                            <name>Client-side group break definition</name>
                            <description>Client-side group break definition property.</description>
                        </item>
                        <item>
                            <name>Client-side sort mode</name>
                            <description>Chose 'Simple' if you only want to sort on a single column. Choose 'Advanced' to sort on multiple columns. To sort AND group the data, use the '[Client-side Group Breaks]' action. Choices include *[ui:Simple]*, *[ui:Advanced]*.</description>
                        </item>
                        <item>
                            <name>Client-side sort definition</name>
                            <description>Specify the sort definition.</description>
                        </item>
                        <item>
                            <name>Client-side sort column</name>
                            <description>Specify the name of the column you want to sort. (Case-sensitive)</description>
                        </item>
                        <item>
                            <name>Client-side sort data type</name>
                            <description>Client-side sort data type property. Choices include *[ui:Default]*, *[ui:Number]*, *[ui:Date]*, *[ui:Logical]*, *[ui:Character]*.</description>
                        </item>
                        <item>
                            <name>Sort direction</name>
                            <description>Specify the sort direction. None will remove the sort. Choices include *[ui:Ascending]*, *[ui:Descending]*, *[ui:None]*.</description>
                        </item>
                        <item>
                            <name>Server-side sort column number</name>
                            <description>Specify the column number (1 based) of the column you wish to sort on. If the List has previously been sorted on this column, the sort direction is reversed.</description>
                        </item>
                        <item>
                            <name>Target List id</name>
                            <description>Specify the Id of the target List.</description>
                        </item>
                        <item>
                            <name>Shift direction</name>
                            <description>Specify the direction in which the selected rows should be shifted. Choices include *[ui:Top]*, *[ui:Up]*, *[ui:Down]*, *[ui:Bottom]*.</description>
                        </item>
                        <item>
                            <name>Control map</name>
                            <description>When the user clicks on a row in the List populate controls on the UX with data from the current row in the List. (Contrast this with '[Populate controls in an UNBOUND UX component with data from a table]' which does an Ajax callback to get data to populate controls on the component.)</description>
                        </item>
                        <item>
                            <name>Target row number (zero based)</name>
                            <description>Specify the row number to scroll into view. First row is row 0, second row is row 1, etc.</description>
                        </item>
                        <item>
                            <name>Target List value</name>
                            <description>Specify the row to scroll into view by specifying the return value of the target row. For example, if the List is configured to return the value in the Lastname column, you could specify 'Smith' to scroll the row that contains a value of 'Smith' for the Lastname field into view.</description>
                        </item>
                        <item>
                            <name>Detail view action</name>
                            <description>Specify the action you want to perform on the List's Detail View. Choices include:</description>
                            <list>
                                <item>
                                    <name-title>Detail View Action</name-title>
                                    <description-title>Description</description-title>
                                </item>
                                <item>
                                    <name>Submit Detail View Edits to List</name>
                                    <description>Save the edits in the detail view to the List control.</description>
                                </item>
                                <item>
                                    <name>Submit List Edits to Server</name>
                                    <description>Save the edits made to the List back to the server.</description>
                                </item>
                                <item>
                                    <name>New Detail View Record</name>
                                    <description>Create a new record.</description>
                                </item>
                                <item>
                                    <name>Reset Detail View Form</name>
                                    <description>Reset the detail view, undoing all edits.</description>
                                </item>
                                <item>
                                    <name>Reset Data in Current Row</name>
                                    <description>Undo all change to the currently selected row int he List.</description>
                                </item>
                                <item>
                                    <name>Mark Current Row as Deleted</name>
                                    <description>Mark the currently selected row in the List as deleted.</description>
                                </item>
                            </list>
                        </item>
                        <item>
                            <name>Additional information</name>
                            <description>Provides tips for creating enable expressions that can be added to buttons that invoke the action, e.g. enabling a "Reset Detail View Form" button only when the Detail View is dirty.</description>
                        </item>
                        <item>
                            <name>Prompt for confirmation</name>
                            <description>If enabled, the user will be prompted to confirm the action before it is performed, i.e. when deleting the currently selected row.</description>
                        </item>
                    </list>
                </section>
                <section>
                    <title>Scroll Options Properties</title>
                    <list>
                        <item>
                            <name>Scroll mode</name>
                            <description>Should the target row be positioned at the top or bottom of the List, or simply scrolled into view. Choices include *[ui:into-view]*, *[ui:top]*, *[ui:bottom]*.</description>
                        </item>
                        <item>
                            <name>Animate</name>
                            <description>Animate property.</description>
                        </item>
                        <item>
                            <name>Duration</name>
                            <description>Specify the duration of the animation in milliseconds</description>
                        </item>
                        <item>
                            <name>X offset</name>
                            <description>Distance from top/bottom of List to scrolled to item.</description>
                        </item>
                        <item>
                            <name>Y offset</name>
                            <description>Distance from left/right of List to scroll to item.</description>
                        </item>
                    </list>
                </section>
                <section>
                    <title>Show/Hide List Item Footer Properties</title>
                    <list>
                        <item>
                            <name>Mode</name>
                            <description>Specify if the visibility of the element should be toggled, or explicitly set to shown or hidden. Choices include *[ui:ToggleVisibility]*, *[ui:Show]*, *[ui:Hide]*.</description>
                        </item>
                        <item>
                            <name>Target row</name>
                            <description>Specify which row to operate on. The first row in the List is '1' (not 0). To operate on the row that has focus, enter &lt;Current&gt; or leave blank.</description>
                        </item>
                        <item>
                            <name>Show animation style</name>
                            <description>Select the animation method to use when the window is shown. Fade and Slide use methods in jQuery core. Other options require jQueryUI.</description>
                        </item>
                        <item>
                            <name>Show animation speed</name>
                            <description>Specify the animation speed. You can select a pre-defined option, or you can enter an explicit value in milliseconds. Options are listed below:</description>
                            <list>
                                <item>
                                    <name-title>Option</name-title>
                                    <description-title>Description</description-title>
                                </item>
                                <item>
                                    <name>slow</name>
                                    <description>Animation is rendered in 600 milliseconds</description>
                                </item>
                                <item>
                                    <name>fast</name>
                                    <description>Animation is rendered in 200 milliseconds</description>
                                </item>
                                <item>
                                    <name>&lt;explicit value&gt;</name>
                                    <description>An explicit value greater than zero specifying the animation speed in milliseconds. E.g., *[ui:500]*.</description>
                                </item>
                            </list>
                        </item>
                        <item>
                            <name>onShowComplete Javascript</name>
                            <description>(Optional) Specify the Javascript to execute when the animation that shows the element has completed.</description>
                        </item>
                        <item>
                            <name>Hide animation style</name>
                            <description>Select the animation method to use when the window is closed. Fade and Slide use methods in jQuery core. Other options require jQueryUI.</description>
                        </item>
                        <item>
                            <name>Hide animation speed</name>
                            <description>Specify the animation speed. You can select a pre-defined option, or you can enter an explicit value in milliseconds. Options are listed below:</description>
                            <list>
                                <item>
                                    <name-title>Option</name-title>
                                    <description-title>Description</description-title>
                                </item>
                                <item>
                                    <name>slow</name>
                                    <description>Animation is rendered 600 milliseconds</description>
                                </item>
                                <item>
                                    <name>fast</name>
                                    <description>Animation is rendered in 200 milliseconds</description>
                                </item>
                                <item>
                                    <name>&lt;explicit value&gt;</name>
                                    <description>An explicit value greater than zero specifying the animation speed in milliseconds. E.g., *[ui:500]*.</description>
                                </item>
                            </list>
                        </item>
                        <item>
                            <name>onHideComplete Javascript</name>
                            <description>(Optional) Specify the Javascript to execute when the animation that hides the element has completed.</description>
                        </item>
                    </list>
                </section>
                <section>
                    <title>Refresh List Options Properties</title>
                    <list>
                        <item>
                            <name>Keep focus on current selection</name>
                            <description>If enabled, focus on the current row will be retained when the List control is refreshed. Child lists will also remember their current selection.</description>
                        </item>
                        <item>
                            <name>Set focus to value</name>
                            <description>Set focus to row with specified value after List is refreshed. You can leave this value blank.</description>
                        </item>
                        <item>
                            <name>Refresh child Lists</name>
                            <description>Specify if the child lists should be refreshed. Only applies to Lists with child lists.</description>
                        </item>
                        <item>
                            <name>Only refresh child Lists</name>
                            <description>Specify if only the child lists should be refreshed. The parent list is not refreshed. Only applies to Lists with child lists.</description>
                        </item>
                        <item>
                            <name>Incremental refresh</name>
                            <description>An incremental refresh will not overwrite edited rows in the List. New records added on the server after the List was initially populated will be retrieved. Records deleted on the server will be removed from the List. Records edited on the server will will be updated in the List (as long as these records to not have unsynchronized edits).</description>
                        </item>
                        <item>
                            <name>Warn if List is dirty before doing a full refresh</name>
                            <description>When you do a full refresh, unsynced List edits are lost. Therefore you should check that the List is not dirty before doing a full refresh.</description>
                        </item>
                        <item>
                            <name>Warning message if List is dirty</name>
                            <description>Specify the message to show if an attempt is made to refresh the data in a dirty List.</description>
                        </item>
                    </list>
                </section>
            </sections>
        </group>
    </groups>
    <limitations>UX Component Only</limitations>
    <links>
        <link href="#section1_Client-side group breaks">Client-side Group Breaks</link>
        <link href="#group_Available Actions">Available Actions</link>
        <link link="populate controls in an unbound ux component with data from a table">Populate controls in an UNBOUND UX component with data from a table</link>
    </links>
    <see>
   <ref link="action javascript for the ux">Action Javascript for the UX</ref>
 
    </see>
</page>