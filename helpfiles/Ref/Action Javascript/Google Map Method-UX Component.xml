<page>
    <shortlink>Google Map Method UX Component</shortlink>
    <topic>Google Map Method (UX Component)</topic>
    <description>
        Call a method to perform some action on a Google Map. Actions that you can perform include:
        Clearing markers, opening or closing an info box, adding a marker to the map, centering the map on an address, setting the map zoom factor.
    </description>

    <sections>

        <section>
            <description>Used with the UX component.</description>
        </section>
        <section>
            <title>Resize Map</title>
            <description>
                An option in the 'Google Map Methods (UX Component)' action allows you to resize the map.
                You can set the map height and width to an explicit size, or you can read the size from controls on the component,
                or you can call a Javascript function that returns the height and width.
            </description>
            <note>
                In many cases where a Map is used in a UX that has Panels, you will set the 'Fill container'
                property on the Map and so the map will resize automatically. You will not need this new action.
            </note>
        </section>
        <section>
            <title>Map Actions</title>
            <description>This action allows you to perform these map actions:</description>
            <list bullet="true">
                <item>
                    <name>*[Add a marker to the map]* - (Watch "Adding a Marker to a Map" in [Videos] to learn more.)</name>
                </item>
                <item>
                    <name>*[Add multiple markers to the map]* -  (Watch "Adding Multiple Markers to a Map" in [Videos] to learn more.)</name>
                </item>
                <item>
                    <name>*[Show marker detail]* (i.e. open the Info Box)</name>
                </item>
                <item>
                    <name>*[Show/hide marker]*</name>
                </item>
                <item>
                    <name>*[Remove marker(s)]*</name>
                </item>
                <item>
                    <name>*[Center map]*</name>
                </item>
                <item>
                    <name>*[Set zoom level]*</name>
                </item>
                <item>
                    <name>*[Emphasize/De-emphasize markers]*</name>
                </item>
                <item>
                    <name>*[Refresh map]*</name>
                </item>
                <item>
                    <name>*[Add KML Layers to a map]* - Allows you to add a KML layer to your map.</name>
                </item>
                <item build="5036">
                    <name>*[Plot route]*</name>
                </item>
                <item>
                    <name>*[Get a pointer to the Google Map object]* - Allows you to get a pointer to the underlying Google Maps object. Useful if you are trying to implement some code you found while reading the Google Maps API documentation.</name>
                </item>
                <item build="5054">
                    <name>*[Get distance and travel time between two points]* - Computes the distance and travel time between destinations in an array of two or more locations.</name>
                </item>
            </list>
        </section>
        <section>
            <title>Map Action Properties</title>
            <list>
                <item>
                    <name>Map id</name>
                    <description>Specify the map you want to operate on.</description>
                </item>
                <item>
                    <name>Action name</name>
                    <description>Specify the action that you want to perform. Choices include:</description>
                    <list bullet="true">
                        <item>
                            <name>*[ui:Add a marker to the map]*</name>
                        </item>
                        <item>
                            <name>*[ui:Add multiple markers to the map]*</name>
                        </item>
                        <item>
                            <name>*[ui:Show marker detail (i.e. open the Info Box)]*</name>
                        </item>
                        <item>
                            <name>*[ui:Show/hide marker]*</name>
                        </item>
                        <item>
                            <name> *[ui:Remove marker(s)]*</name>
                        </item>
                        <item>
                            <name>*[ui:Center map]*</name>
                        </item>
                        <item>
                            <name>*[ui:Set zoom level]*</name>
                        </item>
                        <item>
                            <name>*[ui:Refresh map]*</name>
                        </item>
                        <item>
                            <name>*[ui:Emphasize/De-emphasize markers]*</name>
                        </item>
                        <item>
                            <name>*[ui:Resize map]*</name>
                        </item>
                        <item>
                            <name>*[ui:Add KML Layers to map]*</name>
                        </item>
                        <item>
                            <name>*[ui:Plot route]*</name>
                        </item>
                        <item>
                            <name>*[ui:Get pointer to Google Map object]*</name>
                        </item>
                        <item>
                            <name>*[ui:Get distance and travel time between two points]*</name>
                        </item>
                    </list>
                </item>
            </list>
        </section>
        <section>
            <title>Add Multiple Markers Properties</title>
            <list>
                <item>
                    <name>Data type</name>
                    <description>Specify if the data for the map is obtained from a server-side query (such as a Data Series), or from client-side data (specified by calling a JavaScript function.) Choices are *[ui:ServerSideData]* or *[ui:ClientSideData]*.</description>
                </item>
                <item>
                    <name>ClientSide data type</name>
                    <description>The client-side data source to read location data to add markers to the map. This property is only available if *[ui:ClientSideData]* is selected for *[ui:Data type]*. Choices are *[ui:JavascriptFunction]* or *[ui:ListControl]*.</description>
                </item>
                <item>
                    <name>Javascript function</name>
                    <description>The JavaScript function to call to get the locations to add to the map. The function must return an array of objects. Each object in the array must have a latitude and longitude value. Other values can optionally be specified.</description>
                </item>
                <item>
                    <name>Javascript properties</name>
                    <description>Defines the properties in the array of objects returned by the function specified in the *[ui:Javascript function]* property.</description>
                </item>
                <item>
                    <name>List control</name>
                    <description>The List control in the UX component that contains the locations to add to the map. The specified List control must have a "latitude" and "longitude" field that contains the location to add to the map.</description>
                </item>
                <item>
                    <name>Data series name</name>
                    <description>Specify the name of the Data Series that contains the data for the markers. To define Data Series, go to the Properties Pane.</description>
                </item>
                <item>
                    <name>Markers to clear before new markers are added</name>
                    <description>Specify the Group Names of any marker groups you want to clear from the map before adding new markers.</description>
                </item>
                <item>
                    <name>Latitude value</name>
                    <description>Specify the name of the sub-series that has the latitude value</description>
                </item>
                <item>
                    <name>Longitude value</name>
                    <description>Specify the name of the sub-series that has the longitude value</description>
                </item>
                <item>
                    <name>Marker name prefix</name>
                    <description>Each marker is given a unique name based on the marker name prefix and the row number in the Data Series.</description>
                </item>
                <item>
                    <name>Group name</name>
                    <description>
                        <p>Specify the group name that each marker belongs to. The group name is a plain text value (it does not support HTML markup). If you want to include data from the Data Series in the name, use a template. Click the [...] smart field button to define the template.</p>
                        <p>If *[ui:Data type]* is set to *[ServerSideData]*, the Group name is specified as static text that can include Xbasic placeholders.</p>
                        <p>If *[ui:Data type]* is set to *[ClientSideData]*, the Group name is specified as a JavaScript expression.</p>
                        <p>See *[ui:Marker detail]* below for more information about templates.</p>
                    </description>
                </item>
                <item>
                    <name>Marker icon</name>
                    <description>
                        <p>If you leave this blank a default icon will be used for all markers. You can customize the icon used for each marker on the map. For example, you can dynamically set the icon based on an expression or an 'icon sequence'.</p>
                        <p>If you specify an expression for the marker icon and *[ui:Data type]* is set to *[ServerSide]*, the expression uses Xbasic syntax (*[xb:.AND.]*, *[xb:.OR.]*, *[xb:.NOT.]*, *[xb:=]*, *[xb:&lt;&gt;]*). Otherwise, if *[ui:Data type]* is set to *[ClientSide]*, the expression uses JavaScript syntax (*[xb:&amp;&amp;]*, *[xb:||]*, *[xb:!]*, *[xb:==]*, *[xb:!=]*).</p>
                        <p>You can also create a function to set the icon. The function will be passed the data in the current row in the data set and the row number. You can reference this data in your code to determine what image to use. The function must the name of the marker image to use.</p>
                        <p>The function will either be an Xbasic or JavaScript function based on the *[ui:Data type]* setting.</p>
                        <p>If *[ui:Data type]* is set to *[ServerSide]*, the function will be an Xbasic function. The marker data and row number are passed in the e argument to the function:</p>
                        <p>
                            <list>
                                <item>
                                    <name-title>Variable</name-title>
                                    <description-title>Description</description-title>
                                </item>
                                <item>
                                    <name>*[xb:e.tbl]*</name>
                                    <description>A pointer to the Data Series value for the current row in the Data Series. To get the value of a specific field in the data, use the *[xb:data()]* method. See example below.</description>
                                </item>
                                <item>
                                    <name>*[xb:e.rowNumber]*</name>
                                    <description>The current row in the Data Series.</description>
                                </item>
                            </list>
                        </p>
                        <p>For example, the function below computes the image to return based on the value of "quantity":</p>
                        <p>
                            <example code="xb"><![CDATA[function getMarkerIcon as c (e as p)
    dim imageName as c

    if (val(e.tbl.data("quantity")) < 100) then
        imageName = "image1.jpg"
    else if (val(e.tbl.data("quantity")) >= 100 .and. val(e.tbl.data("quantity"))) < 200 then
        imageName = "image2.jpg"
    else
        imageName = "image3.jpg"
    end if

    getMarkerIcon = imageName

end function
]]></example>
                        </p>
                        <p>If *[ui:Data type]* is set to *[ClientSide]*, the function will be a JavaScript function. The marker data and row number are passed as arguments to the function:</p>
                        <p>
                            <list>
                                <item>
                                    <name-title>Variable</name-title>
                                    <description-title>Description</description-title>
                                </item>
                                <item>
                                    <name>*[js:markerData]*</name>
                                    <description>An object that contains the data for the current row.</description>
                                </item>
                                <item>
                                    <name>*[js:rowNumber]*</name>
                                    <description>The current row number.</description>
                                </item>
                            </list>
                        </p>
                        <p>The JavaScript function must return a value that will contain the name of the image to use for the map marker for the current row of data object.</p>
                        <p>For example:</p>
                        <p>
                            <example code="js"><![CDATA[function getMarkerIcon(markerData,rowNumber) {
    var imageName = ""

    if (markerData.quantity < 100) {
        imageName = "image1.jpg"
    } else if (markerData.quantity >= 100 && markerData.quantity < 200) {
        imageName = "image2.jpg"
    } else {
        imageName = "image3.jpg"
    }

    return imageName;
}]]></example>
                        </p>
                    </description>
                </item>
                <item>
                    <name>Marker title</name>
                    <description>
                        <p>Specify the marker title. The marker title is a plain text value (it does not support HTML markup). If you want to include data from the Data Series in the title, use a template. Click the [...] smart field button to define the template.</p>
                        <p>If *[ui:Data type]* is set to *[ServerSideData]*, the Marker title is specified as static text that can include Xbasic placeholders.</p>
                        <p>If *[ui:Data type]* is set to *[ClientSideData]*, the Marker title is specified as a JavaScript expression.</p>
                        <p>See *[ui:Marker detail]* below for more information about templates.</p>
                    </description>
                </item>
                <item>
                    <name>Has marker detail</name>
                    <description>
                        <![CDATA[Specify if each marker has a detail view. Specify '<true>', '<false>' or the name of a Data Series column that has a logical value.]]>
                    </description>
                </item>
                <item>
                    <name>Marker detail</name>
                    <description>
                        <p>Specify the HTML for the marker detail. If you want to include data from the Data Series in the detail, use a template. Click the [...] smart field button to define the template.</p>
                        <p>The marker detail is only shown if *[ui:Has marker detail]* is set to *[&lt;true&gt;]*</p>
                        <p>If the *[ui:Data Type]* is set to *[ServerSideData]*, the template can contain static text and Xbasic expressions, which are enclosed in curly braces. Xbasic expressions can include Xbasic functions.</p>
                        <p>
                            <example caption="A simple template with no expressions."><![CDATA[GroupName]]></example>
                        </p>
                        <p>
                            <example caption="A template that references the row number in the data series."><![CDATA[GroupName{rowNumber}]]></example>
                        </p>
                        <p>The template can reference one or more values from the data series. For example, the template below includes the Name, Latitude, and Longitude columns from a Data Series:</p>
                        <p>
                            <example><![CDATA[Showing marker for {ds.data("Name")} Latitude: {ds.data("Latitude")}, Longitude: {ds.data("Longitude")}]]></example>
                        </p>
                        <p>Your template can use Xbasic Functions from the [Xbasic Function Library]. For example, the template below uses the [UT()] function to format the Name:</p>
                        <p>
                            <example><![CDATA[Showing marker for {UT(ds.data("Name"))} Latitude: {ds.data("Latitude")}, Longitude: {ds.data("Longitude")}]]></example>
                        </p>
                        <p>You can also use functions defined in the Xbasic Functions section of the component. The function name must be prefixed with *[xb:lf.]* in order to use the function. For example:</p>
                        <p>
                            <example><![CDATA[Showing marker for {lf.myXBFunction(ds.data("Name"))} Latitude: {ds.data("Latitude")}, Longitude: {ds.data("Longitude")}]]></example>
                        </p>
                        <p>If the *[ui:Data Type]* is set to *[ClientSideData]*, the template is defined as a JavaScript expression. The JavaScript expression must evaluate to a string. For example:</p>
                        <p>
                            <example code="js" caption="A simple expression"><![CDATA['GroupName']]></example>
                        </p>
                        <p>Here is a slightly more complex JavaScript expression that includes the row number:</p>
                        <p>
                            <example code="js"><![CDATA['GroupName' + rowNumber]]></example>
                        </p>
                        <p>The template can include both static text and data from the JavaScript array used to populate the map. The expression below references the Name, Latitude, and Longitude values in the map data:</p>
                        <p>
                            <example code="js"><![CDATA['Showing marker for ' + data[rowNumber].Name + ' Latitude: ' + data[rowNumber].Latitude + ' Longitude: ' + data[rowNumber].Longitude]]></example>
                        </p>
                        <p>You can the *[ui:InsertMethod or Placeholder]* link to insert UX Component methods and placeholders in your JavaScript template.</p>
                        <p>Your template can also include JavaScript functions you've defined in the Javascript functions section of the UX component. For example:</p>
                        <p>
                            <example code="js" caption="Call JavaScript function to compute the HTML for the detail."><![CDATA[computeMarkerDetail(data[rowNumber])]]></example>
                        </p>
                    </description>
                </item>
                <item>
                    <name>Marker is draggable</name>
                    <description>
                        <![CDATA[Specify if each marker is draggable. Specify '<true>', '<false>' or the name of a Data Series column that has a logical value.]]>
                    </description>
                </item>
                <item>
                    <name>Animate marker</name>
                    <description>
                        <![CDATA[Specify if each marker should be animated when placed on the map. Specify '<false>', '<drop>' or '<bounce>', or the name of a Data Series column that has 'drop', 'bounce' or 'false' as a value.]]>
                    </description>
                </item>
                <item>
                    <name>Bounce duration</name>
                    <description>If the maker animation is set to 'drop' specify the length of the animation in milliseconds. You can select a Data Series column that has a duration value.</description>
                </item>
                <item>
                    <name>Overlay circle</name>
                    <description>
                        <![CDATA[Specify if a circle should be drawn around each marker. Select <true>, <false> or the name of a Data Series column that returns a logical value.]]>
                    </description>
                </item>
                <item>
                    <name>Overlay size</name>
                    <description>Specify the overlay size either by specifying a radius or area. Enter a number with the following suffix: "m", "km", "mi", or "ft" for radius, and "sq m", "sq km", "sq mi", "sq ft" for area. Alternatively, select a Data Series column that contains the overlay size.</description>
                </item>
                <item>
                    <name>Overlay color</name>
                    <description>Specify the overlay color. Alternatively, select a Data Series column that contains the overlay color.</description>
                </item>
                <item>
                    <name>Overlay fill opacity</name>
                    <description>Specify the overlay fill opacity (a value between 0 and 1 - solid color). Alternatively, select a Data Series column that contains the overlay fill opacity.</description>
                </item>
                <item>
                    <name>Stroke color</name>
                    <description>Specify the stroke color (color of the line surrounding the circle). Alternatively, select a Data Series column that contains the stroke color.</description>
                </item>
                <item>
                    <name>Stroke opacity</name>
                    <description>Specify the stroke opacity (a value between 0 and 1 - solid color). Alternatively, select a Data Series column that contains the stroke opacity.</description>
                </item>
                <item>
                    <name>Stroke width</name>
                    <description>Specify the stroke width (in points). Alternatively, select a Data Series column that contains the stroke width.</description>
                </item>
            </list>
        </section>
        <section>
            <cases>
                <case>
                    <title nested="2">Adding Multiple Markers to a Map Control Using Client-side Data</title>
                    <description>
                        <p>The data that defines the latitude/longitude for each marker on the map (and also for the marker titles, details etc). can be specified using client-side data. Client-side data can come from a Javascript function, a List control, the client-side Data Cache, or, in the case of a PhoneGap application, by querying a SQLite database on a device.</p>
                        <p>To specify that the *[ui:Google Map Method (UX Component) / Add multiple markers to the map]* action should use client-side data, set the *[ui:Data type]* property to *[ui:ClientSideData]*. You can then specify whether the client-side data comes from a Javascript function, or from data in a List control.</p>
                        <p>In the case where you specify the name of a Javascript function, you specify the name of a Javascript function (which must return an array of objects - each object has properties that must include the marker latitude and longitude values). You must also specify the names of the properties in the data returned by the Javascript function.</p>
                    </description>
                    <figure>
                        <link>images/addMarkersClientSide.png</link>
                    </figure>
                </case>
                <case>
                    <description>For example, assume that you specify the name of a Javascript function that returns data like this:</description>
                    <example><![CDATA[[
    {
        "name": "COYOTE FLATS",
        "city": "BISHOP",
        "state": "CA",
        "latitude": "37.20203",
        "longitude": "-118.47629"
    },
    {
        "name": "LOST HILLS SHERIFF\\'S STATION",
        "city": "CALABASAS",
        "state": "CA",
        "latitude": "34.14167",
        "longitude": "-118.5262"
    },
    {
        "name": "GOLDSTONE /GTS/",
        "city": "BARSTOW",
        "state": "CA",
        "latitude": "35.35053",
        "longitude": "-116.88837"
    }
]]]></example>
                </case>
                <case>
                    <description>In this case the property names that you specify in the Javascript properties property would be:</description>
                    <example><![CDATA[name
city
state
latitude
longitude]]></example>
                </case>
                <case>
                    <title nested="3">Loading Locations from the Client-Side Data Cache</title>
                    <description>If you want to use data from the client-side Data Cache, or (in the case of a PhoneGap application) data from a query against a SQLite database, you need to use a two-step process because reading data from a Data Cache (or a SQLite database) is an asynchronous action. Therefore your Javascript must read the Data Cache, or execute the SQLite query (you can use Action Javascript for this) and in the on success function for the action, you must put the data you have just read into a variable in the UX object (for example *[js:{dialog.object}._mapData]*) and then call the Action Javascript action to add the markers to a map using the Javascript function option. The Javascript function will read the data from the variable that contains the data.</description>
                </case>
                <case>
                    <description>For more information, watch "Adding Multiple Markers to a Map Control using Client-side Data" in the [Videos] below.</description>
                </case>
            </cases>
            <description/>
        </section>
        <section>
            <title>Javascript Properties</title>
            <list>
                <item>
                    <name>onClick</name>
                    <description>
                        Specify the Javascript to execute for this event. You will typically specify the name of a Javascript function. You can pass in any data you want to the function from the Data Series. You can also pass in data (no quotes) which is the Google Maps 'data' object for the marker.
                        Example: myFunction(data,'{ds.data("Name")}')
                        Tip: You can get the lat/lng of the event location from the 'data' object. For example: var lat = data.latLng.lat(), var lng = data.latLnd.lng()
                    </description>
                </item>
                <item>
                    <name>onDblClick</name>
                    <description>
                        Specify the Javascript to execute for this event. You will typically specify the name of a Javascript function. You can pass in any data you want to the function from the Data Series. You can also pass in data (no quotes) which is the Google Maps 'data' object for the marker.
                        Example: myFunction(data,'{ds.data("Name")}')
                        Tip: You can get the lat/lng of the event location from the 'data' object. For example: var lat = data.latLng.lat(), var lng = data.latLnd.lng()
                    </description>
                </item>
                <item>
                    <name>onDrag</name>
                    <description>
                        Specify the Javascript to execute for this event. You will typically specify the name of a Javascript function. You can pass in any data you want to the function from the Data Series. You can also pass in data (no quotes) which is the Google Maps 'data' object for the marker.
                        Example: myFunction(data,'{ds.data("Name")}')
                        Tip: You can get the lat/lng of the event location from the 'data' object. For example: var lat = data.latLng.lat(), var lng = data.latLnd.lng()
                    </description>
                </item>
                <item>
                    <name>onDragEnd</name>
                    <description>
                        Specify the Javascript to execute for this event. You will typically specify the name of a Javascript function. You can pass in any data you want to the function from the Data Series. You can also pass in data (no quotes) which is the Google Maps 'data' object for the marker.
                        Example: myFunction(data,'{ds.data("Name")}')
                        Tip: You can get the lat/lng of the event location from the 'data' object. For example: var lat = data.latLng.lat(), var lng = data.latLnd.lng()
                    </description>
                </item>
                <item>
                    <name>onDragStart</name>
                    <description>
                        Specify the Javascript to execute for this event. You will typically specify the name of a Javascript function. You can pass in any data you want to the function from the Data Series. You can also pass in data (no quotes) which is the Google Maps 'data' object for the marker.
                        Example: myFunction(data,'{ds.data("Name")}')
                        Tip: You can get the lat/lng of the event location from the 'data' object. For example: var lat = data.latLng.lat(), var lng = data.latLnd.lng()
                    </description>
                </item>
                <item>
                    <name>onMouseDown</name>
                    <description>
                        Specify the Javascript to execute for this event. You will typically specify the name of a Javascript function. You can pass in any data you want to the function from the Data Series. You can also pass in data (no quotes) which is the Google Maps 'data' object for the marker.
                        Example: myFunction(data,'{ds.data("Name")}')
                        Tip: You can get the lat/lng of the event location from the 'data' object. For example: var lat = data.latLng.lat(), var lng = data.latLnd.lng()
                    </description>
                </item>
                <item>
                    <name>onMouseOut</name>
                    <description>
                        Specify the Javascript to execute for this event. You will typically specify the name of a Javascript function. You can pass in any data you want to the function from the Data Series. You can also pass in data (no quotes) which is the Google Maps 'data' object for the marker.
                        Example: myFunction(data,'{ds.data("Name")}')
                        Tip: You can get the lat/lng of the event location from the 'data' object. For example: var lat = data.latLng.lat(), var lng = data.latLnd.lng()
                    </description>
                </item>
                <item>
                    <name>onMouseOver</name>
                    <description>
                        Specify the Javascript to execute for this event. You will typically specify the name of a Javascript function. You can pass in any data you want to the function from the Data Series. You can also pass in data (no quotes) which is the Google Maps 'data' object for the marker.
                        Example: myFunction(data,'{ds.data("Name")}')
                        Tip: You can get the lat/lng of the event location from the 'data' object. For example: var lat = data.latLng.lat(), var lng = data.latLnd.lng()
                    </description>
                </item>
                <item>
                    <name>onMouseUp</name>
                    <description>
                        Specify the Javascript to execute for this event. You will typically specify the name of a Javascript function. You can pass in any data you want to the function from the Data Series. You can also pass in data (no quotes) which is the Google Maps 'data' object for the marker.
                        Example: myFunction(data,'{ds.data("Name")}')
                        Tip: You can get the lat/lng of the event location from the 'data' object. For example: var lat = data.latLng.lat(), var lng = data.latLnd.lng()
                    </description>
                </item>
                <item>
                    <name>onRightClick</name>
                    <description>
                        Specify the Javascript to execute for this event. You will typically specify the name of a Javascript function. You can pass in any data you want to the function from the Data Series. You can also pass in data (no quotes) which is the Google Maps 'data' object for the marker.
                        Example: myFunction(data,'{ds.data("Name")}')
                        Tip: You can get the lat/lng of the event location from the 'data' object. For example: var lat = data.latLng.lat(), var lng = data.latLnd.lng()
                    </description>
                </item>
                <item>
                    <name>onAddComplete</name>
                    <description>
                        Specify the Javascript to execute for this event. You will typically specify the name of a Javascript function. You can pass in any data you want to the function from the Data Series. You can also pass in markerSettings and markerObject (no quotes, case sensitive) which are the settings for the marker and the Google Maps marker Object.
                        Example: myFunction(markerSettings,markerObject,'{ds.data("Name")}')
                    </description>
                </item>
            </list>
        </section>
        <section>
            <title>Remove Marker(s) Properties</title>
            <list>
                <item>
                    <name>Remove by what</name>
                    <description>Remove a specific marker or a group of markers. Choices include *[ui:Marker]*, *[ui:Group]*.</description>
                </item>
                <item>
                    <name>Marker name</name>
                    <description>Specify the marker name.</description>
                </item>
                <item>
                    <name>Marker group</name>
                    <description>Specify the marker group.</description>
                </item>
            </list>
        </section>
        <section>
            <title>Emphasize/De-emphasize Markers Properties</title>
            <list>
                <item>
                    <name>Emphasize or de-emphasize</name>
                    <description>Specify if you want to emphasize or de-emphasize a markers. Choices include *[ui:Emphasize]*, *[ui:De-Emphasize]*.</description>
                </item>
                <item>
                    <name>Specify markers by</name>
                    <description>How do you want to specify the markers to emphasize/de-emphasize? You can either specify by marker name or marker group. Choices include *[ui:By Name]*, *[ui:By Group]*.</description>
                </item>
                <item>
                    <name>Emphasize duration</name>
                    <description>Enter the duration in milliseconds</description>
                </item>
                <item>
                    <name>Marker names</name>
                    <description>Enter a comma delimited list of marker names.</description>
                </item>
                <item>
                    <name>Marker groups</name>
                    <description>Enter a comma delimited list of marker group names.</description>
                </item>
            </list>
        </section>
        <section>
            <title>Zoom Map Properties</title>
            <list>
                <item>
                    <name>Zoom level</name>
                    <description>Set the zoom level (0 - whole earth - 20 - a few yards)</description>
                </item>
            </list>
        </section>
        <section>
            <title>Center Map Properties</title>
            <list>
                <item>
                    <name>Marker name</name>
                    <description>Specify the name of the marker. To call a javascript function to return the map name, specify javascript:functionname</description>
                </item>
                <item>
                    <name>Pan map</name>
                    <description>Indicate if the map should be panned into view.</description>
                </item>
            </list>
        </section>
        <section>
            <title>Location or Address Properties</title>
            <list>
                <item>
                    <name>Get location or address from</name>
                    <description>Specify where the address of the marker should be obtained from. 'Explicit' - an address or lat/lng you enter now, 'Control(s) on component' - read a lat/lng value, or an address from one or more controls on the component, 'Javascript Function' - the name of a Javascript function that will return the location (either an address, or a lat,lng value), 'List Control' - columns in a List Control that contain either lat/lng values or an address, 'Device Location' - read the location from the device (the user will be prompted for permission). Choices include *[ui:Explicit]*, *[ui:Control(s) on Component]*, *[ui:List Control]*, *[ui:Javascript Function]*, *[ui:Device Location]*.</description>
                </item>
                <item>
                    <name>High accuracy</name>
                    <description>If true, the device will use its most accurate method to get location information. If false, the device will use its fastest or lower power consumption method depending on the device.</description>
                </item>
                <item>
                    <name>Timeout</name>
                    <description>The amount of time in milliseconds to wait on the device to acquire location information excluding the amount of time it takes the user to grant the web page access to geolocation data.</description>
                </item>
                <item>
                    <name>Max age</name>
                    <description>The amount of time in milliseconds to accept a previously acquired location. 0 means that a new location must be acquired from the device.</description>
                </item>
                <item>
                    <name>Location or Address</name>
                    <description>Specify the marker location. You can either enter an address, or a lat/lng value (as a comma delimited value e.g. 34,-118) .</description>
                </item>
                <item>
                    <name>Control for latitude</name>
                    <description>Specify the name of the control to read for the latitude value.</description>
                </item>
                <item>
                    <name>Control for longitude</name>
                    <description>Specify the name of the control to read for the longitude value.</description>
                </item>
                <item>
                    <name>Control(s) to read</name>
                    <description>Specify the name of the control(s) to read. The control(s) can either contain an address or a lat/lng value (as a comma delimited value e.g. 34,-118).</description>
                </item>
                <item>
                    <name>Javascript function</name>
                    <description>Specify the name of the Javascript function to call. The function can either return an address, or a lat/lng value (as lat,lng).</description>
                </item>
                <item>
                    <name>List control</name>
                    <description>Specify the name of the List control</description>
                </item>
                <item>
                    <name>List control column(s) to read</name>
                    <description>Specify the List column(s) to read. The list column(s) can either contain lat/lng values or an address.</description>
                </item>
                <item>
                    <name>Latitude column</name>
                    <description>Specify the name of the column in the List that has the latitude value.</description>
                </item>
                <item>
                    <name>Longitude column</name>
                    <description>Specify the name of the column in the List that has the longitude value.</description>
                </item>
                <item>
                    <name>Data type</name>
                    <description>Specify if the value for the marker position is an address, or a latitude/longitude value. Choices include *[ui:Address]*, *[ui:Latitude/Longitude]*.</description>
                </item>
            </list>
        </section>
        <section>
            <title>Show/hide Marker Properties</title>
            <list>
                <item>
                    <name>Marker name</name>
                    <description>Specify the name of the marker. To call a javascript function to return the map name, specify javascript:functionname</description>
                </item>
                <item>
                    <name>Marker state</name>
                    <description>Specify if the marker should be shown or hidden Choices include *[ui:Show]*, *[ui:Hide]*.</description>
                </item>
            </list>
        </section>
        <section>
            <title>Show Detail Properties</title>
            <list>
                <item>
                    <name>Marker name</name>
                    <description>Specify the name of the marker. To call a javascript function to return the map name, specify javascript:functionname</description>
                </item>
            </list>
        </section>
        <section>
            <title>Add Marker Properties</title>
            <list>
                <item>
                    <name>Marker settings</name>
                    <description>Marker settings property.</description>
                </item>
                <item>
                    <name>Marker name</name>
                    <description>When you add a marker to a map you must specify a unique name for the marker. To call a javascript function to return the map name, specify javascript:functionname</description>
                </item>
                <item>
                    <name>Bring marker into view</name>
                    <description>Specify if the map should be scrolled to bring the marker into view after it has been added to the map.</description>
                </item>
            </list>
        </section>
        <section>
            <title>Resize Map Properties</title>
            <list>
                <item>
                    <name>Map height</name>
                    <description>Specify the map height. Use CSS syntax. You can specify the name of a control from which the height should be read. If you want to specify an explicit value, then prefix the value with 'value:' (e.g. value:300px). You can also specify the name of a Javascript function that will return the height by prefixing the value with 'javascript:' (e.g. javascript:getHeight).</description>
                </item>
                <item>
                    <name>Map width</name>
                    <description>Specify the map width. Use CSS syntax. You can specify the name of a control from which the width should be read. If you want to specify an explicit value, then prefix the value with 'value:' (e.g. value:300px). You can also specify the name of a Javascript function that will return the width by prefixing the value with 'javascript:' (e.g. javascript:getwidth).</description>
                </item>
            </list>
        </section>
        <section build="5036">
            <title>Plot Route</title>
            <description>
                <p>The following properties are used to configure the Plot route action:</p>
            </description>
            <list>
                <item>
                    <name>Type</name>
                    <description>The type of route to plot: </description>
                    <list>
                        <item>
                            <name>StartAndEndAddress</name>
                            <description>Plot a route between two locations: a start address and end address.</description>
                        </item>
                        <item>
                            <name>MultipleAddresses</name>
                            <description>Plot a route for two or more addresses defined using a JavaScript function.</description>
                        </item>
                    </list>
                </item>
                <item>
                    <name>Start address</name>
                    <description>The starting address for the route. You can either enter address (e.g. '36 Bigelow St. Cambridge MA') or latitude/longitude values (comma delimited (e.g. 42.3685632,-71.1045822). You can also specify the name of a Javascript function to return the address. To use a Javascript function, specify the address as: *[js:javascript:name_of_your_function]*</description>
                </item>
                <item>
                    <name>End address</name>
                    <description>The end address for the route. See *[ui:Start address]* for how to specify the address.</description>
                </item>
                <item>
                    <name>Addresses</name>
                    <description>The name of the JavaScript function to call that computes a list of addresses for the route. The addresses should be returned as an array. Each entry in the array can be either an address or latitude/longitude value. Latitude/longitude values must be comma delimited. For example, *[js:'42.480572,-71.204212']*. *[link:Click here to download an example component@components/mapPlotRoute.zip]* that uses a List to populate the addresses.</description>
                </item>
                <item>
                    <name>Draggable</name>
                    <description>If enabled, locations in the route can be moved by dragging them on the map.</description>
                </item>
                <item>
                    <name>Travel mode</name>
                    <description>The travel mode to use. Can be "Driving", "Walking", or "Bicycling".</description>
                </item>
                <item>
                    <name>Units</name>
                    <description>The distance units to use. Can be "Default", "Imperial", or "Metric".</description>
                </item>
                <item>
                    <name>Avoid highways</name>
                    <description>If checked, highways will be avoided when the route is generated.</description>
                </item>
                <item>
                    <name>Avoid tolls</name>
                    <description>If checked, toll booths and toll roads will be avoided when the route is generated.</description>
                </item>
                <item>
                    <name>Placeholder or DIV Id for directions</name>
                    <description>Defines a placeholder where the directions should be shown. You can either specify a Placeholder control, or a DIV id. To specify a DIV id use this syntax: *[ui:{div}name_of_div]* - i.e. prefix the DIV id with {div}. (for example *[ui:{div}mydiv1]*)</description>
                </item>
            </list>
        </section>
        <section build="5054">
            <title>Get distance and travel time between points</title>
            <description>
                <p>This action takes a set of two or more addresses (either strings or longitude/latitude values) and computes the distance and travel time between each set of points in the array. You can either pass in a start and end address or multiple addresses.  In the case where you select MultipleAddresses you must specify the name of a Javascript function that will return an array of addresses. For example, if your function returns an array with these addresses:</p>
            </description>
            <example code="js"><![CDATA[['address1','address2','address3']]]></example>
        </section>
        <section>
            <description>the action will compute the distance and travel time between:</description>
            <list bullet="true">
                <item>
                    <name>address1 - address2</name>
                </item>
                <item>
                    <name>address2 - address2</name>
                </item>
            </list>
        </section>
        <section>
            <description>
                <p>The action is asynchronous, so when all values have been computed, a callback function is called. You can specify the JavaScript to execute in the callback function in the onReady Javascript property.</p>
                <p>In your JavaScript you can reference an array called data that has an item for each address pair. Each item in the array has these properties:</p>
            </description>
            <list bullet="true">
                <item>
                    <name>distance_value - distance in meters</name>
                </item>
                <item>
                    <name>distance_text - string show distance in the specified units</name>
                </item>
                <item>
                    <name>duration_text - string showing travel time</name>
                </item>
                <item>
                    <name>duration_value - travel time in minutes</name>
                </item>
            </list>
        </section>
        <section>
            <description>In addition you can reference these variables:</description>
            <list bullet="true">
                <item>
                    <name>total_distance_value - total distance between first and last point in meters</name>
                </item>
                <item>
                    <name>total_duration_value - total travel time between first and last point</name>
                </item>
            </list>
        </section>
        <section>
            <description>The following properties are used to configure the *[ui:Get distance and travel time between points]* action:</description>
        </section>
        <section>
            <list>
                <item>
                    <name>Type</name>
                    <description>The type of route to plot: </description>
                    <list>
                        <item>
                            <name>StartAndEndAddress</name>
                            <description>Plot a route between two locations: a start address and end address.</description>
                        </item>
                        <item>
                            <name>MultipleAddresses</name>
                            <description>Plot a route for two or more addresses defined using a JavaScript function.</description>
                        </item>
                    </list>
                </item>
                <item>
                    <name>Start address</name>
                    <description>The starting address for the route. You can either enter address (e.g. '36 Bigelow St. Cambridge MA') or latitude/longitude values (comma delimited (e.g. 42.3685632,-71.1045822). You can also specify the name of a Javascript function to return the address. To use a Javascript function, specify the address as: *[js:javascript:name_of_your_function]*</description>
                </item>
                <item>
                    <name>End address</name>
                    <description>The end address for the route. See *[ui:Start address]* for how to specify the address.</description>
                </item>
                <item>
                    <name>Addresses</name>
                    <description>The name of the JavaScript function to call that computes a list of addresses for the route. The addresses should be returned as an array. Each entry in the array can be either an address or latitude/longitude value. Latitude/longitude values must be comma delimited. For example, *[js:'42.480572,-71.204212']*. *[link:Click here to download an example component@components/mapPlotRoute.zip]* that uses a List to populate the addresses.</description>
                </item>
                <item>
                    <name>Travel mode</name>
                    <description>The travel mode to use. Can be "Driving", "Walking", or "Bicycling".</description>
                </item>
                <item>
                    <name>Avoid highways</name>
                    <description>If checked, highways will be avoided when the route is generated.</description>
                </item>
                <item>
                    <name>Avoid tolls</name>
                    <description>If checked, toll booths and toll roads will be avoided when the route is generated.</description>
                </item>
                <item>
                    <name>Units</name>
                    <description>The distance units to use. Options include *[ui:Default]*, *[ui:Imperial]*, and *[ui:Metric]*.</description>
                </item>
                <item>
                    <name>onReady Javascript</name>
                    <description>JavaScript to execute after all the values have been computed. This is where you would add code to take the computed data and populate a control or DIV in the app to display the information.</description>
                </item>
            </list>
        </section>
        <section>
            <title>Videos</title>
        </section>
        <section>
            <videos>
                <title>Adding a Marker to a Map</title>
                <description>
                    <p>In this video, we show how you can add a marker to a map.</p>
                </description>
                <video>
                    <name>Watch Video</name>
                    <link>https://www.viddler.com/v/2dd0d5bb</link>
                </video>
            </videos>
        </section>
        <section>
            <videos>
                <title>Adding Multiple Markers to a Map</title>
                <description>
                    <p>In this video, we show how you can add bulk markers to a map. When the user selects a state from a dropdown box, we show how to put a marker on the map for each airport in the selected state.</p>
                </description>
                <video>
                    <name>Watch Video</name>
                    <link>https://www.viddler.com/v/54bf89fd</link>
                </video>
            </videos>
        </section>
        <section>
            <videos>
                <title>Adding Multiple Markers to a Map Control using Client-side Data</title>
                <description>
                    <p>Action Javascript has an action to add multiple markers to a map. The data that defines the latitude/longitude for each marker on the map (and also for the marker titles, details etc). can either come from server-side data, or from client-side data.</p>
                    <p>In the case of server-side data you specify the name of a Data Series that specifies the properties for each marker.</p>
                    <p>In this video we show how to configure the Action Javascript 'Add multiple markers to a map' action to use client-side data. This client-side data can come from a Javascript function, a List control, the client-side Data Cache, or, in the case of a PhoneGap application, by querying a SQLite database on a device.</p>
                </description>
                <date>2017-02-12</date>
                <video>
                    <name>Watch Video</name>
                    <link>https://www.viddler.com/v/10638029</link>
                </video>
                <resources>
                    <resource>
                        <link>http://www.ajaxvideotutorials.com/V12Videos/ux_map_addMarkers_clientsidedata.zip</link>
                    </resource>
                </resources>
            </videos>
        </section>
        <section>
            <videos>
                <title>Computing Distance and Travel Time Between Points</title>
                <description>
                    <p>A common requirement in mapping applications is to compute a route (showing driving directions, distance and travel time) between points. </p>
                    <p>In this video we show how a route, defined by addresses in a List control is used to compute driving directions, distance and travel times between points on the route. The code is all generated automatically by Action Javascript.</p>
                </description>
                <date>2018-04-30</date>
                <video>
                    <name>Watch Video</name>
                    <link>https://www.viddler.com/v/58a6c892</link>
                </video>
                <resources>
                    <resource>
                        <link>https://www.ajaxvideotutorials.com/V12Videos/maproutes.zip</link>
                    </resource>
                </resources>
            </videos>
        </section>
    </sections>

    <links>
        <link href="#section1_Videos">Videos</link>
        <link link="api%20functions">Xbasic Function Library</link>
        <link link="api%20ut%20function">UT()</link>
        <link href="/images/tools/ellipsesButton.png">...</link>
    </links>
    <see>
        <ref link="action javascript for the ux">Action Javascript for the UX</ref>
    </see>

</page>