<page>
    <shortlink>Client side Data Cache Actions</shortlink>
    <topic>Client-side Data Cache Actions</topic>
    <description>Perform some action on an item in the Client-side Data Cache (e.g. read the data, refresh the data, etc.).</description>
    <description>
        <p> The client-side data cache allows you to retrieve data from the server. Once the data has been loaded into the data cache, you can use the data  in your UX component. The data in the client-side data cache can be persisted (either to Local Storage or to the file system in a Cordova application) so that the data is available even when you no longer have a connection.</p>
        <p>The *[ui:Client-side Data Cache Actions]* action can be used to read, refresh, delete, or list the data items stored in the Client-side data cache.</p>
    </description>
    <sections>
        <section>
        </section>
        <section>
            <title>Client-side Data Cache Action Properties</title>
            <description>
                <p>This section describes properties for configuring a *[ui:Client-side Data Cache Action]* action.</p>
            </description>
            <cases>
                <case>
                    <title nested="2">Action name</title>
                    <description>Specify the Client-side Data Cache Action that you want to execute. Available actions include:</description>
                    <cases>
                        <case>
                            <title nested="3">Refresh Data Item(s)</title>
                            <description>Perform an Ajax callback to the server to refresh the data in one or more cached data item(s). You can specify a function to call once data items have been refreshed.</description>
                        </case>
                        <case>
                            <title nested="3">Read Data</title>
                            <description>Get the data from a cached data item. You can specify a JavaScript function to call after the data has been successfully read. You can also specify a filter and/or order to apply tot he data before the success function is called.</description>
                        </case>
                        <case>
                            <title nested="3">Read Multiple Data Items</title>
                            <description>Read multiple data items, then call an onComplete JavaScript function once all data items have been read. If the data for a data-item hasn't been fetched from the server, an Ajax callback is made to the server to retrieve the data. The onComplete function will be passed a parameter, *[js:obj]* that contains the data for each data-item read. E.g. *[js:obj.customers.data]*, *[js:obj.orders.data]*, etc.</description>
                        </case>
                        <case>
                            <title nested="3">Delete Data Cache Item(s)</title>
                            <description>Deletes item in the data cache. Specify the name of each item to delete or use '*[ui:&lt;all&gt;]*' to delete everything from the data cache in the *[ui:Data cache item to delete]* property. If the item is stored on the file system, the file is deleted. If the item is stored in LocalStorage, the item is deleted from LocalStorage. If you select the '*[ui:&lt;all&gt;]*'' option, the folder storing client-side files is removed.</description>
                        </case>
                        <case>
                            <title nested="3">List Files in Data Cache</title>
                            <description>Lists the data cache files that have been stored in the file system.</description>
                        </case>
                    </cases>
                </case>
                <case>
                    <title nested="2">Data cache items Id(s)</title>
                    <description>Specify the data cache items you want to perform an action on. You can enter a comma delimited list of data-items if you want to refresh the data in more than one data-item in a single Ajax callback. This property is available for the "Refresh Data Item(s)" action(s).</description>
                </case>
                <case>
                    <title nested="2">Data cache items to read</title>
                    <description>Data cache items to read property. This property is available for the "Read Multiple Data Items" action(s).</description>
                </case>
                <case>
                    <title nested="2">Data cache item to delete</title>
                    <description>Specify the name of the Data Cache item to delete (or '&lt;all&gt;' to delete all items). If the item is defined to persist (either in LocalStorage or the file system) and it has been persisted, it will be removed (from either LocalStorage or the file system). This property is available for the "Delete Data Cache Item(s)" action(s).</description>
                </case>
                <case>
                    <title nested="2">Data item</title>
                    <description>Specify the name of the data item you want to read. This property is available for the "Read Data" action(s).</description>
                </case>
                <case>
                    <title nested="2">Refresh cache items (if on-line) before read</title>
                    <description>If checked, the data cache items will be refreshed if a connection is available. This property is available for the "Read Data" and "Read Multiple Data Items" actions.</description>
                    <cases>
                        <case build="4582">
                            <title nested="3">Automatically Refreshing Data</title>
                            <description>
                                <p>When you read the value in a client-side data cache item using the *[ui:Read Data]* or *[ui:Read Multiple Data Items]* actions, the value stored on the device is returned, even if more up-to-date data is on the server. If you would like to retrieve the most recent data from the server before reading the item, you can specify that the data should be refreshed if the device is online by checking the *[ui:Refresh cache items (if on-line) before read]* property.</p>
                                <p>When an item is read with this property enabled, the cache will be updated if the device is online and the Alpha Anywhere server is available. After the cache has been updated, the data in the cache is read and returned. If the device is not online, or the Alpha Anywhere server is not available, the existing data in the cache is read and returned.</p>
                            </description>
                            <figure>
                                <link>images/csdc3.jpg</link>
                            </figure>
                            <figure>
                                <link>images/csdc1.jpg</link>
                            </figure>
                        </case>
                    </cases>
                </case>
                <case>
                    <title nested="2">Filter</title>
                    <description>You can specify a filter expression to filter the data in the data item. This property is available for the "Read Data" action(s).</description>
                </case>
                <case>
                    <title nested="2">Order</title>
                    <description>You can specify an order expression to order the data in the data item. This property is available for the "Read Data" action(s).</description>
                </case>
            </cases>
        </section>
        <section>
            <title>Javascript Properties</title>
            <cases>
                <case>
                    <title nested="2">onComplete</title>
                    <description>The onComplete event is triggered when data items have been refreshed or read from the server. Custom JavaScript can be added to this event to do additional processing or perform other actions. This event is available for the "Refresh Data Item(s)" and "Read Multiple Data Items" actions.</description>
                </case>
                <case>
                    <title nested="2">onSuccess</title>
                    <description>The onSuccess event is triggered when the action completes. You can add your own JavaScript to this event to perform additional tasks, such as populating controls in the UX Component or alerting the user. This event is available for the "Refresh Data Item(s)", "Read Data", "Delete Data Cache Item(s)", and "List Files in Data Cache"  actions.</description>
                </case>
                <case>
                    <title nested="2">onFail</title>
                    <description>The onFail event is triggered when the Ajax callback fails to return a response. You can add your own JavaScript to this event to handle the error. This event is available for the "Refresh Data Item(s)", "Read Data", "Delete Data Cache Item(s)", and "List Files in Data Cache" actions.</description>
                </case>
                <case>
                    <title nested="2">onDeviceOffline</title>
                    <description>The onDeviceOffline event is triggered when an Ajax callback needs to be made to retrieve a data item that has not been downloaded to the device yet and the device is offline. JavaScript can be added to this event to handle the case when data cannot be downloaded from the server because the device is offline. This event is available for the "Refresh Data Item(s)", "Read Data" action(s).</description>
                </case>
                <case>
                    <title nested="2">onServerNotAvailable</title>
                    <description>The onServerNotAvailable event is triggered when an Ajax callback is made to server but the server is not available. JavaScript can be added to this event to handle the case when data cannot be downloaded from the server because the server is not available. This event is available for the "Refresh Data Item(s)", "Read Data" action(s).</description>
                </case>
            </cases>
        </section>
    </sections>
    <limitations>UX Component Only</limitations>
    <see>
        <ref link="action javascript for the ux">Action Javascript for the UX</ref>
    </see>
</page>