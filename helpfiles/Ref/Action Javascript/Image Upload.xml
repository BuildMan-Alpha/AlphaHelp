<page>
    <shortlink>Image Upload</shortlink>
    <topic>Image Upload</topic>
    <description>Upload an image file to the server.</description>
    <sections>
        <section>
            <description>Used with the Grid and UX components. First it is necessary to add an image to the component.</description>
        </section>
        <section>
            <title>Application type</title>
        <list>
            <item>
                <name>Application type</name>
                <description>Specify where the application will be running.</description>
            </item>
            
        </list>
        
        </section>
        <section>
            <title>Mobile Settings</title>
            <list>
                <item>
                    <name>Cordova/PhoneGap or HTML5</name>
                    <description>Specify if the mobile app is running in a native shell (where Cordova is available), 
                        or is running in a browser (where only HTML5 upload) is available.
                    </description>
                </item>
                
                
            </list>
            
        </section>
           <section>
            <title>HTML5 Image Capture Settings</title>
            <list>
                <item>
                    <name>Resize and compress image before upload?</name>
                    <description>Native image files are quite large and should be compressed prior to uploaded.</description>
                </item>
                <item>
                    <name>Compression folder</name>
                    <description>Valid compression factors are from 0.1 to 1.0, with 1.0 being minimal compression.</description>
                </item>
                <item>
                    <name>Image Max Width</name>
                    <description>Maximum image width of uploaded image, aspect ratio will be maintained. This value is optional. The 
                        default is 1024.
                    </description>
                </item>
                <item>
                    <name>Image Max Height</name>
                    <description>Maximum image height of uploaded image, aspect ratio will be maintained. This value is optional.</description>
                </item>
                
                
            </list>
            
        </section>
          <section>
            <title>Cordova / PhoneGap Settings</title>
            <list>
                <item>
                    <name>Using PhoneGap Build</name>
                    <description>If you intend to use the integrated PhoneGap App Builder genie with PhoneGap Build, 
                        make sure to enable this property.
                    </description>
                </item>
                <item>
                    <name>Cordova picture source</name>
                    <description>Picture source can be Photo library or Camera.</description>
                </item>
                <item>
                    <name>Image quality</name>
                    <description>Determines compression factor, a number from 1 to 100 is valid. 50 is recommended 
                        due to memory constraints.
                    </description>
                </item>
                <item>
                    <name>Allow editing</name>
                    <description>Allows the user to zoom and crop the image prior to final image selection.</description>
                </item>
                <item>
                    <name>Image width</name>
                    <description>Saved image width, optional. The default is 1024.</description>
                </item>
                <item>
                    <name>Image height</name>
                    <description>Saved image height, optional. The default is 1024.</description>
                </item>
                <item>
                    <name>Save picture to photo album</name>
                    <description>When enabled, the image is saved to the device's photo library.</description>
                </item>
                
                
            </list>
            
            
        </section>
        
        
        
        
        
        
          <section>
            <title>Image File Upload</title>
        <list>
            <item>
                <name>Image field</name>
                <description>Specify the name of the field in the component that will display the uploaded image.</description>
            </item>
             <item>
                <name>Scale image</name>
                <description>You can optionally scale the image before it is saved on the server, or embedded in a component field.</description>
            </item>
             <item>
                <name>Allowed image filename extensions</name>
                <description>Specify a comma delimited list of allowed filename extensions. If the user uploads 
                    a file that does not match an allowed extension, the operation is aborted.
                </description>
            </item>
             <item>
                <name>Invalid extension error message</name>
                <description>The message to display when the selected file is not an allowed file type.</description>
            </item>
             <item>
                <name>Upload target</name>
                <description>Specify if the image should be uploaded to the Alpha Anywhere server, or to a cloud storage provider (e.g. Amazon S3). </description>
            </item>
             <item>
                <name>Upload folder</name>
                <description>Specify the name of the folder where the uploaded image file will be stored. 
                    You can use aliases in the name. If you enter a folder without a drive letter, the folder 
                    is assumed to be in the webroot. Important: The folder that you specify here is a folder on the machine 
                    where your Application Server is running, not a folder on this machine. VERY IMPORTANT: If you have 
                    the Security Framework turned on and the upload folder is in the webroot, be sure to set the appropriate 
                    permissions for this upload folder and the files that it contains. You can use a session variable to specify 
                    the uploaded folder.
                </description>
            </item>
             <item>
                <name>File exists action</name>
                <description>If the file that was uploaded already exists in the Upload folder, what action should be taken. 
                    You can either overwrite the existing file, or rename the uploaded file.
                </description>
            </item>
             <item>
                <name>Embedded Image format</name>
                <description>Specify the image format to use for the embedded image. All embedded images must be stored 
                    in the same format. So, for example, if the user uploads a .bmp image and the Embedded Image Format is 
                    JPG, the image will be converted to JPG before it is stored in the database.
                </description>
            </item>
             <item>
                <name>Stored filename transformation expression</name>
                <description>Specify what value to store in the image field. This is typically some transformation of the 
                    uploaded image filename. If you leave this blank, the fully qualified filename is stored in the image 
                    field.
                </description>
            </item>
             <item>
                <name>On Stored filename compute Xbasic function</name>
                <description>(Optional) If you want complete control over the filename of the uploaded image, you can 
                    call an Xbasic function to compute the filename.
                </description>
            </item>
             <item>
                <name>Maximum file size</name>
                <description>Specify the maximum file size that can be uploaded. Specify value in bytes. Specify 0 if you do not want to restrict 
                    the size of the file that can be uploaded. IMPORTANT: Regardless of this setting, the server also specifies 
                    a maximum POST body size. The lower of this setting and your setting for this property will apply.
                </description>
            </item>
             <item>
                <name>Maximum file size exceeded message</name>
                <description>Specify the message to display to the user if the uploaded file exceeds the maximum allowed file size.</description>
            </item>
             <item>
                <name>Create image thumbnails</name>
                <description>Specify if the image thumbnails should be created from the uploaded image? You can create 
                    multiple thumbnails in different sizes.
                </description>
            </item>
             <item>
                <name>Show progress/ allow cancel</name>
                <description>On certain browsers it is possible to show progress while files are being uploaded and to allow the user to cancel the operation. 
                    IE9 and earlier does not support this feature.
                </description>
            </item>
             <item>
                <name>Abort upload button label</name>
                <description>Specify the text for the Abort button. This button allows a user to stop an upload before it has completed.</description>
            </item>
             <item>
                <name>Abort upload message</name>
                <description>Specify the message to show if the user aborts an upload.</description>
            </item>
             <item>
                <name>Progress bar type</name>
                <description>Specify the type of progress bar. The 'A5' bar uses a specially styled progress bar that blends 
                    well with the selected component style. If you are using certain styles (e.g. GrBlue, GrOlive, etc.) you 
                    may want to switch to the 'Basic' style.
                </description>
            </item>
         
            
        </list>
        
        </section>
          <section>
            <title>Customization - File Select Window</title>
        <list>
            <item>
                <name>Window title</name>
                <description>Specify the title of the File Select dialog window.</description>
            </item>
             <item>
                <name>Window position</name>
                <description>Specify where the window will be shown.</description>
            </item>
             <item>
                <name>Sub-theme</name>
                <description>Specify the window sub-theme</description>
            </item>
             <item>
                <name>Auto upload</name>
                <description>Specify if the should be uploaded as soon as the user has selected the file to upload. 
                    Alternatively, the upload will only start once the user has clicked on the 'Upload' button.
                </description>
            </item>
             <item>
                <name>Working message</name>
                <description>Specify the working message to display while the file is being uploaded to the server.</description>
            </item>
             <item>
                <name>Upload button</name>
                <description>Specify the button text for the 'Upload' button.</description>
            </item>
             <item>
                <name>Watermark</name>
                <description>Specify the watermark text that appears in the file box. If you use a language 
                    tag for the text, be sure that the language definition returns a URL encoded value. See 
                    hyperlink below for more help.
                </description>
            </item>
             <item>
                <name>File select button image</name>
                <description>Select the image that appears on the button to open the file select window.</description>
            </item>
             <item>
                <name>Prompt</name>
                <description>Specify the text for the prompt that appears above the file box. If you use a language tag for the text, be sure that the language 
                    definition returns a URL encoded value. See hyperlink below for help.
                </description>
            </item>
             <item>
                <name>Window height</name>
                <description>Specify the height for the pop-up File Select window.</description>
            </item>
             <item>
                <name>Window width</name>
                <description>Specify the width for the pop-up File Select window.</description>
            </item>
             <item>
                <name>Cancel button label</name>
                <description>Specify the label for the Cancel button. Before the image is uploaded, this 
                    button closes the dialog. If a confirmation dialog is shown after the image is uploaded, 
                    this button aborts the action and does not save the uploaded image to the database.
                </description>
            </item>
            
            
        </list>
        
        </section>
          <section>
            <title>Customized Error Messages</title>
        <list>
            <item>
                <name>Table not updateable</name>
                <description>Specify the message to show if the table is not updateable because the logged in user 
                    does not have permission to update this table.
                </description>
            </item>
             <item>
                <name>Field not updateable</name>
                <description>Specify the message to show if the field is not updateable because the logged in user does not have permission to update this field.</description>
            </item>
             <item>
                <name>Session expired</name>
                <description>Specify the message to show if the session has expired. This error could occur if the 'Close File Select window after upload' 
                    property is false, the user uploads an image, but then does not click the 'OK' to save button immediately.
                </description>
            </item>
  
        </list>
        
        </section>
          <section>
            <title>Server-side Events</title>
        <list>
            <item>
                <name>Before save</name>
                <description>Specify the name of the Xbasic function to call after the file has been uploaded, but before 
                    it has been saved into the target field in the component. You can use this function to execute code that checks 
                    if the binary data that was uploaded is a valid image, or you might want to call a function 
                    that scales the image before it is saved to the database. This Xbasic function must be defined in the 'Xbasic 
                    functions declarations' section. This function can optionally abort the action.
                </description>
            </item>
            
        </list>
        
        </section>
          <section>
            <title>Client-side Events</title>
        <list>
            <item>
                <name>Before upload</name>
                <description>Specify the name of the Javascript function to call before the file upload window is shown. 
                    If this function returns false, the upload is aborted.
                </description>
            </item>
            <item>
                <name>After upload</name>
                <description>Specify the name of the Javascript function to call after the file has been successfully uploaded.</description>
            </item>
            <item>
                <name></name>
                <description></description>
            </item>
            
        </list>
        
        </section>
        <section>
            <title>Thumbnails</title>
            <description>The Action Javascript builder has an option in the Thumbnail Definition Builder that allows you to specify if the thumbnail file that is created should overwrite an existing file, or be renamed, so as not to conflict with existing files.</description>
        </section>
        <section>
            <description>When you define how thumbnails are to be created, you can specify if the thumbnail is to be stored as a file on disk, or as binary data in a record. In the case where you specify a file on disk, the builder allows you to specify a 'suffix' that is automatically added to the filename. For example if the suffix is 'thumb1', then the file on disk might called 'image_thumb1.jpg'. However, there may be situations where you don't want the suffix. If you set the suffix to a blank value, the file on disk has no suffix at all (e.g. 'image.jpg').</description>
            <note>Prior to Alpha Five Version 12, setting the suffix to a blank value would result in the file on disk being created as 'image_.jpg'.</note>
        </section>
        <section>
            <description>Of course, if you set the suffix to a blank value, the upload folder for the thumbnails needs to be different than the upload folder for the main image you are uploading, or else when the thumbnail is created, it will overwrite the main image.</description>
        </section>
        <section>
            <title>Filename for Uploaded File</title>
            <description>
                <p>When you upload an image or a file to a target character field (rather than a binary field), the uploaded file is saved in a file in the UploadFolder (defined in the builder) and the filename of the file is saved in the target character field. The filename is derived from the filename of the file on the client machine.</p>
                <p>A property in the builder allows you to define an Xbasic function in which you can compute the filename to use for the uploaded file.</p>
                <p> As shown in the screenshot below, the new 'OnStoredFilename Compute Xbasic Function' property allows you to define the name of an Xbasic function. The Xbasic function exposes the 'e' object which has these properties:</p>
            </description>
            <list>
                <item>
                    <name-title>Property</name-title>
                    <description-title>Description</description-title>
                </item>
                <item>
                    <name>e.targetFileName</name>
                    <description>the filename for the uploaded file (computed based on the setting for the UploadFolder and the name of the file on the client machine</description>
                </item>
                <item>
                    <name>e.imageBinaryData</name>
                    <description>binary data that was uploaded</description>
                </item>
            </list>
        </section>
        <section>
            <description>You Xbasic function can change the value in the e.targetFileName property. If you do change this value, the uploaded flle will be stored in the filename specified by the new value in e.targetFileName</description>
            <important>The transformation expression (defined in Action Javascript at design time) will be applied to whatever value is in e.targetFilename. So, if your event handler changes the value in e.targetFilename, the transformation expression is applied to this new value.</important>
        </section>
        <section>
            <description>Your code can optionally set a value for e.storedValue property in the e object. If you set the e.storedValue property, this value will be stored in the target field in the record (and the transformation expression will be ignored).</description>
            <figure>
                <link>images/storedfilenamecompute.jpg</link>
            </figure>
        </section>

        <section>
            <title>File Rename</title>
            <description>When you upload images or files and store the uploaded images or files in a filename on a server, there is an option to rename the file if there is an existing file with the same name on the server. Here is how the algorithm that computes the filename in the case of a conflict works. If a filed called "c:\myimages\image1.jpg" exists and you want to create a new file called 'image1.jpg', the new file will be called "c:\myimages\myimage1_1.jpg".</description>
        </section>
        <section>
            <title>Xbasic Event Handlers - Control Values</title>
            <description>In a UX component, when the server-side Xbasic events defined in the Action Javascript builder fire, the control values for all of the controls on the UX are available to the Xbasic code. For example, assume that the UX had a control called 'FIELD1'. In the Xbasic event handlers, you can reference this value as follows</description>
            <example><![CDATA[request.variables.v.r1.field1]]></example>
        </section>
        <section>
            <title>Image Upload in a UX Component</title>
            <description>
                <p>You can upload to an Image control on the component that is, or is not, data bound.</p>
                <p>If you upload to a 'data bound' image, then when you submit the UX component, the image field in the table is updated. Watch the video below to learn more.</p>
            </description>
            <videos>
                <video>
                    <name>Watch Video</name>
                    <link>http://www.ajaxvideotutorials.com/V12Videos/UX_ImageUpload.swf</link>
                </video>
            </videos>
        </section>
        <section>
            <description>
                <p>If you upload to a 'non-data-bound' image control, then when you submit the UX component, your event handler can choose what to do with the uploaded image. Watch the videos below to learn more.</p>
            </description>
            <videos>
                <video>
                    <name>Watch Video - Part 1</name>
                    <link>http://www.ajaxvideotutorials.com/V12Videos/UXComponent_UploadingImagesToNonDataBoundControls.swf</link>
                </video>
                <video>
                    <name>Watch Video - Part 2</name>
                    <link>http://www.ajaxvideotutorials.com/V12Videos/UXComponent_UploadingImagesToNonDataBoundControls_part2.swf</link>
                </video>
            </videos>
        </section>
        <section>
            <description>
                <p>In the case where you upload an image to a non-data bound image control, the afterDialogValidate event needs to load the image from its saved location and store the image in its final destination on the server - either on disk or in a database.</p>
                <p>The code example below demonstrates how to get the uploaded image. This example assumes the image was uploaded for an Image control called 'MYIMAGE':</p>
            </description>
            <example><![CDATA[dim blobKey as c
'Every image control has an associated control with a '_hiddena5fn' name.
'After the image has been uploaded, it is stored in temporary session storage
'The 'key' for the data in session storage is stored in this hidden field.

blobKey = e.dataSubmitted.myimage_hiddena5fn
blobKey = word(blobKey,1,":")

dim blobUploaded as b
Session.GetDataFromFile(blobUploaded,blobKey)
Session.DeleteSessionFile(blobKey)

'You now have the uploaded image data in a variable called 'blobUploaded'
'Your event handler can process this data.]]></example>
        </section>
        <section>
            <description>
                <p>You can also upload images to image controls in Repeating Sections. Watch the video below to learn more.</p>
            </description>
            <videos>
                <video>
                    <name>Watch Video</name>
                    <link>http://www.ajaxvideotutorials.com/V12Videos/UXComponent_DataBoundImagesInRepeatingSection.swf</link>
                </video>
            </videos>
        </section>
    </sections>
    
    
     <see>
   <ref link="action javascript for the ux">Action Javascript for the UX</ref>
 
   </see>
   
   
</page>