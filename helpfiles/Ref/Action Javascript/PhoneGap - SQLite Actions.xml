<page>
    <shortlink>PhoneGap - SQLite Actions</shortlink>
    <topic>PhoneGap - SQLite Actions</topic>
    <description>Performs actions with the SQLite database on the device. Also allows you to download a SQLite database from the server to the mobile device and       create a SQLite database on the server and download it to the device.   </description>
    <sections>
        <section>
            <description>Used with the UX component.</description>
        </section>
        <section>
            <title>SQLite Action Properties</title>
            <list>
                <item>
                    <name>Action name</name>
                    <description>Specify the SQLite Action that you want to execute. Actions are listed below.</description>
                </item>
            </list>
        </section>
        <section>
            <title nested="2">Available SQLite Actions</title>
            <cases>
                <case>
                    <title nested="3">Download SQL Database from Server</title>
                    <description>Download a SQLite database file from a server and store it on a mobile device.</description>
                </case>
                <case>
                    <title nested="3">Create SQLite Database on Server then Download to Device</title>
                    <description>Download a SQLite database from a server and store it on a mobile device. The SQLite database is created by executing on or more queries to retrieve the data which is then imported into a SQLite database. The resulting database is downloaded to the device.</description>
                </case>
                <case>
                    <title nested="3">Execute SQL statement(s)</title>
                    <description>Execute one or more SQL statements on a SQLite database. You can either execute a single statement or pass in an array of SQL statements to execute. If you pass in an array of SQL statements, the statements are executed as a single transaction.</description>
                </case>
                <case>
                    <title>Get Tables in a Database</title>
                    <description>Get a list of tables in a SQLite database.</description>
                </case>
                <case>
                    <title nested="3">Get Fields in a Table</title>
                    <description>This action will get the fields in a table as well as some additional information. The onSuccess event handler gets an array of objects. The array has an entry for each field in the table. Each object in the array has these properties:</description>
                    <list>
                        <item>
                            <name-title>Object Property</name-title>
                            <description-title>Description</description-title>
                        </item>
                        <item>
                            <name>cid</name>
                            <description>column id (e.g. 0, 1, 2, 3, etc.)</description>
                        </item>
                        <item>
                            <name>name</name>
                            <description>field name</description>
                        </item>
                        <item>
                            <name>type</name>
                            <description>data type (e.g. TEXT, INTEGER, NUMBER, etc.)</description>
                        </item>
                        <item>
                            <name>nonnull</name>
                            <description>0 or 1 - indicates if the column is nullable</description>
                        </item>
                        <item>
                            <name>dflt_value</name>
                            <description>default value</description>
                        </item>
                        <item>
                            <name>pk</name>
                            <description>0 or 1 - indicates if the column is a primary key column</description>
                        </item>
                    </list>
                </case>
                <case>
                    <title nested="3">Delete a Database</title>
                    <description>Deletes the physical file for the SQLite database from the device.</description>
                </case>
                <case>
                    <title nested="3">Create a Table</title>
                    <description>Allows you to create a new table in a SQLite database. You can define the table structure and also the indices for the table. The image below shows the builder where you specify the table structure. The action will automatically drop any existing table with the same name.</description>
                    <figure>
                        <link>images/sqlitecreatetable.jpg</link>
                    </figure>
                </case>
                <case>
                    <title nested="3">Create a Table from Data</title>
                    <description>This action will create a new table from data (i.e. it will import data into a new table). The data from which the table is created is a JSON array of objects where each object represents a record. For example, if you specify the following data:</description>
                    <example code="json"><![CDATA[[
    {"id" : 1, "FirstName": "Bob", "LastName": "Smith", "Department" : "Sales"},
    {"id" : 2, "FirstName": "Terry", "LastName": "Jones", "Department" : "R&D"},
]]]></example>
                </case>
                <case>
                    <description>A new table with 2 records would be created. The fields in the table would be id, FirstName, LastName and Department and the type of each field (except the id field) would be TEXT. The type of the id field would be INTEGER.</description>
                    <note>SQLite does not have Date or DateTime fields. Date and time values should be stored in TEXT fields and should appear in the data to be imported as string values.</note>
                </case>
                <case>
                    <description>When you specify the data from which the new table is to be created you have the following options:</description>
                    <list bullet="true">
                        <item>
                            <name>Specify the data directly.</name>
                        </item>
                        <item>
                            <name>Specify the name of a Javascript function that will return the data. e.g set the data to *[ui:Javascript:myfunctionname]* where *[js:myfunctionname]* is the name of a Javascript function that will return the data array.</name>
                        </item>
                        <item>
                            <name>Make an Ajax callback to the server and compute the data on server.</name>
                        </item>
                    </list>
                </case>
                <case>
                    <description>When you specify that the data are to be computed by an Ajax callback you have two options:</description>
                    <list>
                        <item>
                            <name-title>Option</name-title>
                            <description-title>Description</description-title>
                        </item>
                        <item>
                            <name>SQL Query</name>
                            <description>Specify a SQL query that will return the data.</description>
                        </item>
                        <item>
                            <name>Custom </name>
                            <description>Specify the name of an Xbasic function. This function will return the data as a JSON string.</description>
                        </item>
                    </list>
                </case>
                <case>
                    <description>
                        <p>You can specify if a table already exists with the table name you specify that the existing table should be dropped. If you do not drop the existing table, the operation will fail.</p>
                        <p>You can also specify a *[ui:batch size]* property. After the new table has been created (with no records in it initially), INSERT statements are executed to insert the data into the table. You can specify how many records should be inserted with each INSERT statement. The default *[ui:batch size]* is 100, which means that each INSERT statement will insert up to 100 records into the table. If you set the *[ui:batch size]* to -1, Alpha Anywhere will try to add the data to the table with a single INSERT statement. However, this may result in an INSERT statement that exceeds the maximum statement length supported by SQLite and the action will fail. If you set the *[ui:batch size]*  to 1, Alpha Anywhere will perform one INSERT statement for each row of data to be added to the table. If you have a large amount of data, this could be slow. Therefore, if you want to optimize performance of this action, you will want to choose the largest *[ui:batch size]* possible before the action fails.</p>
                        <p>If the action fails at any point while adding the records to the newly created table, the table is not created.</p>
                    </description>
                </case>
                <case>
                    <title nested="3">Import Data into a Table</title>
                    <description>This action is very similar to the Create a Table from Data action except that a new table is not created from the data. Instead, the data are imported into an existing table. All of the options for specifying the data that the Create a Table from Data action supports are supported by this action.</description>
                </case>
                <case>
                    <title nested="3">Delete Table</title>
                    <description>Delete a table.</description>
                </case>
                <case>
                    <title nested="3">Delete All Records from a Table</title>
                    <description>This action deletes all of the records in a table.</description>
                </case>
            </cases>
        </section>
        <section>
            <title>Download SQLite Database from Server Properties</title>
            <list>
                <item>
                    <name>Make Ajax callback to get SQLite database URL</name>
                    <description>Specify if you want to make an Ajax callback to the server to compute the URL of the SQLite database to be downloaded to the device.</description>
                </item>
                <item>
                    <name>Xbasic function name</name>
                    <description>Specify the name of the Xbasic function. Click the smart field to see help for the function. The Xbasic function must set specific properties in the 'e' object that is passed to it.</description>
                </item>
                <item>
                    <name>Ajax failed Javascript</name>
                    <description>(Optional) Specify the Javascript to execute if the Ajax callback fails (i.e. if the server does not send a response).</description>
                </item>
                <item>
                    <name>Offline Javascript</name>
                    <description>(Optional) Specify the Javascript to execute if the device is offline. Since the device is offline, the Ajax callback is not made. Therefore the code in the 'Ajax failed Javascript' property will not get executed.</description>
                </item>
                <item>
                    <name>SQLite database URL (Javascript)</name>
                    <description>Specify Javascript code to run to get the URL of the SQLite database file. If you do not specify a protocol (e.g. 'http' or 'https') the SQLite database is assumed to be in the Webroot (e.g. 'sqlite\db1.db').</description>
                </item>
                <item>
                    <name>Local database name</name>
                    <description>Specify the name of the database on the mobile device. This can be different than the name of the database file you are downloading.</description>
                </item>
                <item>
                    <name>onComplete Javascript</name>
                    <description>Specify the Javascript to run once the database has been downloaded.</description>
                </item>
                <item>
                    <name>onError Javascript</name>
                    <description>Specify the Javascript to run if there is an error downloading the database.</description>
                </item>
                <item>
                    <name>Display progress during download</name>
                    <description>Specify if progress should be shown while the SQLite database is being downloaded.</description>
                </item>
                <item>
                    <name>Progress bar color</name>
                    <description>Specify the progress bar color.</description>
                </item>
                <item>
                    <name>Progress bar width</name>
                    <description>Specify the progress bar width. Use CSS units.</description>
                </item>
                <item>
                    <name>Placeholder for progress indicator</name>
                    <description>Specify the name of a Placeholder control where the progress indicator should be shown. TIP: You can enter 'Element:name_of_element' to target a specific element on the page rather than a Placeholder. For example: Element:div1</description>
                </item>
            </list>
        </section>
        <section>
            <title>Create SQLite Database on Server then Download to Device Properties</title>
            <list>
                <item>
                    <name>SQLite Database name</name>
                    <description>Specify the name of the SQLite database</description>
                </item>
                <item>
                    <name>SQLite Database definition</name>
                    <description>SQLite Database definition property.</description>
                </item>
                <item>
                    <name>onComplete Javascript</name>
                    <description>Specify the Javascript to run once the database has been downloaded.</description>
                </item>
                <item>
                    <name>onError Javascript</name>
                    <description>Specify the Javascript to run if there is an error downloading the database.</description>
                </item>
                <item>
                    <name>Display progress during download</name>
                    <description>Specify if progress should be shown while the SQLite database is being downloaded.</description>
                </item>
                <item>
                    <name>Progress bar color</name>
                    <description>Specify the progress bar color.</description>
                </item>
                <item>
                    <name>Progress bar width</name>
                    <description>Specify the progress bar width. Use CSS units.</description>
                </item>
                <item>
                    <name>Placeholder for progress indicator</name>
                    <description>Specify the name of a Placeholder control where the progress indicator should be shown. TIP: You can enter 'Element:name_of_element' to target a specific element on the page rather than a Placeholder. For example: Element:div1</description>
                </item>
                <item>
                    <name>Offline Javascript</name>
                    <description>(Optional) Specify the Javascript to execute if the device is offline. Since the device is offline, the Ajax callback is not made. Therefore the code in the 'Ajax failed Javascript' property will not get executed.</description>
                </item>
                <item>
                    <name>Ajax failed Javascript</name>
                    <description>(Optional) Specify the Javascript to execute if the Ajax callback fails (i.e. if the server does not send a response).</description>
                </item>
                <item>
                    <name>onComplete Database Create</name>
                    <description>Specify the Javascript to execute once the new SQLite database on the server has been created, but BEFORE the mobile device starts to download the SQLite database file. This event is typically used to turn off the wait dialog that might have been turned on at the start of the callback. Once the database has been created and the download starts, the user can see the progress bar for an indication that work is still being done.</description>
                </item>
            </list>
        </section>
        <section>
            <title>Execute SQL statement(s) Properties</title>
            <list>
                <item>
                    <name>SQLite database name</name>
                    <description>Specify the name of the SQLite database that you want to execute SQL statements against.</description>
                </item>
                <item>
                    <name>Database location</name>
                    <description>'Root' - choose this option if the SQLite database was included as part of the PhoneGap project. 'Downloaded' - choose this option if the SQLite database was downloaded from a server. Choices include *[ui:Root]*, *[ui:Downloaded]*.</description>
                </item>
                <item>
                    <name>Single SQL statement or multiple SQL statements</name>
                    <description>Specify if you want to execute a single SQL statement or multiple SQL statements. If you select 'Multiple', the statements are run in a transaction - if any of the statements fail, the transaction is rolled back. Choices include *[ui:Single]*, *[ui:Multiple]*.</description>
                </item>
                <item>
                    <name>SQL statement to execute</name>
                    <description>Specify the SQL statement to execute. Your Javascript must return the SQL statement.</description>
                </item>
                <item>
                    <name>Arguments</name>
                    <description>Specify the SQL statement to execute. Your Javascript must return the SQL statement.</description>
                </item>
                <item>
                    <name>onSuccess</name>
                    <description>Specify the SQL statement to execute. Your Javascript must return the SQL statement.</description>
                </item>
                <item>
                    <name>onError</name>
                    <description>Specify the SQL statement to execute. Your Javascript must return the SQL statement.</description>
                </item>
                <item>
                    <name>SQL definition Javascript</name>
                    <description>Specify the SQL statements to execute. The statements will be run in a transaction.</description>
                </item>
                <item>
                    <name>Transaction success</name>
                    <description>Specify the SQL statements to execute. The statements will be run in a transaction.</description>
                </item>
                <item>
                    <name>Transaction error</name>
                    <description>Specify the SQL statements to execute. The statements will be run in a transaction.</description>
                </item>
            </list>
        </section>
        <section>
            <title>Get Tables in a Database Properties</title>
            <list>
                <item>
                    <name>Database name</name>
                    <description>Specify the SQLite database that you want to query.</description>
                </item>
                <item>
                    <name>Database location</name>
                    <description>'Root' - choose this option if the SQLite database was included as part of the PhoneGap project. 'Downloaded' - choose this option if the SQLite database was downloaded from a server. Choices include *[ui:Root]*, *[ui:Downloaded]*.</description>
                </item>
                <item>
                    <name>onSuccess</name>
                    <description>Code to execute when the list of tables in the database has been obtained.</description>
                </item>
                <item>
                    <name>onError</name>
                    <description>Code to execute if there is an error when getting list of tables.</description>
                </item>
            </list>
        </section>
        <section>
            <title>Get Fields in a Table Properties</title>
            <list>
                <item>
                    <name>Database name</name>
                    <description>Specify the SQLite database that you want to query.</description>
                </item>
                <item>
                    <name>Database location</name>
                    <description>'Root' - choose this option if the SQLite database was included as part of the PhoneGap project. 'Downloaded' - choose this option if the SQLite database was downloaded from a server. Choices include *[ui:Root]*, *[ui:Downloaded]*.</description>
                </item>
                <item>
                    <name>Table name</name>
                    <description>Specify the name of the table</description>
                </item>
                <item>
                    <name>onSuccess</name>
                    <description>Code to execute when the list of tables in the database has been obtained.</description>
                </item>
                <item>
                    <name>onError</name>
                    <description>Code to execute if there is an error when getting list of tables.</description>
                </item>
            </list>
        </section>
        <section>
            <title>Delete a Database Properties</title>
            <list>
                <item>
                    <name>Database name</name>
                    <description>Specify the SQLite database that you want to query.</description>
                </item>
                <item>
                    <name>onSuccess</name>
                    <description>Code to execute when the list of tables in the database has been obtained.</description>
                </item>
                <item>
                    <name>onError</name>
                    <description>Code to execute if there is an error when getting list of tables.</description>
                </item>
            </list>
        </section>
        <section>
            <title>Create a Table Properties</title>
            <list>
                <item>
                    <name>SQLite database name</name>
                    <description>Specify the name of the SQLite database in which to create the new table.</description>
                </item>
                <item>
                    <name>Database location</name>
                    <description>'Root' - choose this option if the SQLite database was included as part of the PhoneGap project. 'Downloaded' - choose this option if the SQLite database was downloaded from a server. Choices include *[ui:Root]*, *[ui:Downloaded]*.</description>
                </item>
                <item>
                    <name>Table definition</name>
                    <description>Define the table structure</description>
                </item>
                <item>
                    <name>onSuccess</name>
                    <description>Specify the Javascript to run if the SQL is executed without error.</description>
                </item>
                <item>
                    <name>onError</name>
                    <description>Specify the Javascript to run if there is an error while executing the SQL.</description>
                </item>
            </list>
        </section>
        <section>
            <title>Create a Table From Data Properties</title>
            <list>
                <item>
                    <name>SQLite database name</name>
                    <description>Specify the name of the SQLite database in which to create the new table.</description>
                </item>
                <item>
                    <name>Database location</name>
                    <description>'Root' - choose this option if the SQLite database was included as part of the PhoneGap project. 'Downloaded' - choose this option if the SQLite database was downloaded from a server. Choices include *[ui:Root]*, *[ui:Downloaded]*.</description>
                </item>
                <item>
                    <name>Table name</name>
                    <description>Specify the name of the table to create</description>
                </item>
                <item>
                    <name>Drop table if it exists</name>
                    <description>Specify if a table with the specified name already exists if it should be dropped before creating the new table. If you do not drop an existing table, the command to create a new table will fail.</description>
                </item>
                <item>
                    <name>Make Ajax callback to get data</name>
                    <description>Specify if an Ajax callback should be made to get the data from which the table will be created.</description>
                </item>
                <item>
                    <name>Data (from which table will be created)</name>
                    <description>Define the data from which the table will be created (data is a JSON array of objects). You can also specify the name of a Javascript function to return the data using t his syntax: javascript:yourfunctionname.</description>
                </item>
                <item>
                    <name>Batch size</name>
                    <description>Specify how many rows of data to insert with each INSERT statement. -1 indicates that all of the data will be inserted using a single INSERT statement. This many fail if too many records are being inserted. In that case, use a batch size of 100 to insert 100 records at a time.</description>
                </item>
                <item>
                    <name>onSuccess</name>
                    <description>Specify the Javascript to run if the SQL is executed without error.</description>
                </item>
                <item>
                    <name>onError</name>
                    <description>Specify the Javascript to run if there is an error while executing the SQL.</description>
                </item>
            </list>
        </section>
        <section>
            <title>Import Data Into a Table Properties</title>
            <list>
                <item>
                    <name>SQLite database name</name>
                    <description>Specify the name of the SQLite database that contains the table into which data will be imported.</description>
                </item>
                <item>
                    <name>Database location</name>
                    <description>'Root' - choose this option if the SQLite database was included as part of the PhoneGap project. 'Downloaded' - choose this option if the SQLite database was downloaded from a server. Choices include *[ui:Root]*, *[ui:Downloaded]*.</description>
                </item>
                <item>
                    <name>Table name</name>
                    <description>Specify the name of the table into which the data should be imported.</description>
                </item>
                <item>
                    <name>Make Ajax callback to get data</name>
                    <description>Specify if an Ajax callback should be made to get the data to import.</description>
                </item>
                <item>
                    <name>Data to import</name>
                    <description>Define the data to import (data is a JSON array of objects). IMPORTANT: The properties in the Json data must exactly match the fields in the SQLite table. You can also specify the name of a Javascript function to return the data using t his syntax: javascript:yourfunctionname.</description>
                </item>
                <item>
                    <name>Batch size</name>
                    <description>Specify how many rows of data to import with each INSERT statement. -1 indicates that all of the data will be inserted using a single INSERT statement. This many fail if too many records are being inserted. In that case, use a batch size of 100 to insert 100 records at a time.</description>
                </item>
                <item>
                    <name>onSuccess</name>
                    <description>Specify the Javascript to run if the SQL is executed without error.</description>
                </item>
                <item>
                    <name>onError</name>
                    <description>Specify the Javascript to run if there is an error while executing the SQL.</description>
                </item>
            </list>
        </section>
        <section>
            <title>Delete a Table Properties</title>
            <list>
                <item>
                    <name>SQLite database name</name>
                    <description>Specify the name of the SQLite database from which to delete a table.</description>
                </item>
                <item>
                    <name>Database location</name>
                    <description>'Root' - choose this option if the SQLite database was included as part of the PhoneGap project. 'Downloaded' - choose this option if the SQLite database was downloaded from a server. Choices include *[ui:Root]*, *[ui:Downloaded]*.</description>
                </item>
                <item>
                    <name>Table name</name>
                    <description>Specify the name of the table to delete</description>
                </item>
                <item>
                    <name>onSuccess</name>
                    <description>Specify the Javascript to run if the SQL is executed without error.</description>
                </item>
                <item>
                    <name>onError</name>
                    <description>Specify the Javascript to run if there is an error while executing the SQL.</description>
                </item>
            </list>
        </section>
        <section>
            <title>Delete All Records From a Table Properties</title>
            <list>
                <item>
                    <name>SQLite database name</name>
                    <description>Specify the name of the SQLite database that contains the table from which records are to be deleted.</description>
                </item>
                <item>
                    <name>Database location</name>
                    <description>'Root' - choose this option if the SQLite database was included as part of the PhoneGap project. 'Downloaded' - choose this option if the SQLite database was downloaded from a server. Choices include *[ui:Root]*, *[ui:Downloaded]*.</description>
                </item>
                <item>
                    <name>Table name</name>
                    <description>Specify the name of the table from which records are to be delete</description>
                </item>
                <item>
                    <name>onSuccess</name>
                    <description>Specify the Javascript to run if the SQL is executed without error.</description>
                </item>
                <item>
                    <name>onError</name>
                    <description>Specify the Javascript to run if there is an error while executing the SQL.</description>
                </item>
            </list>
        </section>
        <section>
            <title>Ajax Callback Definition Properties</title>
            <list>
                <item>
                    <name>Type</name>
                    <description>Specify if the data should be created by executing a SQL query, or by executing a custom Xbasic function. Choices include *[ui:SQL Query]*, *[ui:Custom]*.</description>
                </item>
            </list>
        </section>
        <section>
        <title>Custom Properties</title>
            <list>
                <item>
                    <name>Xbasic function name</name>
                    <description>Xbasic function name property.</description>
                </item>
            </list>
        </section>
        <section>
            <title>SQL Query Properties</title>
            <list>
                <item>
                    <name>Arguments</name>
                    <description>Define arguments. Arguments can be bound to page, session and cookie variables. Argument values are passed into all server-side Xbasic event handlers in the component. For 'array arguments' (for use in a SQL IN clause), the argument name must start with 'array_'.</description>
                </item>
                <item>
                    <name>Connection string</name>
                    <description>Connection string property.</description>
                </item>
                <item>
                    <name>Method for defining SQL query</name>
                    <description>Method for defining SQL query property.</description>
                </item>
                <item>
                    <name>Table name</name>
                    <description>Table name property.</description>
                </item>
                <item>
                    <name>Field list</name>
                    <description>Field list property.</description>
                </item>
                <item>
                    <name>Filter</name>
                    <description>Specify the filter expression. The filter expression can reference values in other controls on the Dialog. To do this, define one or more arguments, and then bind the argument value to a control value. For example, to bind the argument value to the value in the CustomerId control, set the argument value to {CustomerId}. Your filter can then reference the argument.</description>
                </item>
                <item>
                    <name>Order</name>
                    <description>Order property.</description>
                </item>
                <item>
                    <name>Distinct</name>
                    <description>Specify if you want unique records only.</description>
                </item>
                <item>
                    <name>Record limit</name>
                    <description>Specify the maximum number of records to be retrieved in the SQL query. -1 indicates no limit.</description>
                </item>
                <item>
                    <name>SQL Statement</name>
                    <description>Specify the SQL statement. You must use portable SQL syntax. If you need to use native SQL, you must use the 'Custom' data source option.</description>
                </item>
            </list>
        </section>
        <section>
            <title>Javascript (Ajax Callback) Properties</title>
            <list>
                <item>
                    <name>Ajax failed</name>
                    <description>(Optional) Specify the Javascript to execute if the Ajax callback fails (i.e. if the server does not send a response).</description>
                </item>
                <item>
                    <name>Device offline</name>
                    <description>(Optional) Specify the Javascript to execute if the device is offline. Since the device is offline, the Ajax callback is not made. Therefore the code in the 'Ajax failed Javascript' property will not get executed.</description>
                </item>
            </list>
        </section>
    </sections>
    <see>
        <ref>Action Javascript for the UX</ref>
    </see>
</page>