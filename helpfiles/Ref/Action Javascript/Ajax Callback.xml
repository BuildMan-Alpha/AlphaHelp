<page>
    <shortlink>Ajax Callback</shortlink>
    <topic>Ajax Callback</topic>
    <description>Define a user-defined ajax callback. The callback can be handled by an Xbasic function that is defined in the component, by a separate .a5w page, or by another page (.e.g., .php, .asp, etc.)</description>
    <sections>
        <section>
            <description>Used with the Grid and UX components</description>
        </section>
         <section>
            <title>Ajax Callback Properties</title>
            <list>
                <item>
                    <name>Submit data</name>
                    <description>Specify if data from the grid should be submitted to the server when the callback is made. 

IMPORTANT: Data from the current row are only submitted for fields that are editable. Primary key values, however, are submitted regardless of whether the current row is editable or not.</description>
                </item>
                <item>
                    <name>Submit part</name>
                    <description>Specify the part from which data should be submitted. Choices include.</description>
                </item>
                <item>
                    <name>Row number</name>
                    <description>Specify which row in the grid to submit data from. The {Grid.Rownumber} placeholder is used to indicate the 'current row' in the Grid. To submit data from ALL of the rows in the grid, set Row Number to: All. To specify a new record row, use a negative number. e.g. -1 for the first new record row, -2 for the second new record row, etc.</description>
                </item>
                <item>
                    <name>Callback type</name>
                    <description>Specify the callback type. The callback can be handled by a Xbasic function, or by a page referenced by a URL. The function can be defined in the Grid (see 'Xbasic function declarations' section of the Grid), or in an .AEX file. Choices include.</description>
                </item>
                <item>
                    <name>Function name</name>
                    <description>Specify the Xbasic function name (do NOT include '()' in the name. e.g. specify name as 'myFunction', not 'myFunction()' ). The Xbasic function prototype must be: function functionName as c (e as p). The function must return Javascript code that you want to execute on the client. The 'e' parameter that is passed into the function contains all of the data submitted to the server on the callback. TIP: Use the Firebug addin for Firefox to see what data is submitted on the callback.
 
TIP: Click 'Create function prototype' for an example of the required syntax for the function.</description>
                </item>
                <item>
                    <name>URL</name>
                    <description>Specify the URL of the page that will handle the callback.</description>
                </item>
                <item>
                    <name>Action name</name>
                    <description>A variable called '_action' is passed to the URL. The value of _action is set to Action Name.</description>
                </item>
            </list>
        </section>
        <section>
            <title>Advanced Properties</title>
            <list>
                <item>
                    <name>Additional data to submit</name>
                    <description><![CDATA[Specify any additional data that you want to submit to the server. This data must be in the form of a URL parameters string (i.e.  name/value pairs) and it must be enclosed in single quotes. For example '_var1=alpha&_var2=beta'

TIP: The 'Additional data' can be computed by a Javascript function call. For example, you might have defined a Javascript function called 'gatherInfo'. If you specify 'gatherInfo()' here (without single quotes), the value returned by this function will be included in the data sent back to the server as part of the Ajax callback.]]></description>
                </item>
                <item>
                    <name>Compute current row data</name>
                    <description>If the current row is not editable, and the 'Submit Data' property is checked, field values from the current row are not submitted. Only the primary key values for the current row are submitted. However, if you check this box, then the server will query the database to retrieve the field values for the current row and make these values available to your callback handler.(IMPORTANT: To use this option in a read-only Grid based on SQL tables, you must ensure that you have defined the Primary Key for each table.)</description>
                </item>
                <item>
                    <name>After callback complete Javascript</name>
                    <description>Specify any Javascript you want to execute when the callback is complete and all of the Javascript returned by the callback (if any) has executed.</description>
                </item>
            </list>
        </section>
        <section>
            <title>Location Data Properties</title>
            <list>
                <item>
                    <name>Submit location information</name>
                    <description>Specify if location information (longitude/latitude) should be submitted. The location information is obtained from the browser. The user will be prompted for permission to read location information. Not all browsers support retrieving location information. The 'e' object passed to the Xbasic function will contain these properties: __locationFound - true/false, __locationLatitude - the latitude value, __locationLongitude - the longitude value</description>
                </item>
                <item>
                    <name>High accuracy</name>
                    <description>If true, the device will use its most accurate method to get location information. If false, the device will use its fastest or lower power consumption method depending on the device.</description>
                </item>
                <item>
                    <name>Timeout</name>
                    <description>The amount of time in milliseconds to wait on the device to acquire location information excluding the amount of time it takes the user to grant the web page access to geolocation data.</description>
                </item>
                <item>
                    <name>Max age</name>
                    <description>The amount of time in milliseconds to accept a previously acquired location. 0 means that a new location must be acquired from the device.</description>
                </item>
            </list>
        </section>
        <section>
            <title>Ajax Failed/Offline Javascript Properties</title>
            <list>
                <item>
                    <name>Timeout setting</name>
                    <description><![CDATA[(Optional) Specify the time to wait (in milliseconds) for a response from the callback. If a response is not received within the specified time, the callback is considered to have failed and the 'onAjaxCallbackFailed' client-side event will be fired, and any Javascript defined in the optional 'Ajax failed Javascript' property will be executed. If you specify '<Default>' the global default value (defined in the {dialog.object}.ajaxCallbackTimeout property) will be used.]]></description>
                </item>
                <item>
                    <name>Ajax failed Javascript</name>
                    <description>(Optional) Specify the Javascript to execute if the Ajax callback fails (i.e. if the server does not send a response).</description>
                </item>
                <item>
                    <name>Offline Javascript</name>
                    <description>(Optional) Specify the Javascript to execute if the device is offline. Since the device is offline, the Ajax callback is not made. Therefore the code in the 'Ajax failed Javascript' property will not get executed.</description>
                </item>
            </list>
        </section>
        <section>
            <title>Using Action Javascript to Write an Ajax Callback Function</title>
            <description>The Ajax Callback Action Javascript can be used to generate the xbasic callback function that is called. The xbasic callback function can be saved in the component in the *[ui:Xbasic Functions]* section of the component builder. The action can be accessed anywhere the Action Javascript editor is available, including Javascript events for controls and [Javascript Actions].</description>
            <steps>
                <step>
                    <description>In the event editor with *[ui:Action Javascript]* mode selected, click the *[ui:Add]* button to add a new action.</description>
                    <figure>
                        <link>images/ajaxCallback1.png</link>
                    </figure>
                </step>
                <step>
                    <description>Select the *[ui:Ajax Callback]* action and click *[ui:OK]*.</description>
                    <figure>
                        <link>images/ajaxCallback2.png</link>
                    </figure>
                </step>
                <step>
                    <description>Define the name for the callback function that will be called. In the image below, a new function will be created that performs the callback called *[xb:MyCallback]*</description>
                    <figure>
                        <link>images/ajaxCallback3.png</link>
                    </figure>
                </step>
                <step>
                    <description>Define any additional (optional) data to submit to the callback function. Parameters sent to the callback function can be accessed through the *[xb:e]* object in the xbasic function.</description>
                    <figure>
                        <link>images/ajaxCallback4.png</link>
                    </figure>
                </step>
                <step>
                    <description>Click the *[ui:Create function prototype]* link to generate the function prototype for the Ajax callback.</description>
                    <figure>
                        <link>images/ajaxCallback5.png</link>
                    </figure>
                </step>
                <step>
                    <description>Click the *[ui:Copy to clipboard]* button to copy the function signature to the clipboard. When the code has been copied to the clipboard, click the *[ui:Close]* button to close the dialog.</description>
                    <figure>
                        <link>images/ajaxCallback6.png</link>
                    </figure>
                </step>
                <step>
                    <description>Click the *[ui:Open Xbasic Function Declarations]* link to open the Xbasic Function Declarations dialog. This is a shortcut to the Xbasic Functions section.</description>
                    <figure>
                        <link>images/ajaxCallback7.png</link>
                    </figure>
                </step>
                <step>
                    <description>Paste the code from the clipboard into the window and click *[ui:OK]*.</description>
                    <figure>
                        <link>images/ajaxCallback8.png</link>
                    </figure>
                </step>
                <step>
                    <description>Click *[ui:OK]* to save the Ajax Callback action.</description>
                </step>
                <step>
                    <description>Optionally, add a comment that describes the action when prompted. Then, click the *[ui:OK]* button.</description>
                    <figure>
                        <link>images/ajaxCallback9.png</link>
                    </figure>
                </step>
                <step>
                    <description>Click the *[ui:Save]* button to save the changes made to the event or Javascript Action.</description>
                    <figure>
                        <link>images/ajaxCallback10.png</link>
                    </figure>
                </step>
                <step>
                    <description>Navigate back to the component builder. Expand the *[ui:Code]* section in the far left column and click on *[ui:Xbasic functions]*. This is where you can make changes to the xbasic callback function you created using the Ajax Callback Action Javascript builder.</description>
                    <figure>
                        <link>images/ajaxCallback11.png</link>
                    </figure>
                </step>
            </steps>
        </section>
        <section>
            <title>Making Callbacks from Javascript</title>
            <description>It's best to use Action Javascript if it's available to add functionality to an application. If you would rather make a callback using Javascript, however, the *[js:.ajaxCallback()]* method for the Grid or UX Component is available. To learn more, visit the [Grid Component] or [UX Component] Client API documentation for the *[js:.ajaxCallback()]* method.</description>
        </section>
    </sections>
    <links>
        <link href="/documentation/index?search=javascript%20actions">Javascript Actions</link>
        <link href="/documentation/index?search=%7Bgrid.object%7D.ajaxcallback%20method">Grid Component</link>
        <link href="/documentation/index?search=%7Bdialog.object%7D.ajaxcallback%20method">UX Component</link>
    </links>
    <see>
        <ref href="/documentation/index?search=%7Bgrid.object%7D.ajaxcallback%20method">{grid.Object}.ajaxCallback Method</ref>
        <ref href="/documentation/index?search=%7Bdialog.object%7D.ajaxcallback%20method">{dialog.Object}.ajaxCallback Method</ref>
  
       <ref>Action Javascript for the UX</ref>
<ref>Action Javascript in the Grid</ref>
  
  
    </see>
</page>