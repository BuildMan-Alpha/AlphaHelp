<page build="0">
    <shortlink>Ajax Callback</shortlink>
    <topic>Ajax Callback</topic>
    <description>Define a user-defined ajax callback. The callback can be handled by an Xbasic function that is defined in the component, by a separate .a5w page, or by another page (.e.g., .php, .asp, etc.)</description>
    <discussion>
        <p>The Ajax Callback Action Javascript can be used to generate the Xbasic callback function that is called. The Xbasic callback function can be saved in the component in the *[ui:Xbasic Functions]* section of the component builder. The action can be accessed anywhere the Action Javascript editor is available, including Javascript events for controls and [Javascript Actions].</p>
    </discussion>
    <sections>
        <section>
            <title>Ajax Callback Properties</title>
            <list>
                <item>
                    <name>Submit data</name>
                    <description>
                        <p>Specify if data from the grid should be submitted to the server when the callback is made.</p>
                        <p>IMPORTANT: Data from the current row are only submitted for fields that are editable. Primary key values, however, are submitted regardless of whether the current row is editable or not.</p>

                    </description>
                </item>
                <item>
                    <name>Submit part</name>
                    <description>Specify the part from which data should be submitted. Choices include.</description>
                </item>
                <item>
                    <name>Row number</name>
                    <description>Specify which row in the grid to submit data from. The {Grid.Rownumber} placeholder is used to indicate the 'current row' in the Grid. To submit data from ALL of the rows in the grid, set Row Number to: All. To specify a new record row, use a negative number. e.g. -1 for the first new record row, -2 for the second new record row, etc.</description>
                </item>
                <item>
                    <name>Callback type</name>
                    <description>Specify the callback type. The callback can be handled by a Xbasic function, or by a page referenced by a URL. The function can be defined in the Grid (see 'Xbasic function declarations' section of the Grid), or in an .AEX file. Choices include.</description>
                </item>
                <item>
                    <name>Function name</name>
                    <description>
                        <p>Specify the Xbasic function name (do NOT include '()' in the name. e.g. specify name as 'myFunction', not 'myFunction()' ). The Xbasic function prototype must be: function functionName as c (e as p). The function must return Javascript code that you want to execute on the client. The 'e' parameter that is passed into the function contains all of the data submitted to the server on the callback. TIP: Use the Firebug add-in for Firefox to see what data is submitted on the callback.</p>
                        <p>TIP: Click 'Create function prototype' for an example of the required syntax for the function.</p>
                    </description>
                </item>
                <item>
                    <name>URL</name>
                    <description>Specify the URL of the page that will handle the callback.</description>
                </item>
                <item>
                    <name>Action name</name>
                    <description>A variable called '_action' is passed to the URL. The value of _action is set to Action Name.</description>
                </item>
            </list>
        </section>
        <section>
            <title>Advanced Properties</title>
            <list>
                <item>
                    <name>Additional data to submit</name>
                    <description>
                        <p>Specify any additional data that you want to submit to the server. This data must be in the form of a URL parameters string (i.e.  name/value pairs) and it must be enclosed in single quotes. For example '_var1=alpha&amp;_var2=beta'</p>
                        <p>TIP: The 'Additional data' can be computed by a Javascript function call. For example, you might have defined a Javascript function called 'gatherInfo'. If you specify 'gatherInfo()' here (without single quotes), the value returned by this function will be included in the data sent back to the server as part of the Ajax callback.</p>
                    </description>
                </item>
                <item>
                    <name>Compute current row data</name>
                    <description>
                        <p>If the current row is not editable, and the 'Submit Data' property is checked, field values from the current row are not submitted. Only the primary key values for the current row are submitted. However, if you check this box, then the server will query the database to retrieve the field values for the current row and make these values available to your callback handler.</p>
                        <p>IMPORTANT: To use this option in a read-only Grid based on SQL tables, you must ensure that you have defined the Primary Key for each table.</p>
                    </description>
                </item>
                <item>
                    <name>After callback complete Javascript</name>
                    <description>Specify any Javascript you want to execute when the callback is complete and all of the Javascript returned by the callback (if any) has executed.</description>
                </item>
            </list>
        </section>
        <section>
            <figure>
                <title>The 'After callback complete Javascript' property.</title>
                <link>images/ajcall.png</link>
            </figure>
        </section>
        <section>
            <title>A Note on the 'After callback complete Javascript' Property</title>
            <description>To specify the after callback complete Javascript in the UX or Grid's .ajaxCallback() method, you set the onComplete property in the optional optionsObject passed in. For example:</description>
            <example code="js"><![CDATA[{dialog.object}.ajaxCallback('','','myXbasicFunction','','',{onComplete: function() { 
        alert('callback is complete')
    }
})]]></example>

        </section>

        <section>
            <title>Location Data Properties</title>
            <list>
                <item>
                    <name>Submit location information</name>
                    <description>
                        <p>Specify if location information (longitude/latitude) should be submitted. The location information is obtained from the browser. The user will be prompted for permission to read location information. Not all browsers support retrieving location information.</p>
                        <p>The 'e' object passed to the Xbasic function will contain these properties:</p>
                        <p>
                            <list>
                                <item>
                                    <name>__locationFound</name>
                                    <description>true/false</description>
                                </item>
                                <item>
                                    <name>__locationLatitude</name>
                                    <description>the latitude value</description>
                                </item>
                                <item>
                                    <name>__locationLongitude</name>
                                    <description>the longitude value</description>
                                </item>
                            </list>
                        </p>
                    </description>
                </item>
                <item>
                    <name>High accuracy</name>
                    <description>If true, the device will use its most accurate method to get location information. If false, the device will use its fastest or lower power consumption method depending on the device.</description>
                </item>
                <item>
                    <name>Timeout</name>
                    <description>The amount of time in milliseconds to wait on the device to acquire location information excluding the amount of time it takes the user to grant the web page access to geolocation data.</description>
                </item>
                <item>
                    <name>Max age</name>
                    <description>The amount of time in milliseconds to accept a previously acquired location. 0 means that a new location must be acquired from the device.</description>
                </item>
            </list>
        </section>
        <section>
            <title>Ajax Failed/Offline Javascript Properties</title>
            <description>
                <p>If the Ajax Callback fails because the client's device is online, these properties can be used to do fall-back processing -- such as notify the user that no network connection is available and that they should try again when they're connected to the Internet.</p>
                <p>These properties are optional.</p>
            </description>
            <list>
                <item>
                    <name>Timeout setting</name>
                    <description>Specify the time to wait (in milliseconds) for a response from the callback. If a response is not received within the specified time, the callback is considered to have failed and the 'onAjaxCallbackFailed' client-side event will be fired, and any Javascript defined in the optional 'Ajax failed Javascript' property will be executed. If you specify '&lt;Default&gt;' the global default value (defined in the {dialog.object}.ajaxCallbackTimeout property) will be used.</description>
                </item>
                <item>
                    <name>Ajax failed Javascript</name>
                    <description>Specify the Javascript to execute if the Ajax callback fails (i.e. if the server does not send a response).</description>
                </item>
                <item>
                    <name>Offline Javascript</name>
                    <description>Specify the Javascript to execute if the device is offline. Since the device is offline, the Ajax callback is not made. Therefore the code in the 'Ajax failed Javascript' property will not get executed.</description>
                </item>
            </list>
        </section>
        <section build="5824">
            <title>Chunked Responses</title>
            <description>
                <p>When an Ajax Callback is made, the user will not receive a response until the callback completes -- or a timeout is reached and the client gives up waiting for a response. Long-running processes can have the appearance of a browser hang if the user is unaware that the action they've performed will take a while. In this situation, you may want to send periodic updates to the user notifying them that the process is still running.</p>
                <p>You can send intermediate responses from the Xbasic function to the client by enabling "Chunked Responses". A "Chunked Response" is a message sent from the Ajax Callback function to the client while the function continues to execute.</p>
                <p>To enable chunked responses from your Ajax Callback, check the *[ui:Allow chunked responses]* property.</p>
            </description>
            <figure>
                <link>images/chunkedResponses.png</link>
            </figure>
        </section>
        <section>
            <important>
                <p>In order to use chunked responses on IIS or Alpha Cloud, you must enable *[ui:JIT Sessions]*. On Alpha Cloud, the JIT Sessions option is available in the Deployment dialog.</p>
            </important>
        </section>
        <section>
            <description>
                <p>Enabling *[ui:Allow chunked responses]* exposes the following properties:</p>
                <p>
                    <list>
                        <item>
                            <name-title>Property</name-title>
                            <description-title>Description</description-title>
                        </item>
                        <item>
                            <name>Maximum number of messages</name>
                            <description>The maximum number of chunked responses that the client will handled. Set to -1 for no limit. Default is -1.</description>
                        </item>
                        <item>
                            <name>Maximum duration for callback</name>
                            <description>Set the maximum amount of time (in seconds) to allow for the callback function to complete processing. If your function takes longer than the specified time, the callback is terminated and any additional messages set to the client are ignored.</description>
                        </item>
                    </list>
                </p>
                <p>To send intermediate messages from your Ajax Callback function, use the *[xb:a5AjaxChunkedResponseWrite()]* function. The *[xb:a5AjaxChunkedResponseWrite()]* function takes one parameter -- a string that contains JavaScript to execute on the client. For example:</p>
                <p>
                    <example code="xb"><![CDATA[DIM js AS C
js = "$('div').innerHTML = 'Still working...';"
a5AjaxChunkedResponseWrite(js)]]></example>
                </p>
                <p>To learn more, download the example component and watch the video, "Chunked Responses - Sending Intermediate Responses to the Client", in the [Videos] section below.</p>
            </description>
        </section>
        <section>
            <title>Using Action Javascript to Write an Ajax Callback Function</title>
            <steps>
                <step>
                    <description>In the event editor with *[ui:Action Javascript]* mode selected, click the *[ui:Add]* button to add a new action.</description>
                    <figure>
                        <link>images/ajaxCallback1.png</link>
                    </figure>
                </step>
                <step>
                    <description>Select the *[ui:Ajax Callback]* action and click *[ui:OK]*.</description>
                    <figure>
                        <link>images/ajaxCallback2.png</link>
                    </figure>
                </step>
                <step>
                    <description>Define the name for the callback function that will be called. In the image below, a new function will be created that performs the callback called *[xb:myCallback]*</description>
                    <figure>
                        <link>images/ajaxCallback3.png</link>
                    </figure>
                </step>
                <step>
                    <description>Define any additional (optional) data to submit to the callback function. Parameters sent to the callback function can be accessed through the *[xb:e]* object in the Xbasic function.</description>
                    <figure>
                        <link>images/ajaxCallback4.png</link>
                    </figure>
                </step>
                <step>
                    <description>Click the *[ui:Create function prototype]* link to generate the function prototype for the Ajax callback.</description>
                    <figure>
                        <link>images/ajaxCallback5.png</link>
                    </figure>
                </step>
                <step>
                    <description>Click the *[ui:Copy to clipboard]* button to copy the function signature to the clipboard. When the code has been copied to the clipboard, click the *[ui:Close]* button to close the dialog.</description>
                    <figure>
                        <link>images/ajaxCallback6.png</link>
                    </figure>
                </step>
                <step>
                    <description>Click the *[ui:Open Xbasic Function Declarations]* link to open the Xbasic Function Declarations dialog. This is a shortcut to the Xbasic Functions section.</description>
                    <figure>
                        <link>images/ajaxCallback7.png</link>
                    </figure>
                </step>
                <step>
                    <description>Paste the code from the clipboard into the window and click *[ui:OK]*.</description>
                    <figure>
                        <link>images/ajaxCallback8.png</link>
                    </figure>
                </step>
                <step>
                    <description>Click *[ui:OK]* to save the Ajax Callback action.</description>
                </step>
                <step>
                    <description>Optionally, add a comment that describes the action when prompted. Then, click the *[ui:OK]* button.</description>
                    <figure>
                        <link>images/ajaxCallback9.png</link>
                    </figure>
                </step>
                <step>
                    <description>Click the *[ui:Save]* button to save the changes made to the event or Javascript Action.</description>
                    <figure>
                        <link>images/ajaxCallback10.png</link>
                    </figure>
                </step>
                <step>
                    <description>Navigate back to the component builder. Expand the *[ui:Code]* section in the far left column and click on *[ui:Xbasic functions]*. This is where you can make changes to the Xbasic callback function you created using the Ajax Callback Action Javascript builder.</description>
                    <figure>
                        <link>images/ajaxCallback11.png</link>
                    </figure>
                </step>
            </steps>
        </section>
        <section>
            <title>Making Callbacks from Javascript</title>
            <description>It's best to use Action Javascript if it's available to add functionality to an application. If you would rather make a callback using Javascript, however, the *[js:.ajaxCallback()]* method for the Grid or UX Component is available. To learn more, visit the [Grid Component] or [UX Component] Client API documentation for the *[js:.ajaxCallback()]* method.</description>
        </section>
        <section>
            <title>Variables Passed to the Xbasic Callback Function</title>
            <description>
                <p>The Xbasic function that handles the callback will be passed a dot variable called *[xb:e]* with the following properties:</p>
                <p>
                    <list>
                        <item>
                            <name>*[xb:tmpl]*</name>
                            <description>The component definition.</description>
                        </item>
                        <item>
                            <name>*[xb:__si]*</name>
                            <description>Component state information passed between the server and client.</description>
                        </item>
                        <item>
                            <name>*[xb:rtc]*</name>
                            <description>Runtime calculations computed while the component is executing.</description>
                        </item>
                        <item>
                            <name>*[xb:dataSubmitted]*</name>
                            <description>
                                <p>A pointer variable that contains the data values submitted to the callback.</p>
                            </description>
                        </item>
                        <item>
                            <name>*[xb:oldDataSubmitted]*</name>
                            <description>
                                <p>A pointer variable that contains the original values for controls in the UX.</p>
                            </description>
                        </item>
                        <item build="6232">
                            <name>*[xb:listInfoJSON]*</name>
                            <description>
                                <p>If the UX Component contains one or more List controls, contains an array of objects in JSON format with information about the list. Each entry in the array has the following format:</p>
                                <p>
                                    <example code="json"><![CDATA[{"list":"listId","checkedRows":"comma_delimited_list_of_checked_rows"}]]></example>
                                </p>
                                <p>*[xb:"list"]* contains the ID of the List control. If the List has a check-box select column, *[xb:"checkedRows"]* is a comma delimieted list of rows that have been checked.</p>
                                <p>You can inspect the JSON to determine what rows are checked in a List with a [check-box select control]. For example:</p>
                                <p>
                                    <example code="xb"><![CDATA[DIM listInfo AS P
listInfo = json_parse(e.listInfoJSON)

if (listInfo.size() > 0) then
    if (variable_exists("listInfo[1].checkedRows")) then
        DIM listId AS C
        DIM rows AS C
        listId = listInfo[1].list
        rows = crlf_to_comma(listInfo[1].checkedRows.dump_properties(" value"))
        ' Return JS alert displaying the list of checked rows for the first list in listInfo.
        e.javascript = "alert('Checked rows for list \'"+listId+"\' : "+rows+"');"
    end if
end if]]></example>
                                </p>
                                <p>If a list has no checked rows, the *[js:checkedRows]* property will be blank.</p>
                            </description>
                        </item>
                        <item>
                            <name>*[xb:repeatingSectionNames]*</name>
                            <description>
                                <p>If the UX contains one or more repeating sections, contains a comma delimited list of container IDs for each repeating section.</p>
                            </description>
                        </item>
                        <item>
                            <name>*[xb:repeatingSectionNames]*</name>
                            <description>
                                <p>If the UX contains one or more repeating sections, contains a property array with one etry for each repeating section with the following properties:</p>
                                <p>
                                    <list>
                                        <item>
                                            <name>*[xb:activeRow]*</name>
                                            <description>The repeating section row that had focus with the callback was made.</description>
                                        </item>
                                        <item>
                                            <name>*[xb:deletedRows]*</name>
                                            <description>A CRLF delimimted list of delete rows in the repeating section.</description>
                                        </item>
                                        <item>
                                            <name>*[xb:rowCount]*</name>
                                            <description>The number of non-deleted rows in the repeating section.</description>
                                        </item>
                                        <item>
                                            <name>*[xb:totalRowCount]*</name>
                                            <description>The total number of rows in the repeating section -- includes deleted rows.</description>
                                        </item>
                                        <item>
                                            <name>*[xb:fieldsInRepeating]*</name>
                                            <description>A CRLF delimited list of feilds in the repeating section.</description>
                                        </item>
                                        <item>
                                            <name>*[xb:dirtyRowsInSection]*</name>
                                            <description>A CRLF delimited list of modified rows in the repeating section.</description>
                                        </item>
                                        <item>
                                            <name>*[xb:dirtyFieldsInSection]*</name>
                                            <description>
                                                <p>A CRLF delimited list of modified fields in the repeating section. Each field uses the following format:</p>
                                                <p>
                                                    <example><![CDATA[*[em:fieldname]*_A5INSTANCE*[em:rownum]*]]></example>
                                                </p>
                                                <p>Where *[em:fieldname]* is the name of the field name and *[em:rownum]* is the row number in the repeating sectino. For example, if the 'PARTNO' field for row 3 in a repeating section has been modified, the following entry will be in the *[xb:dirtyFieldsInSection]* list:</p>
                                                <p>
                                                    <example><![CDATA[PARTNO_A5INSTANCE3]]></example>
                                                </p>
                                            </description>
                                        </item>
                                    </list>
                                </p>
                            </description>
                        </item>
                        <item>
                            <name>*[xb:_set]*</name>
                            <description>
                                <p>An optional variable that can be used to set the value or select properties of a control on the client. Alpha Anywhere generates the requried JavaScript to send to the client to set the value or property. For example:</p>
                                <p>
                                    <example code="xb"><![CDATA[' Set the value of 'Lastname'
e._set.lastname.value = "Smith"

'Set the value in 3rd Repeating Section row
e._set.firstname_a5instance3.value = "Fred"

' Set the style attribute for the 'Lastname' field
e._set.lastname.style = "color: red;"

' Set the class attribute for the 'Lastname' field
e._set.lastname.className = "NewClassName"

' Set the color and font size of the 'Firstname' field
e._set.firstname.style.color = "red"
e._set.firstname.style.fontSize = "20pt"

' Set multiple values in a checkbox or dropdown:
DIM choices AS P          ' declare a pointer variable
DIM choices.value[3] AS C ' add a property called 'value'
choices.value[1] = "alpha"
choices.value[2] = "beta"
choices.value[3] = "gamma"
e._set.greekletters.value = choices]]></example>
                                </p>
                                <p>Setting style attirbutes preserves any existing styling. It is important to note that attribute names are case-sensistive.</p>
                            </description>
                            <warning>
                                <p>Using *[xb:_set]* to return JavaScript can have a negative impact on performance. Prefer to return JavaScript directly from your Xbasic function. EG:</p>
                                <p>
                                    <example code="xb"><![CDATA[DIM js AS C = ""
js = js + "{dialog.object}.setValue('LASTNAME','Smith');"
js = js + <<%js%
var ele = {dialog.object}.getPointer('FIRSTNAME'); 
if (ele) { 
    ele.style.fontSize = '20pt'; 
    ele.style.color = 'red';
}
%js%

' Return JavaScript from the callback and terminate the function:
return js]]></example>
                                </p>
                            </warning>
                        </item>
                        <item>
                            <name>*[xb:_setElement]*</name>
                            <description>
                                <p>Similar to the *[xb:_set]* property, an optional variable that can be used to set the value or select properties of an element, such as DIV or SPAN.  Alpha Anywhere generates the requried JavaScript to send to the client to set the value or property. For example:</p>
                                <p>
                                    <example code="xb"><![CDATA[' Set the innerHTML of DIV with the id of 'DIV1' 
e._setElement.DIV1.value = "Some text"
' Set style properties of a SPAN with id of 'SPN2'
e._setElement.SPN2.style.color = "Red"]]></example>
                                </p>
                                <p>Setting style attirbutes preserves any existing styling. It is important to note that attribute names are case-sensistive.</p>
                            </description>
                            <warning>
                                <p>Using *[xb:_setElement]* to return JavaScript can have a negative impact on performance. Prefer to return JavaScript directly from your Xbasic function. EG:</p>
                                <p>
                                    <example code="xb"><![CDATA[DIM js AS C = ""
js = js + "$('DIV1').innerHTML = 'Some text';"
js = js + <<%js%
var ele = $('SPN2');
if (ele) { 
    ele.style.color = 'red';
}
%js%

' Return JavaScript from the callback and terminate the function
return js]]></example>
                                </p>
                            </warning>
                        </item>
                    </list>
                </p>
            </description>
        </section>
        <section>
            <title>Videos</title>
            <videos>
                <title>Chunked Responses - Sending Intermediate Responses to the Client</title>
                <description>
                    <p>Normally, when you make an Ajax callback from a UX component, the Xbasic function that handles the callback completes its processing and then returns Javascript to the client. In some uses cases where your Xbasic function takes a "long" time to execute, you might want to send some type of intermediate message to the client telling them that the function is still processing and perhaps letting the user know what stage the function is at.</p>
                    <p>In order to send back intermediate responses to the client while the Xbasic function is still processing, you can set the Ajax callback to allow chunked responses.</p>
                    <p>In this video we show how you can configure an Xbasic function to do chunked responses.</p>
                </description>
                <date>2019-05-02</date>
                <video>
                    <name>Watch Video</name>
                    <link>https://www.viddler.com/v/b1e18574</link>
                </video>
                <resources>
                    <resource>
                        <link>https://www.ajaxvideotutorials.com/V12Videos/chunkedAjax.zip</link>
                    </resource>
                </resources>
            </videos>
        </section>
    </sections>
    <links>
        <link href="#section1_Videos">Videos</link>
        <link link="javascript actions">Javascript Actions</link>
        <link link="grid component ajaxcallback method">Grid Component</link>
        <link link="ux component ajaxcallback method">UX Component</link>
        <link link="uxlist%20has%20checkbox%20select%20col">check-box select control</link>
    </links>
    <see>
        <ref link="grid component ajaxcallback method">{grid.Object}.ajaxCallback Method</ref>
        <ref link="ux component ajaxcallback method">{dialog.Object}.ajaxCallback Method</ref>

        <ref link="action javascript for the ux">Action Javascript for the UX</ref>
        <ref link="action javascript in the grid">Action Javascript in the Grid</ref>

    </see>
</page>