<page>
    <shortlink>Populate controls in an UNBOUND UX component with data from a table</shortlink>
   <topic>Populate controls in an UNBOUND UX component with data from a table</topic>
   <description>Populates controls in a UX component with data from a table.
       Use this action (rather than the 'Populate Controls in a UX Component with data from Tables' action)
       if the UX component has not been bound to a database (see the 'Data Binding' pane in the builder).
   </description>
   
   <sections>
         <section>
           <figure><link>images/populateUxUnbound2.jpg</link></figure>
       
       </section>
       
           <section>
            <description>Used with the UX component. If the specified primary key is not found in the table you can now specify that the values in the databound controls should be cleared, you can also suppress the error message, and you can call a Javascript function.
See 'Errors and No Match Found' section in the genie.</description>
       </section>
       
  <section>
            <title>Populate UX Controls Properties</title>
            <list>
                <item>
                    <name>Method for specifying primary key</name>
                    <description>Method for specifying primary key property. Choices include *[ui:SpecifyNow]*, *[ui:Read from Dialog Controls]*, *[ui:Javascript function]*.</description>
                </item>
                <item>
                    <name>Primary key value</name>
                    <description>Specify the primary key value of the record you want to use to populate the UX component controls. If the primary key has multiple columns, enter the key value with 3 pipe characters (|||) separating the value for each column. For example, if the primary key is Firstname and Lastname, you could enter John|||Smith.</description>
                </item>
                <item>
                    <name>Controls to read primary key value from</name>
                    <description>Specify the control(s) on the Dialog that contain the primary key value for the record you want to retrieve</description>
                </item>
                <item>
                    <name>Javascript function</name>
                    <description>Specify the name of the Javascript function that will return the value of the primary key of the record you want to retrieve. If the primary key is multi-column, return a ||| (three pipes) delimited value.</description>
                </item>
                <item>
                    <name>After callback complete Javascript</name>
                    <description>(Optional) Specify the name of a Javascript function to call when the Ajax callback completes.</description>
                </item>
            </list>
        </section>
        <section>
            <title>Table Definition (AlphaDAO) Properties</title>
            <list>
                <item>
                    <name>Connection string</name>
                    <description>Connection string property.</description>
                </item>
                <item>
                    <name>Populate from</name>
                    <description>Specify if the controls are populated from a table or a query (that joins multiple tables) Choices include *[ui:Table]*, *[ui:Query]*.</description>
                </item>
                <item>
                    <name>Tablename</name>
                    <description>Specify the table name.</description>
                </item>
                <item>
                    <name>Query</name>
                    <description>Query property.</description>
                </item>
                <item>
                    <name>Primary key</name>
                    <description>Primary key property.</description>
                </item>
            </list>
        </section>
        <section>
            <title>Data Binding Properties</title>
            <list>
                <item>
                    <name>Data binding</name>
                    <description>Specify how fields in the target table are mapped to controls in this Component.</description>
                </item>
                <item>
                    <name>Image properties</name>
                    <description>Image properties property.</description>
                </item>
            </list>
        </section>
        <section>
            <title>Errors and No Match Found Properties</title>
            <list>
                <item>
                    <name>Display global error if error occurs or no matching record found</name>
                    <description>Display global error if error occurs or no matching record found property.</description>
                </item>
                <item>
                    <name>Clear out existing controls</name>
                    <description>Clear out existing controls property.</description>
                </item>
                <item>
                    <name>Javascript function</name>
                    <description>Javascript function property.</description>
                </item>
            </list>
        </section>
        <section>
            <title>Debugging and Global Errors Properties</title>
            <list>
                <item>
                    <name>Display debugging info</name>
                    <description>Specify if the SQL statements (for SQL tables), or Xbasic code (for .dbf tables) should be shown.
Note: If the 'After submit action' is set to redirect, then you will not see the debugging information (unless there is an error), because control will be redirected to the target page.</description>
                </item>
                <item>
                    <name>Debugging information placeholder</name>
                    <description><![CDATA[Specify where debugging informatin should be shown. If you are working in an application that uses Panels, you will typically put a placeholder in the Panel to show debugging information in the appropriate panel. Set to <Default> for the default placement of debugging information.]]></description>
                </item>
                <item>
                    <name>Global errors placeholder</name>
                    <description><![CDATA[Specify where global errors (if a commit error that is not specific to a particular field) should be displayed. If you are working in an application that uses Panels, you will typically put a placeholder in the Panel to show Global errors in the appropriate panel. Set to <Default> for the default placement of global errors.]]></description>
                </item>
            </list>
        </section>
       
   </sections>
   
    <see>
   <ref link="action javascript for the ux">Action Javascript for the UX</ref>
 
   </see>
   
   
</page>