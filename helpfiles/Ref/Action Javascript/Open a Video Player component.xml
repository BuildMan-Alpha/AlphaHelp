<page>
    <shortlink>Open a Video Player component</shortlink>
   <topic>Open a Video Player component</topic>
   <description>Open a Video Player component in a pop-up window, or in a DIV on the current page.</description>
   
   <sections>
          <section>
            <description>Used with the Grid and UX components</description>
       </section>
       
   <section>
            <title>Record Mode Properties</title>
            <list>
                <item>
                    <name>Mode</name>
                    <description>TIP: If the mode is set to 'EditExistingRecord' you can access the raw data that is loaded into the UX Component in the component's 'onDialogInitialize' event inside this variable: 'e.rtc._data' Choices include *[ui:EditExistingRecord]*, *[ui:EnterNewRecord]*.</description>
                </item>
                <item>
                    <name>List control id</name>
                    <description>Specify the List control that is displaying the record you want to edit.</description>
                </item>
                <item>
                    <name>Use cached UX Component</name>
                    <description>(Applies only when target UX Component is opened in a window) When the target UX Component is opened a second and subsequent time, a cached version is used to speed up the display. In some situations you might not want to use the cached version. IMPORTANT: The 'onDialogInitialize' event will only fire the FIRST time the UX Component is opened. If you want the 'onDialogInitialize' event to fire every time the UX Component is opened, you should turn caching off. If caching is off, the 'onSynchronize' client-side event will fire when the UX Component is opened the second and subsequent times.</description>
                </item>
            </list>
        </section>
        <section>
            <title>Target Video Player Definition Properties</title>
            <list>
                <item>
                    <name>Video Player name</name>
                    <description>Video Player name property.</description>
                </item>
                <item>
                    <name>Video Player alias</name>
                    <description>Video Player alias property.</description>
                </item>
                <item>
                    <name>Cache UX Component</name>
                    <description>Should a cached version of the UX Component be used the second and subsequent time it is opened?</description>
                </item>
                <item>
                    <name>Use cached UX Component</name>
                    <description>(Applies only when target UX Component is opened in a window) When the target UX Component is opened a second and subsequent time, a cached version is used to speed up the display. In some situations you might not want to use the cached version. IMPORTANT: The 'onDialogInitialize' event will only fire the FIRST time the UX Component is opened. If you want the 'onDialogInitialize' event to fire every time the UX Component is opened, you should turn caching off. If caching is off, the 'onSynchronize' client-side event will fire when the UX Component is opened the second and subsequent times.</description>
                </item>
                <item>
                    <name>Show wait message when cached UX Component is refreshed</name>
                    <description>(Applies only when target UX Component is opened in a window) When the target UX Component is opened a second and subsequent time, should a wait message be shown.</description>
                </item>
                <item>
                    <name>Wait message text</name>
                    <description>Wait message text property.</description>
                </item>
                <item>
                    <name>Wait message icon</name>
                    <description>Wait message icon property.</description>
                </item>
                <item>
                    <name>Argument bindings</name>
                    <description>Specify where the arguments get their values from.</description>
                </item>
                <item>
                    <name>Override settings</name>
                    <description>Specify if you want to override in properties in the target component. In V11 and above, you can also set session variables when the target component is opened.</description>
                </item>
                <item>
                    <name>Override Custom Settings</name>
                    <description>Specify if you want to override any of the Custom Settings defined in the target UX component.</description>
                </item>
                <item>
                    <name>Use master style</name>
                    <description>Use master style property.</description>
                </item>
            </list>
        </section>
        <section>
            <title>Refresh UX when Cached Component is Shown Properties</title>
            <list>
                <item>
                    <name>Refresh UX when it is re-opened</name>
                    <description>When a cached UX component is re-opened, should the UX be refreshed? (List controls will be refreshed, and all controls bound to Data Series will be refreshed).</description>
                </item>
                <item>
                    <name>Javascript on refresh</name>
                    <description>(Optional) Specify the name of a Javascript function to call when the component is shown.</description>
                </item>
            </list>
        </section>
        <section>
            <title>Populate UX Component with Data from a Table Properties</title>
            <list>
                <item>
                    <name>Populate UX Component with Data from a table</name>
                    <description>(IMPORTANT: This property assumes that the target UX Component has been bound to a table). When the UX Component is opened, should it be automaically populated with data from one or more tables? (TIP: An alternative to using this property is to write your own onDialogInitialize event handler in the UX Component). 
NOTE: If the target UX Component has code in the 'onDialogInitialize' event to load primary keys, this code will NOT be executed when the target component is loaded.</description>
                </item>
                <item>
                    <name>Primary key source</name>
                    <description>How do you want to specify the Primary Key of the record with which to populate the UX Component? Choices include *[ui:SpecifyNow]*, *[ui:ControlsOnCurrentComponent]*, *[ui:SessionVariable]*.</description>
                </item>
                <item>
                    <name>Primary key value</name>
                    <description>Specify the primary key value. If the Primary Key is more that one column specify values delimited by ||| (three pipes)</description>
                </item>
                <item>
                    <name>Control(s) on Current Component</name>
                    <description>Specify the control on the current component from which the Primary Key will be read. If the Primary Key is more than one column, you must select multiple controls. The order in which the controls are selected is significant.</description>
                </item>
                <item>
                    <name>Session variable name</name>
                    <description>Specify the name of the session variable that contains the primary key value. If the Primary Key is more that one column specify values delimited by ||| (three pipes)</description>
                </item>
                <item>
                    <name>Use cached UX Component</name>
                    <description>(Applies only when target UX Component is opened in a window) When the target UX Component is opened a second and subsequent time, a cached version is used to speed up the display. In some situations you might not want to use the cached version. IMPORTANT: The 'onDialogInitialize' event will only fire the FIRST time the UX Component is opened. If you want the 'onDialogInitialize' event to fire every time the UX Component is opened, you should turn caching off. If caching is off, the 'onSynchronize' client-side event will fire when the UX Component is opened the second and subsequent times.</description>
                </item>
            </list>
        </section>
        <section>
            <title>Control Map Properties</title>
            <list>
                <item>
                    <name>Control map</name>
                    <description>Specify how controls in the current Component map to controls in the target UX Component</description>
                </item>
            </list>
        </section>
        <section>
            <title>Target Window, DIV, Tabbed UI Pane or Panel Properties</title>
            <list>
                <item>
                    <name>Target</name>
                    <description>Specify if the page should be opened in a pop-up window, a DIV on the page, a Panel or (if the component is running in a Tabbed UI) in a new Tabbed UI pane. (If you choose the 'Tabbed UI Pane' option, and the component is not running inside a Tabbed UI, it will be opened in a modeless pop-up window). The 'DynamicPanel' option allows you to show the target component in a Panel that is dynamically added to a Panel Navigator. Choices include.</description>
                </item>
                <item>
                    <name>Target Panel</name>
                    <description>Specify the Panel Id.</description>
                </item>
                <item>
                    <name>Parent Panel Navigator</name>
                    <description>Specify the Id of the parent Panel Navigator. The dynamic Panel will be added to this Panel Navigator.</description>
                </item>
                <item>
                    <name>Dynamic Panel Title</name>
                    <description>Specify the title for the Dynamic Panel.</description>
                </item>
                <item>
                    <name>User can close dynamic panel</name>
                    <description>(Only applies if the target Panel Navigator has been configured to use a Tab Band) Specify if the label for the dynamically added Panel has a 'close' icon that allows the user to close the dynmically added Panel.</description>
                </item>
                <item>
                    <name>Target DIV ID</name>
                    <description>Specify the ID of the target DIV. This DIV can be in the component (for example, in a free-form edit region), or on the .a5w page that contains the component. TIP: If you want to specify a DIV that is inside a freeform edit region in a component cell, use the '{grid.rowID}' placeholder in the DIV id. For example: 'div1_Row{grid.rowID}'. This will ensure that each row has a uniquely named DIV in which the target page can be displayed.</description>
                </item>
                <item>
                    <name>Target DIV style</name>
                    <description>Specify the in-line style for the target DIV.</description>
                </item>
                <item>
                    <name>Can hide target DIV?</name>
                    <description>Specify the DIV can be hidden (to remove from view the target page after it has been opened in the DIV).</description>
                </item>
                <item>
                    <name>DIV hide hyperlink</name>
                    <description>Specify text for the hyperlink that hides the DIV where the target component is shown.</description>
                </item>
                <item>
                    <name>Window type</name>
                    <description>Specify the window type. Popup windows will show in a moveable window on the page. Dropdown windows have no title bar and cannot be moded. By default, Dropdown windows open directly below the control that you click to open the window. Note: An Ajax window will NOT be blocked by a browser's internal protection against popup windows.</description>
                </item>
                <item>
                    <name>Lock overlay CSS class name</name>
                    <description><![CDATA[Specify the CSS class name to use for the overlay that is displayed behind the window. The overlay prevents the user from clicking on controls that are outside the window. Leave blank, or specify <Default> to use the default style. Specify <Invisible> to create an invisible overlay (has no color, but user is still prevented from clicking on controls off the window). By specifying a class that has a 'background' attribute, you can control the color of the overlay. For example: background: rgba(0,0,0,0) to create a transparent overlay.]]></description>
                </item>
                <item>
                    <name>Sub-theme</name>
                    <description>(Optional) Specify a sub-theme for the window. The sub-theme can select a different pre-defined window 'look'. If you leave this property blank the 'base' sub-theme is automatically selected.</description>
                </item>
                <item>
                    <name>Window name</name>
                    <description><![CDATA[Set to <Default> to give the window a default name. If you give the window an explicit name (which must be unique), then you can easily get a pointer to the window to execute methods of the window object. Click the smart field for tips on how to name your window and for information on how to get a pointer to the window object.]]></description>
                </item>
                <item>
                    <name>Dock window</name>
                    <description>Docked windows 'stick' to an edge of the screen and remain in place even when the page is scrolled.</description>
                </item>
                <item>
                    <name>Dock location</name>
                    <description>Specify which edge of the screen the window is docked to. Choices include *[ui:Left]*, *[ui:Right]*, *[ui:Top]*, *[ui:Bottom]*.</description>
                </item>
                <item>
                    <name>Allow auto-close of dirty UX Component</name>
                    <description>Specify if the window should close automatically when the user clicks off the window when the UX Component is dirty. When a window is set to use the 'Dropdown' style, clicking anywhere on the page outside the window will normally cause the Window to close. However, if the UX Component that is shown in the Window is dirty, the window does not close, unless this property is checked.</description>
                </item>
                <item>
                    <name>Window position</name>
                    <description>Specify where the window will be shown.</description>
                </item>
                <item>
                    <name>Dropdown Window position</name>
                    <description>Specify where the window will be shown.</description>
                </item>
                <item>
                    <name>Re-use existing window</name>
                    <description>Specify if multiple modeless windows can be opened, or only a single modeless window.</description>
                </item>
                <item>
                    <name>Window title</name>
                    <description>Specify the window title. The window title can contain data from fields in the current record. Enclose field values in curly parens. e.g. Customer - {lastname}. To reference values from a column in a List control use this syntax: {LIST::ListName::ColumnName} (e.g. {LIST::MYLIST1::LASTNAME} )</description>
                </item>
                <item>
                    <name>Window title show</name>
                    <description>Specify if the window title should be shown or hidden.</description>
                </item>
                <item>
                    <name>Window title position</name>
                    <description>Specify if the window title should appear at the top or bottom of the window. Choices include *[ui:Top]*, *[ui:Bottom]*.</description>
                </item>
                <item>
                    <name>Window title direction</name>
                    <description>Specify if the direction is 'ltr' (left-to-right) (title on left, close button on right) or 'rtl' (right-to-left) (close button on left and title on right). Choices include *[ui:ltr]*, *[ui:rtl]*.</description>
                </item>
                <item>
                    <name>Window title has close button</name>
                    <description>Specify if the window title has a Close button.</description>
                </item>
                <item>
                    <name>Disable window move</name>
                    <description>Specify if the window cannot be moved by the user.</description>
                </item>
                <item>
                    <name>Pane title</name>
                    <description>Specify the tab pane title. The pane title can contain data from fields in the current record. Enclose field values in curly parens. e.g. Customer - {lastname}. To reference values from a column in a List control use this syntax: {LIST::ListName::ColumnName} (e.g. {LIST::MYLIST1::LASTNAME} )</description>
                </item>
                <item>
                    <name>Window height</name>
                    <description>Specify the window height. Use CSS syntax. For example: 3in, 10cm, 200px. If you do not set the height, the window will resize automatically to accommodate the window contents.</description>
                </item>
                <item>
                    <name>Window width</name>
                    <description>Specify the window height. Use CSS syntax. For example: 3in, 10cm, 200px. If you do not set the width, the window will resize automatically to accommodate the window contents.</description>
                </item>
                <item>
                    <name>Window is resizable</name>
                    <description>Specify if the window is resizable.</description>
                </item>
                <item>
                    <name>Working message placement</name>
                    <description>Specify the panel where the wait message should be shown. You should chose a Panel that is currently visible, not a Panel that will be animated into view when the component is rendered.</description>
                </item>
                <item>
                    <name>Working message uses CSS3 animation?</name>
                    <description>Specify if the working message should be displayed using a CSS3 animation?</description>
                </item>
                <item>
                    <name>Working message animation size</name>
                    <description>Specify the size of the animation in pixels.</description>
                </item>
                <item>
                    <name>Working message</name>
                    <description>Specify the text of the message to show in the window while the window waits for its contents to be generated.</description>
                </item>
                <item>
                    <name>Working message icon</name>
                    <description>Specify the image to show in the window while the window waits for its contents to be generated.</description>
                </item>
                <item>
                    <name>Refresh Grid on window close</name>
                    <description>(Applies only when window is opened from a Grid Component) When the window is closed, specify if the Grid should be refreshed. You can refresh the current row, or all rows in the Grid. Choices include.</description>
                </item>
                <item>
                    <name>Close UX Component after submit</name>
                    <description>After the UX Component is submitted, if there are no errors, should the window be automatically closed?</description>
                </item>
                <item>
                    <name>Submit Parent Component when UX Component is submitted</name>
                    <description>When the UX Component is submitted, the data in the UX Component is written back into the parent Component (Grid or UX Component). Should the parent Component be submitted to save the changes to the database?</description>
                </item>
                <item>
                    <name>Refresh Parent Tab Pane on Tab Pane close</name>
                    <description>When the Tab Pane is closed, specify if the parent component should be refreshed. (Applies only if the parent component is a Grid.)</description>
                </item>
                <item>
                    <name>Window background style</name>
                    <description>Specify the inline-style for the window background</description>
                </item>
                <item>
                    <name>Center window contents - vertically</name>
                    <description>Specify if the window contents should be vertically centered</description>
                </item>
                <item>
                    <name>Center window contents - horizontally</name>
                    <description>Specify if the window contents should be horizontally centered</description>
                </item>
                <item>
                    <name>Warn before closing if Component in window is dirty</name>
                    <description>If the Component shown in the window is dirty, should a warning be displayed when the user tries to close the window?</description>
                </item>
                <item>
                    <name>Has pointer icon</name>
                    <description>Specify if the window has a pointer icon that points to the element that was clicked to show the window.</description>
                </item>
                <item>
                    <name>Pointer position</name>
                    <description>Specify the window edge that has the pointer icon. If you select 'Auto' the most appropriate edge is automatically selected. Choices include *[ui:Auto]*, *[ui:Top]*, *[ui:Bottom]*, *[ui:Left]*, *[ui:Right]*.</description>
                </item>
            </list>
        </section>
        <section>
            <title>Window Buttons Properties</title>
            <list>
                <item>
                    <name>Has custom toolbar buttons</name>
                    <description>Specify if the window has custom buttons in the window toolbar (at the bottom of the window).</description>
                </item>
                <item>
                    <name>Define buttons</name>
                    <description>Define the buttons that appear in the window toolbar (at the bottom of the window).</description>
                </item>
                <item>
                    <name>Buttons in-line style</name>
                    <description>In-line style for the buttons. TIP: To display the buttons left justified, enter an in-line style of: text-align:left;</description>
                </item>
            </list>
        </section>
        <section>
            <title>Optional Window Parts Properties</title>
            <list>
                <item>
                    <name>Show top bar</name>
                    <description>Specify if a top bar should be shown. (Shows above the window body, but inside the body container).</description>
                </item>
                <item>
                    <name>Top bar HTML</name>
                    <description>Specify the HTML to show in the top bar.</description>
                </item>
                <item>
                    <name>Top bar style</name>
                    <description>Specify the in-line style for the top bar.</description>
                </item>
                <item>
                    <name>Show bottom bar</name>
                    <description>Specify if a top bar should be shown. (Shows below the body, inside the body container).</description>
                </item>
                <item>
                    <name>Bottom bar HTML</name>
                    <description>Specify the HTML to show in the top bar.</description>
                </item>
                <item>
                    <name>Bottom bar style</name>
                    <description>Specify the in-line style for the top bar.</description>
                </item>
                <item>
                    <name>Show header</name>
                    <description>Specify if a header should be shown. (Shows above the window body, but inside the body container).</description>
                </item>
                <item>
                    <name>Header HTML</name>
                    <description>Specify the HTML to show in the header.</description>
                </item>
                <item>
                    <name>Header style</name>
                    <description>Specify the in-line style for the top bar.</description>
                </item>
                <item>
                    <name>Show footer</name>
                    <description>Specify if a footer should be shown. (Displays below the body, the bottom bar and below any user-defined buttons).</description>
                </item>
                <item>
                    <name>Footer HTML</name>
                    <description>Specify the HTML to show in the footer.</description>
                </item>
                <item>
                    <name>Footer style</name>
                    <description>Specify the in-line style for the footer.</description>
                </item>
            </list>
        </section>
        <section>
            <title>Window Animation Properties</title>
            <list>
                <item>
                    <name>Animation</name>
                    <description>Specify if the window should be animated when it is shown or hidden. Note: If the window contains an IFrame, which in turn contains a PDF viewer, animation may not work well and should not be used.</description>
                </item>
                <item>
                    <name>Show animation style</name>
                    <description>Select the animation method to use when the window is shown. Fade and Slide use methods in jQuery core. Other options require jQueryUI.</description>
                </item>
                <item>
                    <name>Show animation speed</name>
                    <description>Specify the animation speed. You can select a pre-defined option (slow = 600 milliseconds, fast = 200 milliseconds), or you can enter an explicit value in milliseconds.</description>
                </item>
                <item>
                    <name>Hide animation style</name>
                    <description>Select the animation method to use when the window is closed. Fade and Slide use methods in jQuery core. Other options require jQueryUI.</description>
                </item>
                <item>
                    <name>Hide animation speed</name>
                    <description>Specify the animation speed. You can select a pre-defined option (slow = 600 milliseconds, fast = 200 milliseconds), or you can enter an explicit value in milliseconds.</description>
                </item>
            </list>
        </section>
        <section>
            <title>Client-side Events Properties</title>
            <list>
                <item>
                    <name>Before execute event</name>
                    <description>Specify the name of a Javascript function to call before the callback is made to open the target component. This Javascript function will take 'go' as an input parameter. 'go' contains all of the settings for the target component to be opened. The purpose of this function is to allow you to override any of the  properties of the passed-in 'go' object.</description>
                </item>
            </list>
        </section>
        <section>
            <title>Window Javascript Events Properties</title>
            <list>
                <item>
                    <name>onInitialize</name>
                    <description>Specify the Javascript code to execute the first time the window is shown.</description>
                </item>
                <item>
                    <name>onBeforeShow</name>
                    <description>Specify the Javascript code to execute before the window is shown.</description>
                </item>
                <item>
                    <name>onShow</name>
                    <description>Specify the Javascript code to execute when the window is shown.</description>
                </item>
                <item>
                    <name>onBeforeHide</name>
                    <description>Specify the Javascript code to execute before the window is hidden.</description>
                </item>
                <item>
                    <name>onHide</name>
                    <description>Specify the Javascript code to execute when the window is hidden.</description>
                </item>
                <item>
                    <name>onFocus</name>
                    <description>Specify the Javascript code to execute when the window gets focus.</description>
                </item>
                <item>
                    <name>onMove</name>
                    <description>Specify the Javascript code to execute when the window is moved.</description>
                </item>
                <item>
                    <name>onResize</name>
                    <description>Specify the Javascript code to execute when the window is resized.</description>
                </item>
            </list>
        </section>
        <section>
            <title>Tab Pane Javascript Properties</title>
            <list>
                <item>
                    <name>onBeforeChange</name>
                    <description>Fires before the tab pane changes. If event handler returns true, user can change tab. If event handler returns false, user cannot change tab.</description>
                </item>
                <item>
                    <name>onChange</name>
                    <description>Fires when the tab pane is changed.</description>
                </item>
                <item>
                    <name>onRightClick</name>
                    <description>Fires when user right-clicks on a tab pane.</description>
                </item>
                <item>
                    <name>onInitial</name>
                    <description>Fires when the tab pane is created.</description>
                </item>
                <item>
                    <name>onBeforeRemove</name>
                    <description>Fires before a tab pane is closed. If event handler returns true, user can close tab. If event handler returns false, user cannot close tab.</description>
                </item>
                <item>
                    <name>onRemove</name>
                    <description>Fires when the tab pane is closed.</description>
                </item>
            </list>
        </section>
        <section>
            <title>Ajax Failed/Offline Javascript Properties</title>
            <list>
                <item>
                    <name>Timeout setting</name>
                    <description><![CDATA[(Optional) Specify the time to wait (in milliseconds) for a response from the callback. If a response is not received within the specified time, the Ajax failed message is displayed.  The <Default> value is defined by the {dialog.object}.ajaxCallbackTimeout property (which you can change in your Javascript code). The default value for this property is 0 - which means no timeout - wait indefinitely for the server to respond.]]></description>
                </item>
                <item>
                    <name>Ajax failed message</name>
                    <description>Specify the message to show if the Ajax callback fails.</description>
                </item>
                <item>
                    <name>Offline Javascript</name>
                    <description>(Optional) Specify the Javascript to execute if the device is offline. Since the device is offline, the Ajax callback is not made. Therefore the code in the 'Ajax failed Javascript' property will not get executed.</description>
                </item>
            </list>
        </section>
        <section>
            <title>Optimization Properties</title>
            <list>
                <item>
                    <name>Method for opening UX in a PhoneGap or Static HTML application</name>
                    <description>Normally, this component is opened by making an Ajax callback to the server. In a mobile PhoneGap application, or a static HTML application, the device might not have a connection to the server and so making an Ajax callback is not possible. In this case you can render a pre-computed version of the target UX component. Choices include *[ui:AjaxCallback]*, *[ui:Precomputed]*, *[ui:AjaxIfOnLine_PrecomputedIfOffLine]*, *[ui:Dynamic]*.</description>
                </item>
                <item>
                    <name>Javascript function</name>
                    <description>Specify the name of a Javascript function to call. This function should return a string value of 'ajax' or 'precomputed' to specify if the component should be opened by making an Ajax callback or by executing a pre-computed Javascript function that will open the component without making a callback.</description>
                </item>
            </list>
        </section>
       
       
   </sections>
   
    <see>
   <ref link="action javascript for the ux">Action Javascript for the UX</ref>
       <ref link="action javascript in the grid">Action Javascript in the Grid</ref>
   </see>
   
   
</page>