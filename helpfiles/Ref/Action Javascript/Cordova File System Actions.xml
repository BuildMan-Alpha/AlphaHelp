<page build="2970">
    <shortlink>action javascript phonegap file system actions</shortlink>
    <topic>PhoneGap - File System Actions</topic>
    <description>Performs actions with the mobile device file system such as creating, reading, deleting file, creating directories, etc.(Only applies to UX components running in a Cordova shell.)</description>
    <discussion>
        <p>A collection of actions that make working with files in the mobile device file system easier.</p>
        <p>When you choose this action, you can select from the following list of file system actions:</p>
    </discussion>
    <sections>
        <section>
            <figure>
                <link>images/phonegapfsa1.png</link>
            </figure>
        </section>
        <section>
            <note>All Cordova file system actions are asynchronous. When you define any of these actions you specify a success function that gets called once the action has successfully completed.</note>
        </section>
        <section>
            <title>File System Action Properties</title>
            <cases>
                <case>
                    <title nested="2">Action name</title>
                    <description>Specify the File System Action that you want to perform.</description>
                    <cases>
                        <case>
                            <title nested="3">Get Directory Contents</title>
                            <description>
                                <p>Gets the contents of a directory on a mobile device. Once the directory has been obtained, the *[ui:onSuccess]* callback function is called. If an error occurred, the *[ui:OnFailure]* callback function is called. The *[ui:onSuccess]* callback function is passed an array. The array has an object for each item in the directory. The item object has these properties:</p>
                            </description>
                            <list>
                                <item>
                                    <name>fullPath</name>
                                    <description>the full path of the file</description>
                                </item>
                                <item>
                                    <name>isFile</name>
                                    <description>true/false - indicates if the entry is a file (true) or a directory (false)</description>
                                </item>
                                <item>
                                    <name>display</name>
                                    <description>fullPath followed by either [F] or [D] to indicate if the entry is a file or a directory</description>
                                </item>
                            </list>
                        </case>
                        <case>
                            <title nested="3">Get Directory Contents (Recursive)</title>
                            <description>
                                <p>Similar to the 'Get Directory Content' action, but recurses into directories to get the contents of all child directories. Once all of the directories have been read, the *[ui:onSuccess]* callback function is called. If there is an error reading any of the directories, the *[ui:OnFailure]* callback function is called. This function is passed an array which has an object for each item (file or directory). The item object has these properties:</p>
                            </description>
                            <list>
                                <item>
                                    <name>fullPath</name>
                                    <description>the full path of the file</description>
                                </item>
                                <item>
                                    <name>isFile</name>
                                    <description>true/false - indicates if the entry is a file (true) or a directory (false)</description>
                                </item>
                                <item>
                                    <name>display</name>
                                    <description>fullPath followed by either [F] or [D] to indicate if the entry is a file or a directory</description>
                                </item>
                            </list>
                        </case>
                        <case>
                            <title nested="3">Create Directory</title>
                            <description>
                                <p>Creates a directory in the mobile device file system.</p>
                            </description>
                        </case>
                        <case>
                            <title nested="3">Remove Directory</title>
                            <description>
                                <p>Deletes a directory from the mobile device file system. For example if you specify 'dir1/dir2' as the name of the directory to remove it will remove 'dir2'.</p>
                                <p>See also the Remove Directory Recursive action which removes directories recursively. For example, if you specify 'dir1/dir2' as the name of the directory to remove, it will remove both 'dir1' and 'dir1/dir2'.</p>
                            </description>
                        </case>
                        <case>
                            <title nested="3">Remove Directory (Recursive)</title>
                            <description>
                                <p>Removes a directory recursively. For example, if you specify 'dir1/dir2' as the name of the directory to remove, it will remove both 'dir1' and 'dir1/dir2'.</p>
                            </description>
                        </case>
                        <case>
                            <title nested="3">Create File</title>
                            <description>
                                <p>Creates a new text file. The filename can include a full path (e.g. dir1/dir2/file.txt). The directory structure for the target file must exists. After the file has been created the *[ui:onSuccess]* function is called. If the file was not created, the *[ui:OnFailure]* function is called.</p>
                            </description>
                        </case>
                        <case>
                            <title nested="3">Delete File</title>
                            <description>
                                <p>Deletes a file. The filename can include a full path (e.g. dir1/dir2/file.txt). After the file has been deleted the *[ui:onSuccess]* function is called. If the file was not deleted, the *[ui:OnFailure]* function is called.</p>
                            </description>
                        </case>
                        <case>
                            <title nested="3">File Exists</title>
                            <description>
                                <p>Checks if a file exists. The filename can include a full path (e.g. dir1/dir2/file.txt). The *[ui:onSuccess]* function is called if there were no errors. Your *[ui:onSuccess]* function can reference the '*[js:flagExists]*' variable which will be true (file exists) or false (file does not exist). If there was an error in trying to check the file, the *[ui:OnFailure]* function is called.</p>
                            </description>
                        </case>
                        <case>
                            <title nested="3">Read File</title>
                            <description>
                                <p>Reads a text file. The filename can include a full path (e.g. dir1/dir2/file.txt). The *[ui:onSuccess]* function is called if there were no errors. Your *[ui:onSuccess]* function can reference the '*[js:data]*' variable which will be the file contents. If there was an error in trying to read the file, the *[ui:OnFailure]* function is called.</p>
                            </description>
                        </case>
                        <case>
                            <title nested="3">Get File System RUI for Legacy Persistent Storage</title>
                            <description>
                                <p>Gets the URI for the legacy persistent file system.</p>
                                <p>All of the actions defined in this builder use the Legacy Persistent File Storage location. If you want to use the newer [PhoneGap - File System Actions (File URI Based)] to work with any files or directories created by the actions exposed in this genie you will need the URI of the legacy file system.</p>
                            </description>
                        </case>
                    </cases>
                </case>
                <case>
                    <title nested="2">Directory name</title>
                    <description>Specify the name of the directory. You can specify a JavaScript function to call that will return the name of the directory by entering:</description>
                    <example code=""><![CDATA[Javascript:your_function_name]]></example>
                    <tip>Client-side data cache items are stored in a directory called *[__AADataCache]*</tip>
                </case>
                <case>
                    <description>For example:</description>
                    <example code=""><![CDATA[Javascript:getDir]]></example>
                </case>
                <case>
                    <title nested="2">File name</title>
                    <description>Specify the name of the file. You can specify a JavaScript function to call that will return the name of the file by entering:</description>
                    <example code=""><![CDATA[Javascript:your_function_name]]></example>
                </case>
                <case>
                    <description>For example:</description>
                    <example code=""><![CDATA[Javascript:getFilename]]></example>
                </case>
                <case>
                    <title nested="2">Text to write to file</title>
                    <description>Specify the text to write to the file. You can specify a JavaScript function to call that will return the text by entering:</description>
                    <example code=""><![CDATA[Javascript:your_function_name]]></example>
                </case>
                <case>
                    <description>For example:</description>
                    <example code=""><![CDATA[Javascript:getTextToWrite]]></example>
                </case>
                <case>
                    <title nested="2">Append to existing file</title>
                    <description>If the file already exists should the text be appended to the file? If true, text will appended, If false, existing file will be removed first. You can specify a JavaScript function to return true/false by entering:</description>
                    <example code=""><![CDATA[Javascript:your_function_name]]></example>
                </case>
                <case>
                    <description>For example:</description>
                    <example code=""><![CDATA[Javascript:getAppendRule]]></example>
                </case>
                <case>
                    <title nested="2">Starting byte location</title>
                    <description>(Optional) Specify the byte position (0 based) at which you want to start reading in the file. If you leave this value (or the 'Ending byte location') blank or the entire file will be read. You can specify a JavaScript function to call that will return this value by entering:</description>
                    <example code=""><![CDATA[Javascript:your_function_name]]></example>
                </case>
                <case>
                    <title nested="2">Ending byte location</title>
                    <description>(Optional) Specify the byte position (0 based) at which you want to end reading in the file. If you leave this value (or the 'Starting byte location') blank or the entire file will be read. You can specify a JavaScript function to call that will return this value by entering:</description>
                    <example code=""><![CDATA[Javascript:your_function_name]]></example>
                </case>
            </cases>
        </section>
        <section>
            <title>Javascript Callback Functions Properties</title>
            <cases>
                <case>
                    <title nested="2">OnSuccess</title>
                    <description>Specify the JavaScript to execute once the action has completed successfully. If the *[ui:Action name]* was *[ui:Read File]*, your code can reference the '*[js:data]*' variable which is the contents of the file. If the *[ui:Action name]* action was *[ui:Get File System URI for Legacy Persistent Storage]*, your code can reference the '*[js:uri]*' variable which is the URI of the file system.</description>
                </case>
                <case>
                    <title nested="2">OnFailure</title>
                    <description>Specify the JavaScript to execute if the action fails.</description>
                </case>
            </cases>
        </section>
    </sections>
    <links>
        <link link="PhoneGap File System Actions File URI Based">PhoneGap - File System Actions (File URI Based)</link>
    </links>
    <see>
        <ref link="PhoneGap File System Actions File URI Based">PhoneGap - File System Actions (File URI Based)</ref>
        <ref link="action javascript for the ux">Action Javascript for the UX</ref>
    </see>
</page>