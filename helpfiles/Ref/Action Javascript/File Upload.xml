<page>
    <shortlink>File Upload</shortlink>
    <topic>File Upload</topic>
    <description>Upload a file to the server and store the file name or file contents in a field in a Grid, UX, or database table.</description>
    <sections>
        <section>
            <note>
                <p>If you want to upload multiple files or have more control over the file upload, see [File Upload - User Defined].</p>
                <p>If you wish to upload files to Amazon S3, see [File Upload - Amazon S3 Storage or Alpha Anywhere server].</p>
                <p>If you are uploading files in a PhoneGap mobile application, see [PhoneGap - File Upload].</p>
            </note>
        </section>
        <section>
            <title>Xbasic Event Handlers - Control Values</title>
            <description>In a UX component, when the server-side Xbasic events defined in the Action Javascript builder fire, the control values for all of the controls on the UX are available to the Xbasic code. For example, assume that the UX had a control called 'FIELD1'. In the Xbasic event handlers, you can reference this value as follows</description>
            <example><![CDATA[request.variables.v.r1.field1]]></example>
        </section>
        <section>
            <title>File Upload in a UX Component</title>
            <description>
                <p>In order to add an event handler that performs a file upload action, you must add a special [[File Upload/Download] control] to the UX component.</p>
                <p>The [File Upload/Download] control is in the Other Controls section of the Toolbox.</p>
            </description>
            <figure>
                <link>images/fileuploaddownload.jpg</link>
            </figure>
        </section>
        <section>
            <description>
                <p>Once you have added the [File Upload/Download] control, you can then use Action Javascript to define a File Upload action.</p>
                <p>The [File Upload/Download] control can be data bound (just like any other control). </p>
                <p>However, it is not required that the [File Upload/Download] control be data bound. If the control is not data bound, then then it is your responsibility to decide what to do with the uploaded binary data when the UX Component is submitted.</p>
                <p>If the [File Upload/Download] control is data bound, it can be bound to either a character field or a binary field. When the UX Component is submitted, the uploaded data will be saved into the corresponding bound field (assuming you have added a Save Record Server-side event handler to the AfterValidate event).</p>
                <p>If the [File Upload/Download] control is bound to a binary field, the binary contents of the uploaded file will be saved in the bound field.</p>
                <p>If the [File Upload/Download] control is bound to a character field, the filename of the uploaded file will be stored in the character field, and the uploaded file itself will be stored in the folder that you specified when you defined the File Upload Action. (Actually, the transformed filename, as specified by the 'Stored filename transformation expression' will be stored in the bound field).</p>
                <p>In the case where the [File Upload/Download] control is not data bound, your AfterValidate event handler can retrieve the binary data that was uploaded as follows (assuming that the Id of the [File Upload/Download] control is 'FILEUPLOAD_1'):</p>
            </description>
            <example><![CDATA[dim blobKey as c
'Every [File Upload/Download] control has an associated control with
'a '_A5FILEUPLOAD' name.
'After the file has been uploaded, it is stored in temporary session storage
'The 'key' for the data in session storage is stored in this hidden field.

blobKey = e.dataSubmitted.FILEUPLOAD_1__A5FILEUPLOAD
blobKey = word(blobKey,1,":")

dim blobUploaded as b
Session.GetDataFromFile(blobUploaded,blobKey)
Session.DeleteSessionFile(blobKey)

'You now have the uploaded file data in a variable called 'blobUploaded'
'Your event handler can process this data.]]></example>
        </section>
        <section>
            <title>File Upload Properties</title>
            <list>
                <item>
                    <name>Target [File Upload/Download] control</name>
                    <description>Specify the name of the control to which the file will be uploaded.</description>
                </item>
                <item>
                    <name>Upload target</name>
                    <description>Specify if the image should be uploaded to the Alpha Anywhere server, or to a cloud storage provider (e.g. Amazon S3).</description>
                </item>
                <item>
                    <name>Allowed file extensions</name>
                    <description>Specify a comma delimited list of allowed filename extensions. If the user uploads a file that does not match an allowed extension, the operation is aborted. If you leave this blank then any filetype can be uploaded as long as it is not on the disallowed list of file types.</description>
                </item>
                <item>
                    <name>Disallowed file extensions</name>
                    <description>Specify a comma delimited list of disallowed filename extensions. The user will not be able to upload a file with one of these extensions. You can only specify disallowed file types if the Allowed file types property is blank.</description>
                </item>
                <item>
                    <name>Invalid extension error message</name>
                    <description>Invalid extension error message property.</description>
                </item>
                <item>
                    <name>Upload folder</name>
                    <description>Specify the name of the folder where the uploaded file will be stored. You can use aliases in the name. If you enter a folder without a drive letter, the folder is assumed to be in the webroot. 
IMPORTANT: The folder that you specify here is a folder on the machine where your Application Server is running - not a folder on this machine! 
VERY IMPORTANT:If you have the Security Framework turned on and the upload folder is in the webroot, be sure to set the appropriate permissions for this upload folder and the files that it contains.
You can use a session variable to specify the upload folder.</description>
                </item>
                <item>
                    <name>File exists action</name>
                    <description>If the file that was uploaded already exists in the Upload folder, what action should be taken. You can either overwrite the existing file, or rename the uploaded file. Choices include *[ui:Overwrite]*, *[ui:Rename]*.</description>
                </item>
                <item>
                    <name>Field for object type</name>
                    <description>For embedded files, the file type of the embedded file must be stored in a field. Choices include.</description>
                </item>
                <item>
                    <name>Field for object description</name>
                    <description>(Optional) For embedded files, stores the filename of the file that is embedded in the target field. Choices include.</description>
                </item>
                <item>
                    <name>Control to store filename</name>
                    <description>Specify the name of the control where the uploaded filename will be stored. (Note: If your component has been bound to a table, this control will typically be set to not be updateable, whereas the target [File Upload/Download] control will be bound to the same field and will be set to updateable.) Choices include.</description>
                </item>
                <item>
                    <name>Stored filename transformation expression</name>
                    <description>Specify what value to store in the target field. This is typically some transformation of the file name of the uploaded file. If you leave this blank, the fully qualified filename is stored in the target field.</description>
                </item>
                <item>
                    <name>On Stored filename compute Xbasic function</name>
                    <description>(Optional) If you want complete control over the filename of the uploaded file, you can call an Xbasic function to compute the filename.</description>
                </item>
                <item>
                    <name>Maximum file size</name>
                    <description>Specify the maximum file size that can be uploaded. Specify value in bytes. Specify 0 if you do not want to restrict the size of the file that can be uploaded. IMPORTANT: Regardless of this settings, the server also specifies a maximum POST body size. The lower of this setting and your setting for this property will apply.</description>
                </item>
                <item>
                    <name>Maximum file size exceeded message</name>
                    <description>Specify the message to display to the user if the uploaded file exceeds the maximum allowed file size.</description>
                </item>
                <item>
                    <name>Show progress/allow cancel</name>
                    <description>On certain browsers it is possible to show progress while files are being uploaded and to allow the user to cancel the operation. IE9 and earlier does not support this feature.</description>
                </item>
                <item>
                    <name>Abort upload button label</name>
                    <description>Specify the text for the Abort button. This button allows a user to stop an upload before it has completed.</description>
                </item>
                <item>
                    <name>Abort upload message</name>
                    <description>Specify the message to show if the user aborts an upload.</description>
                </item>
                <item>
                    <name>Progress bar type</name>
                    <description>Specify the type of progress bar. The 'A5' bar uses a specially styled progress bar that blends well with the selected component style. If you are using certain styles (e.g. GrBlue, GrOlive, etc.) you way want to switch to the 'Basic' style. Choices include *[ui:A5]*, *[ui:Basic]*.</description>
                </item>
            </list>
        </section>
        <section>
            <title>Amazon S3 Storage Properties Properties</title>
            <list>
                <item>
                    <name>Method for specifying Amazon S3 credentials and bucket</name>
                    <description>Should the Amazon S3 credentials and bucket be read from a named storage connection string, or do you want to specify explict values for the access key, secret and bucket. Choices include *[ui:Named Storage Connection String]*, *[ui:Explicit]*.</description>
                </item>
                <item>
                    <name>Storage connection string</name>
                    <description>Specify the named storage connection string. IMPORTANT: The storage connection string MUST NOT BE ENCRYPTED. TIP: To define a storage connection string, go to the Tools menu in the Web Projects Control Panel.</description>
                </item>
                <item>
                    <name>Access key</name>
                    <description>Specify the access key.</description>
                </item>
                <item>
                    <name>Secret</name>
                    <description>Specify the secret.</description>
                </item>
                <item>
                    <name>Bucket</name>
                    <description>Specify the bucket.</description>
                </item>
                <item>
                    <name>Maximum file size</name>
                    <description>Specify the maximum size file that the user can select. Set to -1 for no maximum.</description>
                </item>
                <item>
                    <name>Max file size exceeded error message</name>
                    <description>Specify message to show if user selects a file that is too big. You can use language or text dictionary tags. Your message can include these placeholders: [filename], [filesize], [maxfilesize]. Leave blank if you have defined a custom Javascript onValidate event handler.</description>
                </item>
                <item>
                    <name>Max total file size</name>
                    <description>DOES NOT APPLY -- MULTIPLE NEVER ALLOWED Specify the maximum total size of all selected files. Set to -1 for no maximum.</description>
                </item>
                <item>
                    <name>Max total file size exceeded error message</name>
                    <description>DOES NOT APPLY -- MULTIPLE NEVER ALLOWED Specify message to show if all files selected exceed the max allowed. You can use language or text dictionary tags. Your message can include these placeholders: [filecount], [totalfilesize] and [maxtotalfilesize]. Leave blank if you have defined a custom Javascript onValidate event handler.</description>
                </item>
                <item>
                    <name>Allowed file types</name>
                    <description>Enter a comma delimited list of allowed file extensions. Leave blank to allow all file extentions.</description>
                </item>
                <item>
                    <name>Invalid file type error message</name>
                    <description>Specify message to show if all files selected exceed the max allowed. You can use language or text dictionary tags. Your message can include these placeholders: [filename], [filetype]. Leave blank if you have defined a custom Javascript onValidate event handler.</description>
                </item>
                <item>
                    <name>Display progress during file upload</name>
                    <description>Specify if progress should be shown while file(s) are being uploaded.</description>
                </item>
                <item>
                    <name>Allow cancel</name>
                    <description>Specify if the user can cancel an upload while the file is being uploaded.</description>
                </item>
                <item>
                    <name>Progress indicator type</name>
                    <description>Specify the progress indicator style. 'Text' - display the percentage as text, 'Bar' - display a progress bar. Choices include *[ui:Text]*, *[ui:Bar]*.</description>
                </item>
                <item>
                    <name>Progress bar color</name>
                    <description>Specify the progress bar color.</description>
                </item>
                <item>
                    <name>Progress bar width</name>
                    <description>Specify the progress bar width. Use CSS units.</description>
                </item>
                <item>
                    <name>Placeholder for progress indicator</name>
                    <description>Specify the name of a Placeholder control where the progress indicator should be shown. In the case of a Grid component, specify the name of a Static Text control which will act as a placeholder.</description>
                </item>
                <item>
                    <name>Authenticated read</name>
                    <description>Specify if authentication is required to read the object once it has been uploaded to S3</description>
                </item>
                <item>
                    <name>Format of value to store in target field</name>
                    <description>You can either store the URL for the object in the field (e.g. https://BUCKETNAME.s3.amazonaws.com/OBJECTNAME, or you can store a specially formatted JSON string that defines the object name and the connection string. For example:  {cs: 'alphamediacapture',object: '4282.JPG',source: 'S3'} Choices include *[ui:URL]*, *[ui:JSON]*.</description>
                </item>
                <item>
                    <name>Temporary message to show field after upload completes</name>
                    <description>Specify the text to show in the target field after the upload has completed, but before the record is saved. Your text can use [objectName] as a placeholder for the name of the object on S3.</description>
                </item>
            </list>
        </section>
        <section>
            <title>Customization - File Select Window Properties</title>
            <list>
                <item>
                    <name>Window title</name>
                    <description>Specify the title of the File Select dialog window.</description>
                </item>
                <item>
                    <name>Window position</name>
                    <description>Specify where the window will be shown.</description>
                </item>
                <item>
                    <name>Auto upload</name>
                    <description>Specify if the file should be uploaded as soon as the user has selected the file to upload. Alternatively, the upload will only start once the user has clicked on the 'Upload' button.</description>
                </item>
                <item>
                    <name>Working message</name>
                    <description>Specify the working message to display while the file is being uploaded to the server</description>
                </item>
                <item>
                    <name>Upload button</name>
                    <description>Specify the button text for the 'Upload' button.</description>
                </item>
                <item>
                    <name>Watermark</name>
                    <description>Specify the watermark text that appears in the file box. If you use a langauge tag for the text, be sure that the language definition returns a URL encoded value. See hyperlink below for more help.</description>
                </item>
                <item>
                    <name>File select button image</name>
                    <description>Select the image that appears on the button to open the file select window.</description>
                </item>
                <item>
                    <name>Prompt</name>
                    <description>Specify the text for the prompt that appears above the file box.  If you use a langauge tag for the text, be sure that the language definition returns a URL encoded value. See hyperlink below for more help.</description>
                </item>
                <item>
                    <name>Window height</name>
                    <description>Specify the height for the pop-up File Select window.</description>
                </item>
                <item>
                    <name>Window width</name>
                    <description>Specify the width for the pop-up File Select window.</description>
                </item>
                <item>
                    <name>Cancel button label</name>
                    <description>Specify the label for the Cancel button. Before the file is uploaded, this button closes the dialog. If a confirmation dialog is show after the file is uploaded, this button aborts the action and does not save the uploaded file to the database.</description>
                </item>
            </list>
        </section>
        <section>
            <title>Customized Error Messages Properties</title>
            <list>
                <item>
                    <name>Table not updateable</name>
                    <description>Specify the message to show if the table is not updateable because the logged in user does not have permission to update this table.</description>
                </item>
                <item>
                    <name>Field not updateable</name>
                    <description>Specify the message to show if the field is not updateable because the logged in user does not have permission to update this field.</description>
                </item>
                <item>
                    <name>Session expired</name>
                    <description>Specify the message to show if the session has expired. This error could occur if the 'Close File Select window after upload' property is false, the user uploads a file, but then does not click the 'OK' to save button immediately.</description>
                </item>
                <item>
                    <name>File Upload on New record row</name>
                    <description><![CDATA[Specify the message to show if the user tries to upload a file to a new record row. Files can only be uploaded to existing rows. Typically, you would want to hide the button that invokes the File Upload action for new record rows by specifying a 'Client-side show/hide expression' (e.g. data.rowNumber > 0)]]></description>
                </item>
            </list>
        </section>
        <section>
            <title>Server-side Events Properties</title>
            <list>
                <item>
                    <name>After upload</name>
                    <description>Specify the name of the Xbasic function to call after the file has been uploaded. This Xbasic function can be defined in the 'Xbasic function declarations' section.</description>
                </item>
            </list>
        </section>
        <section>
            <title>Javascript Properties</title>
            <list>
                <item>
                    <name>Target object name on Amazon S3</name>
                    <description>You can define a function that returns the name of the object in Amazon S3. By default, the filename of the file on the client will be used. Your code can reference e.name, e.size and e.type (the client-side name, size and mime-type of the selected file). Your function must return the name to use. The name can include a folder. For example: return 'myfolder1/' + e.name. This will use the same name as the client-side file but the object will be stored in a folder called 'myfolder1'. NOTE: The target name on Amazon will be available to other Javascript functions in the e.targetName property.</description>
                </item>
                <item>
                    <name>Before file select</name>
                    <description>Fires before the user selects file(s). If the Javascript contains 'return false;', the file upload is aborted.</description>
                </item>
                <item>
                    <name>After file select</name>
                    <description>Fires after file(s) have been selected, but before any files have been uploaded. If your code includes 'return false' the upload is aborted. You code can reference 'e' - an array of objects with information about each file selected. Each item in the array contains these properties: name, size, type.</description>
                </item>
                <item>
                    <name>On Progress</name>
                    <description>Fires when another 'chunk' of the file being uploaded has been sent. This event allows you to write custom progress displays. Your code can reference these variables: e.percent - percentage complete, e.message - message describing the current state of the upload operation, e.name - name of the file being uploaded, e.number - if more than one file was selected, the number of file, e.size - the file size and e.type - the mime-type of the file,  e.targetName - the name to use on Amazon to store the file (usually the same as e.name unless your 'Target name on Amazon S3' function returned a different name or specified a folder)</description>
                </item>
                <item>
                    <name>On Error</name>
                    <description>Fires if there is any type of error. Your Javascript can reference e.errorText,  e.errorCode - the XHR error code and e.fileObject - an object with properties (such as name, size, type) for the file on which the error occured.</description>
                </item>
                <item>
                    <name>On Upload Complete</name>
                    <description>Fires after the selected file has been uploaded. Your code can reference this variables: e.name - name of the file just uploaded, e.type - mime-type, e.size - file size, e.targetName - name used on Amazon.</description>
                </item>
                <item>
                    <name>On validate error</name>
                    <description>Fires if any of the selected files violate a validation rule. Your Javascript can refer to e.violationType ( can be 'size', 'totalSize' or 'type'), e.name, e.size and e.type.</description>
                </item>
            </list>
        </section>
        <section>
            <title>Client-side Events Properties</title>
            <list>
                <item>
                    <name>Before upload</name>
                    <description>Specify the name of the Javascript function to call before the file upload window is shown. If this function returns false, the upload is aborted.</description>
                </item>
                <item>
                    <name>After upload</name>
                    <description>Specify the name of the Javascript function to call after the file has been sucessfully uploaded.</description>
                </item>
            </list>
        </section>
        <section>
            <title>Videos</title>
            <videos>
                <title>'File Upload' Action in Action Javascript</title>
                <description>
                    <p>This video shows how you can configure the UX component to upload a file to the Alpha Anywhere server and then store the filename of the uploaded file in a character field in the table to which the UX component is data bound.</p>
                </description>
                <date>2015-02-15</date>
                <video>
                    <name>Watch Video</name>
                    <link>https://www.viddler.com/v/289f6d90</link>
                </video>
            </videos>
        </section>
        <section>
            <videos>
                <title>Tutorial - Uploading Files and Images to a Data Bound UX Component</title>
                <description>
                    <p> When you upload a file or an image to a data bound UX component, the assumption is that you want to store the uploaded image or file in the record to which the UX component is bound. You can either store the binary data that was uploaded in a field in the record, or you can save the binary data that was uploaded into a file on the server and then store the filename of the file in a character field in the record.</p>
                    <p> In this video we show how image upload and file upload to a data bound UX component can be done. Images and files are uploaded to both binary and character fields in the record.</p>
                </description>
                <date>2014-10-02</date>
                <video>
                    <name>Watch Video</name>
                    <link>https://www.viddler.com/v/364cbfd5</link>
                </video>
                <resources>
                    <resource>
                        <link>http://www.ajaxvideotutorials.com/V12Videos/ux_image_file_upload.zip</link>
                    </resource>
                </resources>
            </videos>
        </section>
        <section>
            <note>
                <p>The zip file also contains the MySQL SQL script to create the table that the UX component is based on.</p>
            </note>
        </section>
    </sections>
    <links>
        <link link="ux controls other controls file upload download">[File Upload/Download] control</link>
        <link link="file upload - user defined">File Upload - User Defined</link>
        <link link="file upload - amazon s3 storage or alpha anywhere server">File Upload - Amazon S3 Storage or Alpha Anywhere server</link>
        <link link="phonegap%20-%20file%20upload">PhoneGap - File Upload</link>
    </links>
    <see>
        <ref link="ux controls other controls file upload download">File Upload/Download Control</ref>
        <ref link="file upload - user defined">File Upload User Defined</ref>
        <ref link="file upload - amazon s3 storage or alpha anywhere server">File Upload - Amazon S3 Storage or Alpha Anywhere Server</ref>
       <ref link="action javascript for the ux">Action Javascript for the UX</ref>
       <ref link="action javascript in the grid">Action Javascript in the Grid</ref>
    </see>
</page>