<page>
    <shortlink>Update Insert or Delete data for use with an UNBOUND component</shortlink>
   <topic>Update, Insert or Delete data. (for use with an UNBOUND component)</topic>
   <description>Updates, inserts or deletes a record in a table using data submitted from a control on a UX component.
       The UX component need not have been 'Data Bound' in order to use this action.
       Contrast this action with the 'Save Submitted Data to Table(s)' action in Server-side action scripting which is used for saving
       data to tables in a UX component that has been 'Data Bound'. 
   </description>
   
   <sections>
     
           <section>
            <description>Used with the UX component.</description>
       </section>
       
  <section>
            <title>Operation type Properties</title>
            <list>
                <item>
                    <name>Operation type</name>
                    <description>Specify the type of action. Choose 'AUTO-DECIDE' if the action will be determined at run-time based on the value of a field or variable. Choices include *[ui:UPDATE]*, *[ui:INSERT]*, *[ui:DELETE]*, *[ui:AUTO-DECIDE]*.</description>
                </item>
                <item>
                    <name>Auto-decide technique</name>
                    <description>Specify the method to use to determin what the 'AUTO-DECIDE' action will be. You can either call a Javascript function, or check the value in a control. The control is typically bound to the primary key. If the control has a non-blank value (i.e. the record has a primary key value), then the operation is an UPDATE, else, it is an INSERT. Choices include *[ui:Check value in a control]*, *[ui:Call a Javascript function]*.</description>
                </item>
                <item>
                    <name>Auto-decide javascript function</name>
                    <description>Specify the name of the Javascript function to call to determine the operation type. This function will be called when the Ajax callback takes place. The function should return 'INSERT', 'UPDATE' or 'DELETE'.</description>
                </item>
                <item>
                    <name>Auto-decide control to watch</name>
                    <description>Specify the name of the control to watch. The control is typically bound to the primary key. If the control has a non-blank value (i.e. the record has a primary key value), then the operation is an UPDATE, else, it is an INSERT.</description>
                </item>
            </list>
        </section>
        <section>
            <title>Table type Properties</title>
            <list>
                <item>
                    <name>Type</name>
                    <description>Only AlphaDAO against SQL databases is supported for this action. Choices include *[ui:AlphaDAO]*.</description>
                </item>
            </list>
        </section>
        <section>
            <title>Table Definition (DBF) Properties</title>
            <list>
                <item>
                    <name>Tablename</name>
                    <description>Specify the DBF filename.</description>
                </item>
            </list>
        </section>
        <section>
            <title>Table Definition (AlphaDAO) Properties</title>
            <list>
                <item>
                    <name>Connection string</name>
                    <description>Connection string property.</description>
                </item>
                <item>
                    <name>Tablename</name>
                    <description>Specify the table name.</description>
                </item>
                <item>
                    <name>Primary key</name>
                    <description>Primary key property.</description>
                </item>
                <item>
                    <name>Primary key is auto-increment</name>
                    <description>Specify if the primary key is an auto-increment value.</description>
                </item>
                <item>
                    <name>Use sequences</name>
                    <description>Specify if the primary key value is obtained from a sequence</description>
                </item>
                <item>
                    <name>Sequence name</name>
                    <description>Certain databases, such as Oracle, use sequences for auto-increment values.</description>
                </item>
                <item>
                    <name>Get primary key from</name>
                    <description>Specify where to get the Primary Key value to identify the record to be updated or deleted. The 'SubmitData-OldValue' option will use the original value in the control before the user made any edits to the control. Choices include *[ui:SubmittedData-NewValue]*, *[ui:SubmittedData-OldValue]*, *[ui:Explicit]*, *[ui:SessionVariables]*.</description>
                </item>
                <item>
                    <name>Primary key data map</name>
                    <description>Specify how the primary key fields in the target table are mapped to controls in this Component.
For INSERTS, if the Primary Key is auto-increment, you do not need to specify this property. However, on INSERTS even if the Primary Key is auto-increment, you might still want to specify the property if you want the user to be able to assign an explicit value to the auto-increment field (which is somewhat unusual, but nevertheless still allowed in some databases).</description>
                </item>
                <item>
                    <name>Explicit primary key value</name>
                    <description>Specify the primary key of the record to update or delete. If the primary key has more than one column, use ||| ( 3 pipes) to delimit segments: e.g. John|||Smith.</description>
                </item>
                <item>
                    <name>Session variable</name>
                    <description>Specify the name of the session variable that contains the primary key of the record to update or delete. If the primary key has more than one column, use ||| ( 3 pipes) to delimit segments: e.g. John|||Smith.</description>
                </item>
            </list>
        </section>
        <section>
            <title>Update Settings Properties</title>
            <list>
                <item>
                    <name>Only update dirty fields</name>
                    <description>Specify if all fields or only dirty fields should be updated.</description>
                </item>
                <item>
                    <name>Validate fields before update</name>
                    <description>Should the field validation rules be evaluated before the record is updated? If checked, then the update only occurs if there are no validation errors.</description>
                </item>
                <item>
                    <name>Refresh controls after update</name>
                    <description>Specify if the control that were bound to fields that were updated should be refreshed after the update has taken place.</description>
                </item>
                <item>
                    <name>Set controls to clean after update</name>
                    <description>Specify the controls that were bound to fields that were updated should be set to 'clean' after the update has taken place</description>
                </item>
                <item>
                    <name>Javascript - after update success</name>
                    <description>Specify the name of the Javascript function to call after the record was sucessfully updated.</description>
                </item>
                <item>
                    <name>Javascript - after update failed</name>
                    <description>Specify the name of the Javascript function to call if the udpdate failed.</description>
                </item>
            </list>
        </section>
        <section>
            <title>Delete Settings Properties</title>
            <list>
                <item>
                    <name>Xbasic - before delete</name>
                    <description>Specify the name of the Xbasic function to call before the delete is executed. The function prototype must pass in the 'e' object.</description>
                </item>
                <item>
                    <name>Xbasic - after delete</name>
                    <description>Specify the name of the Xbasic function to call after the delete is executed. The function prototype must pass in the 'e' object.</description>
                </item>
                <item>
                    <name>Javascript - after delete success</name>
                    <description>Specify the name of the Javascript function to call after the record was sucessfully deleted.</description>
                </item>
                <item>
                    <name>Javascript - after delete failed</name>
                    <description>Specify the name of the Javascript function to call if the delete failed.</description>
                </item>
            </list>
        </section>
        <section>
            <title>Insert Settings Properties</title>
            <list>
                <item>
                    <name>Validate fields before insert</name>
                    <description>Should the field validation rules be evaluated before the record is inserted? If checked, then the insert only occurs if there are no validation errors.</description>
                </item>
                <item>
                    <name>Refresh controls after insert</name>
                    <description>Specify if the control that were bound to fields that were inserted should be refreshed after the insert has taken place.</description>
                </item>
                <item>
                    <name>Set controls to clean after insert</name>
                    <description>Specify the controls that were bound to fields that were inserted should be set to 'clean' after the insert has taken place</description>
                </item>
                <item>
                    <name>Javascript - after insert success</name>
                    <description>Specify the name of the Javascript function to call after the record was sucessfully inserted. The Javascript function takes 'e' as an input parameter. The primary key of the record inserted is available in 'e.primaryKey'</description>
                </item>
                <item>
                    <name>Javascript - after insert failed</name>
                    <description>Specify the name of the Javascript function to call if the udpdate failed.</description>
                </item>
            </list>
        </section>
        <section>
            <title>Data Binding Properties</title>
            <list>
                <item>
                    <name>Data binding</name>
                    <description>Specify how fields in the target table are mapped to controls in this Component.</description>
                </item>
            </list>
        </section>
        <section>
            <title>Server-side Events Properties</title>
            <list>
                <item>
                    <name>Insert - Before insert SQL computed</name>
                    <description>This event is typically used for server-side data validation before the insert is executed. Specify the name of the Xbasic function to call before the insert SQL is computed. Allows you to modify data in the e.datasubmitted object. The function prototype must pass in the 'e' object.</description>
                </item>
                <item>
                    <name>Insert - Before insert</name>
                    <description>Specify the name of the Xbasic function to call before the insert is executed. The function prototype must pass in the 'e' object.</description>
                </item>
                <item>
                    <name>Insert - After insert</name>
                    <description>Specify the name of the Xbasic function to call after the insert is executed. The function prototype must pass in the 'e' object.</description>
                </item>
                <item>
                    <name>Update - Before update SQL computed</name>
                    <description>This event is typically used for server-side data validation before the update is executed. Specify the name of the Xbasic function to call before the update SQL is computed. Allows you to modify data in the e.datasubmitted object. The function prototype must pass in the 'e' object.</description>
                </item>
                <item>
                    <name>Update - Before update</name>
                    <description>Specify the name of the Xbasic function to call before the update is executed. The function prototype must pass in the 'e' object.</description>
                </item>
                <item>
                    <name>Update - After update</name>
                    <description>Specify the name of the Xbasic function to call after the update is executed. The function prototype must pass in the 'e' object.</description>
                </item>
                <item>
                    <name>Delete - Before delete</name>
                    <description>Specify the name of the Xbasic function to call before the delete is executed. The function prototype must pass in the 'e' object.</description>
                </item>
                <item>
                    <name>Delete - After update</name>
                    <description>Specify the name of the Xbasic function to call after the delete is executed. The function prototype must pass in the 'e' object.</description>
                </item>
            </list>
        </section>
        <section>
            <title>After Save Confirmation Properties</title>
            <list>
                <item>
                    <name>Show a fade out message after record save</name>
                    <description>Specify if a confirmation message should be shown after a record is saved. Note: Message will not be shown if the action redirects to another page.</description>
                </item>
                <item>
                    <name>Message text - Update</name>
                    <description>Specify the text of the confirmation message.</description>
                </item>
                <item>
                    <name>Message text - Insert</name>
                    <description>Specify the text of the confirmation message.</description>
                </item>
                <item>
                    <name>Message text - Delete</name>
                    <description>Specify the text of the confirmation message.</description>
                </item>
                <item>
                    <name>Placeholder id where message is to be shown</name>
                    <description>Specify the name of a placeholder where the confirmation message should be shown. 
TIP: To add a placeholder to the component select the [Placeholder] control in the 'Other Controls' section of the toolbox.</description>
                </item>
                <item>
                    <name>Mesage duration</name>
                    <description>Specify the duration of the message in milliseconds. For example, 2000 is 2 seconds.</description>
                </item>
                <item>
                    <name>Message style</name>
                    <description>Specify the style for the message. 'Default' will style the message based on the current component style. 'None' will not apply any style. You can add your own styling to the message text itself. Choices include *[ui:Default]*, *[ui:None]*.</description>
                </item>
            </list>
        </section>
        <section>
            <title>Store Current Location Information Properties</title>
            <list>
                <item>
                    <name>Submit location</name>
                    <description>Indicate if the current location should be submitted. (The user will be prompted for permission to submit location information). The location information is obtained from the browser, or from the device on which the component is running.</description>
                </item>
                <item>
                    <name>Store location data in fields in record</name>
                    <description>Specify if the submitted location information should be stored in fields in the record you are editing.</description>
                </item>
                <item>
                    <name>Latitude field</name>
                    <description>Specify the name of the field where the latitude value should be stored.</description>
                </item>
                <item>
                    <name>Longitude field</name>
                    <description>Specify the name of the field where the longitude value should be stored.</description>
                </item>
                <item>
                    <name>Encode 'location' field with a location object</name>
                    <description>If the table has a geography/geometry field, should this field be encoded using the lat/lng values that were submitted.</description>
                </item>
                <item>
                    <name>Location field</name>
                    <description>Specify the name of the location field. (This is a field with geography/geometry data type).</description>
                </item>
                <item>
                    <name>Store data for which operation types</name>
                    <description>Specify if the current location information should be stored only when Inserting a new record, or when Inserting or Updating a record. Choices include *[ui:InsertOnly]*, *[ui:InsertAndUpdate]*.</description>
                </item>
            </list>
        </section>
        <section>
            <title>Refresh List Controls Properties</title>
            <list>
                <item>
                    <name>Refresh List controls</name>
                    <description>After data is edited, specify if there are any List controls on the component that you want to refresh so that the data in the List controls reflect the edits that were saved.</description>
                </item>
                <item>
                    <name>List controls to refresh</name>
                    <description>Specify the ids of the List controls you want to refresh.</description>
                </item>
            </list>
        </section>
        <section>
            <title>Debugging and Global Errors Properties</title>
            <list>
                <item>
                    <name>Display debugging info</name>
                    <description>Specify if the SQL statements (for SQL tables), or Xbasic code (for .dbf tables) should be shown.
Note: If the 'After submit action' is set to redirect, then you will not see the debugging information (unless there is an error), because control will be redirected to the target page.</description>
                </item>
                <item>
                    <name>Debugging information placeholder</name>
                    <description><![CDATA[Specify where debugging informatin should be shown. If you are working in an application that uses Panels, you will typically put a placeholder in the Panel to show debugging information in the appropriate panel. Set to <Default> for the default placement of debugging information.]]></description>
                </item>
                <item>
                    <name>Global errors placeholder</name>
                    <description><![CDATA[Specify where global errors (if a commit error that is not specific to a particular field) should be displayed. If you are working in an application that uses Panels, you will typically put a placeholder in the Panel to show Global errors in the appropriate panel. Set to <Default> for the default placement of global errors.]]></description>
                </item>
            </list>
        </section>
       
   </sections>
   
   
    <see>
       <ref>Action Javascript for the UX</ref>
   </see>
   
</page>