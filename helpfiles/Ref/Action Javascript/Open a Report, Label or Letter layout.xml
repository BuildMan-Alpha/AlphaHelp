<page build="0">
    <shortlink>Open a Report, Label or Letter layout</shortlink>
    <topic>Open a Report, Label or Letter layout</topic>
    <description>Displays a report, label or letter layout as a PDF file using the Acrobat PDF reader. The report is displayed in either a pop-up window or in a DIV on the current page.</description>
    <sections>
        <section>
            <title>Layout Print Definition Properties</title>
            <list>
                <item>
                    <name>Report name</name>
                    <description>Specify the report (Report, Label or Letter) name.</description>
                </item>
                <item>
                    <name>Initial view</name>
                    <description>
                        <p>Specify if the report should be rendered as as a PDF document, or as HTML. (For best performance, HTML is recommended for 'Layout Table' reports)</p>
                        <p>IMPORTANT: The 'HTML' option is NOT SUPPORTED for 'Letters', 'Labels' and 'Reports' that are not designed using the 'Layout Table' editor. Choices include *[ui:PDF]*, *[ui:HTML]*, *[ui:HTML-Paged]*.</p>
                    </description>
                </item>
                <item>
                    <name>Filter</name>
                    <description>Specify if the report should be filtered. (This filter is in addition to any filter that was defined as part of the report layout).</description>
                </item>
                <item>
                    <name>Order</name>
                    <description>Specify the report order. If you specify an order here it will override the order defined in the report layout.</description>
                </item>
                <item>
                    <name>SQL Filter</name>
                    <description>
                        <p>Specify if the report should be filtered. This filter must be defined using SQL syntax. It is executed on the Database Server. (This filter is in addition to any filter that was defined as part of the report layout).</p>
                        <p>If the report is being created in a Grid component, you can use the function *[xb:currentGridFilter()]* to filter the Report using the Grid filter.</p>
                        <p>If the report is being created for a List control, you can use the function *[xb:currentListFilter("LIST_NAME")]* to filter the Report using the List's filter.</p>
                    </description>
                </item>
                <item>
                    <name>SQL Order</name>
                    <description>
                        <p>Specify the report order. If you specify an order here it will override the order defined in the report layout.</p>
                        <p>You can use the function *[xb:currentGridOrder()]* to order the Report using the Grid order.</p>
                        <p>If the report is being created for a List control, you can use the function *[xb:currentListOrder("LIST_NAME")]* to order the Report using the List's order.</p>
                    </description>
                </item>
                <item>
                    <name>Local Filter</name>
                    <description>The local filter is executed after the data is retrieved from the SQL database. This filter must be specified using Xbasic syntax. If possible, you should use a SQL Filter in preference to a Local Filter - it is much more efficient.</description>
                </item>
                <item>
                    <name>Local Order</name>
                    <description>The local order is applied after the data is retrieved from the SQL database. This order must be specified using Xbasic syntax.</description>
                </item>
                <item>
                    <name>PDF Options</name>
                    <description>PDF Options property.</description>
                </item>
                <item>
                    <name>Local argument definitions</name>
                    <description>Local argument definitions property.</description>
                </item>
                <item>
                    <name>Argument bindings</name>
                    <description>Argument bindings property.</description>
                </item>
                <item>
                    <name>PDF open parameters</name>
                    <description>Specify parameter to control how the PDF is displayed when it is initially rendered. You can set properties such as the zoom level. Not all PDF readers support these properties.</description>
                </item>
            </list>
        </section>
        <section>
            <title>HTML Report Viewer Options Properties</title>
            <list>
                <item build="5227">
                    <name>Has window close button</name>
                    <description>If checked, displays a close button on the window toolbar for the HTML report. It is recommended to add a close button if the Window title bar has been turned off.</description>
                </item>
                <item build="5227">
                    <name>Close button text</name>
                    <description>The text shown in the close button. This property is only available if *[ui:Has window close button]* has been checked.</description>
                </item>
                <item>
                    <name>Print as PDF</name>
                    <description>Show a button on the HTML Report viewer to make a callback and render the report as a PDF document.</description>
                </item>
                <item>
                    <name>Export to Excel</name>
                    <description>Show a button to export the Report to Excel</description>
                </item>
                <item>
                    <name>Export to Word</name>
                    <description>Show a button to export the Report to Word</description>
                </item>
                <item>
                    <name>Export to Text</name>
                    <description>Show a button to export the Report to text file</description>
                </item>
                <item>
                    <name>Print</name>
                    <description>Show a button to print the HTML report.</description>
                </item>
                <item>
                    <name>Report Bookmarks button type</name>
                    <description>If the report you are viewing has bookmarks, the bookmarks are shown in a Panel. If the report container is too narrow to show the Bookmarks Panel, the Panel is automatically collapsed, and a button is shown to display the Bookmarks Panel. Specify the button style. Choices include *[ui:Text]*, *[ui:Image]*.</description>
                </item>
                <item>
                    <name>Report Bookmarks button text</name>
                    <description>Specify the text for the Bookmarks button.</description>
                </item>
                <item>
                    <name>Report Bookmarks button image</name>
                    <description>Specify the text for the Bookmarks button.</description>
                </item>
                <item>
                    <name>Report Bookmarks panel width</name>
                    <description>Specify the width for the Bookmarks Panel. Use CSS syntax (not %). If there is insufficient space to show the Panel, it will be automatically collapsed and can then be shown by clicking on the Bookmarks button.</description>
                </item>
                <item>
                    <name>Maximum records to display</name>
                    <description>Specify the maximum number of records to display in the HTML report. Enter 0 to see all records. Limiting the number of records will allow the report to display faster.</description>
                </item>
                <item>
                    <name>'More records' message</name>
                    <description>Specify the message to show if there are more records in the report than the number in the display limit. The message will not show if the total records in the report is less that the number set in the display limit. [DisplayRecords] is a placeholder for the number of records to display. [TotalRecords] is a placeholder for the total number of records in the report.</description>
                </item>
                <item>
                    <name>'More records' message container style</name>
                    <description>Specify the in-line style for the container that holds the 'More records' message.</description>
                </item>
            </list>
        </section>
        <section>
            <title>Target Window, DIV, Tabbed UI Pane or Panel Properties</title>
            <list>
                <item>
                    <name>Target</name>
                    <description>Specify if the report should be opened in a pop-up window, a DIV on the page, a Panel or (if the component is running in a Tabbed UI) in a new Tabbed UI pane. (If you choose the 'Tabbed UI Pane' option, and the component is not running inside a Tabbed UI, it will be opened in a modeless pop-up window). Choices include.</description>
                </item>
                <item>
                    <name>Target Panel</name>
                    <description>Specify the Panel Id.</description>
                </item>
                <item>
                    <name>Target DIV ID</name>
                    <description>Specify the ID of the target DIV. This DIV can be in the Grid component (for example, in a free-form edit region), or on the .a5w page that contains the Grid component. TIP: If you want to specify a DIV that is inside a freeform edit region in a Grid cell, use the '{grid.rowID}' placeholder in the DIV id. For example: 'div1_Row{grid.rowID}'. This will ensure that each row has a uniquely named DIV in which the target page can be displayed.</description>
                </item>
                <item>
                    <name>Parent Panel Navigator</name>
                    <description>Specify the Id of the parent Panel Navigator. The dynamic Panel will be added to this Panel Navigator.</description>
                </item>
                <item>
                    <name>Dynamic Panel Title</name>
                    <description>Specify the title for the Dynamic Panel.</description>
                </item>
                <item>
                    <name>User can close dynamic panel</name>
                    <description>(Only applies if the target Panel Navigator has been configured to use a Tab Band) Specify if the label for the dynamically added Panel has a 'close' icon that allows the user to close the dynamically added Panel.</description>
                </item>
                <item>
                    <name>Working message placement</name>
                    <description>Specify the panel where the wait message should be shown. You should chose a Panel that is currently visible, not a Panel that will be animated into view when the component is rendered.</description>
                </item>
                <item>
                    <name>Working message uses CSS3 animation?</name>
                    <description>Specify if the working message should be displayed using a CSS3 animation?</description>
                </item>
                <item>
                    <name>Working message animation size</name>
                    <description>Specify the size of the animation in pixels.</description>
                </item>
                <item>
                    <name>Can hide target DIV?</name>
                    <description>Specify the DIV can be hidden (to remove from view the target page after it has been opened in the DIV).</description>
                </item>
                <item>
                    <name>DIV hide hyperlink</name>
                    <description>Specify text for the hyperlink that hides the DIV where the target page is shown.</description>
                </item>
                <item>
                    <name>Target IFrame style</name>
                    <description>The target page will be opened in an IFrame inside the target DIV. Specify the inline style for the IFrame. You can set the IFrame's height and width in the style.</description>
                </item>
                <item>
                    <name>Report height</name>
                    <description>Specify the height of the report. The report container DIV will be resized to this height. Use CSS units.</description>
                </item>
                <item>
                    <name>Report width</name>
                    <description>Specify the width of the report. The report container DIV will be resized to this height. Use CSS units.</description>
                </item>
                <item>
                    <name>Window name</name>
                    <description>Set to &lt;Default&gt; to give the window a default name. If you give the window an explicit name (which must be unique), then you can easily get a pointer to the window to execute methods of the window object. Click the smart field for tips on how to name your window and for information on how to get a pointer to the window object.</description>
                </item>
                <item>
                    <name>Window type</name>
                    <description>Specify the window type. Popup windows will show in a moveable window on the page. Dropdown windows have no title bar and cannot be moved. By default, Dropdown windows open directly below the control that you click to open the window. Note: An Ajax window will NOT be blocked by a browser's internal protection against popup windows.</description>
                </item>
                <item>
                    <name>Lock overlay CSS class name</name>
                    <description>Specify the CSS class name to use for the overlay that is displayed behind the window. The overlay prevents the user from clicking on controls that are outside the window. Leave blank, or specify &lt;Default&gt; to use the default style. Specify &lt;Invisible&gt; to create an invisible overlay (has no color, but user is still prevented from clicking on controls off the window). By specifying a class that has a 'background' attribute, you can control the color of the overlay. For example: background: rgba(0,0,0,0) to create a transparent overlay.</description>
                </item>
                <item>
                    <name>Sub-theme</name>
                    <description>(Optional) Specify a sub-theme for the window. The sub-theme can select a different pre-defined window 'look'. If you leave this property blank the 'base' sub-theme is automatically selected.</description>
                </item>
                <item>
                    <name>Dock window</name>
                    <description>Docked windows 'stick' to an edge of the screen and remain in place even when the page is scrolled.</description>
                </item>
                <item>
                    <name>Dock location</name>
                    <description>Specify which edge of the screen the window is docked to. Choices include *[ui:Left]*, *[ui:Right]*, *[ui:Top]*, *[ui:Bottom]*.</description>
                </item>
                <item>
                    <name>Window position</name>
                    <description>Specify where the window will be shown.</description>
                </item>
                <item>
                    <name>Re-use existing window</name>
                    <description>Specify if multiple modeless windows can be opened, or only a single modeless window.</description>
                </item>
                <item>
                    <name>Window title</name>
                    <description>Specify the window title. The window title can contain data from fields in the current record. Enclose field values in curly braces. E.g. Customer - {lastname}. To reference values from a column in a List control use this syntax: {LIST::ListName::ColumnName} (e.g. {LIST::MYLIST1::LASTNAME} )</description>
                </item>
                <item>
                    <name>Window title show</name>
                    <description>Specify if the window title should be shown or hidden.</description>
                </item>
                <item>
                    <name>Window title position</name>
                    <description>Specify if the window title should appear at the top or bottom of the window. Choices include *[ui:Top]*, *[ui:Bottom]*.</description>
                </item>
                <item>
                    <name>Window title direction</name>
                    <description>Specify if the direction is 'ltr' (left-to-right) (title on left, close button on right) or 'rtl' (right-to-left) (close button on left and title on right). Choices include *[ui:ltr]*, *[ui:rtl]*.</description>
                </item>
                <item>
                    <name>Window title has close button</name>
                    <description>Specify if the window title has a Close button.</description>
                </item>
                <item>
                    <name>Disable window move</name>
                    <description>Specify if the window cannot be moved by the user.</description>
                </item>
                <item>
                    <name>Pane title</name>
                    <description>Specify the tab pane title. The pane title can contain data from fields in the current record. Enclose field values in curly braces. E.g. Customer - {lastname}. To reference values from a column in a List control use this syntax: {LIST::ListName::ColumnName} (e.g. {LIST::MYLIST1::LASTNAME} )</description>
                </item>
                <item>
                    <name>Window height</name>
                    <description>Specify the window height. Use CSS syntax. For example: 3in, 10cm, 200px. If you do not set the height, the window will resize automatically to accommodate the window contents.</description>
                </item>
                <item>
                    <name>Window width</name>
                    <description>Specify the window height. Use CSS syntax. For example: 3in, 10cm, 200px. If you do not set the width, the window will resize automatically to accommodate the window contents.</description>
                </item>
                <item>
                    <name>Window is resizable</name>
                    <description>If checked, the user can resize the window.</description>
                </item>
                <item>
                    <name>Working message</name>
                    <description>Specify the text of the message to show in the window while the window waits for its contents to be generated. You can use this placeholder in the message: {reportName}</description>
                </item>
                <item>
                    <name>Working message icon</name>
                    <description>Specify the image to show in the window while the window waits for its contents to be generated.</description>
                </item>
                <item>
                    <name>Client-side file name</name>
                    <description>Specify the default filename on the user's computer (when they download the file). If you leave this blank, the filename of the server will be used as the default client-side filename.</description>
                </item>
                <item>
                    <name>Xbasic function</name>
                    <description>Specify the name of the Xbasic function to call after the report has been created.</description>
                </item>
                <item>
                    <name>DIV Id for progress messages</name>
                    <description>Specify the ID of a DIV where the 'working...' message, and any error messages, should be shown. This DIV can be in the Grid component (for example, in a free-form edit region), or on the .a5w page that contains the Grid component. TIP: If you want to specify a DIV that is inside a freeform edit region in a Grid cell, use the '{grid.rowID}' placeholder in the DIV id. For example: 'div1_Row{grid.rowID}'. This will ensure that each row has a uniquely named DIV in which the messages can be displayed.</description>
                </item>
                <item>
                    <name>Has pointer icon</name>
                    <description>Specify if the window has a pointer icon that points to the element that was clicked to show the window.</description>
                </item>
                <item>
                    <name>Pointer position</name>
                    <description>Specify the window edge that has the pointer icon. If you select 'Auto' the most appropriate edge is automatically selected. Choices include *[ui:Auto]*, *[ui:Top]*, *[ui:Bottom]*, *[ui:Left]*, *[ui:Right]*.</description>
                </item>
            </list>
        </section>
        <section>
            <title>Window Buttons Properties</title>
            <list>
                <item>
                    <name>Has custom toolbar buttons</name>
                    <description>Specify if the window has custom buttons in the window toolbar (at the bottom of the window).</description>
                </item>
                <item>
                    <name>Define buttons</name>
                    <description>Define the buttons that appear in the window toolbar (at the bottom of the window).</description>
                </item>
                <item>
                    <name>Buttons in-line style</name>
                    <description>In-line style for the buttons. TIP: To display the buttons left justified, enter an in-line style of: text-align:left;</description>
                </item>
            </list>
        </section>
        <section>
            <title>Optional Window Parts Properties</title>
            <list>
                <item>
                    <name>Show top bar</name>
                    <description>Specify if a top bar should be shown. (Displayed above the window body inside the body container).</description>
                </item>
                <item>
                    <name>Top bar HTML</name>
                    <description>Specify the HTML to show in the top bar.</description>
                </item>
                <item>
                    <name>Top bar style</name>
                    <description>Specify the in-line style for the top bar.</description>
                </item>
                <item>
                    <name>Show bottom bar</name>
                    <description>Specify if a top bar should be shown. (Displayed below the body inside the body container).</description>
                </item>
                <item>
                    <name>Bottom bar HTML</name>
                    <description>Specify the HTML to show in the top bar.</description>
                </item>
                <item>
                    <name>Bottom bar style</name>
                    <description>Specify the in-line style for the top bar.</description>
                </item>
                <item>
                    <name>Show header</name>
                    <description>Specify if a header should be shown. (Displayed above the window body inside the body container).</description>
                </item>
                <item>
                    <name>Header HTML</name>
                    <description>Specify the HTML to show in the header.</description>
                </item>
                <item>
                    <name>Header style</name>
                    <description>Specify the in-line style for the top bar.</description>
                </item>
                <item>
                    <name>Show footer</name>
                    <description>Specify if a footer should be shown. (Displayed below the body, the bottom bar, and below any user-defined buttons).</description>
                </item>
                <item>
                    <name>Footer HTML</name>
                    <description>Specify the HTML to show in the footer.</description>
                </item>
                <item>
                    <name>Footer style</name>
                    <description>Specify the in-line style for the footer.</description>
                </item>
            </list>
        </section>
        <section>
            <title>Client-side Events Properties</title>
            <list>
                <item>
                    <name>Before execute event</name>
                    <description>Specify the name of a Javascript function to call before the callback is made to open the target Report. This Javascript function will take 'ro' as an input parameter. 'ro' contains all of the settings for the target Report to be opened. The purpose of this function is to allow you to override any of the  properties of the passed-in 'ro' object.</description>
                </item>
                <item>
                    <name>After execute Javascript</name>
                    <description>Specify the Javascript code to run after the Report has been printed.</description>
                </item>
            </list>
        </section>
        <section>
            <title>Window Animation Properties</title>
            <list>
                <item>
                    <name>Animation</name>
                    <description>Specify if the window should be animated when it is shown or hidden. Note: If the window contains an IFrame, which in turn contains a PDF viewer, animation may not work well and should not be used.</description>
                </item>
                <item>
                    <name>Show animation style</name>
                    <description>Select the animation method to use when the window is shown. Fade and Slide use methods in jQuery core. Other options require jQueryUI.</description>
                </item>
                <item>
                    <name>Show animation speed</name>
                    <description>Specify the animation speed. You can select a pre-defined option (slow = 600 milliseconds, fast = 200 milliseconds), or you can enter an explicit value in milliseconds.</description>
                </item>
                <item>
                    <name>Hide animation style</name>
                    <description>Select the animation method to use when the window is closed. Fade and Slide use methods in jQuery core. Other options require jQueryUI.</description>
                </item>
                <item>
                    <name>Hide animation speed</name>
                    <description>Specify the animation speed. You can select a pre-defined option (slow = 600 milliseconds, fast = 200 milliseconds), or you can enter an explicit value in milliseconds.</description>
                </item>
            </list>
        </section>
        <section>
            <title>Window Javascript Events Properties</title>
            <list>
                <item>
                    <name>onInitialize</name>
                    <description>Specify the Javascript code to execute the first time the window is shown.</description>
                </item>
                <item>
                    <name>onBeforeShow</name>
                    <description>Specify the Javascript code to execute before the window is shown.</description>
                </item>
                <item>
                    <name>onShow</name>
                    <description>Specify the Javascript code to execute when the window is shown.</description>
                </item>
                <item>
                    <name>onBeforeHide</name>
                    <description>Specify the Javascript code to execute before the window is hidden.</description>
                </item>
                <item>
                    <name>onHide</name>
                    <description>Specify the Javascript code to execute when the window is hidden.</description>
                </item>
                <item>
                    <name>onFocus</name>
                    <description>Specify the Javascript code to execute when the window gets focus.</description>
                </item>
                <item>
                    <name>onMove</name>
                    <description>Specify the Javascript code to execute when the window is moved.</description>
                </item>
                <item>
                    <name>onResize</name>
                    <description>Specify the Javascript code to execute when the window is resized.</description>
                </item>
            </list>
        </section>
        <section>
            <title>Ajax Failed/Offline Javascript Properties</title>
            <list>
                <item>
                    <name>Offline Javascript</name>
                    <description>(Optional) Specify the Javascript to execute if the device is offline. Since the device is offline, the Ajax callback is not made. Therefore the code in the 'Ajax failed Javascript' property will not get executed.</description>
                </item>
            </list>
        </section>
        <section>
            <title>Videos</title>
            <videos>
                <title>Action Javascript - Binding an Argument Value to Result of a Javascript Function</title>
                <description>
                    <p>This video is aimed at advanced developers.</p>
                    <p>When you use Action Javascript to open a Grid, Report, Dialog, Custom Component, etc., you often need to bind the value of an argument to a value from the parent Component. For example, you might bind the value of "arg1" to the value of the Lastname field in the current grid row.</p>
                    <p>Instead of binding an argument to the value of a field in the Grid, you can specify an arbitrary JavaScript function to execute. The argument is bound to the value returned by the JavaScript function.</p>
                </description>
                <video>
                    <name>Watch Video</name>
                    <link>https://www.viddler.com/v/16ce015c</link>
                </video>
            </videos>
        </section>
        <section>
            <videos>
                <title>Printing the Currently Selected Records or Opening a Grid Showing Currently Selected Records</title>
                <description>
                    <p>Putting a button on a Grid to open another Grid or a Report is easily accomplished using Action Javascript. This video shows how you can use the special Alpha Anywhere functions CurrentGridFilter() and CurrentGridOrder() to print the records that are currently selected in the Grid. You can also use these functions to open another Grid showing the same selection of records in the current Grid.</p>
                </description>
                <video>
                    <name>Watch Video</name>
                    <link>https://www.viddler.com/v/92ad0803</link>
                </video>
            </videos>
        </section>
        <section>
            <videos>
                <title>HTML Reporting Action Scripting</title>
                <description>
                    <p>When you add a Report to a Tabbed UI, or you display a report when a button is clicked, you now have the option of setting the "initial view" of the report to HTML. HTML Reporting is significantly faster than PDF reporting because it does not use the Amyuni printer driver. Another benefit of HTML reporting is the ability to export the report to Excel or Word. You can also generate a PDF report from an HTML report if you still want a PDF version of the report.</p>
                    <p>In this video, we show how HTML reporting can be used in a Tabbed UI, and when a button in a Grid is clicked to show a report (Note: Also applies to the Grid and UX Component).</p>
                </description>
                <video>
                    <name>Watch Video</name>
                    <link>https://www.viddler.com/v/e3b775fe</link>
                </video>
            </videos>
        </section>
        <section>
            <videos>
                <title>Using the IN Clause in the Report Filter - Understanding 'Array Arguments'</title>
                <description>
                    <p>When you use Action Javascript to display a report, you specify the report filter. In the case of reports that are based on SQL data sources, you can now use the SQL IN clause in your filter expression. When you use the IN clause, the argument you pass the SQL statement must be defined as an "array argument".</p>
                    <p>In this video, we show how to configure the Action Javascript to display a report filtered using an IN clause and how to create an array argument.</p>
                    <p>This video applies to the Grid and UX Component.</p>
                </description>
                <video>
                    <name>Watch Video</name>
                    <link>https://www.viddler.com/v/292ff107</link>
                </video>
                <resources>
                    <resource>
                        <link>https://www.ajaxvideotutorials.com/V12Videos/reportsInClause.zip</link>
                    </resource>
                </resources>
            </videos>
            <note>
                <p>The sample component requires a connection string called "Northwind" to sample Northwind database.</p>
            </note>
        </section>
        <section>
            <videos>
                <title>HTML Reporting in Tabbed UI</title>
                <description>
                    <p>When you add a Report to a Tabbed UI, or you display a report when a button is clicked, you now have the option of setting the "initial view" of the report to HTML. HTML Reporting is significantly faster than PDF reporting because it does not use the Amyuni printer driver. Also, another significant benefit of HTML reporting is the ability to export the report to Excel or Word. You can also generate a PDF report from an HTML report if you still want a PDF version of the report.</p>
                    <p>In this video, we show how HTML reporting can be used in a Tabbed UI, and when a button in a Grid is clicked to show a report.</p>
                </description>
                <date></date>
                <video>
                    <name>Watch Video - Part 1</name>
                    <link>https://www.viddler.com/v/7edb0ae8</link>
                </video>
                <video>
                    <name>Watch Video - Part 2</name>
                    <link>https://www.viddler.com/v/e3b775fe</link>
                </video>
            </videos>
            <note>
                <p>This video also applies to the Grid and UX Component</p>
            </note>
        </section>
        <section>
            <videos>
                <title>Using HTML Reporting in a Mobile Application</title>
                <description>
                    <p>HTML Reporting is ideal for Mobile Applications because the HTML report can easily be displayed in one of the "Panels" in a UX component.</p>
                    <p>In this video, we show how a UX component with a Panel Navigator is built. The Panel Navigator has two Panel Cards. The first Panel Card has buttons to print various reports. The second Panel Card is used to display the HTML report.</p>
                </description>
                <video>
                    <name>Watch Video</name>
                    <link>https://www.viddler.com/v/2efc35d4</link>
                </video>
            </videos>
        </section>
        <section>
            <videos>
                <title>HTML Reporting - Reports with Bookmarks</title>
                <description>
                    <p>When you design reports, you can turn on the 'bookmarks' and 'table of contents' features. The 'bookmark' feature creates a tree control of all of the 'bookmarks' in the report and allows you to navigate to any section of the report by clicking on a appropriate item in the 'bookmark tree', which is displayed to the left of the report itself. The 'table of contents' section, on the other hand, is shown before the first page of the report. You can also navigate to any particular section of the report by clicking on an entry in the table of contents.</p>
                    <p>In HTML reports, the 'bookmarks' tree is automatically rendered in a Panel as is shown in this video. In a mobile application, the Panel Card that contains the bookmark tree is automatically hidden if there is not enough space on the device. In the case where it is hidden, a button is automatically added to the Panel Header to reveal the bookmarks.</p>
                </description>
                <video>
                    <name>Watch Video</name>
                    <link>https://www.viddler.com/v/e7888a65</link>
                </video>
            </videos>
            <note>
                <p>This video applies to the Grid and UX Component.</p>
            </note>
        </section>
        <section>
            <videos>
                <title>Emailing a Report</title>
                <description>
                    <p>	A common pattern in both the UX and Grid component is to place a button on the component to print a Report and display the Report in a window, div or TabbedUI pane. However, instead of displaying the Report, you might want to send it as an email.</p>
                    <p>The Action Javascript action to Print a Report has an option to call an Xbasic function when the Report has printed.</p>
                    <p>In this video we show how you can use this option to email the report using the Mandrill email service.</p>
                </description>
                <video>
                    <name>Watch Video</name>
                    <link>https://www.viddler.com/v/44ce8661</link>
                </video>
            </videos>
        </section>
        <section>
            <videos>
                <title>Printing a Report Using Same Filter/Order as a List Control</title>
                <description>
                    <p>A common pattern in Grids is to have a button on a Grid that prints a report showing the same records that are in the current Grid query. You can use a similar pattern for List controls on a UX component.</p>
                    <p>In this video, we show a UX with a List control. The List control is based on a SQL query and the UX has a button that allows you to perform a server-side filter on the List (for example, search for all records in France or Denmark).</p>
                    <p>The UX has a button that prints a report that is based on the same SQL tables as the List and automatically uses the same filter for the report as the List.</p>
                </description>
                <video>
                    <name>Watch Video</name>
                    <link>https://www.viddler.com/v/b9086826</link>
                </video>
            </videos>
        </section>
        <section>
            <videos>
                <title>HTML-Paged Output Option</title>
                <description>
                    <p>When you render reports in a Web application you can choose whether the report should be rendered as PDF or HTML. The HTML option is only available for Layout Table reports - not Freeform reports.</p>
                    <p>The HTML-Paged option will work with all report types -- Freeform and Layout Table and can be rendered in any browser (including mobile device browsers that do not have the ability to render PDF files.</p>
                    <p>This video compares the different report output options.</p>
                </description>
                <video>
                    <name>Watch Video</name>
                    <link>https://www.viddler.com/v/81252e53</link>
                </video>
            </videos>
        </section>
        <section>
            <videos>
                <title>Using SQL Server Reporting Services Reports in an Alpha Anywhere Project</title>
                <description>
                    <p>Many organizations who use SQL Server also use SQL Server Reporting Services (SSRS). Using reports created in SSRS in an Alpha Anywhere project is possible.</p>
                    <p>In this video, we show how reports defined in SSRS can be used in Alpha Anywhere applications.</p>
                </description>
                <video>
                    <name>Watch Video</name>
                    <link>https://www.viddler.com/v/415ce582</link>
                </video>
            </videos>
        </section>
    </sections>
</page>