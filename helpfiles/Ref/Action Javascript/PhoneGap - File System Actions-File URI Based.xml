<page>
    <shortlink>PhoneGap - File System Actions (File URI Based)</shortlink>
   <topic>PhoneGap - File System Actions (File URI Based)</topic>
   <description>Performs actions with the mobile device file system such as creating, reading, deleting file, creating directories, deleteing directories, etc. (Only applies to UX components running in a PhoneGap shell.)
   </description>
   
   <sections>
       <section>
           <note>These actions give you explicit control over the exact location in the device's file system where the file operations will occur.</note>
       </section>
       
           <section>
            <description>Used with the UX component.</description>
       </section>
       
 <section>
            <title>File System Action Properties</title>
            <list>
                <item>
                    <name>Action name</name>
                    <description>Specify the File System Action that you want to perform.</description>
                </item>
            </list>
        </section>
        <section>
            <title>File System Is Available Properties</title>
            <list>
                <item>
                    <name>Variable</name>
                    <description>Specify the variable to set. Variable will be set to true or false.</description>
                </item>
            </list>
        </section>
        <section>
            <title>Get Base URI of Requested File System Part Properties</title>
            <list>
                <item>
                    <name>File system part</name>
                    <description>Specify the part of the file system. 'persistent' refers to the file system used by the non-uri based file system actions. It is the location specified by the Cordova constant: LocalFileSystem.PERSISTENT Choices include *[ui:temp]*, *[ui:private]*, *[ui:saved]*, *[ui:public]*, *[ui:persistent]*.</description>
                </item>
                <item>
                    <name>Variable</name>
                    <description>Specify the variable to set.</description>
                </item>
            </list>
        </section>
        <section>
            <title>Read a File Properties</title>
            <list>
                <item>
                    <name>File system part</name>
                    <description><![CDATA[Specify which part of the file system the file you want to read is located in. If you want to use an explicit base path (which must end with a forward slash) select <explicit>. 'persistent' refers to the file system used by the non-uri based file system actions. It is the location specified by the Cordova constant: LocalFileSystem.PERSISTENT]]> Choices include *[ui:temp]*, *[ui:private]*, *[ui:saved]*, *[ui:public]*, *[ui:persistent]*, *[ui:<![CDATA[<explicit>]]>]*.</description>
                </item>
                <item>
                    <name>Explicit base URI</name>
                    <description>Specify the URI for the base folder. For example:  file:///data/user/0/com.alpha.app1/files/files/</description>
                </item>
                <item>
                    <name>File name</name>
                    <description><![CDATA[Specify the name of the file you want to read. You must specify a relative filename (e.g. 'file1.txt') . The filename is relative to the folder specified by the 'File system part' setting (or the 'Explicit base URI' if you set the 'File system part' to <explicit>). You can define a Javascript function to return the file name. Enter: javascript:yourfunctionname. For example: javascript:getFilename]]></description>
                </item>
                <item>
                    <name>Start at</name>
                    <description>Specify the byte location where to start reading. Set to -1 to start at the beginning of the file. If you specify a value other than -1 you must also specify a value for the End at property that is not -1.</description>
                </item>
                <item>
                    <name>End at</name>
                    <description>Specify the byte location where to stopt reading. Set to -1 to end at the end of the file. If you specify a value other than -1 you must also specify a value for the Start at property that is not -1.</description>
                </item>
                <item>
                    <name>onSuccess Javascript</name>
                    <description>Specify the Javascript to run once the file has been read.</description>
                </item>
                <item>
                    <name>onError Javascript</name>
                    <description>onError Javascript property.</description>
                </item>
            </list>
        </section>
        <section>
            <title>Write a File Properties</title>
            <list>
                <item>
                    <name>File system part</name>
                    <description><![CDATA[Specify which part of the file system the file you want to write is located in. If you want to use an explicit base path (which must end with a forward slash) select <explicit>. 'persistent' refers to the file system used by the non-uri based file system actions. It is the location specified by the Cordova constant: LocalFileSystem.PERSISTENT]]> Choices include *[ui:temp]*, *[ui:private]*, *[ui:saved]*, *[ui:public]*, *[ui:persistent]*, *[ui:<![CDATA[<explicit>]]>]*.</description>
                </item>
                <item>
                    <name>Explicit base URI</name>
                    <description>Specify the URI for the base folder. For example:  file:///data/user/0/com.alpha.app1/files/files/</description>
                </item>
                <item>
                    <name>File name</name>
                    <description><![CDATA[Specify the name of the file you want to write. You must specify a relative filename (e.g. 'file1.txt') . The filename is relative to the folder specified by the 'File system part' setting (or the 'Explicit base URI' if you set the 'File system part' to <explicit>). You can define a Javascript function to return the file name. Enter: javascript:yourfunctionname. For example: javascript:getFilename]]></description>
                </item>
                <item>
                    <name>Text to write</name>
                    <description>Specify the text to write. You can call a Javascript function to get the text by entering: javascript:functionName. For example: javascript:getText</description>
                </item>
                <item>
                    <name>Append</name>
                    <description>If the file already exists, should the contents be appended to the existing file?</description>
                </item>
                <item>
                    <name>onSuccess Javascript</name>
                    <description>Specify the Javascript to run once the file has been writen.</description>
                </item>
                <item>
                    <name>onError Javascript</name>
                    <description>onError Javascript property.</description>
                </item>
            </list>
        </section>
        <section>
            <title>Check if file exists (and get file properties) Properties</title>
            <list>
                <item>
                    <name>File system part</name>
                    <description><![CDATA[Specify in which part of the file system the file you want to check is located. If you want to use an explicit base path (which must end with a forward slash) select <explicit>. 'persistent' refers to the file system used by the non-uri based file system actions. It is the location specified by the Cordova constant: LocalFileSystem.PERSISTENT]]> Choices include *[ui:temp]*, *[ui:private]*, *[ui:saved]*, *[ui:public]*, *[ui:persistent]*, *[ui:<![CDATA[<explicit>]]>]*.</description>
                </item>
                <item>
                    <name>Explicit base URI</name>
                    <description>Specify the URI for the base folder. For example:  file:///data/user/0/com.alpha.app1/files/files/</description>
                </item>
                <item>
                    <name>File name</name>
                    <description><![CDATA[Specify the name of the file you want to check. You must specify a relative filename (e.g. 'file1.txt') . The filename is relative to the folder specified by the 'File system part' setting (or the 'Explicit base URI' if you set the 'File system part' to <explicit>). You can define a Javascript function to return the file name. Enter: javascript:yourfunctionname. For example: javascript:getFilename]]></description>
                </item>
                <item>
                    <name>onResult Javascript</name>
                    <description>Specify the Javascript to run once a result is available.</description>
                </item>
                <item>
                    <name>onError Javascript</name>
                    <description>onError Javascript property.</description>
                </item>
            </list>
        </section>
        <section>
            <title>Delete a file Properties</title>
            <list>
                <item>
                    <name>File system part</name>
                    <description><![CDATA[Specify which in part of the file system the file you want to delete is located. If you want to use an explicit base path (which must end with a forward slash) select <explicit>.'persistent' refers to the file system used by the non-uri based file system actions. It is the location specified by the Cordova constant: LocalFileSystem.PERSISTENT]]> Choices include *[ui:temp]*, *[ui:private]*, *[ui:saved]*, *[ui:public]*, *[ui:persistent]*, *[ui:<![CDATA[<explicit>]]>]*.</description>
                </item>
                <item>
                    <name>Explicit base URI</name>
                    <description>Specify the URI for the base folder. For example:  file:///data/user/0/com.alpha.app1/files/files/</description>
                </item>
                <item>
                    <name>File name</name>
                    <description><![CDATA[Specify the name of the file you want to delete. You must specify a relative filename (e.g. 'file1.txt') . The filename is relative to the folder specified by the 'File system part' setting (or the 'Explicit base URI' if you set the 'File system part' to <explicit>). You can define a Javascript function to return the file name. Enter: javascript:yourfunctionname. For example: javascript:getFilename]]></description>
                </item>
                <item>
                    <name>onDeleteSuccess Javascript</name>
                    <description>Specify the Javascript to run once the file has been deleted.</description>
                </item>
                <item>
                    <name>onError Javascript</name>
                    <description>onError Javascript property.</description>
                </item>
            </list>
        </section>
        <section>
            <title>Copy a file Properties</title>
            <list>
                <item>
                    <name>Source - File system part</name>
                    <description><![CDATA[Specify which in part of the file system the file you want to copy is located. If you want to use an explicit base path (which must end with a forward slash) select <explicit>. 'persistent' refers to the file system used by the non-uri based file system actions. It is the location specified by the Cordova constant: LocalFileSystem.PERSISTENT]]> Choices include *[ui:temp]*, *[ui:private]*, *[ui:saved]*, *[ui:public]*, *[ui:persistent]*, *[ui:<![CDATA[<explicit>]]>]*.</description>
                </item>
                <item>
                    <name>Source - Explicit base URI</name>
                    <description>Specify the URI for the base folder. For example:  file:///data/user/0/com.alpha.app1/files/files/</description>
                </item>
                <item>
                    <name>Source - File name</name>
                    <description><![CDATA[Specify the name of the file you want to copy. You must specify a relative filename (e.g. 'file1.txt') . The filename is relative to the folder specified by the 'Source - File system part' setting (or the 'Source - Explicit base URI' if you set the 'Source - File system part' to <explicit>). You can define a Javascript function to return the file name. Enter: javascript:yourfunctionname. For example: javascript:getFilename]]></description>
                </item>
                <item>
                    <name>Target - File system part</name>
                    <description><![CDATA[Specify to which part of the file system the file you want to copy the file. If you want to use an explicit base path (which must end with a forward slash) select <explicit>.]]> Choices include *[ui:temp]*, *[ui:private]*, *[ui:saved]*, *[ui:public]*, *[ui:persistent]*, *[ui:<![CDATA[<explicit>]]>]*.</description>
                </item>
                <item>
                    <name>Target - Explicit base URI</name>
                    <description>Specify the URI for the target base folder. For example:  file:///data/user/0/com.alpha.app1/files/files/</description>
                </item>
                <item>
                    <name>Target - File name</name>
                    <description><![CDATA[Specify the name of the copied file. If you  leave this blank, the 'Source - File name' will be used. You must specify a relative filename (e.g. 'file1.txt') . The filename is relative to the folder specified by the 'Target - File system part' setting (or the 'Target - Explicit base URI' if you set the 'File system part' to <explicit>). You can define a Javascript function to return the file name. Enter: javascript:yourfunctionname. For example: javascript:getFilename]]></description>
                </item>
                <item>
                    <name>onCopySuccess Javascript</name>
                    <description>Specify the Javascript to run once the file has been copied</description>
                </item>
                <item>
                    <name>onError Javascript</name>
                    <description>onError Javascript property.</description>
                </item>
            </list>
        </section>
        <section>
            <title>Move a file Properties</title>
            <list>
                <item>
                    <name>Source - File system part</name>
                    <description><![CDATA[Specify which in part of the file system the file you want to move is located. If you want to use an explicit base path (which must end with a forward slash) select <explicit>. 'persistent' refers to the file system used by the non-uri based file system actions. It is the location specified by the Cordova constant: LocalFileSystem.PERSISTENT]]> Choices include *[ui:temp]*, *[ui:private]*, *[ui:saved]*, *[ui:public]*, *[ui:persistent]*, *[ui:<![CDATA[<explicit>]]>]*.</description>
                </item>
                <item>
                    <name>Source - Explicit base URI</name>
                    <description>Specify the URI for the base folder. For example:  file:///data/user/0/com.alpha.app1/files/files/</description>
                </item>
                <item>
                    <name>Source - File name</name>
                    <description><![CDATA[Specify the name of the file you want to copy. You must specify a relative filename (e.g. 'file1.txt') . The filename is relative to the folder specified by the 'Source - File system part' setting (or the 'Source - Explicit base URI' if you set the 'Source - File system part' to <explicit>). You can define a Javascript function to return the file name. Enter: javascript:yourfunctionname. For example: javascript:getFilename]]></description>
                </item>
                <item>
                    <name>Target - File system part</name>
                    <description><![CDATA[Specify to which part of the file system the file you want to move the file. If you want to use an explicit base path (which must end with a forward slash) select <explicit>. 'persistent' refers to the file system used by the non-uri based file system actions. It is the location specified by the Cordova constant: LocalFileSystem.PERSISTENT]]> Choices include *[ui:temp]*, *[ui:private]*, *[ui:saved]*, *[ui:public]*, *[ui:persistent]*, *[ui:<![CDATA[<explicit>]]>]*.</description>
                </item>
                <item>
                    <name>Target - Explicit base URI</name>
                    <description>Specify the URI for the target base folder. For example:  file:///data/user/0/com.alpha.app1/files/files/</description>
                </item>
                <item>
                    <name>Target - File name</name>
                    <description><![CDATA[Specify the name of the copied file. If you  leave this blank, the 'Source - File name' will be used. You must specify a relative filename (e.g. 'file1.txt') . The filename is relative to the folder specified by the 'Target - File system part' setting (or the 'Target - Explicit base URI' if you set the 'File system part' to <explicit>). You can define a Javascript function to return the file name. Enter: javascript:yourfunctionname. For example: javascript:getFilename]]></description>
                </item>
                <item>
                    <name>onMoveSuccess Javascript</name>
                    <description>Specify the Javascript to run once the file has been moved.</description>
                </item>
                <item>
                    <name>onError Javascript</name>
                    <description>onError Javascript property.</description>
                </item>
            </list>
        </section>
        <section>
            <title>Remove a directory (recursively) Properties</title>
            <list>
                <item>
                    <name>File system part</name>
                    <description><![CDATA[Specify in which part of the file system the directory you want to remove is located. If you want to use an explicit base path (which must end with a forward slash) select <explicit>. 'persistent' refers to the file system used by the non-uri based file system actions. It is the location specified by the Cordova constant: LocalFileSystem.PERSISTENT]]> Choices include *[ui:temp]*, *[ui:private]*, *[ui:saved]*, *[ui:public]*, *[ui:persistent]*, *[ui:<![CDATA[<explicit>]]>]*.</description>
                </item>
                <item>
                    <name>Explicit base URI</name>
                    <description>Specify the URI for the base folder. For example:  file:///data/user/0/com.alpha.app1/files/files/</description>
                </item>
                <item>
                    <name>Directory name</name>
                    <description>Specify the name of the directory you want to remove. IMPORTANT: The name must end with a / (forward slash). You can define a Javascript function to return the directory name. Enter: javascript:yourfunctionname. For example: javascript:getDirname</description>
                </item>
                <item>
                    <name>onSuccess Javascript</name>
                    <description>Specify the Javascript to run once the directories have been removed.</description>
                </item>
                <item>
                    <name>onError Javascript</name>
                    <description>onError Javascript property.</description>
                </item>
            </list>
        </section>
        <section>
            <title>Create directories (recursively) Properties</title>
            <list>
                <item>
                    <name>File system part</name>
                    <description><![CDATA[Specify in which part of the file system the directories you want to create should be located. If you want to use an explicit base path (which must end with a forward slash) select <explicit>. 'persistent' refers to the file system used by the non-uri based file system actions. It is the location specified by the Cordova constant: LocalFileSystem.PERSISTENT]]> Choices include *[ui:temp]*, *[ui:private]*, *[ui:saved]*, *[ui:public]*, *[ui:persistent]*, *[ui:<![CDATA[<explicit>]]>]*.</description>
                </item>
                <item>
                    <name>Explicit base URI</name>
                    <description>Specify the URI for the base folder. For example:  file:///data/user/0/com.alpha.app1/files/files/</description>
                </item>
                <item>
                    <name>Directory structure</name>
                    <description>Specify the directory structure you want to create. Example: /dir1/subdir1/subsubdir1. The directory structure is relative to the base URI (specified by the File system part). If the directories already exist, then no action is taken and the onSuccess function is called. You can define a Javascript function to return the directory structure. Enter: javascript:yourfunctionname. For example: javascript:getDirStructure</description>
                </item>
                <item>
                    <name>onSuccess Javascript</name>
                    <description>Specify the Javascript to run once the direcories have been created (or verified to exist).</description>
                </item>
                <item>
                    <name>onError Javascript</name>
                    <description>onError Javascript property.</description>
                </item>
            </list>
        </section>
        <section>
            <title>List files in a directory (recursively) Properties</title>
            <list>
                <item>
                    <name>File system part</name>
                    <description><![CDATA[Specify in which part of the file system the directories you want to examine are located. If you want to use an explicit base path (which must end with a forward slash) select <explicit>. 'persistent' refers to the file system used by the non-uri based file system actions. It is the location specified by the Cordova constant: LocalFileSystem.PERSISTENT]]> Choices include *[ui:temp]*, *[ui:private]*, *[ui:saved]*, *[ui:public]*, *[ui:persistent]*, *[ui:<![CDATA[<explicit>]]>]*.</description>
                </item>
                <item>
                    <name>Explicit base URI</name>
                    <description>Specify the URI for the base folder. For example:  file:///data/user/0/com.alpha.app1/files/files/</description>
                </item>
                <item>
                    <name>Directory name</name>
                    <description>Specify the name of the directory you want to examine. The directory is relative to the 'File system part'. IMPORTANT: The name must end with a / (forward slash). You can define a Javascript function to return the directory name. Enter: javascript:yourfunctionname. For example: javascript:getDirname</description>
                </item>
                <item>
                    <name>onSuccess Javascript</name>
                    <description>Specify the Javascript to run once a result is available.</description>
                </item>
                <item>
                    <name>onError Javascript</name>
                    <description>onError Javascript property.</description>
                </item>
            </list>
        </section>
        <section>
            <title>List matching files in a directory Properties</title>
            <list>
                <item>
                    <name>File system part</name>
                    <description><![CDATA[Specify in which part of the file system the directory you want to examine is located. If you want to use an explicit base path (which must end with a forward slash) select <explicit>. 'persistent' refers to the file system used by the non-uri based file system actions. It is the location specified by the Cordova constant: LocalFileSystem.PERSISTENT]]> Choices include *[ui:temp]*, *[ui:private]*, *[ui:saved]*, *[ui:public]*, *[ui:persistent]*, *[ui:<![CDATA[<explicit>]]>]*.</description>
                </item>
                <item>
                    <name>Explicit base URI</name>
                    <description>Specify the URI for the base folder. For example:  file:///data/user/0/com.alpha.app1/files/files/</description>
                </item>
                <item>
                    <name>Directory name</name>
                    <description>Specify the name of the directory you want to examine. The directory is relative to the 'File system part'. IMPORTANT: The name must end with a / (forward slash). You can define a Javascript function to return the directory name. Enter: javascript:yourfunctionname. For example: javascript:getDirname</description>
                </item>
                <item>
                    <name>Match regular expression</name>
                    <description>(Optional). Specify a regular expression. Only filenames that match the regular expression are listed when the onSuccess function is called.</description>
                </item>
                <item>
                    <name>onSuccess Javascript</name>
                    <description>Specify the Javascript to run once a result is available.</description>
                </item>
                <item>
                    <name>onError Javascript</name>
                    <description>onError Javascript property.</description>
                </item>
            </list>
        </section>
        <section>
            <title>Delete matching files Properties</title>
            <list>
                <item>
                    <name>File system part</name>
                    <description><![CDATA[Specify in which part of the file system the directory from which you want to delete files is located. If you want to use an explicit base path (which must end with a forward slash) select <explicit>. 'persistent' refers to the file system used by the non-uri based file system actions. It is the location specified by the Cordova constant: LocalFileSystem.PERSISTENT]]> Choices include *[ui:temp]*, *[ui:private]*, *[ui:saved]*, *[ui:public]*, *[ui:persistent]*, *[ui:<![CDATA[<explicit>]]>]*.</description>
                </item>
                <item>
                    <name>Explicit base URI</name>
                    <description>Specify the URI for the base folder. For example:  file:///data/user/0/com.alpha.app1/files/files/</description>
                </item>
                <item>
                    <name>Directory name</name>
                    <description>Specify the name of the directory from which you want to delete files. The directory is relative to the 'File system part'. IMPORTANT: The name must end with a / (forward slash). You can define a Javascript function to return the directory name. Enter: javascript:yourfunctionname. For example: javascript:getDirname</description>
                </item>
                <item>
                    <name>Match regular expression</name>
                    <description>(Optional). Specify a regular expression. Only filenames that match the regular expression are deleted (as long as the file is not listed in the 'keep' list).</description>
                </item>
                <item>
                    <name>Keep list</name>
                    <description>(Optional). Specify files to NOT delete (even if they match the regular expression). Enter a comma delimited list of filenames. Alternative you can call a javascript function by specifying: javascript:myKeepList. Your Javascript function MUST return an array of filenames to keep.</description>
                </item>
                <item>
                    <name>onComplete Javascript</name>
                    <description>Specify the Javascript to run once the file(s) have been deleted</description>
                </item>
                <item>
                    <name>onError Javascript</name>
                    <description>onError Javascript property.</description>
                </item>
            </list>
        </section>
   </sections>
   
    <see>
       <ref>Action Javascript for the UX</ref>
   </see>
   
   
</page>