<page>
    <shortlink>phonegap open file with native application</shortlink>
    <topic>PhoneGap - Open File with Native Application</topic>
    <description>This action allows you to open a file on a mobile device using the associated native application.</description>
    <discussion>
        <p>This action allows you to open a file using a native application on a mobile device in a PhoneGap application. To use this Action Javascript, you must load the [Cordova Open] plugin.</p>
        <p>This actions allows you to:</p>
    </discussion>
    <sections>
        <section>
            <list bullet="true">
                <item>
                    <name>Open a file that is already present in the file system of the mobile device.</name>
                </item>
                <item>
                    <name>Open a file that is remote.</name>
                </item>
                <item>
                    <name>Open a file that is dynamically created by making an Ajax callback to the server.</name>
                </item>
                <item>
                    <name>Open a PDF report that is created by making an Ajax callback to the server to run a report and save the report output as a PDF file.</name>
                </item>
            </list>
        </section>
        <section>
            <important>You can only use this action in a PhoneGap application. The PhoneGap application must load the [Cordova Open] plugin.</important>
        </section>
        <section>
            <description>When you select the *[ui:PhoneGap - Open File with Native Application]* action in Action Javascript, the following dialog is shown:</description>
            <figure>
                <link>images/nativeopenergenie1.jpg</link>
            </figure>
        </section>
        <section>
            <description>The following properties are used tos specify the location of the file to open:</description>
            <list>
                <item>
                    <name-title>Property</name-title>
                    <description-title>Description</description-title>
                </item>
                <item>
                    <name>File is remote</name>
                    <description>Specify if you want to open a local file, or a remote file (i.e. a file that is on a remote server)</description>
                </item>
                <item>
                    <name>Filesystem part</name>
                    <description>The part of the device filesystem where the file is stored. You can specify a Javascript function to return the filesystem part by prefixing the name of the Javascript function with *[ui:javascript:]*, For example *[ui:javascript:getFileSystemPart]*.</description>
                </item>
                <item>
                    <name>Filename</name>
                    <description>The name of the file you want to open. This can include a relative path if the file is stored in a sub-directory. E.g. PDF/mypdffile.pdf. You can also specify a Javascript function to return the filename by prefixing the name of the Javascript function with *[ui:javascript:]*, For example *[ui:javascript:getFileName]*.</description>
                </item>
            </list>
        </section>
        <section>
            <description>If you specify that the file is remote, you must specify the File URL.</description>
            <figure>
                <link>images/cordovaaction2.gif</link>
            </figure>
        </section>
        <section>
            <list>
                <item>
                    <name-title>Property</name-title>
                    <description-title>Description</description-title>
                </item>
                <item>
                    <name>File URL</name>
                    <description>The URL of the file you want to open. For example: *[ui:http://alphafiles.s3.amazonaws.com/pdffile1.pdf]*. If the file is stored in the webroot of the Application Server, you can specify a relative filename. For example: *[ui:pdffile1.pdf]*. You can specify a Javascript function to return the URL by prefixing the name of the Javascript function with *[ui:javascript:]*, For example *[ui:javascript:getFileURL]*.</description>
                </item>
                <item>
                    <name>Make Ajax callback to get the file to view</name>
                    <description>Specify if an Ajax callback should be made to dynamically create the file that you want to view on the mobile device.</description>
                </item>
            </list>
        </section>
        <section>
            <description>If you specify that you want to make an Ajax callback to get the file to open, you must specify the Ajax callback type.</description>
            <figure>
                <link>images/codovaopen3.gif</link>
            </figure>
        </section>
        <section>
            <list>
                <item>
                    <name-title>Property</name-title>
                    <description-title>Description</description-title>
                </item>
                <item>
                    <name>Ajax callback type</name>
                    <description>Can either be *[ui:UserDefined]* or *[ui:Report]*. Choose *[ui:UserDefined]* if you want to create your own Xbasic function to handle the callback. Choose *[ui:Report]* if you want to run a Report that you have defined in your web project and save the report as a PDF file.</description>
                </item>
                <item>
                    <name>Xbasic function</name>
                    <description>The name of the Xbasic function that will handle the Ajax callback. In addition to generating the file you want to view on the mobile device, your Xbasic function must return Javascript to set these variables:</description>
                    <list>
                        <item>
                            <name>{dialog.object}.__filenameNativeViewer</name>
                            <description>The URL of the file you want to view. </description>
                        </item>
                        <item>
                            <name>{dialog.object}.__filenameFriendlyNativeViewer</name>
                            <description>The friendly name for the file that will be displayed in the title bar of the Viewer app.</description>
                        </item>
                    </list>
                </item>
            </list>
            <tip>To see an example of how these variables should be set by your Xbasic function, click the smart field for the Xbasic function property. Then click the *[ui:Show function prototype]* button.</tip>
        </section>
        <section>
            <description>If you set the Ajax callback type to Report, you must specify which report you want to run.</description>
            <figure>
                <link>images/cordovaopen4.gif</link>
            </figure>
        </section>
        <section>
            <list>
                <item>
                    <name-title>Property</name-title>
                    <description-title>Description</description-title>
                </item>
                <item>
                    <name>Report definition</name>
                    <description>When you click the smart field for this property a genie opens up (see below) where you can define which report to run.</description>
                </item>
                <item build="5982">
                    <name>Friendly name</name>
                    <description>
                        <p>The name shown in the title bar of the Native Opener. Name can be statically defined at design-time or dynamically computed using a JavaScript function using the syntax shown below.</p>
                        <p>
                            <example><![CDATA[javascript:yourfunctionname]]></example>
                        </p>
                        <p>Replace "yourfunctionname" with the name of your JavaScript function (function names are case-sensitive.) The JavaScript function must return a URL encoded value to use for the friendly name.</p>
                        <p>If no name is specified, a default name is computed based on the report name.</p>
                    </description>
                </item>
                <item>
                    <name>onComplete Javascript</name>
                    <description>The name of a Javascript function to run after the report has been generated. See below for an example of how this property can be used.</description>
                </item>
            </list>
            <note>
                <p>Alpha Anywhere will automatically send the following Javascript to the client once the report has been created:</p>
                <p>*[js:{dialog.object}.hideWaitMessage();]*</p>
                <p>This is useful because if you displayed a wait message when invoking the action to save a report as a PDF file, the wait message will automatically be closed once the report has been generated. You do not have to specify an *[ui:onComplete Javascript]* property solely for the purpose of hiding a wait message.</p>
            </note>
        </section>
        <section>
            <title>Report Definition Genie</title>
            <description>When you click the smart field for the Report definition property, the following dialog is shown where you can specify the name of the report to run and other properties of the report, such as the filter, and order, PDF options (such as whether the PDF file should have a watermark, etc.) and argument bindings.</description>
            <figure>
                <link>images/cordovaopen_reportgenie.jpg</link>
            </figure>
        </section>
        <section>
            <description>
                <p>The filter you define for the report in this dialog is in addition to any filter defined in the report definition itself.</p>
                <p>When defining a filter, it is common to use arguments in the filter rather than literal values. For example:</p>
            </description>
            <example>
                <![CDATA[Country = :whatcoutry]]>
            </example>
        </section>
        <section>
            <description>rather than</description>
            <example>
                <![CDATA[Country = '{country}']]>
            </example>
        </section>
        <section>
            <description>
                <p>where {country} is the value in a control called Country on the UX component.</p>
                <p>To create an argument to use in a report filter click on the *[ui:Define Arguments]* button shown in the above image and then bind the argument to a value (either a static value, or a value in a UX control) in the *[ui:Set Argument Values]* section of the dialog.</p>
            </description>
        </section>
        <section>
            <title>Understanding the onComplete Javascript Property</title>
            <description>
                <p>When you set the Ajax Callback type to Report, the *[ui:onComplete Javascript]* property allows you to define the name of a Javascript function that will be called after the report has been generated on the server.</p>
                <p>Your function will take a single parameter as its input. This parameter is an object with these properties:</p>
            </description>
            <list>
                <item>
                    <name-title>Property</name-title>
                    <description-title>Description</description-title>
                </item>
                <item>
                    <name>localFilename</name>
                    <description>The file name in the filesystem on the device where the report will be saved after it is downloaded to the mobile device.</description>
                </item>
                <item>
                    <name>reportName</name>
                    <description>The name of the report that was printed</description>
                </item>
                <item>
                    <name>fileSystem</name>
                    <description>The filesystem part where the report PDF file will be stored. e.g. *[ui:saved]*, *[ui:private]*, *[ui:public]*, *[ui:persistent]*, *[ui:temp]*.</description>
                </item>
                <item>
                    <name>folder</name>
                    <description>The name of the folder in which the report PDF file will be stored.</description>
                </item>
            </list>
        </section>
        <section>
            <description>
                <p>A common use case for this function is to store the name of the report and its associated properties (such as filesystem part, filename, etc), in a List control so that the user can quickly view a previously viewed report by simply viewing the file for that report (which is stored on the device after it is viewed for the first time). This allows the user to view reports even when there is no connection.</p>
                <p>For example, the following function would store the report information in a List control called *[js:previouslyViewedReports]* (assume that the List control has columns named *[js:filename]*, *[js:reportname]*, *[js:fspart]* and *[js:folder]*):</p>
            </description>
            <example>
                <![CDATA[function afterReportGenerated(obj) {
    var l = {dialog.object}.getControl('previouslyViewedReports');
    var _d = [
        {
            filename: obj.localFilename,
            reportname: obj.reportName,
            fspart: obj.fileSystem,
            folder: obj.folder
        }
    ];
    l.appendRows(_d);
}]]>
            </example>
        </section>
    </sections>
    <limitations>PhoneGap Applications Only</limitations>
    <links>
        <link link="phonegap cordova open plugin">Cordova Open</link>
    </links>
    <see>
        <ref link="phonegap Cordova Open Plugin">Cordova-Open Plugin</ref>
    </see>
</page>