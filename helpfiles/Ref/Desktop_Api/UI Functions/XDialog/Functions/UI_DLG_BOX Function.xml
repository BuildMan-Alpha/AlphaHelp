<page api="xb">
   <topic>UI_DLG_BOX Function</topic>
     <description>Generic dialog get - display a dialog, returns button push, plus valus in variables.</description>

   <syntax>Result as C = UI_DLG_BOX(C title,C dialog_format[,C code])</syntax>
   <arguments>
     <argument>
         <name>Result</name>
         <description>The value returned by the dialog. This is typically  the name of the BUTTON that was pressed to close the dialog.
</description>
     </argument>
     <argument>
         <name>title</name>
         <description>The title of the dialog. The title may also be specified  dynamically using the syntax:
Title = "@=" +  Title_Var_Name.</description>
     </argument>
     <argument>
         <name>dialog_format</name>
         <description>A series of Xdialog commands that describe the appearance  of the dialog box. The basic structure of the Format section is:
</description>
<list>
<item>
<name-title>Argument</name-title>
<description-title>Description</description-title>
</item>

<item>
<name><![CDATA[<<%dlg%]]></name>
<description><![CDATA[The only optional part of this argument is the "dlg" sequence of characters (the marker), which can be any string of characters, as long as it is unique within this instance of the UI_DLG_BOX() function. The character sequence <<%dlg% is specifically recommended because it is supported by bubble help.]]></description>
</item>

<item>
<name>Xdialog_Code</name>
<description><![CDATA[One or more statements, each of which must be on a separate line from the <<%dlg% and %dlg% arguments.]]></description>
</item>

<item>
<name>%dlg%</name>
<description><![CDATA[The marker characters can be any string of characters, as long as they match those in the first argument ( <<%dlg% ).]]></description>
</item>



</list>
     </argument>
     <argument>
         <name>code</name>
         <description><![CDATA[Optional. Xbasic code that describes what should happen  when various events happen when the user is interacting with the dialog  box. For example, what should happen when the user presses a button, or  when the user tabs out of a field. The basic structure of the Event Handling  section is:
]]></description>
		<list><![CDATA[
		<item><name>
		 <<%code% ;</name></item><item><name>
		 Xbasic_Code;</name></item><item><name>
		 %code%;</name></item>
		 ]]>
		 </list>
  
     </argument>
   </arguments>
    <discussion>
The UI_DLG_BOX() function displays a modal dialog box and returns a character  string. The UI_MODELESS_DLG_BOX()  function displays a modeless dialog box.
   </discussion>
  
   <sections>
       <section><title>Example</title>
            <description>This example of an extremely simple dialog box with the text "Hello  World."</description>
            <example><![CDATA[
ui_dlg_box("Title","Hello World")
]]></example>
       </section>
       
 <section>
            <description>Alternatively:</description>
            <example><![CDATA[
format = <<%dlg%
"Hello World"
%dlg%
ui_dlg_box("Title", format)
            ]]></example>
       </section>       
       
<section>
            <description>Here is what this dialog box looks like: </description>
           <figure><link>images/XD_Hello_World.gif</link></figure>
       </section>       
       
       
       
       
<section>
            <description>Here is a dialog box with a title defined after the dialog box is displayed. The "@" is the indirection operator.</description>
            <example><![CDATA[
dim dlg_title as C
dlg_title = "Title1"
ui_dlg_box("@=dlg_title",<<%dlg%

%dlg%,<<%code%
if a_dlg_button = "settitle" then
    dlg_title = ui_get_text("","Set new title",dlg_title)
     a_dlg_button = ""
end if
%code%)

            ]]></example>
       </section>              
       
   </sections>
   <limitations>Desktop applications only.</limitations>
   <see>
      <ref link="Xdialogs Are Built from Strings">Xdialogs Are  Built from Strings</ref>
      <ref link="Xdialog Function Reference">Xdialog  Function Reference</ref>
      <ref link="Xdialog Control Reference">Xdialog  Control Reference</ref>
   </see>
   
<terms>xdialog,ui,box,button,control,display,function</terms>








</page>