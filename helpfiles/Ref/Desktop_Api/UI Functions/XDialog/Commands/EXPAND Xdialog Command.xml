<page api="xb">
	   <shortlink>api desktop api xdialog commands expand</shortlink>
	<topic>{EXPAND}</topic>
	<description>The {EXPAND} command allows you to display a message to the user when the function that is populating a branch of a tree control takes a long time to respond.</description>

<syntax>{EXPAND= Message }</syntax>	

<arguments>
	<argument>
		<name>Message</name>
		<description>Character. A character message to display while a tree control is being populated by a function call.</description>
	</argument>
	
</arguments>
<sections>
	<section>
		<title>Example</title>
	<description>This script shows how to use the {EXPAND} command in a list of values that will display in a tree control.
</description>	
	<example><![CDATA[dim list as C
list = <<%list%
scripts|{EXPAND=Expanding folder...}!get_scripts()
functions|{EXPAND=Expanding folder...}!a5.udf_enum(2)
colors|{EXPAND=Expanding folder...}!a5.color_enum()
tables|{EXPAND=Expanding folder...}!a5.table_enum()
%list%
]]></example>	
	</section>
		<section>
	
	<description>Each list entry follows the format: ParentNode |{EXPAND= Message }! FunctionCall.
The following example shows how to structure a function that returns a list. It is very important to include the UI_YIELD() function call. The UI_YIELD()call allows Alpha Anywhere to update the user interface while the function is still executing. Without the UI_YIELD()in this function, the text in the {EXPAND} directive would not be painted onto the screen.
</description>	
	<example><![CDATA[function get_scripts as C ()
hourglass_cursor(.t.)
ui_yield()
sleep(2)
get_scripts = a5.script_enum(2)
hourglass_cursor(.f.)
end function
]]></example>	
	</section>
	
</sections>
<limitations>Desktop applications only.</limitations>
<see>
	<ref link="UI_YIELD Function">UI_YIELD()</ref>
	<ref link="Tree Control X Directive">Tree Control X Directive</ref>
</see>	
	
</page>