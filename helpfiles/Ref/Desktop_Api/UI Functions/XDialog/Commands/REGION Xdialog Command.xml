<page>
	<topic>{REGION}</topic>
		
<description>Identifies a sequence of Xdialog commands that should be treated as a single entity.</description>	

<prototypes>
	<prototype>{REGION [ N ] } ... {ENDREGION [ N ] }</prototype>
	<prototype>{REGION= Label } ... {ENDREGION}</prototype>
</prototypes>
	<arguments>
<argument>
	<name>N</name>
	<description>Numeric. Optional. An integer that uniquely identifies the beginning of a region.</description>
</argument>		
<argument>
	<name>Label</name>
	<description>Character. A text label that uniquely identifies the beginning of a region. The {REGION=Label} syntax attempts to make column widths the same in all regions with the same label.
</description>
</argument>			
	</arguments>
<sections>
<section>
	<title>Discussion</title>
	<description>The {REGION} command is paired with an {ENDREGION} command to identify a sequence of Xdialog commands that should be treated as a single entity, typically as a single cell in a Xdialog. {REGION} and {ENDREGION} commands must be nested, as illustrated below (the indenting is for illustration purposes only).
The {REGION} command is frequently used with the {COL}, {ROW} and {FRAME} commands.
</description>
<example><![CDATA[{REGION1}
    {REGION2}
        {REGION3}
        {ENDREGION3}
    {ENDREGION2}
{ENDREGION1}]]></example>	
<note>The {region N =Label} syntax is not allowed.</note>
</section>	
<section>
	<title>Example</title>
<description>The following script uses the {Region} {Endregion} command pair:</description>	
<example><![CDATA[result = ui_dlg_box("Title",<<%dlg%
{frame=1,1:Billing}
{region1}
First name:|.32firstname ;
Last name:|.32lastname ;
Address 1:|.32address1 ;
Address 2:|.32address2 ;
City:|.32City ;
State:|State ;
Zip:|Zip
{endregion1}|{sp}|
{frame=1,1:Shipping}
{region2}
First name:|.32firstname ;
Last name:|.32lastname ;
Address 1:|.32address1 ;
Address 2:|.32address2 ;
City:|.32City ;
State:|State ;
Zip:|Zip
{endregion2}|{sp}|
{Region3}
<10&OK>;
<10&Cancel>
{Endregion3}
%dlg%)]]></example>	
</section>	
<section>
	<description>This script creates this dialog: 
</description>
<figure><link>images/XD_Region_Endregion.gif</link></figure>	
</section>
<section>
	<description>This dialog can be thought of as having one row and four columns.
</description>
<cases>
	<case>
		<description>Row 1, column 1 (Billing information) is sub-divided into 2 columns and 7 rows.
</description>
	</case>
	<case>
		<description>Row 1, column 2 is a divider column to create horizontal space between the billing and shipping information. Normally Alpha Anywhere does not allocate any space to blank cells. You force Alpha Anywhere to allocate space to a blank cell using the {sp} command.
</description>
	</case>
	<case>
		<description>Row 1, column 3 is sub-divided into 2 columns and 7 rows. It contains the Shipping information.
</description>
	</case>
	<case>
		<description>Row 1, column 4 is sub-divided into 1 column and 2 rows. This cell contains the buttons.
</description>
	</case>
	
</cases>
</section>
<section>
	<description>Note also that in this script the {Frame} commands specify one row and one column. This is because the {Region} {Endregion} command pair that encloses the billing and shipping information turns these regions on the dialog into single "logical" cells.
As the following script demonstrates, the billing and shipping regions now have the same column sizes.
</description>
<example><![CDATA[result = ui_dlg_box("Title",<<%dlg%
{frame=1,1:Billing}
{region=a}
Customer First name:|.32firstname ;
Last name:|.32lastname ;
Address 1:|.32address1 ;
Address 2:|.32address2 ;
City:|.32City ;
State:|State ;
Zip:|Zip
{endregion};
{frame=1,1:Shipping}
{region=a}
First name:|.32firstname ;
Last name:|.32lastname ;
Address 1:|.32address1 ;
Address 2:|.32address2 ;
City:|.32City ;
State:|State ;
Zip:|Zip
{endregion};
{Region3}
<10&OK> <10&Cancel>
{Endregion3}
%dlg%)]]></example>
</section>
<section>
	<description>This script creates this dialog: 
</description>
<figure><link>images/XD_Region_Endregion_3.gif</link></figure>
</section>
<section>
	<description>Note that you must include a ';' command after the {Endregion} to begin the next {Region} on a new row.
</description>

</section>

</sections>	
<limitations>Desktop applications only
</limitations>
	<see>
		<ref>{ENDREGION}</ref>
		<ref>UI_DLG_BOX()</ref>
		<ref>{COL}</ref>
		<ref>{ROW}</ref>
		<ref>{FRAME}</ref>
		<ref>{REGION_XMARGIN}</ref>
		<ref>{REGION_YMARGIN}</ref>
		<ref>Xdialog Commands</ref>
	</see>
</page>