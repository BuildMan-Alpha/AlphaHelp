<page>
   <topic>FORM.VIEW Function</topic>
    <description> Load and show a form</description>
   <syntax>as P = form.view(C layoutname [,C style [,C windowname [,C position_x [,C position_y [,* arguments ]]]]])</syntax>
   <arguments>
     <argument>
         <name>layoutname</name>
         <description>The name of the form to open. In the case where there are duplicate form names in the database, you can qualify the form name with the table name using this syntax: Form Name@Table Name. For example, if a database has a form called Customers for the Current_Customers and the Past_Customers tables, you can specify the form as: Customers@Current_Customers, or Customers@Past_Customers.
</description>
     </argument>
     <argument>
         <name>style</name>
         <description>Optional. Default = "". Determines the mode of the form.</description>
         <list><item><name-title>
Determines the mode of the form.
</name-title><description-title></description-title></item><item><name>         
"" (i.e. blank value) = Open the form as a standard modeless MDI window (same as if you double click on the form in the Control Panel)
</name></item><item><name>
"Popup" = Open the form as a popup window.
</name></item><item><name>
"Dialog"= Open the form as a modal dialog box. 
</name></item><item><name-title>
If a form is opened using the "Popup" style, the following rules apply:
</name-title><description-title></description-title></item><item><name>
Xbasic does not pause, as it does in the case of "Dialog" style.
</name></item><item><name>
The window can be moved outside of the Alpha Anywhere frame.
</name></item><item><name>
Alpha Anywhere menus are not active (just like "Dialog" style).
</name></item><item><name>
The window is not modal. (unlike "Dialog" style).
</name></item><item><name>
The window is always on top of all other Alpha Anywhere windows.
</name></item><item><name>
When Alpha Anywhere opens the form it tries to name the window the same as the form name. If a previous instance of the form is already open, then Alpha Anywhere will assign a unique name to the window by adding a digit to the end of the form name. You can explicitly assign the window name by specifying the Window name. 
</name></item></list>
         
         
         
         
     </argument>
     <argument>
         <name>windowname</name>
         <description>Not applicable.</description>
     </argument>
     <argument>
         <name>position_x</name>
         <description>Optional. Default = "" (i.e. use setting defined in the Form Properties dialog). The horizontal position of the window. Possible values are:
</description>
<list><item><name>
"left"
</name></item><item><name>
"right"
</name></item><item><name>
"center"
</name></item><item><name>
"fill" 
</name></item><item><name>
"pixel_coordinate" </name></item></list>
     </argument>
     <argument>
         <name>position_y</name>
         <description>Optional. Default = "" (i.e. use setting defined in the Form Properties dialog). The vertical position of the window. Possible values are:
</description><list><item><name>
"top"
</name></item><item><name>
"bottom"
</name></item><item><name>
"center"
</name></item><item><name>
"fill" 
</name></item><item><name>
"pixel_coordinate" </name></item></list>
     </argument>
     <argument>
         <name>arguments</name>
         <description>*</description>
     </argument>
   </arguments>

   <sections>
       <section>
           <note>The FORM.VIEWQUERIED() method, introduced in Version 5, is more versatile than the FORM.VIEW() method because it allows you to specify an optional filter/order expression to select which records are displayed in the browse window.</note>
       </section>
         <section>
           <note>It is not required to create an object pointer to reference the new form window. For example the following code fragments show that you can address the form window either by the window name, or by an object pointer.</note>
       </section>
         <section>
           <note>If you do not close the form at the end of your script, you will leave the underlying table(s) open.</note>
       </section>

       <section>
            
<example><![CDATA[
'Using the window name:
:form.view("customers")
:customers.maximize()
'Using the object reference
f = :form.view("customers")
f.maximize()
... do things
f.close()
]]></example>
       </section>
       
<section>
            <description>If you opened a form, but did not assign an object pointer at the time you opened the form, you can still get an object pointer reference to the form using the obj()command. For example:
</description>
<example><![CDATA[:form.view("customer")
f = obj(":customer")
... do things
f.close()]]></example>
       </section>
       
 <section>
            <description>To load the form into memory, without displaying it, use the FORM.LOAD() method.
</description>
            
       </section>
   </sections>
   
   
<sections>
       <section><title>Debugging Aid</title>
            <description>When a form loads, any OnInit and onactivate scripts that are defined for the form execute. This can make debugging an application tricky. By specifying a special keyword for the Style parameter, you can load the form without having the scripts execute. For example:
</description>
            <example><![CDATA[frm = form.load("customer", "SCRIPT_DISABLE_EXEC")
... do things
frm.close()]]></example>
       </section>
   </sections>
   
   
<sections>
       <section><title>Examples</title>
            <description>This script opens the Customer form and then maximizes the form and adds a new record.
</description>
            <example><![CDATA[:form.view("customer")
:customer.maximize()
:customer.new_record()
:customer:last_name.value = "Smith"
:customer:first_name.value = "John"
:customer.commit()
... do things
:customer.close()]]></example>
       </section>
   </sections>
   
   <limitations>Desktop applications only.</limitations>
   
   <see>
      <ref>((Using the FORM.VIEW__ method|Using the FORM.VIEW() method))</ref>
      <ref link="FORM.VIEWQUERIED Function">FORM.VIEWQUERIED()</ref>
      <ref link="Form Functions and Methods">Form  Functions and Methods</ref>
   </see>
   
   <terms>forms,arguments,case,click,control,database,debugging,double click,function,horizontal,keyword,menus,object,pointer,popup,script,time,window,xbasic</terms>
   
</page>