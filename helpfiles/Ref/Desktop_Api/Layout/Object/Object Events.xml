<page>
	<topic>Object Events</topic>
	<description>Many events are triggered by Alpha Five objects, such as buttons, fields, and forms. The object events are generally triggered in response to the cursors movements into and out of the object (i.e., the changing of focus from one place to another).</description>
	<sections>
		<section>
			<title>Events for Button Objects</title>
			<description>A button object can have scripts attached to the following events:</description>
			<cases>
				<case>
					<title>OnPush</title>
					<description>The button is pressed. Use to run a script.</description>
				</case>
				<case>
					<title>OnArrive</title>
					<description>The button gets focus.</description>
				</case>
				<case>
					<title>OnDepart</title>
					<description>The button looses focus.</description>
				</case>
				<case>
					<title>CanArrive</title>
					<description>Just before the button gets focus.</description>
				</case>
				<case>
					<title>CanDepart</title>
					<description>Just before the button looses focus.</description>
				</case>
				<case>
					<title>OnFlyover</title>
					<description>When the mouse is over the object. Use to change the field's colors or display a message.</description>
				</case>
				<case>
					<title>OnFlyoverLeave</title>
					<description>When the mouse pointer is no longer over the object.</description>
				</case>
			</cases>
		</section>
		<section>
			<description>Scripts are generally attached to a buttons OnPush event. The following sequence of events were generated when an operator moved the cursor to a button, clicked it, and moved the cursor off the button.</description>
		</section>
		<section>
			<title>Sequence of Events for Buttons</title>
			<list>
				<item>
					<name-title>Event Name</name-title>
					<description-title>Type</description-title>
				</item>
				<item>
					<name>1. OnFlyover</name>
					<description>Control type.</description>
				</item>
				<item>
					<name>2. CanArrive</name>
					<description>Control type.</description>
				</item>
				<item>
					<name>3. CanDepart</name>
					<description>Control type.</description>
				</item>
				<item>
					<name>4. OnDepart</name>
					<description>Control type.</description>
				</item>
				<item>
					<name>5. OnArrive</name>
					<description>Control type.</description>
				</item>
				<item>
					<name>6. OnPush</name>
					<description>Control type.</description>
				</item>
				<item>
					<name>7. onactivate</name>
					<description>Form type.</description>
				</item>
				<item>
					<name>8. OnFlyoverLeave</name>
					<description>Control type.</description>
				</item>
			</list>
		</section>
		<section>
			<title>Events for Type-In Objects</title>
			<description>The following events are triggered by all forms of the type-in object: Type-In, List boxes, Drop-Down lists, Radio buttons, Check boxes, Two-state, and Multi-state buttons:</description>
			<cases>
				<case>
					<title>change>onchange</title>
					<description>The contents of the field object are changed. Use to detect when the field has been changed.</description>
				</case>
				<case>
					<title>OnArrive</title>
					<description>The field gets focus.</description>
				</case>
				<case>
					<title>OnDepart</title>
					<description>The field looses focus.</description>
				</case>
				<case>
					<title>CanArrive</title>
					<description>Just before the field gets focus.</description>
				</case>
				<case>
					<title>CanDepart</title>
					<description>Just before the field looses focus.</description>
				</case>
				<case>
					<title>OnFlyover</title>
					<description>When the mouse is over the object. Use to change the field's colors or display a message.</description>
				</case>
				<case>
					<title>OnFlyoverLeave</title>
					<description>When the mouse pointer is no longer over the object.</description>
				</case>
			</cases>
		</section>
		<section>
			<description>For type-in fields, the onchange event fires when the control looses focus. For radio button, two-state button, multi-state button, and list box fields, the onchange event fires as soon as the fields value changes.For example, assume that you have a form with an Account_Number field. If the user makes a change to the value in this field, you want to be sure that this change was made intentionally, and not by mistake. If the user confirms that the change was intentional, the changed value is retained. Otherwise, the initial value is restored. To do this, scripts must be attached to the fields OnArrive and onchange events. A flag variable is used to prevent the onchange script from playing back a second time when the initial value is restored.The following script is attached to the Account_Number fields OnArrive event:</description>
			<example><![CDATA[dim flag as L
dim SHARED init_valueAS C
'Set a variable to the initial value in account_number init_value= account_number.value
'Set the flag variable to .T.
flag = .T.]]></example>
		</section>
		<section>
			<description>The script for the onchange event is:</description>
			<example><![CDATA[if flag then
    code = ui_msg_box("Warning", "You have changed the value in
    this field. Are you sure you want to change the
    value? ", UI_OK_SELECTED + UI_QUESTION_SYMBOL)
    if (code = 2) then 'User selected Cancel button
      this.value = init_value
        this.refresh()
        flag = .F.
    end if
end if]]></example>
		</section>
		<section>
			<description>The following example shows how the forms tab order can be dynamically controlled. In this example, the script is attached to the OnDepart event for the Same_shipping field:</description>
			<example><![CDATA[If same_shipping.value = .T. then
    Ship_via.activate()
Else
    Ship_Address.activate()
End if]]></example>
		</section>
		<section>
			<description>The following sequence of events were generated when an operator placed the cursor in a type-in field, changed its contents, and moved the cursor to a different field.</description>
		</section>
		<section>
			<title>Sequence of Events for Type-In Fields</title>
			<list>
				<item>
					<name-title>Event Name</name-title>
					<description-title>Type</description-title>
				</item>
				<item>
					<name>1. OnFlyover</name>
					<description>Control</description>
				</item>
				<item>
					<name>2. CanArrive</name>
					<description>Control</description>
				</item>
				<item>
					<name>3. CanEditField</name>
					<description>Field</description>
				</item>
				<item>
					<name>4. OnEditField</name>
					<description>Field</description>
				</item>
				<item>
					<name>5. OnArrive</name>
					<description>Control</description>
				</item>
				<item>
					<name>6. CanDepart</name>
					<description>Control</description>
				</item>
				<item>
					<name>7. CanWriteField</name>
					<description>Field</description>
				</item>
				<item>
					<name>8. onchange</name>
					<description>Control</description>
				</item>
				<item>
					<name>9. OnDepart</name>
					<description>Control</description>
				</item>
				<item>
					<name>10. OnWroteField</name>
					<description>Field</description>
				</item>
				<item>
					<name>11. OnFlyoverLeave</name>
					<description>Control</description>
				</item>
			</list>
		</section>
		<section>
			<description>The following sequence of events were generated when an operator placed the cursor on a check box, clicked it, and moved the cursor off it.</description>
		</section>
		<section>
			<title>Sequence of Events for Check Boxes</title>
			<list>
				<item>
					<name-title>Event Name</name-title>
					<description-title>Type</description-title>
				</item>
				<item>
					<name>1. OnFlyover</name>
					<description>Control</description>
				</item>
				<item>
					<name>2. CanEditField</name>
					<description>Field</description>
				</item>
				<item>
					<name>3. CanArrive</name>
					<description>Control</description>
				</item>
				<item>
					<name>4. OnEditField</name>
					<description>Field</description>
				</item>
				<item>
					<name>5. OnArrive</name>
					<description>Control</description>
				</item>
				<item>
					<name>6. CanArrive</name>
					<description>Control</description>
				</item>
				<item>
					<name>7. CanChangeRecord</name>
					<description>Table</description>
				</item>
				<item>
					<name>8. onchangeRecord</name>
					<description>Table</description>
				</item>
				<item>
					<name>9. CanWriteField</name>
					<description>Field</description>
				</item>
				<item>
					<name>10. onchange</name>
					<description>Control</description>
				</item>
				<item>
					<name>11. onactivate</name>
					<description>Form</description>
				</item>
			</list>
		</section>
		<section>
			<description>The following sequence of events were generated when an operator moved the cursor to a radio button, selected it, clicked one of the buttons, and moved the cursor off it.</description>
		</section>
		<section>
			<title>Sequence of Events for Radio Buttons</title>
			<list>
				<item>
					<name-title>Event Name</name-title>
					<description-title>Type</description-title>
				</item>
				<item>
					<name>1. OnFlyover</name>
					<description>Control</description>
				</item>
				<item>
					<name>2. CanEditField</name>
					<description>Field</description>
				</item>
				<item>
					<name>3. CanArrive</name>
					<description>Control</description>
				</item>
				<item>
					<name>4. OnEditField</name>
					<description>Field</description>
				</item>
				<item>
					<name>5. OnArrive</name>
					<description>Control</description>
				</item>
				<item>
					<name>6. CanArrive</name>
					<description>Control</description>
				</item>
				<item>
					<name>7. onactivate</name>
					<description>Form</description>
				</item>
				<item>
					<name>8. CanWriteField</name>
					<description>Field</description>
				</item>
				<item>
					<name>9. onchange</name>
					<description>Control</description>
				</item>
				<item>
					<name>10. OnDepart</name>
					<description>Control</description>
				</item>
				<item>
					<name>11. OnWroteField</name>
					<description>Field</description>
				</item>
				<item>
					<name>12. OnFlyoverLeave</name>
					<description>Control</description>
				</item>
			</list>
		</section>
		<section>
			<title>Events for Image Reference Fields</title>
			<description>The following events are triggered by image reference fields:</description>
				<list>
					<item>
						<name-title>Event Name</name-title>
						<description-title>Occurs When</description-title>
					</item>
					<item>
						<name>onchange</name>
						<description>When new images are added</description>
					</item>
					<item>
						<name>OnArrive</name>
						<description>The field gets focus.</description>
					</item>
					<item>
						<name>OnDepart</name>
						<description>The field looses focus.</description>
					</item>
					<item>
						<name>CanArrive</name>
						<description>Just before the field gets focus.</description>
					</item>
					<item>
						<name>CanDepart</name>
						<description>Just before the field looses focus.</description>
					</item>
					<item>
						<name>OnFlyover</name>
						<description>When the mouse pointer is over the object.</description>
					</item>
					<item>
						<name>OnFlyover_leave</name>
						<description>When the mouse pointer is no longer over the object.</description>
					</item>
				</list>
		</section>
		<section>
			<title>Events</title>
			<cases>
				<case>
					<title>OnExit</title>
					<description>When the browse object is exited. This will occur after the form that encloses the browse object is closed.</description>
				</case>
				<case>
					<title>OnInit</title>
					<description>When the browse object is created. This will occur after the form that encloses the browse object is instantiated.</description>
				</case>
				<case>
					<title>OnFetch</title>
					<description>When the browse is re-synchronized (i.e. when Alpha Five fetches a record). Whenever the user navigates to a new row in the browse, this event and the OnRowChange event will fire. However, the OnFetch event will also fire if the browse is re-synchronized without navigating to a new row.</description>
				</case>
				<case>
					<title>CanRowChange</title>
					<description>Just before you navigate to a new row.</description>
				</case>
				<case>
					<title>OnRowChange</title>
					<description>When you navigate to a new row in the browse.</description>
				</case>
				<case>
					<title>OnRowDblClick</title>
					<description>When you double click on a row selector. If the browse object is read only, then this event will fire if you double click within the row.</description>
				</case>
				<case>
					<title>CanArrive</title>
					<description>Before the browse object on the form gets focus.</description>
				</case>
				<case>
					<title>CanDepart</title>
					<description>Before the browse object on the form can loose focus.</description>
				</case>
				<case>
					<title>CanSave</title>
					<description>Before a record in the browse is saved.</description>
				</case>
				<case>
					<title>OnArrive</title>
					<description>After the browse object on the form has got focus.</description>
				</case>
				<case>
					<title>OnDepart</title>
					<description>After the browse object on the form has lost focus.</description>
				</case>
				<case>
					<title>OnSave</title>
					<description>After a record in the browse is saved.</description>
				</case>
				<case>
					<title>onchange</title>
					<description>Fires when data in a browse column is changed. Events can be defined for each column in the browse. Event handlers for this event are defined by creating specially named functions in the generic 'Events' event. Function name is of the form  _onchange. For example, here is how to define an event handler for the 'lastname' column in a browse:</description>
					<cases>
						<case>
							<description>1. Edit the 'Events' event.</description>
						</case>
						<case>
							<description>2. Define the following function ('this' is an alias that refers to the browse object that contains the browse column):</description>
							<example><![CDATA[function lastname_onchange as v ()
    ui_msg_box("On Change Event for Browse. Browse name is: ",this.name())
end function  ]]></example>
						</case>
					</cases>
				</case>
				<case>
					<title>TitleClick</title>
					<description>Fires when a browse column is clicked. To enable this event, you must first set the 'Column title click behavior' to 'Click fires user event' (see Browse properties). Event handlers for this event are defined by creating specially named functions in the generic 'Events' event. Function name is of the form  _TitleClick. See the 'onchange' event for more information on how to create event handlers.</description>
				</case>
			</cases>
		</section>
		<section>
			<description>In the following example, assume you have a table called Customers. You have a form for this table that shows a browse view of your records. When you double click on a row in the browse, a form called Customer_dlg is opened as a dialog allowing you to edit the record.</description>
			<example><![CDATA['Open "customer_dlg" invisibly
frm = :form.load("customer_dlg", "dialog")
'Set a variable to the current record's customer Id value
cust_id = parent:browse1:cust_id.value
'Set the index on the "customer_dlg" form
frm.index_set("cust_id")
'Find the correct record
frm.find(cust_id)
'Show the dialog box this also automatically activates it
frm.show()
'When the user closes the dialog box, the dialog is not really
'closed. It must be closed with the close() method.
frm.close()]]></example>
		</section>
		<section>
			<description>In the following example, a script attached to the CanDepart event causes a calculated field in the parent table to update when focus leaves the embedded browse. Consider the sample Invoice application that ships with Alpha Five. Say you wanted to have a summary field in the invoice_header table that summarized the extended totals in the child invoice_items table. Assume that you had a field in the invoice_header table called summary (numeric 12,2), and had defined the following calculated field rule for this field:</description>
			<example><![CDATA[dbsum("invoice_items", "invoice_number", INVOICE_NUMBER, "extension")]]></example>
		</section>
		<section>
			<description>While this expression is correct, you would find that the field was not displaying the correct value when you entered new line items into the embedded browse. The reason for this is that calculated fields only evaluate when a record is in change or enter mode, and when you are entering line item records, the invoice_header table is in view mode, not change or enter.By putting this script on the embedded forms CanDepart event, you can force the calculated fields in the invoice_header table to recalculate:</description>
			<example><![CDATA[parentform.commit()
t = table.current()
t.change_begin()
t.change_end(.T.)
parentform.resynch()]]></example>
		</section>
		<section>
			<description></description>
		</section>
		<section>
			<title></title>
			<list>
				<item>
					<name-title>Event Name</name-title>
					<description-title>Type</description-title>
				</item>
				<item>
					<name>1. CanArrive</name>
					<description>Control</description>
				</item>
				<item>
					<name>2. OnArrive</name>
					<description>Control</description>
				</item>
				<item>
					<name>3. CanRowChange</name>
					<description>Control</description>
				</item>
				<item>
					<name>4. OnFetch</name>
					<description>Form</description>
				</item>
				<item>
					<name>5. OnRowChange</name>
					<description>Control</description>
				</item>
				<item>
					<name>6. onactivate</name>
					<description>Form</description>
				</item>
				<item>
					<name>7. CanArrive</name>
					<description>Control</description>
				</item>
				<item>
					<name>8. CanEditField</name>
					<description>Field</description>
				</item>
				<item>
					<name>9. OnEditField</name>
					<description>Field</description>
				</item>
				<item>
					<name>10. CanChangeRecord</name>
					<description>Record</description>
				</item>
				<item>
					<name>11. onchangeRecord</name>
					<description>Record</description>
				</item>
				<item>
					<name>12. OnFetch</name>
					<description>Form</description>
				</item>
				<item>
					<name>13. CanChangeRecord</name>
					<description>Record</description>
				</item>
				<item>
					<name>14. onchangeRecord</name>
					<description>Record</description>
				</item>
				<item>
					<name>15. CanWriteField</name>
					<description>Field</description>
				</item>
				<item>
					<name>16. CanDepart</name>
					<description>Control</description>
				</item>
				<item>
					<name>17. OnDepart</name>
					<description>Control</description>
				</item>
				<item>
					<name>18. OnWroteField</name>
					<description>Field</description>
				</item>
				<item>
					<name>19. CanSaveRecord</name>
					<description>Record</description>
				</item>
				<item>
					<name>20. OnSaveRecord</name>
					<description>Record</description>
				</item>
			</list>
		</section>
		<section>
			<title>Events for Forms</title>
			<description>The following events are triggered when you display, leave, or work with a form:</description>
			<cases>
				<case>
					<title>AskSaveChange</title>
					<description>When the user attempts to close a form before committing changes to a changed record. Allows the programmer to customize the dialog that the user sees when aborting a record. (See AskSaveChange and AskSaveEnter Events below for more details).</description>
				</case>
				<case>
					<title>AskSaveEnter</title>
					<description>When the user attempts to close a form before committing changes to a new record. Allows the programmer to customize the dialog that the user sees when aborting a record. (See AskSaveChange and AskSaveEnter Events below for more details).</description>
				</case>
				<case>
					<title>CanChange</title>
					<description>Before a control on a form is edited. The CanChange event only fires if:</description>
					<cases>
						<case>
							<description>A new record has been fetched</description>
						</case>
						<case>
							<description>You are not entering a new record.</description>
						</case>
						<case>
							<description>The restrict_change property is FALSE</description>
						</case>
						<case>
							<description>The CanChange event will not occur after changes to a record had been saved.</description>
						</case>
					</cases>
				</case>
				<case>
					<title>CanExit</title>
					<description>Before the form is closed. You can prevent the form (and therefore Alpha Five as well) from being closed by including the CANCEL()command in the script attached to this event. This event is not fired when you close the form or browse with the .CLOSE() method unless you set its argument to .F. . Note the following limitation: If you have multiple forms open, each of which has a CanExit event, and you click the X on the main window frame, only the CanExit event of the first window that was opened will fire.</description>
				</case>
				<case>
					<title>CanSave</title>
					<description>Before the record is saved. Note that there is also a CanSaveRecord field rule event. However, if you cancel the CanSaveRecord event, the pending record is lost. If you cancel this event, the record is not saved, but the pending record is preserved, allowing the user to make necessary corrections before trying to save the record again.</description>
				</case>
				<case>
					<title>activate>onactivate</title>
					<description>The form window is activated (given focus).</description>
				</case>
				<case>
					<title>ondeactivate</title>
					<description>The form window is deactivated (focus is sent to another window).</description>
				</case>
				<case>
					<title>OnEnter</title>
					<description>The form is put in Enter mode to enter a new record.</description>
				</case>
				<case>
					<title>OnExit</title>
					<description> The form is closed. </description>
				</case>
				<case>
					<title>OnFetch</title>
					<description>A record is retrieved from the current table or set.</description>
				</case>
				<case>
					<title>OnInit</title>
					<description>The form is opened.</description>
				</case>
				<case>
					<title>OnKey</title>
					<description>Whenever a key is pressed while the form has focus. Variables set:</description>
					<cases>
						<case>
							<description>A_USER.KEY.VALUE contains the key (key is same format that is used by SYS_SEND_KEYS() i.e. A is the character A, {F1} is the F1 key.</description>
						</case>
						<case>
							<description>A_USER.KEY.EVENT is either up or down or repeat depending whether the key is being pushed, held down or released.</description>
						</case>
						<case>
							<description>A_USER.KEY.HANDLED is set to .T. if the key was handled by the OnKey event. If you set this variable to .T., then the keystroke is not passed through to Alpha Five (i.e. it is eaten by the OnKey script).</description>
						</case>
					</cases>
				</case>
				<case>
					<description>For example, the following OnKey script will close Alpha Five when the user presses Alt-X:</description>
					<example><![CDATA[If (A_USER.KEY.VALUE = "{%X}") then
   If (A_USER.KEY.EVENT = "down") then
        :a5.close()
   End if
End if]]></example>
				</case>
				<case>
					<description>TIP : To see how Alpha Five represents different key combinations, define the following OnKey script for a form, then open the trace window and try out different key combinations:</description>
					<example><![CDATA[trace.writeln("key: " + A_USER.KEY.VALUE + " event: " + A_USER.KEY.EVENT)]]></example>
				</case>
				<case>
					<description>See Also: Script Recorder, Closing a Form with the ESC Key, Running a Script with a Function Key</description>
				</case>
				<case>
					<title>OnSave</title>
					<description>The record that is being edited is saved.</description>
				</case>
				<case>
					<title>OnTimer</title>
					<description>The timer interval has elapsed. The timer interval for a form is set by editing the form, selecting Form, Properties and setting a timer interval. For example, if the timer interval is set to 5 seconds, the OnTimer script will execute every five seconds.</description>
				</case>
			</cases>
		</section>
		<section>
			<note>The following example is obsolete in V5 because you can now select Modal/Modeless data entry as a property of each Form or Browse layout. The example is nevertheless still interesting since it describes a use for the OnFetch event.</note>
		</section>
		<section>
			<description>The following example shows how the OnFetch event can be used to turn off Alpha Fives modeless data entry. Modeless data entry allows the user to just start typing a new value in a field without having to explicitly put the record in change or enter mode. In some applications it may be desirable to turn off modeless data entry, thus requiring the user to press a button before the record can be edited.Attach this script to the forms OnFetch event:</description>
			<example><![CDATA[this.allow_change(.f.)]]></example>
			<note>While the above example should work in most cases, in some cases, it would be possible to get a Maximum Stack Depth Exceeded error message when scrolling through the records very quickly. This is because the OnFetch event is fired a second time before the current instance has finished executing. The current instance is put onto a stack until it can be completed. The stack has a limited capacity. If enough uncompleted instances of the script are pushed onto the stack, the stack will eventually overflow. This situation can be corrected by preventing a second instance of the script from starting until the first instance is complete. The following code shows how to do this:</note>
		</section>
		<section>
			<example><![CDATA[dim shared busy as L
if (.not. busy) then
    busy = .T.
    this.allow_change(.f.)
    busy = .f.
end if]]></example>
		</section>
		<section>
			<description>When the user wants to edit a record, he presses a button with this script attached to the buttons OnPush event:</description>
			<example><![CDATA[parent.allow_change(.T.)]]></example>
		</section>
		<section>
			<description>Notice that the script attached to the OnFetch event uses the this alias to refer to the form, while the script attached to the button uses the alias parent to refer to the form. This is because the button is a child of the form, whereas the OnFetch event occurs at the level of the form. (Both scripts could also use parentform to refer to the form).</description>
		</section>
		<section>
			<title>AskSaveChange and AskSaveEnter Events</title>
			<description>The AskSaveChange and AskSaveEnter events fire when the user attempts to close a form before committing changes to a new or edited record. They allow the user to custom design the dialog that Alpha Five displays asking the user to confirm the action.</description>
		</section>
		<section>
			<title>RESULT_CODE Variable</title>
			<description>RESULT_CODE is a system variable that is used in conjunction with the AskSaveChange and AskSaveEnter events. For example, if the result_code variable is set to UI_YES_SELECTED, then the record is saved, and Alpha Five does not present its dialog asking the user for confirmation. If you do not define a script for either the AskSaveChange, or AskSaveEnter event, or do not set the numeric result_code, then the default Alpha Five dialog appears.</description>
		</section>
		<section>
			<title>Examples</title>
			<description>Change the wording on the dialog to something specific to the application:</description>
			<example><![CDATA[result_code = ui_msg_box("Warning","Save invoice change in progress", UI_YES_NO_CANCEL)
]]></example>
		</section>
		<section>
			<description>Change the meaning of Yes from save to abort:</description>
			<example><![CDATA[result_code = ui_msg_box("warning","lose change(s)", UI_YES_NO_CANCEL)
if (result_code = UI_YES_SELECTED) then
    result_code = UI_NO_SELECTED
else if result_code = UI_NO_SELECTED
    result_code = UI_YES_SELECTED
end if]]></example>
		</section>
		<section>
			<description>Automatically save the record (i.e. do not ask for confirmation)</description>
			<example><![CDATA[result_code = UI_YES_SELECTED]]></example>
		</section>
		<section>
			<title>Events for Tab Object on Forms</title>
			<description>The following events are triggered when the user changes the active page on a tab control on a form:</description>
			<list>
				<item>
					<name-title>Event Name</name-title>
					<description-title>Occurs When</description-title>
				</item>
				<item>
					<name>CanTabChange</name>
					<description>Before the current tab page loses focus and before the target tab page gets focus.</description>
				</item>
				<item>
					<name>OnTabChange</name>
					<description>After the target tab page gets focus.</description>
				</item>
			</list>
		</section>
		<section>
			<description>You can use the CanTabChange event to prevent the user from moving off the current tab page.For example, you might have created a dialog form with a tab control on it. You want the user to complete filling in all of the controls on each page of the tab control before advancing to the next tab page. You could attach the following code to the tab controls CanTabChange event:</description>
			<example><![CDATA['Get the current tab page.
Page = :customer_dialog:tabbed1.tab_get()
select
    case Page = 1
        if (:customer_dialog:last_name = "") then
          cancel()
            ui_msg_box("Error", "Fill in last name")
        end if
    case Page = 2
        if (:customer_dialog:address = "") then
            cancel()
            ui_msg_box("Error", "Fill in address")
        end if
end select]]></example>
		</section>
		<section>
			<title>Events for Reports</title>
			<description>The following events are triggered when the user a user does a print or print preview of a report:</description>
			<list>
				<item>
					<name-title>Event Name</name-title>
					<description-title>Occurs When</description-title>
				</item>
				<item>
					<name>OnPrintInit</name>
					<description>Before the report begins to print and at the beginning of preview.</description>
				</item>
				<item>
					<name>OnRecord</name>
					<description>After each detail record has printed.</description>
				</item>
				<item>
					<name>OnPrintExit</name>
					<description>After the report has finished printing. In the case of print preview, when the user closes the print preview window.</description>
				</item>
			</list>
		</section>
		<section>
			<description>To specify scripts for the OnPrintInit and OnPrintExit events, select Report > Actions. This opens the Script Editor. In the Container drop down box, select the report name. Then select the name of the event you wish to define in the Script drop down box.To specify a script for the OnRecord event, open the script editor as Defined above, select Detail in the Container drop down box.You can use the OnPrintInit event to prompt the user for variables by opening a form as a dialog, or by using a UI_GET_TEXT() function, or by running an Xdialog box. These variables might then be used in the report's filter and order expression (defined in the report's Detail properties). IMPORTANT: The variables that you prompt for in the OnPrintInit event must be DIMmed as "shared" or "global". For example, the following Xdialog box prompts for the state. The report filter then has the filter expression: "state = var->whatstate".</description>
			<example><![CDATA[dim shared whatstate as C
Report_vars = ui_dlg_box("What State",<<%dlg%
What state: .50whatstate;
;
%dlg%)
'Check if user clicked the cancel button.
'If so, then cancel the report.
If report_vars = "cancel" then
    Cancel()
End if]]></example>
		</section>
		<section>
			<description>You can use the OnRecord event to update records after they have printed. For example, in an invoicing application, you might have a Status field in the invoice_header table. After you print out invoices, you might want to update this field to say Printed. Here is how you could do this:</description>
			<example><![CDATA[t = table.current()
t.change_begin()
t.status = "Printed"
t.change_end(.T.) ]]></example>
		</section>
		<section>
			<title>Events for User Defined Controls</title>
			<description>The Form Editor in Alpha Five has a control called User Defined Control that allows an Xbasic programmer to make a custom control.A user puts a User Defined Control (UDC) on a form using the UDC object on the form editors toolbox. You select the tool and draw the object on the form. Once you have defined the UDC on the form, you can then specify the Xbasic code for its various events.A UDC allows the user to write custom controls entirely within Xbasic using the Windows API (or other external libraries) to draw the contents, handle key and mouse events, and react to timer events. See User Defined Controls for more information.The A_USER.HWND variable is used for window control and is always defined.</description>
		</section>
		<section>
			<title>Events and Associated Variables</title>
			<cases>
				<case>
					<title>Control</title>
					<cases>
						<case>
							<title>Events</title>
							<list>
								<item>
									<name>OnCreate</name>
									<description>called when window associated with control is created</description>
								</item>
								<item>
									<name>OnDestroy</name>
									<description>called when window associated with control is destroyed</description>
								</item>
								<item>
									<name>OnDraw</name>
									<description>called whenever control is repainted</description>
								</item>
								<item>
									<name>OnExit</name>
									<description>called when the user control is destroyed</description>
								</item>
								<item>
									<name>OnInit</name>
									<description>called when the user control is created (before window create)</description>
								</item>
							</list>
						</case>
						<case>
							<title>Variables</title>
							<cases>
								<case>
									<title>A_USER.DRAW.HDC</title>
									<description>Display context to paint to.</description>
								</case>
								<case>
									<title>A_USER.DRAW.LEFT</title>
									<description>Left edge of control.</description>
								</case>
								<case>
									<title>A_USER.DRAW.RIGHT</title>
									<description>Right edge of control.</description>
								</case>
								<case>
									<title>A_USER.DRAW.TOP</title>
									<description>Top edge of control.</description>
								</case>
								<case>
									<title>A_USER.DRAW.BOTTOM</title>
									<description>Bottom edge of control.</description>
								</case>
							</cases>
						</case>
					</cases>
				</case>
				<case>
					<title>Key</title>
					<cases>
						<case>
							<title>Events</title>
							<list>
								<item>
									<name>OnKey</name>
									<description>called when a key is pressed when the control has focus</description>
								</item>
							</list>
						</case>
						<case>
							<title>Variables</title>
							<cases>
								<case>
									<title>A_USER.KEY.EVENT</title>
								</case>
								<case>
									<title>A_USER.KEY.VALUE</title>
									<description>Key that was pressed.</description>
									<example><![CDATA[Example: {F1} = F1 key.]]></example>
								</case>
							</cases>
						</case>
					</cases>
				</case>
				<case>
					<title>Mouse</title>
					<cases>
						<case>
							<title>Events</title>
							<list>
								<item>
									<name>OnMouse</name>
									<description>called when a mouse event occurs</description>
								</item>
							</list>
						</case>
						<case>
							<title>Variables</title>
							<cases>
								<case>
									<title>A_USER.MOUSE.EVENT</title>
									<description>Type of event.</description>
									<example><![CDATA["left double click" 
 "left down" 
 "left up" 
 "right double click" 
 "right down" 
 "right up" 
 "move"
 ]]></example>
								</case>
								<case>
									<title>A_USER.MOUSE.X</title>
									<description>Horizontal location of mouse cursor.</description>
								</case>
								<case>
									<title>A_USER.MOUSE.Y</title>
									<description>Vertical location of mouse cursor.</description>
								</case>
								<case>
									<title>A_USER.MOUSE.KEYS</title>
									<description>Modification flags can be any combination of the values.</description>
									<example><![CDATA["l" = left mouse button is down 
 "r" = right mouse button is down 
 "c" = control key is down 
 "s" = shift key is down
]]></example>
								</case>
							</cases>
						</case>
					</cases>
				</case>
				<case>
					<title>Windows Operating System</title>
					<cases>
						<case>
							<title>Events</title>
							<list>
								<item>
									<name>OnMessage</name>
									<description>catch-all for all other windows messages.</description>
								</item>
							</list>
						</case>
						<case>
							<title>Variables</title>
							<cases>
								<case>
									<title>A_USER.MESSAGE.ID</title>
									<description>Message id passed to window procedure.</description>
								</case>
								<case>
									<title>A_USER.MESSAGE.WPARM</title>
									<description>Word parameter passed to window procedure.</description>
								</case>
								<case>
									<title>A_USER.MESSAGE.LPARM</title>
									<description>Long parameter passed to window procedure.</description>
								</case>
								<case>
									<title>A_USER.MESSAGE.RESULT</title>
									<description>Result to be returned by the window function.</description>
								</case>
								<case>
									<title>A_USER.MESSAGE.HANDLED</title>
									<description>Message id passed to window procedure. Set by Xbasic script to TRUE if the event was handled.</description>
								</case>
							</cases>
						</case>
					</cases>
				</case>
				<case>
					<title>Application Window</title>
					<cases>
						<case>
							<title>Events</title>
							<list>
								<item>
									<name>onmove</name>
									<description>called when the window is moved.</description>
								</item>
								<item>
									<name>OnSize</name>
									<description>called when the window is sized.</description>
								</item>
							</list>
						</case>
						<case>
							<title>Variables</title>
							<cases>
								<case>
									<title>A_USER.SIZE.CX</title>
									<description>New horizontal size of window.</description>
								</case>
								<case>
									<title>A_USER.SIZE.CY</title>
									<description>New vertical size of window.</description>
								</case>
							</cases>
						</case>
					</cases>
				</case>
				<case>
					<title>Alpha Five</title>
					<cases>
						<case>
							<title>Events</title>
							<list>
								<item>
									<name>OnRefresh</name>
									<description>called whenever a resynch occurs (i.e. database fields changed).</description>
								</item>
								<item>
									<name>OnTimer</name>
									<description>called whenever a timer event occurs (generated by SetTimer windows call).</description>
								</item>
							</list>
						</case>
						<case>
							<title>Variables</title>
							<cases>
								<case>
									<title>A_USER.TIMER.ID</title>
									<description>The ID passed to the SetTimer function.</description>
								</case>
							</cases>
						</case>
					</cases>
				</case>
			</cases>
		</section>
	</sections>
	<see>
		<ref link="CANCEL Function">CANCEL()</ref>
		<ref link="Field Rule Field Events">Field Rule Field Events</ref>
		<ref link="Field Rule Record Events">Field Rule Record Events</ref>
		<ref link="Canceling Events">Canceling Events</ref>
		<ref link="Attaching Scripts to Events">Attaching Scripts to Events</ref>
	</see>
</page>