<page>
	<topic>Object Addresses</topic>
<description>Each object has an address that you use to manipulate the object. An object address is much like a real address. Just as "36 Bigelow St., Cambridge, MA02139" uniquely identifies someone's home, an object address uniquely identifies an object.
System objects are top-level objects. They can be addressed directly by just specifying the object name. You can optionally prefix the object name with a colon to avoid any potential ambiguity if a user created object has the same name as a system object.
</description>	
<sections>
<section>
	<description>For example, to use the View method for the system Form object, you would use this command:</description>
	<example><![CDATA[Form.View("Customer")]]></example>
</section>	
<section>
	<description>You can also prefix the Form object name with a colon. For example:</description>
	<example><![CDATA[:Form.View("Customer")]]></example>
	<note>The colon tells Alpha Anywhere to start at the highest level in the object hierarchy when searching for the object. It eliminates any ambiguity that might be caused if, for example, a user had created an object that was also called "Form".</note>
</section>		
<section>
	<description>To address user created objects, such as buttons, or text objects on forms, you need to specify the object name and also the names of any objects within which the object is contained.
For example, you might have a form called Customer that has a button called Button1. The address of Button1 is:
</description>
	<example><![CDATA[:Customer:Button1]]></example>
	<note>To make this example work from the Interactive window, you must first select Interactive > Select Interactive Window Session ... > Customer.</note>
</section>
<section>
	<description>To understand object addressing in Alpha Anywhere it helps to think of forms and browses as Containers of other objects. Forms are the most flexible container - they can contain other forms, browses, fields, buttons, etc. Browses are less flexible, but they are still containers - they contain just columns.

Assume you have a form called Customer that contains two fields, First_name and Last_name, and a browse object called Browse1 with three columns Column1, Column2, and Column3. For this form, the object hierarchy looks like:
</description>
	<example><![CDATA[Customer
    First_Name
    Last_Name
    Browse1
        Column1
        Column 2
        Column 3]]></example>
</section>
<section>
	<description>Given the above hierarchy, the address of Column2 is:</description>
	<example><![CDATA[:Customer:Browse1:Column2]]></example>
</section>
<section>
	<description>The formal syntax for addressing objects can be stated as:</description>
	<example><![CDATA[:container:]]></example>
</section>
<section>
	<description>In our example  is Column2 and there are two containers Customer and Browse1.</description>
	
</section>
	
</sections>	
<see>
	<ref href="/documentation/index?search=Objects">Objects</ref>
	<ref href="/documentation/index?search=Object Names">Object Names</ref>
	<ref href="/Ref/Api/Functions/Document Types/Object Functions and Methods/index.xml">Object Functions</ref>
	<ref href="/documentation/index?search=Object Types">Object Types</ref>
	<ref href="/documentation/index?search=Addressing Types">Addressing Types</ref>
	
	
</see>	
</page>