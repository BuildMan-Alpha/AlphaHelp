<page api="xb" build="0">
    <shortlink>api desktop api object class save as function</shortlink>
    <topic>OBJECT.SAVEAS Function</topic>
    <description>Prints a Report, Letter, or Label layout to file in PDF, HTML, RTF, TXT, Excel, or XPS format.</description>
    <prototypes>
        <prototype>Output_Filename as C = Object_Type.Saveas(c layoutname [,c saveas_format [,c filter [,c order [,c filename [,l openoutputfile [,* printoptions [, SQL::Arguments arguments [,* options]]]]]]]])</prototype>
    </prototypes>
    <arguments>
        <argument>
            <name>Object_Type</name>
            <type>C</type>
            <description>
                <p>The type of object to save. This can be one of the following:</p>
                <p>
                    <list bullet="true">
                        <item>
                            <name>"Label"</name>
                        </item>
                        <item>
                            <name>"Letter"</name>
                        </item>
                        <item>
                            <name>"Report"</name>
                        </item>
                    </list>
                </p>
            </description>
        </argument>
        <argument>
            <name>layoutname</name>
            <type>C</type>
            <description>The name of a label, letter, or report layout.</description>
        </argument>
        <argument optional="true">
            <name>saveas_format</name>
            <type>C</type>
            <description>
                <p>Default = "PDF". The file format. The options for Format are:</p>
                <p>
                    <list>
                        <item>
                            <name-title>Format</name-title>
                            <description-title>File Type</description-title>
                        </item>
                        <item>
                            <name>"PDF"</name>
                            <description>PDF format</description>
                        </item>
                        <item>
                            <name>"HTML"</name>
                            <description>Dynamic HTML format</description>
                        </item>
                        <item>
                            <name>"RTF"</name>
                            <description>Rich Text format</description>
                        </item>
                        <item>
                            <name>"TXT"</name>
                            <description>Plain Text format</description>
                        </item>
                        <item>
                            <name>"Excel"</name>
                            <description>Excel format</description>
                        </item>
                        <item>
                            <name>"XPS"
                            </name>
                            <description>XPS format -- XML Paper Specification, an alternative to PDF</description>
                        </item>
                    </list>
                </p>
            </description>
        </argument>
        <argument optional="true">
            <name>filter</name>
            <type>C</type>
            <description>Default = ".T." (All records). A filter expression that evaluates to a logical value and selects records from the table.</description>
        </argument>
        <argument optional="true">
            <name>order</name>
            <type>C</type>
            <description>Default = record order. An order expression that sorts selected records.</description>
        </argument>
        <argument optional="true">
            <name>filename</name>
            <type>C</type>
            <description>Default = Layout_Name in the same folder as the database. The path and name to give the saved file.</description>
        </argument>
        <argument optional="true">
            <name>openoutputfile</name>
            <type>L</type>
            <description>
                <p>Default = .F.</p>
                <p>.T. = After the layout is printed, Alpha Anywhere opens the file with its associated applications. For example, if you saved as a Rich Text Format file, and WordPerfect is the associated application for .RTF files on your computer, Alpha Anywhere will start WordPerfect and load the file.</p>
                <p>.F. = Do not open associated application.</p>
            </description>
        </argument>
        <argument optional="true">
            <name>printOptions</name>
            <type>P</type>
            <description>
                <p>Default = null_value(). You can override the default system settings on a permanent basis. When you override the system defaults, your settings are stored in a text file in the Alpha Anywhere program folder. These files are named:</p>
                <p>
                    <example><![CDATA[AlphaFivePrinterDriver_htm.PrintOptions 
AlphaFivePrinterDriver_pdf.PrintOptions 
AlphaFivePrinterDriver_rtf.PrintOptions]]></example>
                </p>
                <p>Print options are described below. Print options are available for PDF, RTF, and HTML file types. The supported file types are indicated in the option's description.</p>
            </description>
            <properties>
                <property>
                    <name>PrintOptions.MultilingualSupport</name>
                    <type>L</type>
                    <description>Default = *[xb:.f.]*. PDF, RTF, and HTML.</description>
                </property>
                <property>
                    <name>PrintOptions.Colors2GrayScale</name>
                    <type>L</type>
                    <description>Default = *[xb:.f.]*. PDF, RTF, and HTML.</description>
                </property>
                <property>
                    <name>PrintOptions.ConvertHyperlinks</name>
                    <type>L</type>
                    <description>Default = *[xb:.f.]*. PDF and HTML only.</description>
                </property>
                <property>
                    <name>PrintOptions.RTFType</name>
                    <type>C</type>
                    <description>Default = *[xb:"Formatted Text"]*. RTF only.</description>
                </property>
                <property>
                    <name>PrintOptions.HTMType</name>
                    <type>C</type>
                    <description>Default = *[xb:"Layers"]*. HTML only.</description>
                </property>
                <property>
                    <name>PrintOptions.Concatenate</name>
                    <type>L</type>
                    <description>Default = *[xb:.f.]*. PDF only.</description>
                </property>
                <property>
                    <name>PrintOptions.HasWatermark</name>
                    <type>L</type>
                    <description>Default = *[xb:.f.]*. PDF only.</description>
                </property>
                <property>
                    <name>PrintOptions.LinearizeForWeb</name>
                    <type>L</type>
                    <description>Default = *[xb:.f.]*. PDF only.</description>
                </property>
                <property>
                    <name>PrintOptions.WatermarkType</name>
                    <type>C</type>
                    <description>Default = *[xb:"Text"]*. PDF only.</description>
                </property>
                <property>
                    <name>PrintOptions.WatermarkText</name>
                    <type>C</type>
                    <description>Default = *[xb:"D R A F T"]*. PDF only.</description>
                </property>
                <property>
                    <name>PrintOptions.WatermarkFontName</name>
                    <type>C</type>
                    <description>Default = *[xb:"Times New Roman"]*. PDF only.</description>
                </property>
                <property>
                    <name>PrintOptions.WatermarkFontSize</name>
                    <type>N</type>
                    <description>Default = *[xb:172]*. PDF only.</description>
                </property>
                <property>
                    <name>PrintOptions.WatermarkRotation</name>
                    <type>N</type>
                    <description>Default = *[xb:450]*. PDF only.</description>
                </property>
                <property>
                    <name>PrintOptions.WatermarkColorHex</name>
                    <type>C</type>
                    <description>Default = *[xb:upper("e8fed2")]*. PDF only.</description>
                </property>
                <property>
                    <name>PrintOptions.WatermarkHorizPos</name>
                    <type>N</type>
                    <description>Default = *[xb:120]*. PDF only.</description>
                </property>
                <property>
                    <name>PrintOptions.WatermarkVertPos. PDF only.</name>
                    <type>N</type>
                    <description>Default = *[xb:120]*. PDF only.</description>
                </property>
                <property>
                    <name>PrintOptions.WatermarkOnTop</name>
                    <type>L</type>
                    <description>Default = *[xb:.f.]*. PDF only.</description>
                </property>
                <property>
                    <name>PrintOptions.WatermarkPDF</name>
                    <type>C</type>
                    <description>Default = *[xb:""]*. PDF only.</description>
                </property>
                <property>
                    <name>PrintOptions.Encrypt</name>
                    <type>L</type>
                    <description>Default = *[xb:.f.]*. PDF only.</description>
                </property>
                <property>
                    <name>PrintOptions.OwnerPassword</name>
                    <type>C</type>
                    <description>Default = *[xb:""]*. PDF only.</description>
                </property>
                <property>
                    <name>PrintOptions.UserPassword</name>
                    <type>C</type>
                    <description>Default = *[xb:""]*. PDF only.</description>
                </property>
                <property>
                    <name>PrintOptions.CanPrint</name>
                    <type>L</type>
                    <description>Default = *[xb:.t.]*. PDF only.</description>
                </property>
                <property>
                    <name>PrintOptions.CanModifyDocument</name>
                    <type>L</type>
                    <description>Default = *[xb:.t.]*. PDF only.</description>
                </property>
                <property>
                    <name>PrintOptions.CanCopy</name>
                    <type>L</type>
                    <description>Default = *[xb:.t.]*. PDF only.</description>
                </property>
                <property>
                    <name>PrintOptions.CanAddNotes</name>
                    <type>L</type>
                    <description>Default = *[xb:.t.]*. PDF only.</description>
                </property>
                <property>
                    <name>PrintOptions.Use128BitKey</name>
                    <type>L</type>
                    <description>Default = *[xb:.f.]*</description>
                </property>
                <property>
                    <name>PrintOptions.EmbedFonts</name>
                    <type>L</type>
                    <description>
                        <p>Default = *[xb:.f.]*. PDF only.</p>
                        <p>If a font is protected, it can't be embedded. This is often the case for bar code fonts, such as Code39.</p>
                    </description>
                </property>
                <property>
                    <name>PrintOptions.JpegQuality</name>
                    <type>C</type>
                    <description>
                        <p>Default = *[xb:"Low"]*. PDF only.</p>
                        <p>JPEG quality can be "Low", "Medium", "High", or "No Compression".</p>
                    </description>
                </property>
            </properties>
        </argument>
        <argument optional="true">
            <name>arguments</name>
            <type>SQL::Arguments</type>
            <description>Default = null_value(). Arguments that retrieve value(s) from variable(s) or prompts for value(s) at runtime. Only applicable to SQL Reports.</description>
        </argument>
        <argument optional="true">
            <name>options</name>
            <type>P</type>
            <description>
                <p>Default = null_value(). Sets filter (WHERE) and order (ORDER BY) expressions for a query against a passive-linked table. A pointer dot variable with 2 elements. See [Using the Options Argument].</p>
            </description>
            <properties>
                <property optional="true">
                    <name>filter</name>
                    <type>c</type>
                    <description>Replaces the ORDER BY clause in the underlying SQL expression.</description>
                </property>
                <property optional="true">
                    <name>order</name>
                    <type>c</type>
                    <description>Adds to the WHERE clause in the underlying SQL expression.</description>
                </property>
            </properties>
        </argument>
    </arguments>
    <discussion>
        <p>The *[xb:&lt;Object&gt;.saveAs()]* method prints Layout_Name to file in PDF, HTML, RTF, or TXT formats.</p>
        <p>If no format is specified, the .PDF format is used. If you specify an optional Filter_Expression, the only records matching the filter are printed. (In addition to the filter specified here, the layout may have a filter defined within the layout definition). The layout is printed to Filename. If Filename is not specified, the layout is printed to a file with the same name as the Layout_Name in the same folder as the database.</p>
    </discussion>
    <sections>
        <section build="7704">
            <deprecated>
                <p>*[xb:Form.saveAs()]* and *[xb:Browse.saveAs()]* are deprecated. If you want to print a browse or form layout, you must create a report and then import the form or browse as as new report. You can then use *[xb:report.saveAs()]*.</p>
            </deprecated>
        </section>
        <section>
            <description></description>
        </section>
        <section>
            <title>Example</title>
            <description>This script saves a report as a RTF file.</description>
            <example><![CDATA[filename = :Report.saveAs("Invoice","rtf")]]></example>
        </section>
        <section>
            <description>This script saves a report as a PDF file, then launches Adobe Acrobat to view it.</description>
            <example><![CDATA[dim fn as C
fn = report.saveAs("Customer List", "PDF", "", "", "C:\test.pdf", .T.)]]></example>
        </section>
        <section>
            <description>This script saves copy of the Invoice report with an argument. You can add as many arguments to the arguments collection as you want.</description>
            <example><![CDATA[DIM myargs as SQL::arguments 
myargs.add("whatcity","London") 
report.saveAs("report1", "PDF", "", "", "C:\test.pdf", .f., .f., myargs)]]></example>
        </section>
        <section>
            <description>In this example, let's assume that the report is based on a SQL data source. If you specify a filter and order in the method's Filter_expression and Order_expression arguments, the filter and order will be applied after the data has been extracted from the SQL table and moved into a temporary local .dbf table. This is very inefficient. It would be much better to do the filtering and ordering on the server before the data is moved to the local temporary table. This is done using the optional Options argument. For example:</description>
            <example><![CDATA[DIM myargs as SQL::arguments 
dim options as p
options.filter = "city = 'london' .and. title = 'manager'"
options.order = "lastname"
report.saveAs("report1", "PDF", "", "", "C:\test.pdf", .f., .f., myargs,options)]]></example>
        </section>
        <section>
            <description>When you specify the filter in options.filter, you can use arguments. For example:</description>
            <example><![CDATA[DIM myargs as SQL::arguments
myargs.add("whatcity","london")
myargs.add("whattitle","manager") 
  
dim options as p
options.filter = "city = :whatcity .and. title = :whatmanager"
options.order = "lastname"
report.saveAs("report1", "PDF", "", "", "C:\test.pdf", .f., .f., myargs, options)]]></example>
        </section>
        <section>
            <description>When the report is based on a SQL data source you can combine local filtering with filtering on the server. In the above two examples, the filtering was performed on the server. However you can do further filtering on the client if you specify the Filter_expression argument. You might take this approach if you want to do some pre-filtering on the server to limit the number of record that are moved to the temporary local .dbf table, but then use some user-designed function in your local filter.</description>
        </section>
        <section>
            <title>Using the Options Argument</title>
            <description>If you have a SQL report called "nw_customers" with the SQL Select statement *[sql:select * from customers]*, you could use the following *[xb:&lt;object&gt;.saveAs()]* statements:</description>
            <example code="xb" caption="Saves a report with all customer records."><![CDATA[report.saveAs("Nw_customers")]]></example>
        </section>
        <section>
            <example code="xb" caption="Saves a report showing records for the city of London. Note: This method can be very slow for large databases."><![CDATA[report.saveAs("Nw_customers", "city = 'London'")]]></example>
        </section>
        <section>
            <description>
                <p>If the table had 1,000,000 records with 5 records for London, Alpha Anywhere would bring down all 1,000,000 records to the local computer and then do a filter on the table to get the 5 records to print.</p>
                <p>Downloading 1,000,000 records and then post processing them with Alpha Anywhere can be very slow. It would be more efficient to do the filter as part of the SQL database query.</p>
            </description>
            <example code="xb"><![CDATA[dim opt as P 
opt.filter = "city = 'London'" 
report.saveAs("nw_customers", "PDF", "", "", "C:\test.pdf", .f., .f., null_value(), opt)]]></example>
        </section>
        <section>
            <description>Note, that since *[xb:opt]* is the last argument in the function prototype, you must supply values for all of the preceding arguments, even if they were optional arguments. If you do not have a value for the *[xb:arguments]* parameter, you may pass in *[xb:null_value()]* or a "dummy" *[xb:SQL::Arguments]* object as shown in the example below:</description>
            <example code="xb"><![CDATA[dim opt as P 
dim dummyargs as SQL::arguments 
opt.filter = "city = 'London'"
report.preview("nw_customers", "PDF", "", "", "C:\test.pdf", .f., .f., dummyargs, opt)]]></example>
        </section>
        <section>
            <description>This example shows how to use the *[xb:order]* property.</description>
            <example code="xb"><![CDATA[dim opt as P 
opt.filter = "city = 'London'" 
opt.order = "contactname, desc"]]></example>
        </section>
        <section>
            <description>The filter argument is added to the existing SQL SELECT statement's WHERE clause. If the existing SQL SELECT statement was *[sql:select * from customers where customertype = 'retail']*, and you specified *[xb:options.filter = "city = 'London'"]*, the actual SQL for the report would be *[sql:select * from customers where customertype = 'retail' AND city = 'London']*.</description>
        </section>
        <section>
            <description>The order argument replaces any existing ORDER clause in the SQL statement. If the original sql statement was *[sql:select * from customers order by city]*, and you set *[xb:options.order]* to *[xb:contactname, desc, region]*, the resulting SQL for the report will be *[sql:select * from customers order by contactname, desc, region]*.</description>
        </section>
    </sections>
    <limitations>Desktop applications only.</limitations>
    <links>
        <link href="">Print Options</link>
    </links>
    <see>
        <ref link="Writing Expressions">Writing  Expressions</ref>
    </see>
    <terms>object,arguments,case,collection,data source,expressions,file,filename,filter,function,html,layout,logical,number,pdf,pointer,query,record,rtf,script,sql,sql data source,system,variable,writing</terms>
</page>