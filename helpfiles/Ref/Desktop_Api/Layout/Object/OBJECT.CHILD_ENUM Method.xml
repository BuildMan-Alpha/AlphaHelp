<page>
   <topic>OBJECT.CHILD_ENUM Function</topic>
 <description>Return a CR-LF separated list of child objects.</description>   
   
   <syntax>.Child_Enum([C flags[,C classmap]])</syntax>
   <arguments>
     <argument>
         <name>flags</name>
         <description>Optional. Character</description>
         
<list>
<item>
<name-title>Flag Value</name-title>
<description-title>Description</description-title>
</item>

<item>
<name>"r"</name>
<description>Alpha Anywhere recurses into objects that have child objects. For example, Alpha Anywhere will enumerate all of the fields in an embedded browse, or sub-form.
</description>
</item>

<item>
<name>"t"</name>
<description>Returns names of objects that have a tab stop. For example a field's label does not have a tab stop.
</description>
</item>

<item>
<name>"p"</name>
<description>Returns object properties.</description>
</item>

<item>
<name>"px"</name>
<description>Returns only object properties with non-blank values.</description>
</item>

<item>
<name><![CDATA["e=<expn>"]]></name>
<description><![CDATA[Returns the result of <expn>, rather than the object name. The alias "this" represents the object, and any object method can be used in <expn>. E.g. "e = this.FIELD_GET().FULLNAME_GET()" returns the field name that an object is bound to. Note : Remove all spaces from the expression.
]]></description>
</item>


<item>
<name>"s"</name>
<description>Returns a list of the selected objects. (Only meaningful if the layout is in design mode.)
</description>
</item>

<item>
<name>"d"</name>
<description>Returns the names of each member of a group. (Only meaningful if the layout is in design mode, and if used in conjunction with the "s" flag).
</description>
</item>

<item>
<name>"n"</name>
<description>Returns the names in a CR-LF delimited list that is suitable for use in a tree control (i.e. colons in object names are replaced with period, and [ ] in array indexes are preceded with periods).
</description>
</item>

<item>
<name>"f=class"</name>
<description>Returns only objects of the specified class. For example, if you specify a class of "calendar" all of the objects that are defined as "calendar" fields are enumerated. If you specify a class of "field" all of the field objects (including "calendar" which is derived from a "field" object) are enumerated. If you specify a class of "control" all controls are enumerated. For example to get a list of all fields and browse columns, specify "F=field,column". Class can contain a comma delimited list of class names. Note : Remove all spaces from the expression.
</description>
</item>

<item>
<name>"c = n"</name>
<description>Returns the result in proper case (capital first letter, rest lower case).
</description>
</item>

<item>
<name>"c = u"</name>
<description>Returns the data in all uppercase.
</description>
</item>

</list>
         
         
         
         
         
         
         
         
         
     </argument>
     <argument>
         <name>classmap</name>
         <description>For internal use only.</description>
     </argument>
   </arguments>
  
   <discussion><![CDATA[
The <OBJECT>.CHILD_ENUM() method applies to:]]>
   </discussion>
<sections>
       <section>
<list>
<item>
<name><![CDATA[Alpha Anywhere (for <OBJECT> use the keyword "A5")]]></name>
</item>

<item>
<name><![CDATA[Control Panel (for <OBJECT> use the keyword "CONTROLPANEL")]]></name>
</item>

<item>
<name><![CDATA[Browses (for <OBJECT> use either the <BROWSE> pointer or the name of the browse)]]></name>
</item>

<item>
<name><![CDATA[Forms (for <OBJECT> use either the <FORM> pointer or the name of the form)]]></name>
</item>

<item>
<name><![CDATA[Form Controls (for <OBJECT> use the <CONTROL> pointer or the address of the control)]]></name>
</item>

</list>
       </section>
       
 <section>
            <description><![CDATA[The <OBJECT>.CHILD_ENUM() method returns a CR-LF separated list of all the child objects on the object, in tab order.
]]></description>
           
       </section>
       
   </sections>
  
  
  
  
  
   <sections>
       <section><title>Example</title>
            <description>The following code creates an array of all of the object names on the form. Fields in embedded browses and sub-forms are included. The full object name is returned because the .NAME() method is called with the argument of "16".</description>
            <example><![CDATA[list = topparent.child_enum("r;e=this.name(16)")
count = w_count(list, CRLF())
dim object_array[count] as C
object_array.initialize(list)]]></example>
       </section>
       
        <section>
            <description>This script run by the OnInit event of a form retrieves a list of embedded browses.</description>
            <example><![CDATA[dim browse_list as C
browse_list = this.Child_Enum("f=browse")]]></example>
       </section>
       
        <section>
            <description>A button on a form calls this script, which displays a message containing a list of the column names of the embedded browse named browse1.</description>
            <example><![CDATA[ui_msg_box("Browse Columns", browse1.child_enum())]]></example>
       </section>
   </sections>
   <limitations>Desktop applications only.</limitations>
   <see>
      <ref href="/Ref/Desktop_Api/Layout/Form/Form Functions and Methods.xml">Form Functions and  Methods</ref>
      <ref href="/Desktop/Reference/Design/View/Browse/Browse Functions and Methods.xml">Browse  Functions and Methods</ref>
   </see>
   <terms>object,array,button,case,column,control,field,function,label,layout,list,rest,script,tree control</terms>
</page>