<page api="xb">
    <shortlink>api desktop api object class preview function</shortlink>
    <topic>OBJECT.PREVIEW Function</topic>
    <description>Displays the Preview dialog box for the current layout.</description>
    <prototypes>
        <prototype>Output_Filename as C = :object_type.Preview(c layoutname [,c filter [,c order [,l modal [,l session_modal [, SQL::Arguments arguments [,* options ]]]]]])</prototype>
    </prototypes>
    <arguments>
        <argument>
            <name>object_type</name>
            <description>
                <p>The type of object to preview. Can be one of the following:</p>
                <p>
                    <list bullet="true">
                        <item>
                            <name>"Browse"</name>
                        </item>
                        <item>
                            <name>"Form"</name>
                        </item>
                        <item>
                            <name>"Label"</name>
                        </item>
                        <item>
                            <name>"Letter"</name>
                        </item>
                        <item>
                            <name>"Report"</name>
                        </item>
                    </list>
                </p>
            </description>
        </argument>
        <argument>
            <name>layoutname</name>
            <description>The name of the layout to preview.</description>
        </argument>
        <argument optional="true">
            <name>filter</name>
            <description>Default = ".T." (All records). A character filter expression that evaluates to a logical value and selects records for the report.
            </description>
        </argument>
        <argument optional="true">
            <name>order</name>
            <description>Default = record order. A character order expression that sorts selected records.</description>
        </argument>
        <argument optional="true">
            <name>modal</name>
            <description>
                <p>Default = .F.</p>
                <p>.T. = The user cannot change focus without closing the dialog.</p>
                <p>.F. = The user can change focus without closing the dialog.</p>
            </description>
        </argument>
        <argument optional="true">
            <name>session_modal</name>
            <description>
                <p>Default = .T.</p>
                <p>.T. = This means that any script that calls the REPORT.PREVIEW() method will pause until the Print Preview window is closed. However, the preview window itself is not a modal dialog box. The user is free to select other windows in Alpha Anywhere.</p>
                <p>.F. = The script does not pause until the Print Preview window is closed.</p>
            </description>
        </argument>
        <argument optional="true">
            <name>arguments</name>
            <type>SQL::Arguments</type>
            <description>Default = null_value(). Arguments that retrieve value(s) from variable(s) or prompts for value(s) at runtime. Only applicable to SQL Reports.</description>
        </argument>
        <argument optional="true">
            <name>options</name>
            <description>
                <p>Default = null_value(). Sets filter (WHERE) and order (ORDER BY) expressions for a query against a passive-linked table. A pointer dot variable with 2 elements.</p>
            </description>
            <properties>
                <property optional="true">
                    <name>filter</name>
                    <type>C</type>
                    <description>Adds to the WHERE clause in the underlying SQL expression.</description>
                </property>
                <property optional="true">
                    <name>order</name>
                    <type>C</type>
                    <description>Replaces the ORDER BY clause in the underlying SQL expression.</description>
                </property>
            </properties>
        </argument>
    </arguments>
    <discussion>
        <p>The *[xb:&lt;object&gt;.preview()]* method displays the Preview dialog box showing the selected layout.</p>
    </discussion>
    <sections>
        <section>
            <title>Example</title>
            <description>This script previews the Invoice report with an argument. You can add as many arguments to the arguments collection as you want.</description>
            <example code="xb"><![CDATA[:Report.archive("Invoice")
DIM myargs as SQL::arguments
myargs.add("whatcity", "London") 

report.preview("report1", "", "", .f., .f., myargs)]]></example>
        </section>
        <section>
            <title>Using the Options Argument</title>
            <description>If you have a SQL report called "nw_customers" with the SQL Select statement *[sql:select * from customers]*, you could use the following *[xb:&lt;object&gt;.preview()]* statements:</description>
            <example code="xb" caption="Previews a report showing all of the customer records."><![CDATA[report.preview("Nw_customers")]]></example>
        </section>
        <section>
            <example code="xb" caption="Previews a report showing records for the city of London. Note: This method can be very slow for large databases."><![CDATA[report.preview("Nw_customers", "city = 'London'")]]></example>
        </section>
        <section>
            <description>
                <p>If the table had 1,000,000 records with 5 records for London, Alpha Anywhere would bring down all 1,000,000 records to the local computer and then do a filter on the table to get the 5 records to print.</p>
                <p>Downloading 1,000,000 records and then post processing them with Alpha Anywhere can be very slow. It would be more efficient to do the filter as part of the SQL database query.</p>
            </description>
            <example code="xb"><![CDATA[dim opt as P 
opt.filter = "city = 'London'" 
report.preview("nw_customers", "", "", .f., .f., null_value(), opt)]]></example>
        </section>
        <section>
            <description>Note, that since *[xb:opt]* is the last argument in the function prototype, you must supply values for all of the preceding arguments, even if they were optional arguments. If you do not have a value for the *[xb:arguments]* parameter, you may pass in *[xb:null_value()]* or a "dummy" *[xb:SQL::Arguments]* object as shown in the example below:</description>
            <example code="xb"><![CDATA[dim opt as P 
dim dummyargs as SQL::arguments 
opt.filter = "city = 'London'"
report.preview("nw_customers", "", "", .f., .f., dummyargs, opt)]]></example>
        </section>
        <section>
            <description>This example shows how to use the *[xb:order]* property.</description>
            <example code="xb"><![CDATA[dim opt as P 
opt.filter = "city = 'London'" 
opt.order = "contactname, desc"]]></example>
        </section>
        <section>
            <description>The filter argument is added to the existing SQL SELECT statement's WHERE clause. If the existing SQL SELECT statement was *[sql:select * from customers where customertype = 'retail']*, and you specified *[xb:options.filter = "city = 'London'"]*, the actual SQL for the report would be *[sql:select * from customers where customertype = 'retail' AND city = 'London']*.</description>
        </section>
        <section>
            <description>The order argument replaces any existing ORDER clause in the SQL statement. If the original sql statement was *[sql:select * from customers order by city]*, and you set *[xb:options.order]* to *[xb:contactname, desc, region]*, the resulting SQL for the report will be *[sql:select * from customers order by contactname, desc, region]*.</description>
        </section>
    </sections>
    <limitations>Desktop applications only.</limitations>
    <see>
        <ref>Report Functions and Methods</ref>
        <ref link="Writing Expressions">Writing Expressions</ref>
    </see>
    <terms>object,arguments,collection,expressions,filter,function,layout,logical,pointer,preview,query,record,script,set,sql,variable,window,writing</terms>
</page>