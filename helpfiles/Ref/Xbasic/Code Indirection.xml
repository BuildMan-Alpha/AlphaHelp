<page>
	<topic>Code Indirection</topic>
	<description>
		<p>Code indirection refers to the situation when you want to execute an Xbasic command that is contained in a variable (i.e. to indirectly execute an Xbasic command).</p>
		<p>The EVALUATE_TEMPLATE( Command_String ) function is used to execute an Xbasic command that is contained in Command_String.</p>
	</description>
	<sections>
		<section>
			<note>Alpha Anywhere also offers the EVALUATE_TEMPLATE_PRIVATE() command which executes the code in another session, rather than in the current session.</note>
		</section>
		<section>
			<description>
				<p>For example, assume that the variable, command, contains " dim global newVar as C ". The command: EVALUATE_TEMPLATE(command) would be the same as executing the command: dim global newVar as C.</p>
				<p>The following example shows a function that takes a table name and a record number and creates global variables for each of the fields in the table, assigning the value in each field to the corresponding variable.</p>
				<p>For example, if the table had three fields, Firstname, Lastname and Age, with corresponding field values of John, Smith and 34, the function would create three global variables called Firstname, Lastname and Age and assign the corresponding values to these variables.</p>
			</description>
			<note>Legacy: If you are familiar with Alpha Four, this example is equivalent to the XLOOKUPR() function.</note>
		</section>
		<section>		
			<example><![CDATA[function xlookup as L(tablename as C, rec as N)
    t = table.open(tablename)
    t.index_primary_put()
    t.fetch_goto(rec)
    num_fields = t.fields_get()
    for I = 1 to num_fields
        f = t.field_get(I)
        evaluate_template("dim global " + f.name_get()+ " as " +
        f.type_get())
        eval(f.name_get()) = f.value_get()
    next I
    t.close()
end function ]]></example>
		</section>
	</sections>	
	<see>
		<ref link="What is a Variable?">What is a Variable?</ref>
	</see>
</page>