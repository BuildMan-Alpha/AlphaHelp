<page api="xb">
    <shortlink>Xbasic declare</shortlink>
    <topic>DECLARE</topic>
    <description>DECLARE declares an externally defined function (for example a Windows API function).</description>
    <warning>DECLARE is not supported in web applications.</warning>
    <syntax>DECLARE Library Function_Name Arguments as ReturnType</syntax>
    <arguments>
        <argument>
            <name>Library</name>
            <description>Indicates the name of the DLL in which the function is found.</description>
        </argument>
        <argument>
            <name>Function_Name</name>
            <description>The name of the function. Using an '@' in the Function_Name allows you to call a function by a user specified alias in Xbasic, rather than its real name in the .DLL. For example, to call a Windows API functions like SetWindowTextA (which means ASCII 8 bit character version of SetWindowText ) as Swt declare the Function_Name as follows: Swt@SetWindowsTextA
            </description>
        </argument>
        <argument>
            <name>Arguments</name>
            <description>
                <p>The argument types with no spaces or punctuation between them. The allowed types are the following:</p>
                <p>
                    <list>
                        <item>
                            <name>"L"</name>
                            <description>32 bit long</description>
                        </item>
                        <item>
                            <name>"I"</name>
                            <description>32 bit integer</description>
                        </item>
                        <item>
                            <name>"W"</name>
                            <description>16 bit short</description>
                        </item>
                        <item>
                            <name>"B"</name>
                            <description>byte</description>
                        </item>
                        <item>
                            <name>"N"</name>
                            <description>IEEE 8 byte Double</description>
                        </item>
                        <item>
                            <name>"F"</name>
                            <description>IEEE 4 byte float</description>
                        </item>
                        <item>
                            <name>"C"</name>
                            <description>character (address of characters)</description>
                        </item>
                        <item>
                            <name>"(yourtype)"</name>
                            <description>User defined type.</description>
                        </item>
                    </list>
                </p>
                <p>You can include user defined types that have more than one character in their name by putting parentheses around the type name. See the example user defined type called 'rect' that is used in the GetWindowRect function.</p>
            </description>
        </argument>
        <argument>
            <name>ReturnType</name>
            <description>The return type. See the Arguments section for allowed types. Note : Extra spaces are added for readability. Remove the space from the finished statement between ReturnType and Arguments.</description>
        </argument>
    </arguments>
    <discussion>
        <p>An external function can return a reference to data, but user defined data returned by reference by a function cannot be modified (it is treated as Constant data). For example, declare user32 GetWindowText@GetWindowText LLL(text) is no different than: declare user32 GetWindowText LLL(text)</p>
        <p>The reason we provide aliasing is to provide a means to override behavior of a function which can take optional arguments (have multiple declarations of the same function where an argument can be either a NULL pointer (L with a value of 0) or a structure ) or to provide a means to rename a function name that is mangled (i.e. windows functions sometimes add a W or A to the end to specify UNICODE versus ASCII versions of a function). See also DeclareStruct and Type..End Type</p>
    </discussion>
    <sections>
        <section>
            <title>Examples</title>
            <description>Declare some structures to use - a rectangle and a 1024 character buffer.
            </description>
            <example code="xb"><![CDATA[declarestruct rect L1left,L1top,L1right,L1bottom
declarestruct text C1024txt]]></example>
        </section>
        <section>
            <description>GetWindowRect returns a long, and takes long 'window' as the first argument, and a pointer to a rect structure as the second argument.
            </description>
            <example code="xb"><![CDATA[declare user32 GetWindowRect LL(rect)]]></example>
        </section>
        <section>
            <description>We declare GetWindowText to return a long, take a long 'window' handle as the first argument and a 1024 character buffer as the second argument and a long length as the third argument.
            </description>
            <example code="xb"><![CDATA[declare user32 gwt@GetWindowText LL(text) as L]]></example>
        </section>
        <section>
            <description>Given that wnd contains a window handle, get the text of the window into a temporary variable.
            </description>
            <example code="xb"><![CDATA[temp.text = ""
gwt(wnd,temp,1024)]]></example>
        </section>
        <section>
            <description>The following example shows how DECLARE was used to call a TWAIN driver.
            </description>
            <example code="xb"><![CDATA[dim ftemp as P
declarestruct hwndapp L1hwndapp
declarestruct sFile C255sFile
DECLARE Eztwain3 TWAIN_AcquireToFilename L(hwndApp)(sFile)
ftemp.sFile="C:\\test\\pict1.jpg"
TWAIN_AcquireToFilename(0, ftemp) ]]></example>
        </section>
    </sections>
    <limitations>Desktop Applications Only</limitations>
    <see>
        <ref>XReserved Words</ref>
        <ref link="Xbasic Language Reference">Xbasic Language Reference</ref>
    </see>
</page>