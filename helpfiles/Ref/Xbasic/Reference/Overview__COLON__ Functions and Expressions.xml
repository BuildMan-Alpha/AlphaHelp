<page api="xb">
	<shortlink>ref xb overview functions and expressions</shortlink>
	<topic>Overview: Functions and Expressions</topic>
	<description>Expressions are used throughout Alpha Anywhere for a variety of purposes. They are used to order and select records, display calculations on layouts, link two tables together, and to specify conditions under which events occur. For example, you can create an expression for a calculated field to show sales totals at the bottom of a Report, or you can create a duplicate key expression so that Alpha Anywhere knows which records in your table are duplicates.</description>
	<sections>
		<section>
			<description>No matter what you use expressions for, the syntax you use for creating expressions is the same throughout the program. This chapter contains a detailed discussion of this syntax, letting you get the most from Alpha Five.You will see expressions in many different situations, but the most common are:</description>
			<list bullet="true">
				<item>
					<name>Index Definitions</name>
				</item>
				<item>
					<name>Filter Expressions</name>
				</item>
				<item>
					<name>Order Expressions</name>
				</item>
			</list>
		</section>
		<section>
			<description>When you want to derive a value by performing computations on variables, fields, and constants, you do it by forming an expression. An expression is like a formula composed of combinations of:</description>
			<list bullet="true">
				<item>
					<name>Variables</name>
				</item>
				<item>
					<name>Constants</name>
				</item>
				<item>
					<name>Table Field Names</name>
				</item>
				<item>
					<name>Layout Field Names</name>
				</item>
				<item>
					<name>Xbasic Functions</name>
				</item>
			</list>
			<note>The maximum length of an expression is approximately 950 characters.</note>
		</section>
		<section>
			<title>Data Types</title>
			<description>
				<p>The result of this formula can be a numeric, a character string, a date, or a logical value.</p>
				<p>All expressions return a value which can be used in an Xbasic script. This value can either be assigned to a variable or passed along as a parameter to an Xbasic function.</p>
				<p>Alpha Anywhere is very particular about the data type of an expression and the context in which the expression is used. If the data type to which the expression evaluates does not match the expected or required data type, an error will occur.</p>
				<p>For example, the TRACE.WRITELN() method requires a character parameter. To print a numeric value in the Trace window, the following statement is used:</p>
			</description>
			<example code="xb"><![CDATA[num = 5
trace.writeln (str ( num ) ) ]]></example>
		</section>
		<section>
			<description>The expression str(num), which is passed to the TRACE.WRITELN() method, converts the numeric variable to a string.</description>
			<note>The following shortcut would also work. It relies on the fact that Alpha Anywhere implicitly converts variable types when concatenating them with character variables:</note>
		</section>
		<section>
			<example code="xb"><![CDATA[trace.writeln("" + num)]]></example>
		</section>
		<section>
			<title>What is a Filter Expression?</title>
			<description>The Filter Expression determines the records you are going to work with. The expression has the following characteristics:</description>
			<cases>
				<case>
					<description>It must evaluate to a logical value. When it evaluates to .T. (TRUE), the record is included. When the expression evaluates to .F. (FALSE), the record is excluded.</description>
				</case>
				<case>
					<description>It typically refers to one or more fields in the table (e.g. DOB >= {1/1/48} .and. isnotblank(LASTNAME) ).</description>
				</case>
				<case>
					<description>If may include functions that manipulate or evaluate field values.</description>
				</case>
				<case>
					<description>An empty expression selects all records previously selected by any filter associated with the underlying form or browse. If that expression is empty, you will get all records in the table.</description>
				</case>
			</cases>
		</section>
		<section>
			<description>In many situations an expression is passed as a character argument to a function. In these situations the expression must be quoted. Values and variables within quoted expressions must also be quoted. In order to avoid confusion about the meaning of the quotes, there are three optional (but equivalent) methods for quoting values and variables within these quoted expressions. For example:</description>
			<example code="xb"><![CDATA[report.preview("Customer List", "lastname > 'm'")
report.preview("Customer List", "lastname > \"m\"")
report.preview("Customer List", "lastname > " + quote("m"))]]></example>
		</section>
		<section>
			<description>Filter expressions may use ASK Variables to get user input at run-time.</description>
		</section>
		<section>
			<title>Writing a Filter Expression</title>
			<description>A filter expression contains specially formatted character data in the format.</description>
			<example code="xb"><![CDATA[Filter_Sub_Expression1 [ .AND. |.OR. Filter_Sub_Expression2 [ ... .AND. |.OR. Filter_Sub_ExpressionN ]]]]></example>
		</section>
		<section>
			<description>A filter sub-expression references at least one field in a table in one of the following formats. The following are examples of typical sub-expressions.</description>
		</section>
		<section>
			<title>Format and Examples</title>
			<cases>
				<case>
					<title>Character</title>
					<example code="xb"><![CDATA[Character_Field = " Character_Value "
Character_Field = Character_Variable
left( Character_Field,1) > " Character_Value " ]]></example>
				</case>
				<case>
					<title>Date</title>
					<example code="xb"><![CDATA[Date_Field = ctod(" Date_Value ")
Date_Field < Date_Variable
month( Date_Field ) = Number ]]></example>
				</case>
				<case>
					<title>Logical</title>
					<example code="xb"><![CDATA[Logical_Field = .T.
Logical_Field <> Logical_Variable
.not. Logical_Field = .F. ]]></example>
				</case>
				<case>
					<title>Number</title>
					<example code="xb"><![CDATA[Number_Field > Number
Number_Field = Number_Variable
ceiling( Number_Field ) <= 12 ]]></example>
				</case>
			</cases>
		</section>
		<section>
			<title>What is an Order Expression?</title>
			<description>The Order Expression determines the order in which to display the records you have selected. The expression has the following characteristics:</description>
			<cases>
				<case>
					<description>It must evaluate to a character value less than or equal to 240 characters in length.</description>
				</case>
				<case>
					<description>It typically refers to one or more fields in the table (e.g. left(LASTNAME,8)+left(FIRSTNAME,8) ).</description>
				</case>
				<case>
					<description>If may include functions that manipulate or evaluate field values.</description>
				</case>
				<case>
					<description>An empty expression uses the order associated with the underlying form or browse. If that expression is empty, your will get records in record number order.</description>
				</case>
			</cases>
		</section>
		<section>
			<description>Complete lists of Alpha functions and methods can be found in Function List and Method List</description>
		</section>
		<section>
			<title>Key Terms</title>
			<list>
				<item>
					<name>Expression</name>
					<description>Any combination of fields, constant values, functions, and operators that can evaluate to a single value.</description>
				</item>
				<item>
					<name>Function</name>
					<description>A pre-defined keyword used in an expression, Each function has a particular purpose. For example, DATE()is a function to determine the current date.</description>
				</item>
				<item>
					<name>Operator</name>
					<description>A symbol used to represent a mathematical, relational, logical, or string operation. Example operators: +, -, *.</description>
				</item>
				<item>
					<name>Expression Builder</name>
					<description>A visual tool used to create expressions in Alpha Anywhere.</description>
				</item>
				<item>
					<name>Numeric Expression</name>
					<description>An expression that evaluates to a numeric value. For example, 3+4 is a numeric expression that evaluates to 7.</description>
				</item>
				<item>
					<name>Character Expression</name>
					<description>An expression that evaluates to a character value. Order Expressions are always Character Expressions.</description>
				</item>
				<item>
					<name>Date Expression</name>
					<description>An expression that evaluates to a date value.</description>
				</item>
				<item>
					<name>Logical Expression</name>
					<description>An expression that evaluates to either TRUE or FALSE. For example, 2+4=7 is a logical expression that evaluates to FALSE. Filter expressions are always Logical Expressions.</description>
				</item>
				<item>
					<name>Linking Key Expression</name>
					<description>A character expression used to specify common field(s) between two tables.</description>
				</item>
				<item>
					<name>Conditional Expression</name>
					<description>A logical expression used to determine whether or not an event occurs.</description>
				</item>
				<item>
					<name>Filter Expression</name>
					<description>A logical expression used to select records.</description>
				</item>
				<item>
					<name>Order Expression</name>
					<description>A character expression used to sort records.</description>
				</item>
				<item>
					<name>Calculated Field</name>
					<description>A virtual field defined for a table, set or layout. Calculated fields aren't stored on disk. They're calculated as Needed.</description>
				</item>
				<item>
					<name>Calculated Field Rule</name>
					<description>A Field Rule that inserts and expression's value into a field whenever a record is entered or changed.</description>
				</item>
			</list>
		</section>
	</sections>
	<see>
		<ref link="api expression evaluation functions">Expression Evaluation Functions</ref>
		<ref>Using Quotes in Expressions</ref>
		<ref>TRACE Methods</ref>
		<ref href="/Server/Reference/Design/Platform/Xbasic/Command Statements.xml">Command Statements</ref>
		<ref>Command Statements Reference</ref>
	</see>
</page>