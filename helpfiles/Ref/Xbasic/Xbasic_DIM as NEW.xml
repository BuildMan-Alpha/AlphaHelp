<page api="xb">
    <shortlink>Xbasic dim as new</shortlink>
    <topic>Dim...AS...New</topic>
    <description></description>
    <syntax>dim args as classname1 = new classname2</syntax>
    <arguments>
        <argument>
            <name>classname1</name>
            <description>The new class type being created.</description>
        </argument>
        <argument>
            <name>classname1</name>
            <description>The new class type being assigned. In most situations, *[xb:classname1]* and *[xb:classname2]* will be the same.</description>
        </argument>
    </arguments>
    <discussion>
        <p>If you have a class type, such as SQL::Arguments, and you say dim args as new SQL::Arguments = new SQL::Arguments, then whatever was there to begin with will be overwritten with the brand new definition of SQL::Arguments.</p>
        <p>
            <example code="xb"><![CDATA[dim args as SQL::Arguments
args.set("MyArg","MyArgValue")

 new SQL::Arguments()]]></example>
        </p>
        <p>In some situations, the class of the variable you create is different from the assigned class. For example, in the code below, a variable named *[xb:Stream]* is initially defined as a *[xb:System::IO::Stream]* type. Later in the example, the *[xb:Stream]* variable is assigned a new *[xb:System::IO::MemoryStream]* object. The *[xb:System::IO::MemoryStream]* is a type of *[xb:System::IO::Stream]* class. Both classes are found in the [.NET framework], which can be called into using Xbasic:</p>
        <p>
            <example code="xb"><![CDATA[dim Stream as System::IO::Stream = null_value()
dim ContentType as C
dim Length as N
dim Buffer as B
dim CallResult as CallResult
dim Container as A5Storage::DataContainer = null_value()

Stream = new System::IO::MemoryStream()
CallResult = A5Storage::DataContainer::Open(Container, "Provider='Disk';Container='c:\A5Webroot';")
if CallResult.Success
    if Container.WriteItemToStream(Stream, Length, ContentType, "Speak.a5w")
        Stream.Seek(0, System::IO::SeekOrigin::Begin)

        dim Reader as System::IO::BinaryReader = new System::IO::BinaryReader(Stream)
        Buffer = Reader.ReadBytes(Length)
        Stream.close()
    else
        CallResult = Container.CallResult
    end if
end if

if CallResult.Success
    showvar("Type: " + ContentType + crlf() + "Length: " + Length + crlf(2) + buffer, "Success")
else
    showvar(CallResult.Text, "Error")
end if]]></example>
        </p>
    </discussion>
    <links>
        <link link="server%20dotnet%20framework%20support">.NET framework</link>
    </links>
    <see>
        <ref link="Xbasic Language Reference">Xbasic Language Reference</ref>
    </see>
</page>