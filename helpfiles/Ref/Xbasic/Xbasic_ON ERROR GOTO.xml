<page api="xb">
    <shortlink>Xbasic on error goto</shortlink>
    <topic>ON ERROR GOTO, RESUME NEXT</topic>
    <description>Expects to have the error handled</description>
    <prototypes>
        <prototype>ON ERROR RESUME NEXT</prototype>
        <prototype>ON ERROR RESUME LabelName</prototype>
        <prototype>ON ERROR RESUME 0</prototype>
        <prototype>ON ERROR GOTO NEXT</prototype>
        <prototype>ON ERROR GOTO LabelName</prototype>
        <prototype>ON ERROR GOTO 0</prototype>
    </prototypes>
    <arguments>
        <argument>
            <name>ON ERROR GOTO 0</name>
            <description>Disables error handling.</description>
        </argument>
        <argument>
            <name>ON ERROR GOTO LabelName</name>
            <description>Branch to the address of LabelName (expecting it to be an error handler). The label name cannot contain spaces.</description>
        </argument>
        <argument>
            <name>ON ERROR GOTO NEXT</name>
            <description>Branch to the next line (expecting it to be an error handler).</description>
        </argument>
        <argument>
            <name>ON ERROR RESUME 0</name>
            <description>Disables error handling.</description>
        </argument>
        <argument>
            <name>ON ERROR RESUME LabelName</name>
            <description>Ignore the error and branch to the address of LabelName. The label name cannot contain spaces.</description>
        </argument>
        <argument>
            <name>ON ERROR RESUME NEXT</name>
            <description>Ignore the error and go to the next instruction.</description>
        </argument>
    </arguments>
    <discussion>Note that the ON ERROR GOTO statement expects to have the error handled, while ON ERROR RESUME expects to have the error ignored. When using ON ERROR RESUME NEXT, there will not be error information available after the branch. ON ERROR RESUME NEXT may produce an error if there is no NEXT to resume to. See Also, [ERROR_GENERATE()], [ERROR_CODE_GET()], and [ERROR_TEXT_GET()]. 
    </discussion>
    <sections>
        <section>
            <title>Examples</title>
            <description>For example, the following script shows a generic error handling routine:
            </description>
            <example code="xb"><![CDATA[on error goto error_handler
'put Xbasic code here
end
error_handler:
    err = error_code_get()
    msg = error_text_get(err)
    ui_msg_box("Error", msg)
end ]]></example>
        </section>
        <section>
            <description>
                <p>When an error is encountered, this routine displays the text message from the error and then ends script execution. For more robust error handling, use the [ERROR_CODE_GET()] function to determine exactly which error occurred. You can then take steps to recover from this error so you can resume script execution.</p>
                <p>
                    <note>
                        <p>Each function should handle and clear its own errors. A calling function will see errors created within called functions, but will not be able to properly handle RESUME statements.</p>
                    </note>
                </p>
                <p>This error handling routine is evaluated when x = 3. The [ERROR_GENERATE()] function is used to generate the run-time error. The [TRACE] object is used to log messages to the Trace Log.</p>
            </description>
            <example code="xb"><![CDATA[trace.writeln("Start")
on error goto error_handler
for x = 1 TO 10
    if (x = 3) then
        ERROR_GENERATE()
    end if
    trace.writeln( str(x) )
next x
trace.writeln("End")
end
error_handler:
    trace.writeln("Error processed.")
    resume next]]></example>
        </section>
        <section>
            <description>This script shows how an error handler is used to recover from a field rule violation.</description>
            <example code="xb"><![CDATA[tbl = table.current()
if (tbl.mode_get()> 0) then
    'Compute the Message Type code
    code = UI_ATTENTION_SYMBOL
    ui_msg_box("Warning", "Already in data entry mode.", code)
else
    commit_flag = .T.
    tbl.change_begin()
    on error goto error_handler
    tbl.last_name = "Washington"
    tbl.first_name = "George"
    tbl.change_end(commit_flag)
end if
parent.resynch()
end
error_handler:
    commit_flag = .F.
    resume next]]></example>
        </section>
    </sections>
    <links>
        <link link="api%20error%20code%20get%20function">ERROR_CODE_GET()</link>
        <link link="api%20error%20text%20get%20function">ERROR_TEXT_GET()</link>
        <link link="api%20error%20generate%20function">ERROR_GENERATE()</link>
        <link link="api%20objects%20trace%20object%20trace%20methods">TRACE</link>
    </links>
    <see>
        <ref link="Xbasic Language Reference">Xbasic Language Reference</ref>
    </see>
    <terms>on error,goto,on error goto,on error resume,goto next,resume next</terms>
</page>