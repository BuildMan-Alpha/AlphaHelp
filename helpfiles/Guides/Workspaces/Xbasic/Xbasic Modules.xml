<page build="2614">
    <shortlink>server xb Web Applications Xbasic Modules</shortlink>
    <topic>Xbasic Modules</topic>
    <description>Xbasic Modules can be used to package Xbasic scripts used in a web project. The advantage of Xbasic modules over function libraries is that you can selectively choose what functions are publicly accessible from the module.</description>
    <discussion>
        <p>Xbasic Modules can be managed on the Web Project Control Panel through the *[ui:Xbasic]* category.</p>
    </discussion>
    <sections>
        <section>
            <figure>
                <link>images/wcpXbasic.png</link>
            </figure>
        </section>
        <section>
            <description>
                <p>An Xbasic Module is a text file with a .a5xbm extension. It is stored in the web project folder. The purpose of an Xbasic Module is to allow you to package Xbasic function definitions so that they can easily be used in other Xbasic code you write.</p>
            </description>
            <videos>
                <title>Xbasic Modules</title>
                <video>
                    <name>Watch Video</name>
                    <link>http://www.viddler.com/v/3059c9a8</link>
                </video>
            </videos>
        </section>
        <section>
            <note>Xbasic Modules are very similar to the concept of Node modules. Xbasic Modules must end with one or more *[xb:exports]* commands defining the functions to make publicly available.</note>
        </section>
        <section>
            <description>
                <p>Xbasic Modules can contain one or more functions. For example, consider the following Xbasic Module called MyXBModule.a5xbm:</p>
                <p>
                    <example code="xb"><![CDATA[function greeting as c (name as c )
    greeting = "Hello " + ut(name) + " the time is now: " + currentDate()
end function 

function sayGoodbye as c (name as c)
    sayGoodbye = "Goodbye " + name + "."
end function

function currentDate as c ()
    currentDate = date()
end function 

' Export the greeting and sayGoodbye functions:
exports.sayHello = greeting
exports.sayGoodbye = sayGoodbye]]></example>
                </p>
                <p>The MyXBModule.a5xbm defines three functions, two of which have been exported. Let's take a look at how functions are exported in more depth.</p>
            </description>
        </section>
        <section>
            <title>Exposing Functions With "exports"</title>
            <description>
                <p>The *[xb:exports]* object is a dot variable that contains one or more functions to make public. Exported functions can use the same name as the function being exported or be renamed to something else. Only functions that have been exported will be publicly available outside of the Xbasic Module.</p>
                <p>In MyXBModule.a5xbm, two functions were exported:</p>
                <p>
                    <example code="xb"><![CDATA[exports.sayHello = greeting
exports.sayGoodbye = sayGoodbye]]></example>
                </p>
                <p>The greeting() and sayGoodbye() are exported as "sayHello()" and "sayGoodbye()". </p>
                <p>The currentDate() function was not exported and therefore cannot be called.</p>
                <p>Also notice that the greetings() function was exported as sayHello. This means that to the calling code the function sayHello() can be called (but not the internal greetings() function).</p>
            </description>
        </section>
        <section>
            <description>
                <p>An external Xbasic script or function can call these functions to invoke the greeting() and sayGoodbye() functions in the MyXBModule.a5xbm Xbasic Module by including it using the require() function. For example, the following Xbasic Script includes the module and calls the two functions, displaying the results using the showvar() function:</p>
                <p>
                    <example code="xb"><![CDATA[dim pxb as p
' Include the Xbasic Module
pxb = require("MyXBModule")

dim greeting as c 
greeting = pxb.sayHello("Jim")

dim parting as c
parting = pxb.sayGoodbye("Sue")

' Show variable results:
' (showvar can only be used running in the Developer IDE or desktop application)
showvar(greeting)
showvar(parting)]]></example>
                </p>
            </description>
        </section>
        <section>
            <description>
                <p>All functions exported from an Xbasic Module *[must be listed at the end of the file]*. You cannot mix *[xb:exports]* with other functions. E.g. in the following example, the greeting() function is *[not]* exported because it is mixed in with the functions in the Xbasic Module. </p>
                <p>
                    <example code="xb" caption="Only the functions exported at the end of the Xbasic Module will be publicly available."><![CDATA[function greeting as c (name as c )
    greeting = "Hello " + ut(name) + " the time is now: " + currentDate()
end function 

' Export the greeting function:
' !!!ERROR: sayHello will NOT be created!!!
exports.sayHello = greeting

function sayGoodbye as c (name as c)
    sayGoodbye = "Goodbye " + name + "."
end function

function currentDate as c ()
    currentDate = date()
end function 

' Export the sayGoodbye function:
exports.sayGoodbye = sayGoodbye]]></example>
                </p>
            </description>
        </section>
        <section>
            <figure>
                <title>sayHello() is not available because it was not exported at the end of the Xbasic Module!</title>
                <link>images/badExport.png</link>
            </figure>
        </section>
        <section>
            <title>Using the require() Function</title>
            <description>
                <p>To use an Xbasic Module in your Xbasic code, the module needs to be 'registered' using the [require() function]. For example, consider the following .A5W page:</p>
                <p>
                    <example code="xb"><![CDATA[<%a5
dim pxb as p
' Include the Xbasic Module
pxb = require("MyXBModule")

' Output sayHello() to Page:
? pxb.sayHello("Jim")

' Output sayGoodbye() to Page:
? pxb.sayGoodbye("Sue")
%>]]></example>
                </p>
                <p>The Xbasic code in the .A5W page uses the require() function to register the 'MyXBModule' Xbasic Module and assigns the function to a namespace called *[xb:pxb]*. To call any of the exported functions, the *[xb:pxb]* prefix must be used.</p>
                <p>The require() function can take an optional CRLF delimited string of search paths. In a published application, the require() function will look in the webroot for the Xbasic Module. When running in Working Preview or from an Xbasic Script running in the Developer environment, the require() function looks for the module in the Web Project Folder. If the file is not found there, it will search for the module in the "\Xbasic_modules" folder. If you pass in a CRLF delimited string of folder names as the second parameter to the require() function, these folders will also be searched for the module.</p>
                <p>For example:</p>
                <p>
                    <example code="xb"><![CDATA[dim pxb as p
dim searchIn as C =<<%str%
\myModules
\thirdPartyModules
%str%

' Include the Xbasic Module
pxb = require("MyXBModule", searchIn)
]]></example>
                </p>
            </description>
        </section>
        <section>
            <title>Including Other Modules in an Xbasic Module</title>
            <description>
                <p>Modules can also reference other modules. Modules are referenced using the require() function. For example, we could rewrite the MyXBModule.a5xbm to extract the currentDate() function into a new module called DateModule.a5xbm. The MyXBModule.a5xbm could be rewritten as follows:</p>
                <p>
                    <example code="xb"><![CDATA[function greeting as c (name as c )
    ' Include date methods from custom Xbasic DateModule
    ' DateModule.a5xbm contains the implementation for currentDate()
    dim dateModule as p
    dateModule = require("DateModule")

    greeting = "Hello " + ut(name) + " the time is now: " + dateModule.currentDate()
end function 

function sayGoodbye as c (name as c)
    sayGoodbye = "Goodbye " + name + "."
end function

' Export the greeting and sayGoodbye functions:
exports.sayHello = greeting
exports.sayGoodbye = sayGoodbye]]></example>
                </p>
            </description>
        </section>
        <section>
            <title>What is the Difference between an Xbasic Function Library and an Xbasic Module?</title>
            <description>
                <p>On the surface an Xbasic Function Library and an Xbasic Module seem similar in that they are both files in which you can define multiple Xbasic functions.</p>
                <p>However an Xbasic Module only makes 'public' certain of the functions it defines (through use of the 'exports' keyword) and the exported functions are all in their own namespace and must be called using the namespace prefix.</p>
                <p>On the other hand an Xbasic Function Library must be linked into a component before any of the functions defined in the library can be called. The functions defined in the Xbasic Function Library are in the same namespace as any locally defined functions in the component itself.</p>
            </description>
        </section>
        <section>
            <title>Exporting Classes</title>
            <description>Xbasic classes cannot be defined in nor exported from an Xbasic Module. Instead, classes can be saved in a separate file with the .a5xbclass extension. See [Creating and Loading External Xbasic Class Files] for more information.</description>
        </section>
    </sections>
    <links>
        <link link="Xbasic class files">Creating and Loading External Xbasic Class Files</link>
        <link link="api require function source">require() function</link>
    </links>
    <see>
        <ref link="xbasic encrypting webproject xbasic files">Encrypting Xbasic function libraries, Modules, and Classes</ref>
        <ref link="server xb Web Applications Xbasic Function Libraries">Xbasic Function Libraries</ref>
        <ref link="Xbasic class files">Creating and Loading External Xbasic Class Files</ref>
        <ref link="what is the difference between an xbasic module and xbasic function library">What is the Difference Between an Xbasic Module and an Xbasic Function Library?</ref>
    </see>
</page>