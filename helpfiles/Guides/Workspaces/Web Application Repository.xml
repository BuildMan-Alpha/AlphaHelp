<page>
    <topic>Web Application Repository</topic>
    <description>An overview of functions relating to Web Application Repositories, tables where web applications read and write data.</description>
    <sections>
        <section>
            <title>Overview</title>
            <description>
                <p>A repository is a table (either .dbf or SQL) where a web application can read or write data. The data are typically items such as email templates, saved searches, or other settings.</p>
                <p>Before you can use the repository, it must first be configured. The details of the repository (e.g, connection string, table name, and field map) are defined in the [Web Project Properties dialog]. The repository is primarily used by components, but developers can also make use of it.</p>
            </description>
        </section>
        <section>
            <title>Setting up the Repository Table</title>
            <steps>
                <step>
                    <description>Go to the Web Projects Control Panel.</description>
                </step>
                <step>
                    <description>Click the *[ui:[props] Project Properties]* button in the toolbar to open the Web Project Properties.</description>
                </step>
                <step>
                    <description>In the *[ui:Repository Settings]* section, define the Table type and connection properties for the database where the repository table will be created and stored:</description>
                    <figure>
                        <link>images/repositorySettings.png</link>
                    </figure>
                    <note>See [Repository Settings] for more information.</note>
                </step>
                <step>
                    <description>Click *[ui:OK]* to save your settings when you are done.</description>
                </step>
            </steps>
        </section>
        <section>
            <title>Working with the Repository Using Xbasic</title>
            <description>
                <p>To support your use of the repository, the following Xbasic functions can be used in your applications:</p>
            </description>
            <list>
                <item>
                    <name>[a5w_SaveToWebAppRepository()]</name>
                    <description>Saves some data to the repository. Returns .t. if the data was saved or .f. if it was not saved.</description>
                </item>
                <item>
                    <name>[a5w_GetFromWebAppRepository()]</name>
                    <description>Retrieves a piece of data from the repository.</description>
                </item>
                <item>
                    <name>[a5w_EnumerateWebAppRepository()]</name>
                    <description>Enumerates the key values of the objects stores in the repository and returns them in a CR/LF-delimited list. You can optionally filter the objects by objectType, componentGuid, and/or userId.</description>
                </item>
                <item>
                    <name>[a5w_DeleteFromWebAppRepository()]</name>
                    <description>Deletes data from the Web Application Repository. Returns .t. if the data was deleted or .f. if it was not deleted.</description>
                </item>
            </list>
        </section>
        <section>
            <title>Working with the Repository Using JavaScript</title>
            <description>
                <p>In addition to Xbasic, you can also use JavaScript to save and load data from the repository. The UX component has the following methods that can be used to save and restore the component's state to the repostiory table:</p>
            </description>
            <list>
                <item>
                    <name>[{dialog.object}.saveDataInRepository()]</name>
                    <description>Saves the data that the user has entered in the component to the repository. The [afterSaveToRepository] client-side event is triggered after the data has been saved.</description>
                </item>
                <item>
                    <name>[{dialog.object}.loadDataFromRepository()]</name>
                    <description>Loads data that was previously saved to the repository and populates the controls in the UX component. The [afterLoadFromRepository] client-side event is triggered after the data has been loaded.</description>
                </item>
            </list>
        </section>
        <section>
            <title>Sample Applications that use the Repository</title>
            <description>
                <p></p>
            </description>
            <list>
                <item>
                    <name>[UX_Ad_Hoc_SQL_QueryBuilder]</name>
                    <description>A template UX component that allows users to execute ad-hoc SQL SELECT statements against any table in a database. Queries can be saved for future use and query results can be exported to Excel.</description>
                </item>
            </list>
        </section>
        <section>
            <title>Videos</title>
        </section>
        <section>
            <videos>
                <title>Repository Table - Managing Records in the Repository</title>
                <description>
                    <p>This video is aimed at advanced used who use the Repository feature in Alpha Anywhere.</p>
                    <p>The video shows how you can create a Grid to manage the records in the Repository that 'belong' to the current component.</p>
                    <p>For example, when you save search criteria from the Search Part of a Grid to the Repository, the search is saved with the GUID of the current component. This is important because when you load a saved search, you only want the user to see the saved searches that 'belong' to the current component. If you want to manage the records in the Repository, (by creating a Grid that is based on the Repository table), you might want to filter the records in the Repository based on the Guid of a particular component. </p>
                    <p>Say you have a Grid called 'Customers' and you want to put a button on this Grid to show the Repository entries that belong to this Grid. You can do this by setting the filter on the target Grid to:</p>
                    <p>
                        <example code="xb"><![CDATA[componentGuid = ComponentGuid()]]></example>
                    </p>
                </description>
                <video>
                    <name>Watch Video</name>
                    <link>https://www.viddler.com/v/19b4705</link>
                </video>
            </videos>
        </section>
        <section>
            <videos>
                <title>Using the AdvancedListSearch Control to Search in a List Based on a SQL Database</title>
                <description>
                    <p>For UX Components that contain List controls that are based on SQL databases, the Advanced Search control exposes powerful features for users to search for specific records in a List. The Advanced Search Control allows users to define complex queries and to save these queries to a repository for future reuse.</p>
                    <p>In this video we show how the Advanced Search Control is added to a UX component and how it is configured.</p>
                </description>
                <date>2018-09-08</date>
                <video>
                    <name>Watch Video</name>
                    <link>https://www.viddler.com/v/4a2b0717</link>
                </video>
            </videos>
        </section>
        <section>
            <videos>
                <title>Save and Load Search Criteria in a Grid Component</title>
                <description>
                    <p>You can use the Repository feature to save search criteria to the repository and load searches from the repository for a Grid Component. Watch this video to learn how to save and load searches in the Grid Component.</p>
                </description>
                <video>
                    <name>Watch Video - Part 1</name>
                    <link>https://www.viddler.com/v/8ecee277</link>
                </video>
                <video>
                    <name>Watch Video - Part 2</name>
                    <link>https://www.viddler.com/v/8b25c44b</link>
                </video>
            </videos>
        </section>
        <section>
            <videos>
                <title>Server-side Action Scripting - Send E-mail - Get Email Settings at Runtime</title>
                <description>
                    <p>This video shows how email account settings for the 'Send e-mail' action can by dynamically set a run-time by reading the values from the Repository.</p>
                    <p> The video also shows how a UX component can be configured to edit the e-mail settings in the Repository.</p>
                </description>
                <video>
                    <name>Watch Video</name>
                    <link>https://www.viddler.com/v/dae4dbab</link>
                </video>
            </videos>
        </section>
    </sections>
    <links>
        <link href="/images/$$generic.properties.png">props</link>
        <link link="server%20ref%20web%20project%20settings#section1_Repository Settings">Repository Settings</link>
        <link link="https://documentation.alphasoftware.com/index?search=server%20ref%20web%20project%20settings#section1_Repository%20Settings">Web Project Properties dialog</link>
        <link link="https://documentation.alphasoftware.com/index?search=api%20a5w%20save%20to%20web%20app%20repository%20function">a5w_SaveToWebAppRepository()</link>
        <link link="https://documentation.alphasoftware.com/index?search=api%20a5w%20get%20frm%20web%20app%20repository%20function">a5w_GetFromWebAppRepository()</link>
        <link link="https://documentation.alphasoftware.com/index?search=api%20a5w%20enumerate%20web%20app%20repository%20function">a5w_EnumerateWebAppRepository()</link>
        <link link="https://documentation.alphasoftware.com/index?search=api%20a5w%20delete%20from%20web%20app%20repository%20function">a5w_DeleteFromWebAppRepository()</link>
        <link link="https://documentation.alphasoftware.com/index?search=ux%20component%20savedatainrepository%20method">{dialog.object}.saveDataInRepository()</link>
        <link link="https://documentation.alphasoftware.com/index?search=aftersavetorepository">afterSaveToRepository</link>
        <link link="https://documentation.alphasoftware.com/index?search=ux%20component%20loaddatafromrepository%20method">{dialog.object}.loadDataFromRepository()</link>
        <link link="https://documentation.alphasoftware.com/index?search=afterloadfromrepository">afterLoadFromRepository</link>
        <link link="https://documentation.alphasoftware.com/index?search=uxadhocsqlquerybuilder%20template">UX_Ad_Hoc_SQL_QueryBuilder</link>
    </links>
    <see>
        <ref link="ComponentGuid Function">ComponentGuid Function</ref>
    </see>

</page>