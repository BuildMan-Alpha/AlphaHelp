<page>
    <shortlink>ux server-side actions send an email message</shortlink>
    <topic>Send an e-mail message</topic>
    <description>Send an e-mail message. The message can use fields from the component.</description>
    <sections>
     
        <section>
   <description>A common pattern in web applications is to have a client-side form where customers fill out
        information. This data can then be saved on a server after which an email message can be sent to the user's 
        address. This message might be an order confirmation or some other type of data that the user can save. The 
        'Send an e-mail message' action offers several methods by which this can be accomplished. The steps
         involved in adding this feature to a component are described in this four part video: 
        [Part 1], [Part 2], [Part 3], [Part 4]. You can reference the guides on this page underneath the action properties 
        section.</description>
        </section>
        <section>
            <title>Send E-mail Message Action Properties</title>
            <description>&#160;</description>
        </section>
<section>
    <list>
        <item>
            <name-title>E-mail Settings</name-title>
            <description-title>&#160;</description-title>
        </item>
        <item>
            <name>Send method</name>
            <description>Specify if the e-mail should be sent using the built-in e-mail methods, 
                or using a 3rd party e-mail service. 
            </description>
        </item>
        <item>
            <name>Use default e-mail settings</name>
            <description>If you check this box, then the action will use the e-mail settings stored in the 
                Web Project Properties.
            </description>
        </item>
         <item>
            <name>SMTP server</name>
            <description>You can read this value from the Repository at runtime by entering this value for the property: 
                =a5w_GetFromWebAppRepository("keyvalue"), where 'keyvalue' is the key value for the property.
                 This property appears when the send method is 'Internal' and 
                the 'Use default e-mail settings' checkbox is not checked.</description>
        </item>
         <item>
            <name>User name</name>
            <description>The username. You can read this value from the Repository at runtime by entering this value for the property: 
                =a5w_GetFromWebAppRepository("keyvalue"), where 'keyvalue' is the key value for the property. 
                 This property appears when the send method is 'Internal' and 
                the 'Use default e-mail settings' checkbox is not checked.</description>
        </item>
         <item>
            <name>Password</name>
            <description>The password. You can read this value from the Repository at runtime by entering this value for the property: 
                =a5w_GetFromWebAppRepository("keyvalue"), where 'keyvalue' is the key value for the property. 
                 This property appears when the send method is 'Internal' and 
                the 'Use default e-mail settings' checkbox is not checked.</description>
        </item>
         <item>
            <name>Port</name>
            <description>With SSL or TLS enabled, if you are using Gmail the port for the internal email methods is 465. 
                For the .NET methods, use port 587. You can read this value from the Repository at runtime by entering this value for the property: 
                =a5w_GetFromWebAppRepository("keyvalue"), where 'keyvalue' is the key value for the property. This property appears when the send method is 'Internal' and 
                the 'Use default e-mail settings' checkbox is not checked.</description>
        </item>
         <item>
            <name>SSL option</name>
            <description>If you select the .Net Library, SSL and TLS operate identically. You can read this value
                 from the Repository at runtime by entering this value for the property: 
                =a5w_GetFromWebAppRepository("keyvalue"), where 'keyvalue' is the key value for the property. 
This property appears when the send method is 'Internal' and 
                the 'Use default e-mail settings' checkbox is not checked.</description>
        </item>
        
        <item>
            <name>.Net Library</name>
            <description>Specify if the email should be sent using Alpha Anywhere's internal 'sockets' object, or 
                using methods in the Microsoft .Net Framework? In most cases either option should be fine.
            </description>
        </item>
          <item>
            <name>Mandrill key</name>
            <description>Specify your Mandrill key. You need to get this key from Mandrill. 
                You can enter <![CDATA[<Project>]]>, or leave this blank to use the setting for the Mandrill 
                key stored in Web Project Properties.
                 This property appears when the 'Send method' is set to 'Mandrill'.</description>
        </item>
          <item>
            <name>SparkPost key</name>
            <description>Specify your SparkPost key. You will need to get this key from SparkPost. 
                You can enter <![CDATA[<Project>]]>, or leave this blank to use the setting for the SparkPost 
                key stored in Web Project Properties. This property appears when the 'Send method' is set to 'SparkPost'.</description>
        </item>
        
    </list>
</section>
<section>
    <description>&#160;</description>
</section>
<section>
    <list>
        <item>
            <name-title>Message</name-title>
            <description-title>&#160;</description-title>
        </item>
        <item>
            <name>From</name>
            <description>Specify e-mail address of the sender. You can use a component placeholder for 
                the name. e.g. {sent_from}
            </description>
        </item>
        <item>
            <name>From alias</name>
            <description>Specify a friendly name for the from name. You can use a component for the name. 
                e.g. (sent_from}
            </description>
        </item>
        <item>
            <name>Subject</name>
            <description>Specify the message subject. You can use component placeholders in the text. e.g. {subject}.</description>
        </item>
        <item>
            <name>Send to</name>
            <description>A comma or cr-lf delimited list of e-mail addresses. You can use a component placeholder 
                for the e-mail address. e.g. {send_to}.
            </description>
        </item>
        <item>
            <name>CC</name>
            <description>A comma or cr-lf delimited list of e-mail addresses. You can use a component 
                placeholder for the e-mail address. e.g. {send_to}.
            </description>
        </item>
        <item>
            <name>BCC</name>
            <description>A comma or cr-lf delimited list of e-mail addresses. You can use a 
                component placeholder for the e-mail address. e.g. {send_to}.
            </description>
        </item>
        <item>
            <name>Load message from Repository</name>
            <description>Specify if the message should use a saved template stored in the Repository.</description>
        </item>
        
                <item>
            <name>Saved message name</name>
            <description>Specify the saved message template name. You can use component placeholders. e.g. 
                {message_template_name}. This setting appears when the 'Load message from Repository' 
                checkbox is checked.
            </description>
        </item>
        
        <item>
            <name>Message body (HTML)</name>
            <description>The HTML version of the message. You can use component placeholders in the text. e.g. (send_to}. 
                You can call an Xbasic function to compute the message body by specifying this as the message text: 
                {ExecuteFunction:myfunc}(where 'myfunc' is an Xbasic function defined in the Xbasic Functions section). 
                The function that is called takes 'e' as an input parameter and must return the text of the message.
            </description>
        </item>
        
        <item>
            <name>Message body (Plain text)</name>
            <description>The plain text version of the message. You can use component placeholders in the text. e.g. 
                {send_to}. You can call an Xbasic function to compute the message body by specifying this as the message text: 
                {ExecuteFunction:myfunc} (where 'myfunc' is an Xbasic function defined in the Xbasic Functions section). 
                The function that is called takes 'e' as an input parameter and must return the text of the message.
            </description>
        </item>
        <item>
            <name>Attachments</name>
            <description>A comma delimited list of filename attachments. You can use component placeholders for the 
                filenames. e.g. {file1}.
            </description>
        </item>
        <item>
            <name>Store message in outbox</name>
            <description>Specify if the message should be stored in the outbox. Outbox name and connection string 
                are defined in the Web Project Properties.
            </description>
        </item>
       
    </list>
</section>
<section>
    <description>&#160;</description>
</section>
<section>
    <list>
        <item>
            <name-title>Send When</name-title>
            <description-title>&#160;</description-title>
        </item>
        <item>
            <name>Send when</name>
            <description>Specify when the email should be sent. The 'Immediate' option sends the e-mail immediately. 
                However, since connecting to a SMTP server can be slow, this option may not be suitable in a high 
                traffic site. The 'AddToWorkQueue' option adds the task to the Work Queue so that another 
                process can perform the work.
            </description>
        </item>
          <item>
            <name>Work queue format</name>
            <description>Specify the format to use when adding the task to the Work Queue table. 
                'XbasicScript' stores a complete Xbasic script that the process that handles the 
                work queue can just execute. 'XbasicProperties' stores the properties of the task 
                using the Xbasic 'property_to_string()' function. 'JSON' stores the properties 
                of the task in JSON format. The process that handles the work queue will be responsible 
                for converting the properties into Xbasic code.
            </description>
        </item>
        
    </list>
</section>
<section>
    <description>&#160;</description>
</section>
<section>
    <list>
        <item>
            <name-title>Client-side Events</name-title>
            <description-title>&#160;</description-title>
        </item>
        <item>
            <name>After message sent</name>
            <description>Specify the name of a Javascript function to call after the message has been sent. 
                The Javascript function gets passed 'e' which contains 'e.hasError - true/false' and 'e.errorText'.
            </description>
        </item>
          <item>
            <name>Show confirmation message</name>
            <description>Show an alert in the browser indicating whether the message was successfully sent or not. 
                If you want more control over the text and display style of the message, you should 
                set this option to 'false' and instead define an 'AfterMessageSent event'.
            </description>
        </item>
          <item>
            <name>Confirmation message - success</name>
            <description>Confirmation message - email sent or queued successfully. The default reads 'Message was sent'.</description>
        </item>
          <item>
            <name>Confirmation message - failure</name>
            <description>Confirms that an error occurred and that the email was not sent or queued. The default 
                text for this message is 'Message was not sent because of an error'.
            </description>
        </item>

    </list>
</section>

<section>
    <title>Sending an Email Message Using a Server-side Event</title>
    <description>A common experience for the end-user of a application frequently involves the following process. 
        First the user enters some type data into the application such as personal data, shipping information, 
        or payment data. When the user is finished they then click a 'Submit' button and wait to see if their 
        data is validated. This [validation] can happen on either the client-side or the server. After the data is 
        validated the user then usually receives some sort of confirmation message that appears in the application 
        itself, such as "Thank you for your order" or "Your application has been submitted".
        This is then frequently followed by an email confirmation that is sent to the email address that the user 
        specified when entering data.</description>
    
    
    
</section>
<section>
    <description>This section will cover the steps involved in creating a component that 
        uses the send e-mail action after entered data is validated and saved on to a server. The first step will 
        be to define the thank you message that the user receives once they are done entering data. This 
        can be done by creating and publishing a simple A5W page in Alpha Anywhere. The second step will 
        then be to create a UX component containing the controls that the user will enter their data into. In order 
        to save this data it will be necessary to create a new DBF or SQL table, the third step. The controls in the 
        component will be automatically bound to the fields in the table through [Data Binding].
        From here it will be possible to tie a '[Save Submitted Data to Table(s)]' action to the [afterDialogValidate] 
        server-side event and then finally add the action that sends the email after the data has been saved. </description>
</section>

<section>
    <title>Create an A5W Page to Load when Data is Saved</title>
    <steps>
        <step>
            <description>In the Web Projects Control Panel click the 'New' button to create a 'New component or page'</description>
            <figure><link>images/cap.png</link></figure>
        </step>
         <step>
            <description>Select the 'A5W' option and click 'Next'.</description>
            <figure><link>images/cap2.png</link></figure>
        </step>
        
        <step>
            <description>Select the 'Blank Page' option and click 'Next'.</description>
            <figure><link>images/cap3.png</link></figure>
        </step>
        
        <step>
            <description>Open the 'WYSIWYG' (what you see is what you get) tab at the bottom of the A5W page.</description>
            <figure><link>images/cap4.png</link></figure>
        </step>
        
        <step>
            <description>Type a message into the workspace. Use the tools in the toolbar to set the font, color, and alignment of the message.</description>
            <figure><link>images/cap5.png</link></figure>
        </step>
        <step>
            <description>Click on the 'File' dropdown in the top left corner of Alpha Anywhere and select 'Save As'. 
                Save the A5W page as 'Thankyou'
            </description>
            <figure><link>images/cap6.png</link></figure>
        </step>
        <step>
            <description>Click the 'Execute' button and run the A5W page in Live Preview. This step is necessary in order 
                to properly load the page later in the tutorial. 
            </description>
             <figure><link>images/cap7.png</link></figure>
        </step>
    </steps>
</section>


<section>
    <title>Create the Controls to Enter Data into a Server</title>
    
    <steps>
        <step>
            <description>Return to the Web Projects Control Panel and create a new UX page.</description>
       
        </step>
        <step>
            <description>In the UX Builder on the UX controls page open the 'Data Controls' menu. Click on the [TextBox] 
                option to add a textbox control to the component. Give the control the name and label of 'firstname'
            </description>
               <figure><link>images/ced2.png</link></figure>
        </step>
        <step>
            <description>Add a second textbox control to the component with the name and label of 'lastname'.</description>
               
        </step>
        <step>
            <description>Add a third textbox control. Give this control the name and label 'address'.</description>
             
        </step>
        <step>
            <description>Add a forth textbox control named and labeled 'city'.</description>
             
        </step>
        <step>
            <description>Add a fifth textbox with the name and label of 'state'.</description>
            
        </step>
        <step>
            <description>Finally add a sixth textbox with the name and label 'email'.</description>
               <figure><link>images/ced3.png</link></figure>
        </step>
        <step>
            <description>Open the 'Defined Controls' menu and click on the 'Submit-Reset' option to add 
                submit and reset buttons to the component. 'Submit' will send any entered data to the server.
            </description>
               <figure><link>images/ced4.png</link></figure>
        </step>
        <step>
            <description>The component should look something like this:</description>
              <figure><link>images/ced5.png</link></figure>
        </step>
        
    </steps>
    
    
    
    
</section>




<section>
    <title>Create a New Table and Bind it to the Component</title>
    <steps>
        <step>
            <description>Continuing from the section above, in the UX Builder open the 'UX Data Binding' page.</description>
               <figure><link>images/cnt2.png</link></figure>
        </step>
        <step>
            <description>Click the 'Create new table(s) to match the controls on your UX component' hyperlink.</description>
                  <figure><link>images/cnt3.png</link></figure>
        </step>
        <step>
            <description>Click on the 'Step 1 - Define Table Aliases and Fields' tab.
                 Highlight the <![CDATA[<Top Level>]]> section and click the 'Add' button in the 'Properties' section and add a new table alias. 
            </description>
                  <figure><link>images/cnt4.png</link></figure>
        </step>
        <step>
            <description>In the 'Fields in Logical Section' the 'Table Alias' should now be defined but not the Field Specification. 
                This specification defines the length and type of each field in the table. Highlight the 'firstname' variable 
                in the 'Fields in Logical Section:' list.
            </description>
                  <figure><link>images/cnt5.png</link></figure>
        </step>
        <step>
            <description>In the Properties section on the right set the Field 'Size' to '20'. Leave the 'Field 
                type' set to 'Character'. If the 'Table alias' was not set automatically you can use the 'Set...' 
                button to define an alias for this variable.
            </description>
                  <figure><link>images/cnt6.png</link></figure>
        </step>
        <step>
            <description>Define the 'Size' for each of the remaining variables. Set the 'email' variable to 
                '30'.</description>
                  <figure><link>images/cnt7.png</link></figure>
        </step>
        <step>
            <description>Click on the 'Step 2. Define Table Properties' tab. In the Table Properties fill 
                in a name for the table, like 'Messages'
            </description>
                  <figure><link>images/cnt8.png</link></figure>
        </step>
        <step>
            <description>In the 'Global Table Properties' section at the bottom of the tab click the dropdown next to the 
                'Table type' property and select 'SQL'. 
            </description>
                  <figure><link>images/cnt9.png</link></figure>
        </step>
        <step>
            <description>Click the [...] button next to the 'Connection string' property. 
            </description>
                  <figure><link>images/cnt10.png</link></figure>
        </step>
        <step>
            <description>The Connection String dialog should open. If you already a connection string to the 
                Northwind database defined click the 'Select' button and build a connection to the 
                'Northwind' database. Otherwise choose the 'Specify a connection string' radio button and click the 
                'Build' button to build a connection.
            </description>
                  <figure><link>images/cnt11.png</link></figure>
        </step>
        <step>
            <description>Open 'Step 3. Create table(s)' and click the 'Create table(s)' button and then close the 
                make table(s) dialog.
            </description>
                  <figure><link>images/cnt12.png</link></figure>
                   <figure><link>images/cnt13.png</link></figure>
        </step>
     
        
    </steps>
    
    
</section>

<section>
    <title>Save Data Entered on the Client to the Server</title>
    <steps>
        <step>
            <description>In the UX Builder open the 'Events' menu and then open 'Server-side' events page. 
                In the 'Server-Side Events' list highlight the 'afterDialogValidate' event. 
            </description>
                  <figure><link>images/sde2.png</link></figure>
        </step>
         <step>
            <description>Place the mouse cursor inside the 'afterDialogValidate function definition on the right.</description>
               <figure><link>images/sde3.png</link></figure>
        </step>
         <step>
            <description>Click on the 'Action Scripting' button in the page's toolbar. 
               
            </description>
               <figure><link>images/sde4.png</link></figure>
        </step>
         <step>
            <description>Click on the 'Save Submitted Data to Table(s) action. Click OK.</description>
               <figure><link>images/sde5.png</link></figure>
        </step>
         <step>
            <description>Give then action a name, or use the default name, and click OK.</description>
               <figure><link>images/sde6.png</link></figure>
        </step>
         <step>
            <description>In the 'Save Submitted Data to Tables dialog click the 'After submit action' 
                dropdown in the 'Save Data' section. Select 'Redirect to another page' option.
            </description>
               <figure><link>images/sde7.png</link></figure>
        </step>
         <step>
            <description>Next to the 'Target page' property type the name of the A5w page that you defined 
                in the beginning section, "Thankyou.A5w". Click OK.
            </description>
            <example><![CDATA[Thankyou.A5w]]></example>
               <figure><link>images/sde8.png</link></figure>
        </step>
    </steps>
    
    
    
</section>
<section>
      <title>Send Email Action Background</title>
    <description><![CDATA[SMTP, or Simple Mail Transfer Protocol, is a way of identifying the server that will send 
        your email. The SMTP server takes emails that have been written on the client-side and then sends them 
        out over the internet to the specified address. The email is then acquired by a 'Pop' or 'Imap' server 
        and delivered to the recipient. Different service providers have different names for their 
        smtp servers. Google uses "Smtp.gmail.com" while Yahoo uses "Smtp.mail.yahoo.com". Other 
        providers, like AT&T or Verizon, don't use the 'smtp' prefix at all and use instead names like "Outbound.att.net" 
        or "Outgoing.verizon.net".    ]]>
    </description>
</section>
<section>
    <description>A client-side device can be connected to a SMTP server via a 'port'. 
        The ports most commonly used to send email data to the SMTP server are 587 and 
        465. Port 587 can be used if the data being sent is not encrypted or uses a TLS (Transport Layer 
        Security) protocol; TLS is a form of encryption. This port can be used with nearly all smtp servers.
         Port 465 is used to send data that uses SSL or a Secure Sockets Layer. There is also 
         a 'Port 25' that is sometimes used to send unencrypted data. However, this port is often blocked 
         as it is frequently used to send massive quantities of malware and spam.
        </description>
</section>
<section>
    <description>TLS and SSL are both ways to encrypt and then authenticate data that is sent between 
        the developer's client-side application and the SMTP server used by their service provider. From the 
        client-side perspective there is not major difference between using TLS vs SSL as long as you are able to 
        connect to the SMTP server which supports one and/or the other protocol.
        There are different versions of both TLS and SSL protocols, with some older versions having major security 
        flaws.   
        
        
    </description>
    
    
</section>
<section>
    <description>If you are using Gmail for your SMTP server, and you have two-step verification on your account, 
        then you will need to get an application password through your gmail account and use this in place of your regular
    </description>
    
    
</section>


<section>
  
    
    
    <title>Send an E-mail Stating that the Data was Saved</title>
     <steps>
        <step>
            <description>On the 'Server-side' events page place the mouse cursor over the 'Save Submitted 
                Data to Tables(s)' action that you defined and click.
            </description>
            <figure><link>images/ase2.png</link></figure>
        </step>
         <step>
            <description>Click the 'Action Scripting' button. Select the 'Show variables exposed by this action' 
                button. 
            </description>
             <figure><link>images/ase3.png</link></figure>
        </step>
         <step>
            <description>Highlight the 'rtc.flagRecordWasSaved' variable, right click, and select 'Copy'. Click OK.</description>
             <figure><link>images/ase4.png</link></figure>
        </step>
         <step>
            <description>Place the variable inside an Xbasic if statement:</description>
            <example><![CDATA[if rtc.flagRecordWasSaved then 
	
end if]]></example>
             <figure><link>images/ase5.png</link></figure>
            
        </step>
         <step>
            <description>Place the cursor inside the 'if' statement. Click on the 'Action Scripting' 
                button.
            </description>
             <figure><link>images/ase6.png</link></figure>
        </step>
        <step>
            <description>Click on the 'Send an e-mail message' action. Click OK.</description>
             <figure><link>images/ase7.png</link></figure>
        </step>
        <step>
            <description>Create a name for the action and click OK.</description>
             <figure><link>images/ase8.png</link></figure>
        </step>
        <step>
            <description>In the 'Send E-mail Message' dialog's 'E-mail Settings' section set the 'Send method' 
                property to 'Internal'.</description>
             <figure><link>images/ase9.png</link></figure>
        </step>
         <step>
            <description>Make sure the 'Use default e-mail settings' property is NOT checked, more on this later.</description>
             <figure><link>images/ase10.png</link></figure>
        </step>
          <step>
            <description>If you have a gmail account, set the 'SMTP server' property to be 'Smtp.gmail.com'</description>
            <example><![CDATA[Smtp.gmail.com]]></example>
             <figure><link>images/ase11.png</link></figure>
        </step>
          <step>
            <description>In the 'User name' property fill in your email address.</description>
             <figure><link>images/ase12.png</link></figure>
        </step>
          <step>
            <description>If you do not have two-step verification just type your normal password in the 'Password' property. 
                If you do have two-step verification get a generated 'app password' through your gmail account using these steps 
            </description>
             <figure><link>images/ase13.png</link></figure>
        </step>
          <step>
            <description>Open your 'My Account' page inside you gmail account and click on 'Sign-in <![CDATA[&]]> security.</description>
             <figure><link>images/ase14.png</link></figure>
        </step>
          <step>
            <description>Click the 'App passwords' link.</description>
             <figure><link>images/ase15.png</link></figure>
        </step>
          <step>
            <description>From the 'Select app' dropdown choose 'Other'.</description>
             <figure><link>images/ase16.png</link></figure>
              <figure><link>images/ase17.png</link></figure>
        </step>
          <step>
            <description>Type in the name of your application and click the Generate button.</description>
             <figure><link>images/ase18.png</link></figure>
        </step>
         
          <step>
            <description>A code will be generated copy this code to the clipboard and paste it into the 'Password' property 
                in the 'Send E-mail Message' dialog Alpha Anywhere.
            </description>
             <figure><link>images/ase19.png</link></figure>
        </step>
          <step>
            <description>Set the 'Port' property to be 587.</description>
             <figure><link>images/ase20.png</link></figure>
        </step>
          <step>
            <description>Set the SSL option to be TLS.</description>
             <figure><link>images/ase21.png</link></figure>
        </step>
          <step>
            <description>In the 'Message' section type your email address next to the 'From' property.</description>
             <figure><link>images/ase22.png</link></figure>
        </step>
          <step>
            <description>Next to the 'From alias' property type your name or the name that you want to appear in place 
                of your email address.
            </description>
             <figure><link>images/ase23.png</link></figure>
        </step>
          <step>
            <description>In the 'Subject' property type the subject of the email.</description>
             <figure><link>images/ase24.png</link></figure>
        </step>
         <step>
            <description>In the 'Send to' property you can type the email address that you want to send the email to. 
                Here, however, we will use the placeholder {email}. This way the email will be sent to the email address 
                entered by the user of your application after they enter their address.
            </description>
            <example><![CDATA[{email}]]></example>
             <figure><link>images/ase25.png</link></figure>
        </step>
         <step>
            <description>Click on the [...] button next to the 'Message body (HTML) property.</description>
             <figure><link>images/ase26.png</link></figure>
        </step>
         <step>
            <description>Type the message that you want to be sent via email. Be sure to make use of the 
                available placeholders on the left of the 'E-mail Message' dialog. Simply double click on a placeholder 
                to add it to the text. Click OK when you are finished.
            </description>
             <figure><link>images/ase27.png</link></figure>
        </step>
         <step>
            <description>In the Send When section set the 'Send when' dropdown to be 'Immediate'. Click OK to 
                close the 'Send E-mail Message' dialog. 
            </description>
             <figure><link>images/ase28.png</link></figure>
        </step>
         <step>
            <description>Run the Component in Live Preview. Fill in all the fields. In the last field 
                add your email address. Click Submit.
            </description>
             <figure><link>images/ase29.png</link></figure>
        </step>
         <step>
            <description>You should see the generated A5w page.</description>
             <figure><link>images/ase30.png</link></figure>
        </step>
         <step>
            <description>Open your email account. You should see the email that you defined inside.</description>
             <figure><link>images/ase31.png</link></figure>
        </step>
    </steps>
    
    
    
</section>

<section>
    <title>Using the Project Properties to Define Email</title>
    <steps>
        <step>
            <description>Continuing from the sections above, go back to the Design tab and open the 
                'Server-side' events page. Highlight the previously edited 'afterDialogValidate' event.
            </description>
             <figure><link>images/up2.png</link></figure>
        </step>
        <step>
            <description>Place your cursor over the 'Send E-mail Message' action and click the mouse.</description>
            <figure><link>images/up3.png</link></figure>
        </step>
        <step>
            <description>Click on the 'Action Scripting' button and select 'Edit action'</description>
               <figure><link>images/up4.png</link></figure>
        </step>
        <step>
            <description>Check the 'Use default e-mail settings' property. Leave all other settings the same and click OK.</description>
               <figure><link>images/up5.png</link></figure>
        </step>
        <step>
            <description>Open the Web Projects Control Panel. In the toolbar click on the 'Project Properties' 
                button.
            </description>
               <figure><link>images/up6.png</link></figure>
        </step>
        <step>
            <description>Scroll down to the Web Project Properties to the 'E-mail Settings' property. 
                Expand the section.
            </description>
               <figure><link>images/up7.png</link></figure>
        </step>
        <step>
            <description>If using gmail set the SMTP Server property to 'Smtp.gmail.com'.</description>
               <figure><link>images/up8.png</link></figure>
        </step>
        <step>
            <description>Set the 'SMTP server port' property to 587.</description>
               <figure><link>images/up9.png</link></figure>
        </step>
        <step>
            <description>Set the 'SSL Option' to TLS</description>
               <figure><link>images/up10.png</link></figure>
        </step>
        <step>
            <description>Next to the 'E-mail account user name' property type your email 
                address.
            </description>
               <figure><link>images/up11.png</link></figure>
        </step>
        <step>
            <description>Next to the 'E-mail account password' enter you account password. If you are using 
                two-step verification use a 'app password' here, as described in the previous section.
            </description>
               <figure><link>images/up12.png</link></figure>
        </step>
        <step>
            <description>In the 'From address' property again enter your email address again.</description>
               <figure><link>images/up13.png</link></figure>
        </step>
        <step>
            <description>Next to the 'From alias' property type the alias that you want to appear 
                in place of your email address. Click OK to close the 'Web Project Properties'.
            </description>
               <figure><link>images/up14.png</link></figure>
        </step>
        <step>
            <description>Run the component in Live Preview. Fill in the fields as you did in the previous 
                section. Enter your email address in the email field and click Submit.
            </description>
               <figure><link>images/up15.png</link></figure>
        </step>
        <step>
            <description>You should see the A5W page appear after the email sends.</description>
               <figure><link>images/up16.png</link></figure>
        </step>
        <step>
            <description>Check your email, the message that you defined in the previous section should appear.</description>
               <figure><link>images/up17.png</link></figure>
        </step>
    </steps>
    
    
    
</section>



<section>
    <title>Using a Work Queue</title>
    <description>In addition to sending out an email immediately, once some data has been validated, it is also possible to 
        to let another process on the server handle the sending of the email. If the server is very busy 
        dealing with other processes, then having a queue will mean that the actual sending of the email can happen after the
        other processes happening on the server are resolved. When the server is not overloaded these 
        processes will also finish faster. In this example, this means that the A5W page you defined will load as 
        soon as the user clicks the 'Submit' button; rather than waiting for the email to be sent before loading the A5W page.
    </description>
    
</section>
<section>
    
    <steps>
        <step>
            <description>Continuing from the sections above, in the UX Builder open the 'Server-side' events page and 
                highlight the 'afterDialogValidate' event that was previously defined.
            </description>
            <figure><link>images/uwq2.png</link></figure>
        </step>
         <step>
            <description>Place the cursor over the 'Send E-mail Message' action and click the mouse.</description>
               <figure><link>images/uwq3.png</link></figure>
        </step>
         <step>
            <description>Click the 'Action Scripting' button and select the 'Edit Action' option.</description>
               <figure><link>images/uwq4.png</link></figure>
        </step>
        <step>
            <description>In the 'Send E-mail Message' dialog's 'Message' section check the 'Store message in outbox' property.</description>
            <figure><link>images/uwq20.png</link></figure>
        </step>
        
        <step>
            <description>Scroll down to the 'Send When' section. 
                Click the 'Send when' property dropdown and select 'AddToWorkQueue'.
            </description>
               <figure><link>images/uwq5.png</link></figure>
            <note>Here you can use the 'Xbasic script' option if the process that will handle
                 the work queue is another Alpha Anywhere process.
If you have an asp.net application that can send email very efficiently, then in this case you can use the 
JSON option. This will store a JSON object in the work queue that the application will understand. </note>
        </step>
        <step>
            <description>Click the 'Work queue format' dropdown and select the 'XbasicScript' option. Click OK</description>
               <figure><link>images/uwq6.png</link></figure>
        </step>
        <step>
            <description>Go to the 'Web Projects Control Panel' and click on the 
                'Project Properties' button.
            </description>
               <figure><link>images/uwq7.png</link></figure>
        </step>
        <step>
            <description>Scroll down the Web Project Properties list to the 'Email Outbox' section and expand it.</description>
               <figure><link>images/uwq8.png</link></figure>
            <note>These email outbox keeps track of every single email that your application sent.</note>
        </step>
        <step>
            <description>Click the [...] button next to the 'Connection string' property.</description>
               <figure><link>images/uwq10.png</link></figure>
        </step>
        <step>
            <description>In the 'Define E-mail Outbox Table' dialog set the 'Table Type' property to 'SQL'</description>
               <figure><link>images/uwq9.png</link></figure>
        </step>
        <step>
            <description>Click the [...] button next to the 'Connection string' property and create a connection 
                to the 'Northwind' database.
            </description>
               <figure><link>images/uwq11.png</link></figure>
        </step>
        <step>
            <description>Type 'outbox' next to the 'Table name' property.</description>
               <figure><link>images/uwq12.png</link></figure>
        </step>
        <step>
            <description>Click the 'Create E-mail Outbox Table' hyperlink at the bottom of the dialog. Click OK, OK, and OK again.</description>
               <figure><link>images/uwq13.png</link></figure>
        </step>
        <step>
            <description>Now back in the Web Project Properties, scroll down to and expand the 'Work Queue Table Settings' 
                properties. 
            </description>
               <figure><link>images/uwq14.png</link></figure>
        </step>
        <step>
            <description>Again click the [...] button next to the 'Connection string' property.</description>
               <figure><link>images/uwq15.png</link></figure>
        </step>
        <step>
            <description>Set the 'Table type' property to SQL. This is the default.</description>
             <figure><link>images/uwq16.png</link></figure>
        </step>
        <step>
            <description>In the 'Define Work Queue Table' dialog click the [...] button next to the 'Connection string' property 
                and create a connection to the 'Northwind' database. Click OK
            </description>
               <figure><link>images/uwq17.png</link></figure>
        </step>
        <step>
            <description>Type 'workQueue' next to the 'Table name' property.</description>
               <figure><link>images/uwq18.png</link></figure>
        </step>
        <step>
            <description>Click the 'Create Work Queue Table' hyperlink at the bottom of the dialog and click OK, OK, and OK again.</description>
               <figure><link>images/uwq19.png</link></figure>
        </step>
        <step>
            <description>Run the component in Live Preview, fill in all of the fields, and then hit the submit button.</description>
            <figure><link>images/uwq20.png</link></figure>
        </step>
           <step>
            <description>You should see the A5W page load very quickly. This is because the application is no longer handling 
                the process of sending out the defined email. Instead the email is being saved in the workQueue table that you defined. 
                In order to actually send the email it will be necessary to define a separate process.
            </description>
            <figure><link>images/uwq21.png</link></figure>
        </step>
        
    </steps>
    
    
</section>
<section>
    <title>Creating a Separate Process that can Send an Email</title>
    <description>Read the 'WorkData' from the work queue and then execute the resulting Xbasic script. This can be done using Alpha 
        Anywhere, but it can also be accomplished using other software. 
    </description>
    
    
    
</section>






    </sections>
    
<links>
    <link href="https://www.viddler.com/v/c2c23d1c">Part 1</link>
    <link href="https://www.viddler.com/v/c4719e55">Part 2</link>
    <link href="https://www.viddler.com/v/52c69cc6">Part 3</link>
    <link href="https://www.viddler.com/v/ffdc4819">Part 4</link>
    <link link="ux Server-side actions Save Submitted Data to Tables">Save Submitted Data to Table(s)</link>
    <link link="ux events afterdialogvalidate">afterDialogValidate</link>
    <link link="ux components data binding">Data Binding</link>
    <link link="ux properties validation and error reporting">validation</link>
    <link href="/images/tools/ellipsesButton.png">...</link>
</links>    
    
    
</page>