<page build="7967">
    <shortlink>ux css grid container</shortlink>
    <topic>CSSGrid Container</topic>
    <description>Allows you to position controls in a grid of rows and columns to easily define complex, responsive layouts.</description>
    <discussion>
        <p>The CSS Grid Container allows you to design a responsive layout of controls based on a grid layout. Individual controls are placed in rows and columns within the container. Controls can be configured to span multiple columns and rows. The number of columns, row sizing, and spacing is fully customizable.</p>
        <p>The CSS Grid Container uses [CSS Grid Layout] under the hood to define the layout of controls in the container. CSS Grid Layout is a layout that divides a page or section of a page into a grid of rows and columns, similar to an HTML table but with more ease and flexibility.</p>
    </discussion>
    <sections>
        <section>
            <description>
                <p>The image below shows a UX layout created using the CSS Grid container.</p>
            </description>
            <figure>
                <title>CSS Grid container layout with controls for collecting personal data</title>
                <alt>CSS Grid container layout with controls for collecting personal data</alt>
                <link>images/cssgrid1.png</link>
            </figure>
        </section>
        <section>
            <description>
                <p>The image shows that the Firstname and Lastname fields are both on the same row and have the same width.</p>
                <p>The Address field is on the next row and its width if the full width of the container.</p>
                <p>The City, State and Zip fields are all on the same row, but City is defined as 3 times the width of State and Zip is defined as twice the width of State.</p>
                <p>Finally there are two buttons. The first button is aligned to the left of the container and the second button is aligned to the right of the container.</p>
            </description>
            <note>
                <p>To make the City field 3 times the width of the State field, the grid was configured to have 6 columns, the City field was configured to have a span of 3 columns and the State field was configured to have a span of 1 column. Finally, the Zip field was configured to have a span of 2 columns so that it would be twice the width of the State field.</p>
            </note>
        </section>
        <section>
            <description>
                <p>The layout is completely responsive. So, if the width of the container increases, the layout changes accordingly:</p>
            </description>
            <figure>
                <title>CSS Grid container rendered on a larger screen</title>
                <alt>CSS Grid container rendered on a larger screen</alt>
                <link>images/cssgrid2.png</link>
            </figure>
        </section>
        <section>
            <title>Adding a CSS Grid Container to a UX</title>
            <description>
                <p>To add a *[ui:CSSGrid]* Container control to your UX component, select the *[ui:[Container]]* item from the toolbox in the UX Builder.</p>
            </description>
            <figure>
                <title>Containers toolbox</title>
                <alt>Containers toolbox with the Container control highlighted</alt>
                <link>images/containerToolbox.png</link>
            </figure>
        </section>
        <section>
            <description>
                <p>Then select the *[ui:CSSGrid]* container type.</p>
            </description>
            <figure>
                <title>Insert Container dialog</title>
                <alt>Insert Container dialog</alt>
                <link>images/insertContainerDialog.png</link>
            </figure>
        </section>
        <section>
            <description>
                <p>Next, you can configure the CSS Grid container to set properties such as the number of columns and rows and also the gap between each column and row. To open the genie to configure the CSS Grid container, click the smart field for the CSS Grid Container Layout property.</p>
            </description>
            <figure>
                <title>CSS Grid Container Layout property</title>
                <alt>CSS Grid Container Layout property</alt>
                <link>images/containerLayoutProperty.png</link>
            </figure>
        </section>
        <section>
            <description>
                <p>This will open the genie as shown below:</p>
            </description>
            <figure>
                <title>CSS Grid Container Genie</title>
                <alt>CSS Grid Container Genie</alt>
                <link>images/cssGridEditor.png</link>
            </figure>
        </section>
        <section>
            <title>Configuring a CSS Grid Container</title>
            <description>
                <p>The genie will allow you to set the dimensions of the grid:</p>
                <p>
                    <list>
                        <item>
                            <name-title>Grid Property</name-title>
                            <description-title>Description</description-title>
                        </item>
                        <item>
                            <name>Rows</name>
                            <description>
                                <p>The number of rows in the container.</p>
                            </description>
                        </item>
                        <item>
                            <name>Columns</name>
                            <description>
                                <p>The number of columns in the container.</p>
                            </description>
                        </item>
                        <item>
                            <name>Column gap</name>
                            <description>The space between each column.</description>
                        </item>
                        <item>
                            <name>Row gap</name>
                            <description>
                                <p>The space between each row.</p>
                            </description>
                        </item>
                        <item>
                            <name>Custom column sizes</name>
                            <description>
                                <p>Optional. Allows you to to define and explicit width for one or more columns. Columns default to *[css:1fr]* (one fractional unit).</p>
                                <p>Column sizes are specified as a space delimited list of values. E.g. *[css:100px 100px 1fr]*. The values are ssigned to each column in the layout as defined in the layout, from right to left, using the specified values. For example, if your layout has five columns, you could define an explicit width for the third column as follows:</p>
                                <p>
                                    <example><![CDATA[1fr 1fr 200px]]></example>
                                </p>
                                <p>Note that there is no size defined for the fourth or fifth columns. Columns without a defined size are automatically assigned the width of *[css:1fr]*. By automatically assigning a width, this allows you to add additional columns without needing to update the column sizes.</p>
                            </description>
                        </item>
                        <item>
                            <name>Custom row sizes</name>
                            <description>
                                <p>Optional. Allows you to define an explicit height for one or more rows. Rows default to *[css:auto]* (height of row is automatically computed from its contents).</p>
                                <p>Row sizes are specified as a space delimited list of values. E.g. *[css:100px 200px auto]*. The values are assigned to each row in the layout as defined in the list of values. For example, if your layout has four rows, you could define an explicit height for the second row as follows:</p>
                                <p>
                                    <example><![CDATA[auto 250px]]></example>
                                </p>
                                <p>Note that there is no size defined for the third and fourth row. Rows without a defined size are automatically assigned the height of *[css:auto]*. By automatically assigning a height, this allows you to add additional rows without needing to update the row sizes.</p>
                            </description>
                        </item>
                    </list>
                </p>
            </description>
        </section>
        <section>
            <title>Custom Row and Column Sizes</title>
            <description>
                <p>By default, rows and columns are automatically sized to best fit the contents and space, allowing them to grow or shrink as the container's size changes. All columns are sized to have the same width, *[css:1fr]*. All rows automatically adjust to the height of their contents, *[css:auto]*. Rows and columns can be set to an explicit size by defining custom sizes.</p>
                <p>To specify an explicit size (e.g. *[css:100px]*) for a row or column, check the associated *[ui:Has custom size]* checkbox.</p>
                <p>Values are defined as CSS size units. Column sizes can be defined as *[extlink:flexible track lengths@https://www.w3.org/TR/css3-grid-layout/#fr-unit]*. Flexible tracks are denoted using *[css:fr]*. They are a relative size computed from the leftover space within the container. For example, imagine your CSS Grid is 500px wide and contains three columns with the following columns sizes:</p>
                <p>
                    <example><![CDATA[1fr 200px 2fr]]></example>
                </p>
                <p>The second column consumes 200px of width. This leaves 300px for the remaining columns. The first column has a size of 1fr and the last column a size of 2fr (3fr total). The resulting size of the first and last column would be 100px and 200px, respectively. If the CSS Grid grows to a width of 800px, the first column would grow to a width of 200px and the last column 400px.</p>
            </description>
        </section>
        <section>
            <title>Adding Controls to the Layout</title>
            <description>
                <p>Controls contained in the CSS Grid container are shown in a list on the left-hand side of the CSS Grid Container genie.</p>
                <p>To place a control on the grid, click on an empty cell, and select the control to add. Clicking an empty cell in the grid displays a popup menu of the available controls that can be added to the layout. Select a control from this list to add it to the selected cell.</p>
            </description>
            <figure>
                <title>CSS Grid Container Select Control Dialog</title>
                <alt>CSS Grid Container Select Control Dialog</alt>
                <link>images/selectControl.png</link>
            </figure>
        </section>
        <section>
            <description>
                <p>Once a control has been placed on the Grid you can set the control's properties. Select the control whose properties you want to set in the pick list in the top left hand corner. The control will be highlighted on the grid and its properties will be shown in the genie.</p>
                <p>You can set the following properties:</p>
                <p>
                    <list>
                        <item>
                            <name-title>Property</name-title>
                            <description-title>Description</description-title>
                        </item>
                        <item>
                            <name>Starting column</name>
                            <description>This is the grid column where the control will be positioned. If you set this to auto, the control will be positioned in the next available column on the grid. There are buttons to the right of the Starting column property. These buttons allow you to set the starting column to auto, (F) first column in the Grid, (M) middle column in the Grid, or (L) last column in the Grid.</description>
                        </item>
                        <item>
                            <name>Starting row</name>
                            <description>This is the grid row where the control will be positioned. If you set this to auto, the control will be positioned in the next available row on the grid. There are buttons to the right of the Starting row property. These buttons allow you to set the starting row to auto, (F) first row in the Grid, (M) middle row in the Grid, or (L) last row in the Grid.</description>
                        </item>
                        <item>
                            <name>Column span</name>
                            <description>This is the number of columns that the control will span. You can click the width button to make the control span the entire width of the container. By default, controls will have a column span of 1.</description>
                        </item>
                        <item>
                            <name>Row span</name>
                            <description>This is the number of rows that the control will span. You can click the height button to make the control span the entire height of the container. By default, controls will have a row span of 1.</description>
                        </item>
                        <item>
                            <name>Horizontal justification</name>
                            <description>This is the horizontal justification of the control within its grid cell. Options are start, center, end and stretch. The default is stretch - the control will fill the available horizontal space in the cell.</description>
                        </item>
                        <item>
                            <name>Vertical alignment</name>
                            <description>This is the vertical alignment of the control within its grid cell. Options are start, center, end and stretch. The default is stretch - the control will fill the available vertical space in the cell.</description>
                        </item>
                    </list>
                </p>
            </description>
            <figure>
                <title>CSS Grid properties for a control</title>
                <alt>CSS Grid properties for a control</alt>
                <link>images/controlProperties.png</link>
            </figure>
        </section>
        <section>
            <description>
                <p>When you open the CSS genie initially none of the controls contained in the container will have been placed on the grid.</p>
                <p>You can click the Additional options button to get a list of menu choices.</p>
            </description>
            <figure>
                <title>CSS Grid Additional Options button</title>
                <alt>CSS Grid Additional Options button</alt>
                <link>images/additionalOptionsButton.png</link>
            </figure>
        </section>
        <section>
            <description>
                <p>One of the available choices (Auto populate the controls onto the grid) will automatically place all of the control on the grid. Each control will be assigned a starting column and row of auto and row and column spans of 1, so the grid will just fill with the controls from left to right, top to bottom.</p>
                <p>Other choices in the Additional options menu allow you to add a new row or column at the start of grid (which you click the + button next to the Columns property, the new column is added at the end of grid. When you add a new column at the start of the grid, the existing controls are all shifted to the right by one column).</p>
                <p>You can also clear all controls from the grid, or clear just the selected control.</p>
            </description>
            <figure>
                <title>Available Additional Options</title>
                <alt>Available Additional Options</alt>
                <link>images/additionalOptions.png</link>
            </figure>
        </section>
        <section>
            <title>Videos</title>
        </section>
        <section>
            <videos>
                <title>Creating Complex Responsive Layouts using the CSS Grid Container</title>
                <description>
                    <p>The CSS grid specification allows you to create complex responsive layouts. In this video we show how you can use a CCSGrid container type to create a complex, responsive layout.</p>
                </description>
                <date>2021-12-05</date>
                <video>
                    <name>Watch Video - Part 1</name>
                    <link>http://alphamediacapture.s3.amazonaws.com/videos/cssgrid_part1.mp4</link>
                </video>
                <video>
                    <name>Watch Video - Part 2</name>
                    <link>http://alphamediacapture.s3.amazonaws.com/videos/cssgrid_part2.mp4</link>
                </video>
                <resources>
                    <resource>
                        <link>http://alphamediacapture.s3.amazonaws.com/videos/cssgrid_demo.zip</link>
                    </resource>
                </resources>
            </videos>
        </section>
    </sections>
    <links>
        <link href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout" target="_blank">CSS Grid Layout</link>
    </links>
</page>