<page>
    <shortlink>ux controls other controls button control keeping buttons in a pressed state</shortlink>
  <topic>Keeping Buttons in a Pressed State</topic>
  <description>By default, the buttons that you add to a UX component only remain in their 'pressed' state for 
    as long as you hold down the mouse-button over them. As soon as the mouse-button is released the button will return 
    to its regular unpressed state. Sometimes, however, it is useful to keep a button in its pressed state until something, like 
    a dialog, is closed or some action is run.   
  </description>
  
  
  
  
  
  <sections>
    <section>
      <title>Setting the State on a Normal Button</title>
      <description>There is currently no easy way to set a pressed state on a normal button. 
        Work is being done to remedy this. To be updated....
      </description>
      
      
    </section>
    
    
    
    
    
    
    
    <section>
      <title>Pressed State on Split Buttons</title>
      <description>Split buttons are covered more extensively in the '[Split Buttons]' guide. The section 
        below describes how you can set split buttons to have a 'pressed' or 'not pressed' state.
      </description>
      
    </section>
    <section>
    <steps>
      <step>
        <description>In the UX Builder, on the UX Controls page, open the 'Other Controls' menu. 
          Click on the [Button] option to add a button control to the component.
        </description>
        <figure><link>images/ps2.png</link></figure>
      </step>
       <step>
        <description>Highlight the button in the controls tree. In the Properties list on the right, the 
          'Advanced button control type' property in the 'Button Properties' section should be set to 'Button'. 
        </description>
        <figure><link>images/ps3.png</link></figure>
      </step>
       <step>
        <description>In the 'Button Appearance' section check the 'Has dropdown icon' checkbox.</description>
        <figure><link>images/ps4.png</link></figure>
      </step>
       <step>
        <description>Check the 'Display as split button' checkbox that appears.</description>
        <figure><link>images/ps5.png</link></figure>
      </step>
       <step>
        <description>Go to the 'Other Controls' menu on left and click on the [Button] option again to add a second 
          button to the component.</description>
        <figure><link>images/ps2.png</link></figure>
      </step>
       <step>
        <description>Highlight the second button in the controls tree. In the Properties list on the right 
          set the 'Button text' to read 'Pressed'.
        </description>
        <figure><link>images/ps6.png</link></figure>
      </step>
       <step>
        <description>Scroll down to the 'Javascript' section and click the [...] button next to the 'onClick' property.</description>
        <figure><link>images/ps7.png</link></figure>
      </step>
       <step>
        <description>Select the 'Text mode' radio button option in the 'Editing mode' menu, add the following code 
          to the onClick event's definition, and click Save.
        </description>
        <example><![CDATA[var b = {dialog.object}.getControl('BUTTON_1');
b.setState({dialog.object}.getPointer('BUTTON_1'),true);]]></example>
        
        <figure><link>images/ps8.png</link></figure>
      </step>
       <step>
        <description>In the Other Controls menu click on [Button] a third time to add another button to the component. </description>
        <figure><link>images/ps9.png</link></figure>
      </step>
       <step>
        <description>Highlight the third button in the controls tree and, in the Properties list, set the 
          'Button text' property to read 'Not Pressed'.
        </description>
        <figure><link>images/ps10.png</link></figure>
      </step>
       <step>
        <description>Scroll down to the 'Javascript' section for the third button and click the [...] button next to the 
          'onClick' property.
        </description>
        <figure><link>images/ps11.png</link></figure>
      </step>
       <step>
        <description>In the 'Edit onClick Event' dialog select the 'Text mode' radio button option and add the following code 
          to the onClick event's definition. Click Save.
        </description>
        <example><![CDATA[var b = {dialog.object}.getControl('BUTTON_1');
b.setState({dialog.object}.getPointer('BUTTON_1'),false);]]></example>
        <figure><link>images/ps12.png</link></figure>
      </step>
       <step>
        <description>Run the component in 'Live Preview'. When you click on the 'Pressed' button the split button 
          should stay in its pressed state.
        </description>
        <figure><link>images/ps13.png</link></figure>
      </step>
       <step>
        <description>Press the 'Not Pressed' button. The split button should return to normal.</description>
        <figure><link>images/ps14.png</link></figure>
      </step>

    </steps>
    
    </section>
    
  </sections>
  
  
 
  <links>
   
    <link href="https://www.viddler.com/v/c56a43f2">Watch Video</link>
      
  
  </links>
  
  
    
    <see>
        <ref link="ux control properties other properties button properties">Button Properties</ref>
        <ref link="ux control properties other properties button appearance index">Button Appearance</ref>

    </see>
    
</page>