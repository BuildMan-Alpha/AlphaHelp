<page build="4223">
    <shortlink>ux javascript chart control</shortlink>
    <topic>Javascript Chart</topic>
    <description>Adds a Javascript Chart to the component. Javascript Charts use client-side data and can be created and viewed in an offline environment.</description>
    <sections>
        <section>
            <title>Contrasting Javascript Charts with the Chart Control</title>
            <description>
                <p>The *[ui:Chart]* controls is a server-side control. The chart is rendered as a bitmap on the server and then the client-displays the bitmap image. Because the *[ui:Chart]* control is a server-side control, it is not suited for disconnected applications. Also, since the *[ui:Chart]* control is a server-side control, it will be slower than *[ui:Javascript Charts]*.</p>
                <p>To add a Javascript Chart to a UX component, select the *[ui:[Javascript Chart]]* control in the *[ui:Other Controls]* section of the UX toolbox.</p>
            </description>
            <figure>
                <link>images/toolbox_jschart.jpg</link>
            </figure>
            <note>
                <p>The *[ui:Chart]* control (i.e. the server-side charting control) is available in the *[ui:Data Controls]* section of the UX toolbox.</p>
                <p>[chartToolbox]</p>
            </note>
        </section>
        <section>
            <description>
                <p>After you add a Javascript Chart to your UX, you can then edit the Javascript Chart properties by clicking the smart field for the *[ui:Chart properties]* property.</p>
            </description>
            <figure>
                <link>images/jschartprpsheet.jpg</link>
            </figure>
        </section>
        <section>
            <description>
                <p>This will open the Javascript Chart builder, as shown below.</p>
                <p>The top half of the screen is where you enter the Javascript code that generates the chart and the bottom half of the screen allows you to get a quick preview of the Chart.</p>
                <p>In most cases you will get a quick start by selecting one of the Sample Charts. This will enter the Javascript for the selected chart and you can then tweak the Javascript to get the chart appearance that you want. You will likely also want to base the chart on real data, not the sample data shown in the sample chart.</p>
            </description>
            <figure>
                <link>images/jschartbuilder.jpg</link>
            </figure>
        </section>
        <section>
            <description>
                <p>To select a sample chart, click the *[ui:Select Sample Chart]* button. This will open up a dialog showing the available sample charts:</p>
            </description>
            <figure>
                <link>images/samplecharts.jpg</link>
            </figure>
        </section>
        <section>
            <description>
                <p>Select the sample chart that you want. There are two types of charts available:</p>
                <p>
                    <list>
                        <item>
                            <name-title>Type</name-title>
                            <description-title>Description</description-title>
                        </item>
                        <item>
                            <name>RGraph SVG Charts</name>
                            <description>Charts rendered using the RGraph SVG chart library.</description>
                        </item>
                        <item build="7947">
                            <name>Alpha Anywhere SVG Charts</name>
                            <description>Charts rendered using Alpha Anywhere's SVG Charting library.</description>
                        </item>
                    </list>
                </p>
                <p>When you select a sample chart, the JavaScript for creating the chart will be added to the builder. For example:</p>
            </description>
            <figure>
                <title>RGraph SVG Chart example</title>
                <alt>RGraph SVG Chart example</alt>
                <link>images/rgraphgenieshowingjavascript.jpg</link>
            </figure>
        </section>
        <section>
            <description>The Javascript shown in the image above is the code to create a chart using the RGraph charting library.</description>
        </section>
        <section>
            <title>Configuring Javascript Charts</title>
            <description>
                <p>The type of Javascript Chart you create (RGraph SVG Chart or Alpha Anywhere SVG Chart) determines how the chart is configured, as well as the available templates. </p>
            </description>
            <list>
                <item>
                    <name>[RGraph SVG Charts]</name>
                    <description>Information on creating and working with RGraph SVG Javascript Charts</description>
                </item>
                <item>
                    <name>[Alpha Anywhere SVG Charts]</name>
                    <description>Information on creating and working with Alpha Anywhere SVG Javascript Charts</description>
                </item>
            </list>
        </section>
        <section>
            <title>Setting Javascript Chart Size to 100%</title>
            <description>You can set the Javascript Chart width to 100% (useful when the Chart is shown in a Panel Card). However, setting the Chart's height to 100% is not supported. You must specify an explicit height for the Chart. Also, unlike many other UX controls, Javascript Charts do not have a *[ui:Fill Container]* property. </description>
            <note>If you set the Javascript Chart width to 100% and the Javascript Chart is contained inside a Panel Card, the Javascript Chart will automatically be resized when the device orientation is changed.</note>
        </section>
        <section>
            <title>Action Javascript Javascript Chart Actions</title>
            <description>The *[ui:Javascript Chart Action]* in Action Javascript works with both RGraph SVG and Alpha Anywhere SVG charts and allows you to:</description>
            <list>
                <item>
                    <name-title>Action</name-title>
                    <description-title>Description</description-title>
                </item>
                <item>
                    <name>Refresh Data in Chart(s)</name>
                    <description>Allows you to refresh the data in one or more Charts. If any of the selected Charts have any properties that are set to a Data Series, this action makes an Ajax callback to the server and refreshes the data in all of the referenced Data Series.</description>
                </item>
                <item>
                    <name>Resize a Chart</name>
                    <description>Resizes a chart. You can specify a new height and width for the Chart using CSS syntax. e.g. '500px'. You can use percentages for the width property, but not the height property. When the Chart is redrawn at its new size, by default, it will use the same draw method that was defined in the Chart settings. For example if the Chart is set to use animation when it is rendered, the Chart's 'draw method' will be 'grow' (or one of the other animation methods supported by RGraph). You might want the Chart to render at its new size without using animation. You can override the default draw method and specify an explicit draw method. For example, if the Chart was defined to use the 'grow' method, you can specify 'draw' to redraw the Chart without using animation.</description>
                </item>
                <item>
                    <name>Redraw a chart</name>
                    <description>Redraws a Chart. Like the Resize a Chart action, you can override the default 'draw method' when the Chart is redrawn. Typically used when one or more properties in the Chart settings are based on Javascript functions to re-render the Chart with new settings values returned by the Javascript functions.</description>
                </item>
                <item>
                    <name>Set Chart Properties</name>
                    <description>Allows you to explicitly set any of the Chart's properties and then redraw the Chart. Like the Resize a Chart action, you can override the default 'draw method' when the Chart is redrawn after its properties have been set.</description>
                </item>
            </list>
        </section>
        <section>
            <title>Methods</title>
            <description>The following methods are available for working with Javascript charts. Methods can be used with both RGraph SVG and Alpha Anywhere SVG charts:</description>
            <cases>
                <case>
                    <title nested="2">{dialog.Object}.jsChartResize(UXJavascriptChart, width, height [,redrawMethod [,methodParameter]])</title>
                    <description>Resizes a Javascript chart. You can optionally pass in a draw method to redraw the chart without animation, or with a specified animation option. See [jsChartResize()] for more details.</description>
                </case>
                <case>
                    <title nested="2">{dialog.Object}.jsChartSetProperties(UXJavascriptChart, properties [,drawMethod [,methodParameters]])</title>
                    <description>Change the properties of the Javascript Chart. You can optionally pass in a draw method to redraw the chart without animation, or with a specified animation option. See [jsChartSetProperties()] for more details.</description>
                </case>
                <case>
                    <title nested="2">{dialog.Object}.jsChartSetRefreshData(UXJavascriptChart)</title>
                    <description>Refreshes the data in Data Series that the Chart uses and then redraws the Chart.  An Ajax callback is made to the server to refresh the Data Series and then the Chart is redrawn using the new data. If the Chart is not based on any Data Series, then no Ajax callback is necessary and the Chart is redrawn. See [jsChartSetRefreshData()] for more details.</description>
                </case>
                <case>
                    <title nested="2">{dialog.Object}.jsChartRedraw(UXJavascriptChart [,drawMethod [,drawMethodParameters [,properties]]])</title>
                    <description>Redraws a Javascript chart. You can optionally pass in a draw method to redraw the chart without animation, or with a specified animation option. You can also  optionally change chart property values when it is redrawn. See [jsChartRedraw()] for more details.</description>
                </case>
            </cases>
        </section>
        <section>
            <title>Building Dashboards</title>
            <description>
                <p>Javascript Charts are ideal for 'dashboard' applications. You can design a UX component with multiple Javascript Charts each of which displays data on one of the metrics your dashboard is designed to monitor.</p>
                <p>In situations where a large number of users are connected to the dashboard, and where you want to update the dashboards frequently, you can use Alpha Anywhere's Web-sockets feature to create an efficient application. Instead of having the UX component make periodic callbacks to the server to refresh the data shown in the dashboard charts, a scheduled CRON job on the server can update data for the dashboard, then broadcast the data to all of the connected UX components.</p>
            </description>
        </section>
        <section>
            <title>Videos</title>
            <videos>
                <title>Introduction</title>
                <description>
                    <p>Javascript RGraph Charts allow you to create a variety of different chart types using Javascript. Because the charts are created client-side, using Javascript, these types of charts are ideal for disconnected applications where the Chart control cannot be used (as this control type produces charts server-side).</p>
                    <p> In this video we show how to set up a basic Javascript RGraph Charts.</p>
                </description>
                <date>2017-03-26</date>
                <video>
                    <name>Watch Video</name>
                    <link>https://www.viddler.com/v/fe1f46f0</link>
                </video>
            </videos>
        </section>
        <section>
            <videos>
                <title>Binding RGraph Chart Data to a Javascript Function</title>
                <description>
                    <p>The data shown in a Javascript RGraph Chart can be obtained by calling a Javascript function.</p>
                    <p>In this video show show how to bind the Chart data to a Javascript function.</p>
                </description>
                <date>2017-03-26</date>
                <video>
                    <name>Watch Video</name>
                    <link>https://www.viddler.com/v/99a5ed35</link>
                </video>
                <resources>
                    <resource>
                        <link>https://www.ajaxvideotutorials.com/V12Videos/basingDataOnJSFunction.zip</link>
                    </resource>
                </resources>
            </videos>
        </section>
        <section>
            <videos>
                <title>Binding RGraph Chart Data to Data From a SQL Database - Using a Data Series for RGraph Chart Data</title>
                <description>
                    <p> The data shown in a Javascript RGraph Chart can be obtained by querying a SQL database.</p>
                    <p>In this video show show how to bind the RGraph Chart data to data from a SQL database table by binding the Chart data to the data in a Data Series. The Data Series is populated with data from a SQL database table.</p>
                </description>
                <date>2017-03-26</date>
                <video>
                    <name>Watch Video</name>
                    <link>https://www.viddler.com/v/ca32ee70</link>
                </video>
            </videos>
        </section>
        <section>
            <videos>
                <title>Binding RGraph Chart Properties to a Javascript Function</title>
                <description>
                    <p>Any property of a chart can be made dynamic by binding the property to the result of a Javascript function.</p>
                    <p>In this video we show how properties of the RGraph Chart (in addition to the Chart data) can be made dynamic.</p>
                </description>
                <date>2017-03-26</date>
                <video>
                    <name>Watch Video</name>
                    <link>https://www.viddler.com/v/520a5985</link>
                </video>
                <resources>
                    <resource>
                        <link>https://www.ajaxvideotutorials.com/V12Videos/basingChartPropertiesOnJSFunction.zip</link>
                    </resource>
                </resources>
            </videos>
        </section>
        <section>
            <videos>
                <title>Action Javascript Methods for Working With Javascript RGraph Charts</title>
                <description>
                    <p>Action Javascript exposes several methods for working with Javascript RGraph Charts.</p>
                    <p>In this video we show how you can use Action Javascript to resize a Javascript RGraph Chart.</p>
                </description>
                <date>2017-03-26</date>
                <video>
                    <name>Watch Video</name>
                    <link>https://www.viddler.com/v/f5ebb353</link>
                </video>
                <resources>
                    <resource>
                        <link>https://www.ajaxvideotutorials.com/V12Videos/uxjschart_resizeUsingActionJavascript.zip</link>
                    </resource>
                </resources>
            </videos>
        </section>
        <section>
            <videos>
                <title>Setting an RGraph Chart Property Using Action Javascript vs. Binding an RGraph Chart Property to a Javascript Function</title>
                <description>
                    <p>Action Javascript allows you to dynamically change properties (such as the RGraph Chart colors, or title) after the RGraph Chart has been rendered. However, you can also achieve the same result by binding the RGraph Chart properties to Javascript functions.</p>
                    <p>In this video we contrast the two methods for setting RGraph Chart properties.</p>
                </description>
                <date>2017-03-26</date>
                <video>
                    <name>Watch Video</name>
                    <link>https://www.viddler.com/v/5c271bf2</link>
                </video>
                <resources>
                    <resource>
                        <link>https://www.ajaxvideotutorials.com/V12Videos/changeChartProperties.zip</link>
                    </resource>
                </resources>
            </videos>
        </section>
        <section>
            <videos>
                <title>Using Action Javascript to Refresh RGraph Chart Data</title>
                <description>
                    <p>Action Javascript allows you to refresh the data shown in an RGraph Chart. If the RGraph Chart data is based on a Data Series, an Ajax callback to the server will be made to refresh the data in the Data Series on which the RGraph Chart depends and then the Chart will be redrawn, showing the new data.</p>
                    <p>In this video we show how Action Scripting is used to refresh the RGraph Chart data.</p>
                </description>
                <date>2017-03-26</date>
                <video>
                    <name>Watch Video</name>
                    <link>https://www.viddler.com/v/7506a3b7</link>
                </video>
            </videos>
        </section>
        <section>
            <videos>
                <title>In Depth Example - RGraph Chart Based on SQL Data</title>
                <description>
                    <p>This example shows an RGraph pie chart populated from a multi-table SQL query against the sample Northwind database. The RGraph Chart is based on a custom Data Series to generate the Chart data. The user can select the country for which the RGraph Chart should be shown from a dropdownbox control.</p>
                    <p>In this video we show how this RGraph Chart is set up.</p>
                </description>
                <date>2017-03-26</date>
                <video>
                    <name>Watch Video</name>
                    <link>https://www.viddler.com/v/47dc6c4b</link>
                </video>
                <resources>
                    <resource>
                        <link>https://www.ajaxvideotutorials.com/V12Videos/jsChart_NW_ProductsPie.zip</link>
                    </resource>
                </resources>
            </videos>
        </section>
        <section>
            <videos>
                <title>Understanding the Structure of the Javascript that Defines a Javascript RGraph Chart</title>
                <description>
                    <p>The Javascript used to define a Javascript RGraph Chart has a well defined structure, described in this video.</p>
                </description>
                <date>2017-03-26</date>
                <video>
                    <name>Watch Video</name>
                    <link>https://www.viddler.com/v/7453666c</link>
                </video>
            </videos>
        </section>
        <section>
            <videos>
                <title>Javascript RGraph Chart Events</title>
                <description>
                    <p>In this example we show a RGraph Chart with a Tooltip event. After the RGraph Chart is resized, the Tooltip events must be re-registered.</p>
                </description>
                <date>2017-03-26</date>
                <video>
                    <name>Watch Video</name>
                    <link>https://www.viddler.com/v/25ad3696</link>
                </video>
                <resources>
                    <resource>
                        <link>https://www.ajaxvideotutorials.com/V12Videos/onTooltipEvent.zip</link>
                    </resource>
                </resources>
            </videos>
        </section>
    </sections>
    <links>
        <link href="images/chartToolbox.jpg">chartToolbox</link>
        <link link="ux component jschartresize method">jsChartResize()</link>
        <link link="ux component jsChartSetProperties method">jsChartSetProperties()</link>
        <link link="ux component jsChartSetRefreshData method">jsChartSetRefreshData()</link>
        <link link="ux component jsChartRedraw method">jsChartRedraw()</link>
        <link link="ux rgraph charts">RGraph SVG Charts</link>
        <link link="ux aasvg charts">Alpha Anywhere SVG Charts</link>
    </links>
    <see>
        <ref link="UX Properties Data Series">Data Series</ref>
        <ref link="ux component jschartresize method">{dialog.object}.jsChartResize()</ref>
        <ref link="ux component jsChartSetProperties method">{dialog.object}.jsChartSetProperties()</ref>
        <ref link="ux component jsChartSetRefreshData method">{dialog.object}.jsChartSetRefreshData()</ref>
        <ref link="ux component jsChartRedraw method">{dialog.object}.jsChartRedraw()</ref>
        <ref href="http://RGraph.net">RGraph Library</ref>
    </see>
</page>