<page build="1">
    <shortlink>ux list fields client side properties</shortlink>
    <topic parent="List Builder Fields" parentType="guide" elementName="Client-side Properties">Client-side Properties</topic>
    <description>The Client-side fields settings control the appearance and functionality of field data in the list control on the client-side.</description>
    <sections>
        <section>
            <title>Control type</title>
            <description>
                <p>Specify the control type to use to display the data in the List. If you choose 'RawData' then the data is not wrapped in any HTML tags (such as span or img) and you must add your own html markup to the template. Use 'CSSIcon' if the data in the field is the name of a CSS font icon (such as Font-Awesome) or an SVG icon.</p>
            </description>
        </section>
        <section>
            <figure>
                <title>Fields in a List can be rendered as different control types, such as switches, maps, or button lists.</title>
                <link>images/listcolumntypes.jpg</link>
            </figure>
        </section>
        <section>
            <description>The Control type choices include the following:</description>
            <cases>
                <case>
                    <title nested="2">Label</title>
                    <description>Displays the value using the label control.</description>
                </case>
                <case>
                    <title nested="2">Image</title>
                    <description>Displays the value as an image.</description>
                </case>
                <case>
                    <title nested="2">Video</title>
                    <description>Displays the value using a video control.</description>
                </case>
                <case>
                    <title nested="2">Audio</title>
                    <description>Displays the value using an audio control.</description>
                </case>
                <case>
                    <title nested="2">RawData</title>
                    <description>Displays the raw data int he field.</description>
                </case>
                <case>
                    <title nested="2">CSSIcon</title>
                    <description>Displays the value as a CSS icon.</description>
                </case>
                <case>
                    <title nested="2">Ink</title>
                    <description>Displays the value using the Ink control.</description>
                </case>
                <case build="4582">
                    <title nested="2">Star Rating</title>
                    <description>
                        <p>Displays a value using a star rating control. Tapping on one of the stars in the control will update the value in the List.</p>
                        <p>For example, in the image below, the selected row in the List (which has an associated Detail View) was edited by tapping on a star and the List row is shown as dirty.</p>
                    </description>
                    <figure>
                        <link>images/liststarrating1.jpg</link>
                    </figure>
                </case>
                <case build="4582">
                    <title nested="2">Switch</title>
                    <description>Displays a value using a two state switch control.</description>
                </case>
                <case build="4582">
                    <title nested="2">Integer</title>
                    <description>Displays an integer value with buttons to the left and right of the value to increment/decrement the value. You can display buttons that change the value by 1, 10, or 100.</description>
                </case>
                <case build="4582">
                    <title nested="2">Radiobuttons</title>
                    <description>Displays a value using a button list. The control behaves like a radio button because only one value in the button list can be selected.</description>
                </case>
                <case build="4582">
                    <title nested="2">Checkbox</title>
                    <description>Displays a value using a button list. The control behaves like a checkbox control because multiple values in the button list can be selected. The selected values are stored as a comma delimited list. For example, if the user selects the Red and Green buttons, the value stored in the List is *[js:Red,Green]*</description>
                </case>
                <case build="4582">
                    <title nested="2">Map</title>
                    <description>Display a value using a Map. The value (which must be a comma delimited string with a latitude and longitude value) is shown as a marker on the map.</description>
                </case>
                <case build="4582">
                    <title nested="2">Javascript</title>
                    <description>Allows you to define a Javascript function that returns HTML that is displayed in the List. The Javascript must be defined as a List method (i.e. it must be defined in the List builder on the Javascript pane). The method must take these input parameters:</description>
                    <list>
                        <item>
                            <name>*[js:value]*</name>
                            <description>The value of the field.</description>
                        </item>
                        <item>
                            <name>*[js:data]*</name>
                            <description>The array of data for all rows in the List.</description>
                        </item>
                        <item>
                            <name>*[js:rowNumber]*</name>
                            <description>Row number of the row being rendered (zero based).</description>
                        </item>
                        <item>
                            <name>*[js:fieldName]*</name>
                            <description>The name of the field being rendered.</description>
                        </item>
                    </list>
                </case>
                <case>
                    <description>For example, the following JavaScript outputs the field name in bold followed by a colon and the field value:</description>
                    <figure>
                        <link>images/javascriptFunc.png</link>
                    </figure>
                    <example code="js"><![CDATA[var html = "";

html = "<b>" + fieldName + ":</b> " + value;

return html;]]></example>
                </case>
            </cases>
        </section>
        <section>
            <title>In-line style</title>
            <description>
                <p>Specify the in-line style for the control. It is more efficient to use this property than the server-side in-line style because this property does not add to the amount of data that has to be sent from the server.</p>
            </description>
        </section>
        <section>
            <title>Word wrap</title>
            <description>
                <p>By default, when a long character value is shown in a List control the data in the list are truncated, not word-wrapped. The 'Word wrap' property allows you to turn on word-wrapping.</p>
            </description>
        </section>
        <section>
            <figure>
                <title>Example without word wrapping turned on.</title>
                <link>images/wordwrap1.jpg</link>
            </figure>
        </section>
        <section>
            <figure>
                <title>The property setting's location in the List Builder</title>
                <link>images/word.png</link>
            </figure>
        </section>
        <section>
            <figure>
                <title>Example with word wrapping turned on</title>
                <link>images/wordwrap3.jpg</link>
            </figure>
        </section>
        <section>
            <title>Word-wrapping option</title>
            <description>
                <p>Provides options for controlling how long text in a list column should be handled. By default, long text is truncated and ellipses are displayed to indicate that the text is truncated.</p>
            </description>
            <figure>
                <link>images/wordwo.png</link>
            </figure>
        </section>
        <section>
            <description>When you turn on word-wrap, you get a 'wordwrap option' property with these choices:
            </description>
            <cases>
                <case>
                    <description>'normal' - Sequences of whitespace will collapse into a single whitespace. Text will wrap when necessary.  
                    </description>
                </case>
                <case>
                    <description>'nowrap' - Sequences of whitespace will collapse into a single whitespace. Text will never wrap to the next line. The text continues on the same line until a tag is encountered 
                    </description>
                </case>
                <case>
                    <description>'pre' - Whitespace is preserved by the browser. Text will only wrap on line breaks Acts like the tag in HTML 
                    </description>
                </case>
                <case>
                    <description>'pre-line' - Sequences of whitespace will collapse into a single whitespace. Text will wrap when necessary, and on line breaks 
                    </description>
                </case>
                <case>
                    <description>'pre-wrap' - Whitespace is preserved by the browser. Text will wrap when necessary, and on line breaks 
                    </description>
                </case>
                <case>
                    <description>'inherit' - Specifies that the value of the white-space property should be inherited from the parent element </description>
                </case>
                <case build="5581">
                    <description>'break-word' - Allows long words that do not have spaces to be broken. </description>
                </case>
                <case>
                    <description>*none* - Turns word-wrap off.</description>
                </case>
            </cases>
            <note>You can turn on the word-wrap option for individual fields.</note>
        </section>
        <section>
            <title>Class</title>
            <description>
                <p>Specify the class for the field. If no class is specified, the default class from the component's Style will be used.</p>
            </description>
        </section>
        <section>
            <title>Show/hide expression</title>
            <description>
                <p>The expression is evaluated for each row. If the expression is true, the control will be shown. Use the special expression syntax, which will be converted automatically to Javascript.</p>
                <p>If you prefer to enter a Javascript expression directly, prefix the expression with '*[ui:Javascript:]*'. Your Javascript expression will need to refer to field values using the 'data.' prefix. You can also call a Javascript function that returns true or false. For example:</p>
                <p>
                    <example><![CDATA[javascript:myFunc(data)]]></example>
                </p>
            </description>
        </section>
        <section>
            <title>Compute summary values</title>
            <description>
                <p>You can specify that client-side summary values should be computed for any column in a list.</p>
                <p>To turn on client-side summary values for a field in the List, check the property shown below in the List builder:</p>
            </description>
            <figure>
                <link>images/summary.png</link>
            </figure>
            <note>For Lists based on SQL data, you can also specify server-side summary values. Server-side summary values are only different than client-side summary values if the List is paginated. Server-side summary values compute the summary based on the List query, whereas client-side summary values are based on the data that is currently loaded into the List. In the case of the paginated List, there can be many more records in the List query than are displayed in the List.</note>
        </section>
        <section>
            <description>When you compute summary data for a List column, you will typically want to display the data on the UX component. The List's afterClientSideSummaryCompute event is useful for this. The fterClientSideSummaryCompute fires after the client-side summary values have been updated. In this event handler you can reference the summary data that was computed. Here are some examples of how your Javascript code can reference summary values:
            </description>
            <example code="js"><![CDATA[csSummary['QTY'].total
csSummary['PRICE'].avg
csSummary['PRICE'].max
]]>            </example>
        </section>
        <section>
            <description>
                <p>The 'csSummary' object contains all of the summary data. The field name must be in uppercase and the summary type (total, avg, count, min, or max) must be in lower case.</p>
                <p>You can also use a method of the UX object to read a List summary value using the following method:</p>
            </description>
            <example code="js"><![CDATA[{dialog.object}.getListClientSideSummaryValue(listName, fieldName, summaryType)]]></example>
        </section>
        <section>
            <description>For example:
            </description>
            <example><![CDATA[var tot = {dialog.object}.getListClientSideSummaryValue('list1','QTY','total');]]></example>
        </section>
        <section>
            <title>Conditional style</title>
            <description>
                <p>Client-side conditional styles can be defined using the *[ui:Conditional style]* property. These styles are computed at run-time on the client.</p>
                <p>The *[ui:Conditional style]* is applied to the field.</p>
                <p>If you want to define a conditional style for the element that contains the field, use the *[ui:Conditional cell style]* property.</p>
                <p>The condition for a *[ui:Conditional style]* rule is defined is defined using JavaScript syntax. For example:</p>
                <p>
                    <example code="js"><![CDATA[data.Country == 'Canada' || data.Country == 'France']]></example>
                </p>
                <p>Because the definition is defined using JavaScript, you can use JavaScript functions in your condition:</p>
                <p>
                    <example code="js"><![CDATA[data.LastName.startsWith("S")]]></example>
                </p>
            </description>
        </section>
        <section build="5445">
            <title>Conditional cell style</title>
            <description>
                <p>The *[ui:Conditional cell style]* can be used to dynamically style the element in the List layout that contains the field. In a columnar layout, the element that contains the field is the table cell. In a Kanban or Freeform layout, the element that contains the field is the parent HTML DOM element that contains the field. This can be a div, span, or other HTML element in your layout definition.</p>
                <p>If you want to define a conditional style for only the field, use the *[ui:Conditional style]* property.</p>
                <p>The condition for a *[ui:Conditional cell style]* rule is defined is defined using JavaScript syntax. For example:</p>
                <p>
                    <example code="js"><![CDATA[data.Country == 'Canada' || data.Country == 'France']]></example>
                </p>
                <p>Because the definition is defined using JavaScript, you can use JavaScript functions in your condition:</p>
                <p>
                    <example code="js"><![CDATA[data.LastName.startsWith("S")]]></example>
                </p>
            </description>
        </section>
        <section>
            <title>Transform data type</title>
            <description>
                <p>Unless the List data source is a Javascript function (in which case you have complete control over the data types for each field in the List), all data in the List are string values.</p>
            </description>
        </section>
        <section>
            <videos>
                <video>
                    <name>Watch Video</name>
                    <link>https://www.viddler.com/v/a09c9062</link>
                </video>
                <resources>
                    <resource>
                        <link>https://www.ajaxvideotutorials.com/V12Videos/listTransformDataType.zip</link>
                    </resource>
                </resources>
            </videos>
        </section>
        <section>
            <description>
                <p>The 'Transform data type' property allows you to transform the data type of the data in a List column to a Date, Numeric, or Logical data type.</p>
                <p>To transform the data type, set the option in the 'Transform data type' property on the Fields pane in the List builder (as shown below).</p>
            </description>
            <figure>
                <link>images/transform.png</link>
            </figure>
        </section>
        <section>
            <description>
                <p>The benefit of transforming dates into true date objects and numbers into true number objects is that you can then use the template formatting options to format date or numeric values.</p>
                <p>For example, the template for a date field might be specfied as:</p>
            </description>
            <example><![CDATA[{DateOfBirth:date('MM-dd-yyyy')} ]]></example>
        </section>
        <section>
            <description>or a numeric field, the template might be specified as:</description>
            <example><![CDATA[{Price:number('$# ###.00')}]]></example>
            <note>It is not required to transform a string to a number in order to use the number format directive in the template. The sample template shown above ( {Price:number('$# ###.00')} would actually also work on a string value that contained a valid number.</note>
        </section>
        <section>
            <title>Date format</title>
            <description>
                <p>Specify the date/time format so that the date string can be parsed into a JavaScript date object. This property is only available if *[js:Transform data type]* is set to *[ToDate]*.</p>
            </description>
        </section>
        <section build="6232">
            <title>Decode value</title>
            <description>
                <p>The *[ui:Decode value]* property can be used to transform a field that contains a code (e.g. 1, 2, 3) into a user-friendly value (e.g. "Fish", "Bread", "Apples").</p>
                <p>In order to specify that a List field should be decoded, check the *[ui:Decode value]* property.</p>
            </description>
        </section>
        <section build="6232">
            <title>Decode lookup list</title>
            <description>
                <p>If the *[ui:Decode value]* property is checked, *[ui:Decode lookup list]* will be shown in the property list. *[ui:Decode lookup list]* is used to define the value to show for a given code.</p>
                <p>The *[ui:decode list]* can be based on static or dynamic values or a Javascript function. If the *[ui:decode list]* is based on dynamic values,  you can specify a database query, or a custom Xbasic function to get the values for the *[ui:decode list]*.</p>
                <p>The *[ui:decode list]* is a CRLF delimited list of values of the form *[codedValue|displayValue]*</p>
                <p>
                    <example><![CDATA[1|Beverages
2|Condiments
3|Confections]]></example>
                </p>
                <p>If a value cannot be decoded, the coded value is displayed.</p>
                <p>When the List data are refreshed, the *[ui:decode list]* is also refreshed (assuming that the *[ui:decode list]* was defined to be dynamic).</p>
                <p>The *[ui:decode list]* is stored as a property of the  List Object. For example, for a field called category, the *[ui:decode list]* for this field would be stored in:</p>
                <p>
                    <example code="js"><![CDATA[<listObject>.lookupvalue['category']]]></example>
                </p>
                <p>Where *[js:&lt;listObject&gt;]* is a pointer to the List Object.</p>
                <p>For example</p>
                <p>
                    <example code="js"><![CDATA[var lObj = {dialog.object}.getControl('list1');
lObj.lookupvalue['category'] = [
    {value: '1', html: 'Beverages'},
    {value: '2', html: '<b>Condiments</b>'},
]]]></example>
                </p>
                <p>Notice that the html property can be any HTML markup that you want.</p>
                <p>After you modify a field's lookupvalue property you must refresh the List using the *[js:&lt;listObject&gt;.refresh()]* method.</p>
            </description>
            <cases>
                <case>
                    <title nested="2">Sorting Columns with Coded Value</title>
                    <description>
                        <p>When you do a client-side sort on a column that has a coded value, the resolved values (as opposed to the raw values) are sorted.</p>
                    </description>
                </case>
                <case>
                    <title nested="2">Contrast Decode value with Lookup Columns</title>
                    <description>
                        <p>*[ui:Lookup Columns]*  is similar to the *[ui:Decode value]* in that both allow you to display a decoded value for a field in the List. *[ui:Decode value]* is easier to use, however, because the *[ui:decode list]* is part of the List definition. *[ui:Decode value]* also does not add additional fields to the List.</p>
                    </description>
                </case>
                <case>
                    <title nested="2">Resolving Coded Values Programmatically</title>
                    <description>
                        <p>You can resolve a coded value using this method of the List:</p>
                        <p>
                            <example code="js"><![CDATA[<listObject>.resolveCodedValue(fieldName,fieldValue)]]></example>
                        </p>
                    </description>
                </case>
            </cases>
        </section>
        <section>
            <title>Date/time display format</title>
            <description>
                <p>A property in the 'Fields' pane in the List Builder allows you to set the client-side display format for date, date/time and short-time fields.</p>
            </description>
            <figure>
                <link>images/time.png</link>
            </figure>
        </section>
        <section>
            <description>The builder for the 'Date/time display format' field allows you to set the format to:
            </description>
            <list bullet="true">
                <item>
                    <name>&lt;None&gt;</name>
                </item>
                <item>
                    <name>&lt;Default&gt; or &lt;Default - date part only&gt; (applies only to date/time fields)</name>
                </item>
                <item>
                    <name>a custom format</name>
                </item>
            </list>
        </section>
        <section>
            <description>
                <p>If you choose 'none', no client-side formatting rule is applied. This means that the date/time values will be displayed using the regional settings on the server from where the UX is loaded. So for example, if the server is located in Switzerland where the date format is dd.MM.yyyy, then dates in the List will be displayed like this: 31.12.2016.</p>
                <p>If you choose (or for a date/time field), the client side display format will match the setting for the 'Date format property' (shown below). This property is set on the Properties pane in the UX builder. This property can be overwritten at run-time by setting a session variable (__protected__clientSideDateFormat) at the time a user logs into your application.</p>
            </description>
            <figure>
                <link>images/time2.png</link>
            </figure>
        </section>
        <section>
            <title>Numeric display format</title>
            <description>
                <p>The List Builder allows you to specify a client-side display format for numeric fields without directly editing the template for the field. This method is easier than editing the template.</p>
            </description>
            <figure>
                <title>The Numeric display format property</title>
                <link>images/numeric.png</link>
            </figure>
        </section>
        <section>
            <description>Clicking the [...] button next to the 'Numeric display format' property opens the Numeric Format Genie.</description>
            <figure>
                <title>The Numeric Format Genie</title>
                <link>images/numeric2.png</link>
            </figure>
        </section>
        <section>
            <title></title>
            <description>
                <p></p>
            </description>
        </section>
        <section>
            <title>Videos</title>
            <videos>
                <title>'RawData' Control Type</title>
                <description>
                    <p>The "RawData" control type returns the data "as-is" from the data source. No HTML mark up is automatically added, as is the case when you choose the "Label" or "Image" control type. Use the "RawData" control type when you want complete control over how the HTML for the field should be created. When you use the "RawData" control type, you must put the HTML markup in the template.  </p>
                    <p>For example, say you have a field called "MyImage" that contains an Image URL. If you set the control type to Image, then in the template you would simply place this placeholder: *[cst:{MyImage}]*</p>
                    <p>But if you set the control type to "RawData", the template would then be: *[html:&lt;img src="{MyImage}" /&gt;]* </p>
                </description>
                <date>2013-08-16</date>
                <video>
                    <name>Watch Video</name>
                    <link>https://www.viddler.com/v/d81fe398</link>
                </video>
            </videos>
        </section>
        <section>
            <videos>
                <title>Displaying Data in a List using a StarRating Control</title>
                <description>
                    <p> Many applications allow you to rate something by tapping on a star in a StarRating control. The UX component has a stand-alone StarRating control (accessed by selecting [More...] in the UX Builder Controls toolbox), but in some cases you might want to display data in a List control using a StarRating control.</p>
                    <p>In this video we show how this is easily done.</p>
                </description>
                <date>2017-08-18</date>
                <video>
                    <name>Watch Video</name>
                    <link>https://www.viddler.com/v/2d6bad13</link>
                </video>
                <resources>
                    <resource>
                        <link>https://www.ajaxvideotutorials.com/V12Videos/ux_List_starRatingColumn.zip</link>
                    </resource>
                </resources>
            </videos>
        </section>
        <section>
            <videos>
                <title>Displaying Data in a List using Switch, Radio Button, Checkbox, Integer Increment and Map Controls</title>
                <description> The UX offers several different control types that can be used to display data in the List.  In this video we demonstrate several of the control types that can be used in a List.</description>
                <date>2017-09-02</date>
                <video>
                    <name>Watch Video</name>
                    <link>https://www.viddler.com/v/96e8f94e</link>
                </video>
                <resources>
                    <resource>
                        <link>https://www.ajaxvideotutorials.com/V12Videos/ListColumnTypes.zip</link>
                    </resource>
                </resources>
            </videos>
        </section>
        <section>
            <videos>
                <title>Decode coded Values</title>
                <description>
                    <p>It is common when designing databases to use coded values for certain fields (i.e. a category field might have values of 1, 2, 3, etc. rather than Beverages, Condiments, Confectionary, etc.). When displaying the data in the List you might like to display the decoded value for each coded value. In this video, we show how this is easily done.</p>
                </description>
                <date>2019-10-05</date>
                <video>
                    <name>Watch Video</name>
                    <link>https://www.viddler.com/v/d900c698</link>
                </video>
            </videos>
        </section>
    </sections>
    <links>
        <link href="/images/tools/ellipsesButton.png">...</link>
    </links>
</page>