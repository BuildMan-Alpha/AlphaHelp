<page build="4582">
    <shortlink>uxlistprops dragreordersettings</shortlink>
    <topic>Drag reorder settings</topic>
    <description>
        <p>Settings for defining the drag reorder behavior for the List control.</p>
    </description>
    <discussion>
        <p>The List Row Drag-to-Reorder action allows you to define settings that control the behavior of the action when [Has row drag reorder behavior] has been enabled. The action has two modes ("handle" and "downhold") that define how the user interacts with the List to reorder rows. For example, the List can be placed into *[ui:reorder]* mode by *[ui:pressing and holding]* on a List row, then dragging the row to its new position ("downhold" mode).</p>
        <p>Alternatively, an *[ui:icon]* can be placed in each row. The user then drags the icon to reorder rows ("handle" mode).</p>
        <p>You can also define an *[ui:event handler]* that fires when the user stops dragging a row or after moving the row to its desired position.</p>
    </discussion>
    <sections>
        <section>
            <figure>
                <title>A List control with drag reordering using "Downhold" mode.</title>
                <link>images/listReorder.gif</link>
            </figure>
        </section>
        <section>
            <title>Row Drag-to-Reorder List Action Builder Properties</title>
            <description>
                <p>The following properties are used to configure the drag to reorder behavior. If you need more control over the behavior than is available through these properties,the *[ui:Convert to low-level code]* can be used to convert the action to its underlying JSON, which is then added to the List using *[ui:Advanced]* &gt; *[ui:Additional Settings]* property.</p>
            </description>
            <cases>
                <case>
                    <title>Mode</title>
                    <description>
                        <p>Specifies how the List-reorder action should work. There are two different modes for List row reordering:</p>
                    </description>
                </case>
                <case>
                    <list>
                        <item>
                            <name>Downhold</name>
                            <description>User presses and holds the List row to move. This puts the List in *[ui:reorder]* mode. User can the drag the row to the new location.</description>
                        </item>
                        <item>
                            <name>Handle</name>
                            <description>The List is put into reorder mode when the user taps or clicks the *[ui:drag handle]*. The *[ui:drag handle]* can be an icon, a button, or other HTML. When the user drags the *[ui:drag handle]* the row is moved to a new location in the List. If the user drags any other part of the row, the List is scrolled.</description>
                        </item>
                    </list>
                </case>
                <case>
                    <description>
                        <p>If *[ui:Handle]* mode is used, you will need to add HTML to the List layout. *[ui:Handle]*  mode is typically used in a List with a freeform layout. See [Adding a Drag Handle to the List Layout] below for information on how to add the handle to the List's layout.</p>
                    </description>
                </case>
                <case>
                    <title>onMoveEnd Javascript</title>
                    <description>
                        <p>This action is fired when the user stop dragging on a List row to position the row at its new target location.</p>
                        <p>The JavaScript in this event can reference the following variables:</p>
                    </description>
                    <list>
                        <item>
                            <name>*[js:lObj]*</name>
                            <description>A  pointer to the List object.</description>
                        </item>
                        <item>
                            <name>*[js:from]*</name>
                            <description>The zero based row number of the row the user is moving.</description>
                        </item>
                        <item>
                            <name>*[js:to]*</name>
                            <description>The zero based row number of the target position for the row.</description>
                        </item>
                    </list>
                    <example code="js"><![CDATA[alert("Moving row " + from + " to row " + to + ".");]]></example>
                </case>
                <case>
                    <title>Class name</title>
                    <description>One or more classes that will be applied to the row the user drags to a a new location.</description>
                </case>
                <case>
                    <title>Drop spot class name</title>
                    <description>One or more classes applied to the 'drop spot'. The 'drop spot' is the gap shown in the List layout where the row will be moved when the user releases the row.</description>
                </case>
                <case>
                    <title>Drag HTML Javascript</title>
                    <description>
                        <p>Your can replace the HTML that is shown for the row you are dragging. By default, the HTML in row you are dragging on is shown while you are dragging the row.</p>
                        <p>Your code can reference a variable called *[js:HTML]*, the HTML for the row you are dragging. </p>
                        <p>Your code must return the HTML to display. For example, the code below shows the HTML in the row you are dragging and adds a message ('Move to the target, then drop'):</p>
                    </description>
                    <example code="js"><![CDATA[html = html+'<div style="position: absolute; bottom: -26px; left: 0px; right: 0px; line-height: 26px; padding: 0px 6px; text-align: center; background: rgba(0,0,0,.75); color: #fff;">Move to the target, then drop</div>']]></example>
                </case>
            </cases>
        </section>
        <section>
            <title>Adding a Drag Handle to the List Layout</title>
            <description>
                <p>The code below can be added to the List layout to add a drag handle. Javascript is also included that can be added to a button to toggle the display of the drag handle in the List control.</p>
            </description>
        </section>
        <section>
            <description>
                <p>The following HTML markup for the *[ui:drag handle]* icon can be added to the List freeform layout (recommended) template definition:</p>
            </description>
            <example code="html"><![CDATA[<div class="dragReorderHandle" a5-item="drag-reorder-handle">
    <div>
        <img src="svgIcon=#alpha-icon-bars:icon,24" />
    </div>
</div>]]></example>
        </section>
        <section>
            <description>
                <p>The following CSS is used to style the handle. This CSS can be added to the list via the *[ui:CSS]* tab. The *[ui:CSS]* tab provides quick access to the List builder's CSS tab.</p>
            </description>
            <example code="css"><![CDATA[.dragReorderHandle { 
    width: 0px;
    overflow:hidden;
    transition: width 300ms;
    text-align:left;
    white-space:nowrap;
    float:left;
    position:relative;
    left: -6px;
    cursor: move;
}

.dragReorderAllow .dragReorderHandle { 
    width: 40px;
}
.dragReorderAllow .dragReorderHandle div { 
    width: 40px;
}]]></example>
        </section>
        <section>
            <description>
                <p>Javascript to show the drag handle in each row is shown below. This code adds the *[css:dragReorderAllow]* class name from the drag handle, causing it to be shown. It can be added to a button or link in a ControlBar or other control. Replace *[js:your-list-name]* with the name of the List that contains the drag behavior:</p>
            </description>
            <example code="js"><![CDATA[var lObj = {dialog.object}.getControl('your-list-name');
$acn(lObj.contId,'dragReorderAllow');]]></example>
        </section>
        <section>
            <description>
                <p>Javascript to hide the drag handle in each row is shown below. This code removes the *[css:dragReorderAllow]* class name from the drag handle, causing it to be hidden. It can be added to a button or link in a ControlBar or other control. Replace *[js:your-list-name]* with the name of the List that contains the drag behavior:</p>
            </description>
            <example code="js"><![CDATA[var lObj = {dialog.object}.getControl('your-list-name');
$rcn(lObj.contId,'dragReorderAllow');]]></example>
        </section>
        <section>
            <title>How to Set the Drag-to-Reorder Mode at Run-time</title>
            <description>
                <p>The following JavaScript can be used to set the *[ui:Drag-to-Reorder]* mode at run-time. This code can be added to a button's click event or any client-side event. It can also be returned from a server-side event:</p>
            </description>
            <example code="js"><![CDATA[var lObj = {dialog.object}.getControl('your-list-name');
lObj.__dragReorderSettings.type = 'handle'; //or 'downhold'
{dialog.object}._listRowDragReorderSetup(lObj);]]></example>
        </section>
        <section>
            <title>Videos</title>
            <videos>
                <title>Row Drag Actions</title>
                <description>
                    <p>A common user interface pattern seen in mobile apps that use a List is to allow the user to drag on a row in the List to invoke some type of action. For example in the iOS Email app a user can drag on a row to archive the row, mark is as unread/read, or move the row to another folder.</p>
                    <p>In this video we show how you can implementing row drag behavior an a List control.</p>
                </description>
                <date>2017-08-25</date>
                <video>
                    <name>Watch Video</name>
                    <link>https://share.vidyard.com/watch/94BcG1Gj6anCa4xDywGjN6</link>
                </video>
                <resources>
                    <resource>
                        <link>https://www.ajaxvideotutorials.com/V12Videos/listRowDragAction.zip</link>
                    </resource>
                </resources>
            </videos>
        </section>
    </sections>
    <links>
        <link href="#section1_Adding a Drag Handle to the List Layout">Adding a Drag Handle to the List Layout</link>
        <link link="uxlistbuilder rowdragreorder">Has row drag reorder behavior</link>
    </links>
    <see>
        <ref link="ux data controls list control">List Control</ref>
        <ref link="list control ux api">List Control JavaScript Methods</ref>
    </see>
    <terms>Reorder Rows by Dragging on Row</terms>
</page>