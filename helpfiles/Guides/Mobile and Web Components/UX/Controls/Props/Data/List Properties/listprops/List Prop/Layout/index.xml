<page build="1">
    <shortlink>ux list builder layoutprop properties</shortlink>
    <topic>Layout Properties</topic>
    <description>Configures the look and feel of the List layout, including defining the layout type and optional CSS class overrides.</description>
    <!--list:.-->
    <sections>
        <section>
            <title>Layout type</title>
            <description>
                <p>Defines the type of layout for the List control. The *[ui:Layout type]* can be a *[ui:Column]*, *[ui:Freeform]*, or *[ui:Kanban]* layout as described below:</p>
                <p>
                    <list>
                        <item>
                            <name-title>Type</name-title>
                            <description-title>Description</description-title>
                        </item>
                        <item>
                            <name>Column</name>
                            <description>The layout is divided into multiple columns.</description>
                        </item>
                        <item>
                            <name>Freeform</name>
                            <description>A Freeform layout is a completely customized layout defined using HTML and Client-side template syntax. A Freeform layout supports 'snaking' layouts.</description>
                        </item>
                        <item build="5374">
                            <name>Kanban</name>
                            <description>A special List type to display a 'Kanban' style List. A Kanban list allows you to drag and drop list rows into various categories.</description>
                        </item>
                        <item>
                            <name>Custom</name>
                            <description>A completely custom layout defined using a JavaScript function that computes the HTML layout for the List control.</description>
                        </item>
                        <item>
                            <name>Map</name>
                            <description>A map layout displays the List data as markers on a map.</description>
                        </item>
                    </list>
                </p>
            </description>
        </section>
        <section>
            <title>Show column titles</title>
            <description>If enabled, column titles will be shown for each field in the layout. Only applies to a list with a 'Column' *[ui:Layout type]*.</description>
        </section>
        <section build="6945">
            <title>Has column actions</title>
            <description>
                <p>Enables the ability to add a Column Action to a column in the List. Column Actions let you apply filters to the List. Column actions are configured for individual controls in the [List Layout].</p>
                <p>See [List Column Actions] for more information.</p>
            </description>
        </section>
        <section build="6945">
            <title>Column action settings</title>
            <description>
                <p>Settings for configuring the position and tooltip shown for Column Actions:</p>
                <p>
                    <list>
                        <item>
                            <name-title>Setting</name-title>
                            <description-title>Description</description-title>
                        </item>
                        <item>
                            <name>Icon position</name>
                            <description>The position of the Column Action icon relative to the column label.</description>
                        </item>
                        <item>
                            <name>Equals</name>
                            <description>The help text shown when the user hovers the mouse over the Equals action</description>
                        </item>
                        <item>
                            <name>Not equals</name>
                            <description>The help text shown when the user hovers the mouse over the Not equals action</description>
                        </item>
                        <item>
                            <name>Contains</name>
                            <description>The help text shown when the user hovers the mouse over the Contains action</description>
                        </item>
                        <item>
                            <name>Does not contain</name>
                            <description>The help text shown when the user hovers the mouse over the Does not contain action</description>
                        </item>
                    </list>
                </p>
                <p>See [List Column Actions] for more information.</p>
            </description>
        </section>
        <section>
            <title>Freeform type</title>
            <description>Specify how the data in the list is laid out. Choices include *[ui:Vertical]*, *[ui:Horizontal]*, *[ui:Snaking]*.  Only applies to a list with a 'Freeform' *[ui:Layout type]*.</description>
        </section>
        <section>
            <title>Item width</title>
            <description>
                <p>The *[ui:Item width]* defines the width for each 'data row'. You can specify an explicit dimension for the item width (e.g. 300px, 1in, etc.), or you use the keyword *[css:fill]*, followed by an optional modifier.</p>
                <p>If the *[css:fill]* keyword is used, the List item will fill the entire width of the List.</p>
                <p>The modifier is used to indicate that the List item should not quite fill the entire width of the List. You specify an explicit value (e.g. 40px, .5in) by which the List item is less than the List width.</p>
                <p>For example, if you set the width to *[css:fill-10px]*, the List item will be 10px less than the width of the List.</p>
                <p>If you leave *[ui:Item width]* blank, each List item (i.e. 'row' of data) is automatically sized based on the row's contents.</p>
            </description>
        </section>
        <section>
            <title>Item height</title>
            <description>Specify the height of each item. If you leave this blank, each item (i.e. 'row' of data) is automatically sized based on the contents of the row being rendered. You can also use the *[css:fill]* keyword. See the [Item width] property above for more information about the *[css:fill]* keyword.</description>
        </section>
        <section>
            <title>List item class name</title>
            <description>Specify one or more classes to apply to each 'item' (e.g. row of data) in the List. If no class name is specified, the default class in the UX Component's style is used.</description>
        </section>
        <section>
            <title>List item hover class name</title>
            <description>Specify one or more classes to apply when the mouse hovers over an 'item' (e.g. row of data) in the List. If no class name is specified, the default class in the UX Component's style is used.</description>
            <tip>To prevent row highlighting when an item is "hovered", specify a class name that does not exist.</tip>
        </section>
        <section>
            <title>List item selected class name</title>
            <description>Specify an optional class to apply when an 'item' (e.g. row of data) is selected. If no class name is specified, the default class in the UX Component's style is used.</description>
        </section>
        <section>
            <title>List item in-line style</title>
            <description>List item in-line style property.</description>
        </section>
        <section>
            <title>Group Break class name</title>
            <description>Specify an optional class to apply to Group Headers. (Only applies if List has Group Breaks.)</description>
        </section>
        <section>
            <title>Has list item footer</title>
            <description>Specify if each item (row) in the list has a free-form footer section</description>
        </section>
        <section>
            <title>List item footer</title>
            <description>Specify the HTML for the footer that appears under each List Item (i.e. each row in the list).</description>
            <tip>You can use the [&lt;listObject&gt;.rowExpander()] method to toggle the open state of the List item footer, or to explicitly open or close it.</tip>
        </section>
        <section>
            <title>List item footer initial state</title>
            <description>Specify the initial state of the List Item footer. Choices include *[ui:Open]*, *[ui:Closed]*.</description>
        </section>
        <section>
            <title>Content class name</title>
            <description>CSS Class for container of all List items.</description>
        </section>
        <section>
            <title>Videos - Kanban Layouts</title>
        </section>
        <section>
            <videos>
                <title>Introduction to Kanban List Layouts</title>
                <description>
                    <p>Kanban Lists display data organized by category. Users can move List rows from one category to another using drag and drop. Users can also re-order the data within a category using drag and drop.</p>
                    <p>In this video we show a List control with both a columnar and a Kanban layout.</p>
                </description>
                <date>2018-10-03</date>
                <video>
                    <name>Watch Video</name>
                    <link>https://share.vidyard.com/watch/wcVdpmQYrfcMBonEaXQCtV</link>
                </video>
                <resources>
                    <resource>
                        <link>https://www.ajaxvideotutorials.com/V12Videos/kanbanIntro.zip</link>
                    </resource>
                </resources>
            </videos>
        </section>
        <section>
            <videos>
                <title>Creating a List with a Kanban Layout</title>
                <description>In this video we show how a Kanban layout can be defined for a List.</description>
                <date>2018-10-03</date>
                <video>
                    <name>Watch Video</name>
                    <link>https://share.vidyard.com/watch/LZAUDGgEDgYSgy4bw569ag</link>
                </video>
                <resources>
                    <resource>
                        <link>https://www.ajaxvideotutorials.com/V12Videos/kanbanIntro2.zip</link>
                    </resource>
                </resources>
            </videos>
        </section>
        <section build="5374">
            <title>Kanban settings</title>
            <description>
                <p>The *[ui:Kanban settings]* are used to configure a 'Kanban' layout.</p>
                <p>To learn more about Kanban layouts, check out the [Kanban Videos Below].</p>
                <p>The available settings are listed below:</p>
            </description>
            <cases>
                <case>
                    <title nested="2">Category field</title>
                    <description>The field in the List data that contains the various categories.</description>
                </case>
                <case>
                    <title nested="2">Category display</title>
                    <description>The categories in the Kanban layout can either be displayed horizontally (as in the above image), or vertically. On a phone, for example, it is likely that you would want a vertical display. Choices include *[ui:Horizontal]* and *[ui:Vertical]*.</description>
                </case>
                <case>
                    <title nested="2">Order field</title>
                    <description>The field in the List data that defines the order of the records within a category.</description>
                </case>
                <case>
                    <title nested="2">Default category names</title>
                    <description>
                        <p>The List of category names that the Kanban layout should display regardless of whether there is any data in the category or not. For example, in a sales pipeline list you may want to include a Closed category even if no current records have a status of Closed.</p>
                        <p>The categories in the Kanban layout are displayed in the same order in which they appear in this property. For example, if the default categories are Prospect, Qualified, Proposal, Closed and Lost, this is the order in which the Kanban layout will display the categories.</p>
                        <p>If there are no records in a particular category, you can control the HTML that is displayed in the empty category by setting the *[ui:HTML for empty categories]* property.</p>
                    </description>
                </case>
                <case>
                    <title nested="2">Sort fields</title>
                    <description>The data in the List are automatically sorted by the category field and within category by the order field. You can define additional sort criteria. For example, if two records in the same category have the same value in the order field, the sort defined here will break the tie.</description>
                </case>
                <case>
                    <title nested="2">Category header html</title>
                    <description>The HTML that appears at the top of each Category group</description>
                </case>
                <case>
                    <title nested="2">Category class name</title>
                    <description>Specify the class name for the category header.</description>
                </case>
                <case>
                    <title nested="2">Move icon</title>
                    <description>The icon that is displayed in each row. The user drags on this icon to move a row to a new position or a different category.</description>
                </case>
                <case>
                    <title nested="2">Color Javascript</title>
                    <description>This is optional. You can define a JavaScript function that can return a color to use in the Kanban layout. Your JavaScript code can determine what color to return based on data in the current row which is available in the *[js:data]* variable. The *[js:data]* variable contains the field values for the current row in the List. For example:</description>
                    <example code="js"><![CDATA[if(data.Category == 'Qualified') return 'Pink';
if(data.Category == 'Prospect') return 'Orange';
if(data.Category == 'Proposal') return 'Blue';
if(data.Category == 'Closed') return 'Green';
if(data.Category == 'Lost') return 'Red';]]></example>
                </case>
                <case>
                    <description>
                        <p>The JavaScript above returns a unique color for five categories.:</p>
                        <p>
                            <list>
                                <item>
                                    <name-title>Category</name-title>
                                    <description-title>Color</description-title>
                                </item>
                                <item>
                                    <name>Qualified</name>
                                    <description>Pink</description>
                                </item>
                                <item>
                                    <name>Prospect</name>
                                    <description>Orange</description>
                                </item>
                                <item>
                                    <name>Proposal</name>
                                    <description>Blue</description>
                                </item>
                                <item>
                                    <name>Closed</name>
                                    <description>Green</description>
                                </item>
                                <item>
                                    <name>Lost</name>
                                    <description>Red</description>
                                </item>
                            </list>
                        </p>
                    </description>
                </case>
                <case>
                    <title nested="2">onMove function</title>
                    <description>
                        <p>This function is called when a row is moved (either to a new position within a category, or from one category to another). Your JavaScript code can reference the following variables:</p>
                        <p>
                            <list>
                                <item>
                                    <name-title>Variable</name-title>
                                    <description-title>Description</description-title>
                                </item>
                                <item>
                                    <name>mode</name>
                                    <description>Either 'item' or 'category'. Will be 'category' if moving a row to an empty category, otherwise will be 'item'.</description>
                                </item>
                                <item>
                                    <name>from</name>
                                    <description>Zero based row number of the position of the row in the List data before it is moved.</description>
                                </item>
                                <item>
                                    <name>to</name>
                                    <description>If mode is 'item', zero based position of row in the List after it has been moved. If mode is 'category', name of the category to which the List row was moved.</description>
                                </item>
                                <item build="6129">
                                    <name>fCat</name>
                                    <description>The category the item is moving from.</description>
                                </item>
                                <item build="6129">
                                    <name>tCat</name>
                                    <description>The category the item is moving to.</description>
                                </item>
                                <item>
                                    <name>after</name>
                                    <description>*[js:true]* or *[js:false]*. Will be true if row is moved after the last row in a category.</description>
                                </item>
                            </list>
                        </p>
                        <p>You can also reference the *[js:this]* object, which is a pointer to the List object.</p>
                        <p>
                            <example code="js" caption="Example: Making an Ajax Callback when a row is moved"><![CDATA[var obj = {};
obj.fromCategory = fCat;
obj.toCategory = tCat;
obj.data = data;
var msg = JSON.stringify(obj);
var _d = A5.ajax.buildURLParam('_jsondata',msg);
var nameOfXbasicFunction = 'xb1' //replace with your own function name.
{dialog.object}.ajaxCallback('','',nameOfXbasicFunction,'',_d)]]></example>
                        </p>
                    </description>
                </case>
                <case build="6129">
                    <title nested="2">onBeforeMove function</title>
                    <description>
                        <p>This function is called when the user moves an item to a new category. If the event returns *[js:false]*, the move is cancelled.</p>
                        <p>Your JavaScript code can reference the following variables:</p>
                        <p>
                            <list>
                                <item>
                                    <name-title>Variable</name-title>
                                    <description-title>Description</description-title>
                                </item>
                                <item>
                                    <name>mode</name>
                                    <description>Either 'item' or 'category'. Will be 'category' if moving a row to an empty category, otherwise will be 'item'.</description>
                                </item>
                                <item>
                                    <name>from</name>
                                    <description>Zero based row number of the position of the row in the List data before it is moved.</description>
                                </item>
                                <item>
                                    <name>to</name>
                                    <description>If mode is 'item', zero based position of row in the List after it has been moved. If mode is 'category', name of the category to which the List row was moved.</description>
                                </item>
                                <item>
                                    <name>after</name>
                                    <description>*[js:true]* or *[js:false]*. Will be true if row is moved after the last row in a category.</description>
                                </item>
                                <item>
                                    <name>data</name>
                                    <description>The data for the row that the user wants to move.</description>
                                </item>
                            </list>
                        </p>
                        <p>You can also reference the *[js:this]* object, which is a pointer to the List object.</p>
                    </description>
                </case>
                <case>
                    <title nested="2">Has category footer</title>
                    <description>Should a footer be displayed at the bottom of each category column?</description>
                </case>
                <case>
                    <title nested="2">Category footer HTML expression</title>
                    <description>Specify the expression that returns the HTML for the category footer.</description>
                </case>
                <case>
                    <title nested="2">Category footer class name</title>
                    <description>Specify the class name for the category footer.</description>
                </case>
                <case>
                    <title nested="2">Group class name</title>
                    <description>Specify the class name for the entire category.</description>
                    <tip>If you set to 'KanbanColumn' or a blank value Alpha Anywhere will generate the appropriate CSS definition.</tip>
                </case>
                <case>
                    <title nested="2">HTML for empty categories</title>
                    <description>Specify the Javascript to compute the HTML to display in empty categories.</description>
                </case>
                <case>
                    <title nested="2">Classname for empty categories</title>
                    <description>Specify the class name for empty categories.</description>
                </case>
            </cases>
        </section>
        <section build="5667">
            <title>Custom layout settings</title>
            <description>
                <p>A custom layout gives you complete control over how the records in the List control are rendered. The HTML to display is computed using a JavaScript function. This function is defined in the *[ui:onDraw]* property in the Custom layout settings. The function will be passed all of the data in the List control.</p>
            </description>
            <cases>
                <case>
                    <title nested="2">onDraw</title>
                    <description>
                        <p>The onDraw property defines the HTML to render using JavaScript. The HTML is set by assigning it to the *[js:innerHTML]* property of the *[js:ele]* variable, which is passed to the function. The variables that can be referenced in the JavaScript function are:</p>
                        <p>
                            <list>
                                <item>
                                    <name-title>Variable</name-title>
                                    <description-title>Description</description-title>
                                </item>
                                <item>
                                    <name>*[js:type]*</name>
                                    <description>The onDraw "type". It can be one of the following:</description>
                                    <list>
                                        <item>
                                            <name-title>Type</name-title>
                                            <description-title>Description</description-title>
                                        </item>
                                        <item>
                                            <name>"initial"</name>
                                            <description>The List is rendering for the first time.</description>
                                        </item>
                                        <item>
                                            <name>"refresh"</name>
                                            <description>The List is being refreshed.</description>
                                        </item>
                                        <item>
                                            <name>"resize"</name>
                                            <description>The List is being resized.</description>
                                        </item>
                                    </list>
                                </item>
                                <item>
                                    <name>*[js:data]*</name>
                                    <description>All of the data in the List. *[js:data]* is an array of objects.</description>
                                </item>
                                <item>
                                    <name>*[js:ele]*</name>
                                    <description>The element for the List body. Your code must set the innerHTML of this element. If you do not set the *[js:ele.innerHTML]* property, the List's HTML will not be updated.</description>
                                </item>
                            </list>
                        </p>
                        <p>The example below demonstrates how to use these variables to compute the HTML for the List:</p>
                        <p>
                            <example code="js"><![CDATA[if (type == 'initial') { 
    //initial render
    ele.innerHTML = 'custom layout for ' + data.length + ' rows of data';
} else if (type == 'refresh') { 
    ele.innerHTML = 'custom layout for ' + data.length + ' rows of data';
} else if (type == 'resize') { 
    //do nothing
}]]></example>
                        </p>
                    </description>
                </case>
            </cases>
        </section>
        <section build="5744">
            <title>Map layout settings</title>
            <description>
                <p>A map layout displays the records in the List as markers on a map. Each row of of data is represented by its own marker. The *[ui:Map layout settings]* define the properties and events for the map markers. Most properties are defined using JavaScript.</p>
            </description>
            <cases>
                <case>
                    <title nested="2">Map Layout Settings</title>
                    <description>
                        <p>The Map Layout Settings are used to configure the map marker for each row of data in the List control. At a minimum, you must define the *[ui:Latitude/longitude or address]* property.</p>
                        <p>All Map Layout Settings properties have access to the following variables:</p>
                        <p>
                            <list>
                                <item>
                                    <name-title>Variable</name-title>
                                    <description-title>Description</description-title>
                                </item>
                                <item>
                                    <name>*[js:data]*</name>
                                    <description>
                                        <p>The data for a row in the List control. *[js:data]* contains the fields in the List row. A comment is dynamically generated that lists the available fields. For example, if the List control is based on a data source with a "CustomerName", "Address", "City", and "State" column, the following generated comment will be included in the editor for the property:</p>
                                        <p>
                                            <example code="js"><![CDATA[// The 'data' object has these properties: CustomerName,Address,City,State
]]>                                            </example>
                                        </p>
                                        <p>Property names are case-sensitive. To reference a property in the data object, such as "City" or "State", you would write:</p>
                                        <p>
                                            <example code="js"><![CDATA[var cityState = data.City + ", " + data.State;]]></example>
                                        </p>
                                    </description>
                                </item>
                                <item>
                                    <name>*[js:rowNumber]*</name>
                                    <description>The corresponding row number for the data in the List control.</description>
                                </item>
                            </list>
                        </p>
                    </description>
                    <cases>
                        <case>
                            <title nested="3">Latitude/longitude or address</title>
                            <description>
                                <p>JavaScript that computes the location of the map marker. Your code must return either an array with the latitude and longitude values or a string with an address.</p>
                                <p>
                                    <example code="js"><![CDATA[//return a latitude/longitude value
return [data.latitude,data.longitude];

//return an address as a string
return data.address;]]></example>
                                </p>
                                <p>Defining the latitude/longitude or address is required.</p>
                            </description>
                            <important>
                                <p>If you return the address, the address will be geocoded using Google's Geocoding Service which limits the number of API calls permitted (unless you have upgraded to the premium plan). *[Geocoding will be performed every time a marker is placed on the map.]* This can lead to undesired behavior -- such as missing markers due to exceeding the API call limits.</p>
                                <p>If your data does not have the latitude/longitude, you can [follow this guide] to learn how to bulk geocode your data in your data source.</p>
                                <p>If geocoding the data in advance is not an option, it is highly recommended to paginate the List data to limit the number of map markers shown.</p>
                            </important>
                        </case>
                        <case>
                            <title nested="3">Marker icon</title>
                            <description>
                                <p>The *[ui:Marker icon]* is the icon shown on the map for the List data. The icon used can be specified using an expression, a JavaScript function, or an image sequence. Icons can be a built-in image or an image from the project.</p>
                                <p>The *[js:data]* and *[js:rowNumber]* variables can be used in Condition expressions and Javascript function methods for defining the marker icon. Both methods for defining the marker can reference the *[js:data]* and *[js:rowNumber]* variables described above.</p>
                                <p>If using an image sequence, the marker will be automatically computed based on the data's row number in the List control. You can select from a set of pre-defined image sequences. Image sequences use specially labelled images that contain either numbers (1 - 100) or letters (A - Z) to give each marker on the map a unique icon. If there are more rows of data in the List than available images, a generic image with no number/letter will be used.</p>
                                <p>If no *[ui:Marker icon]* is defined, Alpha Anywhere will use an image sequence to display the map markers for the List data.</p>
                            </description>
                            <tip>
                                <p>You can download free icons from the Map Icons Collection at *[extlink:https://mapicons.mapsmarker.com/]*. Add the icons to your project prior to referencing them.</p>
                            </tip>
                        </case>
                        <case>
                            <title nested="3">Marker is draggable</title>
                            <description>
                                <p>JavaScript that computes whether or not the Marker is draggable - the user can click/tap hold and drag the marker on the map. Your code must return either true or false to indicate if the marker can be dragged.</p>
                                <p>
                                    <example code="js"><![CDATA[return true;]]></example>
                                </p>
                                <p>If this property is not defined or the property returns false, dragging will be disabled.</p>
                            </description>
                        </case>
                        <case>
                            <title nested="3">Marker title</title>
                            <description>
                                <p>JavaScript to compute an optional marker title. If you do not want a marker title, return false. Otherwise, your code must return the title text.</p>
                                <p>
                                    <example code="js"><![CDATA[return 'Title is ' + data.name;

' Marker has no title:
return false;]]></example>
                                </p>
                                <p>If this property is not defined or returns false, the marker will have no title.</p>
                            </description>
                        </case>
                        <case>
                            <title nested="3">Marker has detail view</title>
                            <description>
                                <p>JavaScript that indicates whether or not the marker has a detail view. Your must return either true or false to indicate if the marker has a Detail View.</p>
                                <p>
                                    <example code="js"><![CDATA[return true;]]></example>
                                </p>
                                <p>If this property is not defined or returns false, the marker will have no detail view.</p>
                            </description>
                        </case>
                        <case>
                            <title nested="3">Detail view HTML</title>
                            <description>
                                <p>If the marker has a detail view, the *[ui:Detail view HTML]* property computes the HTML to display to the user when the detail view is shown. Your code must return the HTML to display in the Detail View which is shown when the user clicks on the marker.</p>
                                <p>You can reference the following variables in your JavaScript</p>
                                <p>
                                    <example code="js"><![CDATA[return 'The detail view is: ' + data.name;]]></example>
                                </p>
                                <p>If this property is required if the *[ui:Marker has detail view]* property returns true.</p>
                            </description>
                        </case>
                        <case>
                            <title nested="3">Marker animation</title>
                            <description>
                                <p>Defines whether or not a marker should be animated when placed on the map. If no animation is desired, your code should return false. Otherwise, you can return 'drop' or 'bounce' for the animation type.</p>
                                <p>
                                    <example code="js"><![CDATA[return 'drop';]]></example>
                                </p>
                                <p>If this property is not defined or returns false, the marker will have no animation.</p>
                            </description>
                        </case>
                        <case>
                            <title nested="3">Marker animation bounce duration</title>
                            <description>
                                <p>If a marker is animated when placed on the map, the *[ui:Marker animation bounce duration]* JavaScript must return the bounce duration in milliseconds.</p>
                                <p>
                                    <example code="js"><![CDATA[return 5000;]]></example>
                                </p>
                                <p>If this property is not defined, the marker will use the default animation.</p>
                            </description>
                        </case>
                        <case>
                            <title nested="3">Marker has overlay</title>
                            <description>
                                <p>The *[ui:Marker has overlay]* property computes whether or not an overlay is shown surrounding the marker. Your code can return true if an overlay should be shown or false if no overlay is desired.</p>
                                <p>
                                    <example code="js"><![CDATA[return true;]]></example>
                                </p>
                                <p>If this property is not defined or returns false, the marker will have no overlay.</p>
                            </description>
                        </case>
                        <case>
                            <title nested="3">Marker overlay size</title>
                            <description>
                                <p>If the marker has an overlay, the *[ui:Marker overlay size]* defines either the overlay's radius or area. The overlay size is defined as a number followed by a unit. Radius values use the units "m", "km", "mi", or "ft". Area values use the units "sq m", "sq km", "sq mi", or "sq ft". For example:</p>
                                <p>
                                    <example code="js"><![CDATA[return "10sq km";]]></example>
                                </p>
                                <p>If this property is not defined, the marker overlay will have a size of zero.</p>
                            </description>
                            <important>
                                <p>There must be no whitespace between the number and unit defining the overlay size.</p>
                            </important>
                        </case>
                        <case>
                            <title nested="3">Marker overlay fill color</title>
                            <description>
                                <p>If the marker has an overlay, the *[ui:Marker overlay fill color]* defines the fill color for the overlay. The fill color is defined as a CSS value. Use the *[ui:Insert color]* link in the Marker Overlay Color editor to insert a color using the Color Picker.</p>
                                <p>
                                    <example code="js"><![CDATA[return "hsl(193.64,43.14%,20%)";]]></example>
                                </p>
                                <p>If this property is not defined, the marker will use the default fill color.</p>
                            </description>
                        </case>
                        <case>
                            <title nested="3">Marker overlay fill opacity</title>
                            <description>
                                <p>The *[ui:Marker overlay fill opacity]* defines the transparency for the marker overlay fill color. You must return a value between 0 and 1. A value of 0 indicates that the fill color is completely transparent while a value of 1 indicates that the fill color is completely opaque.</p>
                                <p>
                                    <example code="js"><![CDATA[// Overlay fill is 80% opaque (i.e. 20% transparent):
return 0.8;]]></example>
                                </p>
                                <p>If this property is not defined, the marker will use the default opacity.</p>
                            </description>
                        </case>
                        <case>
                            <title nested="3">Marker overlay stroke color</title>
                            <description>
                                <p>If the marker has an overlay, the *[ui:Marker overlay stroke color]* defines the stroke color for the overlay. The stroke can be used to add a border to the marker overlay. The stroke color is defined as a CSS value. Use the *[ui:Insert color]* link in the Marker Overlay Stroke Color editor to insert a color using the Color Picker.</p>
                                <p>
                                    <example code="js"><![CDATA[return '#f4461a';]]></example>
                                </p>
                                <p>If none of the stroke properties are defined, the marker overlay will not have a border.</p>
                                <p>If any of the other stroke properties are defined and this property is not defined, the marker overlay border will use the default stroke color.</p>
                            </description>
                        </case>
                        <case>
                            <title nested="3">Marker overlay stroke width</title>
                            <description>
                                <p>The *[ui:Marker overlay stroke width]* defines the width (in points) of the border surrounding the overlay.</p>
                                <p>
                                    <example code="js"><![CDATA[// Overlay "border" 10 pts wide:
return 10;]]></example>
                                </p>
                                <p>If none of the stroke properties are defined, the marker overlay will not have a border. Otherwise, if this property is not defined, the marker overlay border will use the default stroke width.</p>
                            </description>
                        </case>
                        <case>
                            <title nested="3">Marker overlay stroke opacity</title>
                            <description>
                                <p>The *[ui:Marker overlay stroke opacity]* defines the transparency for the marker overlay stroke color. The stroke can be used to add a border to the marker overlay.  You must return a value between 0 and 1. A value of 0 indicates that the stroke color is completely transparent while a value of 1 indicates that the stroke color is completely opaque.</p>
                                <p>
                                    <example code="js"><![CDATA[// Overlay "border" is 50% opaque (i.e. 50% transparent):
return 0.5;]]></example>
                                </p>
                                <p>If none of the stroke properties are defined, the marker overlay will not have a border. Otherwise, if this property is not defined, the marker overlay border will use the default stroke opacity.</p>
                            </description>
                        </case>
                        <case>
                            <title nested="3">Marker name</title>
                            <description>
                                <p>The *[ui:Marker name]* defines the name of the marker for each row of data in the List. Each marker must have a unique name. You can reference data in the record and the List row number to create your marker name. For example:</p>
                                <p>
                                    <example code="js"><![CDATA[return 'marker' + rowNumber;]]></example>
                                </p>
                                <p>If this property is not defined, the marker will use the default marker name.</p>
                            </description>
                        </case>
                        <case>
                            <title nested="3">Group name</title>
                            <description>
                                <p>The *[ui:Group name]* is a name given to a group of markers. The group  name can be a static value or dynamically computed based on the data for the List row. For example:</p>
                                <p>
                                    <example code="js"><![CDATA[// All markers are in the "Customer" group:
return "Customer";

// Markers are grouped based on their Country:
return data.Country;]]></example>
                                </p>
                                <p>If this property is not defined, the marker will use the default group name.</p>
                            </description>
                        </case>
                    </cases>
                </case>
                <case>
                    <title nested="2">Javascript</title>
                    <description>
                        <p>Javascript events are available for adding additional functionality to the List map, such as opening a detail view or updating the latitude/longitude of a record when the user drags a map marker.</p>
                        <p>The JavaScript defined in these events can reference the below variables described below:</p>
                        <p>
                            <list>
                                <item>
                                    <name-title>Variable</name-title>
                                    <description-title>Description</description-title>
                                </item>
                                <item>
                                    <name>*[js:data]*</name>
                                    <description>The data for a row in the List control. See [Map layout settings] above for more information.</description>
                                </item>
                                <item>
                                    <name>*[js:rowNumber]*</name>
                                    <description>The corresponding row number for the data in the List control.</description>
                                </item>
                                <item>
                                    <name>*[js:arguments[0]]*</name>
                                    <description>
                                        <p>The marker object. This object contains methods for accessing the marker's latitude and longitude, which can be accessed via the *[js:latlng]* property. For example:</p>
                                        <p>
                                            <example code="js"><![CDATA[var lat = arguments[0].latLng.lat();
var lng = arguments[0].latLng.lng();]]></example>
                                        </p>
                                    </description>
                                </item>
                            </list>
                        </p>
                    </description>
                    <cases>
                        <case>
                            <title nested="3">onClick</title>
                            <description>
                                <p>The *[ui:onClick]* event is triggered when the user clicks or taps a map marker. This event could be used to perform an action, such as navigate to a panel that displays detailed information about the map marker.</p>
                                <p>For example:</p>
                                <p>
                                    <example code="js"><![CDATA[{dialog.object}.setValue('LIST1',data.CustomerID);
{dialog.object}.panelSetActive('PANELCARD_2');]]></example>
                                </p>
                            </description>
                        </case>
                        <case>
                            <title nested="3">onDblClick</title>
                            <description>
                                <p>The *[ui:onDblClick]* event is triggered when the user double-clicks or double-taps the map marker.  You can add custom code to this event to perform an action when the marker has been double-clicked.</p>
                            </description>
                        </case>
                        <case>
                            <title nested="3">onDrag</title>
                            <description>
                                <p>The *[ui:onDrag]* event is triggered when the map marker has been dragged. You can add custom code to this event to perform an action when the marker has been dragged.</p>
                            </description>
                        </case>
                        <case>
                            <title nested="3">onDragEnd</title>
                            <description>
                                <p>The *[ui:onDragEnd]* event is triggered when the user release the map marker. YOu can add custom code to this event to perform an action, such as update the latitude and longitude of the map marker in the List.</p>
                                <p>For example:</p>
                                <p>
                                    <example code="js"><![CDATA[var lat = arguments[0].latLng.lat()
var lng = arguments[0].latLng.lng()
var d = {latitude: lat, longitude: lng};
var lObj = {dialog.object}.getControl('{dialog.listId}');
try{
    lObj.updateTableRow(rowNumber,d);
    {dialog.Object}.refreshClientSideComputations();
}catch(e) { 
    {dialog.Object}.refreshClientSideComputations();
}]]></example>
                                </p>
                            </description>
                        </case>
                        <case>
                            <title nested="3">onDragStart</title>
                            <description>
                                <p>The *[ui:onDragStart]* event is triggered when the user release the map marker. You can add custom code to this event to perform an action.</p>
                            </description>
                        </case>
                        <case>
                            <title nested="3">onMouseDown</title>
                            <description>
                                <p>The *[ui:onMouseDown]* event is triggered when the user depresses the left mouse button. You can add custom code to this event to perform an action.</p>
                            </description>
                        </case>
                        <case>
                            <title nested="3">onMouseOut</title>
                            <description>
                                <p>The *[ui:onMouseOut]* event is triggered when the mouse cursor moves off of the map. You can add custom code to this event to perform an action.</p>
                            </description>
                        </case>
                        <case>
                            <title nested="3">onMouseOver</title>
                            <description>
                                <p>The *[ui:onMouseOver]* event is triggered when the user moves the mouse cursor over the map. You can add custom code to this event to perform an action.</p>
                            </description>
                        </case>
                        <case>
                            <title nested="3">onMouseUp</title>
                            <description>
                                <p>The *[ui:onMouseUp]* event is triggered when the user releases the mouse button. You can add custom code to this event to perform an action.</p>
                            </description>
                        </case>
                        <case>
                            <title nested="3">onRightClick</title>
                            <description>
                                <p>The *[ui:onRightClick]* event is triggered when the user clicks the right mouse button. You can add custom code to this event to perform an action.</p>
                            </description>
                        </case>
                        <case>
                            <title nested="3">onAddComplete</title>
                            <description>
                                <p>The *[ui:onAddComplete]* event is triggered after a marker has been added to the map. It fires for each marker added to the map. You can add custom code to this event to perform an action.</p>
                            </description>
                        </case>
                    </cases>
                </case>
            </cases>
        </section>
        <section>
            <title>Videos</title>
            <videos>
                <title>Adding Color Coding and Summary Values to a Kanban Layout</title>
                <description>In this video we show some advanced features of a Kanban layout. We show how you can add color coding to the layout (so that List rows in different categories are colored differently and how you can summary data to each category.</description>
                <date>2018-10-03</date>
                <video>
                    <name>Watch Video</name>
                    <link>https://share.vidyard.com/watch/XyAJVEmTcYCrZyLe4qw2Pj</link>
                </video>
                <resources>
                    <resource>
                        <link>https://www.ajaxvideotutorials.com/V12Videos/kanbanIntroAdvanced.zip</link>
                    </resource>
                </resources>
            </videos>
        </section>
        <section>
            <videos>
                <title>Persisting Edit in a Kanban List to a SQL Database</title>
                <description>In this video we show how a Kanban List can be based on a SQL database and how edits to the List can be saved in the database.</description>
                <date>2018-10-03</date>
                <video>
                    <name>Watch Video</name>
                    <link>https://share.vidyard.com/watch/sd6MFDpz1j8Drt939q8VQT</link>
                </video>
                <resources>
                    <resource>
                        <link>https://www.ajaxvideotutorials.com/V12Videos/kanbanSQL.zip</link>
                    </resource>
                </resources>
            </videos>
        </section>
        <section>
            <videos>
                <title>List Control Map Layout</title>
                <description>
                    <p>A List control can have multiple Layouts. The most common Layouts are columnar and freeform. But a List can also have a Kanban layout and a Map layout.</p>
                    <p>The Map layout displays a Map control in the List and shows markers on the map for each row of data in the List.</p>
                    <p>In this video we show how the Map layout is configured.</p>
                </description>
                <date>2019-03-24</date>
                <video>
                    <name>Watch Video</name>
                    <link>https://share.vidyard.com/watch/j6YgFkREhwFHeXzTizM2mH</link>
                </video>
                <resources>
                    <resource>
                        <link>https://www.ajaxvideotutorials.com/V12Videos/list_map_layout.zip</link>
                    </resource>
                </resources>
            </videos>
        </section>
        <section>
            <videos>
                <title>Column Actions</title>
                <description>
                    <p>When you turn on Column Actions for a columnar Layout in a List control, an filter icon is shown in the column header for each column in the List. The column actions provide a very powerful and convenient way for filtering the data in a List.</p>
                </description>
                <date>2020-07-17</date>
                <video>
                    <name>Watch Video</name>
                    <link>https://alphamediacapture.s3.amazonaws.com/videos/ux_columnactions.mp4</link>
                </video>
            </videos>
        </section>
    </sections>
    <links>
        <link link="list%20object%20rowexpander%20method">&lt;listObject&gt;.rowExpander()</link>
        <link href="#section1_Item%20width">Item width</link>
        <link href="#section1_Videos%20-%20Kanban%20Layouts">Kanban Videos Below</link>
        <link href="#section2_Map%20Layout%20Settings">Map layout settings</link>
        <link link="how%20to%20bulk%20geocode%20addresses%20in%20a%20database">follow this guide</link>
        <link link="ux list columnactions">List Column Actions</link>
    </links>
    <see>
        <ref link="ux data controls list control">List Control</ref>
        <ref link="list control ux api">List Control JavaScript Methods</ref>
    </see>
</page>