<page build="1">
    <shortlink>ux list builder layoutprop properties</shortlink>
    <topic>Layout Properties</topic>
    <description>Configures the look and feel of the List layout, including defining the layout type and optional CSS class overrides.</description>
    <!--list:.-->
    <sections>
        <section>
            <title>Layout type</title>
            <description>
                <p>Defines the type of layout for the List control. The *[ui:Layout type]* can be a *[ui:Column]*, *[ui:Freeform]*, or *[ui:Kanban]* layout as described below:</p>
                <p>
                    <list>
                        <item>
                            <name-title>Type</name-title>
                            <description-title>Description</description-title>
                        </item>
                        <item>
                            <name>Column</name>
                            <description>The layout is divided into multiple columns.</description>
                        </item>
                        <item>
                            <name>Freeform</name>
                            <description>A Freeform layout is a completely customized layout defined using HTML and Client-side template syntax. A Freeform layout supports 'snaking' layouts.</description>
                        </item>
                        <item build="5374">
                            <name>Kanban</name>
                            <description>A special List type to display a 'Kanban' style List. A Kanban list allows you to drag and drop list rows into various categories.</description>
                        </item>
                    </list>
                </p>
            </description>
        </section>
        <section build="5374">
            <title>Kanban settings</title>
            <description>
                <p>The *[ui:Kanban settings]* are used to configure a 'Kanban' layout.</p>
                <p>To learn more about Kanban layouts, check out the [Kanban Videos Below].</p>
                <p>The available settings are listed below:</p>
            </description>
            <cases>
                <case>
                    <title nested="2">Category field</title>
                    <description>The field in the List data that contains the various categories.</description>
                </case>
                <case>
                    <title nested="2">Category display</title>
                    <description>The categories in the Kanban layout can either be displayed horizontally (as in the above image), or vertically. On a phone, for example, it is likely that you would want a vertical display. Choices include *[ui:Horizontal]* and *[ui:Vertical]*.</description>
                </case>
                <case>
                    <title nested="2">Order field</title>
                    <description>The field in the List data that defines the order of the records within a category.</description>
                </case>
                <case>
                    <title nested="2">Default category names</title>
                    <description>
                        <p>The List of category names that the Kanban layout should display regardless of whether there is any data in the category or not. For example, in a sales pipeline list you may want to include a Closed category even if no current records have a status of Closed.</p>
                        <p>The categories in the Kanban layout are displayed in the same order in which they appear in this property. For example, if the default categories are Prospect, Qualified, Proposal, Closed and Lost, this is the order in which the Kanban layout will display the categories.</p>
                        <p>If there are no records in a particular category, you can control the HTML that is displayed in the empty category by setting the *[ui:HTML for empty categories]* property.</p>
                    </description>
                </case>
                <case>
                    <title nested="2">Sort fields</title>
                    <description>The data in the List are automatically sorted by the category field and within category by the order field. You can define additional sort criteria. For example, if two records in the same category have the same value in the order field, the sort defined here will break the tie.</description>
                </case>
                <case>
                    <title nested="2">Category header html</title>
                    <description>The HTML that appears at the top of each Category group</description>
                </case>
                <case>
                    <title nested="2">Category class name</title>
                    <description>Specify the class name for the category header.</description>
                </case>
                <case>
                    <title nested="2">Move icon</title>
                    <description>The icon that is displayed in each row. The user drags on this icon to move a row to a new position or a different category.</description>
                </case>
                <case>
                    <title nested="2">Color Javascript</title>
                    <description>This is optional. You can define a JavaScript function that can return a color to use in the Kanban layout. Your JavaScript code can determine what color to return based on data in the current row which is available in the *[js:data]* variable. The *[js:data]* variable contains the field values for the current row in the List. For example:</description>
                    <example code="js"><![CDATA[if(data.Category == 'Qualified') return 'Pink';
if(data.Category == 'Prospect') return 'Orange';
if(data.Category == 'Proposal') return 'Blue';
if(data.Category == 'Closed') return 'Green';
if(data.Category == 'Lost') return 'Red';]]></example>
                </case>
                <case>
                    <description>
                        <p>The JavaScript above returns a unique color for five categories.:</p>
                        <p>
                            <list>
                                <item>
                                    <name-title>Category</name-title>
                                    <description-title>Color</description-title>
                                </item>
                                <item>
                                    <name>Qualified</name>
                                    <description>Pink</description>
                                </item>
                                <item>
                                    <name>Prospect</name>
                                    <description>Orange</description>
                                </item>
                                <item>
                                    <name>Proposal</name>
                                    <description>Blue</description>
                                </item>
                                <item>
                                    <name>Closed</name>
                                    <description>Green</description>
                                </item>
                                <item>
                                    <name>Lost</name>
                                    <description>Red</description>
                                </item>
                            </list>
                        </p>
                    </description>
                </case>
                <case>
                    <title nested="2">onMove function</title>
                    <description>This even fires when a row is moved (either to a new position within a category, or from one category to another). Your JavaScript code can reference the following variables:
                        <p></p>
                        <p><list>
                            <item>
                                <name-title>Variable</name-title>
                                <description-title>Description</description-title>
                            </item>
                            <item>
                                <name>mode</name>
                                <description>Either 'item' or 'category'. Will be 'category' if moving a row to an empty category, otherwise will be 'item'.</description>
                            </item>
                            <item>
                                <name>from</name>
                                <description>Zero based row number of the position of the row in the List data before it is moved.</description>
                            </item>
                            <item>
                                <name>to</name>
                                <description>If mode is 'item', zero based position of row in the List after it has been moved. If mode is 'category', name of the category to which the List row was moved.</description>
                            </item>
                            <item>
                                <name>after</name>
                                <description>*[js:true]* or *[js:false]*. Will be true if row is moved after the last row in a category.</description>
                            </item>
                        </list></p>
                        <p>You can also reference the *[js:this]* object, which is a pointer to the List object.</p>
                    </description>
                </case>
                <case>
                    <title nested="2">Has category footer</title>
                    <description>Should a footer be displayed at the bottom of each category column?</description>
                </case>
                <case>
                    <title nested="2">Category footer HTML expression</title>
                    <description>Specify the expression that returns the HTML for the category footer.</description>
                </case>
                <case>
                    <title nested="2">Category footer class name</title>
                    <description>Specify the class name for the category footer.</description>
                </case>
                <case>
                    <title nested="2">Group class name</title>
                    <description>Specify the class name for the entire category.</description>
                    <tip>If you set to 'KanbanColumn' or a blank value Alpha Anywhere will generate the appropriate CSS definition.</tip>
                </case>
                <case>
                    <title nested="2">HTML for empty categories</title>
                    <description>Specify the Javascript to compute the HTML to display in empty categories.</description>
                </case>
                <case>
                    <title nested="2">Classname for empty categories</title>
                    <description>Specify the class name for empty categories.</description>
                </case>
            </cases>
        </section>
        <section>
            <title>Show column titles</title>
            <description>If enabled, column titles will be shown for each field in the layout. Only applies to a list with a 'Column' *[ui:Layout type]*.</description>
        </section>
        <section>
            <title>Freeform type</title>
            <description>Specify how the data in the list is laid out. Choices include *[ui:Vertical]*, *[ui:Horizontal]*, *[ui:Snaking]*.  Only applies to a list with a 'Freeform' *[ui:Layout type]*.</description>
        </section>
        <section>
            <title>Item width</title>
            <description>
                <p>The *[ui:Item width]* defines the width for each 'data row'. You can specify an explicit dimension for the item width (e.g. 300px, 1in, etc.), or you use the keyword *[css:fill]*, followed by an optional modifier.</p>
                <p>If the *[css:fill]* keyword is used, the List item will fill the entire width of the List.</p>
                <p>The modifier is used to indicate that the List item should not quite fill the entire width of the List. You specify an explicit value (e.g. 40px, .5in) by which the List item is less than the List width.</p>
                <p>For example, if you set the width to *[css:fill-10px]*, the List item will be 10px less than the width of the List.</p>
                <p>If you leave *[ui:Item width]* blank, each List item (i.e. 'row' of data) is automatically sized based on the row's contents.</p>
            </description>
        </section>
        <section>
            <title>Item height</title>
            <description>Specify the height of each item. If you leave this blank, each item (i.e. 'row' of data) is automatically sized based on the contents of the row being rendered. You can also use the *[css:fill]* keyword. See the [Item width] property above for more information about the *[css:fill]* keyword.</description>
        </section>
        <section>
            <title>List item class name</title>
            <description>Specify one or more classes to apply to each 'item' (e.g. row of data) in the List. If no class name is specified, the default class in the UX Component's style is used.</description>
        </section>
        <section>
            <title>List item hover class name</title>
            <description>Specify one or more classes to apply when the mouse hovers over an 'item' (e.g. row of data) in the List. If no class name is specified, the default class in the UX Component's style is used.</description>
            <tip>To prevent row highlighting when an item is "hovered", specify a class name that does not exist.</tip>
        </section>
        <section>
            <title>List item selected class name</title>
            <description>Specify an optional class to apply when an 'item' (e.g. row of data) is selected. If no class name is specified, the default class in the UX Component's style is used.</description>
        </section>
        <section>
            <title>List item in-line style</title>
            <description>List item in-line style property.</description>
        </section>
        <section>
            <title>Group Break class name</title>
            <description>Specify an optional class to apply to Group Headers. (Only applies if List has Group Breaks.)</description>
        </section>
        <section>
            <title>Has list item footer</title>
            <description>Specify if each item (row) in the list has a free-form footer section</description>
        </section>
        <section>
            <title>List item footer</title>
            <description>Specify the HTML for the footer that appears under each List Item (i.e. each row in the list).</description>
            <tip>You can use the [&lt;listObject&gt;.rowExpander()] method to toggle the open state of the List item footer, or to explicitly open or close it.</tip>
        </section>
        <section>
            <title>List item footer initial state</title>
            <description>Specify the initial state of the List Item footer. Choices include *[ui:Open]*, *[ui:Closed]*.</description>
        </section>
        <section>
            <title>Content class name</title>
            <description>CSS Class for container of all List items.</description>
        </section>
        <section>
            <title>Videos - Kanban Layouts</title>
        </section>
        <section>
            <videos>
                <title>Introduction to Kanban List Layouts</title>
                <description>
                    <p>Kanban Lists display data organized by category. Users can move List rows from one category to another using drag and drop. Users can also re-order the data within a category using drag and drop.</p>
                    <p>In this video we show a List control with both a columnar and a Kanban layout.</p>
                </description>
                <date>2018-10-03</date>
                <video>
                    <name>Watch Video</name>
                    <link>https://www.viddler.com/v/c637a028</link>
                </video>
                <resources>
                    <resource>
                        <link>https://www.ajaxvideotutorials.com/V12Videos/kanbanIntro.zip</link>
                    </resource>
                </resources>
            </videos>
        </section>
        <section>
            <videos>
                <title>Creating a List with a Kanban Layout</title>
                <description>In this video we show how a Kanban layout can be defined for a List.</description>
                <date>2018-10-03</date>
                <video>
                    <name>Watch Video</name>
                    <link>https://www.viddler.com/v/beb177b1</link>
                </video>
                <resources>
                    <resource>
                        <link>https://www.ajaxvideotutorials.com/V12Videos/kanbanIntro2.zip</link>
                    </resource>
                </resources>
            </videos>
        </section>
        <section>
            <videos>
                <title>Adding Color Coding and Summary Values to a Kanban Layout</title>
                <description>In this video we show some advanced features of a Kanban layout. We show how you can add color coding to the layout (so that List rows in different categories are colored differently and how you can summary data to each category.</description>
                <date>2018-10-03</date>
                <video>
                    <name>Watch Video</name>
                    <link>https://www.viddler.com/v/476a9e78</link>
                </video>
                <resources>
                    <resource>
                        <link>https://www.ajaxvideotutorials.com/V12Videos/kanbanIntroAdvanced.zip</link>
                    </resource>
                </resources>
            </videos>
        </section>
        <section>
            <videos>
                <title>Persisting Edit in a Kanban List to a SQL Database</title>
                <description>In this video we show how a Kanban List can be based on a SQL database and how edits to the List can be saved in the database.</description>
                <date>2018-10-03</date>
                <video>
                    <name>Watch Video</name>
                    <link>https://www.viddler.com/v/20092c4e</link>
                </video>
                <resources>
                    <resource>
                        <link>https://www.ajaxvideotutorials.com/V12Videos/kanbanSQL.zip</link>
                    </resource>
                </resources>
            </videos>
        </section>
    </sections>
    <links>
        <link link="list%20object%20rowexpander%20method">&lt;listObject&gt;.rowExpander()</link>
        <link href="#section1_Item width">Item width</link>
        <link href="#section1_Videos - Kanban Layouts">Kanban Videos Below</link>
    </links>
</page>