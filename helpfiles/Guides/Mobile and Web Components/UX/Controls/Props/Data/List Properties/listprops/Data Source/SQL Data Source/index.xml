<page>
    <shortlink>ux list data source sql data source properties</shortlink>
    <topic>SQL Data Source</topic>
    <description>These are the List Builder's SQL Data Source properties.</description>
    <sections>
        <section>
            <title>Connection string</title>
            <description>
                <p>A named or ad-hoc connection string defining how to connect to the database that contains the table, view, or stored procedure that will be used to populate the List control.</p>
            </description>
        </section>
        <section>
            <title>Method of defining SQL query</title>
            <description>
                <p>Defines how the SQL query to the database to fetch information to display in the List will be built.</p>
                <p>
                    <list>
                        <item>
                            <name-title>Method</name-title>
                            <description-title>Description</description-title>
                        </item>
                        <item>
                            <name>FieldsFromTable</name>
                            <description>The List will be based on a single table in the database. Selecting this option exposes additional fields to define the table and fields to fetch, including options to order and filter the data.</description>
                        </item>
                        <item>
                            <name>CustomSQLStatement (Custom)</name>
                            <description>You define the SQL statement to fetch the data to display in the list using the SQL Query builder. Use this option if you want to build a list based on a stored procedure.</description>
                        </item>
                    </list>
                </p>
            </description>
        </section>
        <section>
            <title>Table name</title>
            <description>
                <p>Shown when *[ui:Method fo defining SQL query]* is *[FieldsFromTable]*.</p>
                <p>The name of the table to query.</p>
            </description>
        </section>
        <section>
            <title>Field list</title>
            <description>
                <p>Shown when *[ui:Method fo defining SQL query]* is *[FieldsFromTable]*.</p>
                <p>The fields to fetch from the table.</p>
            </description>
        </section>
        <section>
            <title>Filter</title>
            <description>
                <p>Shown when *[ui:Method fo defining SQL query]* is *[FieldsFromTable]*.</p>
                <p>An optional filter to apply to the data. The filter can reference arguments.</p>
            </description>
        </section>
        <section>
            <title>Order</title>
            <description>
                <p>Shown when *[ui:Method fo defining SQL query]* is *[FieldsFromTable]*.</p>
                <p>An optional order to apply to the data.</p>
            </description>
        </section>
        <section>
            <title>Distinct</title>
            <description>
                <p>Shown when *[ui:Method fo defining SQL query]* is *[FieldsFromTable]*.</p>
                <p>If checked, only unique records are fetched.</p>
            </description>
        </section>
        <section>
            <title>Record limit</title>
            <description>
                <p>Shown when *[ui:Method fo defining SQL query]* is *[FieldsFromTable]*.</p>
                <p>The maximum number of records to fetch from the table. If set to -1, all records are returned.</p>
            </description>
        </section>
        <section>
            <title>SQL statement</title>
            <description>
                <p>The SQL statement to execute. When *[ui:Method for defining SQL query]* is *[FieldsFromTable]*, *[ui:SQL statement]* contains the SQL that Alpha Anywhere will execute to fetch the List data based on the *[ui:Table name]*, *[ui:Field list]*, *[ui:Filter]*, *[ui:Order]*, *[ui:Distinct]*, and *[ui:Record limit]* properties.</p>
                <p>When *[ui:Method for defining SQL query]* is *[CustomSQLStatement]*, *[ui:SQL statement]* defines the SQL to execute created using the SQL Query builder. You can access the SQL Query builder by clicking the [...] smart field button for the *[ui:SQL statement]* property.</p>
                <p>If you edit the SQL statement when the *[ui:Method for defining SQL query]* is set to *[FieldsFromTable]*, Alpha Anywhere will change *[ui:Method for defining SQL query]* to *[CustomSQLStatement]*.</p>
            </description>
        </section>
        <section>
            <title>Portable SQL</title>
            <description>
                <p>Shown when *[ui:Method for defining SQL query]* is set to *[CustomSQLStatement]*. If checked, Alpha Anywhere assumes the *[ui:SQL statement]* is Portable SQL. Uncheck to use native SQL syntax to query your database.</p>
            </description>
        </section>
        <section build="8174">
            <title>SQL statement for field list</title>
            <description>
                <p>Shown when *[ui:Portable SQL]* is unchecked. An optional SQL query to execute to compute the list of fields for the List control. This option is typically used in the case where the List is based on a stored procedure.</p>
            </description>
        </section>
        <section>
            <title>Primary key</title>
            <description>
                <p>The field(s) that contain the primary key for the SQL query.</p>
            </description>
        </section>
        <section>
            <title>Get count of records in query</title>
            <description>
                <p>If checked, a query will be performed to get a count of the total number of records in the List. The count is performed by executing the SQL Statement twice: once to fetch the list data, again to count the total number of records. The record count is primarily used when the List is paginated. If the List is not paginated, you may want to disable *[ui:Get count of records in query]* since all of the records will be downloaded to the application and can be counted using client-side scripting.</p>
            </description>
        </section>
        <section>
            <title>Server side beforeQuery event</title>
            <description>
                <p>An Xbasic function to execute before any query has been sent to the database to retrieve the List data.</p>
            </description>
            <figure>
                <link>images/before.png</link>
            </figure>
        </section>
        <section>
            <description>The Xbasic function that handles this event gets passed the SQL statement that will be executed and the SQL arguments that will be used in he query. The Xbasic code can modify the SQL statement that the query will execute, rather than simply changing argument values.</description>
        </section>
        <section>
            <title>Server side afterQuery event</title>
            <description>
                <p>This server side event is available for List controls that are populated using a SQL data source. The AfterQuery event fires after the List query has been performed. The typical use case for this event is to compute some Javascript to return to the browser. For example, you might want to compute the total for a column in the List and then update some control on the screen.</p>
            </description>
        </section>
        <section>
            <title>Server side date and number formatting</title>
            <description>
                <p>Defines the date format for dates and decimal places for numbers returned from queries executed on the List's data source.</p>
            </description>
        </section>
    </sections>
    <links>
        <link link="ux list data source arguments properties">Arguments</link>
    </links>
</page>