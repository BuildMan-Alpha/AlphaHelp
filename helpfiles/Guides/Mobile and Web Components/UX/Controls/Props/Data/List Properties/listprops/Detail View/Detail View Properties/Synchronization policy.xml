<page>
    <topic>Synchronization policy</topic>
    <description>Defines settings for Synchronizing in-memory data in the UX Component with data stored on the Server, including when modified data should be uploaded (synchronized) as well as when to check for and download new and modified records. The policy can be set to trigger when a record is saved or when the List is explicitly synched using the "Synchronize" button. Synchronization policy is only available for Lists based on a SQL Data Source.</description>
    <discussion>
        <p>The *[ui:Synchronization policy]* property lets you select how you want to perform CRUD operations, like 'Save' and 'Synchronize' in your List control. </p>
        <p>For example, it is easy to add 'Save' and 'Synchronize' buttons to a List control with a Detail View. In this case the 'Save' button adds the edits made in the Detail View to the List control. The 'Synchronize' button then pushes the changes in the List Control to the Server. Using *[ui:Synchronization policy]* you can make this one step. When you click 'Save' the edits in the Detail View will automatically be added to the List control AND pushed to the server, all in one go.</p>
        <p>There are two types of synchronization: *[ui:Client-to-server]* and *[ui:Server-to-client]*. Client-to-sever synchronization is the process by which local edits are pushed back to the server and stored in the remote system of record. Sever-to-client synchronization is the process by which edits made by other users which have been uploaded to the remote system of record and downloaded and stored locally in the application.</p>
        <p>*[ui:Synchronization policy]* is only available if the List has a SQL [Data Source].</p>
    </discussion>
    <sections>
        <section>
            <title>Automatically Performing Client-to-server Synchronization Whenever Edits are Saved</title>
            <description>
                <p>The List can be configured to automatically upload local changes when they are saved. If a connection is available, local changes will be automatically uploaded if the *[ui:Perform client-to-server synchronization whenever user saves edits ota row in a List]* option is checked. Once enabled, the user will not need to explicitly click a second button to upload their changes.</p>
                <p>If the device is offline or automatic client-to-server synchronization is not enabled, the modified records will be rendered with row indicators in the List which indicate how a record was modified ([added], [edited], or [deleted].) These changes will need to be synchronized once a connection is available (typically by using a 'Synchronize' button.)</p>
            </description>
        </section>
        <section>
            <title>Automatically Performing Server-to-client Synchronization when Client-to-sever Synchronization Occurs</title>
            <description>
                <p>Data on the server can be automatically synchronzied when a client-to-server synchronization is performed by checking the *[ui:Perform a server-to-client synchronization whenever a client-to-server synchronization is performed]* option.</p>
            </description>
        </section>
        <section>
            <note>
                <p>Server-to-client synchronization can be time-consuming. Consider carefully if server-to-client synchronization is needed in an application every time client-to-server synchronization occurs. If you have enabled *[ui:Perform client-to-server synchronization whenever user saves edits toa  row in a List]*, you will be performing a lot of server-to-client synchronizations which can place heavy load on your server.</p>
            </note>
        </section>
        <section>
            <description>
                <p>If you do not enable *[ui:Perform a server-to-client synchronization whenever a client-to-server synchronization is performed]*, a server-to-client synchronization can be performed at any time by calling the *[js:{dialog.object}.refreshListData()]* method. For example:</p>
                <p>
                    <example code="js"><![CDATA[{dialog.object}.refreshListData('LIST1', {mode: 'incremental'});]]></example>
                </p>
                <p>See [{dialog.object}.refreshListData()] for more information about this method.</p>
            </description>
        </section>
        <section>
            <title>Videos</title>
            <videos>
                <title>Batch Data Synchronization</title>
                <description>In a disconnected application, a user may make a large number of edits before they reestablish a connection with the server. When changes are synchronized with the server, the application waits for a response from the server. Synchronizing large amounts of data can take a long time on the server, and the application may time out while waiting for a response. Sending data to the server in batches helps prevent the application from timing out while waiting for synchronization to complete.</description>
                <video>
                    <name>Watch Video</name>
                    <link>https://www.viddler.com/v/84171164</link>
                </video>
                <resources>
                    <resource>
                        <link>https://www.ajaxvideotutorials.com/V12Videos/ux_synch_in_batches.zip</link>
                    </resource>
                </resources>
            </videos>
        </section>
    </sections>
    <limitations>List with a SQL Data Source Only</limitations>
    <see>
        <ref link="buildingdisconnectedapplications#section1_Synchronizing Data">Building Disconnected Applications: Synchronizing Data</ref>
        <ref link="ux component refreshlistdata method">{dialog.object}.refreshListData()</ref>
        <ref link="ux component refreshlistsincremental method">{dialog.object}.refreshListsIncremental()</ref>
    </see>
    <links>
        <link link="ux component refreshlistdata method">{dialog.object}.refreshListData()</link>
        <link link="uxlist datasource">Data Source</link>
        <link link="CSS - New record row indicator">added</link>
        <link link="CSS - Dirty row indicator">edited</link>
        <link link="CSS - Deleted record row indicator">deleted</link>
    </links>
</page>