<page build="0">
    <shortlink>ux list events</shortlink>
    <topic>List Control Client-side Events</topic>
    <description>
        <p>Client-side events for the List can be utilized to perform additional tasks when an event, such as clicking a list row or creating a new record, occurs.</p>
    </description>
    <discussion>
        <p>The List control has numerous client-side events you can use to add your own custom behaviors. The events can be accessed using the *[ui:List events]* button at the bottom of the List Builder or via the List Builder's [Javascript - Render Time], [Javascript - Run Time], or Detail View [Events] properties. Clicking the button or editing the properties opens the List Control System Events dialog, shown below.</p>
        <p>The List Control System Events dialog divides events into two groups: List events and Detail View events. Detail View events only apply to a List with a Detail View. You can switch between the two types of events using the radio buttons above the event listing. To edit an event, select the event from the list and enter your JavaScript in the Javascript Code area to the right.</p>
    </discussion>
    <sections>
        <section>
            <figure>
                <title>List Control System Events dialog</title>
                <alt>List Control System Events dialog</alt>
                <link>images/listControlSystemEvents.png</link>
            </figure>
        </section>
        <section>
            <title>List Events</title>
            <description>
                <p>List events are triggered when interacting with the List.</p>
            </description>
            <cases>
                <case>
                    <title nested="2">Render Time Events</title>
                    <description>
                        <p>Render time events fire while the List is being rendered. These events can be used to change the HTML rendered for the List.</p>
                    </description>
                    <list>
                        <item>
                            <name-title>Event</name-title>
                            <description-title>Description</description-title>
                        </item>
                        <item>
                            <name>[onBeforeItemDraw]</name>
                            <description>Fires before each row in the list is drawn.</description>
                        </item>
                        <item>
                            <name>[onBeforeListDraw]</name>
                            <description>Fires before the list is drawn.</description>
                        </item>
                        <item>
                            <name>[onItemDraw]</name>
                            <description>Fires when each row of data is drawn.</description>
                        </item>
                        <item>
                            <name>[onListDraw]</name>
                            <description>Fires after the list has been drawn.</description>
                        </item>
                    </list>
                </case>
                <case>
                    <title nested="2">Run Time Events</title>
                    <description>
                        <p>Run time events fire during application execution, such as when the List control is first loaded or when the user clicks a row in the List.</p>
                    </description>
                    <list>
                        <item>
                            <name-title>Event</name-title>
                            <description-title>Description</description-title>
                        </item>
                        <item>
                            <name>[onInitialize]</name>
                            <description>Fires after the list has been initialized.</description>
                        </item>
                        <item>
                            <name>[onBeforePopulate]</name>
                            <description>Fires before the List is populated.</description>
                        </item>
                        <item>
                            <name>[onPopulate]</name>
                            <description>Fires after the List has been populated.</description>
                        </item>
                        <item>
                            <name>[onBeforeAddRows]</name>
                            <description>Fires when the .addRows() method is called before the rows are actually added.</description>
                        </item>
                        <item>
                            <name>[onBeforeRemoveRows]</name>
                            <description>Fires when the .removeRows() method is called before the rows are actually removed.</description>
                        </item>
                        <item>
                            <name>[onBeforeUpdateRow]</name>
                            <description>Fires when the .updateRow() method is called before the rows are actually updated.</description>
                        </item>
                        <item>
                            <name>[onAddRows]</name>
                            <description>Fires after the .addRows() method is called.</description>
                        </item>
                        <item>
                            <name>[onRemoveRows]</name>
                            <description>Fires after the .removeRows() method is called.</description>
                        </item>
                        <item>
                            <name>[onUpdateRow]</name>
                            <description>Fires after the .updateRow() method is called.</description>
                        </item>
                        <item>
                            <name>[onSelect]</name>
                            <description>Fires when a value in the List is set.</description>
                        </item>
                        <item>
                            <name>[onBeforeSelect]</name>
                            <description>Fires before the onSelect event.</description>
                        </item>
                        <item>
                            <name>[afterSelect]</name>
                            <description>Fires after the onSelect event.</description>
                        </item>
                        <item>
                            <name>[onDblClick]</name>
                            <description>Fires when the user double clicks a row in the List.</description>
                        </item>
                        <item>
                            <name>[onClick]</name>
                            <description>Fires when a row in the List is clicked or when the List has focus and the user hits the Enter key.</description>
                        </item>
                        <item>
                            <name>[onTap]</name>
                            <description>Fires when the user taps a List row.</description>
                        </item>
                        <item>
                            <name>[onDblTap]</name>
                            <description>Fires when the user double tapas a row in the List.</description>
                        </item>
                        <item>
                            <name>[onDownHold]</name>
                            <description>Fires when the user holds down on a row in the List.</description>
                        </item>
                        <item>
                            <name>[onRightClick]</name>
                            <description>Fires when the user right clicks a row in the List control.</description>
                        </item>
                        <item>
                            <name>[onFieldClick]</name>
                            <description>Fires when the user clicks on a field in a row in the List.</description>
                        </item>
                        <item>
                            <name>[onFieldDblClick]</name>
                            <description>Fires when the user double clicks on a field in a row in the List.</description>
                        </item>
                        <item>
                            <name>[onFieldRightClick]</name>
                            <description>Fires when the user right clicks on a field in a row in the List.</description>
                        </item>
                        <item>
                            <name>[onFocus]</name>
                            <description>Fires when the List gets focus.</description>
                        </item>
                        <item>
                            <name>[onBlur]</name>
                            <description>Fires when the List loses focus.</description>
                        </item>
                        <item>
                            <name>[afterAjaxCallback]</name>
                            <description>Fires after any Ajax callback (sort, refresh row, append row, etc.) has completed.</description>
                        </item>
                        <item>
                            <name>[beforeClientSideFilter]</name>
                            <description>Fires before a client-side filter is applied to the List. If the function returns false, the filter is not applied.</description>
                        </item>
                        <item>
                            <name>[afterClientSideFilter]</name>
                            <description>Fires after a client-side filter has been applied to the List.</description>
                        </item>
                        <item>
                            <name>[beforeClientSideSort]</name>
                            <description>Fires before a client-side sort is applied to the List data (by tapping on a column heading in a tabular List layout). If the event returns false, the List is not ordered.</description>
                        </item>
                        <item>
                            <name>[afterClientSideSort]</name>
                            <description>Fires after a client-side sort is applied to the List data.</description>
                        </item>
                        <item>
                            <name>[beforeServerSideSort]</name>
                            <description>Fires before the user tries to do a server-side sort action by clicking on a column heading.</description>
                        </item>
                        <item>
                            <name>[afterServerSideSort]</name>
                            <description>Fires after the user does a server-side sort action by clicking on a column heading. Direction is 'a' or 'd'.</description>
                        </item>
                        <item>
                            <name>[onSwipe]</name>
                            <description>Fires when the user swipes (left, right, up or down) on a row in the List.</description>
                        </item>
                        <item>
                            <name>[onScroll]</name>
                            <description>Fires when the List is scrolled.</description>
                        </item>
                        <item>
                            <name>[onPullRelease]</name>
                            <description>Fires when the user 'pulls' the List beyond an end point (i.e. top, bottom, left or right edge) of the List and then releases while the List is in a 'pulled' state (allowing the List to animate back to its natural position).</description>
                        </item>
                        <item>
                            <name>[onPull]</name>
                            <description>Fires repeatedly while the user is 'pulling' the List beyond an end point (i.e. top, bottom, left or right edge) of the List.</description>
                        </item>
                        <item>
                            <name>[onPullEnd]</name>
                            <description>Fires after the user has started 'pulling' a List beyond an end point, when the user restores the List to its 'non-pulled' state.</description>
                        </item>
                        <item>
                            <name>[onNavigate]</name>
                            <description>Fires when after List has been navigated (i.e. scrolled).</description>
                        </item>
                        <item>
                            <name>[afterSearchComplete]</name>
                            <description>Fires after the user submits the List's Search Part to execute a search of the records in the List.</description>
                        </item>
                        <item>
                            <name>[beforeSearch]</name>
                            <description>Fires before the user submits the List's Search Part to execute a search of the records in the List.</description>
                        </item>
                        <item>
                            <name>[onSearchResultTooLarge]</name>
                            <description>Fires if the user executes a server-side search that returns too many records.</description>
                        </item>
                        <item>
                            <name>[onSearchResultTooLargeForLocalStorage]</name>
                            <description>Fires if a server-side search returns more data than the List control is configured to download.</description>
                        </item>
                        <item>
                            <name>[onBeforePersistToLocalStorage]</name>
                            <description>Fires before the List is persisted to Local Storage.</description>
                        </item>
                        <item>
                            <name>[onPersistToLocalStorage]</name>
                            <description>Fires after the List is persisted to Local Storage.</description>
                        </item>
                        <item>
                            <name>[onRestoreFromLocalStorage]</name>
                            <description>Fires after the List data has been restored from Local Storage.</description>
                        </item>
                        <item>
                            <name>[onListReady]</name>
                            <description>Fires after the List is ready and has been populated.</description>
                        </item>
                        <item>
                            <name>[localStorageEncryption]</name>
                            <description>Fires before data are written to Local Storage.</description>
                        </item>
                        <item>
                            <name>[localStorageDecryption]</name>
                            <description>Fires after data are read from Local Storage.</description>
                        </item>
                        <item>
                            <name>[afterRenderComplete]</name>
                            <description>Fires after the List has been completely rendered.</description>
                        </item>
                        <item>
                            <name>[beforeFetchMore]</name>
                            <description>Fires before an Ajax callback to fetch more records.</description>
                        </item>
                        <item>
                            <name>[afterFetchMore]</name>
                            <description>Fires after an Ajax callback to fetch more records has completed.</description>
                        </item>
                        <item>
                            <name>[beforePageNavigate]</name>
                            <description>Fires before an Ajax callback to navigate to a different page of records.</description>
                        </item>
                        <item>
                            <name>[afterPageNavigate]</name>
                            <description>Fires after an Ajax callback to navigate to a new page of records has completed.</description>
                        </item>
                        <item>
                            <name>[beforeRefreshRow]</name>
                            <description>Fires before an Ajax callback to refresh the current row in the List.</description>
                        </item>
                        <item>
                            <name>[afterRefreshRow]</name>
                            <description>Fires after an Ajax callback to refresh the current row in the List has completed.</description>
                        </item>
                        <item>
                            <name>[afterServerSideSummaryCompute]</name>
                            <description>Fires after the server-side summary values have been computed.</description>
                        </item>
                        <item>
                            <name>[afterClientSideSummaryCompute]</name>
                            <description>Fires after the client-side summary values have been computed.</description>
                        </item>
                        <item>
                            <name>[onBeforeListClear]</name>
                            <description>Fires before the lst data is cleared.</description>
                        </item>
                        <item>
                            <name>[onFocusOut]</name>
                            <description>Fires when the List or any element in the List looses focus.</description>
                        </item>
                        <item>
                            <name>[onListColumnSelectorChanged]</name>
                            <description>Fires after the user has made a selection in the List Columns Show/hide control. You can use this event to persist the List state.</description>
                        </item>
                        <item>
                            <name>[onResize]</name>
                            <description>Fires when the List is resized.</description>
                        </item>
                        <item>
                            <name>[onRowCheck]</name>
                            <description>Fires when a row is checked or unchecked in a List configured to display a checkbox selector column.</description>
                        </item>
                    </list>
                </case>
            </cases>
        </section>
        <section>
            <title>Detail View Events</title>
            <description>
                <p>Detail View events are triggered when interacting with the Detail View for the List. Detail View events are only available if the List [has a detail view].</p>
            </description>
            <list>
                <item>
                    <name-title>Event</name-title>
                    <description-title>Description</description-title>
                </item>
                <item>
                    <name>[afterCancelBatch]</name>
                    <description>If the List is being synchronized in batches, fires after the user has clicked the 'Cancel' button to stop sending batches of records to the server to synchronize.</description>
                </item>
                <item>
                    <name>[afterDeleteOrphanMediaFiles]</name>
                    <description>Fires after orphaned media files have been deleted.</description>
                </item>
                <item>
                    <name>[afterDeleteRow]</name>
                    <description>Fires after the user has deleted a row in a List.</description>
                </item>
                <item>
                    <name>[afterDetailViewPopulate]</name>
                    <description>Fires after the user has selected a row in a List and the List's Detail View has been populated.</description>
                </item>
                <item>
                    <name>[afterListRowSelectCancelled]</name>
                    <description>Detail View for the orderDetail List is in another Panel, this event can give focus to the Panel so that the user can save the dirty Detail View record.</description>
                </item>
                <item>
                    <name>[afterMediaFilesDownloaded]</name>
                    <description>Fires after media files have been downloaded.</description>
                </item>
                <item>
                    <name>[afterMediaFilesUploaded]</name>
                    <description>Fires after all media files (photos, video, audio recordings) have been uploaded to the server, or Amazon S3 when data are synchronized.</description>
                </item>
                <item>
                    <name>[afterNewRecord]</name>
                    <description>Fires after the new record has been displayed in the DetailView form.</description>
                </item>
                <item>
                    <name>[afterRefreshListIncremental]</name>
                    <description>Fires after an incremental List refresh completes.</description>
                </item>
                <item>
                    <name>[afterResetRow]</name>
                    <description>Fires after the user has undone edits to a row of data in the List.</description>
                </item>
                <item>
                    <name>[afterSynchronizeList]</name>
                    <description>Fires after the data in the List has been synchronized.</description>
                </item>
                <item>
                    <name>[afterSynchronizeListBatch]</name>
                    <description>If the List is being synchronized in batches, fires when a batch is completed. If the function returns false, the next batch (if any) will not be sent. The data in the e object that is passed in will allow you to create your own progress counter. The countObject parameter in the e object has statistics on the current batch (e.g. number of records with errors, etc.) To see all of the properties in e.countObject you can add this to your code: alert(JSON.stringify(e.countObject)).</description>
                </item>
                <item>
                    <name>[afterSynchronizeListBatchEnd]</name>
                    <description>If the List is being synchronized in batches, fires after the last batch has completed. A possible use case for this event is to allow you to close a window you might have opened to show the synchronization progress. The countObject parameter in the e object has statistics on the current batch (e.g. number of records with errors, etc.) To see all of the properties in e.countObject you can add this to your code: alert(JSON.stringify(e.countObject)).</description>
                </item>
                <item>
                    <name>[afterUndoEdits]</name>
                    <description>Fires after the user has undone edits to the List Detail View.</description>
                </item>
                <item>
                    <name>[afterUpdateList]</name>
                    <description>Fires after the user updates the List with edits that have been made to the List Detail View.</description>
                </item>
                <item>
                    <name>[beforeCRUDExecute]</name>
                    <description>Fires before a SQL statement that is part of a List sync operation is executed.</description>
                </item>
                <item>
                    <name>[beforeDeleteOrphanMediaFiles]</name>
                    <description>Fires before any orphaned media files are deleted from the local file system on the device.</description>
                </item>
                <item>
                    <name>[beforeDetailViewPopulate]</name>
                    <description>Fires after the user has selected a row in a List, but before the List's Detail View is populated.</description>
                </item>
                <item>
                    <name>[beforeMediaFilesDownloaded]</name>
                    <description>Fires before media files are downloaded.</description>
                </item>
                <item>
                    <name>[beforeMediaFilesUploaded]</name>
                    <description>Fires before any media files (photos, video, audio recordings) are uploaded to the server, or Amazon S3 when data are synchronized.</description>
                </item>
                <item>
                    <name>[beforeSynchronizeListBatchStart]</name>
                    <description>If the List is being synchronized in batches, fires before the first batch is submitted. The purpose of this event is to allow you to open a window or set focus to a panel where the synchronization progress will be shown.</description>
                </item>
                <item>
                    <name>[canCancelBatch]</name>
                    <description>If the List is being synchronized in batches, fires if the user clicks the 'Cancel' button to stop sending batches of records to the server to synchronize. If the function returns false, then the synchronization is not cancelled.</description>
                </item>
                <item>
                    <name>[canDeleteRow]</name>
                    <description>Fires when the user tries to delete a row of data in the List. If function returns false, action is cancelled.</description>
                </item>
                <item>
                    <name>[canNewRecord]</name>
                    <description>Fires when the user tries to go to a new Detail View record. If the function returns false, action is cancelled.</description>
                </item>
                <item>
                    <name>[canResetRow]</name>
                    <description>Fires when the user tries to undo edits to a row of data in the List. If function returns false, action is cancelled.</description>
                </item>
                <item>
                    <name>[canSynchronizeList]</name>
                    <description>Fires when the user tries to synchronize the data in the List (by making an Ajax callback). If the function returns false, the action is cancelled. The data object is passed in as a member of the e object. If you set properties in e.data, you can override the values from the List that will be submitted to the server. If you set the e.data[rowNumber]._isDirty property of a particular row to false, then the data in that row will not be synchronized. The e object that is passed in includes batchSize, totalDirtyRows, and startingRow. If all of the data is not being submitted in batches, then the batch size is 0. To test if this is the first batch in a job test for batchSize > 0 and startingRow = 1.</description>
                </item>
                <item>
                    <name>[canUndoEdits]</name>
                    <description>Fires when the user tries to undo edits to the List Detail View form. If function returns false, action is cancelled.</description>
                </item>
                <item>
                    <name>[canUpdateList]</name>
                    <description>Fires when the user tries to update the List with edits that have been made to the List Detail View. If function returns false, action is cancelled. The data object is passed in as a member of the e.object. If you set properties in e.data, you can override the values that the user entered.</description>
                </item>
                <item>
                    <name>[hasClientSideValidationErrors]</name>
                    <description>The 'hasClientSideValidationErrors' event fires when the user tries to save Detail View edits back to the List and one or more controls in the Detail View has a client-side validation error.</description>
                </item>
                <item>
                    <name>[listReadyToPersist]</name>
                    <description>Fires when the list is ready to persist to storage.</description>
                </item>
                <item>
                    <name>[modeChanged]</name>
                    <description>Fires when the Detail View mode changes. The possible states of the 'mode' flag are: 'edit', 'enter' and 'search'.</description>
                </item>
                <item>
                    <name>[onMediaFilesUploadErrors]</name>
                    <description>Fires if there were any errors when uploading media files.</description>
                </item>
                <item>
                    <name>[onNoMediaFilesToFetch]</name>
                    <description>Fires when there are no media files to download.</description>
                </item>
            </list>
        </section>
        <section>
            <title>Custom Events</title>
            <description>
                <p>You can add your own custom events using [Template Items]. *[ui:Template Items]* are added to the List layout and support a variety of events, including click, double click, right click, mouse down, and mouse up. See [Template Items] to learn more.</p>
            </description>
            <figure>
                <title>Template Items tab</title>
                <alt>List Builder Template Items tab</alt>
                <link>images/templateItems.png</link>
            </figure>
        </section>
    </sections>
    <links>
        <link link="template%20items%20-%20a5-item%20attribute">Template Items</link>
        <link link="ux%20list%20builder%20list%20properties%20has%20detail%20view">has a detail view</link>
        <link link="ux%20list%20clientside%20event%20onbeforeitemdraw">onBeforeItemDraw</link>
        <link link="ux%20list%20clientside%20event%20onbeforelistdraw">onBeforeListDraw</link>
        <link link="ux%20list%20clientside%20event%20onitemdraw">onItemDraw</link>
        <link link="ux%20list%20clientside%20event%20onlistdraw">onListDraw</link>
        <link link="ux%20list%20clientside%20event%20oninitialize">onInitialize</link>
        <link link="ux%20list%20clientside%20event%20onbeforepopulate">onBeforePopulate</link>
        <link link="ux%20list%20clientside%20event%20onpopulate">onPopulate</link>
        <link link="ux%20list%20clientside%20event%20onbeforeaddrows">onBeforeAddRows</link>
        <link link="ux%20list%20clientside%20event%20onbeforeremoverows">onBeforeRemoveRows</link>
        <link link="ux%20list%20clientside%20event%20onbeforeupdaterow">onBeforeUpdateRow</link>
        <link link="ux%20list%20clientside%20event%20onaddrows">onAddRows</link>
        <link link="ux%20list%20clientside%20event%20onremoverows">onRemoveRows</link>
        <link link="ux%20list%20clientside%20event%20onupdaterow">onUpdateRow</link>
        <link link="ux%20list%20clientside%20event%20onselect">onSelect</link>
        <link link="ux%20list%20builder%20jsruntime%20properties%20onbeforeselect">onBeforeSelect</link>
        <link link="ux%20list%20clientside%20event%20afterselect">afterSelect</link>
        <link link="ux%20list%20clientside%20event%20ondblclick">onDblClick</link>
        <link link="ux%20list%20builder%20jsruntime%20properties%20onclick">onClick</link>
        <link link="ux%20list%20clientside%20event%20ontap">onTap</link>
        <link link="ux%20list%20clientside%20event%20ondbltap">onDblTap</link>
        <link link="ux%20list%20clientside%20event%20ondownhold">onDownHold</link>
        <link link="ux%20list%20clientside%20event%20onrightclick">onRightClick</link>
        <link link="ux%20list%20clientside%20event%20onfieldclick">onFieldClick</link>
        <link link="ux%20list%20clientside%20event%20onfielddblclick">onFieldDblClick</link>
        <link link="ux%20list%20clientside%20event%20onfieldrightclick">onFieldRightClick</link>
        <link link="ux%20list%20clientside%20event%20onfocus">onFocus</link>
        <link link="ux%20list%20clientside%20event%20onblur">onBlur</link>
        <link link="ux%20list%20clientside%20event%20afterajaxcallback">afterAjaxCallback</link>
        <link link="ux%20list%20clientside%20event%20beforeclientsidefilter">beforeClientSideFilter</link>
        <link link="ux%20list%20clientside%20event%20afterclientsidefilter">afterClientSideFilter</link>
        <link link="ux%20list%20clientside%20event%20beforeclientsidesort">beforeClientSideSort</link>
        <link link="ux%20list%20clientside%20event%20afterclientsidesort">afterClientSideSort</link>
        <link link="ux%20list%20clientside%20event%20beforeserversidesort">beforeServerSideSort</link>
        <link link="ux%20list%20clientside%20event%20afterserversidesort">afterServerSideSort</link>
        <link link="ux%20list%20clientside%20event%20onswipe">onSwipe</link>
        <link link="ux%20list%20clientside%20event%20onscroll">onScroll</link>
        <link link="ux%20list%20clientside%20event%20onpullrelease">onPullRelease</link>
        <link link="ux%20list%20clientside%20event%20onpull">onPull</link>
        <link link="ux%20list%20clientside%20event%20onpullend">onPullEnd</link>
        <link link="ux%20list%20clientside%20event%20onnavigate">onNavigate</link>
        <link link="ux%20list%20clientside%20event%20aftersearchcomplete">afterSearchComplete</link>
        <link link="ux%20list%20clientside%20event%20beforesearch">beforeSearch</link>
        <link link="ux%20list%20clientside%20event%20onsearchresulttoolarge">onSearchResultTooLarge</link>
        <link link="ux%20list%20clientside%20event%20onsearchresulttoolargeforlocalstorage">onSearchResultTooLargeForLocalStorage</link>
        <link link="ux%20list%20clientside%20event%20onbeforepersisttolocalstorage">onBeforePersistToLocalStorage</link>
        <link link="ux%20list%20clientside%20event%20onpersisttolocalstorage">onPersistToLocalStorage</link>
        <link link="ux%20list%20clientside%20event%20onrestorefromlocalstorage">onRestoreFromLocalStorage</link>
        <link link="ux%20list%20clientside%20event%20onlistready">onListReady</link>
        <link link="ux%20list%20clientside%20event%20localstorageencryption">localStorageEncryption</link>
        <link link="ux%20list%20clientside%20event%20localstoragedecryption">localStorageDecryption</link>
        <link link="ux%20list%20clientside%20event%20afterrendercomplete">afterRenderComplete</link>
        <link link="ux%20list%20clientside%20event%20beforefetchmore">beforeFetchMore</link>
        <link link="ux%20list%20clientside%20event%20afterfetchmore">afterFetchMore</link>
        <link link="ux%20list%20clientside%20event%20beforepagenavigate">beforePageNavigate</link>
        <link link="ux%20list%20clientside%20event%20afterpagenavigate">afterPageNavigate</link>
        <link link="ux%20list%20clientside%20event%20beforerefreshrow">beforeRefreshRow</link>
        <link link="ux%20list%20clientside%20event%20afterrefreshrow">afterRefreshRow</link>
        <link link="ux%20list%20clientside%20event%20afterserversidesummarycompute">afterServerSideSummaryCompute</link>
        <link link="ux%20list%20clientside%20event%20afterclientsidesummarycompute">afterClientSideSummaryCompute</link>
        <link link="uxlist%20onbeforelistclear%20event">onBeforeListClear</link>
        <link link="uxlist%20onfocusout">onFocusOut</link>
        <link link="ux%20list%20clientside%20event%20onlistcolumnselectorchanged">onListColumnSelectorChanged</link>
        <link link="ux%20list%20clientside%20event%20onresize">onResize</link>
        <link link="ux%20list%20clientside%20event%20onrowcheck">onRowCheck</link>
        <link link="ux%20list%20csevent%20aftercancelbatch">afterCancelBatch</link>
        <link link="ux%20list%20csevent%20afterdeleteorphanmediafiles">afterDeleteOrphanMediaFiles</link>
        <link link="ux%20list%20csevent%20afterdeleterow">afterDeleteRow</link>
        <link link="ux%20list%20csevent%20afterdetailviewpopulate">afterDetailViewPopulate</link>
        <link link="ux%20list%20csevent%20afterl">afterListRowSelectCancelled</link>
        <link link="ux%20list%20csevent%20aftermediafilesdownloaded">afterMediaFilesDownloaded</link>
        <link link="ux%20list%20csevent%20aftermediafilesuploaded">afterMediaFilesUploaded</link>
        <link link="ux%20list%20csevent%20afternewrecord">afterNewRecord</link>
        <link link="ux%20list%20csevent%20afterrefreshlistincremental">afterRefreshListIncremental</link>
        <link link="ux%20list%20csevent%20afterresetrow">afterResetRow</link>
        <link link="ux%20list%20csevent%20aftersynchronizelist">afterSynchronizeList</link>
        <link link="ux%20list%20csevent%20aftersynchronizelistbatch">afterSynchronizeListBatch</link>
        <link link="ux%20list%20csevent%20aftersynchronizelistbatchend">afterSynchronizeListBatchEnd</link>
        <link link="ux%20list%20csevent%20afterundoedits">afterUndoEdits</link>
        <link link="ux%20list%20csevent%20afterupdatelist">afterUpdateList</link>
        <link link="ux%20list%20csevent%20beforecrudexecute">beforeCRUDExecute</link>
        <link link="ux%20list%20csevent%20beforedeleteorphanmediafiles">beforeDeleteOrphanMediaFiles</link>
        <link link="ux%20list%20clientside%20event%20beforedetailviewpopulate">beforeDetailViewPopulate</link>
        <link link="ux%20list%20csevent%20beforemediafilesdownloaded">beforeMediaFilesDownloaded</link>
        <link link="ux%20list%20csevent%20beforemediafilesuploaded">beforeMediaFilesUploaded</link>
        <link link="ux%20list%20csevent%20beforesynchronizelistbatchstart">beforeSynchronizeListBatchStart</link>
        <link link="ux%20list%20csevent%20cancancelbatch">canCancelBatch</link>
        <link link="ux%20list%20csevent%20candeleterow">canDeleteRow</link>
        <link link="ux%20list%20csevent%20cannewrecord">canNewRecord</link>
        <link link="ux%20list%20csevent%20canresetrow">canResetRow</link>
        <link link="ux%20list%20csevent%20cansynchronizelist">canSynchronizeList</link>
        <link link="ux%20list%20csevent%20canundoedits">canUndoEdits</link>
        <link link="ux%20list%20csevent%20canupdatelist">canUpdateList</link>
        <link link="ux%20list%20csevent%20hasclientsidevalidationerrors">hasClientSideValidationErrors</link>
        <link link="ux%20list%20csevent%20listreadytopersist">listReadyToPersist</link>
        <link link="ux%20list%20csevent%20modechanged">modeChanged</link>
        <link link="ux%20list%20csevent%20onmediafilesuploaderrors">onMediaFilesUploadErrors</link>
        <link link="ux%20list%20csevent%20onnomediafilestofetch">onNoMediaFilesToFetch</link>
        <link link="ux%20list%20csevent">Events</link>
        <link link="ux%20list%20builder%20jsruntime%20properties">Javascript - Run Time</link>
        <link link="ux%20list%20builder%20jsrendertime%20properties">Javascript - Render Time</link>
    </links>
</page>