<page build="0">
    <shortlink>uxdropdownbox choicesprop</shortlink>
    <topic>Choices</topic>
    <description>Specify the choices that appear in the DropDownBox. Choices can be populated from the Client-side Data Cache.</description>
    <discussion>The Choices property lets you define the choices that will appear next to each DropdownBox.
      Clicking the [...] button next to Choices will open the Define Choices dialog. There are three options for how to define 
      the choices presented, Static, Dynamic, and Variable.
    </discussion>
    <sections>
        <section>
            <title>Defining Static Choices</title>
            <description>In this scenario you can manually enter the choices to show for the DropdownBox control.</description>
            <steps>
                <step>
                    <description>Click the [...] smart field button for the *[ui:Choices]* property to open the Define Choices dialog for a new or existing DropdownBox control.</description>
                    <figure>
                        <link>images/static4.png</link>
                    </figure>
                </step>
                <step>
                    <description>The Define Choices dialog will open. Check the "Static" radio control. </description>
                    <figure>
                        <link>images/static2.png</link>
                    </figure>
                </step>

                <step>
                    <description>Define a list of choices for the control. Separate each choice by placing it on a new line.</description>
                    <figure>
                        <link>images/static3.png</link>
                    </figure>
                </step>
                <step>
                    <description>Run the component in Live Preview. </description>
                    <figure>
                        <link>images/static.png</link>
                    </figure>
                    <note>If the control appears to be wrapping reopen the Controls page, highlight the DropdownBox control, and adjust the Width or Height settings under the Field Properties section of the Control Properties list.</note>
                </step>
            </steps>
        </section>
        <section>
            <title>Dynamic Choices</title>
            <description>The Dynamic option can be used to populate the control from a data source using an AlphaDAO connection. This is done as follows:</description>
            <steps>
                <step>
                    <description>Click the [...] smart field button for the *[ui:Choices]* property to open the Define Choices dialog for a new or existing DropdownBox control.</description>
                </step>
                <step>
                    <description>The Define Choices dialog will open. Select the Dynamic option.</description>
                    <figure>
                        <link>images/dyn.png</link>
                    </figure>
                </step>
                <step>
                    <description>Under the Data Source section of the Define choices dialog click the dropdown next to the "Data source type" property. Select AlphaDAO.</description>
                    <figure>
                        <link>images/dyn1.png</link>
                    </figure>
                </step>
                <step>
                    <description>Click the [...] button next to the AlphaDAO Connection string name. </description>
                    <figure>
                        <link>images/dyn2.png</link>
                    </figure>
                </step>
                <step>
                    <description>Choose "Use a names connection string" and click the Select button. Connect to the Northwind database and click OK and OK again.</description>
                    <figure>
                        <link>images/dyn3.png</link>
                    </figure>
                </step>
                <step>
                    <description>Click the [...] button next to the AlphaDAO SQL SELECT statement.</description>
                    <figure>
                        <link>images/dyn4.png</link>
                    </figure>
                </step>
                <step>
                    <description>Click the Select button. Choose the Customers table from the list of tables and click OK.</description>
                    <figure>
                        <link>images/dyn5.png</link>
                    </figure>
                </step>
                <step>
                    <description>Select the Countries field as the Field to display. Click OK and OK again.</description>
                    <figure>
                        <link>images/dyn6.png</link>
                    </figure>
                </step>
                <step>
                    <description>Run the component in Live Preview.</description>
                    <figure>
                        <link>images/dyn7.png</link>
                    </figure>
                </step>
            </steps>
        </section>
        <section>
            <title>Variable Choices</title>
            <description>An Xbasic variable can also be used to populate the DropdownBox control. The variable can be statically defined or dynamically computed using data from a web server, Node service, or other means. The Xbasic variable is defined in the server-side events for the component. The steps below describe how to create a variable and use it to populate a DropdownBox control:</description>
            <steps>
                <step>
                    <description>Open the UX Builder and then open the Events Server-side page.</description>
                    <figure>
                        <link>images/var.png</link>
                    </figure>
                </step>
                <step>
                    <description>In the Server-Side Events menu highlight the "onDialogInitialize"" event.</description>
                    <figure>
                        <link>images/var1.png</link>
                    </figure>
                </step>
                <step>
                    <description>Add the following code to the onDialog Initialize event:</description>
                    <example><![CDATA[e.rtc.variableDropdownBox = <<%str%
one
two
three
%str%]]></example>
                    <figure>
                        <link>images/var2.png</link>
                    </figure>
                    <note>Here we are defining a variable named "variableDropdownBox" and populating the list of choices as one, two, and three.</note>

                </step>
                <step>
                    <description>Click the [...] smart field button for the *[ui:Choices]* property to open the Define Choices dialog for a new or existing DropdownBox control.</description>
                    <figure>
                        <link>images/var4.png</link>
                    </figure>
                </step>
                <step>
                    <description>The Define Choices dialog will open. From the "Choices are:" menu select 'Variable'. </description>
                    <figure>
                        <link>images/var5.png</link>
                    </figure>
                </step>
                <step>
                    <description>Enter 'variableDropdownBox' as the variable name and click OK.</description>
                    <figure>
                        <link>images/var6.png</link>
                    </figure>
                </step>
                <step>
                    <description>Now go to Live Preview and run the component. You should see the list you defined appear as DropdownBox choices.</description>
                    <figure>
                        <link>images/varres.png</link>
                    </figure>
                </step>
            </steps>
        </section>
        <section build="7598">
            <title>Populating Choices Using JavaScript</title>
            <description>
                <p>To specify that you want to call a Javascript function to populate the Dropdown box, select the *[ui:Static]* option in the Choice builder and enter the special syntax:</p>
                <p>
                    <example><![CDATA[javascript:name_of_your_javascript_function]]></example>
                </p>
            </description>
            <figure>
                <title>A JavaScript function can be called to populate a DropDownBox</title>
                <alt>Define Choices dialog for a DropDownBox control with Static selected and javascript:dd1 specified in the static choices text area</alt>
                <link>images/dropdownboxes_javascript.jpg</link>
            </figure>
        </section>
        <section>
            <description>
                <p>Your Javascript function should return an array of choices. If you want the to specify different display and stored values, your function should return an array of arrays in which each array item is an array with the display value and the stored value. For example:</p>
                <p>
                    <example code="js"><![CDATA[function choices() {
    return [['alpha','A'],['beta','B'],['gamma','G']]
}]]></example>
                </p>
            </description>
        </section>
        <section build="4642">
            <title>Populating from the Client-side Data Cache</title>
            <description>
                <p>In mobile applications that are deployed as Cordova applications, or in static HTML applications using the Application Cache, the DropdownBox control is populated with data at the time the application is built.</p>
                <p>In many cases, it will be necessary to update the choices shown in the DropdownBox control with up-to-date data and to continue to use the most recent data available when the App is launched, even when no connection is available. To do this, you can specify the DropdownBox should be populated with data from the Client-side Data Cache.</p>
                <p>In order to indicate that data from the Client-side Data Cache should be used, set the first line of the static choices to the following:</p>
            </description>
            <example code="ui"><![CDATA[client-side-data-cache:itemName(displayDataColumn,storedValueColumn)]]></example>
        </section>
        <section>
            <description>
                <p> When the App is launched, if a connection is available, the Client-side Data Cache will be refreshed and the DropdownBox will be populated with fresh data. If no connection is available the first time the App is launched the choices you specify in the second and subsequent lines of the defined Static choices will be used.</p>
                <p> For example, assume you had a Client-side Data Cache item called Products and that this item had two columns, Description and Code. In order to populate the DropdownBox to use the Description field as the display value and the Code field as the stored value, you would use this directive in the first line of the Static Choices:</p>
            </description>
            <example code="ui"><![CDATA[client-side-data-cache:Products(Description,Code)]]></example>
        </section>
        <section>
            <description>
                <p>If you want the display value and stored value to be the same, then just specify the name of the display value column for the stored value.</p>
            </description>
            <example code="ui"><![CDATA[client-side-data-cache:itemName(displayColumn,storedValueColumn)]]></example>
        </section>
        <section>
            <description>
                <p>The image below shows how the choices in a DropdownBox control would be defined to read the data from a Client-side Data Cache item called weekdays.</p>
                <p>The choices shown starting on line two are the fallback choices that will be used if there is no connection available the first time the App is launched (which means that the Client-side Data cache cannot be populated).</p>
            </description>
            <!--Image is stored along side the Choices.xml file where this content is included-->
            <figure>
                <link>images/populatedropdownboxfromcache.jpg</link>
            </figure>
        </section>
        <section>
            <title>Videos</title>
        </section>
        <section>
            <videos>
                <title>Populating Choices in a DropdownBox Control Using JavaScript</title>
                <description>
                    <p>Typically, the choices in a Dropdown box control are either static or the result of a database query. However, you might want to dynamically populate the choices in a Dropdown box control using JavaScript.</p>
                    <p>In this video, we show how this can be done. We also show how you can implement cascading choices in a dropdown that is populated using JavaScript. The advantage of implementing cascading dropdownboxes using JavaScript is that the child dropdown boxes are populated without having to make an Ajax callback. So this technique will work in disconnected applications.</p>
                </description>
                <date>2021-03-29</date>
                <video>
                    <name>Watch Video</name>
                    <link>http://alphamediacapture.s3.amazonaws.com/videos/populatedropdownboxesusingjavascript.mp4</link>
                </video>
                <resources>
                    <resource>
                        <link>http://alphamediacapture.s3.amazonaws.com/videos/populate_dropdownboxes_using_javascript.zip</link>
                    </resource>
                </resources>
            </videos>
        </section>
    </sections>
    <links>
        <link href="/images/tools/ellipsesButton.png">...</link>
    </links>
</page>