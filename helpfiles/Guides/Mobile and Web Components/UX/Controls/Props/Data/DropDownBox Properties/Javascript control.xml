<page build="8245">
    <shortlink>dropdownbox jscontrol</shortlink>
    <topic parent="DropDownBox Properties" parentType="guide" elementName="Javascript control">Javascript control</topic>
    <description>Enables rendering a dropdown box control as a "Javascript control", which allows additional customization of the look of the dropdown box control and gives access to JavaScript methods to manipulate the choices in the control.</description>
    <discussion>
        <p>By default, the dropdown box control is rendered using the HTML input control (e.g. &lt;select&gt; &lt;option&gt;...&lt;/option&gt; ... &lt;/select&gt;). The default HTML input control is difficult to customize the look and feel. It also lacks JavaScript methods for repopulating the dropdown box options easily.</p>
        <p>The *[ui:Javascript control]* option converts the dropdown box control into a JavaScript dropdown box control. As a JavaScript control, Alpha Anywhere creates a JavaScript object you can use in client-side scripts to manipulate the options in the control. You also can also add custom CSS classes or inline-styles to customize the look of the dropdown box control.</p>
        <p>For example, in the images below, the dropdown box control has been rendered with a custom *[ui:In-line style]*.</p>
    </discussion>
    <sections>
        <section>
            <figure>
                <link>images/dropdownboxJS1.png</link>
            </figure>
        </section>
        <section>
            <description>
                <p>To enable the Javascript control option, check the *[ui:Javascript control]* property in the Property Sheet.</p>
            </description>
            <figure>
                <link>images/dropdownboxJS2.png</link>
            </figure>
        </section>
        <section>
            <description>
                <p>The *[ui:Settings]* property is shown when *[ui:Javascript control]* is checked. *[ui:Settings]* can be used to customize the look (i.e. CSS) for the dropdown box options.</p>
            </description>
            <figure>
                <link>images/jscontrol4.png</link>
            </figure>
        </section>
        <section>
            <title>Configuring Control Settings</title>
            <description>
                <p>Once enabled, you have access to the following options to configure the control:</p>
            </description>
            <cases>
                <case>
                    <title nested="2">Class name</title>
                    <description>
                        <p>Optional classes to apply to the control.</p>
                    </description>
                </case>
                <case>
                    <title nested="2">Disabled class name</title>
                    <description>
                        <p>Optional classes to apply to the control when it's disabled.</p>
                    </description>
                </case>
                <case>
                    <title nested="2">In-line style</title>
                    <description>
                        <p>Optional in-line styles to apply to the control.</p>
                    </description>
                </case>
            </cases>
        </section>
        <section>
            <title>Getting the Control's JavaScript Object</title>
            <description>
                <p>To get a pointer to the dropdown box's JavaScript object, use the [{dialog.object}.getControl()] method. For example:</p>
                <p>
                    <example code="js"><![CDATA[var dropdownObj = {dialog.object}.getControl("DROPDOWNBOX_1");
if (dropdownObj) {
    ' Object exists! Can call methods on it.
}]]></example>
                </p>
                <p>Once you have a pointer to the object, you can call methods on the object, such as the populate() method to repopulate the choices in the control.</p>
                <p>The following methods are available:</p>
                <p>
                    <list>
                        <item>
                            <name-title>Method</name-title>
                            <description-title>Description</description-title>
                        </item>
                        <item>
                            <name>*[js:populate()]*</name>
                            <description>
                                <p>Updates the control's choices. This method can be used to replace or add the control's options.</p>
                                <p>
                                    <example code="js"><![CDATA[var obj = {dialog.object}.getControl('DROPDOWNBOX2');
if (obj) {
    var arr = [];
    arr.push({"text":"Mon","value":"1"});
    arr.push({"text":"Tue","value":"2"});
    arr.push({"text":"Wed","value":"3"});
    arr.push({"text":"Thu","value":"4"});
    arr.push({"text":"Fri","value":"5"});
    arr.push({"text":"Sat","value":"6"});
    arr.push({"text":"Sun","value":"7"});
    
    var keep = false;
    var animate = true;
    
    obj.populate(arr,keep,animate);
    obj.refresh();
}]]></example>
                                </p>
                            </description>
                        </item>
                        <item>
                            <name>*[js:refresh()]*</name>
                            <description>
                                <p>Redraws the control. The *[js:refresh()]* method is usually called after repopulating the control's choices using the *[js:populate()]* method.</p>
                                <p>
                                    <example code="js"><![CDATA[var obj = {dialog.object}.getControl('DROPDOWNBOX2');
if (obj) {
    obj.refresh();
}]]></example>
                                </p>
                            </description>
                        </item>
                        <item>
                            <name>*[js:setDisabled()]*</name>
                            <description>
                                <p>Enables or disables the control. The control can also be enabled or disabled using the [{dialog.object}.setDisabled()] method.</p>
                                <p>
                                    <example code="js"><![CDATA[var obj = {dialog.object}.getControl('DROPDOWNBOX2');
if (obj) {
    if (Reflect.has({dialog.object}._myvars, 'dropdownEnabled') == false) {
        {dialog.object}._myvars.dropdownEnabled = true;
    }
    obj.setDisabled({dialog.object}._myvars.dropdownEnabled);
    {dialog.object}._myvars.dropdownEnabled = !{dialog.object}._myvars.dropdownEnabled;
}]]></example>
                                </p>
                            </description>
                            <tip>
                                <p>See *[extlink:Reflect (MDN)@https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect]* to learn more about this native built-in JavaScript object.</p>
                            </tip>
                        </item>
                        <item>
                            <name>*[js:setValue()]*</name>
                            <description>
                                <p>Sets the control's value. The value can also be set using the [{dialog.object}.setValue()] method.</p>
                                <p>
                                    <example code="js"><![CDATA[var obj = {dialog.object}.getControl('DROPDOWNBOX2');
if (obj) {
    var value = parseInt({dialog.object}.getValue('DROPDOWNBOX2'),10);
    value += 1;
    value = (value > 7)? 1:value;
    obj.setValue(value+"");
}]]></example>
                                </p>
                            </description>
                        </item>
                    </list>
                </p>
            </description>
            <note>
                <p>A dropdown box only has a JavaScript object when *[ui:Javascript control]* is enabled.</p>
            </note>
        </section>
        <section>
            <title>Videos</title>
        </section>
        <section>
            <videos>
                <title>Rendering RadioButton, CheckBox and DropDownBox as a Javascript Control</title>
                <description>
                    <p>By default, the RadioButton, CheckBox and DropDownBox controls are not Javascript controls (like the List control, for example) and as such, you can't call methods on the control to repopulate the choices shown in the control. You can however specify that these controls should be rendered as Javascript controls (which will then allow the choices in the control to be set using the control's .populate() method).</p>
                    <p>In this video, we show how a RadioButton control can be rendered as a Javascript control.</p>
                </description>
                <date></date>
                <video>
                    <name>Watch Video</name>
                    <link>https://www.youtube.com/watch?v=R5EFFRKJ6hE</link>
                </video>
                <resources>
                    <resource>
                        <link>http://alphamediacapture.s3.amazonaws.com/videos/radiobutton_javascriptControl.zip</link>
                    </resource>
                </resources>
            </videos>
        </section>
    </sections>
    <links>
        <link link="ux%20component%20setdisabled%20method">{dialog.object}.setDisabled()</link>
        <link link="ux%20component%20setvalue%20method">{dialog.object}.setValue()</link>
    </links>
</page>