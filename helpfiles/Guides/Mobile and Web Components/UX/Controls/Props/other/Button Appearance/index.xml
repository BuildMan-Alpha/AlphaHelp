<page>
    <shortlink>ux control properties other properties button appearance index</shortlink>
    <topic>Button Appearance</topic>
    <description>Properties for defining how the button is rendered.</description>
    <!--list:.-->
    <sections>
        <section>
            <title>Sub-theme</title>
            <description>
                <p>A sub-theme is a variation on the base style for a control. Click the [...] button to open the sub-theme picker. A list of available sub-themes for the control will be shown. All controls have a 'base' sub-theme if the UX Component uses a Version 4 style sheet.</p>
                <p>You can create your own sub-themes using the [Style sub-theme and CSS 'tweaks'] property.</p>
            </description>
        </section>
        <section>
            <title>Button layout</title>
            <description>
                <p>The layout of the button. The layout can be a combination of text and an image, text only, or image only:</p>
                <p>
                    <list bullet="true">
                        <item>
                            <name>Text only</name>
                        </item>
                        <item>
                            <name>Image only</name>
                        </item>
                        <item>
                            <name>Text followed by image</name>
                        </item>
                        <item>
                            <name>Image followed by text</name>
                        </item>
                        <item>
                            <name>Image above text</name>
                        </item>
                        <item>
                            <name>Text above image</name>
                        </item>
                        <item>
                            <name>Text left &amp; image right</name>
                        </item>
                        <item>
                            <name>Image left &amp; text right</name>
                        </item>
                    </list>
                </p>
            </description>
        </section>
        <section>
            <title>Has dropdown icon</title>
            <description>
                <p>If checked, adds a small dropdown arrow to the button. The dropdown icon is often used to indicate clicking the button will show a dropdown window.</p>
            </description>
        </section>
        <section>
            <title>Display as split button</title>
            <description>
                <p>If checked, the button and the dropdown icon are separated into two logical buttons. If you use this option, you should define your event handler in the 'onClick' rather than the 'click' event. You will then be able to refer to arguments[1] in your code to see if the user clicked on the dropdown icon or the button, arguments[1] will be set to either 'normal' or 'split'.</p>
                <p>This property is only available if *[ui:Has dropdown icon]* is enabled.</p>
            </description>
        </section>
        <section>
            <title>Button class</title>
            <description>
                <p>One or more classes applied to the button. Use &lt;None&gt; for no class. Use &lt;Default&gt; or blank for the default class.</p>
            </description>
        </section>
        <section>
            <title>Button class hover</title>
            <description>
                <p>One or more classes applied to the button when the mouse is hovering over the button. You can enter &lt;Default&gt; or leave blank to use the default class name. Specify &lt;None&gt; for no class. If you specify your own class name here you can prefix it with '+' to use the specified class in addition to the default class. E.g. *[css:+myHoverclass]*.</p>
            </description>
        </section>
        <section>
            <title>Button class pressed</title>
            <description>
                <p>One or more classes applied to the button when the user clicks on the button. You can enter &lt;Default&gt; or leave blank to use the default class name. Specify &lt;None&gt; for no class. If you specify your own class name here you can prefix it with '+' to use the specified class in addition to the default class. E.g. *[css:+myPressedclass]*.</p>
            </description>
        </section>
        <section>
            <title>Button class disabled</title>
            <description>
                <p>One or more classes applied to the button when the button is disabled. You can enter &lt;Default&gt; or leave blank to use the default class name. Specify &lt;None&gt; for no class. If you specify your own class name here you can prefix it with '+' to use the specified class in addition to the default class. E.g. *[css:+myDisabledclass]*.</p>
            </description>
        </section>
        <section>
            <title>Button inline style</title>
            <description>
                <p>CSS styles applied to the button using the style attribute.</p>
            </description>
        </section>
        <section>
            <title>Button text class</title>
            <description>
                <p>One or more css classes applied to the button text. You can enter &lt;Default&gt;, or leave blank, to use the default class name. Specifying &lt;None&gt; will result in no classes applied to the button.</p>
            </description>
        </section>
        <section>
            <title>Button text inline style</title>
            <description>
                <p>CSS styles applied to the button's text using the style attribute.</p>
            </description>
        </section>
        <section>
            <title>Image name</title>
            <description>
                <p>The image shown on the button if the button's layout is set to display an image.</p>
            </description>
        </section>
        <section>
            <title>Hover image name</title>
            <description>
                <p>The image shown on the button when the user hovers the mouse over the button.</p>
            </description>
        </section>
        <section>
            <title>Pressed image name</title>
            <description>
                <p>The image shown on the button when the user clicks the button.</p>
            </description>
        </section>
        <section>
            <title>Disabled image name</title>
            <description>
                <p>The image shown on the button when the button is disabled.</p>
            </description>
        </section>
        <section>
            <title>Image class</title>
            <description>
                <p>One or more css classes applied to the button's image. You can enter &lt;Default&gt;, or leave blank, to use the default class name. Specifying &lt;None&gt; will result in no classes applied to the image.</p>
            </description>
        </section>
        <section>
            <title>Image inline style</title>
            <description>
                <p>CSS styles applied to the button's image using the style attribute.</p>
            </description>
        </section>
        <section build="6999">
            <title>Show badge</title>
            <description>
                <p>If enabled, adds a notification badge to the button.</p>
            </description>
        </section>
        <section build="6999">
            <title>Badge settings</title>
            <description>
                <p>The Badge settings control the display of the button's badge. These settings are only available if *[ui:Show badge]* is enabled.</p>
            </description>
            <important>
                <p>While the property is available, badges are not supported for Docked Panel controller buttons, Panel Flow Collapse buttons, or Panel Navigation buttons (assigned to the Next and Previous card button properties in the *[ui:Navigation Buttons]* or *[ui:Parent Navigation Buttons]* setting.)</p>
            </important>
        </section>
        <section>
            <cases>
                <case>
                    <title nested="2">Class name</title>
                    <description>
                        <p>One or more classes to assign the badge. If the class sets the *[css:font-size]*, *[css:color]*, *[css:background]*, *[css:background-color]*, *[css:padding]*, *[css:border-radius]*, *[css:border]*, *[css:line-height]*, *[css:min-width]*, *[css:width]*, *[css:box-sizing]*, *[css:position]*, *[css:top]*, *[css:bottom]*, *[css:left]*, *[css:right]*, or *[css:transform]* attributes, you may need to use the *[css:!important]* directive. This is because the default styling for the badge is inlined in the badge's generated HTML. Because these properties are set inline, they take precedence over the attributes defined in the class. The *[css: !important]* CSS directive ensures that your class settings will be used. For example:</p>
                        <p>
                            <example code="css"><![CDATA[.badge {
    background: blue !important;
    border-radius: 0 !important;
    border: blue !important;
}]]></example>
                        </p>
                    </description>
                </case>
                <case>
                    <title nested="2">Style</title>
                    <description>
                        <p>Optional in-line style attributes to assign the badge.</p>
                    </description>
                </case>
                <case>
                    <title nested="2">Badge location - vertical</title>
                    <description>
                        <p>The vertical alignment of the badge. This can be *[ui:top]* or *[ui:bottom]*. </p>
                    </description>
                </case>
                <case>
                    <title nested="2">Badge location - horizontal</title>
                    <description>
                        <p>The horizontal alignment of the badge. This can be *[ui:left]* or *[ui:right]*.</p>
                    </description>
                </case>
                <case>
                    <title nested="2">Badge location - relative to edge</title>
                    <description>
                        <p>If checked, the badge will be displayed outside the button, relative to the location of the button's edge.</p>
                    </description>
                </case>
                <case>
                    <title nested="2">Offset</title>
                    <description>
                        <p>The distance in pixels between the edge of the button and the badge. The offset is applied relative to the horizontal and vertical edge.</p>
                        <p>This property is only available if *[ui:Badge location - relative to edge]* is unchecked.</p>
                    </description>
                </case>
                <case>
                    <title nested="2">Badge text</title>
                    <description>
                        <p>The text to show on the badge.</p>
                        <p>You can dynamically change the badge text at runtime using JavaScript:</p>
                        <p>
                            <example code="js"><![CDATA[var button = {dialog.object}.getControl("MY_BUTTON_ID");
if (button) {
    button.setBadge(34);
}]]></example>
                        </p>
                        <p>See [setBadge()] for more details.</p>
                    </description>
                </case>
                <case>
                    <title nested="2">Maximum number</title>
                    <description>
                        <p>If the badge value is a number, the maximum value to display before adding a "+" symbol after the number to indicate that the value is greater than the *[ui:Maximum number]*.</p>
                    </description>
                </case>
            </cases>
        </section>
        <section>
            <title>Videos</title>
            <videos>
                <title>How to Add a Badge to a Button</title>
                <description>
                    <p>A common UI pattern in applications is to add a badge to buttons to convey some information. For example, you might have a button that shows orders and a badge shown over the button would show how many orders have been received. You can add badges to standalone buttons and also to buttons that are shown in a Control Bar.</p>
                    <p>In this video, we show how to add a badge to a button and how to dynamically set the badge value.</p>
                </description>
                <date></date>
                <video>
                    <name>Watch Video</name>
                    <link>https://www.youtube.com/watch?v=RDf7QCfpSCY</link>
                </video>
                <resources>
                    <resource>
                        <link>http://alphamediacapture.s3.amazonaws.com/videos/badgeExample.zip</link>
                    </resource>
                </resources>
            </videos>
        </section>
    </sections>
    <links>
        <link link="api%20client%20api%20a5%20button%20setbadge%20method">setBadge()</link>
        <link link="ux properties style subtheme and tweaks">Style sub-theme and CSS 'tweaks'</link>
        <link href="/images/tools/ellipsesButton.png">...</link>
    </links>
    <see>
        <ref link="ux control properties other properties button properties">Button Properties</ref>
        <ref link="ux controls other controls button index">Button</ref>
        <link link="ux properties style subtheme and tweaks">Style sub-theme and CSS 'tweaks'</link>
        <link href="/images/tools/ellipsesButton.png">...</link>
    </see>
    <terms>button badge</terms>
</page>