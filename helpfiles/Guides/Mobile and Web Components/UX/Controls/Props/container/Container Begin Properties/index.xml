<page build="0">
    <shortlink>ux controls control properties containers container begin properties</shortlink>
    <topic>Container Begin Properties</topic>
    <description>Container Begin Properties are used with many of the container types available inside the [Container] option.</description>
    <discussion>
        <p>Containers are used to group controls together. The Container Begin Properties are used to configure much of the look and feel of the container. The options available will depend on the container's *[ui:Sub-type]* -- e.g. 'None', 'Panel Overlay', or 'Alignment'.</p>
    </discussion>
    <sections>
        <section>
            <title>Constrain javascript function</title>
            <description>
                <p>The *[ui:Constrain javascript function]* is the name of a JavaScript function to call to determine whether or not the user can tab or shift+tab out of a container. </p>
                <p>The function must return a *[js:true]* or *[js:false]* value. If the function returns *[js:true]*, the container is constrained and the user cannot tab out of the container.</p>
                <p>For example:</p>
                <p>
                    <example code="js"><![CDATA[function isConstrained() {
    // 'constrain' is a Logical checkbox in the UX component
    // This function checks the value of the checkbox.
    // If checked, returns true - the user cannot tab out of the container
    // If unchecked, returns false - the user can tab out of the container
    var checked = {dialog.object}.getValue('constrain');

    if (checked) { return true; }
    return false;
}]]></example>
                </p>
                <p>The *[ui:Constrain javascript function]* is available when the [Constrain tab key] property has been set to "Javascript".</p>
            </description>
        </section>
        <section>
            <title>Constrain tab key</title>
            <description>
                <p>The *[ui:Constrain tab key]* property can be enabled to prevent the user from tabbing out of a contained by setting the property to "Yes" or "Javascript":</p>
                <p>
                    <list>
                        <item>
                            <name>No</name>
                            <description>The default value. User can tab out of the container.</description>
                        </item>
                        <item>
                            <name>Yes</name>
                            <description>User cannot use the tab or shift+tab keys to tab out of the controls in the container.</description>
                        </item>
                        <item>
                            <name>Javascript</name>
                            <description>A JavaScript function is called to determine whether or not the user can tab out of the control. See [Constrain javascript function] for more information.</description>
                        </item>
                    </list>
                </p>
            </description>
            <tip>Using this feature you can constrain controls in a Panel Card by wrapping all of the controls in a container.</tip>
        </section>
        <section>
            <title>Container alignment</title>
            <description>
                <p>Specify how the content of the container should be aligned. Applies to the container content, not the container itself. Only applies if the width of the container is greater than the width of the content.</p>
            </description>
        </section>
        <section>
            <title>Container class</title>
            <description>
                <p>Specify the optional class name for the container.</p>
            </description>
        </section>
        <section build="5771">
            <title>Container content vertical alignment</title>
            <description>
                <p>If *[ui:Use CSS Flexbox]* is enabled (*[ui:Use CSS Flexbox]* is enabled automatically if you set the Container's alignment to 'Center' or 'Right'), you can set the vertical alignment of the controls in the container using the *[ui:Container Content Vertical Alignment]* property. The Container content vertical alignment property can be set to Top, Center, or Bottom.</p>
                <p>*[ui:Container content vertical alignment]* is only available for containers with a *[ui:Sub-type]* of 'None'.</p>
            </description>
            <figure>
                <title>A 'Center' aligned container with vertical alignment set to 'Top'</title>
                <link>images/contentverticalalignment2.gif</link>
            </figure>
        </section>
        <section>
            <figure>
                <title>A 'Center' aligned container with vertical alignment set to 'Middle'</title>
                <link>images/contentverticalalignment3.gif</link>
            </figure>
        </section>
        <section>
            <figure>
                <title>A 'Center' aligned container with vertical alignment set to 'Bottom'</title>
                <link>images/contentverticalalignment4.gif</link>
            </figure>
        </section>
        <section>
            <title>Container height</title>
            <description>
                <p>The *[ui:Height]* property defines the height of the container. The height is specified using CSS syntax. For example:</p>
                <p>
                    <example><![CDATA[3in]]></example>
                </p>
            </description>
        </section>
        <section build="7175">
            <title nested="2">panel.height</title>
            <description>
                <p>You can use the special *[ui:panel.height]* variable when specifying the height of a *[ui:Container]* that is inside a *[ui:PanelCard]*. *[ui:panel.height]* represents the height of the *[ui:PanelCard's]* body section (the section between the *[ui:PanelHeader]* and *[ui:PanelFooter]*). You can use *[ui:panel.height]* in an expression.</p>
                <p>For example:</p>
                <p>
                    <example><![CDATA[panel.height/2]]></example>
                </p>
                <p>This would set the *[ui:Container's]* height to half of the *[ui:PanelCard's]* height.</p>
            </description>
        </section>
        <section build="5244">
            <title nested="2">screen.height</title>
            <description>
                <p>In addition to values supported by CSS, you can also use the *[ui:screen.height]* variable to set the container's height:</p>
            </description>
            <example><![CDATA[screen.height]]></example>
            <important>You cannot use *[ui:screen.height]* when defining the in-line style for the container. You can only use screen.height in the container's *[ui:Height]* property.</important>
        </section>
        <section>
            <description>*[ui:screen.height]* will adjust the height of the container to fill the vertical space of the screen. It can also be used with a simple expression to set the height of the container to a portion of the total screen height. For example, the following expression sets the height of the container to 50% of the screen height:</description>
            <example><![CDATA[screen.height/2]]></example>
        </section>
        <section>
            <cases>
                <case>
                    <title nested="3">Using screen.height in Alignment Containers</title>
                    <description>If you use an Alignment container and you set the Container vertical alignment property to *[ui:Middle]* and you do NOT set the container height property, Alpha Anywhere will automatically set the container height property to *[ui:screen.height]*.</description>
                </case>
                <case>
                    <title nested="3">Videos</title>
                    <videos>
                        <title>Understanding the screen.height Property</title>
                        <description>
                            <p>When setting the height of a container you cannot use percentages. However, you use the special screen.height variable to represent 100% of the available height.</p>
                            <p>In this video we show how a container's height can be set using the screen.height property.</p>
                        </description>
                        <date>2018-08-03</date>
                        <video>
                            <name>Watch Video</name>
                            <link>https://www.viddler.com/v/4ca6b084</link>
                        </video>
                    </videos>
                </case>
            </cases>
        </section>
        <section>
            <title>Container ID</title>
            <description>
                <p>Specify a unique ID to identify the container. At run-time, the actual ID will automatically be converted to uppercase. If you want to include the component alias in the id, prefix the id '{dialog.componentName}'.</p>
            </description>
        </section>
        <section>
            <title>Container style</title>
            <description>
                <p>Specify the style for the container.</p>
            </description>
        </section>
        <section>
            <title>Container width</title>
            <description>
                <p>Specify the container width. Use CSS syntax. Example: 3in, 100px, 33%, etc.</p>
            </description>
        </section>
        <section>
            <title>Custom scroll indicator settings</title>
            <description>
                <p>You can customize the position and appearance of the scroll indicator that is shown when the container is scrolled.</p>
            </description>
        </section>
        <section>
            <title>Description</title>
            <description>
                <p>The description helps identify the container in the control list.</p>
            </description>
        </section>
        <section>
            <title>Drag scrolling axis</title>
            <description>
                <p>Specify the directions in which content scrolling is allowed.</p>
            </description>
        </section>
        <section>
            <title>Drag scrolling</title>
            <description>
                <p>Specify if the content of the container can be drag scrolled; for example when using a mobile device.</p>
            </description>
        </section>
        <section>
            <title>PanelOverlay bottom</title>
            <description>
                <p>Specify the distance of the overlay from the bottom edge of the Panel. If you specify a 'top' property as well, the overlay will be stretched.</p>
            </description>
        </section>
        <section>
            <title>PanelOverlay left</title>
            <description>
                <p>Specify the distance of the overlay from the left edge of the Panel. If you specify a 'right' property as well, the overlay will be stretched.</p>
            </description>
        </section>
        <section>
            <title>PanelOverlay right</title>
            <description>
                <p>Specify the distance of the overlay from the right edge of the Panel. If you specify a 'left' property as well, the overlay will be stretched.</p>
            </description>
        </section>
        <section>
            <title>PanelOverlay top</title>
            <description>
                <p>Specify the distance of the overlay from the top edge of the Panel. If you specify a 'bottom' property as well, the overlay will be stretched.</p>
            </description>
        </section>
        <section>
            <title>PanelOverlay is window</title>
            <description>
                <p>If the PanelOverlay is a window then it will only be shown when Javascript to show the window is executed. See Action Javascript action 'Show PanelOverlay Window'.</p>
            </description>
        </section>
        <section>
            <title>Prevent container float</title>
            <description>
                <p>By default all containers are set to 'float'. This option prevents the container from using the 'float' attribute in its CSS style. An example of when you might want to use this option is when the container has a client-side show/hide expression and the space taken by the container should be completely eliminated. When this option is checked, there will always be a break both before and after the container, regardless of the setting for the 'break' property in the corresponding 'Container End' item.</p>
            </description>
        </section>
        <section>
            <title>'Pull past end' settings and events</title>
            <description>
                <p>Specify if the user can drag the contents of the container beyond any of its boundaries. If enabled, the content will snap back to its natural position when the user releases, and 'pull' events, that you can define, are fired.</p>
            </description>
        </section>
        <section>
            <title>Spacing - above</title>
            <description>
                <p>Specify the space above the container. Use CSS syntax. E.g. 2in, 20px</p>
            </description>
        </section>
        <section>
            <title>Spacing - below</title>
            <description>
                <p>Specify the space below the container. Use CSS syntax. E.g. 2in, 20px</p>
            </description>
        </section>
        <section>
            <title>Spacing - left</title>
            <description>
                <p>Specify the space to the left of the container. Use CSS syntax. E.g. .2in, 20px</p>
            </description>
        </section>
        <section>
            <title>Spacing - right</title>
            <description>
                <p>Specify the space to the right of the container. Use CSS syntax. E.g. .2in, 20px</p>
            </description>
        </section>
        <section>
            <title>Stop drag scrolling event propogation</title>
            <description>
                <p>Specify if the scroll events should be forwarded to the parent container.</p>
            </description>
        </section>
        <section>
            <title>Sub-type</title>
            <description>
                <p>The container type. A container can be one of the following types:</p>
                <p>
                    <list>
                        <item>
                            <name-title>Type</name-title>
                            <description-title>Description</description-title>
                        </item>
                        <item>
                            <name>None</name>
                            <description>A regular container used to group controls together.</description>
                        </item>
                        <item>
                            <name>RepeatingSection</name>
                            <description>Used in data-bound UX Components to create master-detail data structures.</description>
                        </item>
                        <item>
                            <name>PanelHeader</name>
                            <description>Contains controls that will be rendered in the header of a Panel Card, Panel Layout, or Panel Navigator.</description>
                        </item>
                        <item>
                            <name>PanelFooter</name>
                            <description>Contains controls that will be rendered in the footer of a Panel Card, Panel Layout, or Panel Navigator.</description>
                        </item>
                        <item>
                            <name>ControlGroup</name>
                            <description>Used with older styles, such as iOS. Applies a 'mobile friendly' styling to controls with in the container: removes the border from edit controls and adds a horizontal line between controls within the group. The ControlGroup is not supported for version 4 (e.g. 'Alpha') or newer styles as newer styles have built-in mobile support.</description>
                        </item>
                        <item>
                            <name>ButtonGroup</name>
                            <description>Used with the button control. Renders two or more buttons as a button group.</description>
                        </item>
                        <item>
                            <name>SpinListGroup</name>
                            <description>Used with Spin List controls. Renders multiple Spin List controls as a single control.</description>
                        </item>
                        <item>
                            <name>Alignment</name>
                            <description>Left, center, or right aligns the controls in the container.</description>
                        </item>
                        <item>
                            <name>Injectible Content</name>
                            <description>A special container used to render the controls inside the container in another location -- such as within a disclosure.</description>
                        </item>
                        <item>
                            <name>PanelOverlay</name>
                            <description>Used with Panels. Displays the controls in the container over the other Panels in the component.</description>
                        </item>
                        <item>
                            <name>Window</name>
                            <description>Displays controls in the container in a pop-up window.</description>
                        </item>
                        <item>
                            <name>FlexLayout</name>
                            <description>Dynamically sizes the controls in the container.</description>
                        </item>
                        <item>
                            <name>AbsoluteLayout</name>
                            <description>Explicitly positions the controls in the container. Often used with a background image of a form to position edit controls (e.g. text boxes) over fields in the image.</description>
                        </item>
                        <item>
                            <name>NoFloat</name>
                            <description>Eliminates the div element that typically wraps all controls in a component. All controls in a NoFloat container are rendered one per line.</description>
                        </item>
                        <item>
                            <name>EditorSet</name>
                            <description>Contains one or more Editor containers.</description>
                        </item>
                        <item>
                            <name>Editor</name>
                            <description>Must be placed inside an Editor container. Contains one or more controls used to edit fields in a FormView control.</description>
                        </item>
                    </list>
                </p>
            </description>
        </section>
        <section build="5771">
            <title>Use CSS Flexbox</title>
            <description>
                <p>Container controls with a sub-type of 'None' allow the developer to set the content alignment to left, center, or right. If you select center or right, the way in which the content is aligned is done using CSS Flexbox. If you find that this option causes an unexpected change in your component's layout you can revert to the old method by unchecking the *[ui:Use CSS Flexbox]* property.</p>
                <p>*[ui:Use CSS Flexbox]* is only available for containers with a *[ui:Sub-type]* of 'None'.</p>
            </description>
        </section>
        <section>
            <title>Videos</title>
            <videos>
                <title>Containers</title>
                <description>
                    <p>In this video, we explain the various Container types available in a UX component.</p>
                </description>
                <video>
                    <name>Watch Video</name>
                    <link>https://www.viddler.com/v/cfb0c6e9</link>
                </video>
            </videos>
        </section>
        <section>
            <videos>
                <title>Understanding the 'Prevent Container Float' Property</title>
                <description>
                    <p>Or, "How to Eliminate Unwanted Vertical Space when a Client-side Show/Hide Expression Hides a Control."</p>
                    <p>(This video is aimed at advanced developers). When you use a client-side show/hide expression to show or hide a container, not all of the vertical space that is consumed by the container is removed when the container is hidden. This video explains how the Container's 'Prevent container float' property can be used to solve this problem.</p>
                </description>
                <video>
                    <name>Watch Video</name>
                    <link>https://www.viddler.com/v/ff75a2df</link>
                </video>
            </videos>
        </section>
        <section>
            <videos>
                <title>Hiding Controls on a UX Component and Showing Controls in a Pop-up Window</title>
                <description>
                    <p>This video shows how you can take certain controls on a UX component that would normally be visible when the UX component was run and hide them. When the user clicks a button to show the controls, the hidden controls are shown in a popup window. As shown in the video, all of the controls in a specified Container control are automatically hidden and only shown in the popup window on demand.</p>
                </description>
                <video>
                    <name>Watch Video</name>
                    <link>https://www.viddler.com/v/988fe79c</link>
                </video>
            </videos>
        </section>
        <section>
            <videos>
                <title>Fixed Position Content when Using Panels - 'PanelOverlay' Containers</title>
                <description>
                    <p>Normally, all controls in a UX component are positioned "relatively". However, when using Panels, there may be situations where you would like some content to be positioned in a fixed position. This is easily achieved by placing the content into a Container and then setting the container type to "PanelOverlay".</p>
                    <p>A "PanelOverlay" always "floats above" the rest of the content on the screen and has a fixed position relative to the top, left, bottom, and right of the visible Panel.</p>
                </description>
                <video>
                    <name>Watch Video</name>
                    <link>https://www.viddler.com/v/a4d8d49b</link>
                </video>
            </videos>
        </section>
        <section>
            <videos>
                <title>Drag Scrolling in a Section of the Screen</title>
                <description>
                    <p>Drag-scrolling is central to mobile applications. A common design requirement is to display long content in a scrollable section of the screen.</p>
                    <p>In this video, we show how you can put content in a Container control and then turn on drag-scrolling for the Container.</p>
                </description>
                <video>
                    <name>Watch Video</name>
                    <link>https://www.viddler.com/v/e502185d</link>
                </video>
            </videos>
        </section>
        <section>
            <videos>
                <title>Displaying Pop-up Windows and Overlays Using the 'Window' Container Sub-type</title>
                <description>
                    <p>Displaying content in pop-windows (also sometimes called "overlays") is a common requirement in web and mobile applications. This is easily done by wrapping the content you want to show in the popup window in a container with a sub-type of "Window".</p>
                    <p>In the first video, we show several examples of how this technique is used to show popup lists, maps, and forms (Note: In addition to the techniques shown in this video, you can also use the "Open a popup Ajax Window/Overlay" action in Action Javascript to display content in popup windows).</p>
                    <p>In the second video, we contrast the technique shown in this video with the "Open a popup Ajax Window" action in Action Javascript.</p>
                </description>
                <video>
                    <name>Watch Video</name>
                    <link>https://www.viddler.com/v/6c1b0937</link>
                </video>
                <video>
                    <name>Contrasting Methods for Opening a Window</name>
                    <link>https://www.viddler.com/v/3f123b87</link>
                </video>
                <resources>
                    <resource>
                        <link>https://www.ajaxvideotutorials.com/V12Videos/windowContainers.zip</link>
                    </resource>
                </resources>
            </videos>
        </section>
        <section>
            <videos>
                <title>Responsive Design - Dynamically Resizing Controls on Orientation or Window Size Change - Understanding the 'FlexLayout' Container</title>
                <description>
                    <p>A common design requirement for a UX component is for controls to dynamically resize when the screen size changes -- either because of a device orientation change or the browser window resizing. This can be done easily in Alpha Anywhere using the 'FlexLayout' container.</p>
                    <p>Controls in a FlexLayout container can be configured to have a width that is defined 'relative' to other controls in the container. In this video, we explain how to use the FlexLayout container.</p>
                </description>
                <video>
                    <name>Watch Video</name>
                    <link>https://www.viddler.com/v/44181b1e</link>
                </video>
            </videos>
        </section>
        <section>
            <videos>
                <title>Positioning Controls at Absolute Locations on the Screen using the WYSIWYG Builder - Understanding the 'AbsoluteLayout' Container</title>
                <description>
                    <p>By default, the UX component lays out controls placed on the component automatically, 'flowing' the controls from left to right, top to bottom. All controls are perfectly aligned. However, here are time when you need more precise control over the placement of controls. This is especially true when you want to align controls to a background image (such as an image of a PDF form).</p>
                    <p>In this video, we show how you can use the AbsoluteLayout container to set the absolute position and size of controls in a UX component.</p>
                </description>
                <video>
                    <name>Watch Video</name>
                    <link>https://www.viddler.com/v/bdeffe6c</link>
                </video>
            </videos>
        </section>
        <section>
            <videos>
                <title>Understanding the 'NoFloat' Container Sub-type</title>
                <description>
                    <p>By default, all controls in a UX component are wrapped in a DIV with a class name of *[css:A5CWLayout]*. This class adds a CSS float and padding so that the controls 'flow' automatically left to right, top to bottom, across the screen. If a control has a 'break' after it, a new 'line' is created. This automatic layout of the controls on a UX component makes it easy to design attractive, perfectly aligned forms.</p>
                    <p>However, if the padding that is automatically added to the controls is getting in the way of the effect you are trying to achieve, you may want to use a special 'NoFloat' container instead of a standard Container.</p>
                    <p>Watch this video to learn how the 'NoFloat' container works.</p>
                </description>
                <video>
                    <name>Watch Video</name>
                    <link>https://www.viddler.com/v/288f4e2d</link>
                </video>
            </videos>
        </section>
        <section>
            <videos>
                <title>Alignment Container</title>
                <description>
                    <p>The Alignment container makes it easy to Left, Center, or Right align a set of controls on a UX component.</p>
                </description>
                <video>
                    <name>Watch Video</name>
                    <link>https://www.viddler.com/v/dee147da</link>
                </video>
            </videos>
        </section>
        <section>
            <videos>
                <title>Understanding the screen.height Property</title>
                <description>
                    <p>When setting the height of a container you cannot use percentages. However, you use the special screen.height variable to represent 100% of the available height.</p>
                    <p>In this video, we show how a container's height can be set using the screen.height property.</p>
                </description>
                <date>2018-08-03</date>
                <video>
                    <name>Watch Video</name>
                    <link>https://www.viddler.com/v/4ca6b084</link>
                </video>
            </videos>
        </section>
    </sections>
    <links>
        <link href="#section1_Constrain%20javascript%20function">Constrain javascript function</link>
        <link href="#section1_Constrain%20tab%20key">Constrain tab key</link>
    </links>
    <see>
        <ref link="ux containers container implementing a panel overlay">Implementing a PanelOverlay</ref>
    </see>
</page>