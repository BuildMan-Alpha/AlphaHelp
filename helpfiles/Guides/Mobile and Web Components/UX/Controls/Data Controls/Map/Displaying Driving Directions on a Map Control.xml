<page>
    <shortlink>ux map control displaying driving directions on a map control</shortlink>
    <topic>Displaying Driving Directions on a Map Control</topic>
    <description>When you place a map on a UX Component you can call any of the various methods that map object exposes.
        There are quite a few different methods exposed by the map object. In this example we show how the .plotRoute() method can be used topic
        display a route and driving directions for a starting and ending address. 
    </description>
  
<sections>
<section>
    <description>This example is based on [this video], FP11_DLGMAP2, which can also be found in 
        the video library.</description>
        <note>If you are having trouble view a map control in Live View it may be because you need an [API key].</note>
</section>
<section>
    <title>Creating a Component that Displays Driving Directions</title>
    <steps>
        <step>
            <description>Open the UX builder.</description>
        </step>
          <step>
            <description>On the UX Controls page, in the Other Controls menu, click on the [Static Text] option to create a Static Text control.</description>
             <figure><title>Static Text control</title><link>images/route11.png</link></figure>
        </step>
           <step>
            <description>Go to the Static text property in the control properties menu.</description>
            <figure><link>images/route12.png</link></figure>
        </step>
           <step>
            <description>Add the following div to the Static text property. It should now look like this</description>
            <example><![CDATA[<div id="routePanelId" style="width: 5in; 6in; overflow:auto;">directions</div>]]></example>
         <figure><link>images/route13.png</link></figure>
        </step>
        <step>
            <description>Add a textbox control to the component. Give the control the name starting_address</description>
            <figure><link>images/route.png</link></figure>
        </step>
           <step>
            <description>In Field properties, set the Default value property to the default address you want to start at.</description>
            <example>255 commonwealth ave, boston ma</example>
            <figure><link>images/route2.png</link></figure>
        </step>
           <step>
            <description>Create a second textbox control named ending_address.</description>
            <figure><link>images/route4.png</link></figure>
        </step>
           <step>
            <description>In Field properties, set the Default value property to the default address that you want to end at.</description>
          <example>36 bigelow st, cambridge ma 02139</example>
           <figure><link>images/route3.png</link></figure>
        </step>
           <step>
            <description>Add a button control to the UX component and name it 'Get Directions'.</description>
            <figure><link>images/route5.png</link></figure>
        </step>
           <step>
            <description>Highlight the button control and, in the Javascript section of the properties list, click the [...]
                button next to the OnClick event. </description>
                <cases>
                    <case>
                        <figure><title>Added Button</title><link>images/route6.png</link></figure>
                    </case>
                     <case>
                        <figure><title>OnClick Event property</title><link>images/route7.png</link></figure>
                    </case>
                    
                </cases>
                
                
            
        </step>
           <step>
            <description>Add the following code to the onClick event after selecting 'Text mode' as the editing mode. Click 'Save' once you have added the code.</description>
            <example><![CDATA[var a1 = {dialog.Object}.getValue('starting_address');
                var a2 = {dialog.Object}.getValue('ending_address');
                
                var m1 = {dialog.Object}.getControl('M1');
                m1.plotRoute(a1,a2);
            ]]></example>
            <cases>
                <case>
                    <figure><title>Text mode</title><link>images/route8.png</link></figure>
                </case>
                
  <case>
       <note>This code first reads the value of starting address field and stores it in variable called a1.
                Then it reads the value of the ending_address and puts it in a variable called a2. Then it gets 
                a pointer to the map control M1, the variable name that we will assign to the map control when we put it on the dialog.
                With a pointer to the map control, the component can now call the plotRoute() method for that control.
                To gain access to all of the methods that the map control has you can click the 'Insert UX component method' button
                at the bottom of the screen. To see only map related methods type map into the filter bar.</note>
  </case>
  <case>
     <figure><title>Add methods to your code</title><link>images/route9.png</link></figure>
  </case>
            
           <case>
               
           </case>
            <case>
                <note>In this code the location in the plot route method were entered as actual addresses, represented by variables a1 and a2, but we could also have used variables representing latitude and longitude.</note>
            </case>
            
                      </cases>
        </step>
           <step>
            <description>From the Data controls menu add a map control to you component. Give this map control the name 'm1'.</description>
            <figure><title>Map control</title><link>images/route10.png</link></figure>
        </step>

        <step>
            <description>Now run the component in Live Preview and click the 'Get Directions Button'</description>
             <figure><link>images/route14.png</link></figure>
        </step>
        
    </steps>
    
    
</section>
<section>
    <description>Hint: If you want to add a reverse direction button simply add another button control named "Return Trip"
        and enter the exact same code to the OnClick Event that you did with the first control. In the last line of the Javascript...
</description>
        <example><![CDATA[m1.plotRoute(a1,a2); ]]></example>
    
</section>
<section>
    <description>swap the a1 and a2 variables so the method looks like this...</description>
    <example><![CDATA[m1.plotRoute(a2,a1); ]]></example>
</section>

      
</sections>

<links>
    <link href="https://www.viddler.com/v/7758d374">this video</link>
    <link href="/images/tools/ellipsesButton.png">...</link>
    <link link="ux map control Getting a Google Maps Javascript API Key">API key</link>
</links>
</page>