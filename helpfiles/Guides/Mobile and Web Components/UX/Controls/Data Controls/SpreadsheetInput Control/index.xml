<page build="4622">
    <shortlink>ux control spreadsheetinput</shortlink>
    <topic>SpreadsheetInput Control</topic>
    <description>
        <p>Displays a spreadsheet style grid for editing values.</p>
    </description>
    <discussion>
        <p>The SpreadsheetInput Control allows you to display a spreadsheet style grid of cells in which the user can enter/edit data. The spreadsheet columns can be resized and also reordered.</p>
        <p>For example, in the image below, a SpreadsheetInput Control has been defined with 3 columns and 5 rows. The user can use keyboard navigation (tab, shift-tab, up and down ) to move between the cells in the control.</p>
        <p>When the UX is submitted, the data in the control is submitted as a JSON string.</p>
    </discussion>
    <sections>
        <section>
            <figure>
                <link>images/ssinput1.gif</link>
            </figure>
        </section>
        <section>
            <description>
                <p>For example, if the control had been filled in as shown below:</p>
            </description>
            <figure>
                <link>images/spreadsheetinput20.gif</link>
            </figure>
        </section>
        <section>
            <description>
                <p>then, when the UX was submitted, the data submitted for the SpreadsheetInput control would be as string with this value:</p>
            </description>
            <example code="js"><![CDATA[ "[{"field1":"alpha","field2":"beta","field3":""},{"field1":"","field2":"","field3":"gamma"}]"]]></example>
        </section>
        <section>
            <description>
                <p>To, add a SpreadsheetInput control to a UX, select the [More..] control from the Data Controls section of the UX toolbox.</p>
            </description>
            <figure>
                <link>images/spreadsheetInput30.jpg</link>
            </figure>
        </section>
        <section>
            <description>
                <p>Then select the SpreadsheetInput control from the list.</p>
            </description>
            <figure>
                <link>images/ssinput2.jpg</link>
            </figure>
        </section>
        <section>
            <description>
                <p>To configure the control, click the smart field for the Control properties.</p>
            </description>
            <figure>
                <link>images/ssinput3.gif</link>
            </figure>
        </section>
        <section>
            <description>
                <p>This will open the genie where you can configure the control.</p>
            </description>
            <figure>
                <link>images/ssinput50.jpg</link>
            </figure>
        </section>
        <section>
            <description>
                <p>The most important property to configure is the Column definitions property. This property allows you to define the columns shown in the SpreadsheetInput control.</p>
                <p>Click the smart field to open the editor, as shown in the image below.</p>
            </description>
            <figure>
                <link>images/ssinput5.jpg</link>
            </figure>
        </section>
        <section>
            <description>
                <p>You can add columns one at a time by clicking the Add Column button. You can click the Quick Select using Genie hyperlink to add columns to match the fields in a SQL table.</p>
                <p>The onNavigate property allows you to specify Javascript code to execute when a cell in the control gets focus.</p>
            </description>
        </section>
        <section>
            <title>Defining Row Prefixes and Suffixes</title>
            <description>
                <p>You can define row prefixes (i.e. row labels) and row suffixes so that the control looks even more like a spreadsheet. The prefix displays at the left side of each row and the suffix displays at the right edge of each row. For example, in the image below a prefix has been defined to show the row number. </p>
            </description>
            <figure>
                <link>images/spreadsheetinput21.gif</link>
            </figure>
        </section>
        <section>
            <description>
                <p>Here is how the control is configured to show the prefix:</p>
            </description>
            <cases>
                <case>
                    <description>
                        <p>The Has row prefix (label) property is checked.</p>
                        <p>The Row prefix HTML is a defined using Javascript code that can reference row - the zero based row number and data - the array of data with which the control is populated. To show the row number as the row prefix, the Javascript for the Row prefix HTML is set to:</p>
                    </description>
                    <example code="js"><![CDATA[return (row + 1);]]></example>
                </case>
                <case>
                    <description>
                        <p>The Width property is set to 50px to set the width of the prefix column. </p>
                        <p>The Style property is set to font-size: 75%; text-align: right; to make the font slightly smaller than the text in the input control and also to right align the text in the row labels.</p>
                    </description>
                </case>
            </cases>
            <figure>
                <link>images/ssInput11.jpg</link>
            </figure>
        </section>
        <section>
            <title>Methods</title>
            <description>
                <p>Since the SpreadsheetInput control is a standard UX Data Control, you can use the {dialog.object}.setValue() method to populate the cells in the control with data and the {dialog.object}.getValue() method to get the data in the control. When you use these methods, the value is a JSON string.</p>
                <p>For example, if the SpreadsheetInput  control has 3 columns (field1, field2 and field3), you could use the following Javascript to populate the control:</p>
            </description>
            <example code="js"><![CDATA[var _data = [
    {field1: 'alpha', field2: 'beta'},
    {field2: 'gamma', field3: 'delta'},
    {field3: 'epsilon'}
];

var _string = JSON.stringify(_data);
{dialog.object}.setValue('mySpreadsheetControl',_string);]]></example>
        </section>
        <section>
            <cases>
                <case>
                    <title nested="2">.setColumnAndPopulate() Method</title>
                    <description>
                        <p>You can also dynamically change the columns shown in the control to match the columns in some data with which you want to populate the control. For example, say that the SpreadsheetInput control was initially configured to show a single column (say 'Field1') and you wanted to populate it with the the following data:</p>
                    </description>
                    <example code="js"><![CDATA[[
    {firstname: 'John', lastname: 'Smith', city: 'London'},
    {firstname: 'Harry', lastname: 'Jones', city: 'Boston'},
    {firstname: 'Winston', lastname: 'Flowers', city: 'Harare'}
]]]></example>
                </case>
                <case>
                    <description>
                        <p>You can call the control's .setColumnsAndPopulate() method.</p>
                        <p>For example:</p>
                    </description>
                    <example code="js"><![CDATA[var obj = {dialog.object}.getControl('mySpreadsheetControl');

var _data = [
    {firstname: 'John', lastname: 'Smith', city: 'London'},
    {firstname: 'Harry', lastname: 'Jones', city: 'Boston'},
    {firstname: 'Winston', lastname: 'Flowers', city: 'Harare'}
]

obj.setColumnsAndPopulate(_data);]]></example>
                </case>
                <case>
                    <description>
                        <p>The columns shown in the control will now be 'firstname', 'lastname' and 'city'.</p>
                    </description>
                </case>
                <case>
                    <title nested="2">.getState() and .setState() Methods</title>
                    <description>
                        <p>Since the columns in the Spreadsheet input control are resizeable and reorderable, you might want to capture the state of the Spreadsheet input control's column layout so that you can restore it the next time the user runs the component.</p>
                        <p>For example</p>
                    </description>
                    <example code="js"><![CDATA[var obj = {dialog.object}.getControl('myspreadsheetcontrol_1');
'get the spreadhseet control state as a JSON string
var json = obj.getState();

'store in local storage
localStorage.setItem('spreasheet_01_State',json);]]></example>
                </case>
                <case>
                    <description>
                        <p>Then, to restore the state</p>
                    </description>
                    <example code="js"><![CDATA[var json = localStorage.getItem('spreasheet_01_State');
var obj = {dialog.object}.getControl('myspreadsheetcontrol_1');
obj.setState(json)]]></example>
                </case>
            </cases>
        </section>
        <annotations>/Guides/Mobile and Web Components/UX/Controls/More/inserting.xml</annotations>
        <section>
            <title>Videos</title>
            <videos>
                <title>Using the Spreadsheet Input Control</title>
                <description>
                    <p>In certain applications where a user needs to input data quickly, a spreadsheet style data entry control can be very efficient.</p>
                    <p>In this video we show how you can add a Spreadsheet Input control to a UX component.</p>
                </description>
                <date>2017-10-02</date>
                <video>
                    <name>Watch Video</name>
                    <link>https://www.viddler.com/v/8a63e6e2</link>
                </video>
                <resources>
                    <resource>
                        <link>https://www.ajaxvideotutorials.com/V12Videos/ssdemo.zip</link>
                    </resource>
                </resources>
            </videos>
        </section>
    </sections>
</page>