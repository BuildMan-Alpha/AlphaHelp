<page build="4478">
    <shortlink>ux controls data controls multiselect token</shortlink>
    <topic>Multi-select Token Control</topic>
    <description>The Multi-select Token control is a dropdown control with an auto-complete list that inserts tokens that can be removed by clicking an 'x' button on the token or using the delete or backspace key on the keyboard.</description>
    <discussion>
        <p>The Multi-select Token control is similar to the Edit-combo control and the Auto-suggest control. However, the selected values are displayed as 'tokens' (as shown in the image below where 'Belgium', 'Brazil' and 'Canada' are selected). A selected value can be removed by clicking on the 'x' icon in the token.</p>
    </discussion>
    <sections>
        <section>
            <figure>
                <link>images/multiselecttokens_1.gif</link>
            </figure>
        </section>
        <section>
            <description>
                <p>The user can select values from a pick list as shown in the image below. The pick-list is automatically displayed when the user types in the input control or clicks on the optional down arrow. The user can insert a token by selecting a choice from the dropdown or by typing the value into the control and then pressing the Enter key.</p>
                <p>Tokens are removed by clicking the 'x' icon or by placing the cursor after a token and using the Backspace key.</p>
            </description>
            <figure>
                <link>images/mstoken2.jpg</link>
            </figure>
        </section>
        <section>
            <description>
                <p>The choices for the pick-list can be statically defined as a fixed list of options or dynamically populated using a SQL query or Xbasic function.</p>
            </description>
        </section>
        <section>
            <title>How to Add a Multi-select Token Control to a UX Component</title>
            <description>
                <p>To add a Multi-select Token control to a UX component, select the *[ui:[More...]]* item in the *[ui:Data Controls]* section of the UX toolbox.</p>
            </description>
            <figure>
                <link>images/mst_more.jpg</link>
            </figure>
        </section>
        <section>
            <description>
                <p>The Multi-select Token control is a Data Control. This means it can be used with the UX Component's [.getValue()] and a [.setValue()] methods. When the UX component is submitted, the Multi-select Token control's value is submitted as a comma delimited list of values.</p>
                <p>For example, if there are three tokens selected with values of 'USA', 'UK' and 'Canada', the value submitted is *[xb:'USA,UK,Canada']*.</p>
                <p>To set the value in a Multi-select Token control, the values must be specified as an array. For example:</p>
            </description>
            <example code="js"><![CDATA[{dialog.object}.setValue('MY_MULTISELECT_TOKEN_CONTROL',['USA','UK','Canada']);]]></example>
        </section>
        <section>
            <title>Setting the Multi-Select Token Control Properties</title>
            <description>
                <p>To set the properties of a Multi-select Token control, click the [...] smart field button for the *[ui:Control properties]* property in the Property sheet.</p>
                <p>The configuration genie window is displayed, as shown below:</p>
            </description>
            <figure>
                <link>images/mst_propsheet.jpg</link>
            </figure>
        </section>
        <section>
            <cases>
                <case>
                    <title nested="2">Method for defining choices</title>
                    <description>
                        <p>The *[ui:Method for defining choices]* specifies how the data for the choices displayed by the control are obtained. Choices can be specified as a static list of choices, a SQL query, or an Xbasic function. The SQL query can be the name of a table in a database or a custom SQL statement (such as a call to a stored procedure.)</p>
                        <p>If the *[ui:FieldsFromTable]* option is used, two columns from the table must be selected to define the display value and stored value. The first column (Value column) defines the value for the selected token. The second column (Display column) is the value shown in the input control for the Token. An optional 3rd column can also be selected - *[ui:List Display column]*. This property defines the display value shown in the choice list. The *[ui:Display]* property of each choice will be used if no *[ui:List Display column]* is specified.</p>
                        <p>The query for a SQL statement must return a result set with either 2 or 3 columns. The first column must have a name of '*[sql:value]*', the second column must have a name of '*[sql:display]*' and the optional 3rd column must have a name of '*[sql:listDisplay]*'. For example:</p>
                    </description>
                    <example code="sql"><![CDATA[SELECT contactname as value, customerId as display from Customers]]></example>
                </case>
                <case>
                    <title nested="2">Display icon to open choice list</title>
                    <description>
                        <p>When the user begins to type in the control, the choice list is opened and is filtered on the text the user has typed. This is similar to how an *[ui:auto-suggest]* control works. The *[ui:Display icon to open choice list]* option controls whether or not an icon to open the choice list is shown. The icon can be displayed on the left or right side of the input control.</p>
                    </description>
                </case>
                <case>
                    <title nested="2">User must select from choices</title>
                    <description>
                        <p>If un-checked, the user can type in any value into the control. When the user presses Enter, the text the user has typed is added to the token list. If this property is checked, if the user types in a value and then presses Enter and the text the user has typed is not in the choice list (i.e. is not the *[ui:value]* property for one of the choices in the list), a new token is *[not]* added.</p>
                    </description>
                </case>
                <case>
                    <title nested="2">Icons</title>
                    <description>
                        <p>The icons used to display the choice list and to delete a previously selected token can be customized using the *[ui:Icons]* property. The Multi-select Token control only supports using SVG icons.</p>
                    </description>
                </case>
                <case>
                    <title nested="2">Token CSS type</title>
                    <description>
                        <p>The *[ui:Token CSS type]* property can be used to customize the appearance of the selected tokens. The *[ui:Token CSS type]* can either be set to *[ui:Default]* or *[ui:Custom]*. If *[ui:Default]* is selected, tokens can be configured to have a square or round border using the *[ui:Token border style]* property. In the images above, the border style has been set to rounded.</p>
                    </description>
                </case>
                <case>
                    <title nested="2">onChange</title>
                    <description>
                        <p>The *[ui:onChange]* event can be used to execute JavaScript code when the value in the control changes. This event will fire each time the user makes a selection from the choice list to select a new token, or when the user types in the value of a new token and presses Enter. Values are stored in the order they are added to the control.</p>
                        <p>The following variables are available in the *[ui:onChange]* event:</p>
                        <p>
                            <list>
                                <item>
                                    <name>*[js:this]*</name>
                                    <description>A pointer to the ViewBox control used to implement the Mutlti-select Token Control.</description>
                                </item>
                                <item>
                                    <name>*[js:this.value]*</name>
                                    <description>An array containing all of the selections in the control. The last value in the list is always the most recent token added.</description>
                                </item>
                            </list>
                        </p>
                        <p>
                            <example code="js"><![CDATA[// Display the choices in a popup window for a multi-select token
// control that displays and stores different values.

var selected = this.value;
var choices = [];

for (const choice in selected) {
    var currValue = selected[choice];
    var productName = "";

    productName = this.getDisplayValue(currValue);

    if (productName) {
        choices.push(productName);
    }
}

// Dislpay selected choices as bullet list in popup message:
choices = choices.join("</li><li>");
var msg = '<p style="max-width:300px;">User has selected the following choices:</p><ul><li>' + choices + "</li></ul>";
A5.msgBox.show("Selected Choices",msg,"o");]]></example>
                        </p>
                    </description>
                </case>
                <case>
                    <title nested="2">valueNotInList</title>
                    <description>
                        <p>The *[ui:valueNotInList]* event can be used to execute JavaScript code when the user enters a value that is not in the list of choices. This property is only shown if the *[ui:User must select from choices]* property is unchecked. If the user types in a value that in is not in the list of choices, the code defined for this event will execute. This event can be used to add the value to a database.</p>
                        <p>The following variables are available in the *[ui:valueNotInList]* event:</p>
                        <p>
                            <list>
                                <item>
                                    <name>*[js:val]*</name>
                                    <description>The value the user typed into the control.</description>
                                </item>
                                <item>
                                    <name>*[js:ci]*</name>
                                    <description>A pointer to the ViewBox control used to implement the Mutlti-select Token Control.</description>
                                </item>
                            </list>
                        </p>
                        <p>For example, the code below makes an ajax callback to the server, passing the value that was not in the list to the function as the parameter "newProduct". [A5.ajax.buildURLParam()] is used to create the URL parameter to pass the data to the callback:</p>
                        <p>
                            <example code="js"><![CDATA[// Create parameter to pass to callback.
var parameters = A5.ajax.buildURLParam("newProduct",val)

// Do an Ajax Callback to the server to add the new product
{dialog.object}.ajaxCallback("","","addNewProduct","",parameters);]]></example>
                        </p>
                        <p>The *[xb:addNewProduct()]* callback function does the work of adding the new value to the Products table and returning JavaScript to the client to update the Multi-select token control. In the callback function, shown below, the [sql_insert()] Xbasic function is used to add the new product to the Products table in the Northwind database:</p>
                        <p>
                            <example code="xb"><![CDATA[function addNewProduct AS C (e AS P)
    dim js as c = ""

    if (variable_exists("e.newProduct")) then
        dim result as P
        dim record as P
        record.ProductName = e.newProduct
        dim recordJSON as C
        recordJSON = json_generate(record);

        '' Add new product to Products database.
        result = sql_insert("::Name::AADemo-Northwind","Products",recordJSON);
        
        if (result.error) then
            '' Error: Unable to add product
            js = "alert('Could not insert new product, " + js_escape(e.newProduct) + ". Error was: " + js_escape(result.errorText) + ".');"
        else
            '' Success: Call repopulateProducts to update the list of choices for the control
            js = js + "var productName = '"+js_escape(e.newProduct)+"';"
            js = js + "var productValue = '"+js_escape(result.lastInsertedIdentity) + "';"
            js = js + "repopulateProducts(productName, productValue);"
        end if
    else
        '' Error: You didn't pass in newProduct=value to the callback function
        js = "alert('New product was not submitted to callback.');"
    end if
    
    return js
end function]]></example>
                        </p>
                        <p>If the product is succesfully added to the Products table, the *[xb:addNewProducts()]* callback function returns JavaScript to call the *[js:repopulateProducts]* function on the client to update the Multi-select token control with the new value.</p>
                        <p>The *[js:repopulateProducts()]* JavaScript function is shown below:</p>
                        <p>
                            <example code="js"><![CDATA[var repopulateProducts = function(productName,productValue) {
    var currentValue = [].concat({dialog.object}.getValue("MULTISELECTTOKENS"));
    var vobj = {dialog.object}.getControl("MULTISELECTTOKENS");
    if (vobj) {	
        // Add the new option to the list of choices for the multi-select token control
        
        // Get the existing data from the current control (Only need to add an entry)
        // List of choices is stored in the data.data property of the control's JS object:
        var data = vobj.data.data;
        
        // Add the new entry:
        var newProduct = {"value":productValue,"display":productName};
        data.push(newProduct);
        
        // Repopulate the control:
        {dialog.object}.populateMultiSelectTokensControl('MULTISELECTTOKENS',data);
        
        
        // Reset the value of the control to use the value added to the database
        for (choice in currentValue) {
            if (currentValue[choice] === productName) {
                currentValue[choice] = productValue;
            }
        }
        
        // Set the value of the multi-select token control using item
        {dialog.object}.setValue("MULTISELECTTOKENS",currentValue);
        vobj.inputFocus();
        
        // Display message that token was added:
        var msg = '<p style="width:300px;">New value added to Multi-select Token Choices: ' + productName + "!</p>"
        A5.msgBox.show("New Product Added!",msg,"o");
    }

}]]></example>
                        </p>
                        <p>*[link:Download Example@components/multiSelectNotInList.zip]*</p>
                    </description>
                </case>
            </cases>
        </section>
        <section>
            <title>Methods</title>
            <description>
                <p>The following methods are available for the Multi-select Token Control. To call these methods, you need to first get the JavaScript object for the control:</p>
                <p>
                    <example code="js"><![CDATA[var tokenObj = {dialog.object}.getControl("MULTI_SELECT_TOKEN_CONTROL_NAME");
if (tokenObj) {
    // Success! Object exists and can be used to call methods on the
    // multi-select token control
}]]></example>
                </p>
                <p>For example:</p>
                <p>
                    <example code="js"><![CDATA[var tokenObj = {dialog.object}.getControl("MULTISELECTTOKENS");
if (tokenObj) {
    var value = "27"
    var name = tokenObj.getDisplayValue(value);
    alert(name);
}]]></example>
                </p>
                <p>
                    <list>
                        <item>
                            <name-title>Method</name-title>
                            <description-title>Description</description-title>
                        </item>
                        <item>
                            <name>*[js:getDisplayValue(value)]*</name>
                            <description>
                                <p>Returns the text shown in the multi-select token control for the specified value. This method is useful only when the value shown in the multi-select token control is different from the stored value.</p>
                                <p>
                                    <example code="js"><![CDATA[// 27 is the ProductId for "Schoggi Schokolade" in the Northwind Products table.
var value = "27"
var name = tokenObj.getDisplayValue(value);
alert(name);]]></example>
                                </p>
                                <p>If the value is not found in the list of choices, *[js:getDisplayValue]* returns the value passed into the function.</p>
                            </description>
                        </item>
                        <item>
                            <name>*[js:getRealValue(value)]*</name>
                            <description>
                                <p>Returns the data stored for the specified value. This method is useful only when the value shown in the multi-select token control is different from the stored value.</p>
                                <p>
                                    <example code="js"><![CDATA[var name = "Schoggi Schokolade";
var value = tokenObj.getRealValue(name);
alert(value);]]></example>
                                </p>
                                <p>If the value is not found in the list of choices, *[js:getRealValue]* returns the value passed into the function.</p>
                            </description>
                        </item>
                        <item build="6456">
                            <name>*[js:inputFocus(=)]*</name>
                            <description>
                                <p>Gives focus to the multi-select token control, placing the insertion point after the last token.</p>
                                <p>
                                    <example code="js"><![CDATA[tokenObj.inputFocus();]]></example>
                                </p>
                            </description>
                        </item>
<!-- Actually, probably don't want to doc these; they may not fire watch events.
                        <item>
                            <name>*[js:addToken]*</name>
                            <description>
                                <p>Adds the value to the list of tokens in the control. For example:</p>
                                <p>
                                    <example code="js"><![CDATA[var newToken = "Aniseed Syrup";
// If the control stores a different value than is displayed, 
// look up the real value before adding it.
newToken = tokenObj.getRealValue(newToken);

tokenObj.addToke(newToken);]]></example>
                                </p>
                            </description>
                        </item>
                        <item>
                            <name>*[js:remToken]*</name>
                            <description>
                                <p>Removes the token from the list. Takes the index of the token. The index is the zero-based location of where the token appears in the selected values. For example, if the selected values shown are "Aniseed Syrup", "Alice Mutton", and "Boston Crab Meat", the code below will remove "Alice Mutton" from the control:</p>
                                <p>
                                    <example code="js"><![CDATA[tokenObj.remToken(1); // remove second token]]></example>
                                </p>
                            </description>
                        </item>
-->
                    </list>
                </p>
            </description>
            <note>Examples shown for methods created by populating a Multi-select Token Control with data from the Northwind Products table.</note>
        </section>
        <section>
            <title>Dynamically Populating or Repopulating Choices at Runtime</title>
            <description>
                <p>Choices in the Multi-select Token control can be dynamically populated at runtime by calling the control's *[js:.populate()]* method. For example, the following JavaScript will populate the choices for the Multi-Select Token control with an ID of 'MST1':</p>
            </description>
            <example code="js"><![CDATA[var _d = {
    "data":[
        {"value" : "Argentina", "display" : "Argentina"},
        {"value" : "Austria", "display" : "Austria"},
        {"value" : "Belgium", "display" : "Belgium"},
        {"value" : "Brazil", "display" : "Brazil"},
        {"value" : "Canada", "display" : "Canada"},
        {"value" : "Denmark", "display" : "Denmark"},
        {"value" : "Finland", "display" : "Finland"},
        {"value" : "France", "display" : "France"},
        {"value" : "Germany", "display" : "Germany"},
        {"value" : "Ireland", "display" : "Ireland"},
        {"value" : "Italy", "display" : "Italy"},
        {"value" : "Mexico", "display" : "Mexico"},
        {"value" : "Norway", "display" : "Norway"},
        {"value" : "Poland", "display" : "Poland"},
        {"value" : "Portugal", "display" : "Portugal"},
        {"value" : "Spain", "display" : "Spain"},
        {"value" : "Sweden", "display" : "Sweden"},
        {"value" : "Switzerland", "display" : "Switzerland"},
        {"value" : "UK", "display" : "UK"},
        {"value" : "USA", "display" : "USA"},
        {"value" : "Venezuela", "display" : "Venezuela"}
    ]
};

var obj = {dialog.object}.getControl('MST1');
obj.populate(_d);]]></example>
        </section>
        <section>
            <description>
                <p>You can alternatively use the *[js:{dialog.object}.populateMultiSelectTokensControl()]* function to repopulate the control:</p>
                <p>
                    <example code="js"><![CDATA[var data = [ 
    {"value" : "1", "display" : "Alpha"},
    {"value" : "2", "display" : "Beta"},
    {"value" : "3", "display" : "Gamma"}
]

var keepExistingData = true; // Optional; if omitted, third parameter defaults to false.

{dialog.object}.populateMultiSelectTokensControl('MultiSelectToken1',data,keepExistingData);]]></example>
                </p>
                <p>The *[js:{dialog.object}.populateMultiSelectTokensControl()]* function takes three parameters: the name of the mulit-select token control to update, an array of values to set, and an optional third parameter that defines whether or not the existing selected tokens should be kept.</p>
            </description>
        </section>
        <section build="4497">
            <title>Text Highlighting</title>
            <description>
                <p>When you start typing into a multi-select tokens control, the list of choices that is displayed, which is filtered, by the text you have typed, now shows the matches in the choice list with the text you have typed in bold.</p>
                <p>For example, in the image below, the user has typed 'ou'. The choice list shows all of the items that contain the string 'ou'. Notice that in the choice list, all instances of the string 'ou' are highlighted:</p>
            </description>
            <figure>
                <link>images/highlight1.png</link>
            </figure>
            <note>For multi-select token controls created in Alpha Anywhere 4.4.5 or earlier, the control must be edited and re-saved to add Text Highlighting.</note>
        </section>
        <annotations>/Guides/Mobile and Web Components/UX/Controls/More/inserting.xml</annotations>
        <section>
            <title>Videos</title>
            <videos>
                <title>Adding a Multi-select Tokens Control to a UX Component</title>
                <description>
                    <p> The Multi-select Tokens control operates much like the Gmail app when you address an e-mail to multiple recipients. You can type values into a control, or make selections from a drop-down choice list. Each selection is shown in the control as a 'token'. Tokens can be removed from the list of selections by either hitting the backspace key while focus is in the control, or by clicking on the 'delete' icon in the token.</p>
                    <p> A common use case for the Multi-select Tokens control is to define selection criteria for a List control. In this video we show how a Multi-select Tokens control is used to select a list of countries. The List control is then filtered to show the countries that match the selected tokens. For example, if tokens for 'USA' and 'UK' are selected, the List is filtered to show customers in either 'USA' or 'UK'</p>
                </description>
                <date>2017-07-23</date>
                <video>
                    <name>Watch Video</name>
                    <link>https://www.viddler.com/v/b0675005</link>
                </video>
                <resources>
                    <resource>
                        <link>http://www.ajaxvideotutorials.com/V12Videos/MultiSelectToken.zip</link>
                    </resource>
                </resources>
            </videos>
        </section>
    </sections>
    <links>
        <link link="ux component getvalue method">.getValue()</link>
        <link link="ux component setvalue method">.setValue()</link>
        <link href="/images/tools/ellipsesButton.png">...</link>
        <link link="api%20sql%20insert%20function">sql_insert()</link>
        <link link="js%20a5%20ajax%20buildurlparam%20method">A5.ajax.buildURLParam()</link>
    </links>
</page>
