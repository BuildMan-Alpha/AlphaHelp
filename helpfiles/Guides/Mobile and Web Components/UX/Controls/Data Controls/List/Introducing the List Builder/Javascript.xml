<page build="4582">
    <shortlink>uxlist javascriptpane</shortlink>
    <topic>Javascript Pane</topic>
    <description>JavaScript added to the List's Javascript Pane lives with the List control, making it easy to copy the List control from one UX component.</description>
    <discussion>
        <p>JavaScript defined at the UX Component level is not specific to any one control in the component. While all functions defined at the component level can be used by Lists, any functions referenced by a List are not copied when the List control is copied to a new component. The *[ui:Javascript Pane]* allows you to define JavaScript at the object level that will be stored with the List control. Any JavaScript stored this way will be inclued with the List control when it is copied to another component.</p>
        <p>JavaScript defined at the object level is also added as a method to the List control object. This prevents potential name collisions bewteen components. Multiple Lists can define functions with the same name without worrying about overwritting any existing functions in the global namespace.</p>
    </discussion>
    <sections>
        <section>
            <figure>
                <link>images/listJSPane.png</link>
            </figure>
        </section>
        <section>
            <description>
                <p>Functions are managed using the *[ui:Add Function]*, *[ui:Delete Function]* and *[ui:Change function name]* tools on the *[ui:Javascript]* pane. User-defined list methods must have a unique function name.</p>
                <p>If the function includes argumets, they can be specified as a comma-delimited list in the *[ui:Function arguments]* text box.</p>
            </description>
        </section>
        <section>
            <description>
                <p>To invoke a function defined at the *[ui:This object]* level, a pointer to the List Control's JavaScript object is required. If the function is called from within one of the List's events, the *[js:this]* object can be used as it is typically the List object:</p>
            </description>
            <example code="js"><![CDATA[this.myFunctionName();]]></example>
        </section>
        <section>
            <description>
                <p>If the *[js:this]* object does not point to the List Control, the List's JavaScript object will need to be retrieved. This is done using the [{dialog.object}.getControl()] method:</p>
            </description>
            <example code="js"><![CDATA[var lobj = {dialog.object}.getControl('LIST1');
if (lobj) { // if the list object exists
    lobj.myFunctionName();
}]]></example>
        </section>
        <section>
            <description>
                <p>Functions can also be called at the *[ui:object level]* in a List template using the *[cst:[scope]]* directive. For example:</p>
            </description>
            <example code="cst"><![CDATA[{[scope].myFunctionName}]]></example>
        </section>
    </sections>
    <links>
        <link link="ux component getcontrol method">{dialog.object}.getControl()</link>
    </links>
</page>