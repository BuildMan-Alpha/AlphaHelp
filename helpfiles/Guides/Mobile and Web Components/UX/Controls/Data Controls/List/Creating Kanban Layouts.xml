<page build="5376">
    <shortlink>ux listcontrol kanban layouts</shortlink>
    <topic>Creating Kanban Layouts in a List Control</topic>
    <description>
        <p>Visually organize task or project data using the "Kanban" layout with the List control. Items displayed using a Kanban layout can be reorganized within "categories" or moved between categories using drag-and-drop within the List.</p>
    </description>
    <discussion>
        <p>A Kanban layout is useful if you have List data that can be grouped in categories and you want to be able to drag and drop a row from one category to another, or drag and drop a row with a category to change its order within the category.</p>
        <p>Example of the types of data where a Kanban view could be useful include:</p>
        <p>
            <list bullet="true">
                <item>
                    <name>Sales pipeline data where each item in the List can be categorized as Prospect, Qualified, Closed, etc.</name>
                </item>
                <item>
                    <name>Task list where each item in the List can be categorized as Not Yet Started, In Progress, Completed, Rejected</name>
                </item>
            </list>
        </p>
        <p>In the image below, a Kanban layout is shown for sales pipeline data.</p>
        <p>A List can have multiple Layouts. Any of the layout can be a Kanban layout. You can switch at any time from one layout (which might be columnar or freeform) to a Kanban layout.</p>
    </discussion>
    <sections>
        <section>
            <figure>
                <link>images/kanban1.gif</link>
            </figure>
        </section>
        <section>
            <description>
                <p>In the image shown above each category has a group footer in which the total for the amount field in that category is shown. The user can click on the hamburger icon and drag the row to a new position within the category, or to a different category.</p>
                <p>It is common that when you move a row, you will want to persist the data to a backend database. This is easily done by turning on the List's Detail View property and then putting a button on the UX to synchronize the List data.</p>
                <p>To create a Kanban layout, set the [Layout type] to *[ui:Kanban]*.</p>
            </description>
            <figure>
                <link>images/layouttype.gif</link>
            </figure>
        </section>
        <section>
            <description>
                <p>To configure the Kanban settings click the smart field for the [Kanban settings] property. This will open the *[ui:Kanban Layout Setup Genie]*.</p>
            </description>
            <figure>
                <link>images/kanbanlayoutgenie.jpg</link>
            </figure>
        </section>
        <section>
            <description>
                <p>Properties of note in this dialog include:</p>
                <p>
                    <list>
                        <item>
                            <name-title>Property</name-title>
                            <description-title>Description</description-title>
                        </item>
                        <item>
                            <name>Category field</name>
                            <description>This is the field in the List data that contains the various categories</description>
                        </item>
                        <item>
                            <name>Category display</name>
                            <description>The categories in the Kanban layout can either be displayed horizontally (as in the above image), or vertically. On a phone, for example, it is likely that you would want a vertical display.</description>
                        </item>
                        <item>
                            <name>Order field</name>
                            <description>This is the field in the List data that defines the order of the records within a category</description>
                        </item>
                        <item>
                            <name>Default category names</name>
                            <description>This is the List of category names that the Kanban layout should display regardless of whether there is any data in the category or not. For example, in a sales pipeline list you may want to include a Closed category even if none of the records current have a status of Closed. The categories in the Kanban layout are displayed in the same order in which they appear in this property. For example, in the image above, the default categories are Prospect, Qualified, Proposal, Closed and Lost and this is the order in which the Kanban layout will display the categories. If there are no records in a particular record, you can control the HTML that is displayed in the empty category by setting the HTML for empty categories property.</description>
                        </item>
                        <item>
                            <name>Sort fields</name>
                            <description>The data in the List are automatically sorted by the category field and within category by the order field. You can define additional sort criteria. For example, if two records in the same category have the same value in the order field, the sort defined here will break the tie.</description>
                        </item>
                        <item>
                            <name>Category header html</name>
                            <description>This is the HTML that appears at the top of each Category group</description>
                        </item>
                        <item>
                            <name>Move icon</name>
                            <description>This is the icon that is displayed in each row. The user drags on this icon to move a row to a new position.</description>
                        </item>
                        <item>
                            <name>Color Javascript</name>
                            <description>
                                <p>This is optional. You can define a Javascript function that can return a color to use in the Kanban layout. In the above image you will note that all of the records in the Prospect category have an orange edge. Your Javascript code can determine what color to return based on data in the current row. In the above example, the following code was defined in the Color Javascript property:</p>
                                <p>
                                    <example code="js"><![CDATA[
if(data.Category == 'Qualified') return 'Pink';
if(data.Category == 'Prospect') return 'Orange';
if(data.Category == 'Proposal') return 'Blue';
if(data.Category == 'Closed') return 'Green';
if(data.Category == 'Lost') return 'Red';]]></example>
                                </p>
                            </description>
                        </item>
                        <item>
                            <name>onMove function</name>
                            <description>This even fires when a row is moved (either to a new position within a category, or from one category to another). Your Javascript code can reference variables that define the source position and target position of the row as well as the Category (if the row is moved to a category that did not previously have any records in it).</description>
                        </item>
                        <item build="6129">
                            <name>onBeforeMove function</name>
                            <description>This event fires when the user tries to move an item from one category to another. If the event returns *[js:false]*, the move is cancelled.</description>
                        </item>
                    </list>
                </p>
                <p>Once you have defined the Kanban Layout properties, you will need to define the Kanban Layout. Defining the Kanban Layout is very similar to defining a Layout for a freeform List.</p>
                <p>In the screenshot below the layout for the Kanban layout shown above is defined. The layout is  an HTML template with placeholders for the data in each List row.</p>
                <p>The {kanban:draghandle} placeholder is a special placeholder for the drag handle icon that displays in each row.</p>
                <p>Note that the background color in the outer div has been set to: {@[scope].kanbancolor([root])}. This is the client-side templating syntax for calling a Javascript function. The value returned by the function will be used for the background color. See the documentation for client-side templating for more information on how to call Javascript functions in a template. Note that kanbancolor() is a special system generated function that will execute the code you defined in the Color Javascript property when you set the Kanban layout properties.</p>
                <p>Note also that the list of placeholder at the left edge of the screen include the  {kanban:draghandle} placeholder.</p>
            </description>
            <figure>
                <link>images/kanbanlayouteditor.jpg</link>
            </figure>
        </section>
        <section>
            <description>
                <p>When you are defining a new Kanban layout template, you can get a quick start by clicking on the Pre-defined Templates hyperlink. This will bring up a dialog (shown below) where you can select different sample layout templates.</p>
            </description>
            <figure>
                <link>images/kanbanlayoutgenie.jpg</link>
            </figure>
        </section>
        <section>
            <description>
                <p>If the data in the List is based on a SQL database, then it is likely that you will want to save the changes you make to the List back to the SQL database. For example, when you move a row to a new position within a category, or you move a row to a different category, you may want to update the underlying SQL database. This is easily accomplished. First, turn on the List's Detail View by setting the Has Detail View property.  If you want to edit the data in the List while you are offline, turn on the Persist data to Local Storage property.</p>
            </description>
            <figure>
                <link>images/listbuilderprops_hasdetailview.jpg</link>
            </figure>
        </section>
        <section>
            <description>
                <p>You do not need to actually define a Detail View for the List. Simply turning on the Detail View property is sufficient.</p>
                <p>Next, add a button to the UX to synchronize the List data. Your button should execute this code:</p>
            </description>
            <example code="js"><![CDATA[{dialog.object}.saveListEdits('name_of_your_list_control',{rows: 'allRows', ajax: { timeOut: 15000, onAjaxFail: function() { } , onDeviceOffline: function() { } } });]]></example>
        </section>
        <section>
            <tip>
                <p>You can add the synchronize button to your UX by selecting the [List-Detail View-Buttons] item in the Defined Controls section of the UX builder. The advantage of adding the button using this technique is that Alpha Anywhere will add an appropriate Enable expression to the button so that it is only enabled if the List has edits that have not been synchronized.</p>
            </tip>
        </section>
        <section>
            <figure>
                <link>images/pre-definedcontrols-list-detailviewbuttons.jpg</link>
            </figure>
        </section>
        <section>
            <title>Collapsible Categories</title>
            <description>
                <p>When defining a Kanban layout, you can specify that a category should be collapsible. When a category is collapsed, the records for the category are hidden and only the category header is shown. As a result, the category consumes less space, allowing you to display more categories on screen than would otherwise be shown.</p>
                <p>To add collapsible categories to a Kanban layout, enable the *[ui:Can collapse categories]* property in the Kanban Settings. Once enabled, you can define the behavior for collapsing and expanding categories. This includes the mode (clicking a title, icon, or programmatically), customizing icons, and setting initial open and closed state. You can also add JavaScript to execute when a category is collapsed or expanded in two JavaScript Events: *[ui:onCollapse]* and *[ui:onExpand]*.</p>
                <p>
                    <list>
                        <item>
                            <name-title>Property</name-title>
                            <description-title>Description</description-title>
                        </item>
                        <item>
                            <name>Can collapse categories</name>
                            <description>Enables collapsible categories. If checked, exposes the properties listed below.</description>
                        </item>
                        <item>
                            <name>Collapse mode</name>
                            <description>Defines how a category is expanded or collapsed: when the 'Title' is clicked, when the 'Indicator' icon is clicked, or 'Programmatically' by calling the [setGroupCollapse()] JavaScript method.</description>
                        </item>
                        <item>
                            <name>Collapse icon</name>
                            <description>The icon shown in the category title bar to indicate that a category is collapsed.</description>
                        </item>
                        <item>
                            <name>Expand icon</name>
                            <description>The icon shown in the category title bar to indicate that a category is expanded.</description>
                        </item>
                        <item>
                            <name>onCollapse function</name>
                            <description>A JavaScript function that is called when any category is collapsed.</description>
                        </item>
                        <item>
                            <name>onExpand function</name>
                            <description>A JavaScript function that is called when any category is expanded.</description>
                        </item>
                        <item>
                            <name>Initial display - collapse all</name>
                            <description>If checked, all categories will be collapsed when the Kanban layout is initially rendered.</description>
                        </item>
                        <item>
                            <name>Exceptions - Initially collapsed groups</name>
                            <description>A list of categories that should be collapsed when the Kanban layout is first rendered.</description>
                        </item>
                        <item>
                            <name>Exceptions - Initially expanded groups</name>
                            <description>A list of categories that should be expanded when the Kanban layout is first rendered. This option is only shown if all categories are configured to be collapsed when the List is initially shown.</description>
                        </item>
                    </list>
                </p>
            </description>
            <figure>
                <title>Kanban Layout with the 'Argentian' category collapsed.</title>
                <link>images/kanbancollapse.gif</link>
            </figure>
            <note>
                <p>For more information about these properties, see [Kanban settings].</p>
            </note>
        </section>
        <section>
            <cases>
                <case>
                    <title nested="2">Expanding/Collapsing a Category</title>
                    <description>
                        <p>If a Kanban layout has been configured to have collapsible categories, you can expand and collapse categories programmatically using the List object's [setGroupCollapse()] method. This method can expand or collapse any group in the List:</p>
                        <p>
                            <example code="js"><![CDATA[var lObj = {dialog.object}.getControl('name_of_list_control');
var groupName = 'Argentina';
var mode = false; //false == expand, true == collapse, '' == toggle
var showAnimation = true;
lObj.setGroupCollapse(groupName,mode,showAnimation);]]></example>
                        </p>
                    </description>
                </case>
                <case build="5487">
                    <title nested="2">Expanding/Collapsing Multiple Categories</title>
                    <description>
                        <p>Multiple categories in a Kanban layout can be collapsed or expanded by specifying a group selection object instead of the category name. For example:</p>
                        <p>
                            <example code="js"><![CDATA[var lObj = {dialog.object}.getControl('list1')
lObj.setGroupCollapse({groups: 'all'},true,false); // collapse all groups without animation]]></example>
                        </p>
                        <p>To expand/collapse specific categories, a match function can be used which computes whether or not a category's collapsed state should change:</p>
                        <p>
                            <example code="js"><![CDATA[lObj.setGroupCollapse({groups: 'match', match:
    function(groupName,groupData){
        if(groupName.match(/^[A-z]/)) return true; // match any group with a name starting with a character
        return false;
    }},true); // collapse all groups that the passed in function returns true for]]></example>
                        </p>
                        <p>See [setGroupCollapse()] for more information.</p>
                    </description>
                </case>
            </cases>
        </section>
        <section>
            <title>Dynamically Adding Categories at Run-time</title>
            <description>
                <p>JavaScript can be used to modify the categories in a Kanban layout. This is done by adding the category to the groups array in the List's JavaScript object:</p>
                <p>
                    <example code="js"><![CDATA[var layoutName = 'Default'; //name of the Kanban layout
var newCategory = 'New Category';
var lObj = {dialog.object}.getControl('name_of_list_control');
lObj.layouts[layoutName].group.auto[0].groups.push(newCategory);

lObj.refresh();]]></example>
                </p>
                <p>If the List only has one layout, the *[js:layoutName]* is 'Default'.</p>
            </description>
        </section>
        <section>
            <title>Videos</title>
        </section>
        <section>
            <videos>
                <title>Introduction to Kanban List Layouts</title>
                <description>
                    <p>Kanban Lists display data organized by category. Users can move List rows from one category to another using drag and drop. Users can also re-order the data within a category using drag and drop.</p>
                    <p>In this video we show a List control with both a columnar and a Kanban layout.</p>
                </description>
                <date>2018-10-03</date>
                <video>
                    <name>Watch Video</name>
                    <link>https://share.vidyard.com/watch/wcVdpmQYrfcMBonEaXQCtV</link>
                </video>
                <resources>
                    <resource>
                        <link>https://www.ajaxvideotutorials.com/V12Videos/kanbanIntro.zip</link>
                    </resource>
                </resources>
            </videos>
        </section>
        <section>
            <videos>
                <title>Creating a List with a Kanban Layout</title>
                <description>In this video we show how a Kanban layout can be defined for a List.</description>
                <date>2018-10-03</date>
                <video>
                    <name>Watch Video</name>
                    <link>https://share.vidyard.com/watch/LZAUDGgEDgYSgy4bw569ag</link>
                </video>
                <resources>
                    <resource>
                        <link>https://www.ajaxvideotutorials.com/V12Videos/kanbanIntro2.zip</link>
                    </resource>
                </resources>
            </videos>
        </section>
        <section>
            <videos>
                <title>Adding Color Coding and Summary Values to a Kanban Layout</title>
                <description>In this video we show some advanced features of a Kanban layout. We show how you can add color coding to the layout (so that List rows in different categories are colored differently and how you can summary data to each category.</description>
                <date>2018-10-03</date>
                <video>
                    <name>Watch Video</name>
                    <link>https://share.vidyard.com/watch/XyAJVEmTcYCrZyLe4qw2Pj</link>
                </video>
                <resources>
                    <resource>
                        <link>https://www.ajaxvideotutorials.com/V12Videos/kanbanIntroAdvanced.zip</link>
                    </resource>
                </resources>
            </videos>
        </section>
        <section>
            <videos>
                <title>Persisting Edits in a Kanban List to a SQL Database</title>
                <description>In this video we show how a Kanban List can be based on a SQL database and how edits to the List can be saved in the database.</description>
                <date>2018-10-03</date>
                <video>
                    <name>Watch Video</name>
                    <link>https://share.vidyard.com/watch/sd6MFDpz1j8Drt939q8VQT</link>
                </video>
                <resources>
                    <resource>
                        <link>https://www.ajaxvideotutorials.com/V12Videos/kanbanSQL.zip</link>
                    </resource>
                </resources>
            </videos>
        </section>
    </sections>
    <links>
        <link link="ux list builder layoutprop properties#section1_Layout type">Layout type</link>
        <link link="ux list builder layoutprop properties#section1_Kanban settings">Kanban settings</link>
        <link link="list object setgroupcollapse method">setGroupCollapse()</link>
    </links>
</page>