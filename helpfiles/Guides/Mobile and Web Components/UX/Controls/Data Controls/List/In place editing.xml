<page build="6232">
    <shortlink>ux list inplace editing</shortlink>
    <topic>List Control In-place Editing</topic>
    <description>Enables editing List records directly within in the list layout.</description>
    <discussion>
        <p>In-place Editing lets you modify fields in a List Control in the List layout directly.</p>
        <p> The image below shows a List with in-place editing enabled. Notice the icons in the first column of the List. These icons allow the user to edit a row or to add a new row to the List. You can also configure the List to support double-click to edit a List row. Once a row is in edit mode, a second double-click on the row will save the edit and return to view mode.</p>
    </discussion>
    <sections>
        <section>
            <figure>
                <link>images/inplaceedit.gif</link>
            </figure>
        </section>
        <section>
            <description>
                <p>To turn on in-place editing for List, check the Allow in-place editing property in the List Builder on the List Properties pane.</p>
            </description>
            <figure>
                <link>images/inplacediting10.jpg</link>
            </figure>
        </section>
        <section>
            <description>
                <p>You can configure the List to only allow one row at a time to be in edit mode, or you can allow multiple rows at a time to be in edit mode, as shown in the image below:</p>
            </description>
            <figure>
                <link>images/inplaceedit2.jpg</link>
            </figure>
        </section>
        <section>
            <description>
                <p> You can put a row into edit mode by clicking the Edit icon in the row.</p>
            </description>
            <figure>
                <link>images/inplaceedit3.gif</link>
            </figure>
        </section>
        <section>
            <description>
                <p> You can add a new row of data to the List by clicking the New Record icon.</p>
            </description>
            <figure>
                <link>images/inplaceedit4.gif</link>
            </figure>
        </section>
        <section build="6945">
            <description>
                <p>You can delete a row of data by clicking the Delete Record icon. You can customize the icon with the *[ui:Delete record icon]* property.</p>
            </description>
            <figure>
                <link>images/deleterowinplaceediting.gif</link>
            </figure>
        </section>
        <section>
            <description>
                <p> The image below shows the List after the New Record icon has been clicked. Notice that an empty new row appears in the List immediately after the row in which the icon was clicked. The fields in the new row can have default values that are computed using Javascript.</p>
            </description>
            <figure>
                <link>images/inplaceedit5.jpg</link>
            </figure>
        </section>
        <section>
            <description>
                <p> You can save the new row by clicking the Save icon (the checkmark icon), or you can abandon the new row by clicking the Cancel icon (the X icon).</p>
                <p> You can add the in-place edit icons to a List row by selecting the &lt;In-placeEditingIcons&gt; item from the list of Available Fields.</p>
            </description>
            <figure>
                <link>images/inplaceedit6.png</link>
            </figure>
        </section>
        <section>
            <description>
                <p> By default, you can also put a List row into edit mode by double clicking on the row. Once the row is in edit mode, a second double click will save the edits and return the List row to its 'non-editable' state.</p>
                <p> If you use the double click method to put a List row into edit mode, then it is not required to add the &lt;In-placeEditingIcons&gt; to your List layout. However, without these icons, you will not be able to add a new row to the List unless you use some Javascript code.</p>
                <p> Here is the Javascript code to add a new row to a List and to cancel the new Row:</p>
                <p>
                    <example code="js"><![CDATA[ var lObj = {dialog.object}.getControl('list1')

//add a new row below row 1 (zero based)
lObj.editInplaceAddRow(1);

//cancel the new row (zero based)
lObj.editInplaceCancel(2);]]></example>
                </p>
                <p> You can configure whether double-click can be used to put a List row into edit mode and other List in-place editing settings by clicking the smart field for the In-place editing settings property.</p>
            </description>
            <figure>
                <link>images/inplaceediting11.png</link>
            </figure>
        </section>
        <section>
            <description>
                <p> When you click the smart field, the following dialog will open:</p>
            </description>
            <figure>
                <link>images/inplacediting40.png</link>
            </figure>
        </section>
        <section>
            <description>
                <p> This dialog allows you to specify:</p>
                <p>
                    <list bullet="true">
                        <item>
                            <name>Icons to use for the &lt;In-placeEditingIcons&gt;</name>
                        </item>
                        <item>
                            <name>Whether double-click can be used to toggle a List row into or out of editing mode</name>
                        </item>
                        <item>
                            <name>Width for the  &lt;In-placeEditingIcons&gt; icons column in a Columnar List layout</name>
                        </item>
                        <item>
                            <name>Whether the List should allow multiple rows, or just one row, to be in editing mode at a time</name>
                        </item>
                        <item>
                            <name>Javascript events</name>
                        </item>
                        <item build="6249">
                            <name>The Security groups allowed to access the Edit row and Add row actions.</name>
                        </item>
                    </list>
                </p>
                <p> The Javascript events fire before a List row goes into editing mode, when the edits in a row are saved, when a new row is added to the List, or when edits are cancelled. All of these events allow you to cancel the event by returning a false value.</p>
            </description>
            <note>
                <p>The Before add new row event could be used to set default values for fields in a new row, and the On edit save event could be used to define data validation, but, as described later, you can use define Default value and Validation code for each field in the List.</p>
            </note>
            <cases>
                <case>
                    <title nested="2">Available JavaScript Events</title>
                    <list>
                        <item>
                            <name-title>Event</name-title>
                            <description-title>Description</description-title>
                        </item>
                        <item>
                            <name>Before edit start</name>
                            <description>Fires before editing starts. Return *[ui:false]* to cancel editing.</description>
                        </item>
                        <item build="7175">
                            <name>Before delete row</name>
                            <description>Fires before a row is deleted. Return *[ui:false]* to cancel the delete.</description>
                        </item>
                        <item build="7175">
                            <name>After delete row</name>
                            <description>Fires after a row has been deleted.</description>
                        </item>
                        <item>
                            <name>On edit save</name>
                            <description>Fires when the row is saved. Return *[ui:false]* to cancel the save.</description>
                        </item>
                        <item>
                            <name>On edit cancel</name>
                            <description>Fires when edits are cancelled for a row. Return *[ui:false]* to cancel the action.</description>
                        </item>
                        <item>
                            <name>Before add new row</name>
                            <description>Fires before a new row is added. Return *[ui:false]* to cancel adding a new row.</description>
                        </item>
                        <item>
                            <name>After add new row</name>
                            <description>Fires after a new row is added.</description>
                        </item>
                        <item>
                            <name>After new row is saved</name>
                            <description>Fires when a new row is saved. Return *[ui:false]* to cancel saving the new row.</description>
                        </item>
                        <item build="6249">
                            <name>Show Edit row icon</name>
                            <description>Called before the Edit row icon is shown. Return *[js:false]* to cancel display of the Edit row icon.</description>
                        </item>
                        <item build="6249">
                            <name>Show Add row icon</name>
                            <description>Called before the Add row icon is shown. Return *[js:false]* to cancel display of the Add row icon.</description>
                        </item>
                        <item build="7175">
                            <name>Show Delete row icon</name>
                            <description>Fires when the delete row icon is added to the row. Return *[ui:false]* to hide the delete icon.</description>
                        </item>
                    </list>
                </case>
            </cases>
        </section>
        <section>
            <title> Defining In-place Editing Properties at the Field Level</title>
            <description>
                <p> Once you have turned on in-place editing for a List you can define in-place editing properties for each field in the List. To define in-place editing settings for individual fields, go to the Fields pane in the List builder.</p>
            </description>
            <figure>
                <link>images/inplaceediting100.png</link>
            </figure>
        </section>
        <section>
            <description>
                <p> For each field you can specify:</p>
                <p>
                    <list bullet="true">
                        <item>
                            <name> Whether in-place editing is allowed for the field.</name>
                            <note>
                                <p>Only fields with a Control type of Label, can be edited using in-place editing. The control type of Label refers to how the field is rendered when it is not in editing mode. When a List row is in editing mode, you can choose the control type to use for editing.</p>
                            </note>
                        </item>
                        <item>
                            <name> The control type to use for in-place editing. The available control types are:</name>
                            <list bullet="true">
                                <item>
                                    <name>Textbox</name>
                                </item>
                                <item>
                                    <name>Edit-combo</name>
                                </item>
                                <item>
                                    <name>Auto-suggest</name>
                                </item>
                                <item>
                                    <name>Dropdownbox</name>
                                </item>
                                <item>
                                    <name>Datepicker</name>
                                </item>
                                <item>
                                    <name>Logical CheckBox</name>
                                </item>
                                <item>
                                    <name>CheckBox</name>
                                </item>
                                <item>
                                    <name>RadioButton</name>
                                </item>
                            </list>
                        </item>
                        <item>
                            <name>Control settings - see below for more detail</name>
                        </item>
                        <item>
                            <name>Client-side Validation - defined using JavaScript, this code is run when the user tries to save the edits in a List row. If the validation code returns an error message, the error is shown below the field and the List row remains in edit mode.</name>
                        </item>
                        <item build="7199">
                            <name>Server-side Validation - defined using Xbasic, this code is run when edits are saved to the List row. Sever-side validation is executed after client-side validation and only if there are no client-side errors.</name>
                            <description></description>
                        </item>
                        <item>
                            <name>Default value Javascript - this code is run when the user adds a new row to the List. Is sets the default value for the field.</name>
                        </item>
                    </list>
                </p>
                <p>For example, the the image below, the City field has a validation rule that has been violated:</p>
            </description>
            <figure>
                <link>images/inplaceedit50.jpg</link>
            </figure>
        </section>
        <section>
            <description>
                <p>The validation rule for the City field was defined as:</p>
                <p>
                    <example code="js"><![CDATA[if (newData.City == '') {
    return 'This is a required field.\nPlease enter a non-blank value.';
} else {
    return '';
}]]></example>
                </p>
            </description>
            <cases>
                <case build="7199">
                    <title nested="2">Adding Server-side Validation</title>
                    <description>
                        <p>Server-side validation can be defined for a List with in-place editing.</p>
                        <p>To define the Xbasic validation code, open the *[ui:List Builder]*, go to the *[ui:Fields]* tab, select the field and then click on the smart field for the *[ui:Validation - server-side]* property.</p>
                        <p>Enter the Xbasic code to validate the field. To return a validation error set the function's hasError property to *[xb:.t.]* and set the function's errorText property to the error description.</p>
                        <p>Note that server-side validation requires a connection to execute. If no network connection is available, server-side validation is not run when the List row is saved.</p>
                    </description>
                    <note>
                        <p>Server-side validation code only executes when List edits are saved and only executes if the List row has been edited. Additionally, the server-side validation code is only executed if there were no client-side validation errors.</p>
                    </note>
                </case>
            </cases>
        </section>
        <section>
            <title>Control Settings</title>
            <description>
                <p>Click the Control Settings smart field to open the In-place Edit Control Properties dialog (as shown below).</p>
                <p>This dialog allows you to select the control type to be used for in-place editing and to set properties for each control type.</p>
            </description>
            <figure>
                <link>images/inplaceediting_textbox.png</link>
            </figure>
        </section>
        <section>
            <description>
                <p>All of the available control types have a Width property which defines the width of the control when it is placed in a free-form List layout.</p>
                <p> Each different control type exposes a different set of properties. Some of the control types (dropdown, edit-combo, auto-suggest) allow the user to pick a value from a list of choices. See Control Choices below for more details.</p>
                <p> The Textarea control exposes these properties:</p>
            </description>
            <figure>
                <link>images/inplaceedittextarea.png</link>
            </figure>
        </section>
        <section>
            <list>
                <item>
                    <name-title>Property</name-title>
                    <description-title>Description</description-title>
                </item>
                <item>
                    <name>Height type</name>
                    <description>Can be Dynamic or Fixed. If Dynamic, the height of the Text area control will depend on the value in the List row being edited. If Fixed you can specify a fixed number of rows for the control height. If the text being edited has more rows, then you can scroll the text vertically in the control.</description>
                </item>
                <item>
                    <name>Minimum height</name>
                    <description>Applies when the Height type is Dynamic. Defines the minimum height of the Text area. For example, if the text in the field has 3 lines, but the Minimum height is set to 5,  then when the List row is edited, the Text area will have a height of 5 lines.</description>
                </item>
                <item>
                    <name>Maximum height</name>
                    <description>Applies when the Height type is Dynamic. Defines the maximum height of the Text area. For example, if the text in the field has 30 lines, but the Maximum height is set to 5,  then when the List row is edited, the Text area will have a height of 5 lines.</description>
                </item>
            </list>
        </section>
        <section>
            <title>Control Choices</title>
            <description>
                <p> The Dropdown, Edit-combo and Auto-suggest control all display a pick list of choices for the user to select from.</p>
                <p> This pick list can be based on:</p>
                <p>
                    <list bullet="true">
                        <item>
                            <name>A database query against a SQL database</name>
                        </item>
                        <item>
                            <name>Custom Xbasic code that returns a list of choices (Use this option if you want to call a Web service to get the list of choices)</name>
                        </item>
                        <item>
                            <name>Static - a static list of choices</name>
                        </item>
                        <item>
                            <name>Javascript - some Javascript code that will return a list of choices. (The Javascript option is useful when building disconnected application where you store choice lists in the Client-side data cache.)</name>
                        </item>
                    </list>
                </p>
                <p> You can define a filter for the choices. For example, you might only want the choices in a Dropdown to show cities in the USA.</p>
                <p> For the Edit-combo and Auto-suggest you can also define a dynamic filter. A dynamic filter is a filter that is based on data that has been entered in other fields in the List row being edited. </p>
                <p> For example, say you have defined an Edit-combo control to edit the City field. Say that the List also has a Country field. When you are editing a List row and you click the down arrow to display the list of choices for the City field you might only want to display Cities for the Country entered into the Country field.</p>
            </description>
        </section>
        <section>
            <title>Free-form Layout</title>
            <description>
                <p> You can use in-place editing in both Column List layouts and in Free-form layouts. In a free-form Layout you can specify the width of each control when the row is in edit mode. You can also define space (padding) to the right of the control.</p>
            </description>
            <figure>
                <link>images/inplaceedit65.png</link>
            </figure>
        </section>
        <section>
            <title>Updating Data in a List Bound to a SQL Database</title>
            <description>
                <p>It is common to build List controls that are populated with data from a SQL database. You can easily use the List to make edits to the data in the SQL database by defining a Detail View for the List.</p>
                <p> You might want to make these edits using in-place editing, rather than by entering edits into the List's Detail View.</p>
                <p> Even though you intend to make edits using in-placed editing, you should still turn on the List's Detail View. However, you need *[not]* actually define any Detail View controls.</p>
                <p> When you edit the data in a List row, an orange icon will appear in the edited List row to indicate the the List row has been edited, but not yet synchronized.</p>
                <p> When you are ready to synchronize your edits you can click the Synchronize button (just as you would have had the edits been made in a standard List with Detail View).</p>
                <p>*[extlink:Watch Video@https://www.viddler.com/v/e2f7c940]*</p>
            </description>
        </section>
        <section>
            <title>How to Dynamically Change the Choices in a Dropdown Control Used for In-place Editing</title>
            <description>
                <p>The choices in a dropdown control can be dynamically changed at run-time using Javascript. </p>
                <p>For example, in the code below, the choices for the Country field dropdown box are changed to 'alpha', 'beta', 'gamma'. In the case of 'gamma', a stored value of 'g' is defined.</p>
                <p>
                    <example code="js"><![CDATA[var lObj = {dialog.object}.getControl('list1');
if (lObj) {
    lObj._inplaceEditing.choices.Country = ['','alpha','beta',['gamma','g']];
}]]></example>
                </p>
            </description>
        </section>
        <section>
            <title>How to Render a Field with In-place Editing as a Checkbox when a Row is not in Edit Mode</title>
            <description>
                <p>The in-place editing only applies to fields with "Label" type. The other types don't have in-place editing options. The editing controls for the field are inserted when the row is switch to edit mode. If the field is a logical value that can only have two states, you may want to render the field as a logical checkbox when the row is not in edit mode.</p>
                <p>You can use the [Decode value] property to render a field as a Checkbox without losing the ability to use in-place editing. To do this, enable *[ui:Decode value]*. When configuring the *[ui:Decode lookup list]*, select *[ui:Static Choices]* and set the list of values to the example shown below. If your field uses other values for checked and unchecked, update the corresponding *[xb:T]* and *[xb:F]* as needed.</p>
                <p>
                    <example><![CDATA[T|<input type="checkbox" checked readonly/>
F|<input type="checkbox" readonly/>]]></example>
                </p>
                <p>The lookup value can contain HTML, as shown in the example above. When the field has a value of *[xb:F]*, a unchecked checkbox will be rendered. When the value is *[xb:T]*, a checked checkbox is rendered. The *[html:readonly]* attribute ensures the user cannot change the value of the checkbox when the row is not being edited.</p>
                <p>*[link:Download Example Component@components/listInPlaceEditWithCheckboxes.zip]*.</p>
            </description>
            <figure>
                <title>Discontinued field configured to render as a Checkbox using the Decode Value property</title>
                <alt>Discontinued field configured to render as a Checkbox using the Decode Value property</alt>
                <link>images/decodeValueAsCheckbox.png</link>
            </figure>
        </section>
        <section>
            <title>Editing All Rows At Once</title>
            <description>
                <p>When a List is initially rendered, you might want all of the rows in the List be in edit mode (so that the user does not have to manually put a row into edit mode before making edits).</p>
                <p>The following Javascript methods of the List can be used:</p>
                <p>
                    <list>
                        <item>
                            <name-title>Method</name-title>
                            <description-title>Description</description-title>
                        </item>
                        <item>
                            <name>[editInplaceEditAll()]</name>
                            <description>puts all rows into edit mode</description>
                        </item>
                        <item>
                            <name>[editInplaceSaveAll()]</name>
                            <description>saved all rows with edits</description>
                        </item>
                        <item>
                            <name>[editInplaceCancelAll()]</name>
                            <description>cancels edits in all rows that are in edit mode</description>
                        </item>
                    </list>
                </p>
                <p>For example:</p>
                <p>
                    <example code="js"><![CDATA[var lObj = {dialog.object}.getControl('list1');
if (lObj) {
    lObj.editInplaceEditAll();
}]]></example>
                </p>
            </description>
        </section>
        <section>
            <title>Styling Edit-combo and Auto-suggest Pick Lists</title>
            <description>
                <p>You can define several properties to control the styling of the pick-lists displayed for edit-combo and auto-suggest controls.</p>
            </description>
            <figure>
                <link>images/inplaceeditstyle.jpg</link>
            </figure>
        </section>
        <section>
            <description>
                <p>You can control the height of the pick-list window that is displayed for edit-combo and auto-suggest controls. You can use the special listHeight value to specify a value relative to the List height. For example: *[js:listHeight * .3]*</p>
            </description>
            <figure>
                <link>images/inplaceeditorpickerwidth.jpg</link>
            </figure>
        </section>
        <section>
            <title>Conditionally Controlling with Controls Allow In-place Editing</title>
            <description>
                <p>You can define a Javascript function to determine if a particular field in the list should be editable when the List row is put into edit mode. You can also specify security groups to control whether a particular field is editable.</p>
                <p>By default all of the fields that have their Allow edit property checked become editable when the row is put into edit mode. However, if you specify a Javascript function that returns false, then when the List row is put into edit mode, the field will not be editable.</p>
                <p>You can specify global JavaScript functions, functions defined in the scope of the UX component (e.g. *[js:{dialog.object}._functions.somefunctionname]*), or functions defined in the scope of the List control (e.g. *[cst:[scope].somefunctioname]*):</p>
            </description>
            <figure>
                <link>images/listconditionaledit.gif</link>
            </figure>
        </section>
        <section>
            <description>
                <p>To define the Security Groups for a field, set the Security Groups property in the Fields pane in the List Builder. See image above.</p>
            </description>
        </section>
        <section>
            <title> Controlling the Pick-List Window Size for Edit-combo and Auto-suggest Controls</title>
            <description>
                <p> You can set the width and maximum height of the pick-list window for edit-combo and auto-suggest controls. The default window width is the width of the control.</p>
            </description>
            <figure>
                <link>images/inplaceedit-picklistsize.jpg</link>
            </figure>
        </section>
        <section>
            <title>Calculated Fields</title>
            <description>
                <p> When you are editing the data in a List row, you can specify that the value in a particular field should be computed from other data in the List row. Your JavaScript code that computes the calculated value can reference the current (i.e. edited data) in the List row, the original data in the List row, or data from other rows in the List.</p>
                <p> To define a calculated field, specify code in the control's calculated event.</p>
                <p> For example, if the List has these columns: price, quantity and total, you might specify this code for the calculated event for the total field:</p>
                <p>
                    <example code="js"><![CDATA[return Number(newData.price) * Number(newData.quantity)]]></example>
                </p>
                <p> Notice that the Number() function is used to ensure that the value for price (newData.price) is a numeric value.</p>
                <p> The value for price is prefixed with newData (as opposed to oldData) to indicate that you want to use the current (edited) value that the user has typed into the price field. oldData.price refers to the value before the user made any edits.</p>
            </description>
            <figure>
                <link>images/inplace_calculatedfields.jpg</link>
            </figure>
        </section>
        <section>
            <title> Dynamically Enabling In-place Editing Controls</title>
            <description>
                <p>You can dynamically enable/disable controls in the List row you are editing.</p>
                <p>*[extlink:Watch Video@https://www.viddler.com/v/a170b359]*</p>
                <p>To enable or disable a control while you are editing a List row, define an enable event. Your event can reference data in the row you are editing and also the original data (before edits were made). If your code returns false, the control is disabled. Otherwise the control is enabled.</p>
                <p>When radiobutton and checkbox controls are disabled an opaque overlay is shown over the control to give a visual clue that all of the controls in the control group have been disabled.</p>
            </description>
            <figure>
                <link>images/inplaceedit_enable.jpg</link>
            </figure>
        </section>
        <section>
            <title>In-place Edit - CheckBox and RadioButton Controls</title>
            <description>
                <p> You can specify that the data in a List column should be edited using either a CheckBox or RadioButton control. When you define the choices for these control types you can define a static list of choices. Each choice can define an optional stored value in addition to a displayed value. The individual radiobutton or checkbox controls can be rendered using a horizontal, vertical or snaking layout (multiple columns that snake from left to right, top to bottom within the defined width of the List column).</p>
                <p> In the image below, the RadioButton control has been defined to use a vertical layout.</p>
            </description>
            <figure>
                <link>images/radiobuttoninplaceedit.jpg</link>
            </figure>
        </section>
        <section>
            <title> Auto-suggest and Edit-Combo - Multi-column Pick List and Fill in Fields</title>
            <description>
                <p> When defining auto-suggest and edit-combo controls for in-place editing in a List you can specify that the Pick List that is displayed should have multiple columns. You can also specify that when a selection is made from the Pick List other fields in the List row you are editing should be filled in with values from the Pick List (the source fields for the fill in definition do not have to be displayed in the Pick List).</p>
                <p>*[extlink:Watch Video@https://www.viddler.com/v/e0f222ae]*</p>
                <p> In the image below, the City field is defined as an edit-combo control and the Pick List shows two columns - City and Country. You can specify the column headings and the column widths. (See below).</p>
            </description>
            <figure>
                <link>images/ux_inplaceedit_100.jpg</link>
            </figure>
        </section>
        <section>
            <description>
                <p> To specify that the Pick List for an edit-combo or auto-suggest control has multiple columns, select the columns to display by setting the Fields to display property.</p>
            </description>
            <figure>
                <link>images/ux_inplaceedit_101.jpg</link>
            </figure>
        </section>
        <section>
            <description>
                <p> If you are displaying more than one field in the Pick List you can customize the template used to display the Pick List. Click the smart field for the Template property.</p>
                <p> You can control the order in which the columns are displayed (by clicking on the Up and Down buttons) and you can set these properties:</p>
                <p>
                    <list>
                        <item>
                            <name-title>Property</name-title>
                            <description-title>Description</description-title>
                        </item>
                        <item>
                            <name>Column heading</name>
                            <description>By default, the column heading is the same as the field name. You can use HTML markup in the heading.</description>
                        </item>
                        <item>
                            <name>Column width</name>
                            <description>By default, all columns have a width of flex(1), which means that the columns are equal size within the overall width of the Pick List. You can set the size of a column to be relative (i.e. flex(2), which means that the column is twice the width of other columns that are set to flex(1), or you can set an absolute size (e.g. 100px).</description>
                        </item>
                        <item>
                            <name>Column type</name>
                            <description>Can be Text or Image. Specify if the data in the column is text or an image name.</description>
                        </item>
                        <item>
                            <name>Image Style</name>
                            <description>If the Column type is set to Image you can specify an image style. This is typically used to set the size of the image (e.g. width: 75px);</description>
                        </item>
                    </list>
                </p>
            </description>
            <figure>
                <link>images/ux_inplaceedit_102.jpg</link>
            </figure>
        </section>
        <section>
            <description>
                <p>When the user makes a selection from a Pick List you can fill in other fields in the List row you are editing. To define which fields should be filled in, click the smart field for the Fillin fields property.</p>
            </description>
            <figure>
                <link>images/ux_inplaceedit_103.jpg</link>
            </figure>
        </section>
        <section>
            <title> Displaying Images in a Pick List</title>
            <description>
                <p> The image below shows a Pick List with two columns. The data in the second column is displayed as an image (this is done by setting the Column type to Image in the Template).</p>
                <p> In the first row a built-in SVG image is displayed. In the second row an image referenced by a URL is shown and in the third row a built-in image is shown.</p>
                <p>*[extlink:Watch Video@https://www.viddler.com/v/6ca5e7e1]*</p>
            </description>
            <figure>
                <link>images/imagesInPicklist.jpg</link>
            </figure>
        </section>
        <section>
            <title>Events</title>
            <description>
                <p> You can define the following events for in-place editing controls</p>
                <p>
                    <list>
                        <item>
                            <name>onChange</name>
                        </item>
                        <item>
                            <name>onFocus</name>
                        </item>
                        <item>
                            <name>onBlur</name>
                        </item>
                        <item>
                            <name>onKeyPress</name>
                        </item>
                        <item>
                            <name>onKeyUp</name>
                        </item>
                        <item>
                            <name>onKeyDown</name>
                        </item>
                        <item build="6348">
                            <name>onEdit</name>
                            <description>
                                <p>Triggered when the List row goes into edit mode. This event can be used to format the data for editing. See [onEdit and afterEdit Events] below for more information.</p>
                            </description>
                        </item>
                        <item build="6348">
                            <name>afterEdit</name>
                            <description>
                                <p>Triggered when the List data is saved. This event can be used to un-format data. See [onEdit and afterEdit Events] below for more information.</p>
                            </description>
                        </item>
                    </list>
                </p>
            </description>
            <important>
                <p>Not all input-editing control types support the full list of events.</p>
            </important>
        </section>
        <section build="6348">
            <title>onEdit and afterEdit Events</title>
            <description>
                <p>The *[ui:onEdit]* and *[ui:afterEdit]* events can be used to apply custom formatting to the data before displaying it in the in-place editing control for the field.</p>
                <p>For example, assume you have a List that has a field called "DOB" (date of birth), and the data type of this field in the list's SQL data source is *[sql:datetime]*. If the regional settings of the machine running the Application Server is set to US (United States), the data in the list will be stored in this format: *[js:MM/dd/yyyy]*. So, a particular value might be *[js:12/24/1972]*.</p>
                <p>You may prefer to display the value using a different format, such as *[js:dd.MM.yy]*. This format can be applied by setting the *[ui:Date/time display format]* property as shown in the image below:</p>
            </description>
            <figure>
                <title>Date/time display format property</title>
                <alt>Date/time display format property</alt>
                <link>images/datetimedisplayformat.gif</link>
            </figure>
        </section>
        <section>
            <description>
                <p>After applying the formatting, the List will display the date value *[js:12/24/1972]* as *[js:24.12.72]*. However, when the List row is put into edit mode, the value in the in-place editing field will be displayed as *[js:12/24/1972]*. This happens because the actual value that is stored in the List's data is *[js:12/24/1972]*.</p>
                <p>In-place editing values must be formatted using the *[ui:onEdit]* and *[ui:afterEdit]* events if you want them to match the formatted displayed value. For example, to format the DOB field to match the *[ui:Date/time display format]* specified above, you could add the following JavaScript to the *[ui:onEdit]* event:</p>
                <p>
                    <example code="js"><![CDATA[var d = new Date();

//parse the date value string using the format that it is currently stored in
d.fromFormat(data.dob,'MM/dd/yyyy');

//generate a date string in the required format
data.dob = d.toFormat('dd.MM.yy');]]></example>
                </p>
                <p>When the row is saved, you must also translate the value back into the format stored in the list's data source. This is done using the *[ui:afterEdit]* event. Using the example above, the JavaScript shown below translates the DOB value back into the expected format:</p>
                <p>
                    <example code="js"><![CDATA[var d = new Date();
d.fromFormat(data.dob,'dd.MM.yy');
data.dob = d.toFormat('MM/dd/yyyy');]]></example>
                </p>
            </description>
        </section>
        <section build="6249">
            <title>Security</title>
            <description>
                <p>If the Alpha Anywhere Security Framework, security restrictions can be applied to the following actions:</p>
                <p>
                    <list bullet="true">
                        <item>
                            <name>Edit row</name>
                        </item>
                        <item>
                            <name>Add row</name>
                        </item>
                    </list>
                </p>
                <p>If security is not explicity set for an action, all users will have permissions to use the action.</p>
            </description>
            <figure>
                <link>images/inplacedit_security.jpg</link>
            </figure>
        </section>
        <section>
            <title>Placeholder Text</title>
            <description>
                <p> You can define placeholder text to be displayed in the input controls used for in-place editing.</p>
                <p> In the image below, placeholder text is displayed in the input controls for Lastname and City in the new row.</p>
            </description>
            <figure>
                <link>images/inplaceeditplaceholder2.jpg</link>
            </figure>
        </section>
        <section>
            <description>
                <p> To define placeholder text for a field, set the Placeholder text property in the In-place Edit Control Properties dialog.</p>
            </description>
            <figure>
                <link>images/in-placedit_placeholdertext.gif</link>
            </figure>
        </section>
        <section>
            <title>Videos</title>
        </section>
        <section>
            <videos>
                <title> In-place editing</title>
                <description>
                    <p> By default, a List control is used to display data, not to edit data. It is possible to edit the data in a List using either a List Detail View, or using in-place editing.</p>
                    <p> In this video, we show how you can configure a List to use in-place editing.</p>
                </description>
                <date>2019-08-19</date>
                <video>
                    <name>Watch Video</name>
                    <link>https://www.viddler.com/v/be523242</link>
                </video>
            </videos>
        </section>
        <section>
            <videos>
                <title> In-place editing - Dropdown Control</title>
                <description>
                    <p> In this video, we show how a dropdownbox can be defined for in-place editing of data in a List.</p>
                </description>
                <date>2019-08-19</date>
                <video>
                    <name>Watch Video</name>
                    <link>https://www.viddler.com/v/70953e0</link>
                </video>
            </videos>
        </section>
        <section>
            <videos>
                <title> In-place editing - Dynamically changing choices in a dropdownbox at runtime.</title>
                <description>
                    <p> A common pattern when using Lists that allow in-place editing is to configure the List so that all rows in the List are in edit mode (rather than requiring the user to put individual rows into edit mode before making edits).</p>
                    <p> In this video we show how you can execute Javascript to put all of the rows in the List into edit mode.</p>
                </description>
                <date>2019-08-19</date>
                <video>
                    <name>Watch Video</name>
                    <link>https://www.viddler.com/v/486ab5c8</link>
                </video>
            </videos>
        </section>
        <section>
            <videos>
                <title> In-place editing - Putting all rows into edit mode.</title>
                <description>
                    <p> A common pattern when using Lists that allow in-place editing is to configure the List so that all rows in the List are in edit mode (rather than requiring the user to put individual rows into edit mode before making edits).</p>
                    <p> In this video we show how you can execute Javascript to put all of the rows in the List into edit mode.</p>
                </description>
                <date>2019-08-19</date>
                <video>
                    <name>Watch Video</name>
                    <link>https://www.viddler.com/v/7a8dec5a</link>
                </video>
            </videos>
        </section>
        <section>
            <videos>
                <title> In-place editing - Free-form Layouts</title>
                <description>
                    <p> In place-editing in a List control can also be used in free-form List Layouts.</p>
                    <p> In this video we show a List that has a free-form layout and how in-place editing can be used.</p>
                </description>
                <date>2019-08-19</date>
                <video>
                    <name>Watch Video</name>
                    <link>https://www.viddler.com/v/2334d9fa</link>
                </video>
            </videos>
        </section>
        <section>
            <videos>
                <title> Using in-place editing to edit data in a List based on a SQL table</title>
                <description>
                    <p> To edit data in a List that is based on a SQL database, the List/Detail View pattern is typically used. However, it is also possible to use in-place editing in a List and then persist the edits made to the List back to the SQL database.</p>
                    <p> In this video we show how a List that is based on a SQL database is configured to allow edits to the SQL database to be made using in-place editing in the List.</p>
                </description>
                <date>2019-08-19</date>
                <video>
                    <name>Watch Video</name>
                    <link>https://www.viddler.com/v/e2f7c940</link>
                </video>
            </videos>
        </section>
        <section>
            <videos>
                <title> Data validation for in-place editing</title>
                <description>
                    <p> When you use in-place editing to edit data in List row you can use Javascript code to validate the edited data before it is saved.</p>
                    <p> In this video we show how a validation rule is added to check that the user enters a value into the City field.</p>
                </description>
                <date>2019-08-19</date>
                <video>
                    <name>Watch Video</name>
                    <link>https://www.viddler.com/v/9830f1f</link>
                </video>
            </videos>
        </section>
        <section>
            <videos>
                <title> In-place editing - Auto-suggest</title>
                <description>
                    <p> You can define an auto-suggest control for in-place editing. You can also dynamically filter the choices in the auto-suggest based on other data entered into the List row being edited.</p>
                    <p> In this video we show how an auto-suggest control that shows choices from a SQL database is defined. We then add a dynamic filter to the auto-suggest so that it only shows choices that are filtered by some previously entered data in the List row.</p>
                </description>
                <date>2019-08-19</date>
                <video>
                    <name>Watch Video</name>
                    <link>https://www.viddler.com/v/a315680</link>
                </video>
            </videos>
        </section>
        <section>
            <videos>
                <title>In-place editing - Displaying images in a pick-list for Edit-combo or Auto-suggest</title>
                <description>
                    <p> When you define the data to be shown in the pick-list for an edit-combo or auto-suggest control, you can include images. In this video we show how the pick-list for an edit-combo is configured to display images</p>
                </description>
                <date>2019-09-09</date>
                <video>
                    <name>Watch Video</name>
                    <link>https://www.viddler.com/v/6ca5e7e1</link>
                </video>
            </videos>
        </section>
        <section>
            <videos>
                <title>In-place editing - Displaying multiple columns in a pick-list for Edit-combo or Auto-suggest</title>
                <description>
                    <p> When you define the data to be shown in the pick-list for an edit-combo or auto-suggest control, you can specify that multiple columns of data should be shown in the pick-list. You can also specify that when the user makes a selection from the pick-list that other fields in the List row you are editing should be filled in. In this video we show how this is done.</p>
                </description>
                <date>2019-09-09</date>
                <video>
                    <name>Watch Video</name>
                    <link>https://www.viddler.com/v/e0f222ae</link>
                </video>
            </videos>
        </section>
        <section>
            <videos>
                <title>In-place editing - Enable/Disable controls</title>
                <description>
                    <p> When you are editing the data in a List row using in-place editing, you may want to dynamically enable/disable controls in the row. </p>
                    <p> In this video we show how you can define an enable event to dynamically disable controls in the List row you are editing.</p>
                </description>
                <date>2019-09-09</date>
                <video>
                    <name>Watch Video</name>
                    <link>https://www.viddler.com/v/a170b359</link>
                </video>
            </videos>
        </section>
        <section>
            <videos>
                <title>In-place Editing - Server-side validation</title>
                <description>
                    <p>In this video, we show how data validation for fields in a List that are edited using in-place editing can be validated both client-side (using Javascript) and server-side (using Xbasic).</p>
                </description>
                <date>2020-11-06</date>
                <video>
                    <name>Watch Video</name>
                    <link>https://alphamediacapture.s3.amazonaws.com/videos/ux_list_inplaceediting_serversidevalidation.mp4</link>
                </video>
            </videos>
        </section>
    </sections>
    <links>
        <link link="editInplaceEditAll method">editInplaceEditAll()</link>
        <link link="editInplaceSaveAll method">editInplaceSaveAll()</link>
        <link link="editInplaceCancelAll method">editInplaceCancelAll()</link>
        <link link="ux%20list%20fields%20client%20side%20properties#section1_Decode%20value">Decode value</link>
    </links>
</page>