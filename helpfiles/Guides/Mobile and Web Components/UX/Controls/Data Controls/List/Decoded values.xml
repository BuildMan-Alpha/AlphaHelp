<page build="6232">
    <shortlink>list decodedvalues</shortlink>
    <topic>Decoded values</topic>
    <description>
        <p></p>
    </description>
    <discussion>
        <p>If a field in a List is a coded value and that it should be decoded before it is displayed in the List. For example, you may have a field in the List called categoryId. This field may have values like 1, 2, 3, etc. When the List is rendered, you would like to display the decoded value for each of these values (e.g. Beverages, Food, Condiments, etc.).</p>
        <p>In order to specify that a List field should be decoded, check the *[ui:Decode value]* property on the *[ui:Fields]* tab in the List Builder.</p>
    </discussion>
    <sections>
        <section>
            <figure>
                <link>images/decodevalue.gif</link>
            </figure>
        </section>
        <section>
            <description>
                <p>Once you check this property, a new property (*[ui:Decode lookup list]*) is shown. This allows you to define the list of values (the *[ui:decode list]*)  that will be used to decode the value when the List is rendered.</p>
            </description>
            <figure>
                <link>images/decodelookupvalues.jpg</link>
            </figure>
        </section>
        <section>
            <description>
                <p>The *[ui:decode list]* can be based on *[ui:static]* or *[ui:dynamic]* values or a *[ui:Javascript function]*. If the *[ui:decode list]* is based on *[ui:dynamic]* values, you can specify a database query, or a custom Xbasic function to get the values for the decode list.</p>
                <p>The *[ui:decode list]* is a CRLF delimited list of values of the form *[xb:codedValue|displayValue]*</p>
                <p>For example</p>
                <p>
                    <example><![CDATA[1|Beverages
2|Condiments
3|Confections]]></example>
                </p>
                <p>If a value cannot be decoded, the coded value is displayed.</p>
                <p>When the List data are refreshed, the *[ui:decode list]* is also refreshed (assuming that the *[ui:decode list]* was defined to be *[ui:dynamic]*).</p>
                <p>The *[ui:decode list]* is stored as a property of the List Object. For example, for a field called category, the *[ui:decode list]* for this field would be stored in:</p>
                <p>
                    <example code="js"><![CDATA[<listObject>.lookupvalue.category]]></example>
                </p>
                <p>Where *[js:&lt;listObject&gt;]* is a pointer to the List Object.</p>
                <p>For example</p>
                <p>
                    <example code="js"><![CDATA[var lObj = {dialog.object}.getControl('list1')
lObj.lookupvalue['category'] = [
    {value: '1', html: 'Beverages'},
    {value: '2', html: '<b>Condiments</b>'}
]]]></example>
                </p>
                <p>Notice that the html property can be any HTML markup that you want.</p>
                <p>After you modify a field's *[ui:lookupvalue]* property you must refresh the List using the [&lt;listObject&gt;.refresh()] method.</p>
            </description>
        </section>
        <section>
            <title>Sorting Columns with Coded Value</title>
            <description>
                <p>When you do a client-side sort on a column that has a coded value, the resolved values (as opposed to the raw values) are sorted.</p>
            </description>
        </section>
        <section>
            <title>Contrast the Decode value feature with the Lookup Columns feature</title>
            <description>
                <p>The [Lookup Columns] feature is similar to the *[ui:Decode value]* feature in that both allow you to display a decoded value for a coded value in the List. The *[ui:Decode value]* feature is probably easier to use as you can define the *[ui:decode list]* as part of your List definition and it does not add additional columns to the List as the Lookup Columns feature does.</p>
            </description>
        </section>
        <section>
            <title>Resolving Coded Values Programmatically</title>
            <description>
                <p>You can resolve a coded value using the [resolveCodedValue()] method of the List object:</p>
                <p>
                    <example code="js"><![CDATA[<listObject>.resolveCodedValue(fieldName,fieldValue)]]></example>
                </p>
            </description>
        </section>
        <section>
            <title>Videos</title>
            <videos>
                <title>Decode coded Values</title>
                <description>
                    <p>It is common when designing databases to use coded values for certain fields (i.e. a category field might have values of 1, 2, 3, etc. rather than Beverages, Condiments, Confectionary, etc.). When displaying the data in the List you might like to display the decoded value for each coded value. In this video we show how this is easily done.</p>
                </description>
                <date>2019-10-05</date>
                <video>
                    <name>Watch Video</name>
                    <link>https://share.vidyard.com/watch/q9aqHA62tKPDH2F4nhWHaX</link>
                </video>
            </videos>
        </section>
    </sections>
    <links>
        <link link="resolveCodedValue method">resolveCodedValue()</link>
        <link link="">&lt;listObject&gt;.refresh()</link>
        <link link="">Lookup Columns</link>
    </links>
</page>