<page>
    <topic>QRCode Control Type</topic>
    <description>The UX Component's QRCode control displays its value as a QR Code.</description>
    <sections>
        <section>
            <videos>
                <video>
                    <name>Watch Video</name>
                    <link>https://share.vidyard.com/watch/XfjGd6kJHjSBSpcCxAVoWy</link>
                </video>
                <video>
                    <name>Download Component</name>
                    <link>https://www.ajaxvideotutorials.com/V12Videos/UX_QRCode.zip</link>
                </video>
            </videos>
        </section>     
        <section>
            <figure>
                <link>images/qrcode_inUx1.jpg</link>
            </figure>
            <note>The QRCode control is a client-side control. That means that Javascript is used to generate the QR code. You can also use Xbasic methods to generate servers-side QR codes (as bitmaps or SVG). See ::QRCode::Creator:: below for more details.</note>
        </section>
        <section>
            <description>To place a QRCode control on a UX, select the control type from the toolbox.</description>
            <figure>
                <link>images/qrcode_inUX2.jpg</link>
            </figure>
        </section>     
        <section>
            <description>The QRCode control is just like other data bound controls in that it has a .getValue() and .setValue() method.
            To display a QR code, you simply call the .setValue() method of the control. For example:
            </description>
            <example><![CDATA[{dialog.object}.setValue('MYQRCONTROL_1','value to encode');]]></example>
        </section>
        <section>
            <title>QRCodes - Xbasic</title>
            <description>
                <p>New methods have been added to Xbasic to generate QRCodes. The methods are:</p>
            </description>
            <cases>
                <case>
                    <description>
                        <p>[::Qrcode::Creator::GenerateBmp(c text, c flags)]</p>
                        <p>[::Qrcode::Creator::GenerateBmpFile(c text, c filename, c flags)]</p>
                        <p>[::Qrcode::Creator::GenerateJpeg(c text, c flags)]</p>
                        <p>[::Qrcode::Creator::GenerateJpegFile(c text, c filename, c flags)]</p>
                        <p>[::Qrcode::Creator::GeneratePng(c text, c flags)]</p>
                        <p>[::Qrcode::Creator::GeneratePngFile(c text, c filename, c flags)]</p>
                        <p>[::Qrcode::Creator::GenerateRTF(c text, c flags, n width, n height)]</p>
                        <p>[::Qrcode::Creator::GenerateSVG(c text, c flags)]</p>
                    </description>
                </case>
            </cases>
        </section>
        <section>
            <description>
                <p>The flags parameter can be set to 'L' (low), 'M' (medium), 'Q', or 'H' (high) to indicate the level of error correction in the generated QR Code.</p>
                <p>For example, from the Interactive window:</p>
            </description>
            <example><![CDATA[dim svg as c 
svg = ::QRCode::Creator::GenerateSVG("http://www.alphasoftware.com","L")
a5_show_html(svg)
]]></example>
        </section>
        <section>
            <description>To display a QR code in an Xdialog:</description>
            <example><![CDATA[svg = ::QRCode::Creator::GeneratePngFile("http://www.alphasoftware.com","c:\myfiles\qr1.png","L")
ui_dlg_box("QRCODE","{image=c:\myfiles\qr1.png}")
]]></example>       
        </section>
        <section>
            <title>QRCodes - Layout Table Reports</title>
            <description>
                <p>Layout Table Reports now support printing any cell in the Layout Table that contains a text value as a QR code.</p>
                <p>To print the contents of a cell as q QR code, simply check the 'Display QRCode for text in cell' property at the bottom of the 'Cell Contents' dialog box.</p>
            </description>
            <figure>
                <link>images/layouttablereport.gif</link>
            </figure>
        </section>
        <section>
            <description>For example, here is a report showing customers in the sample Northwind database:</description>
            <figure>
                <link>images/qrcodeReport.jpg</link>
            </figure>
        </section>
        <section>
            <videos>
                <video>
                    <name>Watch Video</name>
                    <link>https://share.vidyard.com/watch/dg3ABbMkR37darqbu9Rzge</link>
                </video>
            </videos>
        </section>
    </sections> 
    <links>
        <link link="QRCode::Creator::GenerateBmp Method">::Qrcode::Creator::GenerateBmp(c text, c flags)</link>
        <link link="QRCode::Creator::GenerateBmpFile Method">::Qrcode::Creator::GenerateBmpFile(c text, c filename, c flags)</link>
        <link link="QRCode::Creator::GenerateJPeg Method">::Qrcode::Creator::GenerateJpeg(c text, c flags)</link>
        <link link="QRCode::Creator::GenerateJpegFile Method">::Qrcode::Creator::GenerateJpegFile(c text, c filename, c flags)</link>
        <link link="QRCode::Creator::GeneratePng Method">::Qrcode::Creator::GeneratePng(c text, c flags)</link>
        <link link="QRCode::Creator::GeneratePngFile Method">::Qrcode::Creator::GeneratePngFile(c text, c filename, c flags)</link>
        <link link="QRCode::Creator::GenerateRTF Method">::Qrcode::Creator::GenerateRTF(c text, c flags, n width, n height)</link>
        <link link="QRCode::Creator::GenerateSVG Method">::Qrcode::Creator::GenerateSVG(c text, c flags)</link>
    </links>
    <see>
        <ref link="qrcode namespace">QRCode Namespace</ref>
        <ref link="qrcode_bitmap Function">Qrcode_bitmap() Function</ref>
    </see> 
</page>