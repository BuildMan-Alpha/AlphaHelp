<page>
    <shortlink>ux data controls sugnaturecapture control</shortlink>
    <topic>Signature Capture control</topic>
    <description>The Signature Capture control is used to capture a signature in an application.</description>
    <!--list:.-->
    <discussion>
        <p>A common requirement in mobile applications is the ability to capture a signature and store the signature in a database. The Signature Capture control can be used to add this functionality to a mobile application.</p>
    </discussion>
    <sections>
        <section>
            <description>
                <p>To add a Signature Capture control to a UX component, select the control from the 'Data Controls' section of the toolbox.</p>
            </description>
            <figure>
                <link>images/sigcap1.jpg</link>
            </figure>
        </section>
        <section>
            <description>
                <p>You can then define [properties of the control] in the property grid. </p>
                <p>The signature control contains two HTML elements, only one of which is visible at any time:</p>
            </description>
            <list bullet="true">
                <item>
                    <name>a canvas control for capturing the signature</name>
                </item>
                <item>
                    <name>an image control for displaying previously captured signatures</name>
                </item>
            </list>
        </section>
        <section>
            <description>
                <p>For example, in the image below, the signature capture control is showing a previously entered signature, so the image element is displayed.</p>
                <p>The 'Sign' button that appears below the image is a built-in button (i.e. it is automatically generated by the Signature Control - you can optionally turn it off).</p>
            </description>
            <figure>
                <link>images/sigcap2.jpg</link>
            </figure>
        </section>
        <section>
            <description>
                <p>When the user clicks the 'Sign' button, the 'Image' element that displays the signature is hidden and the 'Canvas' element (where the user can sign) is displayed, as shown in the image below:</p>
            </description>
            <figure>
                <link>images/sigcap3.jpg</link>
            </figure>
        </section>
        <section>
            <description>
                <p>The 'Clear', 'Cancel' and 'Accept' buttons (like the 'Sign' button in the previous image) are automatically generated by the Signature Capture Control. Like the 'Sign' button, you can optionally turn off these buttons and add your own buttons to control the Signature Capture Control. The buttons perform the following actions:</p>
            </description>
            <list>
                <item>
                    <name>Clear</name>
                    <description>Allows the user to clear the signature they have entered and start over.</description>
                </item>
                <item>
                    <name>Cancel</name>
                    <description>Switches back from 'signature capture' mode (where the 'canvas' element is shown) to 'signature display' mode, where the existing signature (if any) is shown.</description>
                </item>
                <item>
                    <name>Accept</name>
                    <description>Accepts the signature that was entered and switches back to 'signature display' mode.</description>
                </item>
            </list>
        </section>
        <section>
            <description>
                <p>The image and canvas elements that make up the Signature Capture control are contained within an outer container. When you define the properties of the Signature Capture control you specify the dimensions of the outer container separately from the dimensions of the signature capture area.</p>
                <p>The dimensions of the signature capture area must be smaller than the dimensions of the outer container (because the signature capture area has to fit within the outer container) and must not use percentage sizes. For example you can't set the width of the signature capture area to (say) '80%'. The reason for this is that you never want the signature capture area to resize (for example, when the orientation of a mobile device changes), or else a signature captured when the device was using (say) portrait mode would look distorted when you were in landscape mode.</p>
            </description>
        </section>
        <section>
            <title>Storing Signatures in a Database</title>
            <description>
                <p>When the user submits the UX component, you can store the signature that the user entered in a field in a table. The signature control must be bound to a binary field. When the UX component is submitted, the value in the signature capture control is submitted as a base64 encoded PNG image. The value is converted to a binary value before it is stored in the table field.</p>
            </description>
            <note>In the case where you are storing data in a .dbf table, you must store the data in a PNG image field.</note>
        </section>
        <section>
            <title>Customizing the Signature Capture Buttons</title>
            <description>
                <p>The property sheet for the Signature Capture control allows you to turn off the system generated buttons. Uncheck the *[ui:Include buttons to toggle between capture and display mode]* to turn off the built-in Signature Capture buttons. If you do this, then you must add your own buttons to handle capturing the signature. Here is the JavaScript code that each button must call. Replace *[js:signatureControlId]* with the name of the Signature Capture control:</p>
            </description>
            <cases>
                <case>
                    <title nested="2">Sign Button</title>
                    <example code="js"><![CDATA[{dialog.object}._functions._toggleCanvas(signatureControlId,'canvas');
{dialog.object}._functions._clearCanvas(signatureControlId);]]></example>
                </case>
                <case>
                    <title nested="2">Clear Button</title>
                    <example code="js"><![CDATA[{dialog.object}._functions._clearCanvas(signatureControlId);]]></example>
                </case>
                <case>
                    <title nested="2">Cancel Button</title>
                    <example code="js"><![CDATA[{dialog.object}._functions._toggleCanvas(signatureControlId,'image');]]></example>
                </case>
                <case>
                    <title nested="2">Accept Button</title>
                    <example code="js"><![CDATA[{dialog.object}._functions._saveCanvas(signatureControlId);
{dialog.object}._functions._toggleCanvas(signatureControlId,'image');]]></example>
                </case>
            </cases>
        </section>
        <section>
            <description>
                <p>Where *[js:signatureControlId]* is the id of the control.</p>
                <p>In order to hide the 'Sign' button when the 'Clear', 'Capture' and 'Accept' buttons are shown, and vice versa, you can hook into the 'onSignatureCaptureToggle' client-side event.</p>
            </description>
        </section>
        <section>
            <title>Validating Signature</title>
            <description>
                <p>A common requirement in a UX component is to validate that the user has signed the form when the UX is submitted. You can check that there is data in a signature capture control by adding code to the server-side dialogValidate event.  When the UX is submitted, the signature (in base64 encoded form) will be submitted in a special hidden field with the same name as the signature control and a '_HIDDENA5FN' suffix.</p>
                <p>The following code in the dialogValidate event will check to see that the user has signed the UX (assuming that the signature control was called 'SIG':</p>
            </description>
            <example code="xb"><![CDATA[function dialogValidate as p (e as p)

    dialogValidate.hasError = .f.
    dialogValidate.errorText = ""

    if e.dataSubmitted.SIG_HIDDENA5FN = "" then
        dialogValidate.hasError = .t.
        dialogValidate.errorText = "You have not signed the form."
    end if

end function]]></example>
        </section>
        <section>
            <title>Videos</title>
            <videos>
                <title>Using the Signature Capture Control</title>
                <description>A common requirement in mobile applications is the ability to capture a signature and store the signature in a database. In this video we show how this is easily achieved by placing a Signature Capture control on a UX component.</description>
                <video>
                    <name>Watch Video</name>
                    <link>https://www.viddler.com/v/403ad3b8</link>
                </video>
            </videos>
        </section>
    </sections>
    <links>
        <link link="ux%20control%20properties%20signature%20capture%20properties">properties of the control</link>
    </links>
    <see>
        <ref link="ux%20control%20properties%20signature%20capture%20properties">Signature Control Properties</ref>
        <ref link="ux%20defined%20controls%20editor%20signature%20ink">Editor - SignatureInk</ref>
    </see>
</page>