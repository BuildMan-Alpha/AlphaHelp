<page build="4478">
    <shortlink>ux controls data controls multiselect token</shortlink>
    <topic>Multi-select Token Control</topic>
    <description>The Multi-select Token control is a dropdown control with an auto-complete list that inserts tokens that can be removed by clicking an 'x' button on the token or using the delete or backspace key on the keyboard.</description>
    <discussion>
        <p>The Multi-select Token control is similar to the Edit-combo control and the Auto-suggest control. However, the selected values are displayed as 'tokens' (as shown in the image below where 'Belgium', 'Brazil' and 'Canada' are selected). A selected value can be removed by clicking on the 'x' icon in the token.</p>
    </discussion>
    <sections>
        <section>
            <figure>
                <link>images/multiselecttokens_1.gif</link>
            </figure>
        </section>
        <section>
            <description>
                <p>The user can select values from a pick list as shown in the image below. The pick-list is automatically displayed when the user types in the input control or clicks on the optional down arrow. The user can insert a token by selecting a choice from the dropdown or by typing the value into the control and then pressing the Enter key.</p>
                <p>Tokens are removed by clicking the 'x' icon or by placing the cursor after a token and using the Backspace key.</p>
            </description>
            <figure>
                <link>images/mstoken2.jpg</link>
            </figure>
        </section>
        <section>
            <description>
                <p>The choices for the pick-list can be statically defined as a fixed list of options or dynamically populated using a SQL query or Xbasic function.</p>
            </description>
        </section>
        <section>
            <title>How to Add a Multi-select Token Control to a UX Component</title>
            <description>
                <p>To add a Multi-select Token control to a UX component, select the *[ui:[More...]]* item in the *[ui:Data Controls]* section of the UX toolbox.</p>
            </description>
            <figure>
                <link>images/mst_more.jpg</link>
            </figure>
        </section>
        <section>
            <description>
                <p>The Multi-select Token control is a Data Control. This means it can be used with the UX Component's [.getValue()] and a [.setValue()] methods. When the UX component is submitted, the Multi-select Token control's value is submitted as a comma delimited list of values.</p>
                <p>For example, if there are three tokens selected with values of 'USA', 'UK' and 'Canada', the value submitted is *[xb:'USA,UK,Canada']*.</p>
                <p>To set the value in a Multi-select Token control, the values must be specified as an array. For example:</p>
            </description>
            <example code="js"><![CDATA[{dialog.object}.setValue('MY_MULTISELECT_TOKEN_CONTROL',['USA','UK','Canada']);]]></example>
        </section>
        <section>
            <title>Setting the Multi-Select Token Control Properties</title>
            <description>
                <p>To set the properties of a Multi-select Token control, click the [...] smart field button for the *[ui:Control properties]* property in the Property sheet.</p>
                <p>The configuration genie window is displayed, as shown below:</p>
            </description>
            <figure>
                <link>images/mst_propsheet.jpg</link>
            </figure>
        </section>
        <section>
            <cases>
                <case>
                    <title nested="2">Method for defining choices</title>
                    <description>
                        <p>The *[ui:Method for defining choices]* specifies how the data for the choices displayed by the control are obtained. Choices can be specified as a static list of choices, a SQL query, or an Xbasic function. The SQL query can be the name of a table in a database or a custom SQL statement (such as a call to a stored procedure.)</p>
                        <p>If the *[ui:FieldsFromTable]* option is used, two columns from the table must be selected to define the display value and stored value. The first column (Value column) defines the value for the selected token. The second column (Display column) is the value shown in the input control for the Token. An optional 3rd column can also be selected - *[ui:List Display column]*. This property defines the display value shown in the choice list. The *[ui:Display]* property of each choice will be used if no *[ui:List Display column]* is specified.</p>
                        <p>The query for a SQL statement must return a result set with either 2 or 3 columns. The first column must have a name of '*[sql:value]*', the second column must have a name of '*[sql:display]*' and the optional 3rd column must have a name of '*[sql:listDisplay]*'. For example:</p>
                    </description>
                    <example code="sql"><![CDATA[SELECT contactname as value, customerId as display from Customers]]></example>
                </case>
                <case>
                    <title nested="2">Display icon to open choice list</title>
                    <description>
                        <p>When the user begins to type in the control, the choice list is opened and is filtered on the text the user has typed. This is similar to how an *[ui:auto-suggest]* control works. The *[ui:Display icon to open choice list]* option controls whether or not an icon to open the choice list is shown. The icon can be displayed on the left or right side of the input control.</p>
                    </description>
                </case>
                <case>
                    <title nested="2">User must select from choices</title>
                    <description>
                        <p>If un-checked, the user can type in any value into the control. When the user presses Enter, the text the user has typed is added to the token list. If this property is checked, if the user types in a value and then presses Enter and the text the user has typed is not in the choice list (i.e. is not the *[ui:value]* property for one of the choices in the list), a new token is *[not]* added.</p>
                    </description>
                </case>
                <case>
                    <title nested="2">Icons</title>
                    <description>
                        <p>The icons used to display the choice list and to delete a previously selected token can be customized using the *[ui:Icons]* property. The Multi-select Token control only supports using SVG icons.</p>
                    </description>
                </case>
                <case>
                    <title nested="2">Token CSS type</title>
                    <description>
                        <p>The *[ui:Token CSS type]* property can be used to customize the appearance of the selected tokens. The *[ui:Token CSS type]* can either be set to *[ui:Default]* or *[ui:Custom]*. If *[ui:Default]* is selected, tokens can be configured to have a square or round border using the *[ui:Token border style]* property. In the images above, the border style has been set to rounded.</p>
                    </description>
                </case>
                <case>
                    <title nested="2">onChange</title>
                    <description>
                        <p>The *[ui:onChange]* event can be used to execute JavaScript code when the value in the control changes. This event will fire each time the user makes a selection from the choice list to select a new token, or when the user types in the value of a new token and presses Enter. The JavaScript code can reference *[js:this.value]*, an array of the selected token values.</p>
                    </description>
                </case>
                <case>
                    <title nested="2">valueNotInList</title>
                    <description>
                        <p>The *[ui:valueNotInList]* event can be used to execute JavaScript code when the user enters a value that is not in the list of choices. This property is only shown if the *[ui:User must select from choices]* property is unchecked. If the user types in a value that in is not in the list of choices, the code defined for this event will execute. This event can be used to add the value to a database.</p>
                    </description>
                </case>
            </cases>
        </section>
        <section>
            <title>Dynamically Populating Choices at Runtime</title>
            <description>
                <p>Choices in the Multi-select Token control can be dynamically populated at runtime by calling the control's *[js:.populate()]* method. For example, the following JavaScript will populate the choices for the Multi-Select Token control with an ID of 'MST1':</p>
            </description>
            <example code="js"><![CDATA[var _d = {
    "data":[
        {"value" : "Argentina", "display" : "Argentina"},
        {"value" : "Austria", "display" : "Austria"},
        {"value" : "Belgium", "display" : "Belgium"},
        {"value" : "Brazil", "display" : "Brazil"},
        {"value" : "Canada", "display" : "Canada"},
        {"value" : "Denmark", "display" : "Denmark"},
        {"value" : "Finland", "display" : "Finland"},
        {"value" : "France", "display" : "France"},
        {"value" : "Germany", "display" : "Germany"},
        {"value" : "Ireland", "display" : "Ireland"},
        {"value" : "Italy", "display" : "Italy"},
        {"value" : "Mexico", "display" : "Mexico"},
        {"value" : "Norway", "display" : "Norway"},
        {"value" : "Poland", "display" : "Poland"},
        {"value" : "Portugal", "display" : "Portugal"},
        {"value" : "Spain", "display" : "Spain"},
        {"value" : "Sweden", "display" : "Sweden"},
        {"value" : "Switzerland", "display" : "Switzerland"},
        {"value" : "UK", "display" : "UK"},
        {"value" : "USA", "display" : "USA"},
        {"value" : "Venezuela", "display" : "Venezuela"}
    ]
};

var obj = {dialog.object}.getControl('MST1');
obj.populate(_d);]]></example>
        </section>
        <section>
            <title>Videos</title>
            <videos>
                <title>Adding a Multi-select Tokens Control to a UX Component</title>
                <description>
                    <p> The Multi-select Tokens control operates much like the Gmail app when you address an e-mail to multiple recipients. You can type values into a control, or make selections from a drop-down choice list. Each selection is shown in the control as a 'token'. Tokens can be removed from the list of selections by either hitting the backspace key while focus is in the control, or by clicking on the 'delete' icon in the token.</p>
                    <p> A common use case for the Multi-select Tokens control is to define selection criteria for a List control. In this video we show how a Multi-select Tokens control is used to select a list of countries. The List control is then filtered to show the countries that match the selected tokens. For example, if tokens for 'USA' and 'UK' are selected, the List is filtered to show customers in either 'USA' or 'UK'</p>
                </description>
                <date>2017-07-23</date>
                <video>
                    <name>Watch Video</name>
                    <link>https://www.viddler.com/v/b0675005</link>
                </video>
                <resources>
                    <resource>
                        <link>http://www.ajaxvideotutorials.com/V12Videos/MultiSelectToken.zip</link>
                    </resource>
                </resources>
            </videos>
        </section>
    </sections>
    <links>
        <link link="ux component getvalue method">.getValue()</link>
        <link link="ux component setvalue method">.setValue()</link>
        <link href="/images/tools/ellipsesButton.png">...</link>
    </links>
</page>
