<page build="4478">
    <shortlink>ux controls data controls multiselect token</shortlink>
    <topic>Multi-select Token Control</topic>
    <description>A dropdown control with an auto-complete list that inserts tokens that can be removed by clicking an 'x' button on the token or using the delete or backspace key on the keyboard.</description>
    <discussion>
        <p>The Multi-select Token control is similar to the Edit-combo control and the Auto-suggest control. However, the selected values are displayed as 'tokens' (as shown in the image below where 'Belgium', 'Brazil' and 'Canada' are selected). A selected value can be de-selected by clicking on the icon in the token.</p>
    </discussion>
    <sections>
        <section>
            <figure>
                <link>images/multiselecttokens_1.gif</link>
            </figure>
        </section>
        <section>
            <description>
                <p>The user can select values from a pick list as shown in the image below. The pick-list can be automatically displayed when the user starts typing in the input control, or can be displayed when the user clicks on the down array (which is optionally displayed). The user can also select tokens by typing the value into the control and then pressing the Enter key.</p>
                <p>To delete a previously selected token, click on the X icon in the token, or click to the right of the last selected token and press the Backspace key.</p>
            </description>
            <figure>
                <link>images/mstoken2.jpg</link>
            </figure>
        </section>
        <section>
            <description>
                <p>The choices for the pick-list can be statically defined, can be derived from querying a SQL database, or can be computed by an Xbasic function.</p>
            </description>
        </section>
        <section>
            <title>How to Add a Multi-select Token Control to a UX Component</title>
            <description>
                <p>To add a Multi-select Token control to your UX component, select the *[ui:[More...]]* item in the *[ui:Data Controls]* section of the UX toolbox.</p>
            </description>
            <figure>
                <link>images/mst_more.jpg</link>
            </figure>
        </section>
        <section>
            <description>
                <p>The Multi-select Token control is a Data Control. This means it has a .getValue() and a .setValue() method, just like other Data Controls. When the UX is submitted, the data in the Multi-select Token control are submitted as a comma delimited list of token values.</p>
                <p>For example, if there are three tokens selected with values of 'USA', 'UK' and 'Canada', the value submitted is 'USA,UK,Canada'</p>
                <p>To set the value in a Multi-select Token control you must specify an array of values. For example:</p>
            </description>
            <example code="js"><![CDATA[{dialog.object}.setValue('MY_MULTISELECT_TOKEN_CONTROL',['USA','UK','Canada']);]]></example>
        </section>
        <section>
            <title>Setting the Multi-Select Token Control Properties</title>
            <description>
                <p>To set the properties of a Multi-select Token control, click the smart field for the Control properties property in the Property sheet.</p>
                <p>The configuration genie window is displayed, as shown below:</p>
            </description>
            <figure>
                <link>images/mst_propsheet.jpg</link>
            </figure>
        </section>
        <section>
            <cases>
                <case>
                    <title nested="2">Method for defining choices</title>
                    <description>
                        <p>Allows you to specify how the data for the choices displayed by the control are obtained. You can enter a static list of choices, you can specify a SQL query, or you can specify an Xbasic function that will compute the choices. If you specify a SQL query than you must either specify the name of the table that will be queried, or you can specify your own SQL statement (which could be a call to a stored procedure).</p>
                        <p>In the case where you select the FieldsFromTable option, you must specify two columns from the table. The first column (Value column) contains the value that the selected token will have (i.e. just like a Dropdown box, each choices has both a Display property and a Value property - The Display property defined what is displayed in the choice list and the Value property is the actual value of the token). You can also specify an optional 3rd column - List Display column. This property defines the display value shown in the choice list. If you do not specify this property, the choice list shows the Display property of each choice.</p>
                        <p></p>
                    </description>
                    <example code="sql"><![CDATA[SELECT contactname as value, customerId as display from Customers]]></example>
                </case>
                <case>
                    <title nested="2">Display icon to open choice list</title>
                    <description>
                        <p>When the user begins to type in the control, the choice list is opened and is filtered on the text the user has typed. This is similar to how an auto-suggest control works. However, you can also specify that an icon should be displayed (either to the right or left of the control) that the user can click on to show the choice list.</p>
                    </description>
                </case>
                <case>
                    <title nested="2">User must select from choices</title>
                    <description>
                        <p>If un-checked, the user can type in any value into the control. When the user presses  Enter the text the user has typed is added to the token list. If this property is checked, if the user types in a value and then presses Enter and the text the user has typed is not in the choice list (i.e. is not the value property for once of the choices in the list), a new token is not added.</p>
                    </description>
                </case>
                <case>
                    <title nested="2">Icons</title>
                    <description>
                        <p>You can customize the icons used to display the choice list and to delete a previously selected token, but you must select SVG icons.</p>
                    </description>
                </case>
                <case>
                    <title nested="2">Token CSS type</title>
                    <description>
                        <p>Can be either Default or Custom - allows you to customize the appearance of the selected tokens. If you select Default, you can set the tokens to have square or rounded borders by setting the Token border style property. In the images above, the border style has been set to rounded.</p>
                    </description>
                </case>
                <case>
                    <title nested="2">onChange</title>
                    <description>
                        <p>You can specify Javascript code to run when the value in the control changes. This event will fire each time the user makes a selection from the choice list to select a new token, or when the user types in the value of a new token and presses Enter. Your code can reference this.value, and array of the selected token values.</p>
                    </description>
                </case>
                <case>
                    <title nested="2">valueNotInList</title>
                    <description>
                        <p>You can specify Javascript code to run when the user enters a value that is not in the list of choices. This property is only shown if the User must select from choices property is false. If the user types in a value and then pressed Enter, if the value the user typed in is not in the list of choices, the code defined for this event will execute. You can use this event to add the value the user typed in to a database.</p>
                    </description>
                </case>
            </cases>
        </section>
        <section>
            <title>Dynamically Populating Choices at Runtime</title>
            <description>
                <p>You can dynamically populate the choices in the Multi-select Token control at runtime by calling the control's .populate() method. For example, assume you have a Multi-select Token control called 'MST1'. You can use the following Javascript t to populate the control's choices:</p>
            </description>
            <example code="js"><![CDATA[var _d = {
    "data":[
        {"value" : "Argentina", "display" : "Argentina"},
        {"value" : "Austria", "display" : "Austria"},
        {"value" : "Belgium", "display" : "Belgium"},
        {"value" : "Brazil", "display" : "Brazil"},
        {"value" : "Canada", "display" : "Canada"},
        {"value" : "Denmark", "display" : "Denmark"},
        {"value" : "Finland", "display" : "Finland"},
        {"value" : "France", "display" : "France"},
        {"value" : "Germany", "display" : "Germany"},
        {"value" : "Ireland", "display" : "Ireland"},
        {"value" : "Italy", "display" : "Italy"},
        {"value" : "Mexico", "display" : "Mexico"},
        {"value" : "Norway", "display" : "Norway"},
        {"value" : "Poland", "display" : "Poland"},
        {"value" : "Portugal", "display" : "Portugal"},
        {"value" : "Spain", "display" : "Spain"},
        {"value" : "Sweden", "display" : "Sweden"},
        {"value" : "Switzerland", "display" : "Switzerland"},
        {"value" : "UK", "display" : "UK"},
        {"value" : "USA", "display" : "USA"},
        {"value" : "Venezuela", "display" : "Venezuela"}
    ]
};

var obj = {dialog.object}.getControl('MST1');
obj.populate(_d);]]></example>
        </section>
        <section>
            <title>Videos</title>
            <videos>
                <title>Adding a Multi-select Tokens Control to a UX Component</title>
                <description>
                    <p> The Multi-select Tokens control operates much like the Gmail app when you address an e-mail to multiple recipients. You can type values into a control, or make selections from a drop-down choice list. Each selection is shown in the control as a 'token'. Tokens can be removed from the list of selections by either hitting the backspace key while focus is in the control, or by clicking on the 'delete' icon in the token.</p>
                    <p> A common use case for the Multi-select Tokens control is to define selection criteria for a List control. In this video we show how a Multi-select Tokens control is used to select a list of countries. The List control is then filtered to show the countries that match the selected tokens. For example, if tokens for 'USA' and 'UK' are selected, the List is filtered to show customers in either 'USA' or 'UK'</p>
                </description>
                <date>2017-07-23</date>
                <video>
                    <name>Watch Video</name>
                    <link>https://www.viddler.com/v/b0675005</link>
                </video>
                <resources>
                    <resource>
                        <link>http://www.ajaxvideotutorials.com/V12Videos/MultiSelectToken.zip</link>
                    </resource>
                </resources>
            </videos>
        </section>
    </sections>
</page>
