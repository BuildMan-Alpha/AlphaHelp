<page>
    <shortlink>Video Recording in Mobile Applications</shortlink>
    <topic>Video Recording in Mobile Applications</topic>
    <description>Capture and display vidoes with the Video Player and Video Recorder/Player UX controls. Rich Data Capture.</description>
    <discussion>
        <p>Video recording can be added to PhoneGap applications. Video recording will work in disconnected application. You can record as many videos as you want, and then when you sync you data with the server, the video files can be uploaded to the server. In this respect, syncing video files is identical to the way pictures and audio recordings are synced when the user has an internet connection.</p>
        <p>When you sync data on your mobile device you can specify that media files (pictures, audio recordings and videos) should be uploaded to Amazon S3, rather than the Alpha server. Since media files can be quite large, uploading media files to S3 is often preferable to uploading these files to an Alpha server.</p>
        <p>To support video recording a playback, two new UX controls are available:</p>
    </discussion>
    <sections>
        <section>
            <cases>
                <case>
                    <description>Video Player</description>
                </case>
                <case>
                    <description>Video Recorder/Player (PhoneGap Applications Only)</description>
                </case>
            </cases>
        </section>
        <section>
            <description>
                <p>The Video Player control is used when you only want to allow users to play back previously created video files. The Video Recorder/Player control will allow playback of previously created videos and recording of new videos.</p>
                <p>To add a Video Player or Video Recorder/Player control to your UX component select the [More...] option in the list of Data Controls.</p>
            </description>
            <figure>
                <link>images/morecontrols.jpg</link>
            </figure>
        </section>
        <section>
            <description>
                <p>Both the Video Player and Video Recorder/Player controls are standard 'data controls'. This means that they have *[js:.setValue()]* and *[js:.getValue()]* methods, like all other data controls.</p>
                <p>The *[js:.setValue()]* method is used to set the control to the URL of a video file.</p>
                <p>The *[js:.getValue()]* method is used to read the current value of the control.</p>
                <p>For example, in a PhoneGap application, after you end a video recording, if you called the *[js:.getValue()]* method for the control, the filename of the video that had just been recorded would be returned.</p>
                <p>You can also convert the type of an existing control to a Video Player or Video Recorder/Player control by clicking on the smart field in the Control type prompt.</p>
            </description>
            <figure>
                <link>images/controltype.jpg</link>
            </figure>
        </section>
        <section>
            <description>
                <p>In the image below, the Video Player control is shown. Since the Player does not support recording, the control is not limited to applications that are running under PhoneGap.</p>
                <p>The VCR buttons allow you to start, pause and resume playback. The fast forward and back buttons behave as follows:</p>
            </description>
            <list>
                <item>
                    <name-title>Action</name-title>
                    <description-title>Behavior</description-title>
                </item>
                <item>
                    <name>Single tap</name>
                    <description>Skip forward/back by 2 seconds</description>
                </item>
                <item>
                    <name>Tap and hold</name>
                    <description>Step forward or backwards through the video</description>
                </item>
            </list>
        </section>
        <section>
            <description>The double sided arrow icon at the right edge will allow you to switch into full screen mode.</description>
            <figure>
                <link>images/videoplayer.jpg</link>
            </figure>
        </section>
        <section>
            <description>The control also shows a progress indicator and how long the video has been playing</description>
            <figure>
                <link>images/videoprogress.jpg</link>
            </figure>
        </section>
        <section>
            <description>The appearance and behavior of the Video Recorder/Player control is essentially the same as the Video Player control, except that the Recorder/Player control include a button to switch from Playback mode to record mode:</description>
            <figure>
                <link>images/videorecorderandplayer.gif</link>
            </figure>
        </section>
        <section>
            <title>Configuring the Video Recorder/Player and Video Player Controls</title>
            <description>To configure the Video controls, click the smart field for the *[ui:Control Properties]* property.</description>
            <figure>
                <link>images/videocontrolproperties1.gif</link>
            </figure>
        </section>
        <section>
            <description>
                <p>The Properties dialog for the Video Recorder/Player controls is shown below.</p>
                <p>You can set the maximum allowed length (in seconds) of the video and you can specify code for the various events that the control fires.</p>
            </description>
            <figure>
                <link>images/videocontrolproperties1.jpg</link>
            </figure>
        </section>
        <section>
            <title>How to Configure a PhoneGap Application to Support Video Recording/Playback</title>
            <description>
                <p>Let's assume you want to build a PhoneGap application that will allow users to enter/edit data and record videos. The application must work offline and when a connection is available the data must be synced to a SQL database on the server and the videos must be uploaded to S3. </p>
                <p>This tutorial will highlight the key configuration settings you will need to make as you build the UX component.</p>
                <p>Let's assume that the underlying schema of the table in which data must be stored is as follows:</p>
            </description>
            <list>
                <item>
                    <name-title>Field</name-title>
                    <description-title>Description</description-title>
                </item>
                <item>
                    <name>id</name>
                    <description>int (auto-increment) - primary key</description>
                </item>
                <item>
                    <name>field1</name>
                    <description>a character field to contain textual information</description>
                </item>
                <item>
                    <name>videofilename</name>
                    <description>a character field that contains the URL of the video</description>
                </item>
            </list>
        </section>
        <section>
            <description>If the videos are being uploaded to Amazon S3 when data are synced, the *[xb:videofilename]* field will contain values like:</description>
            <example><![CDATA[ http://alphamediacapture.s3.amazonaws.com/video1.MOV]]></example>
        </section>
        <section>
            <description>On the other hand, if the video are being uploaded to the Alpha server, the *[xb:videofilename]* field will contain values like:</description>
            <example><![CDATA[videofiles/video1.MOV]]></example>
        </section>
        <section>
            <description>(assuming that the video files are uploaded to a folder called '*[xb:videofiles]*' in the Webroot).</description>
            <cases>
                <case>
                    <description>*[Step 1]* - Create a UX control with a List/Detail view showing data from the SQL table. You can use the List Control Quick Setup genie to quickly create the List/Detail view.</description>
                    <figure>
                        <link>images/listcontrolquicksetup.jpg</link>
                    </figure>
                </case>
                <case>
                    <description>
                        <p>*[Step 2]* - Configure the fields in the List. After you have created the List you must edit the List and on the Fields tab, set the control type of the *[xb:videoFilename]* field to *[ui:Video]*.</p>
                        <p>In addition, if the video files are going to be uploaded to the Alpha server (as opposed to Amazon S3) you will also need to specify the folder on the Alpha server where the video files should be stored. To do this, click the smart field for the *[ui:Video capture and storage properties]*. </p>
                    </description>
                    <figure>
                        <link>images/listcontrolconfigurefields.jpg</link>
                    </figure>
                </case>
                <case>
                    <description>
                        <p>The Video Capture Properties dialog is shown below. The *[ui:Upload folder]* is where you specify the folder name.</p>
                        <p>For example, if you specify:</p>
                    </description>
                    <example><![CDATA[myVideos]]></example>
                </case>
                <case>
                    <description>The videos will be stored in a folder called *[xb:myVideos]* that is relative to the Webroot. It is recommended that you specify a folder that is relative to the webroot. This will allow you to upload videos from the server to the device for storage in the device's file system so that videos are available for playback on your device even when you have no internet connection.</description>
                    <figure>
                        <link>images/videocaptureproperties.jpg</link>
                    </figure>
                </case>
                <case>
                    <description>
                        <p>In addition to specifying the *[ui:Upload folder]* you should also specify the *[ui:Stored filename transformation expression]*. This property defines what gets stored in the *[xb:videofilename]* field in the database.  The builder for this property allows you to use 2 special placeholders: *[xb:<![CDATA[<Filename>]]>]* - the fully qualified video filename, and *[xb:<![CDATA[<ShortFileName>]]>]* - the name of the video file with no drive and path information.</p>
                        <p>You will typically want to store a filename that is relative to the Webroot. For example, if the *[ui:Upload folder]* was set to *[xb:myVideos]* then you should set this property to:</p>
                    </description>
                    <example><![CDATA["myVideos/<shortFileName>"]]></example>
                </case>
                <case>
                    <description>With this setting, the actual data stored in the *[xb:vidoefilename]* field in the database will look something like this:</description>
                    <example><![CDATA[myVideos/video1.MOV]]></example>
                    <note>If your videos are being uploaded to Amazon S3, it is not necessary to specify Video Capture Properties.</note>
                </case>
                <case>
                    <description>
                        <p>*[Step 3]* - Specify if media files (pictures, audios and videos) should be uploaded to the Alpha server or Amazon S3 when data are synced.</p>
                        <p>To do this, edit the List properties and go to the Detail View tab. Then click the smart field for the *[ui:Media files (photos, videos, audio recordings, other) settings]* property.</p>
                    </description>
                    <figure>
                        <link>images/listdetailviewtab.jpg</link>
                    </figure>
                </case>
                <case>
                    <description>
                        <p>This dialog will allow you to specify if media files are uploaded to the Alpha server or to Amazon S3.</p>
                        <p>The dialog will also allow you to specify if media files should be *[downloaded]* to the device when data are loaded into the List control. If you download media files to the device the media files are stored in the file system on the device and will be available even when there is no connection.</p>
                    </description>
                </case>
                <case>
                    <description>
                        <p>*[Step 4]* - Set the control type for the *[xb:videoFilename]* control in the List's Detail View to a Video Recorder/Player control. When the List Quick Setup Genie created the List's Detail View, it set the control type of the *[xb:videoFilename]* field to a textbox. To change the control type to a Video Recorder/Player, click the Control type smart field and select the Video Recorder/Player control.</p>
                    </description>
                    <figure>
                        <link>images/controltypeselector.gif</link>
                    </figure>
                </case>
                <case>
                    <description>
                        <p>Having configured the List control and its Detail View, you are now ready to build your PhoneGap application.</p>
                    </description>
                    <note>To see a list of PhoneGap plugins that you should enable when you build your PhoneGap application, download the sample component using the link shown below and then examine the setting in the component's PhoneGap default settings property.</note>
                </case>
            </cases>
        </section>
        <section>
            <description>[Download Component]</description>
        </section>
    </sections>
    <links>
        <link href="http://www.ajaxvideotutorials.com/V12Videos/mediaFilesWithVideo.zip">Download Component</link>
    </links>

    <terms>rich data capture,data integraion,phonegap,mobile apps</terms>
</page>