<page>
    <shortlink>uxprops local storage persist variable values</shortlink>
    <topic>Persist variable values</topic>
    <description>If enabled, all variables will be saved to Local Storage when the value in any control is changed.</description>
    <sections>
        <section>
            <description>
                <p>If the *[ui:Persist variable values]* property is enabled, the component will saves variable values to Local Storage whenever a value changes in a control, such as editing a TextBox or selecting a value from a DropdownBox control. For example, if the user is making changes to a record using a List Detail View and exits the app, their changes are retained in the Detail View controls -- even if they do not save them before leaving the app. When the user returns to the app, the variables can be restored, allowing them to continue from where they left off.</p>
            </description>
        </section>
        <section>
            <description>
                <p>The following properties are exposed when *[ui:Persist variable values]* is enabled:</p>
            </description>
            <list bullet="true">
                <item>
                    <name>[Variables to NOT persist]</name>
                </item>
                <item>
                    <name>[Restore variables from Local Storage]</name>
                </item>
            </list>
        </section>
        <section>
            <title>Persisting Variables</title>
            <description>
                <p>Variables are persisted whenever a 'trigger' event occurs. For some controls (e.g. Radiobutton,. Checkbox, Slider, etc.), the 'trigger' is when the value in the control is changed. For textbox and textarea controls, the 'trigger' is when the control is blurred (i.e. loses focus) and the value in the field has changed.</p>
                <p>You can also manually trigger the event by calling the UX component's *[js:{dialog.object}.persistVariablesToLocalStorage()]* method.</p>
                <p>When variables are persisted to Local Storage various client-side events are fired. </p>
                <p>The *[js:onBeforePersistControlValuesToLocalStorage]* event fires first. This event fires before the variables are persisted. Its purpose is to allow you to specify any additional data that you want to persist along with the variable values. Your code can set the *[js:e.userData]* property. The value you set in this property will be available when the *[js:onRestoreVariablesFromLocalStorage]* fires.</p>
                <p>The *[js:localStorageEncryption]* event fires next. The event allows you to add your own encrypting to the JSON data that is about to be stored to Local Storage. The event handler gets the JSON data in the e.data property and the event handler can set e.data to the encrypted string.</p>
                <p>When the component is loaded if the *[ui:Restore variables from Local Storage]* setting is true, then the previously persisted variable values (if any) will be restored.</p>
                <p>The *[js:onRestoreVariablesFromLocalStorage]* event will fire after the data has been restored. This event handler can access the *[js:e.userData]* property which was optionally defined when the *[js:onBeforePersistControlValuesToLocalStorage]* event was fired.</p>
                <p>If the 'Restore variables from Local Storage' property is set of false, you can still manually restore persisted variables by calling the UX component's *[js:{dialog.object}._restoreVariablesFromLocalStorage()]* method.</p>
            </description>
        </section>
    </sections>
    <links>
        <link link="uxprops local storage variables donot persist">Variables to NOT persist</link>
        <link link="uxprops local storage restore variables">Restore variables from Local Storage</link>
    </links>
    <see>
        <ref link="onbeforepersistcontrolvaluestolocalstorage">onBeforePersistControlValuesToLocalStorage</ref>
        <ref link="onRestoreVariablesFromLocalStorage">onRestoreVariablesFromLocalStorage</ref>
        <ref link="localstorageencryption">localStorageEncryption</ref>
        <ref link="ux%20component%20persistvariablestolocalstorage%20method">{dialog.object}.persistVariablesToLocalStorage Method</ref>
        <ref link="ux%20component%20_restorevariablesfromlocalstorage%20method">{dialog.object}._restoreVariablesFromLocalStorage Method</ref>
    </see>
</page>