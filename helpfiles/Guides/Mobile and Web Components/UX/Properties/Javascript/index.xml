<page>
    <shortlink>UX Properties Javascript</shortlink>
    <topic>Javascript</topic>
    <description>Javascript properties allow you to define external Javascript libraries and files that are used by the UX Component. You can also create Javascript Actions: client-side code created with Action Javascript that can be called throughout the UX Component.</description>
    <groups>
        <group>
            <title>Javascript Linked files</title>
            <sections>
                <section>
                    <description>
                        <p>You can link one or more external Javascript files in a component using the *[ui:Javascript Linked files]* property. Multiple files can be linked to a component.</p>
                    </description>
                    <figure>
                        <link>images/jsLinkedFiles1.png</link>
                    </figure>
                </section>
                <section>
                    <title>Specifying a File</title>
                    <description>
                        <p>You can specify Javascript files to be linked as a comma delimited list in the Properties pane of the UX Component.</p>
                    </description>
                    <example>
                        <![CDATA[js/javascriptFile1.js,js/javascriptFile2.js]]>
                    </example>
                </section>
                <section>
                    <description>
                        <p>Clicking the [...] button opens the *[ui:Specify the Javascript FIles to Load]* dialog. In this dialog, you can specify additional properties for a Javascript file, including a function that should be called after the Javascript file is loaded and any special directives. Enter one Javascript file per line in the *[ui:Specify the Javascript Files to Load]* dialog.</p>
                        <p>To call a function after the file is loaded, specify the function name after the filename with a pipe '|' character placed between the name of the file and the function name:</p>
                    </description>
                    <example>
                        <![CDATA[js/fancybox/jquery.fancybox-1.3.1.js|bindFancyBox]]>
                    </example>
                </section>
                <section>
                    <title>Special Directives</title>
                    <description>Javascript files are typically loaded after the user-defined Javascript functions are loaded. There are special directives you can use that change this behavior, allowing you to load Javascript files before user-defined functions are loaded or specify that Javascript files be loaded in the *[html:
                        <![CDATA[<head>]]>]* portion of the containing .a5w page.
                    </description>
                </section>
                <section>
                    <list>
                        <item>
                            <name-title>Special Directive</name-title>
                            <description-title>Description</description-title>
                        </item>
                        <item>
                            <name>{BeforeFunctions}</name>
                            <description>Indicates that the Javascript file should be loaded before the user-defined Javascript functions (defined in the *[ui:Javascript Functions]* property) are loaded.</description>
                        </item>
                        <item>
                            <name>{HeadSection}</name>
                            <description>Indicates that the Javascript file should be loaded in the *[html:
                                <![CDATA[<head>]]>]* section of the .a5w page that loads the UX Component.
                            </description>
                        </item>
                        <item>
                            <name>{Raw}</name>
                            <description>Prevents post-processing of the file contents loaded in the head section in Working Preview.</description>
                        </item>
                    </list>
                </section>
                <section>
                    <title>{BeforeFunctions} Directive</title>
                    <description>
                        <p>The *[js:{BeforeFunctions}]* directive can be used to load Javascript files before user-defined functions are loaded.</p>
                        <p>*[IMPORTANT]* - Javascript in linked files is loaded asynchronously. That means that even if you specify the *[js:{BeforeFunctions}]* directive for a Javascript file, you cannot necessarily immediately call functions defined in the Javascript file.</p>
                    </description>
                </section>
                <section>
                    <title>{HeadSection} Directive</title>
                    <description>The *[js:{HeadSection}]* directive will load the Javascript file in the *[html:
                        <![CDATA[<head>]]>]* section of the .a5w page containing the UX Component.
                    </description>
                    <cases>
                        <case>
                            <title>Notes About the {HeadSection} Directive</title>
                            <description>It is meaningless to specify the name of a Javascript function to call after the Javascript is loaded.</description>
                        </case>
                        <case>
                            <description>Javascript that is loaded in the *[html:
                                <![CDATA[<head>]]>]* section is loaded synchronously.
                            </description>
                        </case>
                        <case>
                            <description>If the UX Component is opened via an Ajax callback, the Javascript will not be loaded. You need to load the Javascript in the .a5w page that laods the top-most parent component.</description>
                        </case>
                        <case>
                            <description>Contrast the *[js:{HeadSection}]* option with specifying linked Javascript files in the Project Properties. Linked Javascript files specified in the Project Properties are loaded for every .a5w page, whereas this option only loads the Javascript for the .a5w page that runs the component.</description>
                        </case>
                    </cases>
                </section>
                <section>
                    <title>{Raw} Directive</title>
                    <note>Only applies to Working Preview for files loaded using the *[js:{HeadSection}]* directive.</note>
                </section>
                <section>
                    <description>
                        <p>The *[js:{Raw}]* directive only applies if you also have files that use the *[js:{HeadSection}]* directive. When a Javascript file is loaded, additional post-processing is performed to fix image references so they will display correctly in Working Preview. Post-processing also replaces any placeholders, such as *[js:{dialog.object}]*, present in the Javascript file.</p>
                        <p>If you are linking a large Javascript file, it can slow down the performance of Working Preview. You can prevent this post-processing from happening by including the *[js:{Raw}]* directive. If a Javascript file is loaded with the *[js:{Raw}]* directive, no post-processing will be done in Working Preview.</p>
                        <p>The *[js:{Raw}]* directive is ignored in all other contexts.</p>
                    </description>
                </section>
            </sections>
        </group>
        <group>
            <title>Javascript Actions</title>
            <sections>
                <section>
                    <description>
                        <p>Define Javascript functions using the Action Javascript builder.</p>
                        <p>This is conceptually similar to defining a Javascript function that can be called from event handlers in your UX Component, except that rather than writing the Javascript function by hand, you can use the Action Javascript builders to write the code for you.</p>
                    </description>
                </section>
            </sections>
        </group>
        <group>
            <title>Google visualization libraries</title>
            <sections>
                <section>
                    <description>The *[ui:Google visualization libraries]* property lets you include Google's Visualization Libraries for creating charts in your UX Component. The libraries you specify will be dynamically loaded when the UX Component is loaded. To include visualization libraries, click the [...] button to open the *[ui:Select Google Visualization Libraries to Load]* dialog.</description>
                    <note>It is no longer necessary to go to the Web Project Properties dialog to specify that the Google JSAPI library should be loaded. The Visualization libraries are now loaded automatically by the UX as needed.</note>
                    <figure>
                        <title>The Select Google Visualization Libraries to Load dialog.</title>
                        <link>images/googleVizLib.png</link>
                    </figure>
                </section>
                <section>
                    <description>The available libraries are listed below:</description>
                    <list>
                        <item>
                            <name-title>Library</name-title>
                            <description-title>Description</description-title>
                        </item>
                        <item>
                            <name>corechart</name>
                            <description>For creating Area, Classic Bar, Bubble, Candlestick, Column, Combo, Diff, Donut, Histogram, Interval, Line, Pie, Scatter, Stepped Tree, Trendline, and Waterfall charts.</description>
                        </item>
                        <item>
                            <name>gauge</name>
                            <description>For creating Gauge Charts.</description>
                        </item>
                        <item>
                            <name>geochart</name>
                            <description>For creating Geo Charts.</description>
                        </item>
                        <item>
                            <name>table</name>
                            <description>For creating Table Charts.</description>
                        </item>
                        <item>
                            <name>treemap</name>
                            <description>For creating Tree Map Charts.</description>
                        </item>
                        <item>
                            <name>orgchart</name>
                            <description>For creating Org Charts.</description>
                        </item>
                        <item>
                            <name>timeline</name>
                            <description>For creating Timelines.</description>
                        </item>
                        <item>
                            <name>bar</name>
                            <description>For creating more complex Bar and Column Charts, including Material Bar, Material Column, Dual-X, Dual-Y, and Top-X Charts.</description>
                        </item>
                        <item>
                            <name>calendar</name>
                            <description>For creating a Calendar.</description>
                        </item>
                        <item>
                            <name>gantt</name>
                            <description>For creating a Gantt chart.</description>
                        </item>
                        <item>
                            <name>map</name>
                            <description>For adding a map visualization.</description>
                        </item>
                        <item>
                            <name>sankey</name>
                            <description>For creating Sankey diagrams.</description>
                        </item>
                        <item>
                            <name>wordtree</name>
                            <description>For creating word trees.</description>
                        </item>
                        <item>
                            <name>scatter</name>
                            <description>For creating scatter plots.</description>
                        </item>
                    </list>
                </section>
                <section>
                    <description>To learn more about Google's Visualization Libraries, visit the *[extlink:Google Charts@https://developers.google.com/chart/interactive/docs/]* documentation.</description>
                </section>
            </sections>
        </group>
        <group>
            <title>HTML5 Image capture</title>
            <sections>
                <section>
                    <description>
                        <p>The *[ui:HTML5 Image capture]* property defines whether or not Javascript libraries for HTML5 image capture should be included when the UX Component is loaded/deployed.</p>
                        <p>If the UX Component uses HTML5 to access the camera or photo library on a mobile device (or a desktop web app that is running on a browser with HTML5 image capture support), check this box to ensure the necessary Javascript libraries are loaded.</p>
                    </description>
                </section>
            </sections>
        </group>
        <group build="4582">
            <title>Keyboard shortcuts</title>
            <sections>
                <section>
                    <description>
                        <p>Keyboard shortcuts allow you to invoke actions when one or more keys are pressed.</p>
                        <p>Keyboard shortcuts can be created for a UX component. The shortcuts can run Javascript Actions, click a button, or execute arbitrary Javascript code.</p>
                        <p>To define Keyboard shortcuts, click the smart field for the *[ui:Keyboard shortcuts]* property in the UX builder.</p>
                    </description>
                </section>
                <section>
                    <figure>
                        <link>images/keyboardShortcuts1.png</link>
                    </figure>
                </section>
                <section>
                    <description>
                        <p>This will open up the genie where you can define key combinations and the corresponding action for the key combination.</p>
                    </description>
                    <figure>
                        <link>images/keyboardShortcuts2.png</link>
                    </figure>
                </section>
                <section>
                    <title>Videos</title>
                    <videos>
                        <title>Adding Keyboard Shortcuts to a Component</title>
                        <description>
                            <p>In this video we show how you can add support for keyboard shortcuts to a UX component. Keyboard shortcuts can speed up a user's interaction with a component. For example, you could configure the Ctrl-S key as a shortcut for saving the data in the a UX.</p>
                        </description>
                        <date>2017-09-02</date>
                        <video>
                            <name>Watch Video</name>
                            <link></link>
                        </video>
                        <resources>
                            <resource>
                                <link>http://www.ajaxvideotutorials.com/V12Videos/keyboardShortcuts.zip</link>
                            </resource>
                        </resources>
                    </videos>
                </section>
            </sections>
        </group>
    </groups>
    <links>
        <link href="/images/tools/ellipsesButton.png">...</link>
    </links>
</page>