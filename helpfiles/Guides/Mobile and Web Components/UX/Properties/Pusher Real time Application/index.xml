<page build="6402">
    <shortlink>ux pusher apps</shortlink>
    <topic>Real-time Applications using the Pusher Service</topic>
    <description>Add messaging to your application with the Pusher service.</description>
    <discussion>
        <p>Real-time applications are typically built using web sockets. Setting up web sockets can be tricky, especially if an application is behind a load balancer or running on Alpha Cloud. An alternative to setting up web sockets is a 3rd party service called Pusher. You can easily create real-time applications using the Pusher service. You can sign up for a free Pusher account at *[extlink:www.pusher.com@https://www.pusher.com]*.</p>
    </discussion>
    <sections>
        <section>
            <description>
                <p>Pusher applications follow a publish/subscribe model. Components can subscribe to channels. Server-side code can broadcast messages on channels. When a message is broadcast on a channel, all clients that are subscribed to that channel will receive the message.</p>
            </description>
        </section>
        <section>
            <title>Configuring a Component as a Pusher Application</title>
            <description>
                <p>To configure a UX component as a Pusher application, go the the Pusher Real-time Application section in the UX Builder Properties and check the Pusher application property.</p>
            </description>
            <figure>
                <link>images/pusher1.gif</link>
            </figure>
        </section>
        <section>
            <description>
                <p>This will enable the Pusher configuration property where you can specify your Pusher account credentials and other properties.</p>
            </description>
            <figure>
                <link>images/pusher2.gif</link>
            </figure>
        </section>
        <section>
            <description>
                <p>The Pusher Configuration dialog is shown below.</p>
            </description>
            <figure>
                <link>images/pusher4.jpg</link>
            </figure>
        </section>
        <section>
            <description>
                <p>This dialog allows you to specify the properties listed below. These properties correspond to your Pusher account:</p>
                <p>
                    <list bullet="true">
                        <item>
                            <name>*[ui:App Id]*</name>
                        </item>
                        <item>
                            <name>*[ui:Key]*</name>
                        </item>
                        <item>
                            <name>*[ui:Secret]*</name>
                        </item>
                        <item>
                            <name>*[ui:Cluster]*</name>
                        </item>
                    </list>
                </p>
                <p>You must also specify the URL from where the Pusher JavaScript library will be loaded.</p>
                <p>Finally, you can specify the channel subscriptions.</p>
            </description>
            <note>
                <p>You can leave the Channels prompt blank and use Action Javascript to create an action that subscribes to a channel on-demand.</p>
            </note>
        </section>
        <section>
            <title>Action Javascript</title>
            <description>
                <p>Action Javascript allows you to perform certain Pusher service actions.</p>
            </description>
            <figure>
                <link>images/pusher5.jpg</link>
            </figure>
        </section>
        <section>
            <title nested="2">Pusher Service Actions</title>
        </section>
        <section>
            <description>
                <p>
                    <list>
                        <item>
                            <name-title>Action</name-title>
                            <description-title>Description</description-title>
                        </item>
                        <item>
                            <name>Initialize Pusher Service</name>
                            <description>In most cases the Pusher service is initialized when the component is initially rendered. However, in the case of a PhoneGap application, or an Application Cache application, it is possible that a network connection is not available at the time the application is launched. If so, the Pusher server will not be initialized when the application is launched and it will have to be initialized later, when a network connection is available.</description>
                        </item>
                        <item>
                            <name>Subscribe to a channel</name>
                            <description>
                                <p>Allows you to subscribe to messages that are broadcast on a particular channel. You can optionally specify an event name and a corresponding handler. By default, the client-side onPusherMessage event is fired when a Pusher message is received. However, you can specify custom Javascript code to call when a message is received. You can also specify a custom event name. For example, you might specify an event name of 'event1' in this action and you might specify the following Javascript handle this event:</p>
                                <p>
                                    <example code="js"><![CDATA[alert('The following message was received: ' + data)]]></example>
                                </p>
                            </description>
                        </item>
                        <item>
                            <name>Un-subscribe from a channel</name>
                            <description>Allows you to stop listening for messages on a particular channel. You can stop listening to all events on the channel (by specifying &lt;all&gt; as the event name), or just a specified event name.</description>
                        </item>
                        <item>
                            <name>Send a message</name>
                            <description>Sends a message on a specified channel, You can optionally specify an event name. If you leave the event name blank (or you specify &lt;default&gt;) , the default event name of __pusherEvent is used. If you subscribed to this channel using the Subscribe to a channel action, and you broadcast the message with an event name other than &lt;default&gt;, clients who are subscribed to the channel will handle the message using either the onPusherMessage client side event (if you did not specify a handler when you subscribed), or using the custom Javascript handler that you defined (when you subscribed).</description>
                        </item>
                    </list>
                </p>
            </description>
        </section>
        <section>
            <title>Client-side Events</title>
            <description>
                <p>The onPusherMessage client-side event fires when a message is broadcast on a channel that the client is subscribed to. The code in your client-side event handler can reference these properties:</p>
                <p>
                    <list>
                        <item>
                            <name-title>Property</name-title>
                            <description-title>Description</description-title>
                        </item>
                        <item>
                            <name>*[js:e.message]*</name>
                            <description>The text of the message that was received</description>
                        </item>
                        <item>
                            <name>*[js:e.channel]*</name>
                            <description>The channel that the message was broadcast on</description>
                        </item>
                        <item>
                            <name>*[js:e.eventName]*</name>
                            <description>Will typically be __pusherEvent (unless a message is broadcast on the channel specifying a different event name)</description>
                        </item>
                    </list>
                </p>
            </description>
        </section>
        <section>
            <title>Broadcasting Messages</title>
            <description>
                <p>Messages are broadcast using server-side code. The pusher_sendMessage() Xbasic function is used to broadcast messages. The syntax for the pusher_sendMessage() function is:</p>
                <p>
                    <example code="xb"><![CDATA[pusher_sendMessage(C appId ,C key ,C secret ,C cluster ,C channel ,C message [,C eventName [,C componentConfigJSON ]])]]></example>
                </p>
                <p>Where</p>
                <p>
                    <list>
                        <item>
                            <name-title>Argument</name-title>
                            <description-title>Description</description-title>
                        </item>
                        <item>
                            <name>*[xb:appid]*</name>
                            <description>Pusher app id (from your Pusher account)</description>
                        </item>
                        <item>
                            <name>*[xb:key]*</name>
                            <description>Pusher key (from your Pusher account)</description>
                        </item>
                        <item>
                            <name>*[xb:secret]*</name>
                            <description>Pusher secret (from your Pusher account)</description>
                        </item>
                        <item>
                            <name>*[xb:cluster]*</name>
                            <description>Pusher cluster (from your Pusher account)</description>
                        </item>
                        <item>
                            <name>*[xb:channel]*</name>
                            <description>The name of the channel that you want to broadcast the message</description>
                        </item>
                        <item>
                            <name>*[xb:message]*</name>
                            <description>The text of the message to broadcast</description>
                        </item>
                        <item>
                            <name>*[xb:eventName]*</name>
                            <description>Optional. If not specified, the default event name of __pusherEvent is used.</description>
                        </item>
                        <item>
                            <name>*[xb:componentConfigJSON]*</name>
                            <description>Optional. Can be used if this function from an Xbasic function that handles an Ajax callback in a UX component that is configured as a Pusher application. Rather than specifying the appId, key, secret and cluster, you can specify blanks for each of these properties and then you can specify e.tmpl.pusherConfigJSON for the componentConfigJSON property.</description>
                        </item>
                    </list>
                </p>
                <p>Example: Send a message on the 'channel3' channel using Pusher settings that are stored in the component's Pusher configuration:</p>
                <p>
                    <example code="xb"><![CDATA[dim message as c = "This is a Pusher message sent at: " + now()
dim channel as c = "channel3"
dim configJSON as c = e.tmpl.pusherConfigJSON
pusher_sendMessage("","","","",channel,message,configJSON)]]></example>
                </p>
            </description>
        </section>
        <section>
            <title>Sample Components</title>
            <description>
                <p>When you create a new UX component you can select a Pusher Service template to get a quick start on building your Pusher application.</p>
            </description>
            <figure>
                <link>images/pusher3.gif</link>
            </figure>
        </section>
        <section>
            <title>Videos</title>
        </section>
        <section>
            <videos>
                <title>Real-time Messaging using the Pusher Service</title>
                <description>
                    <p>Real-time applications are typically built using web sockets. However, it can be tricky to set up web-socket applications, especially if your application is behind a load balancer. The 3rd party Pusher service (www.pusher.com) makes it very easy to build real-time applications that allow you to broadcast messages on a 'channel'. All clients that subscribe to that channel will receive the message.</p>
                    <p>In this video, we show how the UX component can be configured for real-time applications using the Pusher service.</p>
                </description>
                <date>2020-01-05</date>
                <video>
                    <name>Watch Video</name>
                    <link>https://www.youtube.com/watch?v=McZ3B3TM4ko</link>
                </video>
                <resources>
                    <resource>
                        <link>http://alphamediacapture.s3.amazonaws.com/videos/Pusher_Service_realTimeMessaging.zip</link>
                    </resource>
                </resources>
            </videos>
        </section>
        <section>
            <videos>
                <title>Real-time Location Reporting using the Pusher Service</title>
                <description>
                    <p>In this video we show how you can build a real-time location reporting application. When a user 'reports' their location, a marker is automatically added to a map control showing the location of the user.</p>
                </description>
                <date>2020-01-05</date>
                <video>
                    <name>Watch Video</name>
                    <link>https://www.youtube.com/watch?v=6ljBWbNqQZo</link>
                </video>
                <resources>
                    <resource>
                        <link>http://alphamediacapture.s3.amazonaws.com/videos/Pusher_Service_locationReporting.zip</link>
                    </resource>
                </resources>
            </videos>
        </section>
    </sections>
</page>