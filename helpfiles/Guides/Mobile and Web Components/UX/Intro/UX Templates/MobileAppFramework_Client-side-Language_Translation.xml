<page build="4508">
    <shortlink>MobileAppFrameworkClientsideLanguageTranslation</shortlink>
    <topic>MobileAppFramework_Client-side-Language_Translation</topic>
    <description>
        <p>This example shows how to localize an application client-side at run-time, allowing you to build multi-lingual offline-enabled mobile applications. The same technique can also be applied to web applications.</p>
    </description>
    <discussion>
        <p>Alpha Anywhere's [Language] and [Text Dictionary] tags can be used to add multi-language support to an application. However, both Language tags and Text Dictionary tags are server-side features -- the language translation is done on the server before the content is sent to the user's browser or mobile device. In Cordova application, this translation will not occur prior to the app being installed on the user's device. This means Language tags and Text Dictionary tags cannot be used to localize a Cordova application.</p>
        <p>In a multi-lingual Cordova application, it is necessary to translate the application client-side using client-side. This UX template demonstrates how localization can be done on the client-side. The component contains a function called *[js:doTranslate]* and a JSON object that contains the language definitions. The object and the function (shown below) are defined in the *[ui:Javascript functions]* pane of the UX Component.</p>
    </discussion>
    <sections>
        <section>
            <example code="js"><![CDATA[function doTranslate(language) { 
    if(typeof _translations == 'undefined') return false;
    var arr = document.getElementsByClassName('_language');
    var ele = '';
    var id = '';
    var key = '';
    for(var i = 0; i < arr.length; i++) { 
        ele = arr[i];
        id = ele.id;
        key = id.split('_language_')[1];
        if(typeof _translations[key] == 'undefined' || _translations[key] == null) return false;
        var string = _translations[key][language];
        if(typeof string != 'undefined' && string != null && string != '') $(id).innerHTML = string;
    }
}

var _translations = { 
    "LASTNAME" : {
        "english" : 'Last Name',
        "french" : 'Nom de famille',
        "german" : 'Familienname',
        "spanish" : 'Apellido'
    },
    "FIRSTNAME" : { 
        "english" : 'First Name',
        "french" : 'Pr&#0233;nom',
        "german" : 'Vorname',
        "spanish" : 'Nombre de pila'
    },
    "CITY" : {
        "english" : 'City',
        "french" : 'Ville',
        "german" : 'Stadt',
        "spanish" : 'Ciudad'

     }
}]]></example>
        </section>
        <section>
            <description>
                <p>A DropdownBox in the sample application is used to select the language to display:</p>
            </description>
            <figure>
                <link>images/mobLang1.png</link>
            </figure>
        </section>
        <section>
            <description>
                <p>When the selected language changes, the control's *[ui:onChange]* event calls the *[js:doTranslate]* function. The function then looks up the translated value of the string and replaces the string with the translated text.</p>
            </description>
            <figure>
                <link>images/mobLang2.png</link>
            </figure>
        </section>
        <section>
            <description>
                <p>If a translation is not found for a particular string, the string is not replaced. For example, when you select Italian from the DropdownBox control, no strings are replaced. This is because there are no translation definitions for Italian.</p>
            </description>
            <figure>
                <link>images/mobLang3.png</link>
            </figure>
        </section>
        <section>
            <description>While this example uses a statically defined JSON object to define the translations, it could be modified to use translations stored in a SQLite database on the device or downloaded and stored in the Client-side Data Cache. See [PhoneGap - SQLite Actions] and [Client-side Data Cache Actions] to learn more about these features.</description>
        </section>
    </sections>
    <links>
        <link link="language tags">Language</link>
        <link link="localization text dictionary">Text Dictionary</link>
        <link link="phonegap sqlite actions">PhoneGap - SQLite Actions</link>
        <link link="client side data cache actions action javascript">Client-side Data Cache Actions</link>
    </links>
    <see>
        <ref link="multi language support in a phonegap mobile app">Multi-Language Support in a Cordova Mobile App</ref>
    </see>
    <terms>localize</terms>
</page>