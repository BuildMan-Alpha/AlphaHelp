<page build="0">
    <shortlink>gridprops conditional style clientside</shortlink>
    <topic parent="Shading and Dividers Properties" parentType="guide" elementName="Condtional style (client-side)">Condtional style (client-side)</topic>
    <description>
        <p>Applies custom CSS styling to rows in the Grid that match a Condition. The Condition is computed on the client.</p>
    </description>
    <discussion>
        <p>You can use the Conditional style property to set conditional styles for rows in the Grid. This property can be used to call out data in the Grid that requires special attention. For example, this property could be used to highlight overdue invoices or client jobs that are not assigned to an employee.</p>
        <p>If the conditional expression evaluates to true, the styling is applied to the Grid row. If multiple expressions evaluate to true for a row, the first expression is applied.</p>
        <p>The conditional expressions can refer to values in the Grid row, summary values, and special system fields. Field names can be inserted using the *[ui:Insert Fieldname]* link. *[ui:Insert Function]* can be used to insert a function from a list of functions available for use in the server-side computation.</p>
        <p>The *[ui:Conditional style (client-side)]* is evaluated on the client after data for the Grid is downloaded.</p>
    </discussion>
    <sections>
        <section>
            <figure>
                <title>Conditional Style (client-side) dialog</title>
                <alt>Conditional Style (client-side) dialog</alt>
                <link>images/clientsideConditional.png</link>
            </figure>
        </section>
        <section>
            <title>Syntax</title>
            <description>
                <p>The *[ui:Conditional style (client-side)]* expressions are written using a specific syntax:</p>
                <p>
                    <list bullet="true">
                        <item>
                            <name>Only functions shown in the *[ui:Insert Function...]* list and user-defined JavaScript functions can be used (see below for more info about [User-defined JavaScript Functions]).</name>
                        </item>
                        <item>
                            <name>String literals are defined using single quotes.</name>
                        </item>
                        <item>
                            <name>Logical operators are *[sql:and]*, *[sql:or]*, and *[sql:not]*.</name>
                        </item>
                        <item>
                            <name>String comparisons are case-sensitive. Use a function like *[sql:lower()]* to create string comparisons where case doesn't matter.</name>
                        </item>
                    </list>
                </p>
                <p>
                    <example caption="Example Expressions"><![CDATA[quantity > 100 and quantity < 200
state = 'MA'
lower(city) = lower('Boston')]]></example>
                </p>
            </description>
        </section>
        <section>
            <title>System Fields</title>
            <description>
                <p>Several system fields are available for use in your expressions. Some system fields may not be available in your Grid. For example, if a Grid does not have a Detail View, the Detail View system fields cannot be used.</p>
                <p>Available system fields include:</p>
                <p>
                    <list>
                        <item>
                            <name-title>System Field</name-title>
                            <description-title>Description</description-title>
                        </item>
                        <item>
                            <name>data.rowNumber</name>
                            <description>The row number of the current record in the Grid</description>
                        </item>
                        <item>
                            <name>grid.rowState</name>
                            <description>The row's state. grid.rowState can have a value of "view", "change", or "enter".</description>
                        </item>
                        <item>
                            <name>grid.isRowDirty</name>
                            <description>A true/false value indicating whether or not the Grid row is dirty.</description>
                        </item>
                        <item>
                            <name>grid.isDirty</name>
                            <description>A true/false value indicating whether or not the Grid is dirty.</description>
                        </item>
                        <item>
                            <name>grid.recordsInGrid</name>
                            <description>The number of records in the Grid.</description>
                        </item>
                        <item>
                            <name>grid.pageNumber</name>
                            <description>If the Grid has multiple pages, the current page number.</description>
                        </item>
                        <item>
                            <name>grid.pagesInGrid</name>
                            <description>The number of pages in the Grid.</description>
                        </item>
                        <item>
                            <name>grid.logicalRecordNumber</name>
                            <description>The Grid row's logical record number.</description>
                        </item>
                        <item>
                            <name>grid.hasDetailView</name>
                            <description>A true/false value indicating whether or not the Grid has a Detail View.</description>
                        </item>
                        <item>
                            <name>grid.isOnFirstPage</name>
                            <description>A true/false value indicating whether or not the first page of records is being shown.</description>
                        </item>
                        <item>
                            <name>grid.isOnLastPage</name>
                            <description>A true/false value indicating whether or not the last page of records is being shown.</description>
                        </item>
                        <item>
                            <name>grid.hasNextPage</name>
                            <description>A true/false value indicating whether or not the user can navigate forward to the next page of records.</description>
                        </item>
                        <item>
                            <name>grid.hasPrevPage</name>
                            <description>A true/false value indicating whether or not the user can navigate backward to the previous page of records.</description>
                        </item>
                        <item>
                            <name>grid.isNewRecordRow</name>
                            <description>A true/false value indicating whether or not the row is a New Record.</description>
                        </item>
                        <item>
                            <name>grid.checkedRowCount</name>
                            <description>The number of checked rows.</description>
                        </item>
                        <item>
                            <name>grid.rowIsChecked</name>
                            <description>A true/false value indicating whether or not the Grid row is checked.</description>
                        </item>
                        <item>
                            <name>detailView.isDirty</name>
                            <description>A true/false value indicating whether or not the Detail View is dirty (has been edited).</description>
                        </item>
                        <item>
                            <name>detailView.rowState</name>
                            <description>The row's state for the record shown in the Detail View. detailView.rowState can have a value of "view", "change", or "enter".</description>
                        </item>
                        <item>
                            <name>detailView.isOnFirstRecord</name>
                            <description>A true/false value indicating whether or not the Detail View is displaying the first record.</description>
                        </item>
                        <item>
                            <name>detailView.isOnLastRecord</name>
                            <description>A true/false value indicating whether or not the Detail View is displaying the last record.</description>
                        </item>
                        <item>
                            <name>detailView.hasNextRecord</name>
                            <description>A true/false value indicating whether or not the user can navigate forward to the next record in the Grid.</description>
                        </item>
                        <item>
                            <name>detailView.hasPrevRecord</name>
                            <description>A true/false value indicating whether or not the user can navigate backward to the previous record in the Grid.</description>
                        </item>
                        <item>
                            <name>detailView.mode</name>
                            <description>The Detail View mode.</description>
                        </item>
                    </list>
                </p>
            </description>
        </section>
        <section>
            <title>Using Summary Values</title>
            <description>
                <p>If a field has a summary value calculation, the summary value can be referenced in the expression using the syntax:</p>
                <p>
                    <example><![CDATA[summary.fieldname.summary_type]]></example>
                </p>
                <p>where *[em:fieldname]* is the field's name and *[em:summary_type]* is the type of summary calculation. For example, if you have enabled *[ui:Average]* for a field called *[quantity]*, the summary value is referenced as:</p>
                <p>
                    <example><![CDATA[summary.quantity.average]]></example>
                </p>
                <p>If the field name contains a space (e.g. "quantity ordered"), the space is replaced with an underscore:</p>
                <p>
                    <example><![CDATA[summary.quantity_ordered.average]]></example>
                </p>
                <p>See [Summary Values] to learn how to enable summary values for a field.</p>
            </description>
        </section>
        <section>
            <title>User-defined JavaScript Functions</title>
            <description>
                <p>In addition to the functions listed in *[ui:Insert Function...]*, you can write your own JavaScript functions to use in the conditional expression. To define your own JavaScript function, go to the *[ui:Javascript Functions]* pane and define the JavaScript function you'd like to use. This function can include arguments populated from fields in the conditional expression.</p>
                <p>For example, assume you have three fields in the Grid row that you'd like to use in your JavaScript function in an expression: 'field1', 'field2', and 'field3'. The expression could be written as:</p>
                <p>
                    <example><![CDATA[myCustomFunction(field1, field2, field3)]]></example>
                </p>
                <p>where *[js:myCustomFunction]* is the name of your JavaScript function defined in the *[ui:Javascript Functions]* pane.</p>
                <p>
                    <example code="js"><![CDATA[function myCustomFunction(field1, field2, field3) {
    // Code that performs the evaluation and stores
    // the computation in a variable called result

    return result; // result is a variable with a true or false value
}]]></example>
                </p>
                <p>The JavaScript function must return a value. If the function is used to compute the whole expression, the JavaScript function must return a *[js:true]* or *[js:false]* value. Otherwise, the return value must be used in a conditional expression that evaluates to true or false.</p>
            </description>
        </section>
    </sections>
    <links>
        <link link="summary%20values">Summary Values</link>
        <link href="#section1_User-defined%20JavaScript%20Functions">User-defined JavaScript Functions</link>
    </links>
</page>