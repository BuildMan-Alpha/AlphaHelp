<page>
	<topic>Javascript System Events</topic>
	<description>The Grid Object contains a very rich system of client-side events that you can use to customize the Grid behavior. </description>
	<sections>
		<section>
			<description>These events are accessible through the System Events property under the JavaScript - System Events section of the Properties page. Clicking the button next to this property opens the Client-side Grid System Events dialog. This dialog shows all of the client-side events you can use and gives a short description of each event. Event handlers for client-side system events are coded using Javascript. If the event makes any data available to the executing Javascript code, then the names of any parameters used will show up in the 'Parameters' section. You can use the 'Filter' box to filter the list of events and locate a given event quickly. You can also use the 'Defined events only' checkbox to quickly find the events for which you have defined code.  </description>
			<figure>
				<link>images/01_JSsyseve.png</link>
			</figure>
		</section>
	</sections>
	<sections>
		<section>
			<figure>
				<link>images/01_JSsyseve2.png</link>
			</figure>
		</section>
		<section>
			<title>Inserting Placeholders and Grid Methods:   </title>
			<description>When you write the Javascript event handlers, you might want to use certain placeholders in your Javascript. These placeholders get replaced by actual values when the Grid is rendered. For example, the {Grid.componentName} placeholder gets replaced with the actual Grid alias at run-time. To insert a placeholder in your code, click the 'Insert placeholder...' hyperlink. Your Javascript code can call any of the methods that the Grid object exposes. To see a list of the methods, click the 'Insert Grid method...' placeholder.  </description>
		</section>
		<section>
			<title>Example of How to Use Client-Side Events: </title>
			<description>Say you wanted to put up a dialog that said 'Searching. Please wait..' while your Grid component was performing a search. As soon as the search completed, you want to remove the message. To do this you would add code to the 'canSearchSubmit' event to show the message. A5.msgBox.show('Searching...',' Please wait while we search for the records.  </description>
			<example>
				<![CDATA[','none',function() {}); ]]>
			</example>
		</section>
		<section>
			<description>Then in the 'afterSearchSubmit' event, you would clear the message.  </description>
			<example>
				<![CDATA[A5.msgBox.hide();  ]]>
			</example>
		</section>
	</sections>
	<sections>
		<section>
			<title>Client-side events that are exposed to the developer:  </title>
			<cases>
				<case>
					<title>beforeAjaxCallback  </title>
					<description>Fires before any Ajax callback is made to the server. The e.ajaxEvent property contains the name of the action that triggered the callback. This event can be used to put up a working message while the callback is executing.  </description>
				</case>
				<case>
					<title>afterAjaxCallbackComplete</title>
					<description>Fires after any Ajax callback has been completed and the Browser has received a response from the server. The e.ajaxEvent property contains the name of the action that triggered the callback.  </description>
				</case>
				<case>
					<title>afterAlphabetButtonSearch  </title>
					<description>Fires after the user has executed an Alphabet button search in the Grid part.  </description>
				</case>
				<case>
					<title>afterDetailViewCancelEdits</title>
					<description>Fires after user has cancelled edits in the Detail View part.  </description>
				</case>
				<case>
					<title>afterDetailViewClose  </title>
					<description>Fires after the Detail View has been closed.  </description>
				</case>
				<case>
					<title>afterDetailViewDeleteRecord</title>
					<description>Fires after the user has deleted a record in the Detail View.  </description>
				</case>
				<case>
					<title>afterDetailViewNewRecord</title>
					<description>Fires after the user has clicked a hyperlink or button to enter a new row in the Detail View.  </description>
				</case>
				<case>
					<title>afterDetailViewOpen  </title>
					<description>Fires after the detail view for a particular record is shown.  </description>
				</case>
				<case>
					<title>afterDetailViewSubmit  </title>
					<description>Fires after the user has submitted edits made to a record in the Detail View. The 'hasErrors' parameter is true if there were any errors when committing the data.  </description>
				</case>
				<case>
					<title>afterDetailViewSwitchFromEditable</title>
					<description>Fires when the user has switched the current record in the Detail View from editable to not editable. Only fires if Detail View is set to edit on demand.  </description>
				</case>
				<case>
					<title>afterDetailViewSwitchToEditable</title>
					<description>Fires when the user has switched the current record in the Detail View to be editable. Only fires if Detail View is set to edit on demand.  </description>
				</case>
				<case>
					<title>afterGridCancelEdits  </title>
					<description>Fires after the user has cancelled edits in the Grid part by clicking on the Cancel button. Contrast with afterRowCancelEdits.  </description>
				</case>
				<case>
					<title>afterGridSubmit  </title>
					<description>Fires after the user has submitted edits to the Grid part and the server has processed the edits. The 'hasErrors' parameter is true if there were any errors when committing the data.  </description>
				</case>
				<case>
					<title>afterOpenLookup  </title>
					<description>Fires after the user has opened a Lookup Grid window.  </description>
				</case>
				<case>
					<title>afterPageNavigate</title>
					<description>Fires after the user has navigated to a new page of records.  </description>
				</case>
				<case>
					<title>afterQBEHide</title>
					<description>Fires after the user has hidden the QBE (Query by Example) row.  </description>
				</case>
				<case>
					<title>afterQBESearch</title>
					<description>Fires after the user has performed a QBE (Query by Example) search. The 'qbeType' parameter specifies the name of the option from the QBE menu that was selected.  </description>
				</case>
				<case>
					<title>afterQBEShow</title>
					<description>Fires after the user has shown the QBE (Query by Example) row.  </description>
				</case>
				<case>
					<title>afterQuickSearch  </title>
					<description>Fires after the user has performed a Quick Search  </description>
				</case>
				<case>
					<title>afterRowCancelEdits  </title>
					<description>Fires after the user can cancelled edits on a Grid row.  </description>
				</case>
				<case>
					<title>afterRowCollapse</title>
					<description>Fires after the user has collapsed a previously expanded row expander.  </description>
				</case>
				<case>
					<title>afterRowDelete</title>
					<description>Fires after the user has deleted a record in a Grid by clicking the 'Delete Record' button in a Grid row.  </description>
				</case>
				<case>
					<title>afterRowExpand</title>
					<description>Fires after the user has expanded a row expander.  </description>
				</case>
				<case>
					<title>afterRowPopulate</title>
					<description>This event fires when a Grid row has been populated with data using the Grid's .populateRow() method. It can be used to set default values in new record rows in the Grid part. To see how this event can be used watch this video.  </description>
					<videos>
						<video>
							<name>watch this video</name>
							<link>https://share.vidyard.com/watch/VwcWKtXfpLkaXcbcauxyE5</link>
						</video>
					</videos>
				</case>
				<case>
					<title>afterRowSubmit  </title>
					<description>Fires after the user has clicked the submit row button in a Grid row and the server has processed the request. The 'hasErrors' parameter is true if there were any errors when committing the data.  </description>
				</case>
				<case>
					<title>afterRowSwitchFromEditable</title>
					<description>Fires if the Grid is set to 'Edit on Demand' and the user has switched from editable to not-editable mode.</description>
				</case>
				<case>
					<title>afterRowSwitchToEditable  </title>
					<description>Fires if the Grid is set to 'Edit on Demand' and the user has switched to editable mode.  </description>
				</case>
				<case>
					<title>afterSearchClear  </title>
					<description>Fires after the user has cleared the Search part  </description>
				</case>
				<case>
					<title>afterSearchSubmit  </title>
					<description>Fires after the user has clicked the submit button on the Search part and the server has processed the request.  </description>
				</case>
				<case>
					<title>afterSearchSaved  </title>
					<description>Fires after the user saves the Search Part criteria.  </description>
				</case>
				<case>
					<title>afterSavedSearchLoaded  </title>
					<description>Fires after the user loads Search Part criteria that were previously saved.  </description>
				</case>
				<case>
					<title>afterSetRowsPerPage  </title>
					<description>Fires after the user has changed the number of records per page that the Grid shows.  </description>
				</case>
				<case>
					<title>afterSort  </title>
					<description>Fires after the user has sorted the records in the Grid by clicking on a Grid column title.  </description>
				</case>
				<case>
					<title>canAlphabetButtonSearch</title>
					<description>Fires when the user tries to perform a Alphabet button search. If the event handler contains 'return false;', the event will be cancelled.  </description>
				</case>
				<case>
					<title>canDetailViewCancelEdits</title>
					<description>Fires when the user tries to cancel edits in the Detail View. If the event handler contains 'return false;', the event will be cancelled.  </description>
				</case>
				<case>
					<title>canDetailViewClose</title>
					<description>Fires when the user tries to close the Detail view. If the event handler contains 'return false;', the event will be cancelled.  </description>
				</case>
				<case>
					<title>canDetailViewDeleteRecord  </title>
					<description>Fires when the user tries to delete a record in the Detail View. If the event handler contains 'return false;', the event will be cancelled.  </description>
				</case>
				<case>
					<title>canDetailViewNewRecord  </title>
					<description>Fires when the user tries to enter a new record in the Detail View by clicking the 'Enter new record' icon or hyperlink. If the event handler contains 'return false;', the event will be cancelled (i.e. the new record row will not be shown).  </description>
				</case>
				<case>
					<title>canDetailViewOpen  </title>
					<description>Fires when the user tries to display the Detail View for a row in the Grid part. If the event handler contains 'return false;', the event will be cancelled.  </description>
				</case>
				<case>
					<title>canDetailViewSubmit  </title>
					<description>Fires when the user tries to submit edits made to a record in the Detail View. If the event handler contains 'return false;', the event will be cancelled.  </description>
				</case>
				<case>
					<title>canDetailViewSwitchFromEditable</title>
					<description>Fires if the Detail View is set to 'edit on demand' and the user tries two switch from editable mode to non-editable mode. If the event handler contains 'return false;', the event will be cancelled.  </description>
				</case>
				<case>
					<title>canDetailViewSwitchToEditable  </title>
					<description>Fires if the Detail View is set to 'edit on demand' and the user tries two switch to editable mode. If the event handler contains 'return false;', the event will be cancelled.  </description>
				</case>
				<case>
					<title>canGridCancelEdits</title>
					<description>Fires when the user tries to cancel edit made to the Detail View record.  </description>
				</case>
				<case>
					<title>canGridSubmit  </title>
					<description>Fires when the user tries to submit changes made to records in the Grid part by clicking the 'Submit' button for the entire Grid (not the submit button on individual Grid rows). If the event handler contains 'return false;', the event will be cancelled.  </description>
				</case>
				<case>
					<title>canOpenLookup  </title>
					<description>Fires when the user tries to open the Lookup Grid window. If the event handler contains 'return false;', the event will be cancelled.  </description>
				</case>
				<case>
					<title>canPageNavigate</title>
					<description>Fires when the user tries to navigate to another page of records. If the event handler contains 'return false;', the event will be cancelled.  </description>
				</case>
				<case>
					<title>canQBEHide</title>
					<description>Fires when the user tries to close the QBE row. If the event handler contains 'return false;', the event will be cancelled.  </description>
				</case>
				<case>
					<title>canQBESearch  </title>
					<description>Fires when the user tries to do a QBE search. If the event handler contains 'return false;', the event will be cancelled. The 'qbeType' parameter specifies the name of the option from the QBE menu that was selected.  </description>
				</case>
				<case>
					<title>canQBEShow</title>
					<description>Fires when the user tries to show the QBE row (if it was previously hidden). If the event handler contains 'return false;', the event will be cancelled.  </description>
				</case>
				<case>
					<title>canQuickSearch</title>
					<description>Fires when the user tries to perform a Quick Search. If the event handler contains 'return false;', the event will be cancelled.  </description>
				</case>
				<case>
					<title>canRowCancelEdits  </title>
					<description>Fires when the user tries to cancel edits made to an individual row in the Grid part. If the event handler contains 'return false;', the event will be cancelled.  </description>
				</case>
				<case>
					<title>canRowCollapse  </title>
					<description>Fires when the user tries to collapse a row that was previously expanded. If the event handler contains 'return false;', the event will be cancelled.  </description>
				</case>
				<case>
					<title>canRowDelete  </title>
					<description>Fires when the user tries to delete a row in the Grid part.  </description>
				</case>
				<case>
					<title>canRowExpand  </title>
					<description>Fires when the user tries to expand a row with a Row Expander icon. If the event handler contains 'return false;', the event will be cancelled.  </description>
				</case>
				<case>
					<title>canRowSubmit  </title>
					<description>Fires when the user tries to submit changes to an individual row in the Grid part. If the event handler contains 'return false;', the event will be cancelled.  </description>
				</case>
				<case>
					<title>canRowSwitchFromEditable</title>
					<description>Fires if the Grid is set to 'edit on demand' and the user tries to swtich back to non-editable mode. If the event handler contains 'return false;', the event will be cancelled.  </description>
				</case>
				<case>
					<title>canRowSwitchToEditable</title>
					<description>Fires if the Grid is set to 'edit on demand' and the user tries to editable mode. If the event handler contains 'return false;', the event will be cancelled. 'newRecordRowsVisible' - true/false depending on whether the new record rows are being shown.  </description>
				</case>
				<case>
					<title>canSearchClear  </title>
					<description>Fires when the user tries to clear the search criteria in the Search part. If the event handler contains 'return false;', the event will be cancelled.  </description>
				</case>
				<case>
					<title>canSearchSubmit  </title>
					<description>Fires when the user tries to perform a search by clicking the Search button in the Search part. Also fires if any control in the Search part is set to auto-submit (cascading dropdown controls can auto-submit). If the event handler contains 'return false;', the event will be cancelled.  </description>
				</case>
				<case>
					<title>canSetRowsPerPage  </title>
					<description>If the event handler contains 'return false;', the event will be cancelled.  </description>
				</case>
				<case>
					<title>canSort  </title>
					<description>Fires when the user tries to sort the Grid by clicking on a column title. If the event handler contains 'return false;', the event will be cancelled.  </description>
				</case>
				<case>
					<title>onDetailViewRender  </title>
					<description>Fires after the Detail View has been rendered.  </description>
				</case>
				<case>
					<title>onDetailViewStateChange</title>
					<description>Fires when the Detail View state has changed. Possible states are 'view', 'change' and 'enter'.  </description>
				</case>
				<case>
					<title>onGridRefresh  </title>
					<description>Fires when a Grid has been refreshed.  </description>
				</case>
				<case>
					<title>onGridRender  </title>
					<description>Fires after all of the records in the Grid part have been rendered.  </description>
				</case>
				<case>
					<title>onNewRowsHide</title>
					<description>Fires when the user has hidden the new records rows in the Grid part. (The Grid must have been set to only show new record rows on request).  </description>
				</case>
				<case>
					<title>onNewRowsShow  </title>
					<description>Fires when the user has shown the new records rows in the Grid part. (The Grid must have been set to only show new record rows on request).  </description>
				</case>
				<case>
					<title>canNewRowsShow  </title>
					<description>Fires when the user tries to shown the new records rows in the Grid part. (The Grid must have been set to only show new record rows on request). Function must return either true or false. If false, action is aborted. e.rowsInEditMode is the number of existing Grid rows that are currently in edit mode.  </description>
				</case>
				<case>
					<title>onObjectInitialize  </title>
					<description>Fires after the Grid object has been initialized. You use this event to override settings that are defined in the Grid object.  </description>
				</case>
				<case>
					<title>onRowBlur</title>
					<description>Fires when a Grid row loses focus.  </description>
				</case>
				<case>
					<title>onRowFocus</title>
					<description>Fires when a Grid row gets focus. Only fires if Grid is editable. See onRowSelect.  </description>
				</case>
				<case>
					<title>onRowSelect</title>
					<description>Fires when a Grid row is selected. Fires when a row is selected for both read only and editable Grids.  </description>
				</case>
				<case>
					<title>onRowRefresh </title>
					<description>Fires when a Grid row is refreshed.  </description>
				</case>
				<case>
					<title>onRowRender</title>
					<description>Fires when a Grid row is rendered.  </description>
				</case>
				<case>
					<title>onRowStateChange</title>
					<description>Fires when the state of a Grid Row has changed. Possible states are 'view', 'change' and 'enter'.  </description>
				</case>
				<case>
					<title>onGridStateChange</title>
					<description>Fires when the state of the Grid Row has changed. 'isDirty' can be either true (if at least one row in the Grid is dirty), or false.  </description>
				</case>
				<case>
					<title>onSearchRender</title>
					<description>Fires after the Search part has been rendered.  </description>
				</case>
				<case>
					<title>canLookupGridSelectRow</title>
					<description>Fires before the user selects a row in a Lookup Grid. If the event handler contains 'return false;', the event will be cancelled.  </description>
				</case>
				<case>
					<title>afterLookupGridFillinValues</title>
					<description>Fires after a record has been selected from a Lookup Grid and the values from the Lookup Grid have been filled into the Parent Grid.  </description>
				</case>
				<case>
					<title>onGridRowCheck</title>
					<description>If the checkbox column for the Grid has been turned on, fires when the checkbox is checked, or unchecked.  </description>
				</case>
				<case>
					<title>onGridInitializeComplete</title>
					<description>Fires after the Grid has been completely initialized and all HTML has been rendered. Does not fire on subsequent Ajax callbacks.  </description>
				</case>
				<case>
					<title>canNamedLayoutSelect</title>
					<description>Fires when the user tries to change the named Layout (if multiple layout designs are enabled). If the event handler contains 'return false' the event will be cancelled and the layout will not be changed.  </description>
				</case>
				<case>
					<title>afterNamedLayoutSelect</title>
					<description>Fires after the user has changed the current named Layout.  </description>
				</case>
				<case>
					<title>beforeAutoRefresh  </title>
					<description>Fires when an auto-refresh of the Grid occurs.  </description>
				</case>
				<case>
					<title>onGridRenderComplete</title>
					<description>Very last event to fire after the Grid has been completely rendered and all system Javascript methods to initialize the Grid have fired. Contrast with onGridRender which fires before all system Javascript events have fired.  </description>
				</case>
				<case>
					<title>onImageError</title>
					<description>Fires when an image in an  element was not found. The e object passed in has an 'element' property. To get the id of the image tag refer to 'e.element.id'. To set the src of the image tag, set the 'e.element.src' property.  </description>
				</case>
				<case>
					<title>beforeHTMLReportExport  </title>
					<description>Fires when a user clicks on a toolbar button to export an HTML report to PDF, Excel, Word or text. You can use this event to put up a custom 'working...' message. To dismiss the custom message you can add code to the 'afterAjaxCallbackComplete' event.  </description>
				</case>
				<case>
					<title>webSocketOnMessage</title>
					<description>Fires when a web-socket server message is received. The message contents is in the e.message parameter.  </description>
				</case>
				<case>
					<title>webSocketServerClose</title>
					<description>Fires when the web-socket server is closed.  </description>
				</case>
			</cases>
		</section>
	</sections>
</page>