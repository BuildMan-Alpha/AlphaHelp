<page>
    <shortlink>grid onSQLCountQuery event</shortlink>
    <topic>onSQLCountQuery Event</topic>
    <description>
        <p>Fires when the Grid needs to count the records in the current Grid query. If you want to base the Grid on a stored procedure you need to use this event to compute the number of records in the Grid.</p>
    </description>
    <discussion>
        <p>Each time the Grid is rendered, it executes a query to compute the number of records that are shown in the Grid. This event fires just before the count query is executed. You can add an event handler for this event to compute the record count yourself and tell Alpha Anywhere not to try to compute the count itself.</p>
        <p></p>
    </discussion>
    <sections>
        <section>
            <important>
                <p> If your Grid is based on a stored procedure then you *[must]* define code for this event as Alpha Anywhere will not be able to get the count of the number of records itself.</p>
            </important>
        </section>
        <section>
            <description>
                <p>If your event handler takes over the responsibility of computing the record count, it must set these properties:</p>
            </description>
            <example code="xb"><![CDATA[' Set the record count
e.count = recordCount

' Indicate the count has been computed and that Alpha Anywhere
' should not compute the count query
e.handled = .t.]]></example>
        </section>
        <section>
            <description>
                <p>Here is a sample onSQLCountQuery event handler that you might write:</p>
            </description>
            <example code="xb"><![CDATA[function onSQLCountQuery as v (e as p)

    dim flag as L
    flag = e.cn.execute("exec myCountStoredProcedure @city=:whatcity",e.arguments)
    if flag = .t. then
        dim rs as SQL::ResultSet
        rs = e.cn.resultSet
        e.count = rs.data(1)
        e.handled = .t.
    else
        e.fatalError = .t.
        e.errorText = "Could not get record count. " + e.cn.callResult.text
    end if 

end function]]></example>
        </section>
        <section>
            <description>
                <p>In the above example, the following assumptions were made:</p>
            </description>
            <list bullet="true">
                <item>
                    <name>The stored procedure is for SQL Server, so the syntax used is appropriate for SQL Server. </name>
                </item>
                <item>
                    <name>The stored procedure is called 'myCountStoredProcedure' and it takes a single parameter '@city'.</name>
                </item>
                <item>
                    <name>The Grid has a Search Part that allows the user to search by city and the e.arguments object that is passed in has an argument called 'whatcity' which we bind to the stored procedure's '@city' parameter.</name>
                </item>
                <item>
                    <name>The resultset returned by the stored procedure has a single row and column with the record count in it. We set e.count to the value in the first row and first column.</name>
                </item>
                <item>
                    <name>We set e.handled = .t. to tell Alpha Anywhere that the count has been computed.</name>
                </item>
            </list>
            <note>
                <p>One of the properties passed in with the 'e' object is e.sql. This is the SQL that Alpha Anywhere will parse to convert into a count query in order to compute the record count IF e.handled is NOT SET TO .t.. Your event handler can actually modify the value in e.sql, or any of the values in e.arguments should you wish to for any reason.</p>
            </note>
        </section>
        <section>
            <title>Event Arguments &amp; Properties</title>
            <description>The following variables are available to you in the event:</description>
            <list>
                <item>
                    <name-title>Variable</name-title>
                    <description-title>Description</description-title>
                </item>
                <item>
                    <name>e.tmpl</name>
                    <description>The grid component definition</description>
                </item>
                <item>
                    <name>e.rtc</name>
                    <description>Run-time calculations (allows you to pass data to other event handlers)</description>
                </item>
                <item>
                    <name>e.__si</name>
                    <description>State information</description>
                </item>
                <item>
                    <name>e.cn</name>
                    <description>The [SQL::Connection] object for the Grid. You can call this object's *[xb:.execute()]* method to execute your own SQL.</description>
                </item>
                <item>
                    <name>e.filter</name>
                    <description>The WHERE clause which indicate what filter (if any) the user has applied to the Grid</description>
                </item>
                <item>
                    <name>e.order</name>
                    <description>The fields (if any) that the user has ordered the Grid on</description>
                </item>
                <item>
                    <name>e.arguments</name>
                    <description>The [SQL::Arguments] object that contains argument value for all arguments used in the WHERE clause (i.e. the *[xb:e.filter parameter)]* To read a value from arguments: *[xb:e.arguments.find("argumentName").data]*</description>
                </item>
                <item>
                    <name>e.sql</name>
                    <description>The SQL statement that the Grid has computed. If *[xb:e.handled]* is NOT set to *[xb:.t.]*, then the Grid will compute the number of records returned by this query.</description>
                </item>
            </list>
        </section>
        <section>
            <description>Your event must set the following properties:</description>
            <list>
                <item>
                    <name-title>Property</name-title>
                    <description-title>Description</description-title>
                </item>
                <item>
                    <name>e.count</name>
                    <description>The number of records in the query</description>
                </item>
                <item>
                    <name>e.handled</name>
                    <description>Set to *[xb:.t.]* if your event has computed the record count. Set to *[xb:.f.]* if you want Alpha Anywhere to execute its own count query</description>
                </item>
            </list>
        </section>
        <section>
            <description>Your event can optionally set these properties of the *[xb:e]* object:</description>
            <list>
                <item>
                    <name-title>Property</name-title>
                    <description-title>Description</description-title>
                </item>
                <item>
                    <name>e.fatalError</name>
                    <description>Set to *[xb:.t.]* if a fatal error has occurred</description>
                </item>
                <item>
                    <name>e.errorText</name>
                    <description>The error text to show if a fatal error occurred</description>
                </item>
            </list>
        </section>
        <section>
            <title>Setting State Variables</title>
            <description>
                <p>You can also set state variables in this event. The value of any state variables will be available in all subsequent ajax callbacks (in the e.__si2 object).</p>
                <p>To set a state variable:</p>
            </description>
            <example code="xb"><![CDATA[e._state.myvar1 = "value1"
e._state.myvar2 = "value2"]]></example>
        </section>
    </sections>
    <links>
        <link link="sql::connection object">SQL::Connection</link>
        <link link="sql::arguments class">SQL::Arguments</link>
    </links>
</page>