<page>
    <shortlink>grid onSQLSelectQuery event</shortlink>
    <topic>onSQLSelectQuery Event</topic>
    <description>
        <p>Fires when the Grid needs select records to display in the Grid. If you want to base the Grid on a stored procedure you can use this event to return a resultset to the Grid.</p>
    </description>
    <discussion>
        <p>Each time the Grid is rendered it executes a SQL query to get a resultset of data to display in the Grid. This event fires before the select query is executed. You can add an event handler to this event to compute the resultset yourself and tell Alpha Anywhere not to try to to get the resultset itself.</p>
    </discussion>
    <sections>
        <section>
            <important>
                <p> If your Grid is based on a stored procedure then you *[must]* define code for this event.</p>
            </important>
        </section>
        <section>
            <description>
                <p>If your event handler takes over the responsibility of computing the resultset, it must set these properties:</p>
            </description>
            <example code="xb"><![CDATA[' Set the resultset to display in the Grid
e.rs = e.cn.resultSet

' Indicate the resultset has been computed and Alpha Anywhere 
' should not query the data source for records
e.handled = .t.]]></example>
        </section>
        <section>
            <description>
                <p>Here is a sample onSQLSelectQuery event handler that you might write:</p>
            </description>
            <example code="xb"><![CDATA[function onSQLSelectQuery as v (e as p)

    dim flag as L
    flag = e.cn.execute("exec mySelectStoredProcedure @city=:whatcity",e.arguments)
    if flag = .t. then
        e.rs = e.cn.resultSet
        e.handled = .t.
    else
        e.fatalError = .t.
        e.errorText = e.cn.callResult.text
    end if 

end function]]></example>
        </section>
        <section>
            <description>
                <p>In the above example, the resultset that was returned was positioned at the first record. Alpha Anywhere will then navigate in the resultset to the correct starting record to display (for example, you might have requested to show page 3 of the Grid).</p>
                <p>However, your stored procedure might be able to 'chunk' the records more efficiently than Alpha Anywhere, and so in addition to the e.handled property you can also set the e.paginationHandled handled property to .t..</p>
                <p>The 'e' object that is passed into the onSQLSelectQuery event handler contains the following properties which would be useful if you wanted to handle the pagination of the resultset yourself in the event handler:</p>
            </description>
            <list bullet="true">
                <item>
                    <name>e.recordCount - number of records in the Grid query </name>
                </item>
                <item>
                    <name>e.targetPage - the page number of records to be shown </name>
                </item>
                <item>
                    <name>e.targetLogicalRecord - the logical record number of the first record to be shown (e.g. if targetPage is 3 and records per page is 10, then targetLogicalRecord is 21) </name>
                </item>
                <item>
                    <name>e.rowCount - the number of records per page to show in the Grid </name>
                </item>
                <item>
                    <name>e.pageCount - the number of pages that the Grid contains. (e.g. if the grid contains 25 records and there are 10 records per page, pageCount is 3) </name>
                </item>
            </list>
        </section>
        <section>
            <title>Event Arguments &amp; Properties</title>
            <description>The following variables are available to you in the event:</description>
            <list>
                <item>
                    <name-title>Variable</name-title>
                    <description-title>Description</description-title>
                </item>
                <item>
                    <name>e.tmpl</name>
                    <description>The grid component definition</description>
                </item>
                <item>
                    <name>e.rtc</name>
                    <description>Run-time calculations (allows you to pass data to other event handlers)</description>
                </item>
                <item>
                    <name>e.__si</name>
                    <description>State information</description>
                </item>
                <item>
                    <name>e.cn</name>
                    <description>The [SQL::Connection] object for the Grid. You can call this object's *[xb:.execute()]* method to execute your own SQL.</description>
                </item>
                <item>
                    <name>e.sql</name>
                    <description>The SQL Statement that Alpha Anywhere has computed to get the data to refresh the row.</description>
                </item>
                <item>
                    <name>e.arguments</name>
                    <description>The [SQL::Arguments] object with values for all of the arguments in *[xb:e.sql]*. To read a value from arguments: *[xb:e.arguments.find("argumentName").data]*</description>
                </item>
                <item>
                    <name>e.recordCount</name>
                    <description>The number of records in the Grid query</description>
                </item>
                <item>
                    <name>e.targetPage</name>
                    <description>The page number of records to be shown</description>
                </item>
                <item>
                    <name>e.targetLogicalRecord</name>
                    <description>The logical record number of the first record to be shown (e.g. if targetPage is 3 and records per page is 10, then targetLogicalRecord is 21)</description>
                </item>
                <item>
                    <name>e.rowCount</name>
                    <description>The number of records per page to show in the Grid</description>
                </item>
                <item>
                    <name>e.pageCount</name>
                    <description>The number of pages that the Grid contains. (e.g. if the grid contains 25 records and there are 10 records per page, pageCount is 3)</description>
                </item>
            </list>
        </section>
        <section>
            <description>Your event must set the following properties:</description>
            <list>
                <item>
                    <name-title>Property</name-title>
                    <description-title>Description</description-title>
                </item>
                <item>
                    <name>e.handled</name>
                    <description>set to *[xb:.t.]* if your event has computed the record count. set to *[xb:.f.]* if you want Alpha Anywhere to execute its own count query</description>
                </item>
                <item>
                    <name>e.rs</name>
                    <description>A [SQL::ResultSet] of records to show in the Grid (need only be set if *[xb:e.handled]* is set to *[xb:.t.]*)</description>
                </item>
                <item>
                    <name>e.paginationHandled</name>
                    <description>The default value for this property is *[xb:.f.]*, which means that Alpha Anywhere will assume that the first record in the result set that is returned by the event (*[xb:e.rs]*) is positioned on the first logical record, and Alpha Anywhere will be responsible for navigating to the correct logical record in the result set. (This property is only meaningful if *[xb:e.handled]* is set to *[xb:.t.]*)</description>
                </item>
            </list>
        </section>
        <section>
            <description>Your event can optionally set these properties of the *[xb:e]* object:</description>
            <list>
                <item>
                    <name-title>Property</name-title>
                    <description-title>Description</description-title>
                </item>
                <item>
                    <name>e.fatalError</name>
                    <description>Set to *[xb:.t.]* if a fatal error has occurred</description>
                </item>
                <item>
                    <name>e.errorText</name>
                    <description>The error text to show if a fatal error occurred</description>
                </item>
            </list>
        </section>
        <section>
            <title>Setting State Variables</title>
            <description>
                <p>You can also set state variables in this event. The value of any state variables will be available in all subsequent ajax callbacks (in the e.__si2 object).</p>
                <p>To set a state variable:</p>
            </description>
            <example code="xb"><![CDATA[e._state.myvar1 = "value1"
e._state.myvar2 = "value2"]]></example>
        </section>
    </sections>
    <links>
        <link link="sql::connection object">SQL::Connection</link>
        <link link="sql::arguments class">SQL::Arguments</link>
        <link link="sql::resultset object">SQL::ResultSet</link>
    </links>
</page>