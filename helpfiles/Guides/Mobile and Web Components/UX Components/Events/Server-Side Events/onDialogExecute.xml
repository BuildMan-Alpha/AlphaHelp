<page>
    <shortlink>ux ssevents onDialogExecute</shortlink>
    <topic>onDialogExecute</topic>
    <description>Fires every time the UX Component is run. This includes the first time it is run and whenever an 
        Ajax callback is made.
    </description>
 
    
    <sections>
        <section>
          <title>Request</title>
            <description>The Request object. Includes Request.Variables, which should be used instead of the older e.rv construct</description>
        </section>
        <section>
          <title>Session</title>
            <description>The Session object. Should be used instead of the older e.session construct</description>
        </section>
        
<section>

</section>        

<section>
    <title>Inside e:</title>
    <list>
        <item>
            <name>e.tmpl</name>
            <description>Component definition</description>
        </item>
        <item>
            <name>e.rtc</name>
            <description>Runtime calculations - you can use this to store data to be passed to other server side events (Note: the 'rtc' object cannot be used to persist state information - i.e. you can't set a value in rtc and then read that value in a subsequent callback. To persist state info see e._state).
</description>
        </item>
        <item>
            <name>e.arguments</name>
            <description>SQL::Arguments object with values for each of the arguments defined in this component.  To read a value from arguments: e.arguments.find("argumentName").data
</description>
        </item>
        
        
    </list>
    
    
</section>





<section>
    <description>To specify any javascript that you want to execute set the  e.javascript property. For example:</description>
    <example><![CDATA[e.javascript = "alert('hello');"]]></example>
    
</section>
<section>
    <description>You can set 'state' variables in this event. The value of any state variables will be available in all subsequent ajax callbacks.
To set a state variable:</description>
    <example><![CDATA[e._state.myvar1 = "value1"
e._state.myvar2 = "value2"]]></example>
    
</section>
<section>
    <description>To read the value of a 'state' variable that was previously set:</description>
    <example><![CDATA[e._state.myvar1]]></example>
    
</section>
    </sections>
</page>