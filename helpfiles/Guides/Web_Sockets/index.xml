<page>
   <topic>Web Socket Server</topic>
   <description>Web Socket Server Settings under Web Project Properties enable live applications, like message boards.</description>
   <discussion>When Web Socket Support is enabled, Web Applications are capable of broadcasting JSON packets between
the active users in an application, which means that in addition to implementing features like message boards,
Applications that once required polling to check for updates can be notified when a change occurs, which can
reduce traffic to the server. </discussion>
   <sections>
      <section>
      <description>
      The Web Socket Implementation supports the concept of Message Queues - this is important for Applications like 
      Message boards, where a new user joining a discussion needs to receive the most recent postings to the Message board.  
      </description>
      </section>
      <section>
      <title>Simple Web Socket Server</title>
      <description>
      The simplest supported Web Socket Server implementation under the Standalone Web Application Server uses a single node process to handle broadcast of messages between all open connections.
      All the memory of queue contents, and all the broadcasting of message is handled by a single instance of node.      
      </description>
      <figure><link>images/simple_node_websocket_server.svg</link></figure>
      </section>
      <section>
      <title>Scalable Web Socket Server (Redis Implementation)</title>
      <description>
      When Redis is used under Web Socket Server implementation under the Standalone Web Application Server, the broadcasting of messages, as well as queue memory are offloaded to Redis.
      The node process only manages the connections for the instance of Alpha Anywhere, which allows for multiple instances backed by a single Redis instance.      
      </description>
      <figure><link>images/redis_node_websocket_server.svg</link></figure>
      </section>
      <section>
      <title>Picking an implementation</title>
      <description>If less overhead is required, and requirements are met by a single instance of Alpha Anywhere, the Simple Web Socket Server Implemention is adequate.</description>
      </section>
      <section>
      <description>If it is important that Queues retain state when the server is restarted,  or a load balancer is being used, which requires multiple instances of the Application Web Server, the Redis Implementation provides the Ability to Scale, and provides Persistence of State information.</description>
      </section>
   </sections>
</page>