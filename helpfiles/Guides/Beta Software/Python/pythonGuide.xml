<page build="7796">
    <shortlink>python guide</shortlink>
    <topic parent="Python" parentType="guide" elementName="Calling Python From Xbasic">Calling Python From Xbasic</topic>
    <description>
        <p>A short guide on calling Python scripts in Xbasic.</p>
    </description>
    <sections>
        <section>
            <description>
                <p>Python methods, run arbitrary code, or run a simple python expression from xbasic.</p>
            </description>
        </section>
        <section>
            <title>A Simple Python Eval</title>
            <example code="xb"><![CDATA[
? helper::Python::Eval("str(list(range(5)))")
= "[0, 1, 2, 3, 4]"]]></example>
            <description>
                <p>An example that demonstrates generating an array of sequential numbers using the a python range.</p>
            </description>
        </section>
        <section>
            <title>Invoking Python Code</title>
            <example code="xb"><![CDATA[
dim result as c
result = helper::Python::Execute(<<%str%
import sys
print(sys.version)
%str%)

showvar(result)]]></example>
            <description>
                <p>Generally you will need to pull in a python module to do anything interesting in python, The execute function returns the result of any python 'print' commands so you can write and execute a python program embedded in xbasic.</p>
                <p>In this simple example, we import the sys module, and report back the version of python we are using.</p>
            </description>
        </section>
        <section>
            <title>Invoking A Method in a Python Module</title>
            <description>
                <p>If you are doing anything more substantial, you will likely want to put you code in a python module.</p>
                <p>To call a module in a place other than the system python folder, python must be able to find your module, which you can do by setting the path for python modules.</p>
            </description>
        </section>
        <section>
            <example code="py"><![CDATA[
def greeting(name):
    return 'Hello '+ name
]]></example>
            <description>
                <p>A simple python module that formats a string. This file was saved to 'c:\mypycode\greet.py'.</p>
            </description>
        </section>
        <section>
            <example code="xb"><![CDATA[
 ? helper::Python::Call("greet","greeting","John")
ERROR: No module named 'greet'

helper::python::SetPath("c:\mypycode")
? helper::Python::Call("greet","greeting","John")
= "Hello John"
]]></example>
            <description>
                <p>When calling out python script, we use the Call method, supplying the module name and the function we wish to invoke.</p>
                <p>In the above session, you see that initially python does not find our module.  This is addressed by calling SetPath so that python can find greet.py.</p>
            </description>
        </section>
        <section>
            <title>Reloading a Python Module</title>
            <example code="py"><![CDATA[
def greeting(name):
    return 'Hello '+ name
def bye(name):
    return 'Goodbye '+ name
]]></example>
            <description>
                <p>When a python module is changed, if the module has been loaded, the older version of the module will be the one in memory.</p>
            </description>
        </section>
        <section>
            <example code="xb"><![CDATA[
 ? helper::Python::Call("greet","bye","John")
ERROR: Could not find function

helper::Python::ReloadModule("greet")
? helper::Python::Call("greet","bye","John")
= "Goodbye John"
]]></example>
            <description>
                <p>Call the ReloadModule if the module you are using has changed after you have run it.</p>
            </description>
        </section>
    </sections>
</page>