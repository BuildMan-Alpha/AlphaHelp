<page>
    <topic>Alpha Anywhere Federatated Authentication - Authentication Using a SAML Identity Provider
    </topic>
    <description>The Alpha Anywhere web security system now supports login using a SAML identity provider such as Active Directory, Okta, and Ping Identity. 
	This allows an Alpha Anywhere application to use an organization's existing security infrastructure resulting the user only needing to log in once
	to the organization's security infrastructure and being authenticated with all the applications used by the organization (single sign on).</description>
    <sections>
	    <section>
            <important>
                <p>This feature is still under development and requires a Feature Key in order to enable it. 
				This feature is being made available early in the development cycle so we can get feedback from the community. 
				To request a feature key, go to *[ui:Help]* and send an email to *[enhancementrequests@alphasoftware.com]* with 
				"SAML Federated Authentication Feature Key" in the subject.</p>
            </important>
        </section>
        <section>
            <title>Overview</title>
            <description>Federated authentication is a way to delegate authentication to another application called an "identity provider" (commonly abbreviated IdP).
            A trust relationship is configured between applications in an organization and the identity provider. An application is configured to use an identity provider
            and the identity provider is configured to allow that application to ask it to authenticate users. This allows a user to login once to the identity 
            provider and automatically be authenticated for all the applications used by the organization that are configured to use that identity provider
            (single sign on). This is done in the same way as a typical application by redirecting to a login page. However, instead of the application
            redirecting to one of its own pages, the application redirects to the identity provider's login page. If the user not already authenticated, the identity 
            provider will authenitcate the user by prompting for username and password, Windows integrated authentication, or any other way the identity provider
            is configured to authenticate a user. Once the user is autheticated, the identity provider redirects back to the application with an encrypted
            token containing the user's identity. Note tht if the user had authenticated with identity provider from some other application, the identity 
            provider does not need to reauthenticate and the encrypted token will be returned without any other prompting.
            
            One important aspect of federated authentication is that the identity provider does not need to be directly accessible to the 
            server running the application. That means an organization's identity provider can be behind a company firewall and an Alpha Anywhere 
            application can be running in Alpha Cloud. I, as a user, am logged into the company VPN giving me access to the identity provider. When the Alpha Anywhere 
            application running in Alpha Cloud needs to authentication the user, the application will redirect to the identity provider, which I/my browser has
            access too, the identity provider does the authentication, and the the identity provider redirects with an encrypted token back to the Alpha Anywhere
            application running in Alpha Cloud. The Alpha Anywhere application validates the encrypted token and then I am logged in to the application.
            </description>
            <note>Federated authentication needs to be enabled in the application's Web Security Settings.</note>
        </section>
        <section>
            <note>
            	<description>
                <p>Federated authentication requires that the application's [cookie_samesite] setting be set to "None" since cookies are used as part of the
                 authentication workflow between the Alpha Anywhere application and the identity provider. This will be automatically set if the application
                 runs under Application Server for IIS, but the Classic application server has to be have its cookie samesite setting manually changed to 
                 "None".
                </p>
                </description>
            </note>
        </section>
        <section>
            <description>
                <p>When using the "federated authentication" feature, the Alpha Anywhere web security system is still used. If the identity provider returns user roles 
                (a.k.a &quot;groups&quot;) along with the user name in the encrypted token, those roles can be used by the Alpha Anywhere security system. Otherwise, the 
                authenticated user must be in the Alpha Anywhere security system with the roles the user is a member of. The federated authentication configuration can 
                be set to automatically add a user that is not in the Alpha Anywhere security system in which case the default role(s) defined in the security system will
                be assigned to the user. If roles are not included in the encrypted token and the application is not configured to automatically add new users, the 
                user must be manually added to the application as they normally would be without federated authentication being enabled.</p>
            </description>
        </section>
        <section>
            <title>Configuring the System to Use Federated Authentication</title>
        </section>
        <section>
            <title>Step 1 - Enable federated authentication in the web application's security settings</title>
            <description>
                <p>The security settings dialog has a new option for Federated Authentication settings. 
                Click on the "..." button to enable federated authentication and set other federated authentication options.</p>
            </description>
            <figure>
                <link>images/SecuritySettingsEnableFederatedAuthentication.webp</link>
            </figure>
            <figure>
                <link>images/FederatedAuthenticationSettings.webp</link>
            </figure>
        </section>
        <section>
            <title nested="2">Required pages</title>
            <description>
                <p>Federated authentication settings has a number of pages that are used at different points in the authentication workflow. </p>
            </description>
            <note>Create these default pages. The text and styling can be customized, but any code should not be modified unless 
                requested by support.</note>
            <steps>
                <step>
                    <description>Federated Login Page - This page is used by the federated login workflow. It will initiate a login and process
                    the response from an identity provider.
                    </description>
                </step>
                <step>
                    <description>Federated Logout Page 
                    </description>
                </step>
                <step>
                    <description>Federated Login Error Page - This page is displayed when federated login fails.
                    </description>
                </step>
                <step>
                    <description>Federated XHR Reauthentication Page - This page is a code only page. There is no HTML to customize. However, there is a JSON
                    response payload that can be changed to customize the message that is displayed during authentication and width and height CSS that will 
                    be used if the federated authentication timeout page iframe (see below) needs to be displayed.
                    </description>
                </step>
                <step>
                    <description>Federated Authentication Timeout Page - This page is used when the user's login has expired and there hasn't been a timely
                    response attempting to reauthenticate automatically during an XHR. This page will be shown in an iframe so the state of the application 
                    won't be affected on successful reauthentication.
                    </description>
                </step>
                <step>
                    <description>Federated XHR Reauthentication Complete Page - This page will be displayed in the federated timeout page iframe (see above)
                    when reauthentication has been successful.
                    </description>
                </step>
            </steps>
        </section>
        <section>
            <title nested="2">Required XBasic modules</title>
            <description>
                <p>Federated authentication uses XBasic modules to implement the authentication workflow, selected protocol, and tenant selection (in a multi tenant application). </p>
            </description>
                <note>Create these XBasic modules. The XBasic module code for the tenant needs to be modified to return a tenant id. 
                The other XBasic modules should not be modified unless requested to do so by support.</note>
            <steps>
                <step>
                    <description>Federated authentication module - This module contains the code for handling federated authentication. This module will 
                    use the SAML XBasic module and the Application tenant XBasic module.
                    </description>
                </step>
                <step>
                    <description>SAML XBasic module - This module contains the code for creating requests to a SAML identity provider and for handling
                    responses from a SAML identity provider.
                    </description>
                </step>
                <step>
                	<description>Application tenant XBasic module - This module contains one exported function *[xb:getTenantId()]* that returns a tenant id 
                	of type *[xb:C]. This can be a hardcoded value if the application is not multi-tenant. The tenant id is used to lookup the identity 
                	provider configuration in the federated authentication configuration database. 
                	</description>
                </step>
            </steps>
        </section>
        <section>
            <title>Step 2 - Set up federated authentication </title>
            <description>Setting up federated authentication (Step 2) and Configuring the identity provider for you Alpha Anywhere application (Step 3)
			will typically require you to go back and forth between the two steps. Your application (the &quot;Relying Party&quot; in SAML terminology)
			will need to know the URL for sending requests to the identity provider, and the identity provider will need to be set to allow your 
			application to send requests to it. The Federated Authentication Setting dialog has a button on it to 
			&quot;View/Create Federated Authentication Configuration Table Settings&quot;. This table will be used to store the information about the 
			SAML identity provider used by your application. This table has a &quot;tenantId&quot; column so that more than on identity provider can be 
			used by your application if your application is a multi-tenant application. You will need to use this button to create that table. The
			Federated Authentication Settings dialog also has a button creating a UX for managing the data in the Federated Authentication Configuration Table.
			This UX can be in your application or in a separate, operational application. Either way, it is recommended to use this UX as it will 
			make managing the SAML configuration data much easier. Since it is a UX you are free to customize it. Once this is done, proceed to Step 3. 
			Step 3 will direct you back here to use the identity provider metadata URL.
            </description>
        </section>
        <section>
            <title>Step 3 - Configure the identity provider for your Alpha Anywhere application</title>
            <description>Follow your identity provider's documentation for setting it up for use by a Relying Party. Among other things, an identity provider 
            typically needs to be configured to allow requests from a &quot;Relying Party&quot;, which is your application. The request to the identity provider 
            from your application will contain a URL for being redirected back to your application. This URL will process the response from the identity provider
            in your application. An example URL is https://www.foofoorabbit.com/federatedAuthentication.a5w. This URL will need to be in the identity provider's 
            white list of redirect URLs or &quot;Allowed Redirect URLs&quot;. If you have different deployments of your application for development and testing,
            those URLs will need to be added too. Or you may set up a separate security application in the identity provider for development and testing. Once you
            have configured the identity provider, you can use an identity provider metadata URL to more easily setup federated authentication (Step 2) in 
            your application.
            </description>
        </section>
		<section>
			<title>Diagnostics</title>
			<description>Errors that occur during the federated authentication workflow will be written to the XBasic error log. In addition to this, tracing 
			the authentication workflow can be enabled by setting a session variable <code>Context.Session.Variables.FederatedAuthLogLevel = "Trace"</code>. 
			The trace messages will be written to the Alpha Anywhere trace facility as is done with the XBasic <code>trace.writeln("message", "trace file or pane")</code>.
			The trace file will be named <code>Trace_FederatedAuthentication.log</code>. As this is enabled through a session variable, it is enabled on a per user
			basis and you will need have a page or control on a component to set and/or clear the session variable.
			</description>
		</section>
    </sections>
    <links>
    	<link href="https://documentation.alphasoftware.com/documentation/pages/Guides/Workspaces/Web%20Project%20Profile%20Properties/WebProjectSettings.xml#section2_Cookie%20SameSite%20value">cookie samesite</link>
    </links>
</page>