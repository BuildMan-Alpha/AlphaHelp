<page>
    <shortlink>ux server-side actions send an email message</shortlink>
    <topic>Send an e-mail message</topic>
    <description>Send an e-mail message. The message can use fields from the component.</description>
    <sections>
     
        <section>
   <description></description>
        </section>
        <section>
            <title>Send E-mail Message Action Properties</title>
            <description>&#160;</description>
        </section>
<section>
    <list>
        <item>
            <name-title>E-mail Settings</name-title>
            <description-title>&#160;</description-title>
        </item>
        <item>
            <name>Send method</name>
            <description>Specify if the e-mail should be sent using the built-in e-mail methods, 
                or using a 3rd party e-mail service. 
            </description>
        </item>
        <item>
            <name>Use default e-mail settings</name>
            <description>If you check this box, then the action will use the e-mail settings stored in the 
                Web Project Properties.
            </description>
        </item>
         <item>
            <name>SMPT server</name>
            <description>You can read this value from the Repository at runtime by entering this value for the property: 
                =a5w_GetFromWebAppRepository("keyvalue"), where 'keyvalue' is the key value for the property.
                 This property appears when the send method is 'Internal' and 
                the 'Use default e-mail settings' checkbox is not checked.</description>
        </item>
         <item>
            <name>User name</name>
            <description>The username. You can read this value from the Repository at runtime by entering this value for the property: 
                =a5w_GetFromWebAppRepository("keyvalue"), where 'keyvalue' is the key value for the property. 
                 This property appears when the send method is 'Internal' and 
                the 'Use default e-mail settings' checkbox is not checked.</description>
        </item>
         <item>
            <name>Password</name>
            <description>The password. You can read this value from the Repository at runtime by entering this value for the property: 
                =a5w_GetFromWebAppRepository("keyvalue"), where 'keyvalue' is the key value for the property. 
                 This property appears when the send method is 'Internal' and 
                the 'Use default e-mail settings' checkbox is not checked.</description>
        </item>
         <item>
            <name>Port</name>
            <description>With SSL or TLS enabled, if you are using Gmail the port for the internal email methods is 465. 
                For the .NET methods, use port 587. You can read this value from the Repository at runtime by entering this value for the property: 
                =a5w_GetFromWebAppRepository("keyvalue"), where 'keyvalue' is the key value for the property. This property appears when the send method is 'Internal' and 
                the 'Use default e-mail settings' checkbox is not checked.</description>
        </item>
         <item>
            <name>SSL option</name>
            <description>If you select the .Net Library, SSL and TLS operate identically. You can read this value
                 from the Repository at runtime by entering this value for the property: 
                =a5w_GetFromWebAppRepository("keyvalue"), where 'keyvalue' is the key value for the property. 
This property appears when the send method is 'Internal' and 
                the 'Use default e-mail settings' checkbox is not checked.</description>
        </item>
        
        <item>
            <name>.Net Library</name>
            <description>Specify if the email should be sent using Alpha Five's internal 'sockets' object, or 
                using methods in the Microsoft .Net Framework? In most cases either option should be fine.
            </description>
        </item>
          <item>
            <name>Mandrill key</name>
            <description>Specify your Mandrill key. You need to get this key from Mandrill. 
                You can enter <![CDATA[<Project>]]>, or leave this blank to use the setting for the Mandrill 
                key stored in Web Project Properties.
                 This property appears when the 'Send method' is set to 'Mandrill'.</description>
        </item>
          <item>
            <name>SparkPost key</name>
            <description>Specify your SparkPost key. You will need to get this key from SparkPost. 
                You can enter <![CDATA[<Project>]]>, or leave this blank to use the setting for the SparkPost 
                key stored in Web Project Properties. This property appears when the 'Send method' is set to 'SparkPost'.</description>
        </item>
        
    </list>
</section>
<section>
    <description>&#160;</description>
</section>
<section>
    <list>
        <item>
            <name-title>Message</name-title>
            <description-title>&#160;</description-title>
        </item>
        <item>
            <name>From</name>
            <description>Specify e-mail address of the sender. You can use a component placeholder for 
                the name. e.g. {sent_from}
            </description>
        </item>
        <item>
            <name>From alias</name>
            <description>Specify a friendly name for the from name. You can use a component for the name. 
                e.g. (sent_from}
            </description>
        </item>
        <item>
            <name>Subject</name>
            <description>Specify the message subject. You can use component placeholders in the text. e.g. {subject}.</description>
        </item>
        <item>
            <name>Send to</name>
            <description>A comma or cr-lf delimited list of e-mail addresses. You can use a component placeholder 
                for the e-mail address. e.g. {send_to}.
            </description>
        </item>
        <item>
            <name>CC</name>
            <description>A comma or cr-lf delimted list of e-mail addresses. You can use a component 
                placeholder for the e-mail address. e.g. {send_to}.
            </description>
        </item>
        <item>
            <name>BCC</name>
            <description>A comma or cr-lf delimited list of e-mail addresses. You can use a 
                component placeholder for the e-mail address. e.g. {send_to}.
            </description>
        </item>
        <item>
            <name>Load message from Repository</name>
            <description>Specify if the message should use a saved template stored in the Repository.</description>
        </item>
        
                <item>
            <name>Saved message name</name>
            <description>Specify the saved message template name. You can use component placeholders. e.g. 
                {message_template_name}. This setting appears when the 'Load message from Repository' 
                checkbox is checked.
            </description>
        </item>
        
        <item>
            <name>Message body (HTML)</name>
            <description>The HTML version of the message. You can use component placeholders in the text. e.g. (send_to}. 
                You can call an Xbasic function to compute the message body by specifying this as the message text: 
                {ExecuteFunction:myfunc}(where 'myfunc' is an Xbasic function defined in the Xbasic Functions section). 
                The function that is called takes 'e' as an input parameter and must return the text of the message.
            </description>
        </item>
        
        <item>
            <name>Message body (Plain text)</name>
            <description>The plain text version of the message. You can use component placeholders in the text. e.g. 
                {send_to}. You can call an Xbasic function to compute the message body by specifying this as the message text: 
                {ExecuteFunction:myfunc} (where 'myfunc' is an Xbasic function defined in the Xbasic Functions section). 
                The function that is called takes 'e' as an input parameter and must return the text of the message.
            </description>
        </item>
        <item>
            <name>Attachments</name>
            <description>A comma delimited list of filename attachments. You can use component placeholders for the 
                filenames. e.g. {file1}.
            </description>
        </item>
        <item>
            <name>Store message in outbox</name>
            <description>Specify if the message should be stored in the outbox. Outbox name and connection string 
                are defined in the Web Project Properties.
            </description>
        </item>
       
    </list>
</section>
<section>
    <description>&#160;</description>
</section>
<section>
    <list>
        <item>
            <name-title>Send When</name-title>
            <description-title>&#160;</description-title>
        </item>
        <item>
            <name>Send when</name>
            <description>Specify when the email should be sent. The 'Immediate' option sends the e-mail immediately. 
                However, since connecting to a SMTP server can be slow, this option may not be suitable in a high 
                traffic site. The 'AddToWorkQueue' option adds the task to the Work Queue so that another 
                process can perform the work.
            </description>
        </item>
          <item>
            <name>Work queue format</name>
            <description>Specify the format to use when adding the task to the Work Queue table. 
                'XbasicScript' stores a complete Xbasic script that the process that handles the 
                work queue can just execute. 'XbasicProperties' stores the properties of the task 
                using the Xbasic 'property_to_string()' function. 'JSON' stores the properties 
                of the task in JSON format. The process that handles the work queue will be responsible 
                for converting the properties into Xbasic code.
            </description>
        </item>
        
    </list>
</section>
<section>
    <description>&#160;</description>
</section>
<section>
    <list>
        <item>
            <name-title>Client-side Events</name-title>
            <description-title>&#160;</description-title>
        </item>
        <item>
            <name>After message sent</name>
            <description>Specify the name of a Javascript function to call after the message has been sent. 
                The Javascript function gets passed 'e' which contains 'e.hasError - true/false' and 'e.errorText'.
            </description>
        </item>
          <item>
            <name>Show confirmation message</name>
            <description>Show an alert in the browser indicating whether the message was successfully sent or not. 
                If you want more control over the text and display style of the message, you should 
                set this option to 'false' and instead define an 'AfterMessageSent event'.
            </description>
        </item>
          <item>
            <name>Confirmation message - success</name>
            <description>Confirmation message - email sent or queued successfully. The default reads 'Message was sent'.</description>
        </item>
          <item>
            <name>Confirmation message - failure</name>
            <description>Confirms that an error occurred and that the email was not sent or queued. The default 
                text for this message is 'Message was not sent because of an error'.
            </description>
        </item>

    </list>
</section>

    </sections>
</page>