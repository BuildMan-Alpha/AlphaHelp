<page>
    <shortlink>ux server-side actions send an email message</shortlink>
    <topic>Send an e-mail message</topic>
    <description>Send an e-mail message. The message can use fields from the component.</description>
    <sections>
     
        <section>
   <description>A common pattern in web applications is to have a client-side form where customers fill out
        information. This data can then be saved on a server after which an email message can be sent. 
        The steps involved in adding this feature to a component are described in this four part video: 
        [Part 1], [Part 2], [Part 3], [Part 4]. You can also use the guide on this page.</description>
        </section>
        <section>
            <title>Send E-mail Message Action Properties</title>
            <description>&#160;</description>
        </section>
<section>
    <list>
        <item>
            <name-title>E-mail Settings</name-title>
            <description-title>&#160;</description-title>
        </item>
        <item>
            <name>Send method</name>
            <description>Specify if the e-mail should be sent using the built-in e-mail methods, 
                or using a 3rd party e-mail service. 
            </description>
        </item>
        <item>
            <name>Use default e-mail settings</name>
            <description>If you check this box, then the action will use the e-mail settings stored in the 
                Web Project Properties.
            </description>
        </item>
         <item>
            <name>SMPT server</name>
            <description>You can read this value from the Repository at runtime by entering this value for the property: 
                =a5w_GetFromWebAppRepository("keyvalue"), where 'keyvalue' is the key value for the property.
                 This property appears when the send method is 'Internal' and 
                the 'Use default e-mail settings' checkbox is not checked.</description>
        </item>
         <item>
            <name>User name</name>
            <description>The username. You can read this value from the Repository at runtime by entering this value for the property: 
                =a5w_GetFromWebAppRepository("keyvalue"), where 'keyvalue' is the key value for the property. 
                 This property appears when the send method is 'Internal' and 
                the 'Use default e-mail settings' checkbox is not checked.</description>
        </item>
         <item>
            <name>Password</name>
            <description>The password. You can read this value from the Repository at runtime by entering this value for the property: 
                =a5w_GetFromWebAppRepository("keyvalue"), where 'keyvalue' is the key value for the property. 
                 This property appears when the send method is 'Internal' and 
                the 'Use default e-mail settings' checkbox is not checked.</description>
        </item>
         <item>
            <name>Port</name>
            <description>With SSL or TLS enabled, if you are using Gmail the port for the internal email methods is 465. 
                For the .NET methods, use port 587. You can read this value from the Repository at runtime by entering this value for the property: 
                =a5w_GetFromWebAppRepository("keyvalue"), where 'keyvalue' is the key value for the property. This property appears when the send method is 'Internal' and 
                the 'Use default e-mail settings' checkbox is not checked.</description>
        </item>
         <item>
            <name>SSL option</name>
            <description>If you select the .Net Library, SSL and TLS operate identically. You can read this value
                 from the Repository at runtime by entering this value for the property: 
                =a5w_GetFromWebAppRepository("keyvalue"), where 'keyvalue' is the key value for the property. 
This property appears when the send method is 'Internal' and 
                the 'Use default e-mail settings' checkbox is not checked.</description>
        </item>
        
        <item>
            <name>.Net Library</name>
            <description>Specify if the email should be sent using Alpha Five's internal 'sockets' object, or 
                using methods in the Microsoft .Net Framework? In most cases either option should be fine.
            </description>
        </item>
          <item>
            <name>Mandrill key</name>
            <description>Specify your Mandrill key. You need to get this key from Mandrill. 
                You can enter <![CDATA[<Project>]]>, or leave this blank to use the setting for the Mandrill 
                key stored in Web Project Properties.
                 This property appears when the 'Send method' is set to 'Mandrill'.</description>
        </item>
          <item>
            <name>SparkPost key</name>
            <description>Specify your SparkPost key. You will need to get this key from SparkPost. 
                You can enter <![CDATA[<Project>]]>, or leave this blank to use the setting for the SparkPost 
                key stored in Web Project Properties. This property appears when the 'Send method' is set to 'SparkPost'.</description>
        </item>
        
    </list>
</section>
<section>
    <description>&#160;</description>
</section>
<section>
    <list>
        <item>
            <name-title>Message</name-title>
            <description-title>&#160;</description-title>
        </item>
        <item>
            <name>From</name>
            <description>Specify e-mail address of the sender. You can use a component placeholder for 
                the name. e.g. {sent_from}
            </description>
        </item>
        <item>
            <name>From alias</name>
            <description>Specify a friendly name for the from name. You can use a component for the name. 
                e.g. (sent_from}
            </description>
        </item>
        <item>
            <name>Subject</name>
            <description>Specify the message subject. You can use component placeholders in the text. e.g. {subject}.</description>
        </item>
        <item>
            <name>Send to</name>
            <description>A comma or cr-lf delimited list of e-mail addresses. You can use a component placeholder 
                for the e-mail address. e.g. {send_to}.
            </description>
        </item>
        <item>
            <name>CC</name>
            <description>A comma or cr-lf delimted list of e-mail addresses. You can use a component 
                placeholder for the e-mail address. e.g. {send_to}.
            </description>
        </item>
        <item>
            <name>BCC</name>
            <description>A comma or cr-lf delimited list of e-mail addresses. You can use a 
                component placeholder for the e-mail address. e.g. {send_to}.
            </description>
        </item>
        <item>
            <name>Load message from Repository</name>
            <description>Specify if the message should use a saved template stored in the Repository.</description>
        </item>
        
                <item>
            <name>Saved message name</name>
            <description>Specify the saved message template name. You can use component placeholders. e.g. 
                {message_template_name}. This setting appears when the 'Load message from Repository' 
                checkbox is checked.
            </description>
        </item>
        
        <item>
            <name>Message body (HTML)</name>
            <description>The HTML version of the message. You can use component placeholders in the text. e.g. (send_to}. 
                You can call an Xbasic function to compute the message body by specifying this as the message text: 
                {ExecuteFunction:myfunc}(where 'myfunc' is an Xbasic function defined in the Xbasic Functions section). 
                The function that is called takes 'e' as an input parameter and must return the text of the message.
            </description>
        </item>
        
        <item>
            <name>Message body (Plain text)</name>
            <description>The plain text version of the message. You can use component placeholders in the text. e.g. 
                {send_to}. You can call an Xbasic function to compute the message body by specifying this as the message text: 
                {ExecuteFunction:myfunc} (where 'myfunc' is an Xbasic function defined in the Xbasic Functions section). 
                The function that is called takes 'e' as an input parameter and must return the text of the message.
            </description>
        </item>
        <item>
            <name>Attachments</name>
            <description>A comma delimited list of filename attachments. You can use component placeholders for the 
                filenames. e.g. {file1}.
            </description>
        </item>
        <item>
            <name>Store message in outbox</name>
            <description>Specify if the message should be stored in the outbox. Outbox name and connection string 
                are defined in the Web Project Properties.
            </description>
        </item>
       
    </list>
</section>
<section>
    <description>&#160;</description>
</section>
<section>
    <list>
        <item>
            <name-title>Send When</name-title>
            <description-title>&#160;</description-title>
        </item>
        <item>
            <name>Send when</name>
            <description>Specify when the email should be sent. The 'Immediate' option sends the e-mail immediately. 
                However, since connecting to a SMTP server can be slow, this option may not be suitable in a high 
                traffic site. The 'AddToWorkQueue' option adds the task to the Work Queue so that another 
                process can perform the work.
            </description>
        </item>
          <item>
            <name>Work queue format</name>
            <description>Specify the format to use when adding the task to the Work Queue table. 
                'XbasicScript' stores a complete Xbasic script that the process that handles the 
                work queue can just execute. 'XbasicProperties' stores the properties of the task 
                using the Xbasic 'property_to_string()' function. 'JSON' stores the properties 
                of the task in JSON format. The process that handles the work queue will be responsible 
                for converting the properties into Xbasic code.
            </description>
        </item>
        
    </list>
</section>
<section>
    <description>&#160;</description>
</section>
<section>
    <list>
        <item>
            <name-title>Client-side Events</name-title>
            <description-title>&#160;</description-title>
        </item>
        <item>
            <name>After message sent</name>
            <description>Specify the name of a Javascript function to call after the message has been sent. 
                The Javascript function gets passed 'e' which contains 'e.hasError - true/false' and 'e.errorText'.
            </description>
        </item>
          <item>
            <name>Show confirmation message</name>
            <description>Show an alert in the browser indicating whether the message was successfully sent or not. 
                If you want more control over the text and display style of the message, you should 
                set this option to 'false' and instead define an 'AfterMessageSent event'.
            </description>
        </item>
          <item>
            <name>Confirmation message - success</name>
            <description>Confirmation message - email sent or queued successfully. The default reads 'Message was sent'.</description>
        </item>
          <item>
            <name>Confirmation message - failure</name>
            <description>Confirms that an error occurred and that the email was not sent or queued. The default 
                text for this message is 'Message was not sent because of an error'.
            </description>
        </item>

    </list>
</section>

<section>
    <title>Sending an Email Message Using a Server-side Event</title>
    <description>A common experience for the end-user of a application frequently involves the following process. 
        First the user enters some type data into the application such as personal data, shipping information, 
        or payment data. When the user is finished they then click a 'Submit' button and wait to see if their 
        data is validated. This [validation] can happen on either the client-side or the server. After the data is 
        validated the user then usually recieves some sort of confirmation message that appears in the application 
        itself, such as "Thank you for your order" or "Your application has been submitted".
        This is then frequently followed by an email confirmation that is sent to the email address that the user 
        specified when entering data.
        
        This section will cover the steps involved in creating a component that 
        uses the send e-mail action after entered data is validated and saved on to a server. The first step will 
        be to define the thank you message that the user receives once they are done entering data. This 
        can be done by creating and publishing a simple A5W page in Alpha Anywhere. The second step will 
        then be to create a UX component containing the controls that the user will enter their data into. In order 
        to save this data it will be necessary to create a new DBF or SQL table, the third step. The controls in the 
        component will be automatically bound to the fields in the table through [Data Binding].
        From here it will be possible to tie a '[Save Submitted Data to Table(s)]' action to the [afterDialogValidate] 
        server-side event and then finally add the action that sends the email after the data has been saved. 
         
    </description>
    
    
</section>

<section>
    <title>Create an A5W Page to Load when Data is Saved</title>
    <steps>
        <step>
            <description>In the Web Projects Control Panel click the 'New' button to create a 'New component or page'</description>
            <figure><link>images/cap.png</link></figure>
        </step>
         <step>
            <description>Select the 'A5W' option and click 'Next'.</description>
            <figure><link>images/cap2.png</link></figure>
        </step>
        
        <step>
            <description>Select the 'Blank Page' option and click 'Next'.</description>
            <figure><link>images/cap3.png</link></figure>
        </step>
        
        <step>
            <description>Open the 'WYSIWYG' (what you see is what you get) tab at the bottom of the A5W page.</description>
            <figure><link>images/cap4.png</link></figure>
        </step>
        
        <step>
            <description>Type a message into the workspace. Use the tools in the toolbar to set the font, color, and alignment of the message.</description>
            <figure><link>images/cap5.png</link></figure>
        </step>
        <step>
            <description>Click on the 'File' dropdown in the top left corner of Alpha Anywhere and select 'Save As'. 
                Save the A5W page as 'ThankYou'
            </description>
            <figure><link>images/cap6.png</link></figure>
        </step>
        <step>
            <description>Go back to the Web Projects Control Panel and view the A5W using the side menu.</description>
            <figure><link>images/cap7.png</link></figure>
        </step>
        <step>
            <description>Highlight the A5W page that you added. Right click and select the 'Page Security' open. Set to 'Always Allowed'.</description>
            <figure><link>images/cap7.png</link></figure>
        </step>
        <step>
            <description>Right click again and select 'Publish' and 'Publish (local webroot)'.</description>
            <figure><link>images/cap7.png</link></figure>
        </step>
    </steps>
</section>


<section>
    <title>Create the Controls to Enter Data into a Server</title>
    
    <steps>
        <step>
            <description>Return to the Web Projects Control Panel and create a new UX page.</description>
            <figure><link>images/ced.png</link></figure>
        </step>
        <step>
            <description>In the UX Builder on the UX controls page open the 'Data Controls' menu. Click on the [TextBox] 
                option to add a textbox control to the component. Give the control the name and label of 'firstname'
            </description>
               <figure><link>images/ced.png</link></figure>
        </step>
        <step>
            <description>Add a second textbox control to the component with the name and label of 'lastname'.</description>
               <figure><link>images/ced.png</link></figure>
        </step>
        <step>
            <description>Add a third textbox control. Give this control the name and label 'address'.</description>
               <figure><link>images/ced.png</link></figure>
        </step>
        <step>
            <description>Add a forth textbox control named and labeled 'city'.</description>
               <figure><link>images/ced.png</link></figure>
        </step>
        <step>
            <description>Add a fifth textbox with the name and label of 'state'.</description>
               <figure><link>images/ced.png</link></figure>
        </step>
        <step>
            <description>Finally add a sixth textbox with the name and label 'email'.</description>
               <figure><link>images/ced.png</link></figure>
        </step>
        <step>
            <description>Open the 'Defined Controls' menu and click on the 'Submit-Reset' option to add 
                submit and reset buttons to the component. 'Submit' will send any entered data to the server.
            </description>
               <figure><link>images/ced.png</link></figure>
        </step>
        
        
    </steps>
    
    
    
    
</section>




<section>
    <title>Create a New Table and Bind it to the Component</title>
    <steps>
        <step>
            <description>Continuing from the section above, in the UX Builder open the 'UX Data Binding' page.</description>
               <figure><link>images/cnt.png</link></figure>
        </step>
        <step>
            <description>Click the 'Create new table(s) to match the controls on your UX component' hyperlink.</description>
                  <figure><link>images/cnt.png</link></figure>
        </step>
        <step>
            <description>Click on the 'Step 1 - Define Table Aliases and Fields' tab.
                 Highlight the <![CDATA[<Top Level>]]> section and click the 'Add' button in the 'Properties' section and add a new table alias. 
            </description>
                  <figure><link>images/cnt.png</link></figure>
        </step>
        <step>
            <description>In the 'Fields in Logical Section' the 'Table Alias' should now be defined but not the Field Specification. 
                This specification defines the length and type of each field in the table. Highlight the 'firstname' variable 
                in the 'Fields in Logical Section:' list.
            </description>
                  <figure><link>images/cnt.png</link></figure>
        </step>
        <step>
            <description>In the Properties section on the right set the Field 'Size' to '20'. Leave the 'Field 
                type' set to 'Character'. If the 'Table alias' was not set automatically you can use the 'Set...' 
                button to define an alias for this variable.
            </description>
                  <figure><link>images/cnt.png</link></figure>
        </step>
        <step>
            <description>Define the 'Size' for each of the remaining variables. Set the 'email' variable to 
                '30'.</description>
                  <figure><link>images/cnt.png</link></figure>
        </step>
        <step>
            <description>Click on the 'Step 2. Define Table Properties' tab. In the Table Properties fill 
                in a name for the table, like 'Completed Orders'
            </description>
                  <figure><link>images/cnt.png</link></figure>
        </step>
        <step>
            <description>In the 'Global Table Properties' section at the bottom of the tab click the dropdown next to the 
                'Table type' property and select 'SQL'. 
            </description>
                  <figure><link>images/cnt.png</link></figure>
        </step>
        <step>
            <description>Click the [...] button next to the 'Connection string' property. 
            </description>
                  <figure><link>images/cnt.png</link></figure>
        </step>
        <step>
            <description>The Connection String dialog should open. If you already a connection string to the 
                Northwind database defined click the 'Select' button and build a connection to the 
                'Northwind' database. Otherwise choose the 'Specify a connection string' radio button and click the 
                'Build' button to build a connection.
            </description>
                  <figure><link>images/cnt.png</link></figure>
        </step>
        <step>
            <description>Open 'Step 3. Create table(s)' and click the 'Create table(s)' button and then close the 
                make table(s) dialog.
            </description>
                  <figure><link>images/cnt.png</link></figure>
        </step>
      
        
    </steps>
    
    
</section>

<section>
    <title>Save Data Entered on the Client to the Server</title>
    <steps>
        <step>
            <description>In the UX Builder open the 'Events' menu and then open 'Server-side' events page. 
                In the 'Server-Side Events' list highlight the 'afterDialogValidate' event. 
            </description>
                  <figure><link>images/sde.png</link></figure>
        </step>
         <step>
            <description>Place the mouse cursor inside the 'afterDialogValidate function definition on the right.</description>
               <figure><link>images/sde.png</link></figure>
        </step>
         <step>
            <description>Click on the 'Action Scripting' button in the page's toolbar. 
               
            </description>
               <figure><link>images/sde.png</link></figure>
        </step>
         <step>
            <description>Click on the 'Save Submitted Data to Table(s) action. Click OK.</description>
               <figure><link>images/sde.png</link></figure>
        </step>
         <step>
            <description>Give then action a name, or use the default name, and click OK.</description>
               <figure><link>images/sde.png</link></figure>
        </step>
         <step>
            <description>In the 'Save Submitted Data to Tables dialog click the 'After submit action' 
                dropdown in the 'Save Data' section. Select 'Redirect to another page' option.
            </description>
               <figure><link>images/sde.png</link></figure>
        </step>
         <step>
            <description>Next to the 'Target page' property type the name of the A5w page that you defined 
                in the beginning section, "ThankYou.A5w". Click OK.
            </description>
            <example><![CDATA[ThankYou.A5w]]></example>
               <figure><link>images/sde.png</link></figure>
        </step>
    </steps>
    
    
    
</section>


<section>
    <title>Send an E-mail Stating that the Data was Saved</title>
     <steps>
        <step>
            <description></description>
            
        </step>
        
        
    </steps>
    
    
    
</section>



<section>
    <title>Using a Work Queue</title>
    <description>In addition to sending out an email immediately, once some data has been validated, it is also possible to 
        to let some other process on the server handle the sending of the email. If the server is very busy 
        dealing with other processes, then having a queue will mean that the actual sending of the email can happen once 
        all of these processes happening on the server have been resolved. When the server is not overloaded these 
        processes will also finish faster. 
    </description>
    
</section>


    </sections>
    
<links>
    <link link="http://www.ajaxvideotutorials.com/V11Videos/DialogComponent_SendingEmail_1.swf"></link>
    <link link="http://www.ajaxvideotutorials.com/V11Videos/DialogComponent_SendingEmail_2.swf"></link>
    <link link="http://www.ajaxvideotutorials.com/V11Videos/DialogComponent_SendingEmail_3.swf"></link>
    <link link="http://www.ajaxvideotutorials.com/V11Videos/DialogComponent_SendingEmail_4.swf"></link>
    <link link="ux Server-side actions Save Submitted Data to Tables">Save Submitted Data to Table(s)</link>
    <link link="ux events afterdialogvalidate">afterDialogValidate</link>
    <link link="ux components data binding">Data Binding</link>
    <link link="ux properties validation and error reporting">validation</link>
    <link link=""></link>
    <link link=""></link>
    
</links>    
    
    
</page>