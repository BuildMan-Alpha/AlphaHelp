<page>
    <shortlink>ux Server-side actions Save Submitted Data to Tables</shortlink>
    <topic>Save Submitted Data to Table(s)</topic>
    <description>Save the submitted data to one or more tables.</description>
    <sections>
     
        <section>
   <description>In order to define a 'Save Submitted Data to Table(s)' action it is necessary to 
       first add Data Binding to the component, meaning that the component must be tied to a either 
       a SQL or DBF table defined on the server. The process of adding this action to a server-side event 
       on a data-bound component is described on the "[Bind the controls on your UX to fields in one or more existing 
       tables]" page in the [Data Binding] section of the documentation.
   </description>
        </section>        
        
        
        
        
        
           <section>
                 <title>Save Submitted Data to Table(s) Action Properties</title>
            <description>&#160;</description>
        </section>
        
        <section>
             
            <list>
                 <item>
                    <name-title>Save Data</name-title>
                    <description-title>&#160;</description-title>
                </item>
                <item>
                    <name>After submit action</name>
                    <description>Specify the action to take after the submitted data has been saved.</description>
                </item>
                <item>
                    <name>Target page</name>
                    <description>Specify the target page.</description>
                </item>
                <item>
                    <name>Use transactions</name>
                    <description>Should all of the SQL statements be wrapped inside a transaction? 
                        For example, if your Dialog has a Repeating Section so that some of the data 
                        is inserted into a 'header' table, and the data from the 'Repeating Section' is 
                        inserted into a 'detail' table, the record inserted into the 'header' table will be 
                        automatically deleted if an error occurs while entering data into the 'detail' table. 
                        Transactions are not supported for .dbf tables. Not all SQL databases support 
                        transactions.
                    </description>
                </item>
                <item>
                    <name>Display debugging info</name>
                    <description>Specify if the SQL statements (for SQL tables), or Xbasic code (for .dbf 
                        tables) should be shown. Note: If the 'After submit action' is set to redirect, 
                        then you will not see the debugging information (unless there is an error), 
                        because control will be redirected to the target page. </description>
                </item>
                <item>
                    <name>Debugging information placeholder</name>
                    <description>Specify where debugging information should be shown. If you are working in an application 
                        that uses Panels, you will typically put a placeholder in the Panel to show debugging information 
                        in the appropriate panel. Set to <![CDATA[<Default>]]> for the default placement of debugging information.
                    </description>
                </item>
                
                
                <item>
                    <name>Global errors placeholder</name>
                    <description>Specify where global errors (if a commit error that is not specific 
                        to a particular field) should be displayed. If you are working in 
                        an application that uses Panels, you will typically put a placeholder in the 
                        Panel to show Global errors in the appropriate panel. Set to <![CDATA[<Default>]]> 
                        for the default placement of global errors.
                    </description>
                </item>
                
            </list>
        </section>
        <section>
            <description>&#160;</description>
        </section>
        
        
        <section>
         
            <list>
                <item>
                    <name-title>After Save Confirmation</name-title>
                     <description-title>&#160;</description-title>
                </item>
                    <item>
                    <name>Show a fade out message after record save</name>
                    <description>Specify if a confirmation message should be shown after a record is saved. 
                        Note that the message will not be shown if the action redirects to another page.
                    </description>
                </item>
                <item>
                    <name>Message text</name>
                    <description>Specify the text of the confirmation message.
                         This setting appears once the 'Show a fade out message after record save' property is checked.</description>
                </item>
                 <item>
                    <name>Placeholder id where message is to be shown</name>
                    <description>Specify the name of the placeholder where the confirmation message should be shown. 
                        To add a placeholder to the component select the [Placeholder] control in the 'Other Controls' section 
                        of the toolbox.  
                        This setting appears once the 'Show a fade out message after record save' property is checked.</description>
                </item>
                 <item>
                    <name>Message duration</name>
                    <description>Specify the duration of the message in milliseconds. For example, 2000 is 2 seconds. 
                        This setting appears once the 'Show a fade out message after record save' property is checked.</description>
                </item>
                 <item>
                    <name>Message style</name>
                    <description>Specify the style for the message. 'Default' will style the message based on the current 
                        component style. 'None' will not apply any style. You can add your own styling to the message text itself. 
                        This setting appears once the 'Show a fade out message after record save' property is checked.</description>
                </item>
            </list>
        </section>
           <section>
            <description>&#160;</description>
        </section>
        
        <section>
            <list>
                <item>
                    <name-title>Client-side Events</name-title>
                    <description-title>&#160;</description-title>
                </item>
                <item>
                    <name>After save</name>
                    <description>Specify the name of a Javascript function to call after the server-side 
                        event that saves the data has completed. The function gets passed as an 'e' object 
                        that contains certain properties, including 'recordWasSaved' which is true or false. 
                        Note: Event will not fire if the action redirects to another page.
                    </description>
                </item>
                <item>
                    <name>Data to pass to client side event</name>
                    <description>You can populate the 'e' object that is passed to the client-side 'After save' 
                        event with information that is available on the server.
                    </description>
                </item>
                <item>
                    <name>After save succeeded Javascript</name>
                    <description>Specify the Javascript to execute if the save succeeded. 
                        You can use this property as an alternative to specifying the 'After save' 
                        Javascript function.
                    </description>
                </item>
                <item>
                    <name>After save failed Javascript</name>
                    <description>Specify the Javascript to execute if the save failed. You can 
                        use this property as an alternative to specifying the 'After save' Javascript function.
                    </description>
                </item>
                
            </list>
        </section>
        
           <section>
            <description>&#160;</description>
        </section>
        
        <section>
            <list>
                <item>
                    <name-title>Server-side Events</name-title>
                    <description-title>&#160;</description-title>
                </item>
                   <item>
                    <name>BeforeRecordInsert Function</name>
                    <description></description>
                </item>
                    <item>
                    <name>AfterRecordInsert Function</name>
                    <description></description>
                </item>
                    <item>
                    <name>BeforeRecordUpdate Function</name>
                    <description></description>
                </item>
                    <item>
                    <name>AfterRecordUpdate Function</name>
                    <description></description>
                </item>
                    <item>
                    <name>BeforeRecordDelete Function</name>
                    <description></description>
                </item>
                    <item>
                    <name>AfterRecordDelete Function</name>
                    <description></description>
                </item>
                    <item>
                    <name>AfterSectionRowRefresh Function</name>
                    <description></description>
                </item>
                    <item>
                    <name>onSQLError Function</name>
                    <description>Fires when a SQL error occurs after attempting a CRUD operation. 
                        Allows you to intercept the error message returned by the database and 
                        return a friendlier message.
                    </description>
                </item>
                
            </list>
        </section>
           <section>
            <description>&#160;</description>
        </section>
        
         <section>
            <list>
                <item>
                    <name-title>Geography Fields</name-title>
                    <description-title>&#160;</description-title>
                </item>
                   <item>
                    <name>Geocode record</name>
                    <description>When record is saved should the record be geo-coded? i.e. should a 
                        latitude/longitude value be computed for the address?
                    </description>
                </item>
                 <item>
                    <name>Location fields ('Geography' or 'Geometry type fields)</name>
                    <description>When record is saved should a 'location' field (i.e. a 
                        'Geography' or 'Geometry' field) be updated if a longitude or latitude field was edited. </description>
                </item>
                
            </list>
        </section>
           <section>
            <description>&#160;</description>
        </section>
        
            <section>
            <list>
                <item>
                    <name-title>Refresh List Controls</name-title>
                    <description-title>&#160;</description-title>
                </item>
                   <item>
                    <name>Refresh List Controls</name>
                    <description>After data is edited, specify if there are any List controls on the 
                        component that you want to refresh so that the data in the List controls reflect 
                        the edits that were saved.
                    </description>
                </item>
                  <item>
                    <name>List controls to refresh</name>
                    <description>Specify the ids of the List controls you want to refresh.</description>
                </item>
                
            </list>
        </section>
           <section>
            <description>&#160;</description>
        </section>
        
          <section>
            <list>
                <item>
                    <name-title>Store Current Location Information</name-title>
                    <description-title>&#160;</description-title>
                </item>
                    <item>
                    <name>Store location information when record is saved</name>
                    <description>You can optionally store the location (latitude/longitude) in fields 
                        in the record you are editing. The location information is submitted when the 
                        Ajax callback is made. To submit location information when the 'Submit' button is 
                        pressed, the .Submit() method takes a special flag.
                         For example: submit(",",{getLocationData:true})
                    </description>
                </item>
                  <item>
                    <name>Latitude field</name>
                    <description>Specify the field where the latitude value should be stored.</description>
                </item>
                  <item>
                    <name>Longitude field</name>
                    <description>Specify the field where the longitude value should be stored</description>
                </item>
                  <item>
                    <name>Update location field</name>
                    <description>Specify if the table has a Geography/Geometry field that should be updated.</description>
                </item>
                <item>
                    <name>Location field name</name>
                    <description>Brings up a dialog that lets you select the location field to be updated. If the 
                        field dialog does not show all of the fields in the table, go to the 'Data Binding' 
                        pane and click the 'Refresh Table Information' button.
                    </description>
                </item>
                  <item>
                    <name>Store data for which operation types</name>
                    <description>Specify if the current location information should be stored only when inserting 
                        a new record, or when Inserting and Updating a record.
                    </description>
                </item>
            </list>
        </section>
<section>
    <title>Using the 'Save Submitted Data to Tables' Action in Connection With Security</title>
    <description>This guide builds on the '[Validate Web Security Values]' action guide. This first guide 
        illustrated how to set up basic username and password capabilities in a component. 
        When a user creates a username and password they sometimes type in additional data to submit to the server. 
        For example, this data might be the users phone-number or first name and/or family name. 
        The 'Save Submitted Data to Table(s)' action can be used to save this data to a separate table from the 
        user's security data. The 'UserName' field can also be used to link both tables, so that the non-security 
        related data can be loaded securely at a later point. 
    </description>
    
    
    
</section>

<section>
    <title>Build the Component in the Validate Web Security Values Guide</title>
   <steps>
       <step>
           <description>Go to the [Validate Web Security Values] guide and build the entire component.</description>
      
       </step>
       <step>
         <description>The component should look like this:</description>
         <figure><link>images/ssd2.png</link></figure>
       </step>
       </steps>
       </section>
       
       <section>
           <title>Change The Security Table Type to SQL</title>
           <steps>
               <step>
                   <description>On the 'Web Projects Control Panel' click on the 'Web Security' button.
                   </description>
                   <figure><link>images/ssd3.png</link></figure>
               </step>
               <step>
                   <description>Select 'Web Security Configuration' and click OK.</description>
                   <figure><link>images/ssd4.png</link></figure>
               </step>
               <step>
                   <description>Open the 'Security Policy' tab and click on the [...] button next to the 
                       'Security Table Type' setting.
                   </description>
                   <figure><link>images/ssd5.png</link></figure>
               </step>
               <step>
                   <description>Select the "Use 'SQL Database'" radio button and click OK.</description>
                   <figure><link>images/ssd6.png</link></figure>
               </step>
               <step>
                   <description>Click OK to close the 'Web Security Configuration' page. A 
                       'Web Security Tables Genie' will appear.
                   </description>
                   <figure><link>images/ssd7.png</link></figure>
               </step>
               <step>
                   <description>Click the 'Define Connection String' button.</description>
                   <figure><link>images/ssd8.png</link></figure>
               </step>
               <step>
                   <description>Click the "Create 'AADemo-Northwind' demo connection string" hyperlink.</description>
                   <figure><link>images/ssd9.png</link></figure>
               </step>
               <step>
                   <description>In the 'Demo Connection String' dialog select one of the two options and click the 
                       "OK - Create a named connection string called 'AADemo-Northwind'" button.
                   </description>
                   <figure><link>images/ssd10.png</link></figure>
               </step>
               <step>
                   <description>The connection string will be created.</description>
                  
               </step>
               <step>
                   <description>In the Connection String dialog select the 'Use a named connection string' radio button and 
                       click the 'Select' button.
                   </description>
                   <figure><link>images/ssd13.png</link></figure>
               </step>
               <step>
                   <description>Highlight the 'AADemo-Northwind' connection string and click OK and OK again.</description>
                   <figure><link>images/ssd12.png</link></figure>
               </step>
               <step>
                   <description>In the Web Security Tables Genie click the 'Next >' button.</description>
                   <figure><link>images/ssd14.png</link></figure>
               </step>
               <step>
                   <description>Click next again to use the default tables to store the security fields. You can define new 
                       table names here as well.
                   </description>
                   <figure><link>images/ssd16.png</link></figure>
               </step>
               
               
               
           </steps>
           
           
       </section>
       
       <section>
           <title>Minor Adjustments to Security Controls</title>
          
           <steps>
       <step>
           <description>Open the UX Component that you built using the [Validate Web Security Values] guide. 
               On the UX Controls page of the component highlight the [password] textbox control. 
           </description>
           <figure><link>images/ssd17.png</link></figure>
       </step>
 <step>
           <description>In the properties list on the right scroll down to the 'Data Binding' 
               section and uncheck the 'Updateable' property checkbox.</description>
           <figure><link>images/ssd18.png</link></figure>
           <note>It will be necessary to set the fields generated from the 
               password, confirm_password, UserRoles and UserGuid controls as unbound during the 'Data-Binding' part 
               of this guide. In order to be able to do this, these controls can not be marked as 'Updateable' in their 
               individual 'Data Binding' sections on the UX Controls page properties list.</note>
       </step>
 <step>
           <description>Highlight the [confirm_password] textbox in the controls tree and uncheck the control's 'Updateable' 
               checkbox.
           </description>
           <figure><link>images/ssd19.png</link></figure>
       </step>
          <step>
           <description>Uncheck the 'Updateable' property checkboxes for the [UserRoles] and the [UserGuid] hidden controls.</description>
           <figure><link>images/ssd20.png</link></figure>
       </step>
   </steps>
    
    
</section>
<section>
    <title>Add a Personal Data Section to the Component</title>
    <descripion>In the 'Personal Data Section', data that users enter into the controls will be
        sent to a registered users table on the server.</descripion>
    <steps>
        
        <step>
           <description>On the UX Controls page open the 'Data Controls' menu. Click on the [TextBox] 
               option to add a textbox control to the page. Give the control the name and label of 
               'first name'. 
           </description>
           <figure><link>images/ssd21.png</link></figure>
       </step>
       <step>
           <description>Highlight the first_name control and click on the double up arrow in the toolbar to 
               move the control to the top of the controls tree.
           </description>
           <figure><link>images/ssd22.png</link></figure>
       </step>
       <step>
           <description>In the properties list on the right, in the 'Field Properties' section, click 
               the [...] button next to the 'Validation Javascript' property.
           </description>
           <figure><link>images/ssd23.png</link></figure>
           
       </step>
       <step>
           <description>Add the following code to the client side validation for the first_name control. Click OK.</description>
           <example><![CDATA[if(data==''){
return 'First Name is Required';
} else {
   return false;
};]]></example>
            <figure><link>images/ssd24.png</link></figure>
            <note>This is some simple client-side validation that will require the user to enter a first name.</note>
       </step>
       
       <step>
           <description>With the first_name control still highlighted, go back to the 'Data Controls' menu 
               and add a second [TextBox] control to the component. Give this control the name and label 
               'last name'.
           </description>
           <figure><link>images/ssd25.png</link></figure>
       </step>
       <step>
           <description>Highlight the 'last_name' field and add a third [TextBox] control to the component. 
               Give this control the name and label of [phone].
           </description>
           <figure><link>images/ssd26.png</link></figure>
       </step>
       <step>
           <description>Highlight the [first_name] field. Open the 'Other Controls' menu and click on the 
               [Static Text] control to add some static text control underneath the [first_name] control.
           </description>
           <figure><link>images/ssd27.png</link></figure>
       </step>
       <step>
           <description>Highlight the static text control in the controls tree.</description>
           <figure><link>images/ssd28.png</link></figure>
       </step>
        <step>
           <description>In the properties list on the right set the 'Static text' property to be 
               an asterix '*'. 
           </description>
           <figure><link>images/ssd29.png</link></figure>
       </step>
        <step>
           <description>Click the [...] button next to the 'Style' property.</description>
           <figure><link>images/ssd30.png</link></figure>
       </step>
        <step>
           <description>In the 'Style Editor' set the 'Color' property to be 'red' and click OK.</description>
           <figure><link>images/ssd31.png</link></figure>
       </step>
        <step>
           <description>Place [Static Text] controls underneath the [last_name] and [phone] controls. Set the 
               'Static text' property of both controls to be '*' and set the 'Style' property's 'Color' setting 
               to be 'red' as well.
           </description>
           <figure><link>images/ssd32.png</link></figure>
       </step>
        <step>
           <description>Add a forth [Static Text] control, underneath the static text asterix under 
               the [phone] control. Set the 'Static text' property of this control to read '*Required Fields' 
               and set the control's 'Syle' property's 'Color' to be 'red'.</description>
           <figure><link>images/ssd33.png</link></figure>
       </step>
        <step>
           <description>Highlight all of the most recently added controls. Open the 'Containers' menu 
               and click on the [Frame] option to add a frame container around the controls. Give the 
               Frame the name 'Personal Data'.
           </description>
           <figure><link>images/ssd34.png</link></figure>
       </step>
       <step>
           <description>The complete controls tree:</description>
           <figure><link>images/ssd35.png</link></figure>
       </step>
    </steps>
    
    
    
</section>
<section>
    <title>Data Binding</title>
    <steps>
        <step>
           <description>In the UX Builder's main menu open the 'Data Binding' page and click the 
               'Create new table(s) to match the controls on your UX component' hyperlink.
           </description>
           <figure><link>images/db2.png</link></figure>
       </step>
        <step>
           <description>Open the 'Step 1 - Define Table Aliases and Fields' tab. In the 'Logical Dialog Sections' 
               highlight the <![CDATA[<Top Level>]]> section. Click the 'Add' button in the section's 'Properties' 
               area.</description>
           <figure><link>images/db3.png</link></figure>
       </step>
       <step>
           <description>Name the new table alias 'RegisteredUsers'.</description>
           <figure><link>images/db4.png</link></figure>
       </step>
        <step>
           <description>View the 'Fields in Logical Section'. Hold down the 'Shift' button and click first on the 
               'first_name' field and then the 'user_name' field to highlight the 'first-name', 'last_name', 
               'phone', and 'user_name' fields.
           </description>
           <figure><link>images/db5.png</link></figure>
       </step>
       <step>
           <description>In the field 'Properties' area on the right click the 'Set...' button next to the 
               'Table alias' textbox. Select the 'RegisteredUsers' alias.
           </description>
           <figure><link>images/db6.png</link></figure>
       </step>
        <step>
           <description>Set the  'Size' of all of the controls to be '30' characters.</description>
           <figure><link>images/db7.png</link></figure>
       </step>
       <step>
           <description>Open the 'Step 2. Define Table Properties' tab. In the 'Table Aliases' tree highlight 
               the 'RegisteredUsers' 
           </description>
           <figure><link>images/db8.png</link></figure>
       </step>
        <step>
           <description>In the 'Table Properties' on the right set the 'Table name' to read 'RegisteredUsers'.</description>
           <figure><link>images/db9.png</link></figure>
       </step>
       <step>
           <description>In the 'Global Table Properties' click the dropdown button next to the 'Table type' property. 
               Select SQL.
           </description>
           <figure><link>images/db10.png</link></figure>
       </step>
        <step>
           <description>Click the [...] button next to the 'Connection string' property.</description>
           <figure><link>images/db11.png</link></figure>
       </step>
       <step>
           <description>Click the 'Used a named connection string' radio button and click the 'Select...' 
               button. Define a connection to the 'AADemo-Northwind' database. Click OK
           </description>
           <figure><link>images/db12.png</link></figure>
       </step>
        <step>
           <description>Open the 'Step 3. Create table(s)' tab. Click the Create table(s) button.</description>
           <figure><link>images/db13.png</link></figure>
       </step>
       <step>
           <description>The table will be created. Click Close.</description>
           <figure><link>images/db14.png</link></figure>
       </step>
       <step>
           <description>On the 'Data Binding' page click the 'Bind the controls on your UX o fields in one or more existing tables' 
               hyperlink; then click the 'Bind UX Component Controls to Table Fields' button.
           </description>
           <figure><link>images/db15.png</link></figure>
       </step>
        <step>
           <description>The 'Bind Controls to Fields' dialog will open. 
               Hold down the 'Shift' key and click with the mouse on both the 'password' field and the 
               'UserGuid' field to highlight the 'password', 'confirm_password', 'UserRoles', and 'UserGuid' 
               fields. Click the 'Set selected fields to '*unbound' hyperlink at the bottom of the dialog.
           </description>
           <figure><link>images/db16.png</link></figure>
       </step>
  
        <step>
           <description>Click OK and OK again.</description>
           <figure><link>images/db17.png</link></figure>
       </step>
     
       
        
        
        
    </steps>
    
    
    
</section>

<section>
    <title>Implement the 'Save Submitted Data to Tables' Action</title>
    <steps>
         <step>
           <description>Expand the 'Events' menu and open the 'Server-side' page.</description>
           <figure><link>images/ssd36.png</link></figure>
       </step>
        <step>
           <description>You should already have defined three events in the Server-Side Events list. 
               Highlight the 'afterDialogValidate' event.
           </description>
           <figure><link>images/ssd37.png</link></figure>
       </step>
        <step>
           <description>Place the mouse cursor inside the 'afterDialogValidate' event definition. 
               above the previously defined 'Save Web Security Values' action. Click the 
               'Action Scripting' button in the toolbar.
           </description>
           <figure><link>images/ssd38.png</link></figure>
       </step>
        <step>
           <description>In the 'Select an Action' dialog highlight the 
               'Save Submitted Data to Table(s)' action and click OK.</description>
           <figure><link>images/ssd39.png</link></figure>
       </step>
        <step>
           <description>Specify the action's name and click OK.</description>
           <figure><link>images/ssd40.png</link></figure>
       </step>
        <step>
           <description>In the 'Save Submitted Data to Tables' property settings click the dropdown next to 
               the 'After submit action' property in the 'Save Data' section. Select the 
               'Enter another record' option and click OK.
           </description>
           <figure><link>images/ssd41.png</link></figure>
       </step>
        <step>
           <description>In the afterDialogValidate definition add the following code around the 
               'Save Web Security Values' action. 
           </description>
           <example><![CDATA[if rtc.flagRecordWasSaved
end if
           ]]></example>
           <figure><link>images/ssd42.png</link></figure>
           <note>This will save the data to the registered users table. If you look at the variables exposed 
               by the action, there is one variable that exposes a flag to indicate that the record was saved. 
               This will be false if the data was not saved for some reason. We don't want to save the security 
               data if the personal data was not saved. If the flag is true then the security data can be saved.
           </note>
       </step>
        <step>
           <description>The afterDialogValidate definition should look like this:</description>
           <figure><link>images/ssd43.png</link></figure>
       </step>
          <step>
           <description>Run the component in Working Preview and register some example users, filling in both 
               the Personal Data section and the Security section. Then Click 'Submit'. If there are no validation 
               errors the new user's data should now have been saved to the new 'RegisteredUsers' table.
           </description>
           <figure><link>images/ssd44.png</link></figure>
       </step>
        
    </steps>
    
    
</section>

<section>
    <title>Viewing the Entered Personal Data</title>
   
    
    <steps>
        <step>
           <description>Create a new UX Component. In the UX Builder on the UX Controls page open the 
               'Data Controls' menu. Click on the [List] option to add a list control to the component.
           </description>
           <figure><link>images/ve2.png</link></figure>
       </step>
       <step>
           <description>Highlight the list control. Scroll down the properties list on the 
               right and click the [...] button next to the 'List properties' property. The 
               List Builder will open.
           </description>
           <figure><link>images/ve3.png</link></figure>
       </step>
       <step>
           <description>On the Data Source pane set the 'Data Source Type' to be 'SQL'.</description>
           <figure><link>images/ve4.png</link></figure>
       </step>
       <step>
           <description>Click the [...] button next to the 'Connection string' property.
           </description>
           <figure><link>images/ve5.png</link></figure>
       </step>
          <step>
           <description>Create a connection string to the AADemo-Northwind database.</description>
           <figure><link>images/ve6.png</link></figure>
       </step>
          <step>
           <description>Click the [...] button next to the 'Table name' property. In the 
               'Select Table' dialog highlight the 'RegisteredUsers' table and click OK.
           </description>
           <figure><link>images/ve7.png</link></figure>
       </step>
          <step>
           <description>Click the [...] button next to the 'Field list' property. Check 
               the 'FIRST_NAME', 'LAST_NAME', 'PHONE', and 'USER_NAME' fields. Click OK.
           </description>
           <figure><link>images/ve8.png</link></figure>
       </step>
          <step>
           <description>Click to open the List Layout pane. Use the blue > arrow to move the 
               FIRST_NAME, LAST_NAME, PHONE, and USER_NAME fields from the 'Available Fields' 
               list to the 'Columns in List'. Click OK to close the list builder.</description>
           <figure><link>images/ve9.png</link></figure>
       </step>
          <step>
           <description>Run the component in Live Preview. The list should display the 
               personal data that was saved to the 'RegisteredUsers' table.
           </description>
           <figure><link>images/ve10.png</link></figure>
       </step>
       
    </steps>
    
</section>



        
    </sections>
    
    <links>
        <link link="data binding existing tables">Bind the controls on your UX to fields in one or more existing 
       tables</link>
        <link link="ux components data binding">Data Binding</link>
        <link link="ux server-side actions Validate Web Security Values">Validate Web Security Values</link>
    </links>
    
    
</page>