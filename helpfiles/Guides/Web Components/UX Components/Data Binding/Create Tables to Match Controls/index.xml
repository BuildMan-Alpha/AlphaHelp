<page>
    <shortlink>data binding create tables</shortlink>
    <topic>Create new table(s) to match the controls on your UX component</topic>
    <description>Creates tables for existing controls in the UX Component. The new tables and fields will match the controls in the UX. Use this command if you have designed a UX component and would now like to create table(s) that match the structure of your UX. Once you have created table(s) to match the structure of your UX, you will be able to add code int he 'afterDialogValidate' event to save the data that the user submits to one or more tables.</description>
    <discussion></discussion>
    
    
    <groups>
        <group>
            <title>Make Table(s) for UX Component Controls Dialog</title>
            
            
       
    
    <sections>
        <section>
            <figure>
                <link>images/createTables1.png</link>
            </figure>
        </section>
        <section>
            <title>Overview</title>
            <description>
                <p>A common reason for creating a Dialog component is to capture variables that you want to store in a database when the user submits the Dialog (assuming that there are no validation errors).</p>
                <p>If your Dialog is simple, the data will typically be stored in a single table. However, you might have designed a complex Dialog with one or more repeating sections. In this case you will want to store the data that the user submits into multiple tables.</p>
                <p>In the case of a SQL database that supports transactions, you will typically want to wrap the entire operation in a transaction so that if the update of any table fails, the entire transaction can be rolled back.</p>
                <p>An Invoice form is a good example of a complex Dialog in which you would want to store the submitted data into multiple tables. For example, the Invoice might update these tables:</p>
            </description>
            <list bullet="true">
                <item>
                    <name>InvoiceHeader</name>
                </item>
                 <item>
                    <name>Customer</name>
                </item>
                 <item>
                    <name>InvoiceItems</name>
                </item>
                 <item>
                    <name>Product</name>
                </item>
                
                
            </list>
          
        </section>
        <section>
            <description>
                <p>You can use this genie (once you have designed your Dialog) if you have not yet created the tables into which the data should be stored. The genie will create one or more tables matching the structure of your Dialog component.</p>
                <p>*[Important:]* If you have already created the tables, then select the 'Bind controls in your Dialog to one or more existing tables' command instead of this command.</p>
            </description>
        </section>
        <section>
            <title></title>
            
            
        </section>
        
        
        <section>
            <title>Step 1.  Define Table Aliases and Fields</title>
            <description>
                <p>This screen shows you the number of 'Logical Sections' in your UX component. If your UX component does not have any 'Repeating Sections' then your UX component only has a single 'Logical Section' (called the <![CDATA[<Top Level>]]> section). If you have one or more 'Repeating Sections' in your UX component, then your UX has multiple 'Logical Sections'.</p>
            </description>
            <cases>
                <case>
                    <title>Specify the Table Aliases Used in the UX component</title>
                    <description>For each 'Logical Section' in your UX, you specify the table aliases that the controls in that section will map to. In many cases each 'Logical Section' in your UX component will map to a single table alias. However, consider the case of an Invoice form. Some of the controls in the <![CDATA[<Top Level>]]> section will map to the 'InvoiceHeader' table and some will map to the 'Customer' table.</description>
                </case>
                <case>
                    <title>Bind Controls to Table Aliases and Specify Field Definitions for each Field</title>
                    <description>Once you have defined the table aliases for each UX component 'Logical Section', you will map the UX component controls in each 'Logical Section' to the appropriate table alias and specify the definition of the field (e.g. field name, size, decimal places) that you want to map the UX component control to.</description>
                </case>
            </cases>
        </section>
        <section>
            <title>Step 2. Define Table Properties</title>
            <description>This is where you define the mapping of the tables to your database. Tables can be mapped to existing tables in a database or to new tables. Select or create a connection string to the database where you want to create the tables and configure the table mapping to your database.</description>
        </section>
        <section>
            <title>Step 3. Create Table(s)</title>
            <description>The last step in the Create tables for existing controls process is to create the tables and update the data binding for the controls in your UX Component. During the Create Table(s) step, you can choose to create the tables or save settings. The latter will save the settings defined in the Genie without creating the tables or updating the data binding settings for the UX controls. This allows you to save your settings and finish configuring tables and data binding later. To see a list of actions that Alpha Anywhere will perform when the *[ui:Create Table(s)]* button is clicked, click the *[ui:Show summary of work to do]* link in the upper left-hand corner.</description>
        </section>
    </sections>
 </group>
        <group>
            <title>Examples</title>
            <sections>
                <section>
                    <title>Create a Table with a Single Alias</title>
                    
                    
                </section>
                
                
                
            </sections>
            
            
            
        </group>
        
    </groups>
</page>