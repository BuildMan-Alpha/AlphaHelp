<page>
    <topic>afterRefreshListIncremental</topic>
<description>Fires after an incremental List refresh completes.</description>
 

<sections>
    <section>
        <title>What is an Incremental Refresh?</title>
        <description>In some applications there are multiple users editing and entering data into one database on a server.
            As different users make changes, it is useful to be able to refresh the information displayed from that database on 
            the other user's client-side applications. If the server-side database is extremely large, and the a user's connection to the server is not always 
           strong, refreshing data on the client-side could prove extremely time consuming. One way around this problem is to use 
           an "Incremental Refresh", i.e. to send only the new or altered rows of data from the server to the client. This is accomplished 
           by sending a checksum, from each client-side application to the server, of all of the rows that are currently in the list control. The server 
           then uses the checksum to determine which rows have been edited on the server. These are the rows that are then sent back to the client in the response.
        </description>
    </section>
     
    
    <section>
        <title>Add an Incremental Refresh Button</title>
        <steps>
            <step>
                <description>Open the 'Defined Controls' menu on the UX Controls page. 
                    Choose the "List-Detail View-Buttons" option.
                </description>
                <figure><link>images/inc2.png</link></figure>
            </step>
              <step>
                <description>Select the list to connect to and check the 'Refresh List (incremental)' option.</description>
                <figure><link>images/inc.png</link></figure>
            </step>
            
            
        </steps>
        
    </section>
    <section>
        <title>Using an afterRefreshListIncremental Event.</title>
        <steps>
             <step>
                <description>Define a List with a Detail View like this one in the 
                    [Creating a Detail View with a Dirty Control Class] guide on the "Dirty control class name" page.
                    For the Data Source you may want to define your own SQL Table from Static Data.</description>
                <figure><link>images/undo5.png</link></figure>
            </step>
            <step>
                <description>Click on the 'List Detail View-Buttons' option, in the 'Defined Controls' menu,
                     </description>
            <figure><link>images/inc9.png</link></figure>
            </step>
             <step>
                <description>Select the list control to attach the buttons to. Check 'Save', 'New record', 'Delete record', 'Refresh List (incremental)', 'Synchronize' options. 
                </description>
                 <figure><link>images/inc10.png</link></figure>
            </step>
          
            
            <step>
                <description>Highlight the List Control. In the Properties list click on the [...] button next to the 'List properties' 
                    property to open the List Builder.
                </description>
                 <figure><link>images/inc11.png</link></figure>
            </step>
             <step>
                <description>Click on the [...] button next to the 'Events' property under 'Client-side Events'.</description>
                 <figure><link>images/undo.png</link></figure>
            </step>
               <step>
                <description>Highlight the afterRefreshListIncremental event.</description>
                 <figure><link>images/inc12.png</link></figure>
            </step>
            
              <step>
                <description>In the the Javascript code section add the following</description>
                <example><![CDATA[var updated = e.rowsUpdated +' rows updated.\n'; 
var inserted = e.rowsInserted + ' rows inserted.\n'; 
var deleted = e.rowsDeleted + ' rows deleted.\n';
alert(updated + inserted + deleted);]]></example>
                 <figure><link>images/inc5.png</link></figure>
            </step>
              <step>
                <description>Now close the System Event editor and the List Builder. From the toolbar open the component 
                    in one browser, here Google Chrome. Choose Full Preview
                </description>
                 <figure><link>images/inc13.png</link></figure>
            </step>  <step>
                <description>Without closing the first browser, go back to Alpha Anywhere and open the component in a second browser window, this time using a different 
                    browser, like Firefox. 
                </description>
                 <figure><link>images/inc14.png</link></figure>
                 <note>Using a different browser will prevent caching issues.</note>
            </step>  <step>
                <description>In the first browser make a number of edits, delete a few rows, and add some new ones. By default a dirty edited 
                    row will be marked with a yellow triangle, a deleted row with a purple triangle, and a new row with a blue triangle.
                </description>
                 <figure><title>Edits in Google Chrome</title><link>images/inc6.png</link></figure>
                 
                 <note>If you are using one of the built in Northwind field tables you may encounter a series of error messages if you 
                     try to delete or add new rows. These errors probably result from issues on the SQL backend, server-side. When Microsoft created 
                     the Northwind database, they also included examples of all of the errors you might encounter. As a result, the easiest way 
                     to get a SQL database without errors might be to create some Static data first and the convert it into SQL using the settings on the 
                     List Builder Data Source pane.
                 </note>
            </step>  <step>
                <description>Click 'Save' and then 'Synchronize'</description>
                 <figure><link>images/inc7.png</link></figure>
            </step>  <step>
                <description>Now Open the second browser window and hit the 'Refresh List'' button. Clicking the Refresh button will cause 
                    the afterRefreshListIncremental Event to fire and the Javascript defined for this event to be launched. The 
                    parameters in the javascript will show you how many rows were deleted, how many were added, and how many were edited.
                </description>
                 <figure><link>images/inc8.png</link></figure>
            </step> 
        </steps>
        
        
        
        
        
    </section>
     <section>
        <title>Parameters</title>
        <description>This event passes several parameters when the Javascript code executes: 
rowsUpdated,rowsInserted,rowsDeleted,listId
        </description>
      
    </section>
  
    
</sections>
<links>
    <link href="http://documentation.alphasoftware.com/documentation/pages/Guides/Web%20Components/UX%20Components/UX%20Controls/Control%20Properties/Data%20Control%20Properties/List%20Properties/List%20properties/Detail%20View/Detail%20View%20Properties/Dirty%20control%20class%20name.xml">Creating a Detail View with a Dirty Control Class</link>
    <link href="images/open.png">...</link>
</links>
</page>