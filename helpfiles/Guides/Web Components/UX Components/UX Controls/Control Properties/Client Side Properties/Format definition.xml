<page>
    <shortlink>ux control format definition property</shortlink>
    <topic>Format definition</topic>
    <description>Only available if Client side formatting is checked. Specify the client side format.</description>
    <discussion>Displays the format builder to create the client side format definition. Depending on the *[ui:Format type]*, you will either be presented the *[ui:Number Format Builder]* or *[ui:Custom Client Side Format Builder]*, both shown below.</discussion>
    <groups>
        <group>
            <title>Mask Format</title>
            <sections>
                <section>
                    <description>
                        <p>Available for Character, Date, Date-Time, and Shortime field types.</p>
                        <p>The Mask builder can be used to create a *[ui:Simple]* or *[ui:Conditional]* mask to format the characters when data is entered in the field. If a dynamic mask is desired, a JavaScript function can be used to create the mask when the control receives focus.</p>
                    </description>
                    <figure>
                        <title>The Mask Builder</title>
                        <link>images/maskBuilder.png</link>
                    </figure>
                </section>
                <section>
                    <description>The mask definition can contain the following placeholders:</description>
                    <list>
                        <item>
                            <name-title>Placeholder</name-title>
                            <description-title>Description</description-title>
                        </item>
                        <item>
                            <name>L</name>
                            <description>Allows characters A-Z (upper case only)</description>
                        </item>
                        <item>
                            <name>l</name>
                            <description>Allows characters A-Z, a-z (upper and lower case)</description>
                        </item>
                        <item>
                            <name>#</name>
                            <description>0-9 , decimal or negative sign</description>
                        </item>
                        <item>
                            <name>N</name>
                            <description>Allows A-Z (upper case only), 0-9, decimal or negative sign</description>
                        </item>
                        <item>
                            <name>n</name>
                            <description>Allows A-Z, a-z (upper and lower case), 0-9, decimal or negative sign</description>
                        </item>
                        <item>
                            <name>A</name>
                            <description>A-Z (upper case only), 0-9</description>
                        </item>
                        <item>
                            <name>a</name>
                            <description>A-Z, a-z (upper and lower case), 0-9</description>
                        </item>
                        <item>
                            <name>0</name>
                            <description>0-9</description>
                        </item>
                        <item>
                            <name>&amp;</name>
                            <description>any character</description>
                        </item>
                    </list>
                </section>
                <section>
                    <description>All other characters not listed will be printed verbatim as part of the mask. To include a special placeholder in the mask, escape the character using the '\' character. e.g '\A'</description>
                </section>
                <section>
                    <title>Creating a Conditional Mask</title>
                    <description>The mask can be computed dynamically at run-time by specifying a *[ui:Conditional]* mask and specifying the name of a JavaScript function that computes the mask. The JavaScript function is called when the control receives focus. The JavaScript function must return the mask as a string. The string can use the format placeholders defined above for specifying the mask. For example:</description>
                    <example code="js"><![CDATA[function getCountryMask(e) {
    var country = {dialog.object}.getValue('COUNTRY');
    if(country=='USA') {
        return '(000) 000-0000';
    } else if(country=='UK') {
        return '00-000-000-0000';
    } else {
        return '00000000000000';
    }
}]]></example>
                </section>
            </sections>
        </group>
        <group>
            <title>Number Format</title>
            <sections>
                <section>
                    <description>
                        <p>Available for Numeric fields only.</p>
                        <p>The Number Format Builder can be used to create a numeric mask for the control's value.</p>
                    </description>
                    <figure>
                        <title>The Number Format Builder dialog.</title>
                        <link>images/numberFormatBuilder.png</link>
                    </figure>
                </section>
                <section>
                    <title>Number Format Properties</title>
                    <list>
                        <item>
                            <name>Number can be blank</name>
                            <description>Specify if a blank number is allowed</description>
                        </item>
                        <item>
                            <name>Blank value</name>
                            <description>The value in the field that is considered to be 'zero'. This value is typically '0'. If you wish to display the value '0' in the field, use the special value '-99999'.</description>
                        </item>
                        <item>
                            <name>Has maximum value</name>
                            <description>Specify if there is a maximum value allowed for the field</description>
                        </item>
                        <item>
                            <name>Maximum value</name>
                            <description>The maximum value allowed.</description>
                        </item>
                        <item>
                            <name>Has minimum value</name>
                            <description>Specify if there is a minimum value allowed for the field</description>
                        </item>
                        <item>
                            <name>Minimum value</name>
                            <description>The minimum value allowed.</description>
                        </item>
                        <item>
                            <name>Round value</name>
                            <description>Specify whether or not the value should be rounded.</description>
                        </item>
                        <item>
                            <name>Round precision</name>
                            <description>Specify the number of decimal places to which the value should be rounded.</description>
                        </item>
                        <item>
                            <name>Round direction</name>
                            <description>Specify the rounding direction. </description>
                            <list>
                                <item>
                                    <name-title>Option</name-title>
                                    <description-title>Description</description-title>
                                </item>
                                <item>
                                    <name>Default</name>
                                    <description>Rounds up for values with decimal part that is equal to or above 0.5 of the round precision. Rounds down for values with decimal part less than 0.5 of the round precision.</description>
                                </item>
                                <item>
                                    <name>Up</name>
                                    <description>Always round the value up.</description>
                                </item>
                                <item>
                                    <name>Down</name>
                                    <description>Always round the value down.</description>
                                </item>
                            </list>
                        </item>
                        <item>
                            <name>Decimal character</name>
                            <description>Specify the decimal character. *[IMPORTANT]*: If you select a decimal that is not a period, you *[must]* specify the [Display format property] for this field.</description>
                        </item>
                        <item>
                            <name>Has thousands separator</name>
                            <description>Specify if thousands are separated into groups</description>
                        </item>
                        <item>
                            <name>Thousands separator</name>
                            <description>Specify the thousands separator character</description>
                        </item>
                        <item>
                            <name>Has special format for negative numbers</name>
                            <description>Specify if negative numbers are specially formatted.</description>
                        </item>
                        <item>
                            <name>Negative number format</name>
                            <description>Negative number format Choices include.</description>
                        </item>
                        <item>
                            <name>Prefix</name>
                            <description>Specify the prefix character(s). This is often a currency symbol. For unicode characters use Javascript notation, but replace '\u' with '{unicode}' e.g. {unicode}20A6.</description>
                        </item>
                        <item>
                            <name>Suffix</name>
                            <description>Specify the suffix character(s). This is often a currency symbol.</description>
                        </item>
                        <item>
                            <name>Has fill character</name>
                            <description>Specify if empty space in the input control is filled with a special character. The size of the field is defined by the control's 'MaxLength' property. If this property is not defined then the field will not be filled.</description>
                        </item>
                        <item>
                            <name>Fill character</name>
                            <description>Specify the fill character.</description>
                        </item>
                    </list>
                </section>
            </sections>
        </group>
        <group>
            <title>Custom Format</title>
            <sections>
                <section>
                    <description>
                        <p>Available for all field types.</p>
                        <p>A Custom format can be specified for any field type. The Custom format uses JavaScript to format the value entered by the user. The JavaScript can be entered directly into the *[ui:Parse Out]* text area. An optional JavaScript function can be defined that pre-processes the value entered by the user before passing it to the *[ui:Parse Out]* script.</p>
                    </description>
                    <figure>
                        <title>The Custom Client Side Format Builder dialog.</title>
                        <link>images/customFormatBuilder.png</link>
                    </figure>
                </section>
                <section>
                    <description>*[ui:Parse Out]* Examples:</description>
                    <example><![CDATA[// Convert to uppercase
data = data.toUpperCase()

// convert data to a number
data = $u.s.toNum(data)]]></example>
                </section>
            </sections>
        </group>    
    </groups>
    <links>
        <link link="ux component textbox display format property">Display format property</link>
    </links>
</page>