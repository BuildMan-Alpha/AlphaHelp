<page>
    <topic>Dynamically Re-populate the Choices in an Edit-Combo using Javascript</topic>
    <description>Text box controls can be used to create edit combo boxes. 
        The choices shown in an edit-combo can then be dynamically repopulated at run-time using Javascript.
</description>
  <sections>
      <section>
          <title>Re-populate a Simple "Static" Choices based Edit-Combo box.</title>
          <description>For a video explanation describing this process watch [this video] or use the guide below.</description>
          <steps>
              <step>
                  <description>In the UX Builder's UX Controls page open the 'Data Controls' menu. Click on the [TextBox] option 
                      to add a textbox control to the component.
                  </description>
                  <figure><link>images/ecj.png</link></figure>
              </step>
                <step>
                  <description>Highlight the text box control. Scroll down the textbox control's properties list on the right. In the 
                      'Lookup' section check the 'Lookup' property.
                  </description>
                  <figure><link>images/ecj2.png</link></figure>
              </step>
                <step>
                  <description>Click the dropdown next to the 'Lookup type' property. Select the 'Edit-Combo List' option.</description>
                  <figure><link>images/ecj3.png</link></figure>
              </step>
                <step>
                  <description>Click the [...] button next to the 'Lookup definition' property.</description>
                  <figure><link>images/ecj4.png</link></figure>
              </step>
                <step>
                  <description>In the Edit Combo Builder from the 'Choices are' selection choose the 'Static' option.</description>
                  <figure><link>images/ecj5.png</link></figure>
              </step>
                <step>
                  <description>Enter the choices to appear in the Edit-Combo box.</description>
                  <figure><link>images/ecj6.png</link></figure>
                  <note>If you are using the iOS7 style, setting the 'Width' property under the Window Properties section to something 
                      like 1in might be a good idea. Alternatively you can increase the 'Height' property.</note>
              </step>
             
                <step>
                  <description>Open the 'Other Controls' menu. Click on the [Button] option to add a button to the component.</description>
                  <figure><link>images/ecj7.png</link></figure>
              </step>
                <step>
                  <description>Highlight the button. In the Button Properties section of the properties list set the 
                      'Button text' property to read 'Set Choices Simple'.
                  </description>
                  <figure><link>images/ecj8.png</link></figure>
              </step>
                 <step>
                  <description>Scroll down the properties list to the 'Javascript' section and click the [...] button 
                      next 
                  </description>
                  <figure><link>images/ecj9.png</link></figure>
              </step>
                 <step>
                  <description>Click on the 'Text mode' radio button in the Edit Click Event dialog. Add the following 
                      code and click Save.
                  </description>
                  <example><![CDATA[var _d = ['alpha','beta','gamma'];
var obj = {Dialog.object}.getControl('TEXTBOX1');
var newData = _d;
obj.setData(newData);]]></example>
                  <figure><link>images/ecj10.png</link></figure>
              </step>
                
              <step>
                  <description>Run the component in Live Preview. First click the dropdown in the Edit-Combo box, note the 
                      static choice selections you defined.
                  </description>
                  <figure><link>images/ecj11.png</link></figure>
              </step>
                <step>
                  <description>Click the 'Set Choices Simple' button and then reopen the Edit-Combo box. You should see a 
                      different set of selections.
                  </description>
                  <figure><link>images/ecj12.png</link></figure>
              </step>
          </steps>

        
      </section>
      <section>
        <title>About 'Static' data</title>
          <description>In the example above, if you were to look at the source dialog and looked at the Edit-Combo definition 
              by searching a5.edit you might see something like this.
          </description>
          <figure><link>images/ecj13.png</link></figure>
          
      </section>
      <section>
          <description>The static data for the edit-combo is a simple array. When the 'Set Choices Simple' button was defined this 
            array was replaced with another simple array:
          </description>
          <example><![CDATA[['alpha','beta','gamma']]]></example>
      </section>
      <section>
        <description>More complex data sources use arrays of objects, each of which can contain their own properties. The Guide below describes how to 
          dynamically repopulate a more complex Edit-Combo.
        </description>
      </section>
      
      <section>
        <title>Re-populate a SQL based Edit-Combo</title>
          <steps>
               <step>
                  <description>In the UX Builder's UX Controls page open the Data Controls menu and click on [TextBox] to add 
                    a textbox control.
                  </description>
                  <figure><link>images/ecj14.png</link></figure>
              </step>
              <step>
                  <description>Highlight the textbox control. In the properties list in the 'Lookup' section check the 
                    'Lookup' property checkbox.
                  </description>
                  <figure><link>images/ecj15.png</link></figure>
              </step>
              <step>
                  <description>From the 'Lookup type' property dropdown select 'Edit-Combo'.</description>
                  <figure><link>images/ecj16.png</link></figure>
              </step>
              <step>
                  <description>Check the [...] button next to the 'Lookup definition' property.</description>
                  <figure><link>images/ecj17.png</link></figure>
              </step>
              <step>
                  <description>In the Edit Combo Builder select the Choices are: 'Dynamic'' radio button.</description>
                  <figure><link>images/ecj18.png</link></figure>
              </step>
              <step>
                  <description>In the Edit-combo Definition section. Set the Dynamic type property to AlphaDAO and the 'Connection string' to the 
                    to Northwind database, 
                  </description>
                  <figure><link>images/ecj19.png</link></figure>
              </step>
              <step>
                  <description>Set the 'Table name' property to be Customers.</description>
                  <figure><link>images/ecj20.png</link></figure>
              </step>
              <step>
                  <description>From the 'Fields to display' property select COUNTRY.</description>
                  <figure><link>images/ecj21.png</link></figure>
              </step>
                <step>
                  <description>Set the 'Field to Return' to be 'Country'. Click OK to close the Edit-Combo Builder.</description>
                  <figure><link>images/ecj22.png</link></figure>
              </step>
                 <step>
                  <description>Highlight the textbox control.  Open the 'Other Controls' menu and click on the [Button] option to add 
                    a button control to the component.
                  </description>
                  <figure><link>images/ecj23.png</link></figure>
              </step>
                 <step>
                  <description>Highlight the button control. In the properties list under 'Button Properties' set the 
                    Button text property to read "Set Choices".
                  </description>
                  <figure><link>images/ecj24.png</link></figure>
              </step>
                <step>
                  <description>Scroll down the properties list to the Javascript section. Click on the [...] button next to the 
                    onClick property.
                  </description>
                  <figure><link>images/ecj25.png</link></figure>
              </step>
                <step>
                  <description>In the "Edit onClick Event" dialog check the 'Text mode' radio button. Add the following code and click save. </description>
                  <example><![CDATA[var obj = {Dialog.object}.getControl('TEXTBOX1');
var newData = [
     {COUNTRY: 'Alpha Corp'},
     {COUNTRY: 'Beta Corp'},
     {COUNTRY: 'Gamma Corp'}
     ]
obj.setData(newData);]]></example>
                  <figure><link>images/ecj26.png</link></figure>
                  <note>Here the array of objects containing the COUNTRY property, that was defined in the 'Customers' table's 
                    Country field, is being replaced by an array of objects defined in Javascript.</note>
              </step>
                <step>
                  <description>Run the component in Live Preview. First click on the Edit-combo drop down to see the list of countries from the 
                    'COUNTRY' field.
                  </description>
                  <figure><link>images/ecj27.png</link></figure>
              </step>
                <step>
                  <description>Now click the 'Set Choices' button and click on the Edit-Combo again. The selection should be different.</description>
                  <figure><link>images/ecj28.png</link></figure>
              </step>
              
              
          </steps>
          
      </section>
    
  </sections>
<links>
    <link href="http://www.ajaxvideotutorials.com/V12Videos/ux_component_repopulating_edit_combo_using_javascript.swf">this video</link>
    
    
</links>
</page>