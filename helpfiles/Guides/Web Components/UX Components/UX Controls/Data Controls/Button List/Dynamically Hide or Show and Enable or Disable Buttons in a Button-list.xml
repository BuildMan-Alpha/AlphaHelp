<page>
  <shortlink>ux data controls button list control dynamically manipulate buttons in button list</shortlink>
  <topic>Dynamically Hide or Show and Enable or Disable Buttons in a Button-list</topic>
  <description>You can use Javascript to dynamically hide or show and enable or disable buttons in a 
    Button List control. You can also dynamically add and remove buttons from the Button List.

</description>
  <sections>
    <section>
      <description>This process is described in [this video], as well as the guide below. You can 
        also download the component [here].
      </description>
      
    </section>
<section>
 <title>Create a Button List Control and a Drop-down Control</title>
<steps>
  <step>
   
    <description>In the UX Builder, on the UX Controls page, open the 'Data Controls' menu. 
      Click on the [Button List] option to add a button list control to the component. Give 
      the control the name 'b1' and leave the label blank.
    </description>
    <figure><link>images/db.png</link></figure>
  </step>
   <step>
   
    <description>Highlight the control in the controls tree. In the 'Button List Properties' section, 
      on the right, click the dropdown button next to the 'Method for defining buttons' property and 
      select the 'StaticJSON' option.</description>
    <figure><link>images/db.png</link></figure>
    <note>This is not the only way to define buttons that can be manipulated dynamically, just the method 
      choosen for this example.
    </note>
  </step>
   <step>
   
    <description>In the 'Button List - JSON Data' dialog add the following JSON and click OK.</description>
    <example><![CDATA[[
     {html: 'Button 1', value: 'b1', tip: 'Help for button 1'},
     {html: 'Button 2', value: 'b2', tip: 'Help for button 2'},
     {html: 'Button 3', value: 'b3', tip: 'Help for button 3'},
     {html: 'Button 4', value: 'b4', tip: 'Help for button 4'},
     {html: 'Button 5', value: 'b5', tip: 'Help for button 5'},
     {html: 'Button 6', value: 'b6', tip: 'Help for button 6'}
    
]]]></example>
    <figure><link>images/db.png</link></figure>
  </step>
   <step>
   
    <description>Return to the 'Data Controls' menu, on the left, and click on the 
      [DropdownBox] option. Give the drop-down box the name and label 'buttonValue'
    </description>
    <figure><link>images/db.png</link></figure>
  </step>
   <step>
   
    <description>Highlight the drop-down box control in the controls tree. Scroll down the 
      properties list to the 'DropDownBox Properties' section and click the [...] button 
      next to the 'Choices' property.
    </description>
    <figure><link>images/db.png</link></figure>
  </step>
   <step>
   
    <description>Check the 'Static' option in the 'Choices are' menu. Add the following choices 
      to the static choices definition area. Click OK.
    </description>
    <example><![CDATA[b1
b2
b3
b4
b5
b6]]></example>
    
    
  
  
</steps>

</section>

<section>

<steps>
   <title>Show and Hide Buttons</title>
  <step>
   
    <description>Open the 'Other Controls' menu and click on the [Button] option to add 
      a button control to the component. 
    </description>
    <figure><link>images/db.png</link></figure>
  </step>
  <figure><link>images/db.png</link></figure>
  </step>
   <step>
   
    <description>Highlight the button control in the controls tree. In the properties list 
      set the 'Button text' property to be 'Hide button'.
    </description>
    <figure><link>images/db.png</link></figure>
  </step>
   <step>
   
    <description>Scroll down the properties list to the 'Javascript - (Touch, Mouse. Pointer Events) 
      section. Click the [...] button next to the 'click' property.
    </description>
    <figure><link>images/db.png</link></figure>
  </step>
   <step>
   
    <description>In the Edit Click Event dialog select the 'Text mode' radio button 
      in the 'Editing mode' menu. Add the following code to the event definition 
      and click 'Save'.
    </description>
    <example><![CDATA[var bId = {dialog.object}.getValue('buttonValue');
var bEle = {dialog.object}.getControl('b1');
bEle.setDisplay(bId,false);]]></example>
    <figure><link>images/db.png</link></figure>
  </step>
   <step>
   
    <description>Return to the 'Other Controls' menu and click on the [Button] option again 
      to add a second button.
    </description>
    <figure><link>images/db.png</link></figure>
  </step>
  <step>
   
    <description>Highlight the new button in the controls tree. In the properties list 
      set the 'Static text' property of the button to read 'Show button'.
    </description>
    <figure><link>images/db.png</link></figure>
  </step>
  <step>
   
    <description>Scroll down to the 'Javascript - (Touch, Mouse. Pointer Events)' 
      section and click the [...] button next to the 'click' property.</description>
    <figure><link>images/db.png</link></figure>
  </step>
  <step>
   
    <description>Select the 'Text mode' radio button and add the following javascript 
      to the event definition. Click 'Save'.
    </description>
    <example><![CDATA[var bId = {dialog.object}.getValue('buttonValue');
var bEle = {dialog.object}.getControl('b1');
bEle.setDisplay(bId,true);]]></example>
    <figure><link>images/db.png</link></figure>
  </step>
  <step>
   
    <description>Run the component in Live Preview. Select a button value from the 
      dropdown list and click the 'Hide button' button
    </description>
    <figure><link>images/db.png</link></figure>
  </step>
  <step>
   
    <description>The button with the corresponding value in the button list control should 
      disappear. Set the dropdown to the hidden button's value and click the 'Show button' 
      button to make the hidden button reappear.</description>
    <figure><link>images/db.png</link></figure>
  </step>
  
</steps>

</section>

<section>
<title>Disable and Enable Buttons</title>
<steps>
  <step>
    <description>On the UX Controls page open the [Other Controls] menu and click 
      on the [Button] option to add another button control to the bottom of the 
      controls tree.
    </description>
    <figure><link>images/db.png</link></figure>
  </step>
   <step>
    <description>In the properties list set the button's 'Static text' property 
      to read 'Disable button'.
    </description>
    <figure><link>images/db.png</link></figure>
  </step>
   <step>
    <description>Scroll down to the Javascript - (Touch, Mouse. Pointer Events)' 
      section and click the [...] button next to the 'click' property.</description>
    <figure><link>images/db.png</link></figure>
  </step>
   <step>
    <description>In the 'Edit Click Event' dialog select the 'Text mode' radio button 
      option and add the following javascript to the 'Edit Click Event' definition. Click 
      'Save'.
    </description>
    <example><![CDATA[var bId = {dialog.object}.getValue('buttonValue');
var bEle = {dialog.object}.getControl('b1');
bEle.setDisabled(bId,true);]]></example>
    <figure><link>images/db.png</link></figure>
  </step>
   <step>
    <description>Return to the 'Other Controls' section and click on the 
      [Button] option again to add a forth button to the component.
    </description>
    <figure><link>images/db.png</link></figure>
  </step>
   <step>
    <description>Change the 'Static text' property for the button to 'Enable button'.</description>
    <figure><link>images/db.png</link></figure>
  </step>
   <step>
    <description>Scroll down to the Javascript - (Touch, Mouse. Pointer Events)' 
      section and click the [...] button next to the 'click' property.</description>
    <figure><link>images/db.png</link></figure>
  </step>
   <step>
    <description>Select the 'Text mode' radio button and add the following javascript 
      to the event definition. Click 'Save'.
    </description>
    <example><![CDATA[var bId = {dialog.object}.getValue('buttonValue');
var bEle = {dialog.object}.getControl('b1');
bEle.setDisabled(bId,false);]]></example>
    <figure><link>images/db.png</link></figure>
  </step>
   <step>
    <description>Run the component in Live Preview. Select a button value from the dropdown 
      list and click the 'Disable button' button.
    </description>
    <figure><link>images/db.png</link></figure>
  </step>
   <step>
    <description>The button with the corresponding value in the button-list should 
      appear disabled. Use the same value setting in the dropdown and click on the 
      'Enable button' button to re-enable it.
    </description>
    <figure><link>images/db.png</link></figure>
  </step>
  
  
</steps>

</section>
<section>
<title>Add Buttons</title>
<steps>
  <step>
    
    <description>On the UX Controls page open the 'Other Controls' menu and click on the 
      [Button] option a button to the component.
    </description>
    <figure><link>images/db.png</link></figure>
  </step>
  <step>
    
    <description>Highlight the button and change its 'Static text' property to be 
      'Add button'.
    </description>
    <figure><link>images/db.png</link></figure>
  </step>
  <step>
    
    <description>Scroll down to the 'Javascript - (Touch, Mouse, Pointer Events)' 
      section and click the [...] button next to the 'click' property.
    </description>
    <figure><link>images/db.png</link></figure>
  </step>
  <step>
    
    <description>In the 'Edit Click Event' dialog select the 'Text mode' radio button option. 
      Add the following code to the event definition and click 'Save'.
    </description>
    <example><![CDATA[var _new = [
{html: 'New Button 1', value: 'nb1', tip: 'Help for new button 1'},
{html: 'New Button 2', value: 'nb2', tip: 'Help for new button 2'},
]
var bEle = {dialog.object}.getControl('b1');
bEle.appendButtons(_new);]]></example>
    <figure><link>images/db.png</link></figure>
  </step>
  <step>
    
    <description>Run the component in Live Preview. Click on the 'Add buttons' option 
      and the new buttons should be added to the end of the button list control.
    </description>
    <figure><link>images/db.png</link></figure>
  </step>
  <step>
    
    <description></description>
    <figure><link>images/db.png</link></figure>
  </step>
  
  
</steps>

</section>
  </sections>
  
  <links>
    <link href="http://www.ajaxvideotutorials.com/V12Videos/ux_buttonLists_manipulatingwithJS.swf">this video</link>
     <link href="http://www.ajaxvideotutorials.com/V12Videos/buttonLists_manipulatingWithJS.zip">here</link>
  </links>
  
  
</page>