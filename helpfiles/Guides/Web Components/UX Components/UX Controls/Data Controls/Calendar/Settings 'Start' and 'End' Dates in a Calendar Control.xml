<page>
    <shortlink>ux data controls calendar property set start and end dates</shortlink>
    <topic>Settings 'Start' and 'End' Dates in a Calendar Control</topic>
    <description>A common use of a calendar control, particularly on travel sites, is to have users enter a 
        'start' and 'end' date into the calendar, or an 'arrival' and 'departure' date. It is 
        desirable to be able to prevent the user from being able to enter an 'end' date that is 
        before their 'start' date or even the current date. Fortunately this is fairly easy to accomplish 
        in Alpha Anywhere. 
    </description>
  <sections>
      <section>
          <description>For a visual explanation on how to do this watch this two part video 
              [Part 1], [Part 2], or read the guide below.
          </description>
          
      </section>
 
         
          
  <section>
      <title>Create Two Calendar Controls and a HTML Free Form Control</title>
      <steps>
          <step>
            <description>In the UX Builder on the UX Controls page open the 'Data Controls' menu. 
                Click on the [Calendar] control option to add a calendar control to the component. 
                Give the calendar control the name 'dstart' and the label 'Departure Date'.
            </description>
            <figure><link>images/se.png</link></figure>
        </step>
        
         <step>
            <description>Highlight the Calendar control. In the properties list on the right. Scroll down to the 
                'Date/Time Picker Properties'. Click the [...] button next to the 'Low Date' property. 
            </description>
            <figure><link>images/se.png</link></figure>
        </step>
        <step>
            <description>In the 'Property Value' box select the 'Javascript function' radio button. In the 
                Javascript function name textbox add the following function name and click OK:
            </description>
            <example><![CDATA[setLowDateForDStart]]></example>
            <figure><link>images/se.png</link></figure>
        </step>
        <step>
            <description>Click the [...] button next to the 'High date' property.</description>
            <figure><link>images/se.png</link></figure>
        </step>
        <step>
            <description>In the Property Value box select the 'Javascript function' radio button again. In the 
                'Javascript function name' textbox add the following function name and click OK.
            </description>
            <example><![CDATA[setHighDateForDStart]]></example>
            <figure><link>images/se.png</link></figure>
        </step>
        <step>
            <description>Check the 'Draw boxes around dates' property checkbox.</description>
            <figure><link>images/se.png</link></figure>
        </step>
          <step>
            <description>Check the 'Has events' property checkbox, then click the '+' button 
                next to it to expand the list of events.
            </description>
            <figure><link>images/se.png</link></figure>
        </step>
          <step>
            <description>Next to the 'onSelect' event add the following function name:</description>
            <example><![CDATA[setLowDateForDend]]></example>
            <figure><link>images/se.png</link></figure>
            <note>This is the function that will be called whenever a start date is selected in the 
                [dstart] calendar control.
            </note>
        </step>
          
        
          <step>
            <description>Click on the [Calendar] option again to add a second calendar control to the component. 
                Give the new control the name 'dend' and the label 'Return Date'.
            </description>
            <figure><link>images/se.png</link></figure>
        </step>
        <step>
            <description>Highlight the [dend] calendar in the controls tree. In the properties list on the right 
                check the 'Draw boxes around dates' checkbox in the 'Date/Time Picker Properties' section.
            </description>
            <figure><link>images/se.png</link></figure>
        </step>
        
        
      </steps>
      
      
  </section>
      
<section>
     <title>Define the Low Date Functions</title>
    <steps>
           <step>
            <description>Expand the 'Code' menu and click on the 'Javascript functions' page.</description>
            <figure><link>images/se.png</link></figure>
        </step>
      
         <step>
            <description>Add the following javascript to create a setLowDateForDend() function.</description>
            <example><![CDATA[function setLowDateForDend() {
var curDate = {dialog.object}.getValue('DSTART');
var d2 = {dialog.object}.getControl('DEND');
d2.datePicker.disabledDates.low = curDate;

var curEndDate = {dialog.object}.getValue('DEND');
var dtFormat = {dialog.object}.stateInfo.__dtfmt;
var curEndDate2 = new Date();
curEndDate2.fromFormat(curEndDate,dtFormat);

var curDate2 = new Date()
curDate2.fromFormat(curDate,dtFormat);
if (curDate2 > curEndDate2 ) {
     {dialog.object}.setValue('DEND',curDate);
}
d2.refresh();
showMessage();
}]]></example>
            
            <figure><link>images/se.png</link></figure>
        </step>
         <step>
            <description>Underneath the first function add a second function definition for the 
                setLowDateForDStart() function using the following code.
            </description>
            <example><![CDATA[function setLowDateForDStart() {
	return new Date();
}]]></example>
            <figure><link>images/se.png</link></figure>
        </step>
    
    </steps>
    
    
</section>
<section>
    <title>About setLowDateForDend() and setLowDateForDStart()</title>
    <description>Inside the function definition, the getValue method is called. 
        This gets the value of the start date calendar, [dstart], and assigns that value to a variable 
        named 'curDate'. The getControl() method is then used to to get a pointer to the control for 
        the date-end calendar, [dend]. This pointer is assigned to the javascript variable 'd2'. </description>
    
    <example><![CDATA[var curDate = {dialog.object}.getValue('DSTART');
var d2 = {dialog.object}.getControl('DEND');]]></example>
    
</section>
<section>
    <description>The next line of code sets the low date of the second calendar,  
        making it equal to the date that was selected in the first calendar control, 'curDate'. 
        As soon as there is a pointer to the second calendar control, 'd2', it is possible 
        to do this. Defining the low date in this way will make it impossible for users to 
        select a return date before their selected departure date; 
        because it will disable all of the days before the selected departure date on the second calendar control. 
    </description>
    <example><![CDATA[d2.datePicker.disabledDates.low = curDate;]]></example>
    
</section>



<section>
    <descripion>The getValue() method is used again in order to get the value of the [dend] calendar 
        by reading the date-end field. This value is assigned o the variable 'curEndDate'. 
        The date format that is stored in the dialog object is then read by referencing the ux 
        components state info.  
        This specifies what format is being used for all date values via the '[Date format]' field in 
        the UX Properties. For example, the date format  "MM/dd/yyyy"", could be used. Assigning the 
        date format to a javascript variable allows all callbacks to read from the same date format 
        easily.
    </descripion>
    <example><![CDATA[var curEndDate = {dialog.object}.getValue('DEND');
var dtFormat = {dialog.object}.stateInfo.__dtfmt;]]></example>
</section>
<section>
    <description>The Date() function is used to create a new date object, that is assigned to the 
        variable 'curEndDate2'. This is the built-in javascript date method. This 
        variable is used to get the value that was read out of the calendar for the end date, 
        'curEndDate', and then put it into a proper Javascript date object. 
        At this point 'curEndDate' only represents a javascript string, not a date object.
        The fromFormat() method is used to actually get a date object from the string. This 
        method takes as arguments the date string, 'curEndDate', and the date format, 'dtFormat'. 
        
    </description>
    <example><![CDATA[var curEndDate2 = new Date();
curEndDate2.fromFormat(curEndDate,dtFormat);
]]></example>
    
</section>
<section>
    <description>The Date() Method is called a second time and assigned to a variable named 'curDate2'. 
        This is used to create a second date object for the current date, the departure date. </description>
    <example><![CDATA[var curDate2 = new Date()
curDate2.fromFormat(curDate,dtFormat);]]></example>
</section>
<section>
    <description>The if statement states that if the departure date is greater than the return date, 
the value of the return date should be set to the departure date.</description>
    <example><![CDATA[if (curDate2 > curEndDate2 ) {
     {dialog.object}.setValue('DEND',curDate);
}]]></example>
    
</section>
<section>
    <description>The refresh() method is then called to refresh the second calendar.</description>
    <example><![CDATA[d2.refresh();]]></example>
</section>




A refresh method is then called 
<section>
    <title>Display the Time Between Two Selected Dates</title>
    
    <steps>
          <step>
            <description>On the UX Controls page, open the 'Containers' menu and click on the [Free-form Layout] option to add a free-form 
                layout to the control.
            </description>
            <figure><link>images/se.png</link></figure>
        </step>
     
        <step>
            <description></description>
            <figure><link>images/se.png</link></figure>
        </step>
         <step>
            <description></description>
            <example><![CDATA[function showMessage() {
	$('msg').style.display = '';
	var d1 = {dialog.object}.getValue('DSTART');
	var d2 = {dialog.object}.getValue('DEND');
	$('t1').innerHTML = d1;
	$('t2').innerHTML = d2;
}]]></example>
            <figure><link>images/se.png</link></figure>
        </step>
         <step>
            <description></description>
            <figure><link>images/se.png</link></figure>
        </step>
        
        
        
    </steps>
    
    
</section>
 
 
  </sections>

<links>
    <link href="http://www.ajaxvideotutorials.com/V11Videos/DialogCalendarControl_StartEndDate1.swf">Part 1</link>
    <link href="http://www.ajaxvideotutorials.com/V11Videos/DialogCalendarControl_StartEndDate2.swf">Part 2</link>
    <link link="UX Properties Other Properties">Other Properties</link>
    <link link="ux properties date format">Date format</link>
    
</links>
</page>