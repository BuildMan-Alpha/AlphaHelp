<page>
    <shortlink>Creating a Step Control Using a ViewBox</shortlink>
    <topic>Creating a Step Control Using a ViewBox</topic>
    <description>When completing an order online, filling out educational information, taking an online test, or checking the status 
        of a parcel in the post, it is common to see a stepped bar showing the current progress towards the 
        completion of the item in question. This 'step control' is relatively easy to 
        define using a ViewBox. It can then be tied to the panels in a panel navigator.
    </description>
 
<sections>
    <section>
        <title>Defining the ViewBox</title>
        <steps>
            <step>
                <description>In the UX Builder on the UX Controls page open the 'Data Controls' menu. Click 
                    on the [ViewBox] option to add a viewbox control to your component. Give the viewbox the name 
                    'step'.
                </description>
                <figure><link>images/sc2.png</link></figure>
            </step>
             <step>
                <description>Highlight the viewbox control in the controls tree. In the properties 
                    list on the right click the [...] button next to the 'ViewBox properties' property, 
                    in the 'ViewBox Properties' section.
                </description>
                <figure><link>images/sc3.png</link></figure>
            </step>
             <step>
                <description>In the ViewBox Builder open the 'Data Source' pane. Click the [...] 
                    button next to the 'ViewBox type' property and select 'Data'.
                </description>
                <figure><link>images/sc4.png</link></figure>
            </step>
             <step>
                <description>Click the dropdown next to the 'Datasource type' property and select 'Static JSON'.</description>
                <figure><link>images/sc5.png</link></figure>
            </step>
             <step>
                <description>Click the [...] button next to the 'Static JSON' property.</description>
                <figure><link>images/sc6.png</link></figure>
            </step>
             <step>
                <description>Define the following array of JSON Data. These represent the default steps in the step control. Click OK.</description>
               <example><![CDATA[[
'One',
'Two',
'Three',
'Four'
]]]></example>
                <figure><link>images/sc7.png</link></figure>
            </step>
             <step>
                <description>Open the 'ViewBox Properties' pane. In the 'ViewBox Properties' section 
                    check the 'Auto-refresh when ViewBox value changes' checkbox.</description>
                <figure><link>images/sc8.png</link></figure>
                  <note>Any time the viewbox changes a refresh is needed due to the fact that the value of the viewbox is being displayed.</note>
     
            </step>
             <step>
                <description>Check the 'Allow any value' checkbox, also in the 'ViewBox Properties' section.</description>
                <figure><link>images/sc9.png</link></figure>
                <note>This property needs to be checked because the values in this viewbox are not set values. 
                    However, there are default values. 
                </note>
                     </step>
             <step>
                <description>Open the 'ViewBox Layout' pane and select the 'Freeform editor' radio button.</description>
                <figure><link>images/sc10.png</link></figure>
            </step>
             <step>
                <description>Define the following template.</description>
                <example><![CDATA[{*root}
<div class="step {*if [temp].value >= [count] || [count] == 0}stepDone{*endif}" style="width: {100/[root].length}%;">
{[value]}<div class="stepBar"></div><div class="stepDot"></div></div>
{/*root}]]></example>
                <figure><link>images/sc11.png</link></figure>
                <note><![CDATA[The [{*root}] tag is used around data that contains a JSON array. This tag allows you 
                    to add headers and footers to a template. This template has a main <div> tag that contains 
                        an 'if' statement. The logic of this statement is this; 
                        if the value of the viewbox is greater than the item that 
                    is being itterated over add the CSS class 'stepDone'. The 'style' definition in this <div> sets 
                        the width as an expression that sets the size of each step as a percentage. The percentage allotted 
                        each step is determined by dividing the number of steps by 100. This is accomplished by getting 
                        the length of the array using '[root].length'. Inside the main <div> there are two additional <div> 
                            tags, one pointing to the CSS class 'stepBar' and the other 'stepDot'. This allows for the relative positioning 
                            of the points along the step control.]]></note>
            </step>
             <step>
                <description>Open the 'CSS' pane and add the following CSS classes.</description>
                <example><![CDATA[.step {
position: relative;
display: inline-block;
text-align: center;
padding-bottom: 14px;
}

.stepBar {
position: absolute;
height: 4px;
background: #ddd;
border-radius: 2px;
width: 100%;
left: -50%;
bottom: 3px;
z-index: 4;
}
.stepDot {
position: absolute;
height: 10px;
width: 10px;
background: #ddd;
border-radius: 5px;
left: 50%;
bottom: 0px;
margin-left: -5px;
z-index: 5;
}
.stepDone .stepBar, .stepDone .stepDot {
background:#007cdb;
}
.step:first-child .stepBar, .stepDone:first-child .stepBar {
background: transparent;
width: 50%;
left: 0px;
}]]></example>
                <figure><link>images/sc12.png</link></figure>
                <note>'stepBar' is a section of the step control and 'stepDot' is a point on this bar. 
                    'stepDot' makes a dot at the center of each step. 'stepDone' changes the background color 
                    when a step is complete. The last selector in the CSS pane is there to make sure that 
                    the first step is not shown. 
                </note>
            </step>
           
            
            
        </steps>
        
       </section>
       <section>
           <title>Adding Buttons to Step Through the ViewBox Array</title>
           <steps>
           <step>
                <description>In the UX Builder on the UX Controls page open the 'Other Controls' menu. 
                    Click on the [Button] option to add a button control underneath the ViewBox. 
                </description>
                <figure><link>images/sc13.png</link></figure>
            </step>
            <step>
                <description>Highlight the button control. In the properties list on the right set the 
                    'Button text' property to read 'Previous'.
                </description>
                <figure><link>images/sc14.png</link></figure>
            </step>
            <step>
                <description>Scroll down the properties list to the 'Javascript - (Touch, Mouse, Pointer Events)' 
                    section. Click the [...] button next to the 'click' property.
                </description>
                <figure><link>images/sc15.png</link></figure>
            </step>
            <step>
                <description>In the 'Edit Click Event' dialog select the 'Text mode' radio button and add the 
                    following javascript, then click Save.
                </description>
                <example><![CDATA[var val = {dialog.object}.getValue('step');
val = Number(val)-1;
if(val < 0) val = 0;
{dialog.object}.setValue('step',val);]]></example>
                <figure><link>images/sc16.png</link></figure>
            </step>
             <step>
                <description>With the 'Previous' button highlighted in the controls tree click the 'Toggle break' icon 
                    in the UX Controls toolbar to turn off the break.
                </description>
                <figure><link>images/sc17.png</link></figure>
            </step>
            <step>
                <description>Click on the [Button] option in the Other Controls menu again to add a second button underneath the first. 
                </description>
                <figure><link>images/sc18.png</link></figure>
            </step>
            <step>
                <description>Highlight the new button. In the properties list on the right change the 'Button text' property 
                    to read 'Next'. 
                </description>
                <figure><link>images/sc19.png</link></figure>
            </step>
            <step>
                <description>Scroll down again to the 'Javascript - (Touch, Mouse, Pointer Events) section. Click the 
                    [...] button next to the 'click' property.
                </description>
                <figure><link>images/sc20.png</link></figure>
            </step>
             <step>
                <description>In the radio button menu select 'Text mode'. Add the following Javascript definition for the 
                    click event and hit 'Save'.
                </description>
                <example><![CDATA[var vals = {dialog.object}.getValue('pop');
vals = vals.split('\n');
var vb = {dialog.object}.getControl('step');
vb.populate(vals);]]></example>
                <figure><link>images/sc21.png</link></figure>
            </step>
           
           </steps>
           
       </section>
       <section>
           <title>Setting the Step by Entering a Value</title>
           <steps>
           <step>
                <description>Return to the UX Builder's Design tab. On the UX Controls page open the 'Data Controls' menu and click on [TextBox] 
                    to add a textbox control to the component. Give this control the name and label 'val'. 
                </description>
                <figure><link>images/sc.png</link></figure>
                
            </step>
              <step>
                <description>Open the 'Other Controls' menu. Click on the [Button] option to add a button control to the UX component.</description>
                <figure><link>images/sc.png</link></figure>
            </step>
             <step>
                <description>Highlight the button. In the properties list on the right change the 'Button text' property to read 'Set Step'.</description>
                <figure><link>images/sc.png</link></figure>
            </step>
              <step>
                <description>Scroll down to the 'Javascript - (Touch, Mouse, Pointer Events)' section of the properties list. 
                    Click the [...] button next to the 'click' property.
                </description>
                <figure><link>images/sc.png</link></figure>
            </step>
             <step>
                <description>In the 'Edit Click Event' dialog select the 'Text mode' radio button. Enter the following 
                    Javascript definition to the click event and hit the 'Save' button to exit.
                </description>
                <example><![CDATA[{dialog.object}.setValue('step',{dialog.object}.getValue('val'));]]></example>
                <figure><link>images/sc.png</link></figure>
            </step>
              <step>
                <description>Run the component in Live Preview. Enter a number value from the step control into the textbox control 
                    and click the 'Set Step' button. You should see the progress bar jump to that element in the array.
                </description>
                <figure><link>images/sc.png</link></figure>
                <note>Javascript arrays are zero based so entering 1 will jump to the second dot.</note>
            </step>
          
            </steps>
           
       </section>
       <section>
           <title>Creating a Text Area that Defines Steps</title>
           <step>
                <description></description>
                <figure><link></link></figure>
                
            </step>
                <step>
                <description></description>
                <figure><link></link></figure>
            </step>
              <step>
                <description></description>
                <figure><link></link></figure>
            </step>
              <step>
                <description></description>
                <figure><link></link></figure>
            </step>
              <step>
                <description></description>
                <figure><link></link></figure>
            </step>
              <step>
                <description>Run the component in Live Preview. Click on the Previous and Next buttons. You should see a 
                    blue progress bar move back and forth between the steps.
                </description>
                <figure><link>images/sc.png</link></figure>
            </step>
       </section>
       <section>
           <title>Tying the Values of the Step Array to Different Panels</title>
           <step>
                <description></description>
                <figure><link></link></figure>
                
            </step>
                <step>
                <description></description>
                <figure><link></link></figure>
            </step>
              <step>
                <description></description>
                <figure><link></link></figure>
            </step>
              <step>
                <description></description>
                <figure><link></link></figure>
            </step>
              <step>
                <description></description>
                <figure><link></link></figure>
            </step>
           
       </section>
       
       
    
</sections>
 


<links>
    <link link="star root cst">{*root}</link>
    
    
</links>


</page>