<page>
   
    <topic>The ViewBox Control</topic>
    <description>A complete overview of the ViewBox control. This page describes what a Viewbox control is, 
        the key concepts behind the ViewBox control, the methods used with ViewBox controls, 
        and provides video links relating to the ViewBox control.</description>
    <groups>

        <group>
            <title>What is a ViewBox?</title>
            <sections>
                <section>
                    <description>
                        <p>The ViewBox is a control that displays hot HTML. The HTML can either be statically defined or dynamically defined using an HTML Template.</p>
                        <p>A ViewBox control is a generalized (and extremely versatile) way of creating various types of controls on a page. A ViewBox control allows you to create controls that have 'behaviors'.</p>
                        <p>Like all controls on an HTML page, a ViewBox controls is, at its core, just some HTML and Javascript that renders some text on the HTML page.</p>
                        <p>Of course, you might think that putting HTML on a page is easy - simply create a Static Text control and set the text of the control to the HTML that you want to display - so why would you need a ViewBox to do this? Unlike static HTML, the HTML rendered by a ViewBox can be dynamically generated by merging data into an HTML template using the client-side templating feature in Alpha Anywhere.</p>
                        <p>Similarly, you might think that assigning behaviors to arbitrary HTML is also easy - simply add an attribute, such as onClick, to the HTML that you render - so again, why would you need a ViewBox to do this? Event binding in the ViewBox is very efficient because event delegation is used - events are only added once, rather than for each instance of a template that is duplicated many times as the HTML is rendered.</p>
                        <p>Another key point about the ViewBox is that the ViewBox has the concept of a selection and state. Just like you can 'select' a row in a List control, parts of the ViewBox can be selected (and the corresponding selected CSS is applied to the selected text) and the state of the ViewBox is set when a selection is made.</p>
                        <p>The examples show below are all very different in appearance, but they are all created using the ViewBox control.</p>
                    </description>
                    <note>All of the examples can be created easily by opening the ViewBox builder, and clicking on the Load Sample ViewBox hyperlink on the Home tab of the ViewBox builder.</note>
                    <figure><link>images/sampleviewboxmenu.jpg</link></figure>
                </section>
                <section>
                    <title>Example 1: A List of Entries</title>
                        <description>
                            In this example, the ViewBox is acting much like a List control. However, it implements just a small fraction of the List functionality (i.e. drag scrolling and an event when a row is selected) and is therefore significantly 'lighter weight' (i.e. less load on the browser memory utilization) than a List control.  If you simply need a scrollable list of entries with events on each row of the list, a ViewBox might be a more efficient solution than using List controls. 
                        </description>
                        <figure><link>images/viewboxexample_list.jpg</link></figure>
                </section>
                <section>
                    <title>Example 2: An iOS Style Login Screen</title>
                    <description>
                        This example implements an iOS style login screen.
                    </description>
                    <figure><link>images/viewboxexample2.jpg</link></figure>
                    <videos>
                        <video>
                            <name>Watch Video - Part 1</name>
                            <link>http://www.ajaxvideotutorials.com/V12Videos/ux_viewbox_ioslogin_1.swf</link>
                        </video>
                        <video>
                            <name>Watch Video - Part 2</name>
                            <link>http://www.ajaxvideotutorials.com/V12Videos/ux_viewbox_ioslogin_2.swf</link>
                        </video>
                    </videos>
                </section>
                <section>
                    <title>Example 3: A Menu List</title>
                    <description>
                        This example is similar to Example 1. It is an example of a scrollable list of items with event on each row
                    </description>
                    <figure><link>images/viewboxexample3.jpg</link></figure>
                    <videos>
                        <video>
                            <name>Watch Video</name>
                            <link>http://www.ajaxvideotutorials.com/V12Videos/ux_viewbox_makingAList.swf</link>
                        </video>
                    </videos>
                </section>
                <section>
                    <title>Example 4: A 'Star Rating' Control</title>
                    <description>
                        This example shows a series of stars. The user can click on a star and all of the stars to the left of the star that is clicked become highlighted.  The {dialog.object}.getValue() and {dialog.object}.setValue() methods can be used to programmatically set the number of highlighted stars.
                    </description>
                    <figure><link>images/viewboxexample4.gif</link></figure>
                    <videos>
                        <video>
                            <name>Watch Video - Part 1</name>
                            <link>http://www.ajaxvideotutorials.com/V12Videos/ux_viewbox_starrating_1.swf</link>
                        </video>
                        <video>
                            <name>Watch Video - Part 2</name>
                            <link>http://www.ajaxvideotutorials.com/V12Videos/ux_viewbox_starrating_2.swf</link>
                        </video>
                    </videos>
                </section>
                <section>
                    <title>Example 5: World Map</title>
                    <description>
                        In this example, the HTML that the ViewBox renders is actually a map of the world, rendered using SVG. When the user clicks on a country on the map, the 'value' of the ViewBox control is set to that country (and shown at the top of the screen). Similarly, if you were to use the {dialog.object}.setValue() method to set the value of the ViewBox to (say) 'Brazil' then Brazil would be highlighted on the map -- and the previously highlighted country (if any) would automatically be de-selected.
                    </description>
                    <figure><link>images/viewboxexample6.jpg</link></figure>
                </section>
                <section>
                    <title>Example 6: Client-Side Report Writer</title>
                    <description>
                        This example shows how rich HTML output can be created by merging data in a Javascript object (the object is an array of customers with nested arrays of orders for each customer and then nested arrays of order details for each order).  This example can be thought of as a client-side report writer. It would be easy to make various parts of the report 'hot' (i.e. fire events) by adding event handlers into the HTML template defined in the ViewBox.
                    </description>
                    <note>
                        The template used to create this ViewBox is quite complex. To view a video tutorial on how this template was constructed open the Video Finder (Help, Video Finder) and search for video UX_V12--118 or view it in the Video Library: [Client-Side Template Tutorial].
                    </note>
                    <figure><link>images/viewboxexample8.jpg</link></figure>
                </section>
            </sections>
        </group>
        <group>
            <title>Adding a ViewBox Control to a UX Component</title>
            <sections>
                <section>
                    <description>
                        The ViewBox control is one of the Data Controls in the UX Builder. To add a ViewBox control to a UX component, click on the [ViewBox] item in the toolbox, as shown in the image below.
                    </description>
                    <figure><link>images/viewboxInUXToolbox.jpg</link></figure>
                </section>
                <section>
                    <description>
                        The ViewBox control is termed a 'Data Control' because, like other data controls (such as Textbox, Textarea, etc), a ViewBox control has a 'value' (that can be set or read using the standard UX Component {dialog.object}.setValue() and {dialog.object}.getValue() methods), and when the UX component is submitted to the server, the 'value' of any ViewBox controls are submitted and are available in the e.dataSubmitted object that the server side events can access.
                    </description>
                </section>
            </sections>
        </group>
        <group>
            <title>Key ViewBox Concepts</title>
            <sections>
                <section>
                    <title>Data Source</title>
                    <description>
                        <p>A ViewBox can either be based on static HTML, or based on data (in the form of a Javascript object). In the case of static HTML you simply enter the HTML that the ViewBox displays in the ViewBox Layout pane in the ViewBox builder.</p>
                        <p>In the case where the ViewBox is based on data you will need to define how the ViewBox will get its data. You will also need to define an 'HTML template' (in the 'Layout' pane of the builder). The actual HTML rendered by the ViewBox is obtained by merging the data into the template (using Alpha Anywhere's client-side templating features - search Release Notes for 'Client-side Templates' for more information).</p>
                        <p>The data for the ViewBox can be:</p>
                    </description>
                    <cases>
                        <case>
                            <description>
                                static - you define a JSON object for the data
                            </description>
                        </case>
                        <case>
                            <description>
                                Javascript function - you specify a Javascript function that returns a data object
                            </description>
                        </case>
                        <case>
                            <description>
                                List - you specify the name of a List control and the ViewBox uses the data in the List as its data source.
                            </description>
                        </case>
                        <case>
                            <description>
                                Database Query - you specify a database query that return the data for the ViewBox
                            </description>
                        </case>
                    </cases>
                </section>
                <section>
                    <description>
                        In the case where the ViewBox data is based on a Database Query you can specify:
                    </description>
                    <cases>
                        <case>
                            <description>
                                SQL query - A SQL query that will return an array of data.
                            </description>
                        </case>
                        <case>
                            <description>
                                Nested SQL query - A series of SQL queries that will return a complex JSON object (for example an array of customers with a nested array of orders for each customer and a nested array or order details for each order).
                            </description>
                        </case>
                    </cases>
                </section>
                <section>
                    <title>ViewBox Layout</title>
                    <description>
                        <p>The ViewBox layout is where you define the actual HTML that the ViewBox will render.</p>
                        <p>In the case where the the ViewBox is based on 'data' (as opposed to static HTML), you define an HTML template for the layout and the actual HTML displayed by the ViewBox is generated by merging the data into the template.</p>
                        <p>In the case where the ViewBox layout is static HTML (i.e. it is not generated by merging data into a template), the HTML can either be specified at design time, or it can be returned by a Javascript function at run-time.</p>
                    </description>
                </section>
                <section>
                    <title>Items - The a5-item Attribute</title>
                    <description>
                        <p>Items are how you add event handlers to the ViewBox. You can define as many items as you want. Each item that you define has properties such as onClick, onDblClick, etc. that define the code to execute when the user clicks, or double clicks on some HTML that specifies an item.</p>
                        <p>For example here is an HTML snippet that specifies an item</p>
                    </description>
                    <example><![CDATA[<div a5-item="item1">contents of div</div>]]></example>
                </section>
                <section>
                    <description>
                        Assume that the item 'item1' defined on onClick event handler with this code:
                    </description>
                    <example><![CDATA[alert('hello')]]></example>
                </section>
                <section>
                    <description>
                        <p>When the ViewBox was rendered and the user clicked on the text the alert would be displayed.</p>
                        <p>When you add an item to the HTML you can specify and optional 'item attribute'. For example</p>
                    </description>
                    <example><![CDATA[<div a5-item="item1:item_attribute1">contents of div</div>]]></example>
                </section>
                <section>
                    <description>
                        <p>When any of the event handlers (such as onClick, onDownHold, etc.) for this item are fired, the item attributes will be available to the to Javascript code (in a special variable called ia ).</p>
                        <p>When you add an item attribute to some HTML (using the a5-item attribute, as shown above), you can also specify an a5-value attribute. The value of the a5-value attribute will also be available in the event handler code (in a special variable called v).</p>
                        <p>For example:</p>
                    </description>
                    <example><![CDATA[<div a5-item="item1:item_attribute1" a5-value="v1">contents of div</div>]]></example>
                </section>
                <section>
                    <description>
                        The onClick event for 'item1' could be:
                    </description>
                    <example><![CDATA[alert('Click event -- item attribute is : ' + ia + ' and item value is: ' + v);]]></example>
                </section>
                <section>
                    <description>
                        <p>The item 'value' (as set by the a5-value) attribute defines what 'value' is returned by the ViewBox control.</p>
                        <p>For example if the ViewBox HTML is as shown in the above example, if the user clicked on the div (and assuming that the 'item1' had been defined as 'selectable'), then the ViewBox 'value' (as returned by the {dialog.object}.getValue() method) would be 'v1'.</p>
                        <p>Similarly, if the {dialog.object}.setValue() method was used to set the value of the ViewBox to 'v1', then the div would be displayed as 'selected' (i.e. the 'selected classname' as defined in the definition for 'item1') would be applied to the div.</p>
                        <p>For each item that you define, you can specify if the item is 'selectable'. If an item is selectable, then when you click the HTML that is bound to that item, the corresponding selected classname (defined for the item) is applied to the HTML (to indicate that the item has been selected).</p>
                        <p>Your template can reference the current ViewBox value by using the special [temp].value variable.</p>
                        <p>For example in the sample 'star rating' ViewBox (see video [Watch Star Rating Video - Part 1]  [Watch Star Rating Video - Part 2] ), you will see that in the ViewBox template, the following code is used in the {*if} conditional block to determine if the 'selected' classname should be applied to the div:</p>
                    </description>
                    <example><![CDATA[<div class="star {*if [temp].value >=1}selected{*endif} " style="display:inline-block;" a5-item="starclick" a5-value="1">

    ..... div content....
</div>]]></example>
                </section>
                <section>
                    <description>
                        In addition to the special [temp].value variable, your ViewBox template can also reference the special [temp].state variable to get access to data in the ViewBox's state object. For more information on this please watch the video.
                    </description>
                    <videos>
                        <video>
                            <name>Watch Video</name>
                            <link>http://www.ajaxvideotutorials.com/V12Videos/ux_viewbox_sateobject.swf</link>
                        </video>
                    </videos>
                </section>
            </sections>
        </group>
        <group>
            <title>Methods</title>
            <sections>
                <section>
                    <description>The following are the key ViewBox methods. <![CDATA[In all of the examples, <viewBox> indicates a reference to the ViewBox control, obtained using the {dialog.object}.getControl() method. EG:]]></description>
                    <example><![CDATA[var vb = {dialog.object}.getControl('MYVIEWBOX1');]]></example>
                </section>
                <section>
                    <title><![CDATA[<viewBox>.populate(dataObject)]]></title>
                    <description>Populates a ViewBox with new data. Only applies if the ViewBox type is set to 'data'. EG:</description>
                    <example><![CDATA[var vb = {dialog.object}.getControl('MYVIEWBOX1');
var data = {name: 'Fred Smith', age: 23};
vb.populate(data);
vb.refresh();]]></example>
                </section>
                <section>
                    <title><![CDATA[<viewBox>.refresh()]]></title>
                    <description>Refreshes the ViewBox rendering the HTML again (merges data into the template.)</description>
                </section>
                <section>
                    <title><![CDATA[<viewBox>.setValue(value [, flagFireChangeEvent])]]></title>
                    <description>Sets the ViewBox value. If flagFireChangeEvent is true, the change event if first. Default for is flagFireChangeEvent true.</description>
                </section>
                <section>
                    <title><![CDATA[<viewBox>.setLayout(layoutName)]]></title>
                    <description>Sets the active ViewBox layout. Assumes that the ViewBox was designed to have multiple layouts.</description>
                </section>
                <section>
                    <title><![CDATA[<viewBox>.setDisabled(true/false)]]></title>
                    <description>Set the ViewBox control to be disabled.</description>
                </section>
                <section>
                    <title><![CDATA[<viewBox>.scrollToItem(value)]]></title>
                    <description>Scrolls the ViewBox to the item with the specified value. You can also specify an element Id using the syntax: #elementId.</description>
                </section>
                <section>
                    <title><![CDATA[<viewBox>.setElementClass(value, className)]]></title>
                    <description>Sets the CSS class of an element with the specified value.</description>
                </section>
                <section>
                    <title><![CDATA[<viewBox>.addElementClass(value, className)]]></title>
                    <description>Add the CSS class to an element with the specified value.</description>
                </section>
                <section>
                    <title><![CDATA[<viewBox>.removeElementClass(value, className)]]></title>
                    <description>Remove the CSS class from an element with the specified value.</description>
                </section>
                <section>
                    <title><![CDATA[<viewBox>.setState(object)]]></title>
                    <description>Sets properties in the ViewBox's state object. EG:</description>
                    <example><![CDATA[var vb = {dialog.object}.getControl('MYVIEWBOX1');
var obj = {name: 'Fred Smith', age: 23};
vb.setState(obj);
vb.refresh();]]></example>
                </section>
                <section>
                    <title><![CDATA[<viewBox>.getState()]]></title>
                    <description>Returns an object with the ViewBox's state object.</description>
                </section>
                <section>
                    <title><![CDATA[<viewBox>.clearState()]]></title>
                    <description>Clears the ViewBox's state object.</description>
                </section>
                <section>
                    <title><![CDATA[<viewBox>.setElementDisabled(valueOrId, true/false)]]></title>
                    <description>
                        <p>Sets an element to be disabled. valueOrId is the ViewBox value, or an id specified using the syntax: #elementId.</p>
                        <p>For example, assume that the Viewbox contains this markup in the template:</p>
                    </description>
                    <example><![CDATA[<button a5-item="item1" id="button1" >Click me</button>]]></example>
                </section>
                <section>
                    <description>Here is javascript to disable the button:</description>
                    <example><![CDATA[var v = {dialog.object}.getControl('v1'); //get pointer to the viewbox
v.setElementDisabled('#button1',true);   
//if the 'item1' items specifies a disabled classname,
//it would be applied to the button.]]></example>
                </section>
                <section>
                    <title><![CDATA[<viewBox>.navigate(direction)]]></title>
                    <description>Selects the specified item in the ViewBox. direction can be:  first, last, next, prev.</description>
                </section>
            </sections>
        </group>
        <group>
            <title>Videos</title>
            <sections>
                <section>
                    <title>Introduction to Basic Concepts</title>
                    <description>
                        <p> This video demonstrates basic concepts of the ViewBox control such as the a5-item attribute and the a5-value attribute and shows how events are attached to the ViewBox and how parts of the ViewBox can be made 'selectable'.</p>
                    </description>
                    <videos>
                        <video>
                            <name>Watch Video</name>
                            <link>http://www.ajaxvideotutorials.com/V12Videos/ux_viewbox1a.swf</link>
                        </video>
                    </videos>
                </section>
                <section>
                    <description>
                        <p>[Download Basic Concepts ViewBox Component]</p>
                        <p>Date added: 2016-03-13</p>
                    </description>
                </section>
                <section>
                    <title>ViewBox HTML Rendered by Merging Data into a Template</title>
                    <description>The HTML that the ViewBox displays can be generated dynamically by merging data into an HTML template.</description>
                    <videos>
                        <video>
                            <name>Watch Video</name>
                            <link>http://www.ajaxvideotutorials.com/V12Videos/ux_viewbox2.swf</link>
                        </video>
                    </videos>
                </section>
                <section>
                    <description>
                        <p>[Download Merging Data ViewBox Component]</p>
                        <p>Date added: 2016-03-13</p>
                    </description>
                </section>
                <section>
                    <title>ViewBox HTML Rendered by Merging Data Array into a Template</title>
                    <description>Data merged into a ViewBox Template can be an array of objects. In this video we show how the template is expanded by iterating over all of the objects in the data array and how the resulting HTML can be formatted to look and behave like a simple List control.</description>
                    <videos>
                        <video>
                            <name>Watch Video</name>
                            <link>http://www.ajaxvideotutorials.com/V12Videos/ux_viewbox3.swf</link>
                        </video>
                    </videos>
                </section>
                <section>
                    <description>
                        <p>[Download Merging Array Data ViewBox Component]</p>
                        <p>Date added: 2016-03-15</p>
                    </description>
                </section>
                <section>
                    <title>Making a ViewBox Behave Like a Simple List Control</title>
                    <description>
                        <p>A common use case for a ViewBox control is to implement a simple List control. In cases where you don't need the full richness of a List control, but you only want to create a scrollable list of items, the ViewBox represents a simpler option.</p>
                        <p>In this video we show how the special ListRowContainer control can be used to make a simple List using the ViewBox.</p>
                    </description>
                    <videos>
                        <video>
                            <name>Watch Video</name>
                            <link>http://www.ajaxvideotutorials.com/V12Videos/ux_viewbox_makingAList.swf</link>
                        </video>
                    </videos>
                </section>
                <section>
                    <description>
                        <p>[Download Simple List ViewBox Component]</p>
                        <p>Date added: 2016-03-15</p>
                    </description>
                </section>
                <section>
                    <title>Sample ViewBox Walkthrough - Star Rating Example</title>
                    <description>In this video we do a behind-the-scenes walkthrough on the sample 'star rating' ViewBox Control.</description>
                    <videos>
                        <video>
                            <name>Watch Video - Part 1</name>
                            <link>http://www.ajaxvideotutorials.com/V12Videos/ux_viewbox_starrating_1.swf</link>
                        </video>
                        <video>
                            <name>Watch Video - Part 2</name>
                            <link>http://www.ajaxvideotutorials.com/V12Videos/ux_viewbox_starrating_2.swf</link>
                        </video>
                    </videos>
                </section>
                <section>
                    <description>
                        <p>Date added: 2016-03-15</p>
                    </description>
                </section>
                <section>
                    <title>Sample ViewBox Walkthrough - iOS Login Example</title>
                    <description>In this video we do a behind-the-scenes walkthrough on the sample 'iOS Login' ViewBox Control.</description>
                    <videos>
                        <video>
                            <name>Watch Video - Part 1</name>
                            <link>http://www.ajaxvideotutorials.com/V12Videos/ux_viewbox_ioslogin_1.swf</link>
                        </video>
                        <video>
                            <name>Watch Video - Part 2</name>
                            <link>http://www.ajaxvideotutorials.com/V12Videos/ux_viewbox_ioslogin_2.swf</link>
                        </video>
                    </videos>
                </section>
                <section>
                    <description>
                        <p>Date added: 2016-03-15</p>
                    </description>
                </section>
                <section>
                    <title>Understanding the Concept of 'Selectable' Elements in a ViewBox</title>
                    <description>
                        <p>One of the key concepts of the ViewBox control is that elements in the HTML rendered by the ViewBox control can be 'selectable'.</p>
                        <p>In this video we explain this concept by taking a complex ViewBox layout that does not have any selectable elements and making portions of the ViewBox HTML selectable.</p>
                    </description>
                    <videos>
                        <video>
                            <name>Watch Video</name>
                            <link>http://www.ajaxvideotutorials.com/V12Videos/ux_viewbox_selectablecontent.swf</link>
                        </video>
                    </videos>
                </section>
                <section>
                    <description>
                        <p>[Download Selectable Elements ViewBox Component]</p>
                        <p>Date added: 2016-03-15</p>
                    </description>
                </section>
                <section>
                    <title>Understanding the ViewBox State Object</title>
                    <description>
                        <p>The ViewBox has a 'state' object and the values in the state object can be used in the ViewBox template.</p>
                        <p>In this video we show how the template can reference values in the ViewBox state and how the ViewBox's .setState() method allows you to set properties in the ViewBox state object.</p>
                    </description>
                    <videos>
                        <video>
                            <name>Watch Video</name>
                            <link>http://www.ajaxvideotutorials.com/V12Videos/ux_viewbox_sateobject.swf</link>
                        </video>
                    </videos>
                </section>
                <section>
                    <description>
                        <p>[Download State Object ViewBox Component]</p>
                        <p>Date added: 2016-03-16</p>
                    </description>
                </section>
                <section>
                    <title>Using a ViewBox as the List's Detail View</title>
                    <description>
                        <p>A common pattern when building mobile applications is to use a List control with a Detail View. When the user taps on a row in the List, the Detail View shows the details for the selected row. This pattern is used extensively, especially for offline applications where the data in the List is intended to be updateable.</p>
                        <p>However, there are many cases where the List is not intended to be  updateable and a much 'lighter weight' solution can be achieved but not turning on the List's 'Has Detail View property' and instead, using a ViewBox to display details for the selected row in the List.</p>
                        <p>An even lighter weight solution can be achieved by using a ViewBox to replace the List. So you end up with a ViewBox to display a list of records and another ViewBox to display details for the selected record.</p>
                    </description>
                    <videos>
                        <video>
                            <name>Watch Video Part 1</name>
                            <link>http://www.ajaxvideotutorials.com/V12Videos/ux_list_viewbox_as_detailview.swf</link>
                        </video>
                        <video>
                            <name>Watch Video Part 2</name>
                            <link>http://www.ajaxvideotutorials.com/V12Videos/ux_viewbox_for_list_and_viewbox_for_detailview.swf</link>
                        </video>
                    </videos>
                </section>
                <section>
                    <description>
                        <p>[Download List Detail View ViewBox Component]</p>
                        <p>Date added: 2016-07-09</p>
                    </description>
                </section>                
            </sections>
        </group>
    </groups>
    <links>
        <link href="http://www.alphasoftware.com/video-library/?v=4425">Client-Side Template Tutorial</link>
        <link href="http://www.ajaxvideotutorials.com/V12Videos/ux_viewbox_starrating_2.swf">Watch Star Rating Video - Part 1</link>
        <link href="http://www.ajaxvideotutorials.com/V12Videos/ux_viewbox_starrating_2.swf">Watch Star Rating Video - Part 2</link>
        <link href="http://www.ajaxvideotutorials.com/V12Videos/viewbox_basicConcepts1.zip">Download Basic Concepts ViewBox Component</link>
        <link href="http://www.ajaxvideotutorials.com/V12Videos/viewbox_htmltemplate1.zip">Download Merging Data ViewBox Component</link>
        <link href="http://www.ajaxvideotutorials.com/V12Videos/ux_viewbox_dataarray.zip">Download Merging Array Data ViewBox Component</link>
        <link href="http://www.ajaxvideotutorials.com/V12Videos/ux_viewbox_list.zip">Download Simple List ViewBox Component</link>
        <link href="http://www.ajaxvideotutorials.com/V12Videos/viewbox_selectableelements.zip">Download Selectable Elements ViewBox Component</link>
        <link href="http://www.ajaxvideotutorials.com/V12Videos/viewboxstate.zip">Download State Object ViewBox Component</link>
        <link href="http://www.ajaxvideotutorials.com/V12Videos/viewboxWithDetailView.zip">Download List Detail View ViewBox Component</link>
    </links>
</page>