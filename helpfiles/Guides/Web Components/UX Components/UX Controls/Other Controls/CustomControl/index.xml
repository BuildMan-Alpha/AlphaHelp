<page>
    <shortlink>ux controls other controls custom control</shortlink>
    <topic>CustomControl</topic>
    <description>The CustomControl allows you to specify arbitrary HTML and Javascript for the control.
         You can specify the HTML and Javascript at design-time, or you can specify an Xbasic 
         function that will generate the HTML and Javascript for the control at run-time. </description>
  
    
    <sections>
        <section>
              <!--list:.-->
            
        </section>
        <section>
             <figure><link>images/occ2.png</link></figure>
            
        </section>
        <section>
            <description>A very powerful use case for the CustomControl is to dynamically generate a form based on a definition stored in a database.</description>
            
        </section>
        <section>
            <list bullet="true">
                <item>
                     <description>[Video Part 1]</description>
                </item>
                 <item>
                    <description>[Video Part 2]</description>
                </item>
                 <item>
                     <description>[Video Part 3]</description>
                </item>
                 <item>
                     <description>[Video Part 4]</description>
                </item>
                 <item>
                    <description>[Video Part 5]</description>
                </item>
                 <item>
                    <description>[Video Part 6]</description>
                </item>
                 <item>
                    <description>[Video Part 7]</description>
                </item>
                
            </list>
          
              
            
        </section>
        <section>
            <description>When you add a CustomControl to a UX component, the PropertySheet for the control is displayed as follows
</description>
            <figure><link>images/occ3.png</link></figure>
        </section>
        <section>
            
            <description>Clicking on the smart field for the Custom Control Properties brings up the builder.
If you select the 'Specify Now' option in the Custom Control builder you can specify the HTML for the control and (optionally) any Javascript you want to execute before the UX is 'prepared' and after the UX has been rendered.
</description>
             <figure><link>images/occ4.png</link></figure>
        </section>
        <section>
            <description>For example, if you wanted your CustomControl to render a standard UX component input control (called, say, 'CUSTOM1')  you would add this code to the HTML:
</description>
            <example><![CDATA[<input id="{dialog.componentname}.V.R1.CUSTOM1" name="V.R1.CUSTOM1" class="{dialog.style}Edit" ></input>
]]></example>
        </section>
           <section>
            <description>And you would add this Javascript to the 'Javascript - Before Prepare' property:
</description>
            <example><![CDATA[{dialog.object}.columnInfo['CUSTOM1'] = { info: {controlType: 'Textbox'}, hiddenVal: false, type: 'input,label', isCalc: false, hlp: '', isArray: false, dataType: 'C' };
]]></example>
        </section>
           <section>
            <description>On the other hand, if you wanted your CustomControl to render a standard UX component button control (with an ID of, say, 'B1') you would add this code to the HTML:
</description>
            <example><![CDATA[<div id="B1" style="width: .5in;">MyButtonGoesHere</div>
]]></example>
        </section>
           <section>
            <description>And you would add this Javascript to the 'Javascript - After Render' property:
</description>
            <example><![CDATA[//add an event handler for the button
$e.add('B1',A5.d.evnts.click,function(e) {
alert('this is button b1');
},this,false,'B1');


//define a  new button object
{dialog.object}._buttons['B1'] = new A5.Button({
layout: 'text',
style: 'box-sizing: border-box; -moz-box-sizing: border-box; -ms-box-sizing: border-box; -webkit-box-sizing: border-box; width: 1.5in;',
html: 'Button',
onClick: function() { 
},
theme: '{grid.style}'
})

//bind the button object to the html element
{dialog.object}._buttons['B1'].bind('B1');
]]></example>
        </section>
           <section>
            <description>If you wanted to generate the HTML and Javascript at run-time you can set the Method to 'Xbasic' and then define an Xbasic function that generates the HTML and Javascript.
</description>
           <figure><link>images/occ5.png</link></figure>
        </section>
        
    </sections>
    
    
    
    <links>
        <link href="http://www.ajaxvideotutorials.com/V12Videos/ux_otherControls_customControl_1.swf">Video Part 1</link>
          <link href="http://www.ajaxvideotutorials.com/V12Videos/ux_otherControls_customControl_2.swf">Video Part 2</link>
          <link href="http://www.ajaxvideotutorials.com/V12Videos/ux_otherControls_customControl_3.swf">Video Part 3</link>
            <link href="http://www.ajaxvideotutorials.com/V12Videos/ux_otherControls_customControl_4.swf">Video Part 4</link>
              <link href="http://www.ajaxvideotutorials.com/V12Videos/ux_otherControls_customControl_5.swf">Video Part 5</link>
                <link href="http://www.ajaxvideotutorials.com/V12Videos/ux_otherControls_customControl_6.swf">Video Part 6</link>
   <link href="http://www.ajaxvideotutorials.com/V12Videos/ux_otherControls_customControl_7.swf">Video Part 7</link>
    </links>
    
    
    <see>
        <ref link="ux data controls customcontrol">Data-bound Custom Control</ref>
        
    </see>
    
</page>