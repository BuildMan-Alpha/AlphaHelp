<page>
    <shortlink>ux controls other controls button control split buttons</shortlink>
  <topic>Split Buttons</topic>
  <description>Split buttons are comprised of one button divided into two parts. This arrangement provides 
    users the option of running an action or selecting the action to run.</description>
  
    
    <sections>
      
      <section>
        <figure><title>An example of a split button.</title><link>images/sb2.png</link></figure>
        
      </section>
      <section>
        <description>The 'Create New Component' button on the Web Projects Control Panel, shown above, 
          is one example of a split button. 
          When you press the main button, represented by an icon, you will open the specified component builder. 
          When you press the second button, designated with an down arrow, you will open a dropdown where you can select 
          a different component type. Once a given component type is selected, that selection will be displayed in 
          the first button's space. Split buttons are describein this three part video: [Part 1], [Part 2], [Part 3], and in the guide below.</description>
        
      </section>
      <section>
        <title>Create a Split Button</title>
        <steps>
          <step>
            <description>In the UX Builder, on the UX Controls page, open the 'Other Controls' menu. 
              Click on the [Button] option to add a button control to the component.
            </description>
            <figure><link>images/sb3.png</link></figure>
          </step>
           <step>
            <description>Highlight the button. In the properties list on the right, in the 'Button Properties' section, 
              click the dropdown next to the 'Advanced button control type' property and select 'Button'.
            </description>
            <figure><link>images/sb4.png</link></figure>
          </step>
           <step>
            <description>In the 'Button Appearance' section check the 'Has dropdown icon' checkbox.</description>
            <figure><link>images/sb5.png</link></figure>
          </step>
           <step>
            <description>Next check the 'Display as split button' checkbox that appears.</description>
            <figure><link>images/sb6.png</link></figure>
          </step>
           <step>
            <description>Run the component in Live Preview. You should see a split button, but the button does not yet 
              do anything.
            </description>
            <figure><link>images/sb7.png</link></figure>
          </step>
        </steps>
      </section>
      
      <section>
        <title>Make a Split Button with a Menu</title>
        <description>In the event handler you can use 'arguments[1]'. This can be set to either 'split' or 
          'normal', which will tell you which portion of the button was clicked on. With split buttons it is 
          necessary to define the event handler in the 'onClick' event, not the abstract 'click' event.
        </description>
        
        
        
        <steps>
          <step>
            <description>Highlight the split button in the controls tree. In the properties list on the right 
              scroll down to the 'Javascript' section. Click the [...] button next to the 'onClick' property.
            </description>
             <figure><link>images/sb8.png</link></figure>
          </step>
           <step>
            <description>In the 'Edit onClick Event' dialog select the 'Text mode' radio button from the 'Editing mode' options. 
              Add the following javascript and click the 'Save' button.
            </description>
            <example><![CDATA[var buttonId = this.id;
buttonId = this.id.split('V.R1.')[1];

if(arguments[1] == 'split') {
     var ele = {dialog.object}.getPointer(buttonId);
     {dialog.object}.runAction('showMenu',ele);
} else { 
     var btn = {dialog.object}.getControl(buttonId);
     if(typeof btn._state != 'undefined') {
          alert('run ' + btn._state);
     } else {
          alert('run the default action');
     }
}]]></example>
             <figure><link>images/sb9.png</link></figure>
            
            <note>First,'this.id' returns the button's full id, that includes not only the ID listed in the 'Button Properties' 
              but also the group name id (see the '[Dynamically Changing a Button's Code]' page), 'DLG.V.R1.BUTTON_1'. 
              To get the button id, this code makes use of the javascript split() function, which splits a string into an array 
              of substrings and then returns a new array. The split is performed on 
              'this.id' and returns all of the text that comes after 'V.R1'. This returned array is assigned to the variable 
              'buttonId'. An 'If' statement then determines whether the user clicked on the 'split' portion of the split button, 
              i.e. the dropdown arrow. If this is true then a variable named 'ele' gets a pointer to the button and an 
              action called 'showMenu' is run. The action will show a dropdown menu. The 'ele' variable is passed 
              into the action in order to specify where the button is located in this menu. An 'else' statement handles what to 
              do if the user clicks on the 'normal' part of the split button. If this happens, a variable 'btn' gets a pointer to the button. 
              Another 'if' statement then looks to see if the button's state has been defined, i.e. if one of the menu options has been selected. 
              If it has been defined, then the action that corresponds to the button's state is run. 
              Otherwise, a second 'else' statement runs the default action.
            </note>
            
            
            
          </step>
           <step>
            <description>On the Controls page toolbar click the 'Menu' dropdown to 
              open the additional options menu. Select the 'Javascript Actions Editor' 
              option.
            </description>
             <figure><link>images/sb10.png</link></figure>
          </step>
           <step>
            <description>Click the 'Add New Action' button.</description>
             <figure><link>images/sb11.png</link></figure>
          </step>
           <step>
            <description>Give the new action the name 'showMenu' and click OK.</description>
             <figure><link>images/sb12.png</link></figure>
          </step>
           <step>
            <description>Highlight the 'showMenu' action and click the 'Edit Action' button.</description>
             <figure><link>images/sb13.png</link></figure>
          </step>
           <step>
            <description>In the 'Edit Unbound Event' dialog click the 'Add New Action' button.</description>
             <figure><link>images/sb14.png</link></figure>
          </step>
           <step>
            <description>Type 'menu' into the filter control and select the 'Menus' action. Click OK.</description>
             <figure><link>images/sb15.png</link></figure>
          </step>
          <step>
            <description>In the 'Action Javascript - Dropdown Menu' properties dialog view the 'Menu Choices' section. 
              Click the [...] button next to the 'Menu definition' property.
            </description>
             <figure><link>images/sb16.png</link></figure>
          </step>
          <step>
            <description>Click the 'Add item - Sibling' in the lower left-hand corner of the 'Tree Data Genie'.</description>
             <figure><link>images/sb17.png</link></figure>
          </step>
          <step>
            <description>Add the following items to the 'Add item' dialog's 'Label' section.</description>
            <example><![CDATA[Option 1
Option 2 
Option 3]]></example>
             <figure><link>images/sb18.png</link></figure>
          </step>
          <step>
            <description>Highlight the first item, 'Option 1', in the Tree Data Genie. In the 'Leaf Properties' section on the 
              right click the [...] button next to the 'onClick' property. </description>
             <figure><link>images/sb19.png</link></figure>
          </step>
          <step>
            <description>Set the 'Edit action' definition to be the following code and click OK.</description>
            <example><![CDATA[setSplitMenuChoice('BUTTON_1','Option 1');]]></example>
             <figure><link>images/sb20.png</link></figure>
             
             <note>This function passes in the name of the button and the action to be run, 'Option 1'.</note>
          </step>
          <step>
            <description>Highlight the second item in the Tree Data Genie, 'Option 2', and again click the 
              [...] button next to the 'onClick' property in the Leaf Properties section. </description>
             <figure><link>images/sb21.png</link></figure>
          </step>
          <step>
            <description>Set the 'Edit action' definition for the second item to be the following code and click OK.</description>
            <example><![CDATA[setSplitMenuChoice('BUTTON_1','Option 2');]]></example>
             <figure><link>images/sb22.png</link></figure>
            
          </step>
          <step>
            <description>Highlight the third item in the Tree Data Genie, 'Option 3'. Click the 
              [...] button nex to the 'onClick' property in the 'Leaf Properties' section on the right.
            </description>
             <figure><link>images/sb23.png</link></figure>
          </step>
          <step>
            <description>Add the following code to the onClick event definition for the third item and click OK. Click OK 
              again to close the Tree Data Genie. Click OK, OK, Save, and OK to return to the Controls page.
            </description>
            <example><![CDATA[setSplitMenuChoice('BUTTON_1','Option 3');]]></example>
            
             <figure><link>images/sb24.png</link></figure>
          </step>
          
          <step>
            <description>In the main menu expand the 'Code' section and click to open the 'Javascript functions' page.</description>
             <figure><link>images/sb25.png</link></figure>
          </step>
          
          <step>
            <description>Define the 'setSplitMenuChoice() function using the following code.</description>
            <example><![CDATA[function setSplitMenuChoice(buttonId, actionName) {
var btn = {dialog.object}.getControl(buttonId);
btn.setContent({html : actionName, tip: 'Help for action' + actionName, icon: ''});
btn._state = actionName;
setTimeout(function(){
     {dialog.object}.buttonClick(butonId);
     },10);
}]]></example>
             <figure><link>images/sb26.png</link></figure>
            <note>The setSplitMenuChoice() function defined here takes the button id and a specified action as arguments. 
              In this case the action will be either 'Option 1', 'Option 2', or 'Option 3', the choices defined in the menu 
              action. A variable named 'btn' gets a pointer to the button object using the buttonId argument. The setContent() 
              function is then called. This function updates the text, image, and bubble help for the 'normal' or 'main' portion 
              of the split button. The name of the action that was selected ('Option 1', 'Option 2', or 'Option 3') is then 
              stored in a variable in the button object. In this way, when the users clicks on the button again, the state of the 
              button can be determined. The 'buttonClick' method executes the selected action. The setTimeout() function 
              wrapped around the buttonClick() function simply gives the menu time to close down.
            </note>
            
          </step>
          <step>
            <description>Run the component in Live Preview. Click on the main 'Button' button. 
              An alert should be displayed stating that this is the default button.
            </description>
             <figure><link>images/sb27.png</link></figure>
          </step>
          <step>
            <description>Now click the Dropdown and select an option. The selection that you make 
              should fill the main button.
            </description>
             <figure><link>images/sb28.png</link></figure>
          </step>
          <step>
            <description>Click on the main button again. 
              You should see an alert specific to the option that you selected.</description>
             <figure><link>images/sb29.png</link></figure>
          </step>

        </steps>
        
        
        
      </section>
      
      
      
      
      
      
    </sections>
  
  <links>
    <link link="ux controls other controls button control dynamically changing a buttons code">Dynamically Changing a Button's Code</link>
    
    <link href="http://www.ajaxvideotutorials.com/V12Videos/splitButton_1.swf">Part 1</link>
      
    <link href="http://www.ajaxvideotutorials.com/V12Videos/splitButton_2.swf">Part 2</link>
    
    <link href="http://www.ajaxvideotutorials.com/V12Videos/splitButton_3.swf">Part 3</link>
    
    
    
  </links>
  
  
    
    <see>
        <ref link="ux control properties other properties button properties">Button Properties</ref>
        <ref link="ux control properties other properties button appearance index">Button Appearance</ref>

    </see>
    
</page>