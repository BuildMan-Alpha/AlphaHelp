<page>
    <shortlink>ux properties other security permissions denied action</shortlink>
    <topic>Security permissions denied action</topic>
    <description>Defines what should happen if an action is denied by security.</description>
    <discussion>
        <p>The *[ui:Security permissions deined action]* defines the action the security system will take when a request is made from this component and the request is denied because of security restrictions.</p>
        <p>A security restriction can occur if a UX attempts to open another component that has login restrictions and no one is logged in, or the user has insufficient permission to see the component being requested. The security action will also be taken if the current component has login restrictions, the login has expired, and some request is made to the server, such as a request to refresh a control or do a server-side sort on a column in a list control.</p>
        <p>The action applies to only Ajax requests made from the component. A UX component ('parent' component) can open other UX components ('child components'). If any of the child components have a login restriction, and this action is set to fire the client side events on any of the components, the recommended 'best practice' is to set the property to fire the client-side event on all of the child components and the parent component. This should be set even if the parent component is always allowed.</p>
    </discussion>
    <sections>
        <section>
            <figure>
                <link>images/securitypermissiondeniedproperty.gif</link>
            </figure>
        </section>
        <section>
            <list>
                <item>
                    <name-title>Option</name-title>
                    <description-title>Description</description-title>
                </item>
                <item>
                    <name>Redirect to login page</name>
                    <description>Default. The security will redirect to the login or insufficient permission page as set in the security settings.</description>
                </item>
                <item>
                    <name>Fire client-side security event</name>
                    <description>Cause the server to return either a 401 status code if the login has expired, or a 403 status code if a user is logged in, but not allowed to access the requested component. This will fire either the [securityNotAuthenticated] or [securityPermissionsDenied] client-side events.</description>
                </item>
            </list>
        </section>
        <section>
            <title>Using 'Fire client-side security event'</title>
            <description>
                <p>The *[ui:Fire client-side security event]* is primarily intended for use in a UX component that contains an integrated login section (for example in a mobile application where the UX has Panel Navigator with at least two Panel Cards and the Login controls are on Panel Card 1 and the afterLogin event sets focus to Panel Card 2).</p>
                <p>In the case where the UX contains an integrated login section, the securityNotAuthendicated and securityPermissionsDenied events can be used to direct a user back to a panel or section used for login on a UX component. For example, the UX may have login controls on a panel, PANELCARD_1. The securityNotAuthendicated event could set focus back to that panel.</p> 
            </description>
            <example><![CDATA[{dialog.object}.panelSetActive('PANELCARD_1',true);]]></example>
        </section>
        <section>
            <description> If the event was fired from a child component, the event in the child component could redirect the user back to the login panel.</description>
            <example><![CDATA[var po = {dialog.object}.getParentObject();
if(po) {
    po.panelSetActive('PANELCARD_1',true);
} ]]></example>
        </section>
        <section>
            <description> If the child was opened in a window, the child event could also close the window. If the child UX had a control named 'list1', the event would be:</description>
            <example><![CDATA[var po = {dialog.object}.getParentObject();
if(po) {
    var ele = {dialog.Object}.getPointer('list1');
    {dialog.Object}.closeContainerWindow(ele);
    po.panelSetActive('PANELCARD_1',true);
}]]></example>
        </section>
    </sections>
    <links>
        <link href="/documentation/index?seach=ux client side events securityNotAuthenticated">securityNotAuthenticated</link>
        <link href="/documentation/index?seach=ux client side events securitypermissionsdenied">securityPermissionsDenied</link>
    </links>
    <see>
        <ref href="/documentation/index?seach=ux client side events securityNotAuthenticated">securityNotAuthenticated Event</ref>
        <ref href="/documentation/index?seach=ux client side events securitypermissionsdenied">securityPermissionsDenied Event</ref>
        <ref href="/documentation/index?seach=Return Status Codes from Ajax Callbacks">How to Return Status Codes from Ajax Callbacks</ref>
    </see>
</page>