<page>
    <shortlink>grid onSQLCountQuery event</shortlink>
    <topic>onSQLCountQuery Event</topic>
    <description>
        <p>Fires when the Grid needs to count the records in the current Grid query. If you want to base the Grid on a stored procedure you need to use this event to compute the number of records in the Grid.</p>
    </description>
    <discussion>
        <p>This event fires whenever the Grid needs to get a count of the number of records in the current Grid query.</p>
    </discussion>
    <sections>
        <section>
            <description>The following variables are available to you in the event:</description>
            <list>
                <item>
                    <name-title>Variable</name-title>
                    <description-title>Description</description-title>
                </item>
                <item>
                    <name>e.tmpl</name>
                    <description>The grid component definition</description>
                </item>
                <item>
                    <name>e.rtc</name>
                    <description>Run-time calculations (allows you to pass data to other event handlers)</description>
                </item>
                <item>
                    <name>e.__si</name>
                    <description>State information</description>
                </item>
                <item>
                    <name>e.cn</name>
                    <description>The [SQL::Connection] object for the Grid. You can call this object's *[xb:.execute()]* method to execute your own SQL.</description>
                </item>
                <item>
                    <name>e.filter</name>
                    <description>The WHERE clause which indicate what filter (if any) the user has applied to the Grid</description>
                </item>
                <item>
                    <name>e.order</name>
                    <description>The fields (if any) that the user has ordered the Grid on</description>
                </item>
                <item>
                    <name>e.arguments</name>
                    <description>The [SQL::Arguments] object that contains argument value for all arguments used in the WHERE clause (i.e. the *[xb:e.filter parameter)]* To read a value from arguments: *[xb:e.arguments.find("argumentName").data]*</description>
                </item>
                <item>
                    <name>e.sql</name>
                    <description>The SQL statement that the Grid has computed. If *[xb:e.handled]* is NOT set to *[xb:.t.]*, then the Grid will compute the number of records returned by this query.</description>
                </item>
            </list>
        </section>
        <section>
            <description>Your event must set the following properties:</description>
            <list>
                <item>
                    <name-title>Property</name-title>
                    <description-title>Description</description-title>
                </item>
                <item>
                    <name>e.count</name>
                    <description>The number of records in the query</description>
                </item>
                <item>
                    <name>e.handled</name>
                    <description>Set to *[xb:.t.]* if your event has computed the record count. Set to *[xb:.f.]* if you want Alpha Anywhere to execute its own count query</description>
                </item>
            </list>
        </section>
        <section>
            <description>Your event can optionally set these properties of the *[xb:e]* object:</description>
            <list>
                <item>
                    <name-title>Property</name-title>
                    <description-title>Description</description-title>
                </item>
                <item>
                    <name>e.fatalError</name>
                    <description>Set to *[xb:.t.]* if a fatal error has occurred</description>
                </item>
                <item>
                    <name>e.errorText</name>
                    <description>The error text to show if a fatal error occurred</description>
                </item>
            </list>
        </section>
        <section>
            <title>Setting State Variables</title>
            <description>
                <p>You can also set state variables in this event. The value of any state variables will be available in all subsequent ajax callbacks (in the e.__si2 object).</p>
                <p>To set a state variable:</p>
            </description>
            <example><![CDATA[e._state.myvar1 = "value1"
e._state.myvar2 = "value2"]]></example>
        </section>
    </sections>
    <links>
        <link href="/documentation/index?search=sql::connection%20object">SQL::Connection</link>
        <link href="/documentation/index?search=sql::arguments%20class">SQL::Arguments</link>
    </links>
</page>