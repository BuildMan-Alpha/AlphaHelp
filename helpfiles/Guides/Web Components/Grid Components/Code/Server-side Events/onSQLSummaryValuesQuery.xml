<page>
    <shortlink>grid onSQLSummaryValuesQuery event</shortlink>
    <topic>onSQLSummaryValuesQuery Event</topic>
    <description>
        <p>Fires when the Grid has to compute summary values. Only fires if one or more columns in the Grid has summary values.</p>
    </description>
    <discussion>
        <p>Fires if one or more columns in the Grid displays summary values. The event fires before the command to compute the summary values is executed.</p>
    </discussion>
    <sections>
        <section>
            <description>The following variables are available to you in the event:</description>
            <list>
                <item>
                    <name-title>Variable</name-title>
                    <description-title>Description</description-title>
                </item>
                <item>
                    <name>e.tmpl</name>
                    <description>The grid component definition</description>
                </item>
                <item>
                    <name>e.rtc</name>
                    <description>Run-time calculations (allows you to pass data to other event handlers)</description>
                </item>
                <item>
                    <name>e.__si</name>
                    <description>State information</description>
                </item>
                <item>
                    <name>e.cn</name>
                    <description>The [SQL::Connection] object for the Grid. You can call this object's *[xb:.execute()]* method to execute your own SQL.</description>
                </item>
                <item>
                    <name>e.filter</name>
                    <description>The WHERE clause based on any filter that the user has applied to the Grid</description>
                </item>
                <item>
                    <name>e.sql</name>
                    <description>The SQL Statement that Alpha Anywhere has computed. If e.handled is not set to .t., then the Grid will combine this statement with the user filter (e.filter) to compute the summary values.</description>
                </item>
                <item>
                    <name>e.arguments</name>
                    <description>The [SQL::Arguments] object that contains values for all of the arguments in e.filter. To read a value from arguments: *[xb:e.arguments.find("argumentName").data]*</description>
                </item>
                <item>
                    <name>e.summaryVariablesToBeComputed</name>
                    <description>A list of the summary values that need to be computed. The list contains a crlf delimited list of variable names whose values need to be set.</description>
                </item>
            </list>
        </section>
        <section>
            <description>Your event must set the following properties:</description>
            <list>
                <item>
                    <name-title>Property</name-title>
                    <description-title>Description</description-title>
                </item>
                <item>
                    <name>e.handled</name>
                    <description>set to *[xb:.t.]* if your event has computed the record count. set to *[xb:.f.]* if you want Alpha Anywhere to execute its own count query</description>
                </item>
                <item>
                    <name>e.summary</name>
                    <description>The 'summary' properties of the 'e' object as explained below</description>
                </item>
            </list>
        </section>
        <section>
            <description>The e.summaryVariablesToBeComputed contains a crlf delimited list of summary values that must be computed. For example, e.summaryVariablesToBeComputed might contain:</description>
            <example><![CDATA[e.summary.Quantity.total
e.summary.Quantity.count
e.summary.Price.average]]></example>
        </section>
        <section>
            <description>Your code would then need to set the value of each of these variables. For example:</description>
            <example><![CDATA[e.summary.Quantity.total = 23
e.summary.Quantity.count = 3
e.summary.Price.average = 4.5]]></example>
        </section>
        <section>
            <description>Your event can optionally set these properties of the *[xb:e]* object:</description>
            <list>
                <item>
                    <name-title>Property</name-title>
                    <description-title>Description</description-title>
                </item>
                <item>
                    <name>e.fatalError</name>
                    <description>Set to *[xb:.t.]* if a fatal error has occurred</description>
                </item>
                <item>
                    <name>e.errorText</name>
                    <description>The error text to show if a fatal error occurred</description>
                </item>
            </list>
        </section>
        <section>
            <title>Example</title>
            <description>For example,</description>
        </section>
        <section>
            <title>Setting State Variables</title>
            <description>
                <p>You can also set state variables in this event. The value of any state variables will be available in all subsequent ajax callbacks (in the e.__si2 object).</p>
                <p>To set a state variable:</p>
            </description>
            <example><![CDATA[e._state.myvar1 = "value1"
e._state.myvar2 = "value2"]]></example>
        </section>
    </sections>
    <links>
        <link href="/documentation/index?search=sql::connection%20object">SQL::Connection</link>
        <link href="/documentation/index?search=sql::arguments%20class">SQL::Arguments</link>
        <link href="/documentation/index?search=sql::resultset%20object">SQL::ResultSet</link>
    </links>
</page>