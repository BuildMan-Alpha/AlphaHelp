<page>
	  <topic>Custom Alternate View</topic>

		<description>The custom alternate Grid view allows you create expressions that will be processed from the data in the grid display and an Xbasic function to turn the arrays of expression values into an actual view. This is the infrastructure that allowed Alpha Software to turn a Google Map Component into a Google Map alternate view.</description>
	<sections>
		<section>
			<description>Before you define an alternate view, you need to know what you're defining. Once you've got your goal in mind, you can list the data you'll need to collect, and figure out how you'll process the data to display the alternate view. In many cases, you will want to use a predefined widget that has a JavaScript API, and you will generate the HTML to house the JavaScript widget as well as the JavaScript to add the collected data to the widget .
</description>
			
		</section>
<section>
	
	<steps>
		<step>
			<description>The first step in defining the alternate view to Alpha Anywhere is to check Has Alternate View in the grid properties.</description>
		<figure><link>images/has_alternate_views.png</link></figure>
		</step>
		<step>
			<description>In the Alternate View Builder, add an alternate view and select Custom for your Alternate View type.</description>
<figure><link>images/01_AlternateViewCustom1.png</link></figure>
		</step>
		<step>
			<description>Click on the Xbasic function property</description>
		</step>
		<step>
			<description>The alternate view definition is a combination of one or more data expressions for collecting the data and an Xbasic function for processing the collected data.
</description>
<figure><link>images/01_AlternateViewCustom2.png</link></figure>
		</step>
		<step>
			<description>Once you type in the name of the Xbasic function you want to use, the "Show function prototype" link will be enabled. Click on that link and Alpha Anywhere will generate a commented prototype function for you. 
</description>

<cases>
	<case>
		<figure><link>images/01_AlternateViewCustom3.png</link></figure>
	</case>
	<case>
		<figure><link>images/01_AlternateViewCustom4.png</link></figure>
	</case>
</cases>
<note>It is worthwhile reading the prototype function carefully so that you can understand the flow of data in the alternate view.</note>
		</step>
		<step>
			<description>Click on the "Copy to clipboard" button, close the function prototype, 
</description>
<figure><link>images/01_AlternateViewCustom5.png</link></figure>
		</step>
		<step>
			<description>click on "Open Xbasic Function Declarations", 
</description>
<figure><link>images/01_AlternateViewCustom6.png</link></figure>
		</step>
		<step>
			<description>and paste your function. You can edit your Xbasic function to generate the required HTML and JavaScript for your view. 
</description>
<figure><link>images/01_AlternateViewCustom7.png</link></figure>
		</step>
		<step>
			<description>It's a good idea to create sample data and a sample function call that you can use to test your function. When your function is working properly, you can comment out the sample data and sample function call.
</description>
		</step>
		<step>
			<description>You'll also have to create one or more data expressions. 
</description>
		</step>
		<step>
			<description>The help screen shown below explains what is necessary. You can create data expressions, templates that include data expressions in curly brackets, and/or Xbasic functions to process the data for each row.
</description>
		</step>
		
		
	</steps>
	
	
	
</section>
<section>
	<title>Custom Alternate View Data. </title>
<description>When the Grid is rendered, Alpha Anywhere performs these steps:</description>	
	<steps>
		<step>
			<description>Execute a query to find records that satisfy the search criteria.</description>
		</step>
		<step>
			<description>Navigate to the correct starting record in the query (for example, if the Grid is showing 20 records per page, and you navigate to page 3, the starting record will be record number 41).</description>
		</step>
		<step>
			<description>Loop over the records in query, generating the HTML to show the Grid (This is called the 'Main Loop').</description>
		</step>
		<step>
			<description>The loop continues until you have generated the desired number of rows (based in the 'Rows per page' property), or you reach the last record in the query.</description>
		</step>
		

		<step>
			<description>While the Main Loop is executing, you can capture additional information from each record in the query.
</description>
		</step>
		<step>
			<description>The way in which you specify what additional information you want to capture is by specifying one or more expressions that should be evaluated in the Main Loop.
</description>
		</step>
		<step>
			<description>The expressions are evaluated, and the expression results are placed into arrays (called 'value arrays'). There will be one value array for each expression that you specify. Each value array will have one entry for each row that is displayed in the Grid. So, for example, if the Grid is set to display 20 rows per page, each array will have 20 entries.
</description>
		</step>
		<step>
			<description>Once the Main Loop has completed, the Xbasic function that you specified for the Alternate View is called and the value arrays are passed into the Xbasic function. The Xbasic function can then use the data in the value arrays to compute the HTML to display in the Alternate View. When you specify the expressions that you want to evaluate, you can define two types of expressions:</description>
			<cases>
				<case>
					<description>Regular Xbasic expressions. Use this syntax to reference a field value in the query: tbl.data("fieldname")</description>
				</case>
				<case>
					<description>Templates. The template is a text string that can include Xbasic expressions. For example: {tbl.data("fieldname")}. The data enclosed in the curly brackets can be any Xbasic expression.</description>
				</case>
				
			</cases>
			
		</step>
		<step>
			<description>Function. Specify the name of an Xbasic function that will return the value you want to capture. The function prototype will be: YourFunctionName (e)
</description>
		</step>
		<step>
			<description>custom alternate view definition > Add expression > Help on how to specify exp.</description>
		</step>
		
	</steps>
	
	
	
</section>

<section>
	<title>Alternate View expressions</title>
	<description>Alternate View expressions are written in Xbasic. Your expression will typically need to reference field values from the Grid query. To reference a field value in the current Grid query, i.e. data from the row, use this syntax:
</description>
	<example><![CDATA[tbl.data("fieldname")
]]></example>
<note>The field value that you read using the above syntax is correctly typed. For example, it will be a character, numeric, time, date, etc. value.</note>
</section>
<section>
	<description>Here are some example expressions:
</description>
	<example><![CDATA[tbl.data("firstname") + ", " + tbl.data("lastname")
upper(tbl.data("lastname"))
time ("Mon dd yyy", tbl.data("orderDate"))
"User Name:" + upper(tbl.data("lastname"))]]></example>
	
</section>
<section>
	<description>If you decide to create one or more Xbasic functions to process row data, you can generate function prototypes for them. 
</description>
	<figure><link>images/data_collector_function_prototype.png</link></figure>
</section>
		
		
	</sections>
	
	<links>
		<link href="images/open.png">...</link>
	</links>
	
	
</page>