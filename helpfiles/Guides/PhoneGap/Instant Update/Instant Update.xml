<page build="4784">
    <shortlink>phonegap instant update</shortlink>
    <topic>PhoneGap Build Instant Update</topic>
    <description>Publish updates to your Alpha Anywhere mobile apps without re-submitting them to the App Store using Instant Update.</description>
    <discussion>
        <p>The Instant Update feature allows you to update a PhoneGap App that has already been installed on a user's device without needing to submit the app to the PhoneGap Build service after you have made changes to the app and without having to re-submit the app to the App stores.</p>
        <p>As soon as the user launches the app on their mobile device, the app will be instantly updated to the latest version of the app. </p>
        <p>The first time you create a PhoneGap App from a UX component, you are creating a Baseline for this application. The Baseline app must be submitted to the PhoneGap Build service, and must then be submitted to the appropriate App Stores. </p>
        <p>After you make changes to the app, the PhoneGap genie will prompt if you want to do an *[ui:Update build]*, a new *[ui:BaseLine build]*, or *[ui:Roll-back to a previous update]*.</p>
    </discussion>
    <sections>
        <section>
            <figure>
                <link>images/instantupdateBaseline.png</link>
            </figure>
            <note>
                <p>You can only use the Instant Update feature if you do not need to change any of the PhoneGap plugins used in your application0. If you need to change PhoneGap plugins, you will need to create a new *[ui:Baseline]* application.</p>
            </note>
        </section>
        <section>
            <description>
                <p>If you select to do an *[ui:Update build]*, the PhoneGap genie will determine which files in your project have changed (relative to the Baseline build) and will upload file containing the changes to a server (either an Alpha Software Amazon S3 bucket or your own Amazon S3 bucket). When a user launches the app on their device, the app will automatically check if a new version is available and will instantly update itself to the new version.</p>
                <p>If you release an Update to your app, and you find that this new version has introduced a bug, you can roll back to a prior version. When the user launches the app on their device, the app will instantly be downgraded to the specified previously released version.</p>
                <p>To turn on the Instant Update feature, set the *[ui:Enable Instant Update]* property to Yes.</p>
            </description>
            <figure>
                <link>images/instantupdate1.gif</link>
            </figure>
        </section>
        <section>
            <description>
                <p>Once you have enabled Instant Update the Instant update settings property is revealed.</p>
            </description>
            <figure>
                <link>images/InstantUpdate2.gif</link>
            </figure>
        </section>
        <section>
            <description>
                <p>The dialog for the Instant Update Settings is shown below:</p>
            </description>
            <figure>
                <link>images/InstantUpdate2.png</link>
            </figure>
        </section>
        <section>
            <title>Update Settings</title>
            <description>
                <p>The options in this dialog are:</p>
            </description>
            <cases>
                <case>
                    <title nested="2">Patch location</title>
                    <description>
                        <p>The options are *[ui:AlphaSoftware]* or *[ui:PrivateS3Bucket]*. The patch files are uploaded to a S3 server and are then downloaded to each device when the app is launched on the device.</p>
                        <p>As a convenience you can select AlphaSoftware to use a bucket that has been configured by Alpha Software. When you select the AlphaSoftware  location, you do not have to specify the S3 Storage connection string or the Base URL properties.</p>
                        <p>For testing, using the AlphaSoftware option is fine, but *[for production applications, it is highly recommended that you set up your own private S3 bucket.]*</p>
                    </description>
                    <figure>
                        <title>If the 'PrivateS3Bucket' option is selected, additional properties are exposed.</title>
                        <link>images/InstantUpdate3.png</link>
                    </figure>
                </case>
                <case>
                    <title nested="2">S3 Storage connection string</title>
                    <description>
                        <p>This is the storage connection string that points to your S3 bucket. To create storage connection strings, select the Tools, Storage connection strings menu item when the Web Control Panel has focus.</p>
                    </description>
                </case>
                <case>
                    <title nested="2">Base URL</title>
                    <description>
                        <p>This is the base URL for items in your S3 bucket. It will be of the form:</p>
                    </description>
                    <example><![CDATA[http://<your S3 bucket Name>.s3.amazonaws.com/]]></example>
                </case>
                <case>
                    <title nested="2">Path</title>
                    <description>
                        <p>This property defines the folder structure within the Amazon S3 bucket where the files should be stored. For example:</p>
                    </description>
                    <example><![CDATA['instantupdates/myfiles/']]></example>
                </case>
                <case>
                    <title nested="2">System Message</title>
                    <description>
                        <p>This property can be set to -- None or  Verbose  If None is selected, the After update message (if defined) will still be shown. In Verbose mode, the following system messages are shown:</p>
                    </description>
                    <list bullet="true">
                        <item>
                            <name>The current installed version number (shown when the app is launched)</name>
                        </item>
                        <item>
                            <name>App is running latest version message (if no update to the app is found)</name>
                        </item>
                        <item>
                            <name>App was updated message (if an update was found)</name>
                        </item>
                        <item>
                            <name>In Verbose mode, the user-defined After update message will also be shown.</name>
                        </item>
                        <item>
                            <name>Fatal errors are always shown.</name>
                        </item>
                    </list>
                </case>
                <case>
                    <title nested="2">After update message</title>
                    <description>
                        <p>Message to display on the device if the version was updated when the app was launched. You message text can include the {version} placeholder to display the version number that the app was updated to.</p>
                    </description>
                </case>
                <case>
                    <title nested="2">Automatically check for update when App is started</title>
                    <description>
                        <p>Defines whether or not a check for a new version should be performed when the app is launched. This option is enabled by default.</p>
                        <p>If you turn off *[ui:Automatically check for update when App is started]*, you must manually check for an updated using the [{dialog.object}.instantUpdateRefresh()] method.</p>
                        <p>You can dynamically enable or disable this setting at runtime using the [{dialog.object}.instantUpdateUseAutoUpdate()] method.</p>
                    </description>
                </case>
                <case build="5082">
                    <title nested="2">Display first-time run wait message</title>
                    <description>
                        <p>The first time you load a PhoneGap app (built using the Instant Update feature) on a device the app files must be unzipped and stored in a folder on the device. On most newer devices, this process happens quite quickly. However, on some older Android devices, it can take some time to unzip the files. It can appear to the user that the app is not responding.</p>
                        <p>You can display a message to the user when the app is unzipping files for first time use by enabling the *[ui:Display first-time run wait message]* property. The message should tell users that this is a one-time delay and that they must wait until the files have been prepared.</p>
                        <p>When enabled, the *[ui:First-time run message]* property is also exposed, which is used to customize the wait message.</p>
                    </description>
                </case>
            </cases>
        </section>
        <section>
            <title>How to Configure A Private S3 Bucket</title>
            <description>
                <p>The S3 bucket you specify must have a CORS policy set. Click the CORS Help hyperlink on the Instant Update Settings dialog for more information on CORS.</p>
            </description>
            <figure>
                <link>images/instantupdateCORS.jpg</link>
            </figure>
        </section>
        <section>
            <description>
                <p>You will also need to set a bucket policy to set the objects in the bucket to allow public read. The policy can be set in the Amazon AWS management console and it will look something like this:</p>
            </description>
            <example code="json"><![CDATA[{
    "Id": "Policy1513279106848",
    "Version": "2012-10-17",
    "Statement": [
        {
            "Sid": "Stmt1513279094040",
            "Action": [
                "s3:GetObject"
            ],
            "Effect": "Allow",
            "Resource": "arn:aws:s3:::your-bucket-name/*",
            "Principal": "*"
        }
    ]
}]]></example>
        </section>
        <section>
            <title>URL For AJAX Callbacks</title>
            <description>
                <p>When creating an Instant Update to an existing baseline application, you can now change the URL for Ajax callbacks by checking the Change AJAX URL property in the image shown below.</p>
                <p>When you press the OK button, the Genie will prompt for a new AJAX callback URL.</p>
                <p>The AJAX callback URL is set in the PhoneGap builder when you create he baseline version of your application. When you create an update you might want to change this URL so that users who are still running an older version of your APP are still making callbacks to the original location, while users who are running the latest version of your app will make callbacks to a new location.</p>
                <p>Another reason why you may want to change the URL for AJAX callbacks is that you simply want to move the location where your App is hosted. For example, you might be migrating from on premises deployment to deploying in the Alpha Cloud.</p>
            </description>
            <important>
                <p>If you change the URL for AJAX callbacks *[be sure to also publish your app to that location]*!</p>
            </important>
            <figure>
                <link>images/instantupdate_changeurl.jpg</link>
            </figure>
        </section>
        <section>
            <title>Version Numbers</title>
            <description>
                <p>When you create an Instant Update to a PhoneGap application, each update is automatically give an internal version number. The internal version number is an integer that automatically increments each time a new Instant Update is created.</p>
                <p>Now, you can also define your own version number for each Instant Update. The version number can use any numbering pattern that you want. (The Internal Version Number will also still be generated). In addition you can define a description for the Instant Update.</p>
                <p>Your version number and description will make it easier if you need to roll back to a previous version to select the version to which you want to roll back.</p>
            </description>
            <figure>
                <link>images/PreRel2.jpg</link>
            </figure>
        </section>
        <section build="5221">
            <title>Channels</title>
            <description>
                <p>By default, when you publish an Instant Update to your PhoneGap application, all of the users of your app will get the update as soon as they launch the app on their devices (assuming the app was designed with auto update turned on).</p>
                <p>However, you may want to push an update to *[a small set of users]*, perhaps because you are still testing a new feature. This can easily be done by specifying a *[ui:channel]* when you publish an Instant Update.</p>
                <p>You will need to add a user interface to your app so that a user can select what channel they are on. By default, all users are on the Production channel. But a user may change their channel to (say) the Test channel. The JavaScript method you can use to allow a user to set their channel is:</p>
            </description>
            <example code="js"><![CDATA[{dialog.object}.setChannel(channelName);]]></example>
        </section>
        <section>
            <description>
                <p>When you publish an Instant Update, you specify for which channel the update is intended. For example, if you publish an Instant Update to the Test channel then a user who is on the default Production channel will not get an update when they re-launch the app on their device. However, a user who has changed their channel to the Test channel will get updated when they re-launch the app. If that user later changes their channel back to the Production channel, then when that user re-launches the app, they will be automatically switched to the latest Production version.</p>
            </description>
            <figure>
                <link>images/PreRel3.jpg</link>
            </figure>
        </section>
        <section build="5982">
            <cases>
                <case>
                    <title nested="2">Channel Properties</title>
                    <description>
                        <p>There are several properties available to configure a channel. These properties include:</p>
                        <p>
                            <list>
                                <item>
                                    <name-title>Property</name-title>
                                    <description-title>Description</description-title>
                                </item>
                                <item>
                                    <name>UX Component</name>
                                    <description>The UX Component to publish to the channel.</description>
                                </item>
                                <item>
                                    <name>URL for Ajax callbacks</name>
                                    <description>The URL for Ajax Callbacks for the channel.</description>
                                </item>
                            </list>
                        </p>
                        <p>For example, on your &lt;Default&gt; (i.e. production channel), you might be using a component called 'MyApp'. But on the test channel, you might want to use a different UX component (for example 'MyAppV2').</p>
                        <p>In the PhoneGap Instant Update dialog, when you create a new channel, the dialog also allows you to set properties for the channel (you can't set properties for the &lt;Default&gt; (i.e. production) channel.</p>
                    </description>
                    <figure>
                        <link>images/instantupdate_setchannelprops.jpg</link>
                    </figure>
                </case>
                <case>
                    <description>
                        <p>When you click the Set Channel Properties dialog the following dialog appears:</p>
                    </description>
                    <figure>
                        <link>images/instantupdate_channelprops.jpg</link>
                    </figure>
                </case>
            </cases>
        </section>
        <section>
            <title>Creating a new Baseline</title>
            <description>
                <p>If you need to add or remove plugins from your PhoneGap application, or want to update your application in the App Store to a newer build of your app, you need to create a new *[ui:Baseline]* application. To create a new Baseline, you must select the *[ui:]* option in the Instant Update window.</p>
            </description>
            <figure>
                <link>images/instantupdateBaseline2.png</link>
            </figure>
        </section>
        <section>
            <figure>
                <title>Alpha Anywhere will prompt you to confirm creating a new Baseline build</title>
                <link>images/instantupdateBaselineConfirm.png</link>
            </figure>
        </section>
        <section>
            <description>
                <p>This will expose the PhoneGap Build dialog, where you can make changes to plugins and other settings.</p>
                <p>When you create a new Baseline application, all future Instant Updates published for the application will only apply to the new Baseline build. Users using an older version of your application will need to install the new Baseline application in order to continue receiving updates distributed using Instant Update.</p>
            </description>
        </section>
        <section>
            <title>Methods</title>
            <description>
                <p>The following Instant Update methods are available in the UX Component:</p>
            </description>
            <cases>
                <case>
                    <title nested="2">{dialog.object}.instantUpdateRefresh()</title>
                    <description>
                        <p>This method allows you to check for a new Instant Update version of an application without having to exit the app on the device and then re-launch it.</p>
                        <p>The method is only available in a PhoneGap application that was build with the Instant Update feature enabled.</p>
                        <p>Normally, after you publish an Instant Update to a PhoneGap application, users will not get the new version until they re-launch the application on their devices.</p>
                        <p>Using this method, you can get a new version of the application without have to exit and re-launch the application.</p>
                        <p>Example:</p>
                    </description>
                    <example code="js"><![CDATA[{dialog.object}.instantUpdateRefresh();]]></example>
                </case>
                <case build="4896">
                    <title nested="2">{dialog.object}.instantUpdateUseAutoUpdate()</title>
                    <description>
                        <p>This method allows you to enable or disable the automatic check for updates. If disabled, you must manually check for updates using the *[js:{dialog.object}.instantUpdateRefresh()]* method.</p>
                    </description>
                    <example code="js"><![CDATA[{dialog.object}.instantUpdateUseAutoUpdate(false);]]></example>
                </case>
                <case>
                    <description>
                        <p>See [{dialog.object}.instantUpdateUseAutoUpdate method] for more info.</p>
                    </description>
                </case>
                <case build="4902">
                    <title nested="2">{dialog.object}.instantUpdateCheckForUpdate()</title>
                    <description>
                        <p>This method allows you check if an update is available in a PhoneGap application that was build with the Instant Update feature enabled. Since this is an asynchronous operation, you need to provide the JavaScript success and the error callback functions.</p>
                        <p> If a result is returned within a 5 second time-frame, the successCallback is called and passed an object with a result property that will be either true or false. If true, an update is available. If a timeout or any other error occurs the error callback is passed an error object or a string, depending on the error.</p>
                        <p> This method can be useful if you have turned off auto updates and want to programmatically check if an update is available.</p>
                    </description>
                    <example code="js"><![CDATA[var _successCallbackFunction = function(e) { 
	if(!e.result) { 
		//there is no update available
		alert('You are running the latest version');
		return false;
	}
	
	A5.msgBox.show('Notice','<div style="height: 1in; padding: 15pt;">An update for this application is available. 
	Click OK to install the update.</div>',
	[{name: 'ok', html: 'OK', value: 'ok'}],
	function(button) {if(button == 'ok') {
		setTimeout(function() {
			{dialog.object}.instantUpdateRefresh() //install the update
		},10)
	}
	});
	
}

var _errorCallbackFunction = function() { 
	alert('Could not determine if an update is available');
}


{dialog.object}.instantUpdateCheckForUpdate(_successCallbackFunction,_errorCallbackFunction);]]></example>
                </case>
                <case>
                    <description>
                        <p>See [{dialog.object}.instantUpdateCheckForUpdate method] for more information.</p>
                    </description>
                </case>
                <case build="5221">
                    <title nested="2">{dialog.object}.setChannel()</title>
                    <description>Sets the Instant Update channel in an mobile application published with Instant Updated enabled.</description>
                    <example code="js"><![CDATA[{dialog.object}.setChannel("Test");]]></example>
                </case>
                <case>
                    <description>See [{dialog.object}.setChannel method] for more information.</description>
                </case>
            </cases>
        </section>
        <section>
            <title>Videos</title>
            <videos>
                <title>Using the Instant Update Feature in a PhoneGap Application</title>
                <description>
                    <p>After you have created a PhoneGap application from a UX component, if you subsequently want to update the application you need to go through the entire release cycle again (i.e. submit to PhoneGap Build, then submit to the appropriate App Store). However, if you enable the Instant Update feature when you build your application in the first place, you can make certain types of updates to your application without having to go through the release cycle again.</p>
                    <p>Instant Update can be used as long as you are not changing the PhoneGap plugins used by your application, or the splash screens, etc. You can perform an Instant Update on an application as long as the changes to the application are limited to changes in the application's UX component.</p>
                    <p>In this video we show how the Instant Update feature operates.</p>
                </description>
                <date>2017-12-24</date>
                <video>
                    <name>Watch Video</name>
                    <link>https://www.viddler.com/v/6488985a</link>
                </video>
            </videos>
        </section>
    </sections>
    <links>
        <link link="ux component instantupdateuseautoupdate method">{dialog.object}.instantUpdateUseAutoUpdate method</link>
        <link link="ux component instantupdateuseautoupdate method">{dialog.object}.instantUpdateUseAutoUpdate()</link>
        <link link="ux component instantupdatecheckforupdate method">{dialog.object}.instantUpdateCheckForUpdate method</link>
        <link link="ux component instantupdaterefresh method">{dialog.object}.instantUpdateRefresh()</link>
        <link link="ux component setchannel method">{dialog.object}.setChannel method</link>
    </links>
</page>