<page build="4148">
    <shortlink>phonegap cli builder</shortlink>
    <topic>Cordova CLI Builder</topic>
    <description>Alpha Anywhere includes a CLI build option in the Cordova App Builder. Support is provided for Android builds on a Windows PC and iOS builds on a Mac.</description>
    <discussion>
        <p>For Android, the build scripts will build an Android APK file, installing all requested plugins. Options are provided to install the APK file on an Android device through the USB debug cable, by scanning a QR Code or the APK can be uploaded to the cloud so that it could be shared and installed by a group of test users. For iOS apps, the builder will package up all of the required app files into a zip file and generate a Bash shell script to build the Cordova App on a Mac.</p>
        <p>The Cordova CLI provides a command line interface for creating Cordova apps. It is supported on OSX and Windows development machines and requires the developer to install the Cordova CLI and the native app developer tools on the development machine.</p>
        <p>If you want to build iOS apps using the Cordova CLI, you will need a Mac with the Cordova CLI and Xcode installed. You will also need an Apple Developer Account.</p>
        <p>To develop Android apps on a Windows PC you will need to install the Java SE Development Kit (JDK), NodeJS, NPM, the Android SDK (or Android Studio) and the Cordova CLI.</p>
    </discussion>
    <sections>
        <section>
            <title>Windows PC Android SDK installation and setup for deploying Cordova Apps</title>
            <steps>
                <step>
                    <description>*[Install the Java Development Kit 8.0]*</description>
                    <cases>
                        <case>
                            <description>
                                a. See: *[extlink:http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html]*
                            </description>
                        </case>
                    </cases>
                </step>
                <step>
                    <description>
                        <p>*[Install Gradle]*</p>
                    </description>
                    <cases>
                        <case>
                            <description>
                                <p>a. See *[extlink:https://gradle.org/install/@https://gradle.org/install/]*</p>
                            </description>
                            <note>The minimum version of Gradle for Cordova app development is 6.5. The current version of Gradle as of March 2022, Version 7.4 has also been tested and can be used for Cordova app development.</note>
                        </case>
                    </cases>
                </step>
                <step>
                    <description>
                        <p>*[Install GIT]*</p>
                    </description>
                    <cases>
                        <case>
                            <description>
                                <p>a. Follow the installation instructions *[extlink:here@https://documentation.alphasoftware.com/documentation/index?search=webproject%20git%20integration#section1_Installing%20Git]*.</p>
                            </description>
                        </case>
                    </cases>
                </step>
                <step>
                    <description>*[Install Node.js]*</description>
                    <cases>
                        <case>
                            <description>a. Download the installer from *[extlink:https://nodejs.org/]*</description>
                            <note>Node.js needs to be added to the PATH environment variable, which is done by default.</note>
                        </case>
                        <case>
                            <description>
                                <p>b. To test the installation, open up a new command window and type:</p>
                                <p>
                                    <example><![CDATA[node --version]]></example>
                                </p>
                                <p>The version number should be displayed.</p>
                            </description>
                            <tip>
                                <p>You can open the command window from within Alpha Anywhere by clicking the [CMD] *[ui:Open Windows CMD Window]* button in the toolbar on the Web Projects Control Panel.</p>
                            </tip>
                        </case>
                    </cases>
                </step>
                <step>
                    <description>*[Install Cordova]*</description>
                    <cases>
                        <case>
                            <description>
                                <p>a. From a command window, enter the following:</p>
                                <p>
                                    <example><![CDATA[npm install -g cordova@10.0.0]]></example>
                                </p>
                                <p>b. To verify proper installation, from the command window enter:</p>
                                <p>
                                    <example><![CDATA[cordova -v]]></example>
                                </p>
                                <p>The *[code:cordova -v]* command displays the version of Cordova that is installed.</p>
                            </description>
                        </case>
                    </cases>
                </step>
                <step>
                    <description>*[Install Android Studio]*</description>
                    <cases>
                        <case>
                            <description>
                                a. See: *[extlink:https://developer.android.com/studio/install.html]*
                            </description>
                        </case>
                        <case>
                            <description>
                                <p>b. After installing Android Studio, you must install the packages for the the API you wish to target. Locate the SDK Manager icon in the upper right-hand corner of Android Studio.</p>
                            </description>
                            <figure>
                                <link>images/androidSDK1.png</link>
                            </figure>
                        </case>
                        <case>
                            <description>
                                <p>Select the target platforms on the *[ui:SDK Platforms]* tab and click OK. If you plan to deploy your app to Google Play, make sure you meet *[extlink:Google Play's Requirements@https://developer.android.com/distribute/best-practices/develop/target-sdk]* for the minimum SDK version.</p>
                            </description>
                            <figure>
                                <link>images/adroidSDK2.png</link>
                            </figure>
                        </case>
                        <case>
                            <description>
                                <p>See Android Studio's *[extlink:Update the IDE and SDK Tools@https://developer.android.com/studio/intro/update]* help article for more information.</p>
                            </description>
                        </case>
                        <case>
                            <description>
                                <p>Currently Cordova requires Android SDK Build Tools version 30.0.3 which is not the latest release and is not installed by default. To install the Android SDK Build Tools version 30.0.3, from within Android Studio click on Tools | SDK Tools and click on the Android SDK Tools selection. The status may indicate and Update is available, however the update will most likely NOT work with Cordova. Check the Show Package Details box in the lower right corner, this will display all of the available developer tools.</p>
                            </description>
                            <figure>
                                <link>images/sdktools_1.png</link>
                            </figure>
                        </case>
                        <case>
                            <description>
                                <p>Check the selection for Android SDK Build Tools 30.0.3. This is the version required for Cordova project builds. Once the Android SDK Build Tools version 30.0.3 are installed, you will be able to build Android Cordova apps with the Alpha Cordova CLI Builder Genie and Android Studio.</p>
                            </description>
                            <figure>
                                <link>images/sdktools_2.png</link>
                            </figure>
                        </case>
                    </cases>
                </step>
                <step>
                    <description>*[Set the Environment Variables]*</description>
                    <cases>
                        <case>
                            <description>
                                The Cordova CLI will attempt to set these variables for you but in certain cases they need to be set manually. In Windows, the steps to set the environment variables are dependent on the installed version of Windows. You must close and open any command prompt windows after making the changes for the changes to take effect.
                            </description>
                            <steps>
                                <step>
                                    <description>Click on the *[Start Menu]* in the lower left corner of the desktop.</description>
                                </step>
                                <step>
                                    <description>In the search bar, search for *[Environment Variables]* and select *[Edit the System Environment Variables]*.</description>
                                </step>
                                <step>
                                    <description>In the window that appears, click the *[Environment Variables]* button.</description>
                                    <figure>
                                        <link>images/env_vars1.PNG</link>
                                    </figure>
                                </step>
                                <step>
                                    <description>Click *[New]*... and enter the variable name and value. </description>
                                    <figure>
                                        <link>images/env_vars1b.PNG</link>
                                    </figure>
                                </step>
                                <step>
                                    <description>Set the *[JAVA_HOME]* environment variable to the location of your JDK installation.</description>
                                </step>
                                <step>
                                    <description>Set the *[ANDROID_SDK_ROOT]* environment variable to the location of your Android SDK installation.</description>
                                    <figure>
                                        <link>images/env_vars2.PNG</link>
                                    </figure>
                                </step>
                            </steps>
                        </case>
                    </cases>
                </step>
                <step>
                    <description>*[Edit the System Path]*</description>
                    <cases>
                        <case>
                            <steps>
                                <step>
                                    <description>Select the *[Path]* variable and press *[Edit]*.</description>
                                    <figure>
                                        <link>images/env_vars3.PNG</link>
                                    </figure>
                                </step>
                                <step>
                                    <description>*[Add]* the following entries:</description>
                                    <cases>
                                        <case>
                                            <steps>
                                                <step>
                                                    <description> %JAVA_HOME%\bin</description>
                                                </step>
                                                <step>
                                                    <description>%ANDROID_SDK_ROOT%\platform-tools</description>
                                                </step>
                                                <step>
                                                    <description>
                                                        <p>The path to the location of the "bin" directory for Gradle. The bin directory will be found in the folder where Gradle was installed. For example, "C:\Gradle\gradle-6.3\bin"</p>
                                                    </description>
                                                </step>
                                            </steps>
                                        </case>
                                    </cases>
                                    <figure>
                                        <link>images/env_vars4.PNG</link>
                                    </figure>
                                </step>
                            </steps>
                        </case>
                    </cases>
                </step>
            </steps>
        </section>
        <section>
            <title>Mac OSX Cordova Installation</title>
            <steps>
                <step>
                    <description>*[Install Xcode]* (if not previously installed)</description>
                    <cases>
                        <case>
                            <steps>
                                <step>
                                    <description>See: *[extlink:https://developer.apple.com/xcode/]* and click the *[Download]* button.</description>
                                </step>
                            </steps>
                        </case>
                    </cases>
                </step>
                <step>
                    <description>*[Update iOS-deploy]*</description>
                    <cases>
                        <case>
                            <description>
                                <p>The latest version of iOS-deploy is required if you plan on using the Xcode CLI tools to build and install the app on a simulator or a device.</p>
                                <p>To update iOS-deploy, open a terminal and enter:</p>
                                <p>
                                    <example><![CDATA[sudo npm install -g ios-deploy@latest --force]]></example>
                                </p>
                            </description>
                        </case>
                    </cases>
                </step>
                <step>
                    <description>*[Install Node.js]*</description>
                    <cases>
                        <case>
                            <description>a. Download the installer from *[extlink:https://nodejs.org/]*</description>
                            <note>*[/usr/local/bin]* needs to be added to the PATH environment variable, which should done by default. To verify, enter echo $PATH from Terminal.</note>
                        </case>
                        <case>
                            <description>To test the installation, from Terminal, type *[node --version]*. The version number should be displayed.</description>
                        </case>
                    </cases>
                </step>
                <step>
                    <description>*[Install Cordova]*</description>
                    <cases>
                        <case>
                            <description>a. From a Terminal window, enter *[npm install -g cordova@10.0.0]*.</description>
                        </case>
                        <case>
                            <description>b. To verify proper installation, from a Terminal window enter *[cordova -v]*, the installed Cordova version will be displayed.</description>
                        </case>
                    </cases>
                </step>
            </steps>
        </section>
        <section>
            <title>Using the Cordova CLI Builder</title>
            <description>
                <p>From the Cordova App Builder, *[it is best to start a new Cordova Project]* to make sure you are using the latest project template files. These files change from time to time based on device operating system revisions or revisions to Cordova. *[Set the App Build Target to CLI]*.</p>
            </description>
            <figure>
                <link>images/pg_cli1.PNG</link>
            </figure>
        </section>
        <section>
            <description>
                <p>The options within the Cordova App Builder will be updated to reflect the options that are applicable to a CLI build. *[Make sure to specify the Application ID properly]*. The Application ID uses reverse domain naming notation and the CLI app folder created will use the app name specified in this string. For example, if the application id is com.alphasoftware.test1 then the CLI project folder created will be test1. Spaces are not allowed and the name will automatically be in lower case, per Android conventions.</p>
                <p>The Cordova version that is used for the CLI build is dictated by the installed Cordova CLI version. *[To update the Cordova CLI version]* to the latest release, from a Command window, enter *[npm install -g cordova]*. Please note that installing the latest release of Cordova may cause build issues. Specifically Cordova version 11 is known to cause Android Build problems. It installs a new version of the Android Build Tools that is incompatible with Cordova Android.</p>
                <p>Configure the rest of the options for your application.</p>
                <p>You can select a custom app icon (remember to use a 512px x 512px image) and splash screen or launch image. If nothing is specified a default icon and splash-screen will be used.</p>
                <p>Specify all of the required required plugins for your application. If you are using any plugins that require you to insert a hook, you will need to build the CLI version of the app and then edit the generated source code to include the hook per the plugin documentation. You can then run the Cordova CLI Builder again and update the app.</p>
                <p>Once all of the options have been set, select the *[Save / Launch Cordova CLI Builder]* button. The Cordova CLI Project Builder Window will appear.</p>
            </description>
            <figure>
                <link>images/pg_cli2.PNG</link>
            </figure>
        </section>
        <section>
            <title>The Cordova CLI Builder</title>
            <figure>
                <link>images/pg_cli3.PNG</link>
            </figure>
        </section>
        <section>
            <title>Build Specifications</title>
            <description>
                <p>*[Step 1 is to specify the Target Project Build Folder]*. This will be the root folder for the CLI generated files. If you have specified an Android build, a sub-folder will be created with the name of the app ID. If you have specified an iOS build, an iOS files sub-folder will be created with a naming convention of appid_iOS_Files. The iOS files generated need to be transferred to a Mac to build an iOS App</p>
                <p>*[Generate Android Build]*</p>
                <p>Check this option to build a Cordova CLI Android project. Once checked, numerous other Android project related options will appear.</p>
                <p>*[Generate iOS Build]*</p>
                <p>Check this option to package up all of the app files and generate a BASH script for building a Cordova project on a Mac.</p>
            </description>
        </section>
        <section>
            <title>Android Build Options</title>
            <figure>
                <link>images/pg_cli4.PNG</link>
            </figure>
            <description>
                <p>*[Update Existing App]* If checked, and an app with the same app id exists within the target project build folder, then only the /www folder will be updated. This allows you to make changes to the base component and update the app quickly. If this option is unchecked and an existing app with the same app id exists within the target project build folder, then all of the app files are deleted and a new project is built. This includes the installation of all plugins.</p>
                <p>*[Update All Plugins]* Enable this option if the Update Existing App option is checked and you have added a new plugin to the project.</p>
                <p>*[Include/Update Custom App Icon or Launch Image]* If you have generated and included a custom icon or a custom launch image (splash screen) then this option needs to be enabled at least once to copy the icon and launch images to the appropriate folders within the Cordova Android platform specific folders. This only needs to be done once so if you are updating an existing app, you can save time by disabling this option on subsequent updates.</p>
                <p>*[Android Build Type]* The Build Type can be either a Debug Build or a Production Build. For development and testing, use a Debug build. When you are ready to deploy the app through either a the Google Play Store or through an Enterprise Mobile App Manager, then use a Production Build. Production Builds must be signed with the appropriate developer credentials. When you select a Production Build, the  Production Android App Credentials category will be displayed.</p>
            </description>
        </section>
        <section>
            <title>Production Android App Credentials</title>
            <figure>
                <link>images/pg_cli5.PNG</link>
            </figure>
            <description>
                <p>First you should read the Android app signing requirements. See: See: *[extlink:https://developer.android.com/studio/publish/app-signing.html]*</p>
                <p>*[Keystore]* Select the binary file that holds the set of keys.</p>
                <p>*[Keystore Password]* Password to the keystore.</p>
                <p>*[Alias]* The ID specifying the private key used for signing the app.</p>
                <p>*[Password]* Password for the private key specified.</p>
                <p>*[Keystore Type]* Default is auto-detect which is based on the file extension. You can also select the specific pkcs12 or jks extension.</p>
            </description>
        </section>
        <section>
            <title>Post APK Build Behavior</title>
            <figure>
                <link>images/pg_cli6.PNG</link>
            </figure>
            <description>
                <p>The options in this category determine the actions that take place after the Android Cordova project is completed and the APK file is generated.</p>
                <p>*[Show QR Code To Install APK With Scanner]* If you would like to install the app on an Android device, this option can be enabled to present a QR Code that can be scanned to install the APK file. The generated APK file will be copied to the development server (which must be running) and stored in a folder called apk_files/appID (the name of the app).</p>
                <p>*[Install On Device Or Emulator]* This option allows the app to be installed on an emulator (if one has been installed and configured) or on an actual device (if USB debugging has been enabled and the Windows device drivers are working properly). Android devices can be very tricky to setup with Windows due to the numerous device drivers available and the large variety of Android devices and OS's.  </p>
                <p>*[Upload APK To Cloud Storage]* If you would like to upload the APK file to S3 Cloud storage to allow easy sharing of the APK file, enable this option. The Cloud Storage Properties category will be displayed when this option is enabled.</p>
            </description>
        </section>
        <section>
            <title>Cloud Storage Properties</title>
            <figure>
                <link>images/pg_cli7.PNG</link>
            </figure>
            <description>
                <p>*[Method for specifying credentials]* You can specify the cloud storage credentials by selecting a Named Storage Connection String or Explicitly providing the credentials. If you select the Named Storage Connection String Option, the Storage Connection string property will appear, allowing you to select a previously defined storage connection string.</p>
                <p>*[Storage connection string]* This will be displayed if the named Storage Connection String option is selected above. The drop-down will allow selection of any of the previously defined storage connection strings.</p>
                <p>*[Access key]* Displayed when the Explicit option for specifying credentials is selected. Enter your access key.</p>
                <p>*[Secret]* Displayed when the Explicit option for specifying credentials is selected. Enter your secret key.</p>
                <p>*[Bucket]* Displayed when the Explicit option for specifying credentials is selected. Enter the bucket name.</p>
            </description>
        </section>
        <section>
            <title>Generating Build Bundles for New Google Play Store Submission</title>
            <description>
                <p>If you are planning to submit your app to the Google Play Store, you must submit an *[extlink:Android App Bundle@https://developer.android.com/guide/app-bundle]*. As of August 2021, new app submissions to the Google Play store must include Android App Bundles. This requirement only applies to new apps in the Google Play store.</p>
                <p>App bundles are created using Android studio. Open the Android Cordova Project in Android Studio for your application and select Build &gt; Build Bundle(s)/APK(s) &gt; Build Bundle(s) from the Android Studio menu.</p>
            </description>
            <figure>
                <title>Android Studio Build Bundle menu</title>
                <alt>Android Studio Build Bundle menu</alt>
                <link>images/AndroidStudioBuildBundle.png</link>
            </figure>
        </section>
        <section>
            <description>
                <p>The Android Cordova Project for your app can be found in the *[em:projectName]*/platforms/android directory in the *[ui:Target Project Build Folder]*. To open the project, select File &gt; Open from the Android Studio menu. Navigate to the *[ui:Target Project Build Folder]*, locate your project, then select the *[em:projectName]*/platforms/android directory.</p>
            </description>
            <figure>
                <title>Android Studio Open File or Project dialog</title>
                <alt>Android Studio Open File or Project dialog</alt>
                <link>images/AndroidStudioOpenFile.png</link>
            </figure>
        </section>
        <section>
            <description>
                <p>Refer to *[extlink:Google Play Play Policies@https://developer.android.com/distribute/play-policies]* for more details about Google Play store app submission requirements.</p>
            </description>
        </section>
        <section>
            <title>Android Studio Gradle Plugin</title>
            <description>
                <p>Android apps may be built with Android Studio. To do so, launch Android Studio and open the Platforms/Android folder in the driectory that contains the Cordova project files.</p>
                <p>When opening the project, Android Studio may display a prompt, notifying you of a recommended update to the Android Gradle Plugin.</p>
            </description>
            <figure>
                <link>images/android-gradle-update-1.jpg</link>
            </figure>
        </section>
        <section>
            <description>
                <p>The Android Gradle Plugin (not to be confused with Gradle) is an Android Studio Plugin that provides additional functionality to Gradle when building Android apps.</p>
                <p>The Android Gradle Plugin that works with current Cordova projects is 4.x.x. and it is installed by the Cordova CLI builder. Newer versions will not work. As such, *[do not upgrade the Android Gradle Plugin.]*</p>
                <p>To disable the prompt to upgrade the Android Gradle plugin in the project, click on the "upgraded" link and click the "Don't remind me again for this project" button.</p>
            </description>
            <figure>
                <link>images/android-gradle-update-2.jpg</link>
            </figure>
        </section>
        <section>
            <title>iOS Build Options</title>
            <description>
                <p>You now have the option of generating 2 different types of build scripts with the iOS app builder, Xcode or Xcode CLI. </p>
                <p>*[An Xcode Build]* requires you to open the generated app in Xcode to build the app. </p>
                <p>*[An Xcode CLI Build]* uses the Xcode command line (CLI) tools to build, automatically sign and optionally deploy the app to a device or simulator.</p>
            </description>
            <figure>
                <link>images/ios_props.png</link>
            </figure>
        </section>
        <section>
            <description>
                <p>*[Build Target:]* Options are Xcode or Xcode CLI. If you would like to use the Xcode CLI tools you must setup Xcode to automatically manage signing and provisioning. This allows Xcode to create and update profiles, ID's and certificates. If Xcode CLI is selected, a number of options are displayed.</p>
                <p>*[For Xcode CLI Builds]* the following options will be presented:</p>
                <p>*[iOS Build Type:]* For development, select debug. If you are creating an app for submission to the app store, select release.</p>
                <p>*[Install and Run App After Build:]* Check this option if you would like to install and run the app on a device or a simulator after the build is complete.</p>
                <p>*[Deployment:]* If the install and run option is checked, you have the option to deploy the app to a simulator or an iOS device that is connected your Mac.</p>
                <p>*[Simulator Requested:]* If you are deploying to a simulator, you have the option to select the simulator requested. Make sure the selected simulator is installed and listed in Xcode.</p>
                <p>*[Code Signing Identity:]* The default value is iPhone Developer which is used by convention. This value can be changed as required. </p>
                <p>*[Development Team:]* This value is listed in the upper right hand corner of the Apple Developer Certificates, Identifiers and Profiles page. The area is highlighted in red below. See *[extlink:https://developer.apple.com]* to create or sign in to your Apple Developer account.</p>
            </description>
            <figure>
                <link>images/apple_dev_cip.png</link>
            </figure>
        </section>
        <section>
            <description>
                <p>*[Package Type:]* Select development, enterprise, ad-hoc or app store based on your IPA package type requirements.</p>
            </description>
        </section>
        <section>
            <description>
                <p>Since iOS builds must be done on a Mac with Xcode installed, the Cordova CLI Builder will package all of the required application files into a zip file (all files and sub-directories contained in the Cordova project /www directory) and a Bash script will be generated (called build.sh) that will build the Cordova project on a Mac. All required plugins will be installed.</p>
                <p>The files will be generated in the specified project directory with the following naming convention: *[appID_iOS_Files]* (appID will be replaced with your app ID).</p>
                <p>Once these files have been generated, copy them to your Mac and enter *[bash build.sh]* from a Terminal window that is opened to whatever folder you would like to use for this Cordova project. The script will build the project within this folder. </p>
            </description>
        </section>
        <section>
            <title>Xcode CLI Builds</title>
            <description>
                <p> If you would like to use the Xcode CLI builds you must setup at least one Xcode project to use automatic provisioning. Xcode will "remember" this setting and use automatic provisioning for any future Xcode CLI builds. To do so, open the platforms/ios/appID.xcodeproj with Xcode and in the Signing and Capabilities tab, check Automatically manage signing. Make sure the Provisioning Profile is set to Xcode Managed Profile. Do this for Debug and Release builds. You will now be able to successfully build and install iOS apps using the Xcode CLI tools. This bypasses the requirement to open and build the app in Xcode.</p>
                <p>For a *[video overview]* on using the Xcode CLI builder see *[extlink:https://youtu.be/qzngU4SvC74]*</p>
            </description>
            <figure>
                <link>images/xcode_auto_provision.png</link>
            </figure>
        </section>
        <section>
            <title>For Xcode Builds</title>
            <description>
                <p>Once the project files are created, the Xcode project may be opened in Xcode by double clicking on the appID.xcodeproj file that is in the platforms/ios folder (again, appID will be replaced by your app id).</p>
                <p>You can now build the project in Xcode and install, run and test on the iOS simulator or any iOS device provisioned for development on your Mac.</p>
            </description>
            <cases>
                <case>
                    <description>*[Updating an existing Xcode project]* If the Xcode project exists and you have made a change to any of the app files within Alpha Anywhere (such as modifying the base component), run the CLI builder again and copy the zip file over to your Mac and install the files into the platforms/ios/www folder, overwriting the existing files. You do not need to run the bash build.sh script a second time, unless you have included any new plugins.</description>
                </case>
            </cases>
            <description>
                <p>If you have included any new plugins you can either delete the existing Xcode project and create a new project by running the bash build.sh script again or you can install the plugins with the Cordova CLI command *[cordova plugins install nameOfPlugin]* entered from the project root folder in Terminal.</p>
            </description>
        </section>
        <section>
            <title>For More Information</title>
            <description>
                <p>*[Cordova Android Platform Guide]*</p>
                <p>For more information, review the Cordova Android Platform Guide.</p>
                <p>See: *[extlink:https://cordova.apache.org/docs/en/latest/guide/platforms/android/]*</p>
                <p>*[Official Cordova Documentation]*</p>
                <p>For more information on Cordova CLI development, review the official Cordova Documentation.</p>
                <p>See: *[extlink:https://cordova.apache.org/docs/en/latest/guide/overview/index.html]*</p>
            </description>
        </section>
    </sections>
    <links>
        <link href="/images/$$device.computer.png">CMD</link>
    </links>
</page>
