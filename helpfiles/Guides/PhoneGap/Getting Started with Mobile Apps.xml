<page build="0">
    <shortlink>Getting Started with PhoneGap</shortlink>
    <topic>Getting Started with Mobile Apps</topic>
    <description>Building native mobile applications with Alpha Anywhere</description>
    <sections>
        <section>
            <title>Overview</title>
            <description>
                <p>Alpha Anywhere is a comprehensive HTML5 development framework that on it's own can build powerful mobile HTML5 web applications that look and feel like native apps. Once created, a web application on a mobile device is launched within the web browser that is supplied with the device. iOS devices typically use Mobile Safari, while Android devices can use a variety of browsers with Chrome or some derivative of Chrome typically being the native browser. Since the app is running within the browser, it is limited to the capabilities that the browser exposes.</p>
                <p>But suppose you want to access some of the native features of the phone or tablet. For example, let's say you want to allow your users to access a bar code scanner, which incorporates the devices camera and some special image processing software, that sits locally on the device, that can  decipher a QR Code or a barcode and send that encoded information back to your web application for a possible database lookup or submission to a web service to lookup specifics on a book or an inventory part. You can do that with Cordova and that is just the tip of the iceberg.</p>
                <p>Cordova allows you to access ALL of the functionality of the mobile device. You are really only limited by your imagination and skills.</p>
                <p>Cordova includes a large set of core and third party plugins that expose all sorts of native functionality. A variety of the plugins support iOS and Android so that you can target a wide range of mobile phones and tablets.</p>
                <p>And best of all, Cordova allows you to build true native apps for iOS and Android devices, apps that you can easily distribute through the numerous app stores.</p>
            </description>
        </section>
        <section>
            <title>An Overview Of The Development Process with Cordova and Alpha Anywhere</title>
            <description>You will use the Alpha Anywhere IDE to develop a base UX component that may contain all of the code and data that is required for your Cordova application, or you may choose to create a base UX component that loads data and additional components from a remote server (assuming the phone or tablet has Internet access).</description>
        </section>
        <section>
            <description>When you are ready to convert your base UX component into a Cordova app, the integrated Cordova App Builder is used from within the Alpha Anywhere IDE to: </description>
            <list bullet="true">
                <item>
                    <name>Generate the Cordova app</name>
                </item>
                <item>
                    <name>Generate all required Cordova configuration options, including the addition of required Cordova plugins </name>
                </item>
                <item>
                    <name>Convert the UX Component into a set of files that contain all of the standalone HTML, CSS, JavaScript and additional assets (images, etc.) required to build a single page Cordova app that is installed and loaded locally from the device. This ensures that the initial page can provide a fast, workable and pleasant user experience, even when the device is offline.</name>
                </item>
                <item>
                    <name>Package the content so that it can be uploaded to the [Ionic Appflow] build service or built using [Cordova CLI].</name>
                </item>
            </list>
        </section>
        <section>
            <description>Once the app is built, you can:</description>
            <list bullet="true">
                <item>
                    <name>Install the native app for testing on iOS and Android devices</name>
                </item>
            </list>
        </section>
        <section>
            <title>Choosing a Build Platform</title>
            <description>
                <p>Alpha Anywhere offers several solutions for building and distributing native mobile apps.</p>
                <p>
                    <list>
                        <item>
                            <name-title>Build Option</name-title>
                            <description-title>Description</description-title>
                        </item>
                        <item>
                            <name>[Ionic Appflow]</name>
                            <description>
                                <p>Ionic Appflow is a cloud-based service that allows you to build Cordova apps for iOS or Android. Ionic Appflow is easy to use and does not require any extra hardware (i.e., a Mac.)</p>
                                <p>To build iOS or Android apps, developers publish application updates to a GitHub project connected to Ionic Appflow. Ionic Appflow automatically creates a new version of your application when a change is detected. When your app is ready to ship, you can publish directly to the Google Play and Apple App stores.</p>
                                <p>Alpha Anywhere works with Ionic Appflow by generating the application build files to publish GitHub. You will need a GitHub account and, at a minimum, a paid Ionic Appflow Launch account.</p>
                                <p>See [Ionic Appflow] for more information.</p>
                            </description>
                        </item>
                        <item>
                            <name>[Cordova CLI]</name>
                            <description>
                                <p>Cordova CLI provides a command-line interface for creating iOS and Android applications. It is supported on Mac and Windows and requires installing Cordova CLI and the native app development tools for your target platform(s).</p>
                                <p>Alpha Anywhere works with Cordova CLI to create an Xcode or Android Studio project used to build a native mobile application for iOS or Android, respectively. Alpha Anywhere packages your application files and a script that describes the required plugins and resources needed to build the mobile app. The script is run with Cordova CLI to create the Xcode or Android Studio project. The generated project can then be opened in Xcode or Android Studio to build, test, and deploy your application to the iOS or Android app stores.</p>
                                <p>Cordova CLI offers the most flexibility for building cross-platform mobile iOS and Android applications. While Ionic Appflow is built on Apache Cordova, the service only allow you to test your app on a phone or tablet. When created with Cordova CLI, you gain access to device emulators and a wide range of tools for testing your iOS and Android applications before deploying them to physical devices. It takes a little time to become familiar with the Cordova CLI process, but it's worth the effort.</p>
                                <p>See [Cordova CLI] for more information.</p>
                            </description>
                        </item>
                        <item>
                            <name>[Alpha Launch]</name>
                            <description>
                                <p>If building native apps seems daunting, consider starting with Alpha Launch. Alpha Launch is a free application available in both the App Store and Google Play that you can use to distribute your apps. Apps distributed using Alpha Launch run as native mobile apps without the need for extra accounts or tools like Android Studio and Xcode.</p>
                                <p>See [Alpha Launch] to get started with Alpha Launch.</p>
                            </description>
                        </item>
                    </list>
                </p>
            </description>
        </section>
        <section>
            <title>Building your first app with Alpha Anywhere</title>
            <description>It is assumed that you are familiar with Alpha Anywhere and know how to build a UX component for a mobile device. You should already be familiar with the concepts of a Panel Navigator, Panels, Buttons controls, etc. If you are not familiar with these terms, it would be best for you to work through a number of the tutorials available prior to attempting to build Cordova apps with Alpha Anywhere.</description>
            <cases>
                <case>
                    <title nested="2">Building a Simple Test App</title>
                    <description>To verify you've got everything setup and working properly, we're going to build a very simple Cordova app that contains a Panel and a button that when tapped, initiates a native beep tone. This will work on both Android and iOS devices. We will build the test UX component, generate a Cordova app from that component, and finally, install the app on an Android device (or Android emulator).</description>
                    <note>Installation on an iOS device requires that you setup an Apple iOS Developer Account.</note>
                </case>
                <case>
                    <title nested="2">Building the Test UX Component</title>
                    <description>
                        <p>In Alpha Anywhere, from the Web Projects Control Panel, click New &gt; Web Component &gt; UX &gt; Global Templates &gt; Panel Card With Header, Title &amp; Buttons.</p>
                    </description>
                </case>
                <case>
                    <description>On the Controls pane, delete the Panel Header Buttons and Tab Stop Controls, leave the Static Text control, and change the static text property to Cordova Test.</description>
                    <figure>
                        <link>images/img7.png</link>
                        <title>Delete Panel Header Buttons and Tab Stops</title>
                    </figure>
                </case>
                <case>
                    <description>
                        <p>Set the Panel Header Alignment to Center.</p>
                        <p>Add a Container below the Panel Header.</p>
                    </description>
                    <figure>
                        <link>images/img8.png</link>
                    </figure>
                </case>
                <case>
                    <description>
                        <p>Set the Container alignment to Center.</p>
                        <p>Set the Container width to 100%.</p>
                        <p>From Other Controls, select a Button and insert the button into the Container.</p>
                        <p>Set the Button Text property to Native Beep.</p>
                    </description>
                    <figure>
                        <link>images/img9.png</link>
                    </figure>
                </case>
                <case>
                    <description>
                        <p>Set the Button Width to 150px.</p>
                        <p>Click on Live Preview. Your UX component should look like the image below.</p>
                    </description>
                    <figure>
                        <link>images/img10.png</link>
                    </figure>
                </case>
                <case>
                    <description>
                        <p>Switch back to design mode and select the button control. In the property grid, find the JavaScript Touch event for click and select. Next add new action to assign an Action JavaScript to the button.</p>
                        <p>Pick the PhoneGap category on the left column and the PhoneGap - Notification Action on the right column.</p>
                    </description>
                    <note>
                        <p>Alpha Anywhere previously integrated with PhoneGap Build, which Adobe shut down on October 1, 2020. PhoneGap was built on top of Apache Cordova, and all features named for the now defunct build service work with Cordova apps.</p>
                    </note>
                    <figure>
                        <link>images/img11.png</link>
                    </figure>
                </case>
                <case>
                    <description>
                        <p>Select the Beep Notification Type from the combo box. Leave the beep count parameter at 1. (Note: this parameter is ignored on iOS devices.)</p>
                    </description>
                    <figure>
                        <link>images/img12.png</link>
                    </figure>
                </case>
                <case>
                    <description>Once you click OK you can view the JavaScript generated by the Action JavaScript builder.</description>
                    <figure>
                        <link>images/img13.png</link>
                    </figure>
                </case>
                <case>
                    <description>
                        <p>If you open the Cordova documentation site at *[extlink:https://cordova.apache.org/docs@https://cordova.apache.org/docs]* under the Reference &gt; Plugin APIs &gt; Dialogs, navigator.notification.beep you will see the sample code is quite similar to the Action JavaScript generated code. If you are comfortable with JavaScript, you can look through the Cordova documentation and use the samples to add your own JavaScript to any button or event in your own UX components.</p>
                    </description>
                    <figure>
                        <link>images/img14.png</link>
                    </figure>
                </case>
                <case>
                    <description>
                        <p>Save the component and name it Cordova1. We will use this component within the Alpha Anywhere integrated Cordova App Builder as the basis for the native app which will be installed on the phone or tablet.</p>
                        <p>You can now close the UX component builder and we will move on to generate the Cordova application within your web projects folder.</p>
                    </description>
                </case>
                <case>
                    <title nested="2">Using The Cordova App Builder</title>
                    <figure>
                        <link>images/img15.png</link>
                    </figure>
                </case>
                <case>
                    <description>
                        <p>On the Web Projects Toolbar, click the Cordova button, this will launch the Cordova App Builder.</p>
                    </description>
                    <figure>
                        <link>images/img16.png</link>
                    </figure>
                </case>
                <case>
                    <description>
                        <p>The Cordova App Builder contains a large number of options and properties for Cordova app customization. Within the Cordova App Builder, you select the App Build Target, target platform(s) to build, numerous properties for the app name, app description, app version, author, etc. You also select the Cordova plugins to include in the project and many other options. In this simple application, we are only going to be using a few of the many options available.</p>
                        <p>Notice the Project Type property is New, indicating that there are no pre-existing Cordova assets in the Web Projects Directory. If a previous project existed, the Project Type would indicate Existing and the builder would skip the step of generating the Cordova scaffold application, which is created in a PhoneGapProjects folder in the Web Project Directory.</p>
                        <p>In the Cordova Project Type, choose your desired App Build Target: CLI (Cordova CLI) or Ionic Appflow.</p>
                        <p>In the Cordova Project Platforms section, check the Android box. This triggers an Android project build. It also enables a set of Android specific options within the Cordova App Builder. This guide will demonstrate configuring and building an Android project since Android does not require the submission of developer credentials to install the app on a device.</p>
                    </description>
                </case>
                <case>
                    <description>
                        <p>Under the Alpha Cordova Project Build Options, select the Initial UX Component that was previously built, Cordova1(UX). Once selected, the Generate Cordova Asset Files checkbox will be automatically checked. Leave it checked because we want to generate the Cordova app from the Cordova1 UX component.</p>
                    </description>
                    <figure>
                        <link>images/img17.png</link>
                    </figure>
                </case>
                <case>
                    <title nested="2">App Icon and Splash Screens</title>
                    <figure>
                        <link>images/img18.png</link>
                    </figure>
                </case>
                <case>
                    <description>
                        <p>Check Generate Image Resource Files and select the Alpha app-icon-1024x1024.png for the Master Icon from the PhoneGap/appIcons folder, included in the Alpha Anywhere executable directory.</p>
                        <p>The Cordova App Builder will generate all of the required app icons for the targeted platforms at all required sizes and resolutions for each. The app icon is the icon that is installed and displayed on the devices home screen.</p>
                    </description>
                    <figure>
                        <link>images/img19.png</link>
                    </figure>
                </case>
                <case>
                    <description>
                        <p>When building your own app icons, you should build the largest size that is required by all of the targeted devices. A 1024px x 1024px icon is the largest size required for iOS and Android devices. If you were building for Windows Phone 8, a 173px x 173px icon would be best.</p>
                        <p>Since Alpha Anywhere is generating all of the required icons from the one icon selected, it's best to generate images that are smaller in size from a larger icon as this preserves the image resolution, eliminating pixelation of the smaller image. The same is true when generating the app splash screens, which you can leave blank for this test application.</p>
                        <p>In the App Options section, set the Application ID to the reverse domain name of your app.</p>
                    </description>
                    <figure>
                        <link>images/img20.png</link>
                    </figure>
                </case>
                <case>
                    <description>
                        <p>In this test app we've used com.alphasoftware.myApp but you can use whatever you would like. If you plan to distribute your app through an app store, the App Id must match the bundle identifier of your application.</p>
                        <p>In this example, the Allow Access Origin property is set to * which will allow your app to access all other URL's on the Internet. The app doesn't actually require setting the Allow Access Origin property, however it is a common requirement to load data from other web services, the Alpha Anywhere Application Server, or possibly to load a web page in the inApp Web Browser. If the URL is not specified in the Allowed Access Origin Property, the request will be blocked. This is a common point of failure so you need to be aware of this setting from the first app you publish.</p>
                    </description>
                </case>
                <case>
                    <title nested="2">Android Only Section</title>
                    <description>
                        <p>In the Android Only section, check the Enable Notification Features. When the App is installed on an Android device, the user will be made aware of the features the app requires and they may choose to allow or abort the app installation.</p>
                    </description>
                    <figure>
                        <link>images/img21.png</link>
                    </figure>
                </case>
                <case>
                    <title nested="2">Required Core Plugins Section</title>
                    <description>
                        <p>All native functionality is handled through plugins, even the core Cordova functions. Our app only uses the Notification plugin (it beeps), so make sure the Notification plugin is checked.</p>
                    </description>
                </case>
                <case>
                    <title nested="2">Build your App</title>
                    <description>
                        <p>At this point, enough information has been provided to build the Cordova application. Click Save &amp; Launch Cordova CLI Builder (if Cordova CLI is selected) or Save &amp; Build for Ionic Appflow Builder (if Ionic Appflow is selected) and the Cordova App Builder will create the application (if it did not previously exist), generate the required build scripts, and package up all application resources so it can be build using the desired build platform.</p>
                        <p>Follow the instructions in [Cordova CLI] or [Ionic Appflow] for building your app.</p>
                    </description>
                    <figure>
                        <title>Save &amp; Launch Cordova CLI Builder</title>
                        <alt></alt>
                        <link>images/img22.png</link>
                    </figure>
                </case>
                <case>
                    <figure>
                        <title>Save &amp; Build for Ionic Appflow</title>
                        <alt></alt>
                        <link>images/img22b.png</link>
                    </figure>
                </case>
            </cases>
        </section>
        <section>
            <title nested="2">Testing your App</title>
            <description>
                <p>Here we see the test app successfully loaded on a </p>
                <p>Tap the Native Beep button and you should hear a beep tone.</p>
                <p>Congratulations, you've just successfully built and installed a native mobile app!</p>
            </description>
            <figure>
                <link>images/img30.png</link>
            </figure>
        </section>
        <section>
            <title>iOS Provisioning</title>
            <description>
                <p>If you want to build apps for the iPhone or iPad, you will need an Apple Developer Certificate and a Provisioning Profile to install the signed IPA file on an iOS device. You need 3 things:</p>
                <p>
                    <list bullet="true">
                        <item>
                            <name>A Developer Certificate with private key (*.p12)</name>
                        </item>
                        <item>
                            <name>A provisioning profile (*.mobileprovision)</name>
                        </item>
                        <item>
                            <name>The password for the private key</name>
                        </item>
                    </list>
                </p>
                <p>The Developer Certificate is added to the Mac's keychain using Keychain Access. It is used to digitally sign your code.</p>
                <p>The Provisioning Profile is a file that will exist on the development device(s) and the Mac. It will reference a Developer Certificate, an App ID (a development profile can use a wildcard) and a list of device ID's that the app can be installed on for testing.</p>
            </description>
            <cases>
                <case>
                    <title nested="2">Generating Certificates for Ionic Appflow</title>
                    <description>
                        <p>We recommend using the [Cordova Builder iOS Certificate Genie] to generate the required certificates if you are using [Ionic Appflow]. The genie does not require owning a Mac. It does require, however, that you have an Apple iOS Developer Account.</p>
                        <p>If you need to setup an Apple iOS Developer Account, visit *[extlink:http://developer.apple.com@http://developer.apple.com]*.</p>
                    </description>
                </case>
                <case>
                    <title nested="2">Generating Certificates for Cordova CLI</title>
                    <description>
                        <p>If you want to build your iOS app using Cordova CLI, you must have a Mac running OSX and have an iOS developer account.</p>
                        <p>If you do not have a Mac, you can setup a virtual Mac at *[extlink:http://www.macincloud.com@http://www.macincloud.com]*.</p>
                        <p>If you need to setup an Apple iOS Developer Account, visit *[extlink:http://developer.apple.com@http://developer.apple.com]*.</p>
                        <p>To install an app on your development device you need to get a valid developer certificate from Apple.</p>
                        <p>Apple has extensive documentation on setting up all of the resources required to get a valid developer certificate at *[extlink:http://developer.apple.com@http://developer.apple.com]*.</p>
                        <p>The interface to the developer site is constantly changing, so we recommend referring to Apple's documentation on creating certificates.</p>
                    </description>
                </case>
            </cases>
        </section>
        <section>
            <title>More Functionality, Using 3rd Party</title>
            <description>
                <p>This example app incorporates native notifications, device information, inAppBrowser, bar code scanner, and the flashlight plugin. It also demonstrates a technique to call Apple's Search API web service, parse the JSON results and format the results in a HTML template within a Panel Card. No Application Server is required.</p>
                <p>We will use [these app files] to build a more advanced Cordova app in this section.</p>
                <p>Download the zip, [appExample1.zip], and extract the files. Copy the files, appExample1.a5wcmp and background.png, into an existing or new Web Project within Alpha Anywhere.</p>
                <p>Open the appExample1 UX component and click on Working Preview.</p>
            </description>
            <figure>
                <link>images/img31.png</link>
                <title>appExample1 UX Component, Working Preview</title>
            </figure>
        </section>
        <section>
            <description>This application includes seven (7) buttons on the first Panel Card that call native Cordova functions. Since these buttons are calling native Cordova functions, they will not work in Working or Live Preview on a desktop browser. The app needs to be installed on an actual device (or one of the emulators) to work.</description>
        </section>
        <section>
            <description>Beep calls the native Cordova navigator.notification.beep function, which will cause your device to generate a beep sound.</description>
        </section>
        <section>
            <description>Vibrate calls the native Cordova navigator.notification.vibrate function. Not all devices support vibrate. You will need to make sure your phone/tablet is set to vibrate on ring in order for this function to work on your device.</description>
        </section>
        <section>
            <description>Native Alert calls the Cordova navigator.notification.alert function, which displays a native alert dialog as opposed to a browser "alert" dialog. On iOS devices you will notice the dialog title does not contain the referencing page (which in this case will be index.html). A callback function is supported and is called when the user closes the alert dialog. In this case, the callback function displays a standard javaScript alert dialog. You will most certainly notice a difference between the native alert dialog and the JavaScript alert dialog on an iOS device. On an Android device, there is little difference.</description>
        </section>
        <section>
            <description>Native Confirm calls the Cordova navigator.notification.confirm function, which displays a native confirm dialog. Similar to an Alert in many ways, the confirm dialog adds the ability to display two (2) buttons and passes the one based index number (1 or 2, instead of a typical zero based array, which passes 0 and 1) in the callback when a button is pressed.</description>
        </section>
        <section>
            <description>Native Prompt calls the native Cordova navigator.notification.prompt function, which displays a native prompt dialog. The native prompt dialog can be used to prompt the user to enter any information required and can capture a user entered string. Two (2) buttons can be used to display </description>
        </section>
        <section>
            <description>Flashlight calls the Cordova third party plugin flashlight function. This function will turn on the camera light on the back of a phone for three seconds. If the device does not include a camera light, a callback will display a native alert dialog to indicate that a light is not available on the device.</description>
        </section>
        <section>
            <description>Scan and Search iTunes calls the Cordova barcodescanner third party plugin which calls the cordova.plugins.barcodescanner.Scan function. This  function will bring up a barcode scanner which uses the devices camera and some very clever image processing software to allow you to scan the barcode on a book and return the results to a success (or fail) callback function.</description>
            <figure>
                <title>ISBN Barcode for Programming in Objective-C 2.0, 2/e</title>
                <alt>ISBN Barcode for Programming in Objective-C 2.0, 2/e</alt>
                <link>images/barcode.gif</link>
            </figure>
        </section>
        <section>
            <description>In  the example component, the success callback function makes a client side call to Apple's iTunes Search API where the text result of the barcode scan is submitted to iTunes Search for an ISBN lookup. If the ISBN from the book is available within iTunes, the descriptive and pricing information will be displayed on a second PanelCard that will perform a slide transition into view.</description>
        </section>
        <section>
            <title nested="2">Panel Footer</title>
            <description>iTunes Info Button will navigate to the second PanelCard that contains a freeform HTML control that will display iTunes related information after a books ISBN has been scanned.</description>
        </section>
        <section>
            <description>Help Button navigates to a third panel that will display application help. The help content is contained within a freeform HTML control, that initially contains an empty div. When the app is fired up, the client side onInitializeComplete event is used to populate the div with the help HTML, which is defined in the JavaScript Functions of the component. This technique allows the definition of the components HTML content to be centralized and not tied to a specific control.</description>
        </section>
        <section>
            <title nested="2">There's a lot going on here!</title>
            <description>Many techniques were used to create this component. There are many ways to accomplish something in Alpha Anywhere. We hope you learn a few tricks from tearing this component apart.</description>
        </section>
        <section>
            <title nested="2">Let's take a look at how this component was built.</title>
            <description>Click on the Design tab.</description>
            <figure>
                <link>images/img32.png</link>
                <title>appExample1 UX Component, Design</title>
            </figure>
        </section>
        <section>
            <description>The component includes a programmatic Panel Navigator that includes a static Panel Header. The Panel Header container alignment is set to centered and it's width by convention is 100%. That will center the text.</description>
        </section>
        <section>
            <description>The first Panel Card includes a Container (for centering the buttons) and a series of buttons (with a width defined of 150px) and a Panel Footer with two (2) buttons that navigate to the other panels. It also includes a a background image, which I've tailored to an iPhone 5 in portrait orientation.</description>
            <figure>
                <link>images/img33.png</link>
            </figure>
        </section>
        <section>
            <description>Let's take a look at the click event handler on the Beep button.</description>
            <figure>
                <link>images/img34.png</link>
            </figure>
        </section>
        <section>
            <description>A PhoneGap Action JavaScript Notifications function has been assigned.</description>
            <figure>
                <link>images/img35.png</link>
            </figure>
        </section>
        <section>
            <description>Click on Edit Action</description>
            <figure>
                <link>images/img36.png</link>
            </figure>
        </section>
        <section>
            <description>Notice the notification type selected is Beep and the Beep Count is 1.</description>
        </section>
        <section>
            <description>Per the Cordova documentation, the beep count is ignored on iOS devices.</description>
        </section>
        <section>
            <description>Click OK and let's take a look at the JavaScript that the Action JavaScript builder generated.</description>
        </section>
        <section>
            <description>This is the JavaScript that runs when the click event on the button fires.</description>
            <figure>
                <link>images/img37.png</link>
            </figure>
        </section>
        <section>
            <description>As you will see later on, I've written the JavaScript to interact with the third party plugins for the Flashlight and the Bar Code Scanner used by this component. Keep in mind that by referring to the Cordova documentation, and writing a little bit of JavaScript, you can do anything with Alpha Anywhere and Cordova today.</description>
        </section>
        <section>
            <description>Close the JavaScript Preview Dialog and take a look at the abstract click handler on the Flashlight button.</description>
            <figure>
                <link>images/img38.png</link>
            </figure>
        </section>
        <section>
            <description>Notice the dialog is set to Text Mode, which allows you to enter the JavaScript directly. The fireFlash() function is called will be called when the click event fires. The fireFlash function is defined in the component's JavaScript functions.</description>
        </section>
        <section>
            <description>Cancel out of Edit Click Event Dialog and open the JavaScript Functions panel.</description>
        </section>
        <section>
            <description>Scroll down to the fireFlash function definition.</description>
            <figure>
                <link>images/img39.png</link>
                <title>The fireFlash function is called when the Flashlight button is clicked</title>
            </figure>
        </section>
        <section>
            <description>First a check is made  for the existence of the window.plugins object (which the Flashlight plugin JavaScript files create) and if the object is not defined, an alert is displayed and the function returns. This will prevent an error in the app and allows you to test the component in Working Preview. This technique is used throughout the button event handlers.</description>
        </section>
        <section>
            <description>Next a test is done to determine if the mobile device physically includes a photo flash and if so, the flashlight is turned on for 3 seconds.</description>
            <cases>
                <case>
                    <description>Remember, the Cordova functions are not going to work on a Desktop Browser. They are ONLY designed for use on a mobile device.</description>
                </case>
            </cases>
        </section>
        <section>
            <description>If the device does not include a photo flash, a native notification alert dialog is displayed to let the user know the plugin is working, but a flash is not available on the device.</description>
        </section>
        <section>
            <description>If you take a look at the third party plugin documentation for the Flashlight plugin, you will see the sample code which looks quite similar.</description>
            <cases>
                <case>
                    <description>See *[extlink:https://www.npmjs.com/package/cordova-plugin-flashlight@https://www.npmjs.com/package/cordova-plugin-flashlight]* and look at Usage.</description>
                </case>
            </cases>
        </section>
        <section>
            <description>Next, take a look at the click event handler for the Scanner button. Here the scanBarCode function is called. This function is also defined in the component's JavaScript Functions.</description>
            <figure>
                <link>images/img40.png</link>
            </figure>
        </section>
        <section>
            <description>The scanBarCode function does a quick check for the cordova object. If this object does not exist then either we are not running within Cordova on a mobile device or the bar code scanner third party plugin is not installed. Since either condition will cause a JavaScript error, an alert dialog is displayed and the function exits gracefully.</description>
            <figure>
                <link>images/img41.png</link>
            </figure>
        </section>
        <section>
            <description>Next the cordova.plugins.barcodeScanner.scan function is called. Below is a snippet from the Bar Code Scanner plugins documentation page on  GitHub. As is common with many Cordova plugins, the call to the scan function is asynchronous and requires two callback functions, one for success and one for fail.</description>
            <figure>
                <link>images/img42.png</link>
            </figure>
        </section>
        <section>
            <description>As in the example code, the success and fail functions are anonymously defined within the scanBarCode function. This technique is very common for asynchronous JavaScript functions  and is used throughout the Cordova example code. You can choose to define independent external functions and simply call those functions if you wish.</description>
        </section>
        <section>
            <title nested="2">The Scan Success Function</title>
            <description>
                <p>Our anonymous success function includes a result parameter which will contain a result object if the bar code scanner is able to read a bar code. From the Cordova example code it is easy to see the result object contains:</p>
                <p>
                    <list>
                        <item>
                            <name>result.text</name>
                            <description>contains the string encoded within the barcode or the QRCode</description>
                        </item>
                        <item>
                            <name>result.format</name>
                            <description>contains a string with the barcode format</description>
                        </item>
                        <item>
                            <name>result.cancelled</name>
                            <description>contains true if barcode scan is cancelled</description>
                        </item>
                    </list>
                </p>
            </description>
        </section>
        <section>
            <cases>
                <case>
                    <title nested="3">A Note on JavaScript Style</title>
                    <description>
                        <p>In this component, we've used a style for writing JavaScript following these basic rules:</p>
                        <p>
                            <list bullet="true">
                                <item>
                                    <name>All globals are assigned to the {dialog.object}.appVars object.</name>
                                </item>
                                <item>
                                    <name>All function parameters are defined in lowercase, no leading characters.</name>
                                </item>
                                <item>
                                    <name>All variables that are local to a function are defined with a leading underscore example: _result.</name>
                                </item>
                            </list>
                        </p>
                        <p>There is no right or wrong technique, just guidelines. Google has a decent JavaScript Style Guidelines available at *[extlink:https://google.github.io/styleguide/javascriptguide.xml@https://google.github.io/styleguide/javascriptguide.xml]*. Whatever style you or your team develop, try to be consistent.</p>
                    </description>
                </case>
            </cases>
        </section>
        <section>
            <description>
                <p>Notice the result object is stored to an instance variable (previously defined) called {dialog.object}.appVars.scannerResult. This is required because the iTunesCallback function requires access to this information after a call is made to the Apple Search API. If the ISBN is NOT found in the iTunes store, the callback will display an alert that will reference the scanned ISBN and the barcode type. This information is in the result object.</p>
            </description>
            <cases>
                <case>
                    <description>In this example component, all of the globals are defined  as part of the {dialog.object}.appVars object. This is referred to as an instance variable since the variables are assigned to a child object (appVars) of the UX component instance {dialog.object}. They are in fact global variables to the object instance.
                    </description>
                </case>
                <case>
                    <description>This technique keeps the components global variables contained within the object designated by the template placeholder {dialog.object} and keeps the global namespace clean, an important consideration in JavaScript programming.
                    </description>
                </case>
                <case>
                    <note>You may wonder why the placeholder {dialog.object} is used instead of a placeholder named {ux.object}. {dialog.object} comes from a legacy naming convention, used in previous versions of Alpha Anywhere. The UX was was derived from the legacy dialog component.</note>
                </case>
            </cases>
        </section>
        <section>
            <description>
                <p>At the top of the function, if result.cancelled is true the user cancelled the scan and a Cordova native alert dialog is presented.</p>
                <p>If a result is returned, the scanned text is submitted to Apple's Search API for a lookup in the iTunes store.</p>
                <p>There are a number of ways to do this but in this case the new {dialog.object}.ajaxCallbackCrossDomain method is used to make the request.</p>
            </description>
            <figure>
                <title>The iTunesCallback function using the new template method of Alpha Anywhere</title>
                <link>images/img43.png</link>
            </figure>
        </section>
        <section>
            <description>
                <p>The callback function that will process the returned result is called iTunesCallback.</p>
                <p>Since the result from iTunes may or may not contain user ratings, a test is made to see if the data returned contains a variable named data.results[0].userRatingCount. If the data.results[0].userRatingCount variable exists, a template that includes ratings is used, otherwise, a template that excludes ratings is used.</p>
            </description>
            <figure>
                <link>images/img44.png</link>
            </figure>
        </section>
        <section>
            <description>
                <p>The templates are defined as instance variables and are part of the {dialog.object}.appVars object. This is done for efficiency. You could define the templates within the iTunesCallback function but it's more efficient to define the templates once as a global and reference them when needed.</p>
            </description>
        </section>
        <section>
            <title nested="2">Performance and efficient memory use on mobile devices is important.</title>
            <description>
                <p>Panel Card 2 has a freeform HTML container that contains  a single div, *[html:&lt;div id="iTunesInfo"&gt;&lt;/div&gt;]*. Once the HTML is derived from the template, the iTunesInfo div is populated with this HTML and Panel Card 2 is transitioned into view.</p>
            </description>
        </section>
        <section>
            <title nested="2">The Scan Fail Function</title>
            <description>
                <p>The scan fail function is another anonymous function that accepts an error parameter. If the scan fails for any reason, this function will display a native alert dialog, indicating the error.</p>
            </description>
        </section>
        <section>
            <title nested="2">The UX Component onInitializeComplete Event</title>
            <figure>
                <link>images/img45.png</link>
            </figure>
        </section>
        <section>
            <description>
                <p>Looking at the Client Side onInitializeComplete event, the initial html is loaded into the iTunesInfo div from a call to the loadDefault_iTunesInfo() function. The same technique is used to load the appHelp div which is defined in a free form HTML container on Panel Card 3 by calling the loadAppHelp() function.</p>
            </description>
            <figure>
                <link>images/img46.png</link>
            </figure>
        </section>
        <section>
            <description>
                <p>This is a technique that allows you to define all of the HTML within the JavaScript functions. It provides a central location for all of the HTML, rather than defining the HTML within each container, which makes it harder to manage and edit the HTML used within your app. All you need to define within the HTML freeform container control is the div with an id that you will later populate with what may be dynamic content as in the case of the HTML we derive from the templates used within the barcode scan function.</p>
            </description>
        </section>
        <section>
            <title nested="2">Local CSS Styles</title>
            <figure>
                <link>images/img47.png</link>
            </figure>
        </section>
        <section>
            <description>
                <p>This component's styling was derived from the standard iOS style, although it looks quite different.</p>
                <p>A few local style CSS classes have been defined to change the look quite significantly.</p>
                <p>From Properties, scroll down to the CSS section and click on the button to edit the local CSS definitions.</p>
            </description>
            <figure>
                <link>images/img48.png</link>
            </figure>
        </section>
        <section>
            <description>
                <p>Five custom CSS classes have been defined. These classes are assigned to the specific elements in the CSS Class property of numerous controls within the UX component property grid.</p>
                <p>These include:</p>
                <p>
                    <list>
                        <item>
                            <name>.blueBtn</name>
                            <description>defines the CSS style for all of the buttons used in the component</description>
                        </item>
                        <item>
                            <name>.infoText</name>
                            <description>defines the CSS style for the information in PanelCard 2</description>
                        </item>
                        <item>
                            <name>.bluePanelHeader</name>
                            <description>defines the CSS style for all of the Panel Card Headers</description>
                        </item>
                        <item>
                            <name>.bluePanelBody</name>
                            <description>defines the CSS style for the Panel Card body in Panel Card 2 and Panel Card</description>
                        </item>
                    </list>
                </p>
            </description>
        </section>
        <section>
            <description>
                <p>The .blueBtn CSS was built using one of the many CSS button generators that are freely available on the web. Google "CSS Button Generator" and you will see many options.</p>
                <p>After generating your style, copy it into the CSS Editor Code Panel. Class names can be added to various controls in the UX using the control's class name property.</p>
            </description>
            <figure>
                <title>bluePanelBody class assigned to PANELCARD_2</title>
                <alt>bluePanelBody class assigned to PANELCARD_2</alt>
                <link>images/img51.png</link>
            </figure>
        </section>
        <section>
            <title nested="2">Launching the inAppBrowser</title>
            <description>
                <p>The inAppBrowser plugin allows an app to load an external web page within the app without having to exit the app and load a mobile browser. Think of it as a browser within your app. Typically an Action Sheet appears from the bottom of the screen that contains the browser.</p>
                <p>The help panel HTML includes a button with a link to *[extlink:https://www.alphasoftware.com@https://www.alphasoftware.com]*. The ontouchend event is used on mobile devices to eliminate a 300ms delay that mobile browsers add to the onclick event.</p>
            </description>
            <figure>
                <link>images/img52.png</link>
            </figure>
        </section>
        <section>
            <figure>
                <title>The ontouchend event calls the launchInAppBrowser function defined in JavaScript functions</title>
                <link>images/img53.png</link>
            </figure>
        </section>
        <section>
            <figure>
                <title>launchInAppBrowser(url) function</title>
                <link>images/img54.png</link>
            </figure>
        </section>
        <section>
            <figure>
                <title>The inAppBrowser displaying *[extlink:www.alphasoftware.com@https://www.alphasoftware.com]* within the app. The Done button in the lower left corner will close the inAppBrowser.</title>
                <link>images/img55.png</link>
            </figure>
        </section>
        <section>
            <description>
                <p>The HTML templates that are used to present the data returned from the Apple Search API also contain a button that links to the Apple iTunes Info.</p>
            </description>
            <figure>
                <link>images/img56.png</link>
            </figure>
        </section>
        <section>
            <figure>
                <link>images/img57.png</link>
            </figure>
        </section>
        <section>
            <description>
                <p>While the button is configured to launch the inAppBrowser, the iTunes App on iOS devices has registered a Custom URL Scheme which launches the iTunes App (if it is not already running) and displays the link in iTunes, instead of launching the inAppBrowser.</p>
            </description>
            <figure>
                <link>images/img58.png</link>
            </figure>
        </section>
        <section>
            <description>
                <p>On Android devices, the inAppBrowser is used. As such, the label on the button needs to be dynamically assigned. This is handled in the iTunesCallback function.</p>
            </description>
            <figure>
                <link>images/img59.png</link>
            </figure>
        </section>
        <section>
            <description>
                <p>If the app is running on an iOS device, the button label is assigned "View in iTunes App". If the App is running on an Android device, the button label is assigned "View on iTunes Site".</p>
                <p>Notice the addition of a new variable, .btnLabel to the data.results[0] object. You will see this variable in use within the templates that process the JSON results from the Apple Search API.</p>
                <p>It is this level of detail that helps your app stand out.</p>
                <p>For more info on iOS Custom URL Schemes see *[extlink:https://developer.apple.com/library/ios/documentation/iPhone/Conceptual/iPhoneOSProgrammingGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40007072-CH7-SW50@https://developer.apple.com/library/ios/documentation/iPhone/Conceptual/iPhoneOSProgrammingGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40007072-CH7-SW50]*.</p>
            </description>
        </section>
        <section>
            <title nested="2">Programmatically Calling JavaScript Actions and Using a Function to Generate a Dynamic Message</title>
            <description>
                <p>The component contains one JavaScript Action that is called from the myConfirmCallback function. This callback is fired when the 'Yes' or 'No' button is selected from the native.notification.confirm function which is tied to the Native Confirm button.</p>
            </description>
            <figure>
                <link>images/img60.png</link>
            </figure>
        </section>
        <section>
            <figure>
                <link>images/img62.png</link>
            </figure>
        </section>
        <section>
            <figure>
                <title>The confirmationAlert Action calls the Action JavaScript PhoneGap Notifications and displays a native alert. The Dialog Message is populated from an instance variable.</title>
                <link>images/img63.png</link>
            </figure>
        </section>
        <section>
            <description>
                <p>Since this JavaScript Action is going to be called programmatically from a callback function, the message to display needs to be stored in an instance variable. This should be clear from the code below which is tied to the confirmationCallback. Notice how {dialog.object}.appVars.msg is set to either Yes or No, depending upon which button the user clicks in response to the Cordova navigator.notification.confirm dialog. Also notice the use of the {dialog.object}.runAction method to run the confirmationAlert JavaScript action.</p>
            </description>
            <figure>
                <link>images/img64.png</link>
            </figure>
        </section>
        <section>
            <description>
                <p>Let's take a look at the Native Confirm button click event.</p>
                <p>This Action JavaScript uses a number of advanced techniques that are worth understanding.</p>
                <p>The JavaScript callback function name is myConfirmCallback. That is the function we just looked at. It is passed a btnIndex  which indicates the button the user clicked. Since the myConfirmCallback  calls another JavaScript Action (confirmationAlert), the result of the button selected is stored in an instance variable allowing reference to it from the confirmationAlert JavaScript.</p>
            </description>
            <figure>
                <link>images/img65.png</link>
                <title>Using a JavaScript function to return a dynamic message</title>
            </figure>
        </section>
        <section>
            <description>
                <p>The Dialog Message is populated from a JavaScript function called getConfirmMessage(). This allows the message to be tailored to the mobile platform that the app is running on.</p>
                <p>As you can see in the getConfirmMessage() function, the message content will vary for iOS and Android devices.</p>
            </description>
            <figure>
                <link>images/img66.png</link>
                <title>The getConfirmMessage function returns a dynamic message, based on the mobile platform at runtime</title>
            </figure>
        </section>
        <section>
            <title nested="2">The deviceready event</title>
            <description>
                <p>In Javascript functions, you will see an event listener added for the deviceready event. This event is fired after Cordova initialization is complete. It can be helpful to use this event to enable Cordova related controls within your app. In this case, the onDeviceReady function uses a Cordova native.notification.alert to display device related information in a native dialog.</p>
            </description>
            <figure>
                <link>images/img67.png</link>
            </figure>
        </section>

        <section>
            <title>Ajax Callbacks</title>
            <description>
                <p>Ajax callbacks are essential to create, edit, and update the data stored within a UX component. In this section, we modify the Demo Mobile App included with Alpha Anywhere to run as a Cordova app that communicates with an Alpha Anywhere Application Server, storing and retrieving photos from a backend database.</p>
                <p>Up until this point, the UX components we have used have been communicating with outside web services, like the Apple Search API.</p>
                <p>Alpha Anywhere  makes it easy to tie a UX component to a wide variety of backend databases through the Alpha Anywhere Server. Some popular SQL database engines include MySQL, SQL Server, PostgreSQL, Oracle, DB2, etc.</p>
                <p>In order to communicate with an Alpha Server, you MUST publish the initial UX component to an Alpha Anywhere Server and you MUST provide a proper URL to locate the server from within the Cordova app installed on the mobile device.</p>
                <p>In this section, we will modify the image upload capability of the sample mobile application supplied with Alpha Anywhere to use a native camera/image control and the image will be uploaded from the device to an Alpha Anywhere Server. This is done with an Ajax callback.</p>
                <p>Click on Recent Workspaces | Sample and Tutorial Workspaces and select the Demo Mobile Application.</p>
            </description>
            <figure>
                <link>images/img87.png</link>
            </figure>
        </section>
        <section>
            <description>
                <p>Once the files are copied, select Chapter 16 from the project list and right click on the component named Lesson16_Start.a5wcmp and Select Duplicate. Enter Lesson16_Start_pg.a5wcmp to create a duplicate copy of the component that will be used for the Cordova modifications.</p>
            </description>
            <figure>
                <link>images/img88.png</link>
            </figure>
        </section>
        <section>
            <description>
                <p>Open the Lesson16_Start_pg UX component. If prompted, enable prerendering of the component.</p>
                <p>Select the button labeled Photo in the UX Builder.</p>
            </description>
            <figure>
                <link>images/img89.png</link>
            </figure>
        </section>
        <section>
            <description>
                <p>We are going to modify the Action JavaScript associated with the virtual click event on this button.</p>
            </description>
            <figure>
                <link>images/img90.png</link>
            </figure>
        </section>
        <section>
            <description>
                <p>Select Click Button To Edit the Image Upload Action JavaScript.</p>
                <p>Make sure Mobile Settings are configured to use Cordova. Ensure *[ui:Using Cordova]* is also checked.</p>
            </description>
            <figure>
                <link>images/img91.png</link>
            </figure>
        </section>
        <section>
            <description>
                <p>The picture source should be Camera. Click OK and save the component. You have just made all of the changes required to this component to use the native camera controls within a Cordova app.</p>
            </description>
        </section>
        <section>
            <description>
                <p>In order for a Cordova App, installed on a mobile phone or tablet to communicate with an Alpha Anywhere server, there are a number of considerations:</p>
                <p>
                    <list bullet="true">
                        <item>
                            <name>What is the IP address of the server?</name>
                        </item>
                        <item>
                            <name>What protocol and port are being used by the server?</name>
                        </item>
                        <item>
                            <name>What is the name of the directory within the webroot (if any) on your Alpha Anywhere Server that the component is published?</name>
                        </item>
                        <item>
                            <name>What is the name of the component that the Cordova app is based?</name>
                        </item>
                        <item>
                            <name>Is the Same-site cookie policy set to "Unset" on the Application Server?</name>
                        </item>
                        <item>
                            <name>Did you publish the component and resources for the Cordova app to the Alpha Anywhere Application Server?</name>
                        </item>
                    </list>
                </p>
                <p>We'll look at each of these questions in detail.</p>
            </description>
        </section>
        <section>
            <title nested="2">Determining  IP address of the server</title>
            <description>
                <p>For Cordova apps, it's best to use the IP address of your server rather than relying on DNS name resolution simply because it is faster. Your mobile users will never see this IP address when running your app.</p>
                <p>Your testing will initially be done using Live Test. Live Test runs the app locally on the Development Server, a server that runs on your machine and is perfect for testing and debugging Cordova apps on your mobile devices.</p>
                <p>To determine the IP address in use on your machine, open a command prompt at enter ipconfig &lt;enter&gt;. Your screen will look similar to the image below:</p>
            </description>
            <figure>
                <link>images/img92.png</link>
            </figure>
        </section>
        <section>
            <description>
                <p>Here we can see the IPv4 Address assigned to this machine is 192.168.1.251. Your machine's IP address will vary. Make a note of this value. For initial testing on a mobile device, it is important that the mobile device be on this same network/sub-net as the development server. You want to make sure your phone or tablet is tied in to the same wireless router as your development server.</p>
            </description>
        </section>
        <section>
            <title nested="2">Determining the protocol and port of your development server</title>
            <description>
                <p>Click on Web | Development Server from within the IDE to display the Development Server Settings.</p>
            </description>
            <figure>
                <link>images/img93.png</link>
            </figure>
        </section>
        <section>
            <description>
                <p>Make a note of the Server Port, and the status of the Enable SSL checkbox. In this example, the port in use is 81 and SSL is not being used. When SSL is not in use, the protocol used is HTTP. When Enable SSL is checked, the protocol used is HTTPS.</p>
            </description>
        </section>
        <section>
            <title nested="2">Determining the server publishing directory</title>
            <description>
                <p>The UX component that serves as the basis for the Cordova application (as specified within the Cordova App Builder Genie) must be published to the Alpha Anywhere Application Server in order for the Cordova application installed on the mobile device to make callbacks to the Alpha Anywhere Server. To determine the publishing location, from within the Web Projects Control Panel, open the Publish settings dialog.</p>
                <p>In the example below, the component is being published to a directory named test. Make a note of this directory.</p>
            </description>
            <figure>
                <link>images/img94.png</link>
            </figure>
        </section>
        <section>
            <description>
                <p>If the Target Folder is left blank, the component will be published to the document root, identified in the previously discussed Server Settings dialog.</p>
            </description>
        </section>
        <section>
            <title nested="2">Verify the web project properties </title>
            <description>
                <p>Before publishing the component or generating the Cordova App, it is a good idea to take a look at your Web Project Properties to ensure that you are only loading the JavaScript Libraries that you actually need for your component. In our case, we don't need any additional libraries. The idea is to keep the client side payload as small as possible. From the Web Projects Control Panel select Project Properties. The Run-time Properties should match the dialog shown below.</p>
            </description>
            <figure>
                <link>images/img95.png</link>
            </figure>
        </section>
        <section>
            <title nested="2">Specifying the name of the component</title>
            <description>
                <p>We will use the Cordova App Builder to enter the name of the component and the application server details.</p>
            </description>
        </section>
        <section>
            <description>
                <p>Launch the Cordova App Builder from Web Projects Control Panel | Cordova.</p>
                <p>Under the Alpha Cordova Project Build Options select the Initial UX component, Lesson16_Start_pg. Make sure the Generate Cordova Asset Files checkbox is checked.</p>
                <p>You need to specify the URL to communicate with the Alpha Anywhere server in the URL For All Ajax Callbacks property. You must specify the protocol, IP Address, port number (if you are using anything other than the default, port 80) and if publishing to a directory within the A5Webroot, the name of that directory.</p>
                <p>In the image shown below, the protocol in use is http, the IP address is 192.168.10.21, the port in use is 81 and the component was published to the test directory within the A5Webroot. It is designated as [http:// 192.168.10.21:81/test].</p>
            </description>
            <figure>
                <link>images/img96.png</link>
            </figure>
        </section>
        <section>
            <title nested="2">Adjust Cordova App Builder Properties for Android Features and Required Plugins</title>
            <description>
                <p>You will not need to select all of the required plugins required for native camera access and image uploads (but feel free to verify the plugins are in fact selected) because the plugins have been automatically  selected for you. This occurs when you use Action JavaScript to include this native functionality in your component.</p>
                <p>For Android apps, make sure to enable the Camera and Notification features.</p>
            </description>
            <figure>
                <link>images/img97.png</link>
            </figure>
        </section>
        <section>
            <title nested="2">Build the App with Cordova CLI or Ionic Appflow</title>
            <description>
                <p>Assuming you have setup the Cordova CLI or Ionic Appflow for building mobile apps, you can save and build your application. However, the app will not run properly (callbacks will fail) on your mobile device unless you publish the component designated in the initial UX Component property to the Application Server.</p>
            </description>
        </section>
        <section>
            <title nested="2">Publishing the component to the Application Server</title>
            <description>
                <p>From within the Web Projects Control Panel, right click on the component named Lesson16_Start_pg.a5wcmp and select Publish (Local Webroot).</p>
            </description>
            <figure>
                <link>images/img98.png</link>
            </figure>
        </section>
        <section>
            <title nested="2">Install and Test</title>
            <description>
                <p>The app is now ready for testing. You should be able to install the app on your mobile device, take a picture and save the image to the Alpha Development Server.</p>
            </description>
        </section>
        <section>
            <title>Videos</title>
            <description>
                <p>To learn more about building mobile apps with Alpha Anywhere, check out these videos.</p>
            </description>
            <warning>
                <p>Many videos in this section show using PhoneGap Build to build mobile apps. PhoneGap Build is no longer available. Use [Ionic Appflow], [Cordova CLI], or [Alpha Launch].</p>
            </warning>
        </section>
        <section>
            <videos>
                <title>Using Ionic Appflow with Alpha Anywhere To Build Cordova Apps</title>
                <description>
                    <p>Ionic AppFlow is a service offered by Ionic for building iOS and Android applications. It is tightly integrated in the Alpha Anywhere Cordova Genie.</p>
                    <p>In this video, we'll walk you through the process of building Alpha Anywhere applications with Ionic Appflow.</p>
                </description>
                <video>
                    <name>Watch Video</name>
                    <link>https://www.youtube.com/watch?v=mzeO0ENXGcU</link>
                </video>
            </videos>
        </section>
        <section>
            <videos>
                <title>Adopting and Modifying the Demo Mobile Component for Use with PhoneGap</title>
                <description>
                    <p>*[IMPORTANT]* This video demonstrates using PhoneGap Build, which is no longer available.</p>
                    <p>This two-part video tutorial describes how to modify the sample mobile demo app for use with the native camera controls of iOS or Android with PhoneGap. The first video shows how turn the demo mobile app into a PhoneGap application.</p>
                    <p>In this 2nd video of the series, enhancements are made to the demo mobile component to make the app more robust and polished. Join Bob Moore as he explains the design goals and then shows you how to make it all happen with Alpha Anywhere and PhoneGap </p>
                </description>
                <video>
                    <name>Watch Video - Part 1</name>
                    <link>https://share.vidyard.com/watch/sKNHZrKtQxfsC4SjnostWt</link>
                </video>
                <video>
                    <name>Watch Video - Part 2</name>
                    <link>https://share.vidyard.com/watch/oKhvNGtVwJ4e54ZFbsgDTi</link>
                </video>
            </videos>
        </section>
        <section>
            <videos>
                <title>World Cup App Overview</title>
                <description>
                    <p>*[IMPORTANT]* This video demonstrates using PhoneGap Build, which is no longer available.</p>
                    <p>An overview of the Alpha Anywhere World Cup 2014 App. This app went from idea to app in just 3 days. It demonstrates the ability to rapidly build a native PhoneGap app with Alpha Anywhere. This app consumes data from multiple REST API's. </p>
                </description>
                <video>
                    <name>Watch Video</name>
                    <link>https://share.vidyard.com/watch/pTVHFy6NDsWynFuw9nMTfp</link>
                </video>
            </videos>
        </section>
        <section>
            <videos>
                <title>Building the Alpha Anywhere 2014 World Cup App - Part 1</title>
                <description>
                    <p>*[IMPORTANT]* This video demonstrates using PhoneGap Build, which is no longer available.</p>
                    <p>The first video in a series which covers the building of the Alpha Anywhere 2014 World Cup mobile app. Join Bob Moore, VP of Mobile Development at Alpha Software as he explains how to setup a list control to retrieve and consume JSON data from the KimonoLabs World Cup API.</p>
                </description>
                <video>
                    <name>Watch Video</name>
                    <link>https://share.vidyard.com/watch/iDim5JHEKgZpmkcsmGVWT5</link>
                </video>
            </videos>
        </section>
        <section>
            <videos>
                <title>Building the Alpha Anywhere 2014 World Cup App - Part 2</title>
                <description>
                    <p>*[IMPORTANT]* This video demonstrates using PhoneGap Build, which is no longer available.</p>
                    <p>In the 2nd video in this series which covers the building of the Alpha Anywhere 2014 World Cup mobile app, Bob Moore, VP of Mobile Development at Alpha Software explains how to setup a team results detail view with a panel navigator and an additional list control that retrieves and consumes JSON data from the KimonoLabs World Cup API. The Google Maps API integration is also discussed.</p>
                </description>
                <video>
                    <name>Watch Video</name>
                    <link>https://share.vidyard.com/watch/DNybfKjtupFqVouVmZWF7o</link>
                </video>
            </videos>
        </section>
        <section>
            <videos>
                <title>Building the Alpha Anywhere 2014 World Cup App - Part 3</title>
                <description>
                    <p>*[IMPORTANT]* This video demonstrates using PhoneGap Build, which is no longer available.</p>
                    <p>In the 3rd video in this series covering the construction of the Alpha Anywhere World Cup App, Bob Moore, VP of Mobile Development at Alpha Software explains the process of making a client side REST call to the KimonoLabs World Cup API to process and display team players and individual player</p>
                </description>
                <video>
                    <name>Watch Video</name>
                    <link>https://share.vidyard.com/watch/WNgjmbZzW227o35BYHyFVm</link>
                </video>
            </videos>
        </section>
        <section>
            <videos>
                <title>Building the Alpha Anywhere 2014 World Cup App - Part 4</title>
                <description>
                    <p>*[IMPORTANT]* This video demonstrates using PhoneGap Build, which is no longer available.</p>
                    <p>In this 4th and final video in this series Bob Moore, VP of Mobile Development at Alpha Software explains the process of retrieving player images from the Flickr API and displaying them within a jQuery plugin for the Alpha Anywhere World Cup App.</p>
                </description>
                <video>
                    <name>Watch Video</name>
                    <link>https://share.vidyard.com/watch/SdNShmBnL69uXmaiZydEuS</link>
                </video>
            </videos>
        </section>
    </sections>
    <links>
        <link link="cordova%20generating%20certificates">Cordova Builder iOS Certificate Genie</link>
        <link href="./components/appExample1.zip">these app files</link>
        <link href="./components/appExample1.zip">appExample1.zip</link>
        <link link="ionicappflow">Ionic Appflow</link>
        <link link="phonegap%20cli%20builder">Cordova CLI</link>
        <link link="alphalaunch">Alpha Launch</link>
    </links>
</page>