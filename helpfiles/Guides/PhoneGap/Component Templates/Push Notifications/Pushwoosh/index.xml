<page>
 <topic>Push Notifications : Pushwoosh Component Template</topic>
	<description>
		This component template demonstrates the use of the PhoneGap Pushwoosh plugin which enables sending and receiving push notifications powered by Pushwoosh.
	</description>

	<discussion>
		The component requires user login using the Alpha Securtiy Framework and upon successful login, a private push notification is sent to a administrative app user and a map is displayed, allowing the user to login to a specific location. A typical use case might be a service technician checking in to a job site. When the user checks in, the device's lat/lon is reverse geocoded (using Google geocoding API) and the location is sent via a push notification to a specific administrative user.
	</discussion>
	<sections>
		<section>
			<description>
				When a native mobile app is registered to process push notifications, the app does not need to be running in order to receive and display the notification. The notification messages are sent from a server back end and recieved by the device without an explicit request from the device or user. A user must agree to accept notifications from the app but once that is done, the notifications will arrive without the device initiating a request. Depending upon the device, the notification can cause the phone to beep or vibrate and it may display a message either within the app (if it is active and has focus) or as a toast popup or across the top of the screen. The message may contain a badge, text, a hyperlink, etc. Typically if the user taps on the message (assuming he/she is not in the app), the app will launch or transistion into view.  
			</description>
		</section>
		<section>
			<title>Push Notification Architecture</title>
			<description>
				<p>Push notification processing is platform specific. The process of subscribing to push notifications is very different for iOS, Android and Windows devices. Each platform requires a different push notification dispatch server and each platform requires it's own unique method of app authentication and authorization for push notifications. Security is paramount. Apple, Google and Microsoft provide platform specific push notification servers (PNS) to communicate with their respective devices. At this point in time, access to these servers is free of charge. If you as a developer wanted to write the application specific server side code that can communicate with each of these platform specific push notification servers, you can. Of course you must be well versed in the specifics of each PNS.</p> 
				
				<p>Apple uses the Apple Push Notification Service (APNS) which can send notifications to iOS (and indirectly to watchOS), tvOS and OS X devices.</p>
			</description>	
		</section>

		<section>
			<title>Apple Push Notification Service (APNS)</title>
			<figure><link>images/apns.png</link></figure>
		</section>

		<section>
			<description>
				Google uses Google Cloud Messaging (GCM) which can send notifications to Android devices or to the Google Chrome internet browser.
			</description>
		</section>

		<section>
			<title>
				Google Cloud Messaging
			</title>
			<figure>
				<link>images/gcm.png</link>
			</figure>
		</section>
		<section>
			<description>
				Windows  uses the Windows Push Notification Service (WNS) which can send notifications to Windows 8, Windows 8.1, Windows Phone 8.1, Windows 10, Windows 10 Mobile and XBox.
			</description>
		</section>
		<section>
			<title>
				Windows Push Notification Services (WNS)
			</title>
			<figure>
				<link>images/wns.png</link>
			</figure>
		</section>
		
	</sections>
</page>