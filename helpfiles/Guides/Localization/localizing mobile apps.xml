<page>
    <shortlink>Multi Language Support in a PhoneGap Mobile App</shortlink>
    <topic>Multi-Language Support in a PhoneGap Mobile App</topic>
    <description>Adding multi-language support for an offline-enabled PhoneGap application cannot be done using Language tags or Text Dictionary tags since these tags are resolved by the Alpha Anywhere Application Server, requiring an Ajax Callback. This article explains how to add multi-language support in an offline application.</description>
    <discussion>
        <p>Normally, when you create a multi-language application you add Language tags (&lt;a5:r&gt;) or Text Dictionary tags (&lt;a5:t&gt;) around the strings that you want to translate into different languages. So, for example, the label for a Lastname control might be specified as *[html:&lt;a5:r&gt;Lastname&lt;/a5:r&gt;]* ([Language tag]) or *[html:&lt;a5:t&gt;Lastname&lt;/a5:t&gt;]* ([Text Dictionary tag]).</p>
        <p>Language tags are resolved on the server, and the HTML that is sent from the server to browser has all of the strings in the selected language.</p>
        <p>But in a PhoneGap application, you can't use the approach because the app is loaded from the filesystem on the device. There is no Ajax callback to the server. In fact, the server might not even be running when the app is loaded. Therefore, in order to create a multi-language app that can run on PhoneGap and can run disconnected, you need a solution that can be implemented on the client side using JavaScript.</p>
        <p>The approach that you will take is similar to wrapping strings in language tags or text dictionary tags, except that you will wrap the strings you want to translate in special *[html:&lt;span&gt;]* tags. For example if you want to translate the label for the 'LastName' control, you would encode the label as follows:</p>
    </discussion>
    <sections>
        <section>
            <example code="html"><![CDATA[<span id="_language_LASTNAME" class="_language">Last Name</span>]]></example>
        </section>
        <section>
            <description>
                <p>Notice that the *[html:&lt;span&gt;]* tags have a special id that is used as a key into the language translation object (discussed below) and a special class name (*[css:_language]*) that is simply used so that all of the elements that need to be translated can be quickly found using the JavaScript *[js:getElementsByClassName()]* method.</p>
                <p>Once you have tagged all of the strings that need to be translated, you will need to create some JavaScript that defines the translated strings. You can either defined this JavaScript in the Javascript Functions section in your UX component, or you can define it in an external file that is linked by your component. </p>
                <p>Assume that your app should support English, French, German and Spanish. Assume also that you have defined the following strings in your component that will need to be translated:</p>
            </description>
            <example code="html"><![CDATA[<span id="_language_LASTNAME" class="_language">Last Name</span>
<span id="_language_FIRSTNAME" class="_language">First Name</span>
<span id="_language_CITY" class="_language">City</span>]]></example>
        </section>
        <section>
            <description>
                <p>Your JavaScript will define an object that has properties for each string that must be translated. So, in the above example, your JavaScript will define an object like this:</p>
            </description>
            <example code="js"><![CDATA[var _translations = {
    "LASTNAME" : {
        "english" : 'Last Name',
        "french" : 'Nom de famille',
        "german" : 'Familienname',
        "spanish" : 'Apellido'
    },
    "FIRSTNAME" : {
        "english" : 'First Name',
        "french" : 'PrÃ©nom',
        "german" : 'Vorname',
        "spanish" : 'Nombre de pila'
    },
    "CITY" : {
        "english" : 'City',
        "french" : 'Ville',
        "german" : 'Stadt',
        "spanish" : 'Ciudad'
     }
}]]></example>
        </section>
        <section>
            <description>
                <p>At run-time, when the user wants to change from one language to another, your JavaScript will loop over all of the strings that need to be translated and it will set the inner HTML of the span to the text in the correct language. To get an array of all of the strings that need to be translated, you can use this JavaScript:</p>
            </description>
            <example code="js"><![CDATA[var arr = document.getElementByClassName('_language');]]></example>
        </section>
        <section>
            <description>
                <p>To get the translated string, you do a lookup into *[js:_translations]* JavaScript object. For example, to find the value for the Last Name string in French you would use this code:</p>
            </description>
            <example code="js"><![CDATA[var string = _translation['LASTNAME']['french'];]]></example>
        </section>
        <section>
            <description>
                <p>To replace the value of the Last Name string with its French version, you would use this code:</p>
            </description>
            <example code="js"><![CDATA[$('_language_LASTNAME').innerHTML = _translation['LASTNAME']['french'];]]></example>
        </section>
        <section>
            <description>
                <p>You can automate the process of setting the language strings to their translated value using this code:</p>
            </description>
            <example code="js"><![CDATA[var arr = document.getElementsByClassName('_language');
var ele = '';
var id = '';
var key = '';
for(var i = 0; i < arr.length; i++) {
    ele = arr[i];
    id = ele.id;
    key = id.split('_language_')[1];
    var string = _translations[key][language];
    $(id).innerHTML = string;
}]]></example>
        </section>
        <section>
            <description>
                <p>This code starts by getting an array of all of the element that have a class name of *[css:_language]*. These are the *[html:&lt;span&gt;]* elements that wrap the strings to be translated. The code loops over this array. For each item in the array, we get the element id. This will be a value like *[html:_language_LASTNAME]*. </p>
                <p>Next, the key is derived from the element id. So for an element id of *[html:_language_LASTNAME]* a key of *[js:LASTNAME]* is obtained. Once we have the key we can lookup a value in the *[js:_translations]* object for a particular key and language. For example, *[js:_translations['LASTNAME']['spanish']]* is the Spanish value for the '*[js:LASTNAME]*' field.</p>
                <p>Once we have the translated string value, we can set the inner HTML of the element (*[js:ele.id]*).</p>
            </description>
        </section>
        <section>
            <description>
                <p>A more complex version of the above script is shown here. In this version, if a translated string is not found for a particular string, then the string value is not changed.</p>
            </description>
            <example code="js"><![CDATA[function doTranslate(language) {
    if(typeof _translations == 'undefined') return false;
    var arr = document.getElementsByClassName('_language');
    var ele = '';
    var id = '';
    var key = '';
    for(var i = 0; i < arr.length; i++) {
        ele = arr[i];
        id = ele.id;
        key = id.split('_language_')[1];
        if(typeof _translations[key] == 'undefined' || _translations[key] == null) return false;
        var string = _translations[key][language];
        if(typeof string != 'undefined' && string != null && string != '') $(id).innerHTML = string;
    }
}]]></example>
        </section>
        <section>
            <title>Sample Template</title>
            <description>
                <p>A sample template that shows the technique discussed in this article can be loaded when you create a new UX component. Search for the [MobileAppFramework_Client-side-Language_Translation] template in the list of available templates.</p>
            </description>
        </section>
    </sections>
    <links>
        <link link="language tags">Language tag</link>
        <link link="localization text dictionary">Text Dictionary tag</link>
        <link link="">MobileAppFramework_Client-side-Language_Translation</link>
    </links>
    <terms>localize</terms>
</page>