<page>
	<shortlink>server xb Subclasses and Inheritance</shortlink>
	<topic>Subclasses and Inheritance</topic>
	<description>In Designing an Xbasic Class we offhandedly asked "Do we need 14 subclasses, one for each different database API?" and answered "It's one way to go." Let's explain what subclasses are, and why are they useful.
 Subclasses are classes derived from a base class. In Xbasic, that is done with the INHERITS keyword:
</description>
	<sections>
		<section>
			
			<example><![CDATA[DEFINE CLASS MySubClass INHERITS MyBaseClass ]]></example>
		</section>
		
		<section>
			<description>Subclasses inherit the capabilities of the base class, which they can use, modify, add to, or override. A subclass can be differentiated from its base class by</description>
<cases>
	<case>
		<description>adding member variables (properties) </description>
	</case>
	<case>
		<description>adding member functions (methods) </description>
	</case>
	<case>
		<description>redefining (overriding) member functions inherited from the base class </description>
	</case>
	
</cases>
		</section>
		
		<section>
			<description>Subclasses can themselves become the base classes for other classes. In our stored procedure example, we discovered that some databases use the CALL keyword to invoke a stored procedure, while other databases use the EXEC keyword to invoke a stored procedure. We could define a class hierarchy that reflects this:
</description>
			<example><![CDATA[DEFINE CLASS StoredProc
...
END CLASS
 
DEFINE CLASS ExecSP INHERITS StoredProc
DIM  m_SP_Keyword as C = "EXEC"
...
END CLASS
 
DEFINE CLASS CallSP INHERITS StoredProc
DIM  m_SP_Keyword as C = "CALL"
...
END CLASS
 
DEFINE CLASS SQLServer_SP INHERITS ExecSP
...
END CLASS
 
DEFINE CLASS Sybase_SP INHERITS ExecSP
...
END CLASS
 
DEFINE CLASS MySQL_SP INHERITS CallSP
...
END CLASS
 
DEFINE CLASS Oracle_SP INHERITS CallSP
...
END CLASS
 
DEFINE CLASS DB2_SP INHERITS CallSP
...
END CLASS
 
... ]]></example>
		</section>
		
		<section>
			<description>Then the functionality common to all databases would be implemented in StoredProc, the functionality common to all databases that use the EXEC keyword would be implemented in ExecSP, the functionality common to all databases that use the CALL keyword would be implemented in CallSP, and the datatabase-specific functionality would be implemented in SQLServer_SP, MySQL_SP, and so on.</description>
			
		</section>
		
		<section>
			<title>Is-a and Has-a relationships</title>
			<description>If we think about our current example, we can say accurately that SQL Server is a database. In object-oriented design terms, this "is a" relationship is appropriate for inheritance.
 Let's think about a different area. A Ford F150 truck is a type of motor vehicle. So an F150 class can inherit from a Truck class, which can inherit from a MotorVehicle class. All well and good.
 On the other hand, a motor vehicle has a driver, but is not a kind of driver. So instead of inheritance, we would use a different mechanism to express the relationship: the MotorVehicle class would have a member variable which is an instance of the Driver class.
</description>
			<example><![CDATA[DEFINE CLASS Driver
...
END CLASS
 
DEFINE CLASS MotorVehicle
...
DIM m_driver AS Driver
...
END CLASS]]></example>
		</section>
		
		<section>
			<description>Before using class inheritance, make sure that the relationship between the classes can fairly be described as is-a rather than has-a.</description>

		</section>
	</sections>
	
<see>
	
<ref link="Xbasic with Classes">Xbasic with Classes </ref>
<ref link="Xbasic Class Syntax">Xbasic Class Syntax </ref>
<ref link="Designing an Xbasic Class">Designing an Xbasic Class </ref>
<ref link="Implementing an Xbasic Class">Implementing an Xbasic Class </ref>
<ref link="Testing and Using an Xbasic Class">Testing and Using an Xbasic Class </ref>
<ref link="Subclasses and Inheritance">Subclasses and Inheritance </ref>
<ref link="Classes in Namespaces">Classes in Namespaces 	</ref>
	
</see>	
	
	
</page>