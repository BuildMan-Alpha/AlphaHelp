<page>
	<shortlink>server xb Xbasic Array Improvements</shortlink>
	<topic>Working with Dynamic Arrays</topic>
	<description>Implicit array declaration, dynamic array sizing, appending entries to an array, initialize array From table</description>
	<sections>
		<section>
			<title>Implicit Array Declaration</title>
			<description>When you use the *[xb:[]]* syntax to add entries to an array, the array does not need to be *[xb:DIM]*med in advance. For example, as shown in this Interactive window session:</description>
			<example><![CDATA[b[] = "alpha"
b[] = "beta"
?b.size()
= 2 ]]></example>
		</section>
		<section>
			<description>The same applies to property arrays, either created as a standalone variable...</description>
			<example code="xb"><![CDATA[workweek[].day = "Monday"
workweek[].day = "Tuesday"
workweek[].day = "Wednesday"
workweek[].day = "Thursday"
workweek[].day = "Friday"
? workweek.size()
= 5]]></example>
		</section>
		<section>
			<description>...or a property of another variable (shown below). Multiple properties can be added to the last entry in the property using the *[xb:[..]]* syntax. For example:</description>
			<example code="xb"><![CDATA[a.arr[].name = "Steve"
a.arr[..].city = "Leominister"
a.arr[..].state = "MA"
a.arr[..].sandwich = "Peanut butter"
a.arr[].name = "Susan"
a.arr[..].city = "Newport"
a.arr[..].state = "RI"
a.arr[..].sandwich = "Lobster roll"

? a.arr.size()
= 2

? a.arr.dump_properties("name|city|state|sandwich")
= Steve|Leominister|MA|Peanut butter
Susan|Newport|RI|Lobster roll]]></example>
		</section>
		<section>
			<description>It is not recommended, however, to use *[xb:[]]* and *[xb:[..]]* syntax to dynamically populate property arrays. This is because it's very easy to accidentally append a new entry when you mean to add a property to an existing array entry. For example:</description>
			<example code="xb"><![CDATA[arr[].name = "Sarah"
arr[].city = "Providence"
arr[].state = "RI"
arr[].sandwich = "Baba ghanoush"
? arr.size()
= 4 ' this doesn't look right
? arr.dump_properties("Name|city|state|sandwich")
= Sarah|||
|Providence||
||RI|
|||Baba ghanoush]]></example>
		</section>
		<section>
			<description>Instead, use the *[xb:&lt;array&gt;.append()]* method.</description>
		</section>
		<section>
			<title>Appending Entries to an Array</title>
			<description>The &lt;array&gt;.append() method makes it easier to add new entries to an array. &lt;array&gt;.append() adds a new entry to the array and returns the index of the new array slot. For example:</description>
			<example><![CDATA[dim arr[0] as p
i = arr.append()
arr[i].name = "Alpha"
arr[i]city = "Burlington"

i = arr.append()
arr[i].name = "Microsoft"
arr[i].city = "Seattle"

i = arr.append()
arr[i].name = "Sarah"
arr[i].city = "Providence"

?arr.size()
= 3
?arr.dump_properties("Name|city")
= Alpha|Burlington
 Microsoft|Seattle
 ]]></example>
		</section>
		<section>
			<title>Dynamic Array Sizing</title>
			<description>When you delete entries from an array, the array size does not change. With dynamic array sizing turned on, deleting an entry from an array will resize the array. The following Interactive window session demonstrates:</description>
			<example><![CDATA[dim array[3] as c
array[1] = "alpha"
array[2] = "beta"
array[3] = "gamma"
?array.size()
=3
array.delete(2,1)
?array.dump()
= alpha
 gamma
 ?array.size()
=3 ]]></example>
		</section>
		<section>
			<description>Now, repeating this exercise, but turning on the array's 'dynamic' property:</description>
			<example><![CDATA[dim array[3] as c
array.set_dynamic(.t.)
array[1] = "alpha"
array[2] = "beta"
array[3] = "gamma"
?array.size()
=3
array.delete(2,1)
?array.dump()
= alpha
gamma
?array.size()
=2 ]]></example>
		</section>
		<section>
			<description>
				<p>The &lt;array&gt;.set_dynamic(flag) method can be used to turn on/off the dynamic sizing property of an array. The &lt;array&gt;.get_dynamic() method can be used to determine the state of an array's dynamic sizing property.</p>
				<p>If you dim an array with a size of 0 (and then populate the array using [] syntax or the *[xb:append()]* method), the dynamic sizing property is automatically assumed to be set to True. For example:</p>
			</description>
			<example><![CDATA[dim array[0] as c
array[] = "alpha"
array[] = "beta"

?array.size()
=2

array.delete(2,1)

?array.size()
=1]]></example>
		</section>
		<section>
			<description>This next example shows that an array *[xb:DIM]*med with an initial size of 0 will create an array with the dynamic property enabled, whereas an array *[xb:DIM]*med with non-zero size creates an array with the dynamic property disabled.</description>
			<example code="xb"><![CDATA[dim arr1[0] as c
dim arr2[1] as c
? arr1.get_dynamic()
= .T.
? arr2.get_dynamic()
= .F. ]]></example>
		</section>
		<section>
			<title>Initialize Array From Table</title>
			<description>
				<p>The &lt;array&gt;.initialize_from_table() method now has two new parameters that allow you to optionally append to an existing array (instead of always initializing it), and to specify a list of fieldnames (rather than populating the array with every field in the source table).</p>
				<p>Also, it is no longer necessary to dim the array with the correct size before you execute the .initialize_from_table() method - you can dim it as a 0 size array and the array will be resized correctly based on the number of records that satisfy your filter criteria.</p>
				<p>For example, here is an Interactive window session (in the sample Alphasports database):</p>
			</description>
			<example><![CDATA['Start with empty array (automatically dynamic)
dim arr[0] as p

'Pull in NY records from Customer table...
arr.initialize_from_table("customer","bill_state_region='NY'","",.f.)
?arr.size()
= 8

'Now, pull in MA records from the Customer table. Notice that the append flag is set to TRUE so that records are added to the end of the array.
arr.initialize_from_table("customer","bill_state_region='MA'","",.t.)
? arr.size()
= 29 ]]></example>
		</section>
		<section>
			<description>In this example, only selected columns are loaded into the array.</description>
			<example><![CDATA[dim fieldList as c 
fieldList = <<%txt%
CUSTOMER_ID
COMPANY
FIRSTNAME
LASTNAME
%txt

dim arrlim[0] as p
arrlim.initialize_from_table("customer","bill_state_region='NY'","",.f.,fieldlist)
? arrlim2
= COMPANY = "Alpha Software New York"
CUSTOMER_ID = "00000010"
FIRSTNAME = "Bryan"
LASTNAME = "Bloomberg" ]]></example>
		</section>
	</sections>
	
	
</page>