<page>
	<shortlink>server xb Writing Expressions</shortlink>
	<topic>Writing Expressions</topic>
	<description>When you pass an expression to a function or method, you are passing a line of Xbasic code as a character string. as result, whether the expression is used to filter or order records, whether it evaluates to a character or a logical value, the argument is type C (character).
There are several principles that you should understand when writing an expression argument.
</description>
	<sections>
<section>
	
	
</section>		
<section>
	<title>Character Filter Expressions</title>
	<description>Many functions have character filter expressions as arguments. While this type of expression has a character value, it is different from a normal character variable. It is a line of Xbasic code that will be interpreted. A character expression has the following rules for formatting its components:</description>
	<cases>
		<case>
			<title>Xbasic Language</title>
			<cases>
				<case>
				<title>Rule:</title>
				<description>Quoted</description>
				</case>
			</cases>
		</case>
		
		<case>
			<title>Relationship Operators</title>
			<cases>
				<case>
				<title>Rule:</title>
				<description>Quoted</description>
				</case>
			</cases>
		</case>
		
		<case>
			<title>Table Field Names</title>
			<cases>
				<case>
				<title>Rule:</title>
				<description>Quoted</description>
				</case>
			</cases>
		</case>
		
		<case>
			<title>Constant values</title>
			<cases>
				<case>
				<title>Rule:</title>
				<description>Quoted</description>
				</case>
			</cases>
		</case>
		
		<case>
			<title>Character variables</title>
			<cases>
				<case>
				<title>Rule:</title>
				<description>Presented inside the Xbasic functions such as  DTOC(), FORMAT_DATA(), QUOTE(), and S_QUOTE() that convert the variables to character values
</description></case>
			</cases>
		</case>
		
		<case>
			<title>Date variables</title>
			<cases>
				<case>
				<title>Rule:</title>
				<description>Presented inside the Xbasic functions such as  DTOC(), FORMAT_DATA(), QUOTE(), and S_QUOTE() that convert the variables to character values
</description></case>
			</cases>
		</case>
		
		<case>
			<title>Logical variables
</title>
			<cases>
				<case>
				<title>Rule:</title>
				<description>Presented inside the Xbasic functions such as  DTOC(), FORMAT_DATA(), QUOTE(), and S_QUOTE() that convert the variables to character values
</description></case>
			</cases>
		</case>
		
		<case>
			<title>Numeric variables</title>
			<cases>
				<case>
				<title>Rule:</title>
				<description>Presented inside the Xbasic functions such as  DTOC(), FORMAT_DATA(), QUOTE(), and S_QUOTE() that convert the variables to character values
</description></case>
			</cases>
		</case>
		
		
		
		
	</cases>
	

	
</section>		
<section>
	<description>Consider the following example in the Interactive window of the Code Editor.</description>
	<example><![CDATA[dim nam as C = "Bob"
query.filter = "customer->firstname > nam"
? query.filter
= "customer->firstname > nam" ]]></example>
</section>

<section>
	<description>Examine the value of query.filter. It is a character string. Alpha Anywhere has not identified that you are referencing the nam variable, which is incorrectly treated as the character value "nam". The following expression is correct.</description>
	<example><![CDATA[dim nam as C = "Bob"
query.filter = "customer->firstname > " + s_quote(nam)
? query.filter
= customer->firstname > "Bob" ]]></example>
</section>

<section>
	<description>In this case Alpha Anywhere knows that you are referencing the customer->firstname field and the nam variable has the value "Bob".</description>
	
</section>

<section>
	<title>Character Arguments</title>
	<description>You should place an extra pair of quotes around character arguments inside the expression or use a quoting function.</description>
	<example><![CDATA[... + "lastname = 'Smith'" + ... or
... + "lastname = \"Smith\"" + ...]]></example>
</section>

<section>
	<description>Examples using variables and constants:</description>
	<example><![CDATA[dim nam as C = "James"
' Version 6
"FieldName > " + S_QUOTE("James")
"FieldName > " + S_QUOTE(nam)
' Version 5
"FieldName > " + QUOTE("James")
"FieldName > " + QUOTE(nam) ]]></example>
</section>

<section>
	<title>Numeric Arguments</title>
	<description>Examples using variables and constants:</description>
	<example><![CDATA[dim dsc as N = 2
' Version 6
"FieldName > " + S_QUOTE(dsc)
"FieldName > 2"
' Version 5
"FieldName > " + dsc
"FieldName > 2" ]]></example>
</section>

<section>
	<title>Date Arguments</title>
	<description>Examples using variables and constants:</description>
	<example><![CDATA[dim dt as D = {1/2/2015}
' Version 6
"FieldName > " + S_QUOTE({1/2/2015})
"FieldName > " + S_QUOTE(dt)
' Version 5
"FieldName > {" + DTOC(dt) + "}"
"FieldName > {" + DTOC({1/2/2015}) + "}" ]]></example>
</section>

<section>
	<title>Logical Arguments</title>
	<description>Examples using variables and constants:</description>
	<example><![CDATA[dim TF as L = .F.
' Version 6
"FieldName = " + S_QUOTE(.F.)
"FieldName = " + S_QUOTE(TF)
"FieldName = .F."
Version 5
"FieldName = " + IIF(TF, ".T.", ".F.")
"FieldName = .F." ]]></example>
</section>

<section>
	<title>Putting it all together</title>
	
	<example><![CDATA[dim TF as L = .F.
dim dsc as N = 2
dim dt as D = {1/2/2015}
dim nam as C = "James"
' Version 6
query.filter = "FieldName1 = " + S_QUOTE(TF) + " .and. FieldName2 > " + S_QUOTE(dt) + " .and. FieldName3 > " + S_QUOTE(dsc) + " .and. FieldName4 > " + S_QUOTE(nam)
Version 5
query.filter = "FieldName1 = " + IIF(TF, ".T.", ".F.") + " .and. FieldName2 > {" + DTOC(dt) + "}" + " .and. FieldName3 > " + dsc + " .and. FieldName4 > " + QUOTE(nam) ]]></example>
</section>

<section>
	<title>Character Order Expressions</title>
	<description>Record sorting is specified using a character order expression. While this type of expression has a character value, it is different from a normal character variable. It is a line of Xbasic code that will be interpreted.</description>
<note>This expression must be less than 240 characters long.</note>
</section>

<section>
	<description>When Alpha Anywhere sorts, it retrieves records and evaluates the order expression using the records' field values. as the order expression is evaluated for each record, the result, or key, is entered into an internal list. Alpha Anywhere then sorts the keys in this list alphabetically to determine the record order.
For example, you have the following table of customers:</description>
<list>
	<item>
		<name-title>State</name-title>
		<description-title>City and Lastname</description-title>
	</item>
	<item>
		<name>MA
</name>
		<description>
Boston
 
Marshall
 </description>
	</item>
	<item>
		<name>IL
</name>
		<description>
Springfield
 
Adams
 </description>
	</item>
	<item>
		<name>VT
</name>
		<description>
Burlington
 
McConnell
 </description>
	</item>
	<item>
		<name>VT
</name>
		<description>
Burlington
 
Flanders
 </description>
	</item>
	<item>
		<name>MA
</name>
		<description>
Wellesley
 
Gordon
 </description>
	</item>
	
</list>
</section>
	
	
<section>
	<description>If you want to sort these records by the STATE, CITY, and LASTNAME fields, you can use the order expression STATE+CITY+LASTNAME. Alpha Anywhere evaluates this order expression for each record and lists the keys as shown:</description>
	<list>
		<item>
			<name-title>Key
</name-title>
			
		</item>
		<item>
			<name>MABOSTON MARSHALL
</name>	
		</item>
		<item>
			<name>ILSPRINGFIELD ADAMS
</name>	
		</item>
		<item>
			<name>VTBURLINGTON MCCONNELL
</name>	
		</item>
		<item>
			<name>VTBURLINGTON FLANDERS
</name>	
		</item>
		<item>
			<name>MAWELLESLEY GORDON
</name>	
		</item>
		
		
		
	</list>
	
	
</section>	


<section>
	<description>The keys are sorted alphabetically, and then Alpha Anywhere displays the records in the correct order.</description>
	<list>
		<item>
			<name-title>Key</name-title>
		</item>
		<item>
			<name>ILSPRINGFIELD ADAMS</name>
		</item>
		<item>
			<name>MABOSTON MARSHALL</name>
		</item>
		<item>
			<name>MAWELLESLEY GORDON</name>
		</item>
		<item>
			<name>VTBURLINGTON FLANDERS</name>
		</item>
		<item>
			<name>VTBURLINGTON MCCONNELL</name>
		</item>
		
	</list>
	
</section>
<section>
	<list>
		<item>
			<name-title>State</name-title>
			<description-title>City and Lastname</description-title>
		</item>
		<item>
			<name>IL</name>
			<description>
Springfield, Adams</description>
		</item>
		<item>
			<name>MA</name>
			<description>Boston, Marshall</description>
		</item>
		<item>
			<name>MA</name>
			<description>Wellesley, Gordon</description>
		</item>
		<item>
			<name>VT</name>
			<description>Burlington, Flanders</description>
		</item>
		<item>
			<name>VT</name>
			<description>Burlington, McConnell</description>
		</item>
		
	</list>
</section>
<section>
	<description>You do not need to use whole fields in order expressions, although you will have to consider whether the sort results will be adequate for your needs. The following expressions are all valid.</description>
	<example><![CDATA[query.order = "state + city + lastname"
query.order = "left(state,3) + left(city,4) + lastname"
 ]]></example>
</section>

<section>
	<description>In the Interactive window of the Code Editor, you can see the results of an order expression.</description>
	<example><![CDATA[dim tbl as P
dim qry as P
tbl = table.open("customer")
query.order = "left(lastname,1)+left(firstname,1)"
query.filter = ".T."
qry = tbl.query_create()
tbl.fetch_first()
while .not. tbl.fetch_eof()
#? tbl.firstname + tbl.lastname
#tbl.fetch_next()
#wend
Randi              Adams              
Winston            Abrams             
George             Boschetti          
Jeffrey            Bernstein          
John               Baker              
Leonard            Burtonski          
Tom                Barber             
Herb               Copen
... ]]></example>
<note>Using less than the entire field value results in a list that is not completely alphabetically ordered.</note>
</section>

<section>
	<description>Alpha Anywhere creates and sorts keys automatically, so you do not need to know much about keys, except that they are created using an order expression and are sorted alphabetically.
When creating order expressions, there are tools available to you: the Order Builder and the Expression Builder. The Order Builder is the easiest way to create an order expression, and is appropriate for most situations.
The Expression Builder is more involved, but it lets you test the order expression by displaying the keys that are generated.
</description>

</section>
	
<section>
	<title>Adding Quote Characters</title>
	<description>If you need to include a quote in an expression, use a backslash to escape the quote.</description>
	<example><![CDATA[my_var = "He said \"Hello, how are you?\""
? my_var
= He said "Hello, how are you?" ]]></example>
</section>
<section>
	<description>or you can use chr(34), such as:</description>
	<example><![CDATA[my_var = "He said " + chr(34) + "Hello, how are you?" + chr(34)
 ]]></example>
</section>
<section>
	<description>and finally, you can use the QUOTE() function:</description>
	<example><![CDATA[my_var = "He said " + quote("Hello, how are you?")
 ]]></example>
</section>
<section>
	<description>All of these give you the same end result, so it's a matter of personal preference.</description>
</section>
	
<section>
	<title>Adding Backslash Characters</title>
	<description>If you need to include a backslash in an expression, use a second backslash to escape it.</description>
	<example><![CDATA[myvar = "\\"
? myvar
= "\" ]]></example>
</section>


	</sections>
<see>
	<ref link="Writing Expressions">Writing Expressions</ref>
	<ref link="DTOC Function">DTOC()</ref>
	<ref link="S_QUOTE Function">S_QUOTE()</ref>
	<ref link="IIF Function">IIF()</ref>
</see>	
</page>