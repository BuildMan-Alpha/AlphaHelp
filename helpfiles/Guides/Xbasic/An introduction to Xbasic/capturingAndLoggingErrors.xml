<page build="0">
    <shortlink>xbasic guide error logging</shortlink>
    <topic parent="Xbasic Guide" parentType="guide" elementName="Capturing and Logging Errors">Capturing and Logging Errors</topic>
    <description></description>
    <sections>
        <section>
            <description>
                <p>If an unexpected problem occurs when a script executes (i.e., a runtime error), Xbasic generates an error message. Unhandled errors may be shown to the user if they occur in an Ajax callback or server-side event. Because Xbasic runtime errors are often cryptic and cannot be fixed by the end-user, you want to include error handling to trap and log errors when they happen.</p>
            </description>
        </section>
        <section>
            <title>ON ERROR GOTO</title>
            <description>
                <p>An easy way to avoid sending cryptic error messages to your users is to use an error handler. The ON ERROR...GOTO statement can be wrapped around any Xbasic code to add error handling. For example:</p>
                <p>
                    <example code="xb"><![CDATA[FUNCTION myFunction AS C ()

ON ERROR GOTO HandleError

    'Xbasic Code to Execute

    'If we reach this point, no errors occurred!
    'Exit the function to prevent executing the HandleError code
    EXIT FUNCTION

HandleError:
    'Xbasic to handle the error
    'Get the error code:
    err = error_code_get()
    'Get the error message:
    msg = error_text_get(err)

    'Log error message to TRACE log on server:
    log_msg = "Encountered Error #" + err + " in myFunction(): " + msg
    TRACE.writeLn(log_msg,"myFunction")

    myFunction = "Problem executing callback."

END FUNCTION]]></example>
                </p>
                <p>An easy way to avoid sending cryptic error messages to your users is to use an error handler. The ON ERROR...GOTO statement can be wrapped around any Xbasic code to add error handling. For example:</p>
                <p>
                    <example code="xb"><![CDATA[*[em:labelname]*:]]></example>
                </p>
                <p>A label defines a place that can be jumped to using the GOTO statement. The label and error handling code should be defined at the end of your script. The label to go to is specified at the end of the ON ERROR...GOTO line at the beginning of your script:</p>
                <p>
                    <example code="xb"><![CDATA[ON ERROR GOTO *[em:labelname]*]]></example>
                </p>
                <p>Unlike IF statements, when the label is encountered after an ON ERROR...GOTO declaration, it is not skipped. A label is simply a named location that can be jumped to using the GOTO statement. In order to prevent the execution of error-handling code specified after the label, you must use an END, EXIT FUNCTION, or RETURN statement before the label is encountered.</p>
            </description>
        </section>
        <section>
            <title>Logging: Using the Trace Log</title>
            <description>
                <p>Log files are useful for recording information about events in a published application. If an error occurs in your application, you can use a log file to capture the error message and other details that you need to know to diagnose and correct the issue. The Trace Log is an ideal place to write out error information. The Trace Log is available both in the IDE (the Trace window) and in a deployed application (the Trace Log folder).</p>
                <p>To send text output to the Trace Log, you can use the TRACE.writeLn() method. The TRACE.writeLn() method takes two parameters: the message to write to the Trace Log and an optional log name. For example, run the following code in the Interactive Window:</p>
                <p>
                    <example code="xb"><![CDATA[TRACE.writeLn("Log message","My Log")]]></example>
                </p>
                <p>To view the Trace Log, select View &gt; Trace Window from the main menu on the Web Projects Control Panel. Locate the "My Log" tab in the Trace Window and open it. You should see the message "Log message" in the message window:</p>
            </description>
            <figure>
                <link>images/image011.png</link>
            </figure>
        </section>
        <section>
            <description>
                <p>If you do not specify a log name for the second parameter, the message is written to the "User" log.</p>
            </description>
        </section>
    </sections>
    <next>
        <link link="xbasic guide sql">Working with SQL Data Using Xbasic</link>
    </next>
</page>