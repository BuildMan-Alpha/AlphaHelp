<page build="0">
    <shortlink>xbasic guide expressions</shortlink>
    <topic parent="Xbasic Guide" parentType="guide" elementName="Expressions">Xbasic Guide - Expressions</topic>
    <description>
    </description>
    <sections>
        <section>
            <description>
                <p>An expression is a combination of variables, constants, operators, and functions that evaluate to another value. For example, in the code below, the text to the right of the equal (=) sign is an expression:</p>
                <p>
                    <example code="xb"><![CDATA[Name = Firstname + " " + Lastname]]></example>
                </p>
                <p></p>
            </description>
        </section>
        <section>
            <title>Operators</title>
            <description>
                <p>An operator is a symbol used to represent a mathematical, relational, logical, or string operation. For example, the asterisk (*) character represents multiplication. Functions, field names, and constants can be combined with operators to form complex expressions. Most operators use the following syntax:</p>
                <p>
                    <example code="xb"><![CDATA[expression operator expression]]></example>
                </p>
                <p>We have used several operators and functions in this guide already, including the assignment (=) operator to assign values to variables, the concatenation (+) operator to create character strings by combining variables (name, dayOfWeek) and string constants ("Hello ", "Today is "), and the ? output operator to display the values of variables and functions in the Interactive Window.</p>
                <p>
                    <example code="xb"><![CDATA[result = 12 * 7
? result
= 84]]></example>
                </p>
                <p>Expressions execute in the order of Precedence. Operator Precedence defines the order in which operators in an expression execute. In general, operators are evaluated in the following order:</p>
                <p>
                    <list bullet="true">
                        <item>
                            <name>Parentheses and Function calls</name>
                        </item>
                        <item>
                            <name>Negation (.NOT.)</name>
                        </item>
                        <item>
                            <name>Exponentiation (^, **)</name>
                        </item>
                        <item>
                            <name>Multiplication, Division, and Substring Inclusion (*, /, $, !$)</name>
                        </item>
                        <item>
                            <name>Addition and subtraction (+, -)</name>
                        </item>
                        <item>
                            <name>Relative and relative or equal (&lt;=, &gt;=, &lt;, &gt;)</name>
                        </item>
                        <item>
                            <name>Equal, Exactly Equal, Not Equal, and Not Exactly Equal (=, ==, &lt;&gt;, !=)</name>
                        </item>
                        <item>
                            <name>And and Exclusive Or (.AND., .XOR.)</name>
                        </item>
                        <item>
                            <name>OR (.OR.)</name>
                        </item>
                    </list>
                </p>
                <p>Including operators in order according to their precedence allows implied parentheses when combining operations. For example:</p>
                <p>
                    <example code="xb"><![CDATA[A >= 5 .AND. B = 10 .OR. A >= 50
(A >= 5 .AND. B = 10) .OR. A >= 50]]></example>
                </p>
                <p>Because the .AND. operator has precedence over the .OR. operator, both statements are equivalent. When multiple operations have the same precedence, they evaluate from left to right. For example:</p>
                <p>
                    <example code="xb"><![CDATA[? 0.6 < 10 .AND. "Apple"="Apple" .AND. "Alpha" < "Beta"
= .T]]></example>
                </p>
            </description>
        </section>
        <section>
            <cases>
                <case>
                    <title nested="2">Mathematical Operators</title>
                    <description>
                        <p>Mathematical operators are used in numeric, date, or character expressions to yield results of the same type.</p>
                    </description>
                </case>
                <case>
                    <description>
                        <table>
                            <tr>
                                <th>Operator</th>
                                <th>Description</th>
                                <th>Example</th>
                            </tr>
                            <tr>
                                <td>*[bold:()]*</td>
                                <td>Parentheses. Used to group operations</td>
                                <td>
                                    <p>
                                        <example code="xb"><![CDATA[? (3 + 2) * 5
= 25]]></example>
                                    </p>
                                </td>
                            </tr>
                            <tr>
                                <td>*[bold:^]*</td>
                                <td>Exponentiation.</td>
                                <td>
                                    <p>
                                        <example code="xb"><![CDATA[? 10^2
= 100]]></example>
                                    </p>
                                </td>
                            </tr>
                            <tr>
                                <td>*[bold:**]*</td>
                                <td>Exponentiation.</td>
                                <td>
                                    <p>
                                        <example code="xb"><![CDATA[? 7**2
= 49]]></example>
                                    </p>
                                </td>
                            </tr>
                            <tr>
                                <td>*[bold:*]*</td>
                                <td>Multiplication.</td>
                                <td>
                                    <p>
                                        <example code="xb"><![CDATA[? 8 * 8
= 64]]></example>
                                    </p>
                                </td>
                            </tr>
                            <tr>
                                <td>*[bold:/]*</td>
                                <td>Division.</td>
                                <td>
                                    <p>
                                        <example code="xb"><![CDATA[? 144 / 12
= 12]]></example>
                                    </p>
                                </td>
                            </tr>
                            <tr>
                                <td>*[bold:+]*</td>
                                <td>Addition. Adds two numbers, dates, or time values together. When used with characters, the two variables are concatenated.</td>
                                <td>
                                    <p>
                                        <example code="xb"><![CDATA[? 1+3
= 4
? {1/23/2001}+30
= {02/22/2001}
? {08/19/2019 03:14:58 77 pm} + 32000
= 08/20/2019 12:08:18 77 am
? "Welcome" + " " + "Home"
= "Welcome Home"]]></example>
                                    </p>
                                </td>
                            </tr>
                            <tr>
                                <td>*[bold:-]*</td>
                                <td>Subtraction. Subtracts a number from another number, days from a date, or seconds from a time or date-time value. When used with character strings, concatenates two character values together, removing trailing whitespace from the first character string.</td>
                                <td>
                                    <p>
                                        <example code="xb"><![CDATA[? 12 - 7
= 5
? {3/15/2001} - 90
= {12/15/2000}
? {03:14:58 77 pm} - 3600
= 02:14:58 77 pm
? "race " - "car"
= "racecar"]]></example>
                                    </p>
                                </td>
                            </tr>
                        </table>
                    </description>
                </case>
                <case>
                    <title nested="2">Comparison Operators</title>
                    <description>
                        <p>Comparison operators compare two expressions which must be of the same type (either character, numeric, or date) and returns a result of true (.T.) or false (.F.). Any expression involving a comparison operator is called a logical expression. Comparison operators are typically used in creating search criteria, filters, or are used with the IF and CASE functions. All comparison operators, except for substring inclusion, can evaluate numeric, date, or character values. For date values, earlier dates have lower values. For character values, the character's corresponding ASCII value is used in the comparison.</p>
                    </description>
                </case>
                <case>
                    <description>
                        <table>
                            <tr>
                                <th>Operator</th>
                                <th>Description</th>
                                <th>Example</th>
                            </tr>
                            <tr>
                                <td>*[bold:=]*</td>
                                <td>Equals. When used in a logical expression, compares two values for equality. If used with character strings, removes all trailing whitespace and performs a case-insensitive comparison.</td>
                                <td>
                                    <p>
                                        <example code="xb"><![CDATA[? 7 = "7"
= .F.
? 7 = 4+3
= .T.
? "hello " = "HELLO"
= .T.]]></example>
                                    </p>
                                </td>
                            </tr>
                            <tr>
                                <td>*[bold:==]*</td>
                                <td>Exactly Matching. When used in a logical expression, compares two values for equality. When used with character strings, performs a case-sensitive comparison. Does not remove whitespace.</td>
                                <td>
                                    <p>
                                        <example code="xb"><![CDATA[? 7 == "7"
= .F.
? 7 == 4+3
= .T.
? "hello " == "HELLO"
= .F.]]></example>
                                    </p>
                                </td>
                            </tr>
                            <tr>
                                <td>*[bold:&gt;]*</td>
                                <td>Greater Than.</td>
                                <td>
                                    <p>
                                        <example code="xb"><![CDATA[? 7 > 7
= .F.
? {01/01/2020} > now()
= .T.]]></example>
                                    </p>
                                </td>
                            </tr>
                            <tr>
                                <td>*[bold:&gt;=]*</td>
                                <td>Greater Than or Equal To.</td>
                                <td>
                                    <p>
                                        <example code="xb"><![CDATA[? 7 >= 7
= .T.
? {01/01/2020} >= now()
= .F.]]></example>
                                    </p>
                                </td>
                            </tr>
                            <tr>
                                <td>*[bold:&lt;]*</td>
                                <td>Less Than.</td>
                                <td>
                                    <p>
                                        <example code="xb"><![CDATA[? {01/01/2020} < now() = .F.
? 10 < 12
= .T.]]></example>
                                    </p>
                                </td>
                            </tr>
                            <tr>
                                <td>*[bold:&lt;=]*</td>
                                <td>Less Than or Equal To.</td>
                                <td>
                                    <p>
                                        <example code="xb"><![CDATA[? 7 <= 6 = .F.
? {06/12/2019} <= date()
= .T.]]></example>
                                    </p>
                                </td>
                            </tr>
                            <tr>
                                <td>*[bold:&lt;&gt;]*</td>
                                <td>Not Equal. When used with character strings, the &lt;&gt; operator removes trailing whitespace from both strings and performs a case-insensitive comparison.</td>
                                <td>
                                    <p>
                                        <example code="xb"><![CDATA[? 2 <> 3 = .T.
? "Foley " <> "foley "
= .F.
? "Foley" <> "folley"
= .T.]]></example>
                                    </p>
                                </td>
                            </tr>
                            <tr>
                                <td>*[bold:!=]*</td>
                                <td>Not Exactly Matching. When used with character strings, performs a case-sensitive comparison. Does not remove whitespace.</td>
                                <td>
                                    <p>
                                        <example code="xb"><![CDATA[? 2 != 3
= .T.
? "Foley " != "foley "
= .T.
? "Foley" != "folley"
= .T.]]></example>
                                    </p>
                                </td>
                            </tr>
                            <tr>
                                <td>*[bold:$]*</td>
                                <td>Contains Substring. Performs a case-insensitive test to determine if the first character string is found in the second character string.</td>
                                <td>
                                    <p>
                                        <example code="xb"><![CDATA[? "CARS" $ "racecars"
= .T.
? "cars" $ "racecars"
= .T.]]></example>
                                    </p>
                                </td>
                            </tr>
                            <tr>
                                <td>*[bold:$$]*</td>
                                <td>Contains Substring. Performs a case-sensitive test to determine if the first character string is found in the second character string.</td>
                                <td>
                                    <p>
                                        <example code="xb"><![CDATA[? "CARS" $$ "racecars"
= .F.
? "cars" $$ "racecars"
= .T.]]></example>
                                    </p>
                                </td>
                            </tr>
                            <tr>
                                <td>*[bold:!$]*</td>
                                <td>Does Not Contain Substring. Performs a case-insensitive test to determine if the first character string does not exist in the second character string.</td>
                                <td>
                                    <p>
                                        <example code="xb"><![CDATA[? "cats" !$ "racecars"
= .T.]]></example>
                                    </p>
                                </td>
                            </tr>
                        </table>
                    </description>
                </case>
                <case>
                    <title nested="2">Logical Operations</title>
                    <description>
                        <p>Logical operators are used between logical expressions (two expressions that return a .T. or .F. value) to yield logical results.</p>
                    </description>
                </case>
                <case>
                    <description>
                        <table>
                            <tr>
                                <th>Operator</th>
                                <th>Description</th>
                                <th>Example</th>
                            </tr>
                            <tr>
                                <td>*[bold:=]*</td>
                                <td>Equals.</td>
                                <td>
                                    <p>
                                        <example code="xb"><![CDATA[? .T. = .T.
= .T.
? .F. = .F.
= .T.
? .F. = .T.
= .F.]]></example>
                                    </p>
                                </td>
                            </tr>
                            <tr>
                                <td>*[bold:.AND.]*</td>
                                <td>Logical AND.</td>
                                <td>
                                    <p>
                                        <example code="xb"><![CDATA[? .T. .AND. .F.
= .F.]]></example>
                                    </p>
                                </td>
                            </tr>
                            <tr>
                                <td>*[bold:.OR.]*</td>
                                <td>Logical OR.</td>
                                <td>
                                    <p>
                                        <example code="xb"><![CDATA[? .T. .OR. .F.
= .T.]]></example>
                                    </p>
                                </td>
                            </tr>
                            <tr>
                                <td>*[bold:.XOR.]*</td>
                                <td>Logical XOR.</td>
                                <td>
                                    <p>
                                        <example code="xb"><![CDATA[? .T. .XOR. .F.
= .T.
? .T. .XOR. .T.
= .F.
? .F. .XOR. .F.
= .F.]]></example>
                                    </p>
                                </td>
                            </tr>
                            <tr>
                                <td>*[bold:.NOT.]*</td>
                                <td>Negation.</td>
                                <td>
                                    <p>
                                        <example code="xb"><![CDATA[? .NOT. (4 == 5)
= .T.]]></example>
                                    </p>
                                </td>
                            </tr>
                        </table>
                    </description>
                </case>
            </cases>
        </section>
        <section>
            <title>Delimiters</title>
            <description>
                <p>Constant values can be assigned to character strings using one of two methods: double-quotes (") and delimiters. When declaring multi-line character strings with double-quotes, you must concatenate additional lines using a combination of the crlf() function to insert a new line and the concatenation (+) operator. For example:</p>
                <p>
                    <example code="xb"><![CDATA[DIM str AS C
str = "This is the first line." + crlf()
str = str + "This is the second line." + crlf()
str = str + "This is the last line."]]></example>
                </p>
                <p>This example can be simplified by using delimiters. Delimiters are used to define multi-line character strings. A character string declared using delimiters begins with the &lt;&lt;%delimiter% statement and ends with the %delimiter% statement. The text, delimiter, can be any value you desire as long as it is identical in the beginning and ending delimiter operator. For example, we can recreate the previous example using delimiters as follows:</p>
                <p>
                    <example code="xb"><![CDATA[DIM str AS C
str = <<%myStr%
This is the first line.
This is the second line.
This is the last line.
%myStr%]]></example>
                </p>
                <p>*[bold:IMPORTANT: ]*&lt;&lt;%DELIMITER% must be terminated with a newline. Any spaces or other characters after the closing % will result in an "Extra characters at end of expression" error.</p>
                <p>The Xbasic auto help system provides suggestions for delimiters as you write your scripts. There are several special case delimiters, such as %code% and %html%, which add unique behaviors such as syntax highlighting and code validation. The delimiters offered through auto help include:</p>

            </description>
        </section>
        <section>
            <description>
                <table>
                    <tr>
                        <th>Delimiter</th>
                        <th>Description</th>
                    </tr>
                    <tr>
                        <td>
                            <p>*[bold:&lt;&lt;%code%]*</p>
                            <p>*[bold:%code%]*</p>
                        </td>
                        <td>
                            <p>Xbasic code string. Xbasic written inside code blocks will have full access to auto help and includes syntax highlighting.</p>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <p>*[bold:&lt;&lt;%css%]*</p>
                            <p>*[bold:%css%]*</p>
                        </td>
                        <td>
                            <p>CSS code string. CSS written inside a CSS block will include syntax highlighting and auto help.</p>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <p>*[bold:&lt;&lt;%html%]*</p>
                            <p>*[bold:%html%]*</p>
                        </td>
                        <td>
                            <p>HTML code string. HTML written inside html blocks will have syntax highlighting and auto help.</p>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <p>*[bold:&lt;&lt;%js%]*</p>
                            <p>*[bold:%js%]*</p>
                        </td>
                        <td>
                            <p>JavaScript code string.</p>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <p>*[bold:&lt;&lt;%json%]*</p>
                            <p>*[bold:%json%]*</p>
                        </td>
                        <td>
                            <p>JSON string.</p>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <p>*[bold:&lt;&lt;%xml%]*</p>
                            <p>*[bold:%xml%]*</p>
                        </td>
                        <td>
                            <p>XML string. XML code written inside xml blocks will have syntax highlighting and auto help.</p>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <p>*[bold:&lt;&lt;%str%]*</p>
                            <p>*[bold:%str%]*</p>
                            <p>*[bold:&lt;&lt;%txt%]*</p>
                            <p>*[bold:%txt%]*</p>
                        </td>
                        <td>
                            <p>Text string. No special formatting is applied.</p>
                        </td>
                    </tr>
                </table>
            </description>
        </section>
        <section>
            <title>Comments</title>
            <description>
                <p>You can add comments to Xbasic by starting a line with an apostrophe ('). For example:</p>
                <p>
                    <example code=""><![CDATA['This is a comment]]></example>
                </p>
                <p>Comments are useful for describing the purpose or behavior of an Xbasic script or function. All text in a comment is ignored when an Xbasic script executes. Comments are used in examples throughout this guide to explain what a script does.</p>
                <p>
                    <example code=""><![CDATA['Square the value
square = value * value

'Create a list of countries
DIM europe AS C = "Denmark,Norway,Sweden"
]]>                    </example>
                    <p>Comments can also be used to disable code that you don't want to execute but would like to keep in your script:</p>
                </p>
                <p>
                    <example code=""><![CDATA['DIM field_value AS D
'DELETE field_value
]]>                    </example>
                </p>
            </description>
        </section>
    </sections>
    <next>
        <link link="xbasic guide conditionals">Conditional Statements</link>
    </next>
</page>