<page build="0">
    <shortlink>xbasic guide variables</shortlink>
    <topic parent="Xbasic Guide" parentType="guide" elementName="Variables and Data Types">Xbasic Guide - Variables and Data Types</topic>
    <description>A description</description>
    <sections>
        <section>
            <description>
                <p>Variables store values for later use. Before a variable is used either by a script or in an expression, it must be declared. A variable is declared either explicitly as a formal declaration in a script, a table, a set, a form, or an application; or implicitly by assigning it a value for the first time in a script. In general, a variable declaration must specify two things: the name of the variable, and the type of data the variable can contain.</p>
                <p>A variable name must start with a letter (*[xb:A]* to *[xb:Z]*, *[xb:a]* to *[xb:z]*). Subsequent characters can be alphanumeric or an underscore (*[xb:A]* to *[xb:Z]*, *[xb:a]* to *[xb:z]*, *[xb:0]* to *[xb:9]*, *[xb:_]*). Variable names are not case-sensitive, so the names *[xb:GONZO]* and *[xb:Gonzo]* refer to the same thing. Variable names cannot contain spaces. Xbasic does not prevent you from using a keyword as a variable name; however, you should prefer to avoid using keywords as variable names in your scripts. A list of keywords can be found in "Xbasic Keywords" in the Appendix.</p>
                <p>A variable is implicitly defined by assigning it a value with the assignment operator (*[xb:=]*), using it in a *[xb:FOR]* loop statement, or declaring it as a parameter of a function.</p>
                <p>
<!-- the none: emphasis is used below to escape the bracket because of proximity to the closing em: of the previous word -->
                    <example code="xb"><![CDATA[*[em:VariableName]* = *[em:Expression]*
*[em:VariableName]**[none:[]**[em:Subscript]*] = *[em:Expression]*
FOR *[em:VariableName]* = *[em:StartValue]* TO *[em:EndValue]*
FUNCTION *[em:FunctionName]* AS *[em:DataType]* (*[em:Parameter]* AS *[em:DataType]*, *[em:Parameter]* AS *[em:DataType]*,...)]]></example>
                </p>
                <p>For example:</p>
                <p>
                    <example code="xb"><![CDATA[x = 3
arr[2] = "Orange"
FOR index = 1 TO 10]]></example>
                </p>
                <p>It is often important to explicitly define a variable before using it in a script. The *[xb:DIM]* statement explicitly defines variables:</p>
                <p>
                    <example code="xb"><![CDATA[DIM variable_name AS data_type]]></example>
                </p>
                <p>For example:</p>
                <p>
                    <example code="xb"><![CDATA[DIM x AS N 'a numeric variable
DIM arr[0] AS C 'a character array
DIM args AS SQL::Arguments 'a SQL Arguments object]]></example>
                </p>
                <p>An explicit declaration is necessary if it is ambiguous where the variable is used or if Xbasic Strict Mode is enabled. When strict mode is enabled, all variables must be declared before they can be used.</p>
                <p>The *[xb:DIM]* statement is also necessary if you wish to create a complex variable, such as an array or object pointer variable.</p>
            </description>
        </section>
        <section>
            <title>Data Types</title>
            <description>
                <p>In the statement *[xb:DIM variable_name AS data_type]*, the *[xb:data_type]* declares the type of data stored in the variable. Xbasic data types can be simple types, such as character, logical, or numeric, or more complex types such as arrays, collections, objects, or function pointers. You can also declare that a variable can contain any value.</p>
            </description>
        </section>
        <section>
            <description>
                <table>
                    <tr>
                        <th>Symbol</th>
                        <th>Name</th>
                        <th>Description</th>
                    </tr>
                    <tr>
                        <td>*[bold:A]*</td>
                        <td>Any</td>
                        <td>The variable can contain any data type</td>
                    </tr>
                    <tr>
                        <td>*[bold:B]*</td>
                        <td>Blob</td>
                        <td>Binary data</td>
                    </tr>
                    <tr>
                        <td>*[bold:C]*</td>
                        <td>Character</td>
                        <td>Alpha-numeric characters</td>
                    </tr>
                    <tr>
                        <td>*[bold:D]*</td>
                        <td>Date</td>
                        <td>A date between 00/00/0000 and 12/31/9999</td>
                    </tr>
                    <tr>
                        <td>*[bold:F]*</td>
                        <td>Function Pointer</td>
                        <td>Contains a pointer to a function name</td>
                    </tr>
                    <tr>
                        <td>*[bold:L]*</td>
                        <td>Logical</td>
                        <td>True (.T.) or false (.F.)</td>
                    </tr>
                    <tr>
                        <td>*[bold:N]*</td>
                        <td>Numeric</td>
                        <td>A number with a length up to 19 digits</td>
                    </tr>
                    <tr>
                        <td>*[bold:P]*</td>
                        <td>Object Pointer Variable or "Dot Variable"</td>
                        <td>A reference (pointer) to an object, or a pointer to a "dot" variable</td>
                    </tr>
                    <tr>
                        <td>*[bold:T]*</td>
                        <td>Time. A date/time value.</td>
                        <td>A time value that stores the date, hour, minute, seconds, and hundredths of a second</td>
                    </tr>
                    <tr>
                        <td>*[bold:U]*</td>
                        <td>Collection</td>
                        <td>Any data type, depending on what the collection contains</td>
                    </tr>
                </table>
            </description>
        </section>
        <section>
            <description>
                <p>In addition to the basic types listed above, you can also declare class variables. Class variables have methods and types. The Alpha Anywhere Xbasic library includes a wide variety of classes for performing tasks, such as manipulating JSON data, calling REST services, performing SQL queries, and more. A variable declared as a class type uses the *[xb:DIM]* statement. For example:</p>
                <p>
                    <example code="xb"><![CDATA[DIM conn AS SQL::Connection
DIM args AS SQL::Arguments]]></example>
                </p>
            </description>
        </section>
        <section>
            <title>Redeclaring Variables</title>
            <description>
                <p>Once a variable's type is declared, you cannot change it. Attempting to assign a value to a variable that is not the same type as the variable causes an Xbasic error. For example, run the following Xbasic in the Interactive Window:</p>
                <p>
                    <example code="xb"><![CDATA[DIM myVar AS N
myVar = 67

myVar = now()]]></example>
                </p>
                <p>Note that when you execute the myVar = now() statement, an error appears in the Interactive Window:</p>
                <p>
                    <example code="xb"><![CDATA[ERROR: Variable type mismatch: Cannot assign data of type 'T' to variable of type 'N'.]]></example>
                </p>
                <p>Variables cannot be assigned values of another type. If you want to change the data type stored by a variable, the variable must first be deleted using the DELETE statement. After deleting the variable, you can create it again with a different data type. EG:</p>
                <p>
                    <example code="xb"><![CDATA[DELETE myVar
DIM myVar AS T
myVar = now()]]></example>
                </p>
                <p>When working with large variables, it can be beneficial to DELETE them when they are no longer needed. Loading files from disk, SQL query results, and data returned from web services can consume large amounts of memory.</p>
                <p>Deleting variables is also useful when working in the Interactive Window to "reset" variables to an undefined state, ensuring that the variables contain the data you expect. For example, enter the following statements in the Interactive Window:</p>
                <p>
                    <example code="xb"><![CDATA[DIM args AS SQL::Arguments
args.set("City","Madrid")
args.set("Country","Spain")
? args.find("City")

DELETE args

DIM args AS SQL::Arguments
args.set("Country","Spain")
? args.find("City")]]></example>
                </p>
                <p>The first time you execute ? args.find("City"), the following object is output in the Interactive Window:</p>
                <p>
                    <example code="xb"><![CDATA[= Data = "Madrid"
IsNull = .F.
Name = "city"
Usage = 0
XML = <SQLArgument>
<Name>city</Name>
<Data Type="C">Madrid</Data>
<IsNull Type="L">0</IsNull>
<Usage>Input</Usage>
</SQLArgument>
]]></example>
                </p>
                <p>The second time you execute ? args.find("City"), you see the following statement:</p>
                <p>
                    <example code="xb"><![CDATA[= <No data returned>]]></example>
                </p>
                <p>DELETE args deleted the args variable. When the args variable was then recreated using the *[xb:DIM]* statement, the "City" argument was never created using the set() method of the args variable.</p>
            </description>
        </section>
        <section>
            <title>Converting Data Types</title>
            <description>
                <p>A value can be converted to other types using the convert_type() function.</p>
                <p>
                    <example code="xb"><![CDATA[DIM quantity AS N
quantity = convert_type("123","N")]]></example>
                </p>
                <p>convert_type() converts the value of a variable into the requested type. If data value cannot be converted to the requested type, the function will return a character value.</p>
                <p>Values can also be implicitly converted to character strings using the concatenation operator (+). For example, run the code below in the Interactive Window:</p>
                <p>
                    <example code="xb"><![CDATA[DIM price AS N = 1.5
DIM quantity AS N = 10
DIM total AS N
total = price * quantity
? typeof(total)
totalStr = "" + total
? typeof(totalStr)]]></example>
                </p>
                <p>Specific functions exist for converting data to formatted character strings and converting character strings to other data types, such as date and time values. For example, the time() function converts a date or time value to a formatted character string.</p>
                <p>For more information about converting character variables, see [Character Conversion Functions].</p>
            </description>
        </section>
        <section>
            <title>Default Values</title>
            <description>
                <p>Variables can be assigned a default value when they are declared. Default values are used in cases where a variable may or may not exist but is required later in the script. Defining default values is also useful when working with session variables in web applications (we discuss session variables later in this guide.)</p>
                <p>To specify a default value for a variable, use the DEFAULT keyword when the variable is declared:</p>
                <p>
                    <example code="xb"><![CDATA[DIM name AS C = DEFAULT "Steve"]]></example>
                </p>
                <p>Using the DEFAULT keyword to assign the initial value to a variable is similar to using the assignment operator (e.g., *[xb:DIM name AS C = "Steve"]*) to set the variable's value with one major difference: if the variable already exists, the *[xb:DIM AS DEFAULT]* statement is ignored.</p>
                <p>When declaring a variable with the DEFAULT keyword, Alpha Anywhere first checks to see if the variable exists. If the variable does not exist, the variable is created and assigned the specified DEFAULT value. If the variable already exists, however, the variable the existing variable is not modified.</p>
                <p>The Interactive Window is a useful tool to help understand how the DEFAULT keyword works. Copy the following code into the Interactive Window, replacing &lt;Your name here&gt; with your name:</p>
                <p>
                    <example code="xb"><![CDATA[name = "<Your name here>"
today = date()
dayOfWeek = time("Weekday", today)
DIM name AS C = DEFAULT "Susan"
message = "Hello " + name + ". "
message = message + "Today is " + dayOfWeek + "."
showvar(message,"Salutations")]]></example>
                </p>
                <p>Run the script by selecting all of the code and using the "Run Selected Script" tool from the right-click menu. When the script executes, it creates a variable called name and sets the value of the variable to your name. When the DIM name AS C = DEFAULT "Susan" statement is processed, Alpha Anywhere ignores the statement because the variable name already exists and has a value.</p>
                <p>Now, change the first line to the following:</p>
                <p>
                    <example code="xb"><![CDATA[DELETE name]]></example>
                </p>
                <p>Rerun the script. This time, when the script executes, it deletes the name variable. When the DIM name AS C = DEFAULT "Susan" statement executes, the name variable doesn't exist, so it is created and assigned the value "Susan".</p>
            </description>
            <figure>
                <link>images/image008.png</link>
            </figure>
        </section>
    </sections>
    <next>
        <link link="xbasic guide expressions">Expressions</link>
    </next>
    <links>
        <link link="api%20character%20conversion%20function">Character Conversion Functions</link>
    </links>
</page>