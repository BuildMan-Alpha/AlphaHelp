<page>
	<shortlink>server dynamic sql database credentials</shortlink>
	<topic>Dynamic SQL Database Credentials</topic>
	<description>By default all users who use an AlphaDAO connection to the SQL database using the same credentials. These credentials are defined in the AlphaDAO Named 	Connections defined in the application publish profile.</description>
	<sections>
		<section>
			<description>For example, when the developer builds an application he may specify that a List control is based on a named connection string called 'MarketingData'. In the Publishing Profile that the developer creates before publishing the application, the developer might specify that this named connection string resolves to:</description>
			<example code="xb"><![CDATA[{A5API='SQLServer',A5DBVersion=2008,Server='myappserver',A5ANSINullPadWarn=Default, UserName='frank',Password='mysecretPassword',Database='Northwind'}]]></example>
		</section>
		<section>
			<description>Every user who uses this application will now connect to the SQL database using a username of 'frank' and a password of 'mysecretpassword'. In many applications, this will be perfectly fine. However, in some applications (particularly applications for which the Security Framework is turned on, and each user is required to log into the application), users may be required to connect to the SQL database using their own credentials. This is easily accomplished by calling a method of the Context.Session object:</description>
			<example code="xb"><![CDATA[Context.Session.SetSQLCredentials(Username as c, Password as c)]]></example>
		</section>
		<section>
			<description>For example:</description>
			<example code="xb"><![CDATA[Context.Session.SetSQLCredentials("Dave","DavesPassword") ]]></example>
		</section>
		<section>
			<description>The typical way in which you will use this new Session method is:</description>
			<cases>
				<case>
					<description>When you set up the Security Framework for your Web Project you will turn on the 'Enable external user identifier field' and you will specify the name of the session variable that you want to hold the special ULINK (short for 'User Link') value for each user. The ULINK session variable (defined to be 'ulinkvalue' in the screen shot below) gets populated with a special value for each user when they log in. </description>
				</case>
				<case>
					<description>You will specify the 'Redirect page after login' page, and you will add code (shown below) to this page.</description>
					<example code="xb"><![CDATA[<%a5'insert code here that uses the value in the session.ulinkvalue field to look up the
'appropriate username and password for this user.
'Then, call the session object's .setSQLCredentials() method.

Context.Session.SetSQLCredentials("userNameForUser","passwordForUser")

%>]]></example>
				</case>
				<case>
					<description>When you define each user account in your application, you will specify the value that should be placed in the session variable for the identifier field (the ULINK field). See the 'External User ID Value' prompt in the 'Edit user' screen shot shown below.</description>
					<figure>
						<link>images/securityframeworksettings1.jpg</link>
					</figure>

					<figure>
						<link>images/securityframeworksettings2.jpg</link>
					</figure>
				</case>
			</cases>
		</section>
	</sections>
</page>