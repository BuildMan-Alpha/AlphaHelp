<page>
    <topic>Creating Dynamic Connection Strings</topic>
    <description>A dynamic connection string is a connection string that is resolved at the time the database connection is opened, rather than at the time the connection string is defined.</description>
    <discussion>Dynamic connection strings can be created in Alpha Anywhere in one of two ways: by defining a connection string using the *[xb:DynamicConnection_]* prefix or using the *[xb:::EVAL::]* prefix, which allows you to define an Xbasic function or expression that is used to dynamically calculate the connection string.</discussion>
    <sections>
        <section>
            <title>Using the DynamicConnection_ Prefix to Define Dynamic Connection Strings</title>
            <description>
                <p>Dynamic connection strings can be defined using a prefix. A connection string named "*[xb:<![CDATA[DynamicConnection_<name>]]>]*", where <![CDATA[<name>]]> is a user-defined string identifying the connection string, will be resolved dynamically at runtime. For example:</p>
            </description>
            <example><![CDATA[DynamicConnection_MyCustomApplication]]></example>
        </section>
        <section>
            <description>
                <p>In the dynamic connection string above, the <![CDATA[<name>]]> is "MyCustomApplication".</p>
                <p>The actual value of the dynamic connection string is resolved by referring to a session variable called *[xb:<![CDATA[session.__protected__<name>]]>]*. For the dynamic connection string defined above, the session variable would be as follows:</p>
            </description>
            <example><![CDATA[session.__protected__MyCustomApplication]]></example>
        </section>
        <section>
            <description>
                <p>The value of *[xb:<![CDATA[session.__protected__<name>]]>]* defines the actual connection string to be used.</p>
                <p>The value of this session variable is typically set when the user logs into the application. For example, it could be set to a named connection such as:</p>
            </description>
            <example><![CDATA[::Name::User1Connection]]></example>
        </section>
        <section>
            <description>
                <p>Dynamic connections can be used directly in Grid and UX components but may not work as expected in .a5w pages or Xbasic scripts when using the SQL::Connection object. A connection string with the *[xb:DynamicConnection_]* prefix cannot be used with the SQL::Connection open function. Instead, you must use the *[xb:a5SQLConnectionOpen()]* function, which will evaluate the dynamic connection string before opening the connection. For example:</p>
            </description>
            <example code="xb"><![CDATA[session.__protected__conn = "::Name::myConnStr" ' change to any existing named connection string
dim cn as sql::Connection
if (a5SQLConnectionOpen(cn,"::Name::DynamicConnection_conn",session)) then
    dim tables as c = cn.listTables()
    cn.close()
    ui_msg_box("Tables in Database", tables)
else 
    ui_msg_box("Error Opening Database", "Could not open connection. Error was: " + cn.callResult())
end if]]></example>
        </section>
        <section>
            <title>Using Xbasic Expressions to Create Dynamic Connection Strings</title>
            <description>
                <p>Dynamic connection strings can also be created using the *[xb:::EVAL::]* prefix. The *[xb:::EVAL::]* prefix is used in the named connection string, similar to how the *[xb:::Name::]* prefix is used for named connections.</p>
                <p>Prefixing a connection string with *[xb:::EVAL::]* causes the connection string to be evaluated as an Xbasic expression.</p>
                <p>For example, consider the following connection string:</p>
            </description>
            <example><![CDATA[::EVAL::MyFunctionThatReturnsAConnString()]]></example>
        </section>
        <section>
            <description>
                <p>When an AlphaDAO connection is opened using the above string, the *[xb:MyFunctionThatReturnsAConnString()]* is evaluated and the return value (which would typically be a named connection string with the *[xb:::Name::]* prefix) is used as the connection string.</p>
            </description>
        </section>
        <section>
            <description>
                <p>The Xbasic function called by *[xb:::EVAL::]* can be a global Xbasic function or a function defined in an [Xbasic Module] for a web project.</p>
                <p>It may not be possible to create a global Xbasic function in a web application. Therefore, you need to use an [Xbasic Module].</p>
                <p>Functions defined in an Xbasic Module can be referenced in the *[xb:::EVAL::]* expression using the [require()] function. For example, assume an Xbasic Module called 'module1' has been defined with a function that computes the connection string named 'getConnectionString'. This function can be used with the *[xb:::EVAL::]* as shown below:</p>
            </description>
            <example code="xb"><![CDATA[::EVAL::require("module1").getConnectionString()]]></example>
        </section>
        <section>
            <description>
                <p>In addition to making function calls, inline Xbasic expressions can also be used with the *[xb:::EVAL::]* prefix. This was demonstrated in the previous example showing how to use functions defined Xbasic Modues to dynamically compute the connection string. In this next example, the dynamic connection string uses an inline Xbasic *[xb:if]* expression to compute the connection string:</p>
            </description>
            <example><![CDATA[::EVAL::if(customer = "Fred","::name::Fred","::name::EverybodyElse")]]></example>
        </section>
        <section>
            <description>
                <p>The *[xb:::EVAL::]* prefix is supported directly by the *[xb:open()]* method for a SQL::Connection object. For example:</p>
            </description>
            <example code="xb"><![CDATA[dim customer as C = ""

'uncomment the line below to see what happens when customer = "Fred"
'customer = "Fred"

dim connStr as c = <<%str%
::EVAL::if(customer = "Fred","::name::Fred","::name::EverybodyElse")
%str%

if (cn.open(connStr)) then
    dim connStr as c = cn.GetConnectionString()
    cn.close()
    ui_msg_box("Connection string", connStr)
else 
    ui_msg_box("Error Opening Database", "Could not open connection. Error was: " + cn.callResult())
end if]]></example>
        </section>
    </sections>
    <links>
        <link link="api%20require%20function%20source">require()</link>
        <link link="server xb web applications xbasic modules">Xbasic Module</link>
    </links>
    <see>
        <ref link="a5sqlconnectionopen function">a5SQLConnectionOpen Function</ref>
        <ref link="server xb building multi-tenant applications dynamic connection strings">Building Multi-Tenant Applications - Dynamic Connection Strings</ref>
    </see>
</page>