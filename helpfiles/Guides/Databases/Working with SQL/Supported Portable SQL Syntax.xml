<page>
    <topic>Supported Portable SQL Syntax</topic>
    <description>Overview of supported SQL syntax in portable SQL queries.</description>
    <discussion>
        <p>The SQL syntax that the Alpha Anywhere supports is first constrained by the SQL syntax supported by the target database. The Application Server has additional requirements.</p>
        <p>The following is a simplified SQL grammar syntax as supported by the Alpha Anywhere Portable SQL parser. Support for these constructs depends on the target database and its implementation of SQL.</p>
        <p>The grammar that follows shows the components of the grammar in the general format:</p>
        <p>
            <list>
                <item>
                    <name-title>Argument</name-title>
                    <description-title>Syntax</description-title>
                </item>
                <item>
                    <name>*[em:Argument_Name]*</name>
                    <description>
                        <p>
                            <example><![CDATA[*[em:Alternative]* | *[em:Alternative]* [ *[em:Optional_Value]* ]]]></example>
                        </p>
                    </description>
                </item>
            </list>
        </p>
    </discussion>
    <sections>
        <section>
            <title>Notes on Syntax</title>
            <steps>
                <step>
                    <description>Words beginning with lower case are rules.</description>
                </step>
                <step>
                    <description>Words in all capital letters are literals or key words and appear as typed. The actual select statement is item insensitive.</description>
                </step>
                <step>
                    <description>The vertical bar ( | ) indicates that any of the alternatives are valid. Commas are part of the input stream.</description>
                </step>
                <step>
                    <description>Items in square brackets [] are optional.</description>
                </step>
                <step>
                    <description>With some exceptions, parentheses shown are a required part of the input stream.</description>
                </step>
                <step>
                    <description>The FROM clause of a SELECT statement contains both TableName and AliasName, as in the following statement:</description>
                    <example><![CDATA[SELECT Customers.CompanyName, Customers.ContactName, Customers.ContactTitle FROM Customers Cust]]></example>
                </step>
                <step>
                    <description>The Application Server does not support the "SELECT *" syntax to select all fields from a table. You must reference the table name, as in "SELECT TableName.*".</description>
                </step>
            </steps>
        </section>
        <section>
            <title>Select Statement</title>
            <description>Select Statement Components and Syntax</description>
            <example><![CDATA[SELECT [ DISTINCT | ALL ROWS ] | FIRST integer ] *[em:Column_Item]* [, *[em:Column_Item]* ... ]
FROM *[em:Select_Table_Reference]* [, *[em:Select_Table_Reference]* ... ]
[ WHERE *[em:Logical_Expression]* ]
[ GROUP BY *[em:Value_Expr]* [, *[em:Value_Expr]* ... ] [ HAVING *[em:Logical_Expression]* ] ]
[ ORDER BY *[em:Column_Item]* [  ASC | DESC] [, *[em:Column_Item]* [ ASC | DESC ]  ... ] ]
[ UNION *[em:Select_Statement]* [ UNION *[em:Select_Statement]* ... ] ]
[ ORDER BY *[em:Column_Item]* [  ASC | DESC ] [, *[em:Column_Item]* [ ASC | DESC ]  ... ] ]
 ]]>            </example>
        </section>
        <section>
            <topic>Select Statement Arguments</topic>
            <list>
                <item>
                    <name-title>Argument</name-title>
                    <description-title>Syntax</description-title>
                </item>
                <item>
                    <name>Column_Item</name>
                    <description>
                        <p>
                            <example><![CDATA[*[em:Value_Expr]* [ AS *[em:Identifier]* ]
*[em:Identifier]* = *[em:Value_Expr]*]]></example>
                        </p>
                    </description>
                </item>
                <item>
                    <name>Column_Reference</name>
                    <description>
                        <p>
                            <example><![CDATA[[*[em:Identifier]*.]*[em:Identifier]*
[ *[em:Identifier]*.]*]]></example>
                        </p>
                    </description>
                </item>
                <item>
                    <name>Select_Table_Reference</name>
                    <description>
                        <p>
                            <example><![CDATA[[*[em:Identifier]*.]*[em:Identifier]* [[[ LEFT | FULL | RIGHT [OUTER]] | INNER ] JOIN *[em:Select_Table_Reference]* [ ON *[em:Logical_Expression]* ] ... ]] [ AS *[em:Identifier]* ]]]></example>
                        </p>
                        <p>
                            <list bullet="true">
                                <item>
                                    <name>JOIN is optional, but required if selecting data from multiple tables.</name>
                                </item>
                                <item>
                                    <name>JOIN type (LEFT, FULL, RIGHT, INNER) is optional. If no type is specified, an INNER JOIN is performed.</name>
                                </item>
                                <item>
                                    <name>OUTER can only be used with LEFT, FULL, or RIGHT.</name>
                                </item>
                                <item>
                                    <name>Specify *[xb:AS Identifier]* to define a table alias. E.g. *[xb:tableb AS b]*</name>
                                </item>
                                <item>
                                    <name>See [More about JOINs] below for more information about JOINs.</name>
                                </item>
                            </list>
                        </p>
                    </description>
                </item>
                <item>
                    <name>Logical_Expression</name>
                    <description>
                        <p>
                            <example><![CDATA[*[em:AND_Expression]* [ OR *[em:AND_Expression]* ... ]]]></example>
                        </p>
                    </description>
                </item>
                <item>
                    <name>AND_Expression</name>
                    <description>
                        <p>
                            <example><![CDATA[NOT *[em:Logical_Expression]* [ AND *[em:Logical_Expression]* ... ] |
EXISTS  *[em:Select_Statement]* |
*[em:Value_Expr]* *[em:Comparison_Operator]* [ ALL | SOME | ANY ]
( *[em:Select_Statement]* )
*[em:Value_Expr]* *[em:Comparison_Operator]* *[em:Value_Expr]*
*[em:Value_Expr]* IS NOT NULL
*[em:Value_Expr]* CONTAINS ( *[em:Column_Reference]*, String_Literal]* )
*[em:Value_Expr]* NOT LIKE *[em:Value_Expr]*
*[em:Value_Expr]* NOT BETWEEN *[em:Value_Expr]* AND *[em:Value_Expr]* |
*[em:Value_Expr]* NOT IN *[em:Select_Statement]* |
*[em:Value_Expr]* NOT IN ( *[em:Value_Expr]* [ *[em:Value_Expr]* ... ] )]]></example>
                        </p>
                    </description>
                </item>
                <item>
                    <name>Value_Expr</name>
                    <description>
                        <p>
                            <example><![CDATA[*[em:Constant]* [ *[em:Operator]* *[em:Value_Expr]* ]]]></example>
                        </p>
                    </description>
                </item>
                <item>
                    <name>Value_Expr</name>
                    <description>
                        <p>
                            <example><![CDATA[*[em:Multi_Expr]* [ *[em:Additive_Operator]* *[em:Value_Expr]* ... ]]]></example>
                        </p>
                    </description>
                </item>
                <item>
                    <name>Multi_Expr</name>
                    <description>
                        <p>
                            <example><![CDATA[*[em:Unary_Expression]* [ *[em:Multi_Operator]* *[em:Multi_Expr]* ... ]]]></example>
                        </p>
                    </description>
                </item>
                <item>
                    <name>Unary_Expression</name>
                    <description>
                        <p>
                            <example><![CDATA[[ *[em:Unary_Operator]* ] *[em:Sub_Expression2]*]]></example>
                        </p>
                    </description>
                </item>
                <item>
                    <name>Sub_Expression2</name>
                    <description>
                        <p>
                            <example><![CDATA[*[em:Function]* | *[em:Constant]* | NULL | *[em:Column_Reference]* | (  *[em:Select_Statement]* ) | *[em:Case]* | *[em:Cast]*]]></example>
                        </p>
                    </description>
                </item>
                <item>
                    <name>Function</name>
                    <description>
                        <p>
                            <example><![CDATA[*[em:Identifier]* ( [ ALL | DISTINCT ] *[em:Value_Expr]* | * ] ) |
*[em:Identifier]* ( *[em:Value_Expr]* [, *[em:Value_Expr]* ... ] ) |
"current_timestamp" | "current_user" | "session_user" | "system_user" | "user"]]></example>
                        </p>
                    </description>
                </item>
                <item>
                    <name>String_Literal</name>
                    <description>
                        <p>
                            <example><![CDATA[*[em:Unicode_String_Literal]* | *[em:ASCII_String_Literal]*]]></example>
                        </p>
                    </description>
                </item>
                <item>
                    <name>Identifier</name>
                    <description>
                        <p>
                            <example><![CDATA[*[em:Non_Quoted_Identifier]* | *[em:Quoted_Identifier]*]]></example>
                        </p>
                    </description>
                </item>
                <item>
                    <name>Constant</name>
                    <description>
                        <p>
                            <example><![CDATA[*[em:Integer]*, *[em:Real]*, *[em:String_Literal]*, *[em:Hex_Literal]*, *[em:Currency]*,
*[em:ODBC_Date_Time]*, *[em:Access_Date_Time]*]]></example>
                        </p>
                    </description>
                </item>
                <item>
                    <name>Unary_Operator</name>
                    <description>
                        <p>
                            <example><![CDATA[+ | - | ~]]></example>
                        </p>
                    </description>
                </item>
                <item>
                    <name>Additive_Operator</name>
                    <description>
                        <p>
                            <example><![CDATA[+ | - | &]]></example>
                        </p>
                    </description>
                </item>
                <item>
                    <name>Multi_Operator</name>
                    <description>
                        <p>
                            <example><![CDATA[* | / | MOD]]></example>
                        </p>
                    </description>
                </item>
                <item>
                    <name>Comparison_Operator</name>
                    <description>
                        <p>
                            <example><![CDATA[= | != | <> | <= | !> | < | >= | !< | >]]></example>
                        </p>
                    </description>
                </item>
            </list>
        </section>
        <section>
            <cases>
                <case>
                    <title nested="2">More about JOINs</title>
                    <description>
                        <p>JOINs can be tricky to get right in SQL. The image below describe seven of the most common JOINs performed on SQL tables.</p>
                    </description>
                    <figure>
                        <link>images/UnderstandingJOINS.png</link>
                    </figure>
                </case>
            </cases>
        </section>
        <section>
            <title>Delete Syntax</title>
            <description>
                <p>The Portable SQL DELETE statement deletes one or more records from the specified table.</p>
                <p>
                    <example><![CDATA[DELETE FROM *[em:Table_Name]* WHERE *[em:Column_Name]* = *[em:Value_Expression]*]]></example>
                </p>
            </description>
            <note>
                <p>Use [SQL::Arguments] in WHERE clauses to eliminate common SQL vulnerabilities (such as SQL injection attacks).</p>
            </note>
        </section>
        <section>
            <title>Update Syntax</title>
            <description>
                <p>The Portable SQL UPDATE statement modifies one or more records in the specified table.</p>
                <p>
                    <example><![CDATA[UPDATE *[em:Table_Name]* SET *[em:Column_Name]* = *[em:Value_Expression_1]* WHERE *[em:Column_Name]* = *[em:Value_Expression_2]*]]></example>
                </p>
            </description>
            <note>
                <p>Use [SQL::Arguments] in SET and WHERE clauses to eliminate common SQL vulnerabilities (such as SQL injection attacks).</p>
            </note>
        </section>
        <section>
            <title>Insert Syntax</title>
            <description>
                <p>The Portable SQL INSERT statement adds a record to the specified table.</p>
                <p>
                    <example><![CDATA[INSERT INTO *[em:Table_Name]* ( *[em:Column_Name_1]*, *[em:Column_Name_2]*, ... , *[em:Column_Name_N]* ) VALUES ( *[em:Value_Expression_1]*, *[em:Value_Expression_2]*, ... *[em:Value_Expression_N]* )]]></example>
                </p>
            </description>
            <note>
                <p>Use [SQL::Arguments] in VALUES to eliminate common SQL vulnerabilities (such as SQL injection attacks).</p>
            </note>
        </section>
    </sections>
    <see>
        <ref link="Portable SQL">Portable SQL</ref>
        <ref link="Portability Functions">Portability Functions</ref>
    </see>
    <links>
        <link href="#section2_More%20about%20JOINs">More about JOINs</link>
        <link link="api%20sql%20namespace%20arguments%20class">SQL::Arguments</link>
    </links>
</page>