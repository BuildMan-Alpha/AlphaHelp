<page>
    <shortlink>server ref sql Portable SQL Functions for GeographiesPortable SQL Functions for Geographies</shortlink>
    <topic>Portable SQL Functions for Geographies</topic>
    <description>These functions are only available from Alpha Anywhere when Portable SQL is used. They are intended to insulate you from the differences between the native SQL geography implementations in the supported databases. </description>
    <discussion>
        <p>All of the examples assume that you will be substituting the correct SpatialReferenceID value for the database currently in use for the argument :SRID.</p>
    </discussion>
    <sections>
        <section>
            <title>GeogAsBinary</title>
            <description>
                <p>*[sql:GeogAsBinary as C(Object as Geography)]*</p>
                <p>Return the object description in the Well Known Binary (WKB) format.</p>
            </description>
            <example code="sql">
                <![CDATA[select  GeogAsBinary(g.Location) from GeogTest g]]>
            </example>
        </section>
        <section>
            <title>GeogAsText</title>
            <description>
                <p>*[sql:GeogAsText as C(Object as Geography)]*</p>
                <p>Return the object description in the Well Known Text (WKT) format.</p>
            </description>
            <example code="sql">
                <![CDATA[select GeogAsText(g.Location) from GeogTest g]]>
            </example>
        </section>
        <section>
            <title>GeogCreateFromBinary</title>
            <description>
                <p>*[sql:GeogCreateFromBinary as Geography(Binary as B [, SpatialReferenceID as N])]*</p>
                <p>Create a geography object from Well Known Binary (WKB) format.</p>
            </description>
            <example code="xb">
                <![CDATA[dim MyBlob as B = base64decode("AQEAAAAAAAAAAAAkwAAAAAAAAChA")
args.add("WKB", MyBlob)
    
Connection.Execute("select GeogAsText(GeogCreateFromBinary(:WKB)) from GeogTest g")]]>
            </example>
        </section>
        <section>
            <title>GeogCreateFromText</title>
            <description>
                <p>*[sql:GeogCreateFromText as Geography(Text as C [, SpatialReferenceID as N])]*</p>
                <p>Create a geography object from Well Known Text (WKT) format.</p>
            </description>
            <example code="sql">
                <![CDATA[select first 1 GeogAsText(GeogCreateFromText('POINT(-10 27)')) from GeogTest g]]>
            </example>
        </section>
        <section>
            <title>GeogCreateLine</title>
            <description>
                <p>*[sql:GeogCreateLine as Geography (Longitude as N, Latitude as N ... [,SpatialReferenceID as N])]*</p>
                <p>Constructs a geographic line from two or more longitude/latitude pairs.</p>
            </description>
            <example code="sql">
                <![CDATA[select GeogCreateLine(1,2,3,4,5,6, :SRID) from GeogTest g]]>
            </example>

        </section>

        <section>
            <title>GeogCreateLocation</title>
            <description>
                <p>*[sql:GeogCreateLocation as Geography (Longitude as N, Latitude as N [,SpatialReferenceID as N])]*</p>
                <p>Constructs a geographic location from a longitude/latitude pair.</p>
            </description>
            <example code="sql">
                <![CDATA[select GeogCreateLocation(1,2, :SRID) from GeogTest g]]>
            </example>
        </section>
        <section>
            <title>GeogCreatePolygon</title>
            <description>
                <p>*[sql:GeogCreatePolygon as Geography (Longitude as N, Latitude as N ... [,SpatialReferenceID as N])]*</p>
                <p>Constructs a geographic polygon from three or more longitude/latitude pairs.</p>
            </description>
            <example code="sql">
                <![CDATA[select GeogCreatePolygon(-70, 42, -70, 32, -60, 32, -60, 42, -70, 42, :SRID) from GeogTest g]]>
            </example>
            <note>The first and last point of the polygon must be the same, and the points must be arranged in counter-clockwise order.</note>
        </section>
        <section>
            <title>GeogDistanceBetween</title>
            <description>
                <p>*[sql:GeogDistanceBetween as N (Object as Geography, Object as Geography)]*</p>
                <p>Returns the distance between two objects in the default unit, typically meters.</p>
            </description>
            <example code="sql">
                <![CDATA[select GeogDistanceBetween(g.Location, g.Location2) from GeogTest g]]>
            </example>
        </section>
        <section>
            <title>GeogLatitude</title>
            <description>
                <p>*[sql:GeogLatitude as N (Location as Geography)]*</p>
                <p>Returns the latitude value for a geographic location.</p>
            </description>
            <example code="sql">
                <![CDATA[select GeogLatitude(g.Location) from GeogTest g]]>
            </example>
            <note> This will be the value of X or Y depending on the database.</note>
        </section>
        <section>
            <title>GeogLocationIntersectsLine</title>
            <description>
                <p>*[sql:GeogLocationIntersectsLine as L (Location as Geography, Line as Geography, Tolerance as N)]*</p>
                <p>Returns true if the location intersects the line or is within the tolerance distance from it.</p>
            </description>
            <example code="sql">
                <![CDATA[select g.Name from GeogTest g where GeogLocationIntersectsLine(g.Location, g.Line)]]>
            </example>
        </section>
        <section>
            <title>GeogLocationIsWithinPolygon</title>
            <description>
                <p>*[sql:GeogLocationIsWithinPolygon as L (Location as Geography, Polygon as Geography, Tolerance as N)]*</p>
                <p>Returns true if the location is contained within the polygon or within the tolerance distance from it.</p>
            </description>
            <example code="sql">
                <![CDATA[select g.Name from GeogTest g where GeogLocationIsWithinPolygon(g.Location, g.Polygon)]]>
            </example>
        </section>
        <section>
            <title>GeogLocationIsWithinRadius</title>
            <description>
                <p>*[sql:GeogLocationIsWithinRadius as L (Location as Geography, Point as Geography, Radius as N, Tolerance as N)]*</p>
                <p>Returns true if the location is within the radius defined around the point or within the tolerance defined.</p>
            </description>
            <example code="sql">
                <![CDATA[select g.Name from GeogTest g where GeogLocationIsWithinRadius(g.Location, g.TargetLocation, 50)]]>
            </example>
            <note>Each database handles tolerance somewhat differently (as it affects indexing performance).</note>
        </section>
        <section>
            <title>GeogLongitude</title>
            <description>
                <p>*[sql:GeogLongitude as N (Location as Geography)]*</p>
                <p>Returns the longitude value for a geographic location.</p>
            </description>
            <example code="sql">
                <![CDATA[select GeogLongitude(g.Location) from GeogTest g]]>
            </example>
            <note>This will be the value of X or Y depending on the database.</note>
        </section>
        <section>
            <title>GeogSRID</title>
            <description>
                <p>*[sql:GeogSRID as N (Object as Geography)]*</p>
                <p>Returns the Spatial Reference Identifier (SRID) assigned to the object.</p>
            </description>
            <example code="sql">
                <![CDATA[select GeogSRID(g.Location) from GeogTest g]]>
            </example>
        </section>
        <section>
            <title>GeogType</title>
            <description>
                <p>*[sql:GeogType as C (Object as Geography)]*</p>
                <p>Returns LOCATION, LINE, or POLYGON if the geography object is one of them. Values returned for other types are not guaranteed to be consistent across databases.</p>
            </description>
            <example code="sql">
                <![CDATA[select GeogType(g.Location) from GeogTest g]]>
            </example>
        </section>
        <section>
            <description>
                <p>*[Important Note:]*</p>
                <p>At least one database requires a table name alias in SQL statements that refer to geography objects. All of our geography samples use an alias for the table referenced in your FROM clause, and you will want to as well. For example, in the Portable SQL below g is an alias for table GeogTest:</p>
            </description>
            <example code="sql">
                <![CDATA[select GeogAsText(g.Location) from GeogTest g]]>
            </example>
        </section>
        <section>
            <description>More discussion and examples can be found on [Common Geography Database Tasks].</description>
        </section>
    </sections>
    <links>
        <link link="Common Geography Database Tasks">Common Geography Database Tasks</link>
    </links>
    <see>
        <ref link="Geographic Databases">Geographic Databases </ref>
        <ref>Changes to SQL Objects for Geometry </ref>
        <ref link="Portable SQL Functions for Geographies">Portable SQL Functions for Geographies </ref>
        <ref link="Common Geography Database Tasks">Common Geography Database Tasks </ref>
        <ref link="Database-specific Geography Tasks Help Pages">Database-specific Geography Tasks </ref>
        <ref link="DB2-specific Geography Tasks">DB2-specific Geography Tasks </ref>
        <ref link="MySQL-specific Geography Tasks">MySQL-specific Geography Tasks </ref>
        <ref link="Oracle-specific Geography Tasks">Oracle-specific Geography Tasks </ref>
        <ref link="PostgreSQL-specific Geography Tasks">PostgreSQL-specific Geography Tasks </ref>
        <ref link="SQL Server-specific Geography Tasks">SQL Server-specific Geography Tasks </ref>
        <ref link="SQL Geography Examples">SQL Geography Examples 		</ref>

    </see>

</page>