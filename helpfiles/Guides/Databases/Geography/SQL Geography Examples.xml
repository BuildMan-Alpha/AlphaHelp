<page>
    <topic>SQL Geography Examples</topic>
    <description>A simple portable SQL query using SQL::ResultSet::DataAsGeography, 
    and an interactive session demonstrating DataAsGeography</description>
    <sections>
        <section>
            <title>Simple Portable SQL Query</title>
            <description>Assuming that you are connected to the Airports SQL Server database, which has a Location field of type Geography:</description>
            <example><![CDATA[SELECT id, Code, Name, City, County, State,  GeogLatitude(Location) AS Lat,  GeogLongitude(Location)  AS Lon( Elevation 
FROM US_Airports ]]></example>
        </section>
        <section>
            <title>Use of SQL::ResultSet::DataAsGeography </title>
            <example code="xb"><![CDATA[dim Result as C
dim cn as sql::Connection
dim Geography as A ' Note that we've dimmed this as A to show the true type.

if cn.open(ConnectionString)

  Result = Result + "Connection opened successfully." + crlf()
  cn.portableSQLEnabled = .t.

  if cn.execute("select GeogAsText(g.Location) from GeogTest g")
    Result = Result + "Query executed successfully." + crlf()
    ResultSet = cn.ResultSet

    Geography = ResultSet.DataAsGeography(1, 4326)
    Result = Result + "Geography object is of type: " + \
        typeof(Geography) + crlf()
    Result = Result + "Geography as XML: " + Geography.AsGML().Value + crlf()
    Result = Result + "Geography object as Text: " + \
        Geography.ToString() + crlf()
    Result = Result + "Geography Longitude: " + Geography.Long.Value + crlf()
    Result = Result + "Geography Latitude:  " + Geography.Lat.Value + crlf(2)
  else
    Result = Result  + "Error executing query: " + CurrentQuery + \
      crlf() + "Result is: " + cn.callresult.text + crlf(2)
  end if

else
  Result = Result  + "Error opening connection:: " \
   + ConnectionString + crlf() + "Result is: " + cn.callresult.text + crlf(2)
end if

showvar(Result) ]]></example>
        </section>
        <section>
            <title>An interactive session demonstrating DataAsGeography</title>
            <description>Assuming you have run a SQL query that returns location as a Geography object in result set rs:</description>
            <example code="xb"><![CDATA[dim Geography as P
Geography = rs.DataAsGeography("Result is: ", 4326)

?Geography.Long.value
= -84.11936 
?Geography.Lat.value
= 33.811217]]></example>
        </section>
        <section>
            <description>More samples can be found on Common Geography Database Tasks and many of the other pages listed below.</description>
        </section>
    </sections>
    <see>
        <ref link="Geographic Databases">Geographic Databases </ref>
        <ref>Changes to SQL Objects for Geometry </ref>
        <ref link="Portable SQL Functions for Geographies">Portable SQL Functions for Geographies </ref>
        <ref link="Common Geography Database Tasks">Common Geography Database Tasks </ref>
        <ref link="Database-specific Geography Tasks Help Pages">Database-specific Geography Tasks </ref>
        <ref link="DB2-specific Geography Tasks">DB2-specific Geography Tasks </ref>
        <ref link="MySQL-specific Geography Tasks">MySQL-specific Geography Tasks </ref>
        <ref link="Oracle-specific Geography Tasks">Oracle-specific Geography Tasks </ref>
        <ref link="PostgreSQL-specific Geography Tasks">PostgreSQL-specific Geography Tasks </ref>
        <ref link="SQL Server-specific Geography Tasks">SQL Server-specific Geography Tasks </ref>
        <ref link="SQL Geography Examples">SQL Geography Examples </ref>
    </see>
</page>