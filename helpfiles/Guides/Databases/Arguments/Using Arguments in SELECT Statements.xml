<page>
	<topic>Using Arguments in SELECT Statements</topic>
	<description>How to create and use Arguments, and structure scripts, relating to Select statements.</description>
	<sections>
		<section>
			<title>What is an Argument?</title>
			<description>An argument is a value that is interpreted at run-time and inserted into a SQL statement. You use the SQL::Arguments? object to pass one or more arguments to AlphaDAO. A SQL statement may use any number of arguments. An argument may be of any of the following data types.</description>
			<cases>
				<case>
					<description>"B" = blob</description>
				</case>
				<case>
					<description>"C" = character</description>
				</case>
				<case>
					<description>"D" = date</description>
				</case>
				<case>
					<description>"L" = logical</description>
				</case>
				<case>
					<description>"N" = numeric</description>
				</case>
				<case>
					<description>"T" = time</description>
				</case>
				<case>
					<description>"Y" = short time</description>
				</case>
				
			</cases>
		</section>
		<section>
			<title>A Demonstration Script</title>
			<description>Open the Code Editor and create a new script with the following content. This script prompts for a city value, then displays the records that contain that value in the bill_city field of the AlphaSports customer table.</description>
			<example><![CDATA[dim conn as SQL::Connection
dim sql as C
dim vCity as C
dim args as SQL::Arguments
vCity = ui_get_text("City", "Show Companies in what city?")
sql = "select lastname, firstname from customer where bill_city = :city Order By Company"
if .not. conn.open("{A5API=Access,FileName='C:\Program Files\a5v8\MDBFiles\Alphasports.mdb', UserName='Admin'}")
    ui_msg_box("Error", conn.CallResult.text)
    end
end if
if .not. args.Set("city", vCity)
    end
end if
if .not. conn.execute(sql, args)
    ui_msg_box("Error", conn.CallResult.text)
    end
end if
sql_resultset_preview(conn.resultset) ]]></example>
		</section>
		
		<section>
			<title>Using an Argument</title>
			<description>You use an argument by preceding its name with a colon (:), as in :city.</description>
			<example><![CDATA[... where bill_city = :city ...
]]></example>
		</section>
		
		<section>
			<title>Creating an Argument</title>
			<description>You create an argument in a two step process. First, you create the SQL::Arguments object. Then you add elements to it with the .Set(?) or .Add(?) methods.</description>
			<example><![CDATA[dim args as SQL::Arguments
if .not. args.Set("city", vCity)
    end
end if]]></example>
		</section>
		
		<section>
			<title>Structuring the Script</title>
			<description>Note the way the script tests the return value of many of the methods, and ends when a failure occurs. Because most of these AlphaDAO methods return .T. (TRUE) for success, this is a good way of terminating a script that is not working.</description>
			<example><![CDATA[if .not. conn.execute(sql, args)
    end
end if]]></example>
		</section>
		<section>
			<description>A more complete application would add some error handling. At a minimum, you might display an error message before exiting.</description>
			<example><![CDATA[if .not. conn.execute(sql, args)
    ui_msg_box("Error", conn.CallResult.text)
    end
end if]]></example>
		</section>
		<section>
			<description>If you run this script and enter "Boston", you will see: Picture</description>
			<figure><link>images/CST_Arguments_2.gif</link></figure>
		</section>
		
		
	</sections>
	<see>
		<ref link="Working with SQL">Working with SQL</ref>
		<ref link="SQL::Arguments Class">SQL::Arguments Object</ref>
	</see>
	
</page>