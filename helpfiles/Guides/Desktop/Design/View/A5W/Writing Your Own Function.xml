<page>
	<shortlink>dt Writing Your Own Function</shortlink>
	<topic>Writing Your Own Function</topic>
		<description><![CDATA[The following user defined function is a simple example to demonstrate a point. You can create a function that accepts parameters, processes these inputs according to your specifications, and returns a value that you can use in your page.
It is good programming practice to separate user defined functions from the HTML contents of the page. In this case we place the function before the opening <HTML> tag.
]]></description>
<sections>
	<section>
		<steps>
			<step>
				<description>Create a new A5W page and name it "Writing Your Own Function".
</description>
			</step>
			<step>
				<description>Display the Source tab.
</description>
			</step>
			<step>
				<description>Enter the following text into the page.
</description>
			</step>
			
		</steps>
		
	</section>
	<section>
		
		<example><![CDATA[<%a5
function fullname as C (cFirstname as C, cLastname as C)
    fullname = alltrim(cLastname) + ", " + alltrim(cFirstname)
end function
%>
<html>
<head>
<meta name="generator" content="Alpha Five HTML Editor">
<title>Writing Your Own Function</title>
</head>
<body>
<%a5
dim cFirstname as C = "Abraham"
dim cLastname as C = "Lincoln"
%>
If your first name is <%a5 ? cFirstname%> and your
lastname is <%a5 ? cLastname%> , then your full name
is <%a5 ? fullname(cFirstname, cLastname) %> .
</body>
</html>]]></example>
		
	</section>
	<section>
		<description>When you run the page it should look like this. 
</description>
	<figure><link>images/WPT_Writing_Your_Own_Function.gif</link></figure>	
		
	</section>
	<section>
		<title>Declaring the Types of Function Arguments
</title>
	<description>There is an assumption that a function has no prior knowledge of the data types of the arguments that are passed to it. As a result, it is necessary to include a parameter list in a function declaration. A function can have no arguments, one argument, or many arguments. The following examples pass their arguments by value, which means that the receiving function has no knowledge of the variables in the calling function.
</description>	
	<example><![CDATA[FUNCTION FunctionName1()
... do stuff
END FUNCTION
FUNCTION FunctionName2(argument1 as TypeSymbol)
... do stuff
END FUNCTION
FUNCTION FunctionName3(argument1 as TypeSymbol, argument2 as TypeSymbol, ... argumentN as TypeSymbol)
... do stuff
END FUNCTION]]></example>	
	</section>
	<section>
		
	<description>Alpha Anywhere allows you to pass parameters by reference, using the keyword BYREF. This means that the receiving function can directly manipulate the variables passed by the calling function.
</description>	
	<example><![CDATA[FUNCTION FunctionName1()
... do stuff
END FUNCTION
FUNCTION FunctionName2(BYREF argument1 as TypeSymbol)
... do stuff
END FUNCTION
FUNCTION FunctionName3(BYREF argument1 as TypeSymbol, BYREF argument2 as TypeSymbol, ... BYREF argumentN as TypeSymbol)
... do stuff
END FUNCTION]]></example>	
	</section>
	<section>
		<description>The TypeSymbol will be a single character from this list.
</description>
	<list>
		<item>
			<name-title>Type Symbol</name-title>
		<description-title>Meaning</description-title>	
		</item>
		<item>
			<name>A</name>
		<description>Any</description>	
		</item>
		<item>
			<name>B</name>
		<description>Blob</description>	
		</item>
		<item>
			<name>C</name>
		<description>Character</description>	
		</item>
		<item>
			<name>D</name>
		<description>Date</description>	
		</item>
		<item>
			<name>E</name>
		<description>Exponent Numeric</description>	
		</item>
		<item>
			<name>F</name>
		<description>Function</description>	
		</item>
		<item>
			<name>L</name>
		<description>Logical</description>	
		</item>
		<item>
			<name>N</name>
		<description>Numeric</description>	
		</item>
		<item>
			<name>P</name>
		<description>Object reference ( Pointer )</description>	
		</item>
		<item>
			<name>T</name>
		<description>Time</description>	
		</item>
		<item>
			<name>U</name>
		<description>Collection</description>	
		</item>
		<item>
			<name>Y</name>
		<description>Short Time</description>	
		</item>
		
	</list>	
		
	</section>
	
<section>
	<title>Declaring the Type of the Return Value
</title>
<description>If a function returns a value, it can return only a single variable. Note how the value is returned by assigning it to the name of the receiving function. 
</description>	
<figure><link>images/WPT_Returning_Single_Value.gif</link></figure>	
</section>	
<section>
	<example><![CDATA[FUNCTION FunctionName1 as N ()
... do stuff
    FunctionName1 = 24
END FUNCTION
FUNCTION FunctionName2 as C (argument1 as TypeSymbol)
... do stuff
    FunctionName2 = "George"
END FUNCTION
FUNCTION FunctionName3 as L (argument1 as TypeSymbol, argument2 as TypeSymbol, ... argumentN as TypeSymbol)
... do stuff
    FunctionName3 = .T.
END FUNCTION]]></example>
	
	
</section>	
<section>
	<description>A function does not have to return a value. If a function does not return a value, the following syntax applies. The "V" type symbol means "void" or "nothing".
</description>
	<example><![CDATA[FUNCTION FunctionName1 as V ()
... do stuff
END FUNCTION
FUNCTION FunctionName2 as V (argument1 as TypeSymbol)
... do stuff
END FUNCTION
FUNCTION FunctionName3 as V (argument1 as TypeSymbol, argument2 as TypeSymbol, ... argumentN as TypeSymbol)
... do stuff
END FUNCTION]]></example>
</section>

<section>
	<title>Returning Multiple Values from a Function
</title>
<description>The "normal" situation, as illustrated above, returns a single value of a single type. However, it possible to return multiple variables from a function. One scenario is as follows:
</description>	
<cases>
	<case>
		<description>the calling function creates a data structure that contains multiple variables (a dot variable or an array )
</description>
	</case>
	<case>
		<description>the calling function sends a pointer to the data structure to the receiving function
</description>
	</case>
	<case>
		<description>the receiving function manipulates the variables in the data structure 
</description>
	</case>
	
</cases>	
</section>

<section>
	<figure><link>images/WPT_Returning_Multiple_Values.gif</link></figure>
</section>
<section>
	<description>The following sample code in the calling script or function illustrates how this might be done.
</description>
	<example><![CDATA[dim mds as P
dim mds.firstname as C
dim mds.lastname as C
dim mds.age as N
mds.firstname = "George"
mds.lastname = "Washington"
mds.age = 35
FunctionName(mds)]]></example>
</section>
	<section>
	<description>The receiving function would have code like this. Note that it can reference the mds data structure without actually knowing its true name. Note also that FunctionName does not have to do anything to return the changes to the variables.</description>
	<example><![CDATA[FUNCTION FunctionName as V (abc as P)
    abc.firstname = "Abraham"
    abc.lastname = "Lincoln"
    abc.age = 29
END FUNCTION]]></example>
</section>
</sections>	
	
	
</page>