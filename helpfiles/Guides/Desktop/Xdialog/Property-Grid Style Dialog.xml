<page>
	<topic>Property-Grid Style Dialog
</topic><description>To create a property-grid style Xdialog.
</description>
<sections>
<section>
	
<steps>
	<step>
		<description>Create a new Action Script.
</description>
	</step>
	<step>
		<description>Select "Xdialog Windows" in the Category list.
</description>
	</step>
	<step>
		<description>Select "Display an XDialog Box" in the Action list.
</description>
	</step>
	<step>
		<description>Click OK to display the Script Genie.
</description>
	</step>
	<step>
		<description>Enter the name of new variable in the Variable Name field.
</description>
	</step>
	<step>
		<description>Optionally, change the value of the Prompt field.
</description>
	</step>
	<step>
		<description>Optionally, change the selection in the data Type list.
</description>
	</step>
	<step>
		<description>Set the Width and Height of the resulting dialog box.
</description>
	</step>
	<step>
		<description>Select "Property-grid style Dialog" in the Style list.
</description>
	</step>
	<step>
		<description>Click Define Property-Grid Dialog to display the Property Grid Builder. 
</description>
<figure><link>images/AS_Property_Grid_Style_Xdialog.gif</link></figure>
	</step>
	
</steps>	
	
</section>	
<section>
	<title>Property Grid Builder
</title>
<description>The Items tab of the Property Grid Builder allows you to specify a hierarchy of menu entries.
</description>	
<cases>
	<case>
		<description>Category entries - are menu groupings. Categories can be collapsed and expanded.
</description>
	</case>
	<case>
		<description>Item entries - are menu selections. Items set the value of variables and generate events.
</description>
	</case>
</cases>	
</section>
<section>
	<description>For each entry click Add to display the Add Entry dialog.
</description>
<steps>
	<step>
		<description>Select one of the following Type radio buttons:
</description>
		<cases>
			<case>
				<description>((|#New_Category|New Category))
</description>
			</case>
			<case>
				<description>((|#Item|Item))
</description>
			</case>
		</cases>
	</step>
	<step>
		<description>Enter the text for the entry in the Settings > Name field.
</description>
	</step>
</steps>	
	
</section>	

<section>
	
<title>Item</title>	
<description>If you selected "Item" in step 1a, enter values into the following fields.
</description>	

<steps>
	
	<step>
		<description>Enter the name of the variable that will be set in the Variable name field.
</description>
		
	</step>
	
	<step>
		<description>Select the Variable scope. The options are:
</description>
		<cases>
			<case>
				<description>"Local"
</description>
			</case>
			<case>
				<description>"Session"
</description>
			</case>
			<case>
				<description>"Global"
</description>
			</case>
		</cases>
	</step>
	
	<step>
		<description>Select the Variable type. The options are:
</description>
		<cases>
			<case>
				<description>"Character"
</description>
			</case>
			<case>
				<description>"Numeric"
</description>
			</case>
			<case>
				<description>"Logical"
</description>
			</case>
		</cases>
	</step>
	
	<step>
		<description>Optionally, set a Default Value for the variable. Character strings should not be quoted.
</description>
		
	</step>
	
	<step>
		<description>Select the Control type. The options are:
</description>
		<cases>
			<case>
				<description>"Edit" - allows you to enter a character, date, or numeric value
</description>
			</case>
			<case>
				<description>"Smart" - opens a dialog that helps you select or enter a value
</description>
			</case>
			<case>
				<description>"Combo" - presents a list, but does not allow new entries
</description>
			</case>
			<case>
				<description>"EditCombo" - presents a list, but allows new entries
</description>
			</case>
			<case>
				<description>"Checkbox" - for logical variables
</description>
			</case>
		</cases>
	</step>
	
	<step>
		<description>Input the Event name of the variable.
</description>
		
	</step>
	
	<step>
		<description>Click OK to return to the Property Sheet Builder.
</description>
		
	</step>
	
	<step>
		<description>Optionally, change the value the Base Settings > Level property This sets the indent level of the control. You may also use the  and  buttons to adjust the indent level of an item.
</description>
		
	</step>
	
	<step>
		<description>Optionally, enter values the Control Properties > Data field.
</description>
<cases>
			<case>
				<description>1. For Combo controls enter a comma separated list or an "@" followed by the name of variable containing a CR-LF delimited list. You must DIM this variable and populate this list on the Initial Code tab. See Defining the Contents of a Combo Box.
</description>
			</case>
			<case>
				<description>2. For Smart Button controls, enter the code to execute in the format: field_name = function(). See Creating Smart Fields.
</description>
			</case>
			<case>
				<description>3. For Check box controls (for logical variables), enter the check box text. Character values should not be quoted.
</description>
			</case>
		</cases>
	</step>
	
	<step>
		<description>Set the value of Control Properties > Enable. The options are:
</description>
		<cases>
			<case>
				<description>.T. = always enable the item
</description>
			</case>
			<case>
				<description>.F. = always disable the item
</description>
			</case>
			<case>
				<description>A logical variable or expression that can be changed from TRUE to FALSE to selectively enable or disable the item.
</description>
			</case>
		</cases>
	</step>
	
	<step>
		<description>Set the value of Control Properties > Show. The options are:
</description>
		<cases>
			<case>
				<description>.T. = display the item
</description>
			</case>
			<case>
				<description>.F. = hide the item
</description>
			</case>
			<case>
				<description>A logical variable or expression that can be changed from TRUE to FALSE to selectively display or hide the item.
</description>
			</case>
		</cases>
	</step>
	
	<step>
		<description>Set the value of Control Properties > Label Italic. The options are:
</description>
		<cases>
			<case>
				<description>.T. = show the label with an italic font
</description>
			</case>
			<case>
				<description>.F. = show the label with a normal font
</description>
			</case>
			<case>
				<description>A logical variable or expression that can be changed from TRUE to FALSE to selectively change the label from normal to italic.
</description>
			</case>
		</cases>
	</step>
	
	<step>
		<description>Set the value of Control Properties > Input Error. A logical variable or expression that can be changed from TRUE to FALSE to selectively change the input text from black (no error) to red (error).
</description>
		
	</step>
	
	<step>
		<description>Set the value of Control Properties > Input Italic. The options are:
</description>
		<cases>
			<case>
				<description>.T. = show the input text with an italic font
</description>
			</case>
			<case>
				<description>.F. = show the input text with a normal font
</description>
			</case>
			<case>
				<description>A logical variable or expression that can be changed from TRUE to FALSE to selectively change the input text from normal to italic.
</description>
			</case>
		</cases>
	</step>
	
	<step>
		<description>Set the value of Control Properties > Input Bold. The options are:
</description>
		<cases>
			<case>
				<description>.T. = show the input text with a bold font
</description>
			</case>
			<case>
				<description>.F. = show the input text with a normal font
</description>
			</case>
			<case>
				<description>A logical variable or expression that can be changed from TRUE to FALSE to selectively change the input text from normal to bold.
</description>
			</case>
		</cases>
	</step>
	
	<step>
		<description>Set the value of Control Properties > Help. This is the text that appears in the window at the bottom of the builder when you place the cursor into a field.
</description>
		
	</step>
	
</steps>

	
</section>
<section>
	
	<title>New Category
</title>
	<description>If you selected "New Category" in step 1a:
</description>

<steps>
	
	<step>
		<description>Enter the text to display in the Settings Name control.
</description>
	</step>
	<step>
		<description>Click OK to return to the Property Grid Builder.
</description>
	</step>
	<step>
		<description>Optionally, change the value of the Base Settings > Level property. This sets the indent level of the control. You may also use the  and  buttons to adjust the indent level of a category.
</description>
	</step>
	<step>
		<description>Optionally, change the value of the Base Settings > Initial state property. The options are:
</description>
<cases>
	<case>
		<description>Opened
</description>
	</case>
	<case>
		<description>Closed
</description>
	</case>
	
</cases>
	</step>
	<step>
		<description>Set the value of Control Properties > Show Category. The options are:
</description>
<cases>
	<case>
		<description>.T. = display the category
</description>
	</case>
	<case>
		<description>.F. = hide the category
</description>
	</case>
	<case>
		<description>A logical variable or expression that can be changed from TRUE to FALSE to selectively display or hide the category.
</description>
	</case>
	
	
</cases>
	</step>
	<step>
		<description>Set the value of Control Properties > Show Label. The options are:
</description>
<cases>
	<case>
		<description>.T. = display the category label
</description>
	</case>
	<case>
		<description>.F. = hide the category label
</description>
	</case>
	<case>
		<description>A logical variable or expression that can be changed from TRUE to FALSE to selectively display or hide the category label.
</description>
	</case>
	
</cases>
	</step>
	
</steps>

</section>
<section>
	<title>Other Tabs
</title>
<steps>
	
	<step>
		<description>Use the Initial Code tab to other DIM variable and set the initial values of variables, such as those containing lists.
</description>
	</step>
	<step>
		<description>Use the Event Code tab to respond to item events with Xbasic code to enable or disable objects, hide or show objects, and to run scripts.
</description>
	</step>
	<step>
		<description>Use the Verbs tab to define buttons that look like hyperlinks.
</description>
	</step>
	<step>
		<description>Use the Propgrid Settings tab to define the style and appearance of the control.
</description>
	</step>
</steps>	
	
</section>
<section>
	<title>Verbs Tab
</title>
<description>Verbs and their associated events allow you to add hyperlink styled buttons to the property grid. These buttons can execute any Xbasic code. Verbs are entirely optional.
For each button you wish to add:
</description>	
<steps>
	<step>
		<description>Display the Verbs tab.
</description>
	</step>
	<step>
		<description>Click Add Verb to display the Add Verb dialog. This step creates the button. Enter a value and click OK.
</description>
	</step>
	<step>
		<description>Switch to the Event Code tab and create a new event that will respond to the Keypress event of the new button.
</description>
	</step>
	<step>
		<description>Add the code that the event will run. 
</description>
<figure><link>images/AS_Property_Grid_Verb_Event.gif</link></figure>
	</step>
	<step>
		<description>Display the Verbs tab again.
</description>
	</step>
	<step>
		<description>Select the button's event from the Event list.
</description>
	</step>
</steps>	
</section>
<section>
	<title>Propgrid Settings Tab
</title>
<steps>
	<step>
		<description>Optionally, select a style from the Theme list. This picture shows 2 of the 7 possible styles. 
</description>
		<figure><link>images/AS_Property_Grid_Styles.gif</link></figure>
	</step>
	<step>
		<description>Optionally, change the Order property of the grid. This setting defines how entries will be displayed. The options are:
</description>
		<cases>
			<case>
				<description>"NoSort"
</description>
			</case>
			<case>
				<description>"Category"
</description>
			</case>
			<case>
				<description>"Alphabetic"
</description>
			</case>
		</cases>
	</step>
	<step>
		<description>Optionally, check Set splitter width. When selected, you may enter a fractional number between 0 and 1 into the control. This defines the percentage of the total width that will be allotted to the left (label) column, as opposed to the right (text) column.
</description>
	</step>
	<step>
		<description>Optionally, clear Has Help to disable the display of Help.
</description>
	</step>
	<step>
		<description>Optionally, clear Has Toolbar to disable the display of the Toolbar. 
</description>
		<figure><link>images/AS_Property_Grid_Toolbar_Help.gif</link></figure>
	</step>
	<step>
		<description>Enter a name under which to save the settings of the dialog box in the registry in the Remember Name field. This allows the dialog to resume its previous state when your application restarts.
</description>
	</step>
	<step>
		<description>Click OK to exit the Property Grid Builder.
</description>
	</step>
	<step>
		<description>Continue with Define Title of Display an Xdialog Box.
</description>
	</step>
	
</steps>	
	
</section>
<section>
	
	<title>Defining the Contents of a Combo Box
</title>
<description>There are two ways to populate a combo box.
</description>	
<steps>
	<step>
		<description>Enter the values into the Control Properties > Data field in the format: Value1,Value2,Value3...ValueN.
</description>
	</step>
	<step>
		<description>Define the list with Xbasic code:
</description>
<cases>
	<case>
		<description>1. Place a reference to the list in the Control Properties > Data field in the format: @ListVariableName.
</description>
	</case>
	<case>
		<description>2. Display the Initial Code tab.
</description>
	</case>
	<case>
		<description>3. Set the values of the list in the following format:
</description>
		<example><![CDATA[ListVariableName = <<%str%
Value1
Value2
Value3
...
ValueN
%str% ]]></example>
	</case>
</cases>
	</step>
	
</steps>

	
</section>
<section>
	<title>Creating Smart Fields
</title>
<description>Smart fields are highly desirable when you want to enter the following types of data.
</description>	
<cases>
	<case>
		<title>Color</title>
		<example><![CDATA[myColor =  UI_SELECT_COLOR2() ]]></example>
	</case>
	
	<case>
		<title>Date</title>
		<example><![CDATA[myDate =  UI_GET_DATE_CALENDAR() ]]></example>
	</case>
	
	<case>
		<title>Field Name</title>
		<example><![CDATA[myField =  UI_GET_FIELDNAME() ]]></example>
	</case>
	
	<case>
		<title>Filter Expression</title>
		<example><![CDATA[myFilter =  UI_GET_FILTER() ]]></example>
	</case>
	
	<case>
		<title>Font</title>
		<example><![CDATA[myFont =  UI_GET_FONT() ]]></example>
	</case>
	
	<case>
		<title>Order Expression</title>
		<example><![CDATA[myOrder =  UI_GET_ORDER() ]]></example>
	</case>
	
	<case>
		<title>Others</title>
		<description>See ((User Interaction _UI_ Functions|User Interaction (UI) Functions))</description>
	</case>
</cases>	
	
</section>
<section>
	<description>To return multiple selections, try something like this. This function call uses UI_GET_LIST2() to return one or more values from a list created by TABLE.EXTERNAL_FIELD_NAME_GET().
</description>
	<example><![CDATA[myFields = ui_get_list2("Select Fields", "", table.external_field_name_get(tbl_name, "N"), 2) ]]></example>
</section>

<section>
<title>Hiding and Displaying an Item or Category
</title>	
	<steps>
		<step>
			<description>Create a logical variable with an initial value that corresponds to whether the item or category should be initially hidden or displayed.
</description>
<example><![CDATA[dim showVariableName as L = .F. ]]></example>
		</step>
		<step>
			<description>Place the name of this variable into the Control Properties > Show field.
</description>
		</step>
		<step>
			<description>Display the Event Code tab of the Property Grid Builder.
</description>
		</step>
		<step>
			<description>Select the Change event of the item that will trigger the change from hidden or shown.
</description>
		</step>
		<step>
			<description>Enter code that resets the value of showVariableName. See the following pictures for an example.
</description>
		</step>
		
		
	</steps>
	
	
</section>
<section>
	<description>The Item Properties > Variable Name field of the "Database" item contains the variable cDatabase. The user selection in the combo box sets this variable's value. </description>
	<figure><link>images/AS_Property_Grid_Setup_Hide_Show.gif</link></figure>
</section>

<section>
	<description>The event variable eDatabase has code attached to its Change event. The code tests for the value of the cDatabase variable, and sets the value of showADOProducts. </description>
	<figure><link>images/AS_Property_Grid_Builder_Event_Tab.gif</link></figure>
</section>

<section>
	<description>The Control Properties > Show field of the "ADO Products" item contains the showADOProducts variable. When the value is TRUE (.T.), the item is visible. When the value is FALSE (.F.), the item is hidden. 
</description>
	<figure><link>images/AS_Property_Grid_Builder_Hide_Show.gif</link></figure>
</section>

<section>
	<description>This picture shows the property sheet dialog with the "ODBC Products" item that appears only when "ODBC Compatible (AlphaDAO)" is selected from the "Database" list. 
</description>
	<figure><link>images/AS_Property_Grid_Hidden_and_Displayed_Item.gif</link></figure>
</section>
	
	
<section>
	
<title>Responding to Events
</title>	
<description>Each category and item generates the following events:
</description>	
<cases>
	<case>
		<description>Change
</description>
	</case>
	<case>
		<description>SetFocus
</description>
	</case>
	<case>
		<description>KillFocus
</description>
	</case>
	<case>
		<description>Keypress
</description>
	</case>
	<case>
		<description>Keydown
</description>
	</case>
	<case>
		<description>Keyup
</description>
	</case>
	
</cases>

	
</section>	
	<section>
		<description>You can attach Xbasic code to any of these events.
</description>
	</section>
	
	
</sections>	
	<see>
		<ref link="Display an Xdialog Box">Display an Xdialog Box</ref>
		<ref>Webform Style Builder</ref>
	</see>
	
</page>