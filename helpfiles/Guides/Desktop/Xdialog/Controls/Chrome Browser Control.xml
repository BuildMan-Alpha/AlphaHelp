<page>
  <shortlink>server xd Xdialog Chrome Browser Control</shortlink>
  <topic>Xdialog Chrome Browser Control</topic>
  
 <description>Xdialog allows you to embed the Chrome browser control.</description> 
 
 <groups>
   <group>
 
 
 <sections>
   <title>Discussion</title>
   <section>
     
     <description>Xdialog allows you to embed the Chrome browser control. This, in turn, allows you to build some amazing desktop applications using the full power of HTML, CSS3 and Javascript. This is a really fantastic new feature and all developers of desktop applications are strongly encouraged to check it out!
Previously, Alpha Anywhere allowed you to use the Internet Explorer ActiveX control in an Xdialog. While this is still possible, using the Chrome control is now so much easier and more powerful, that it is hard to imagine a scenario under which using the Internet Explorer ActiveX control would be preferable to using the Chrome control.
</description>
   
     <note>With Internet Explore, some of Xdialogs that used the Internet Explorer ActiveX control have stopped working because of changes Microsoft has made to IE in IE Version 11. Using the Chrome control instead of the IE ActiveX control circumvents this issue.</note>
     
     
   </section>
    
   <section>
     <description>With the Chrome control hosted in an Xdialog you can:
</description>
<cases>
  <case>
    <description>Use Xbasic to generate Javascript code and then send the code to the Chrome control to execute
</description>
  </case>
   <case>
    <description>Use Xbasic to read values from the DOM in the Chrome control (for example, read the value of an input control in the HTML being shown in the Chrome control).
</description>
  </case>
   <case>
    <description>Use Javascript in the Chrome control to invoke Xbasic
</description>
  </case>
   <case>
    <description>Open the Chrome debugger to debug your Javascript code
</description>
  </case>
   <case>
    <description>Set the zoom level of the HTML page
</description>
  </case>
  
  
</cases>
     
     
   </section> 
     
   <section>
     <description>Since the HTML loaded in the Chrome control can use open source Javascript libraries, such as jQuery, you can build really powerful Xdialogs for your desktop applications using a myriad of techniques made possible by third party libraries. (See below for information on the a5_html_page_prepare() function.)
</description>
 
     <note>The code for all of the examples used here is available in the sample Learning Xdialog workspace that ships with Alpha Anywhere. To get an updated version of 'Learning Xdialog' you must do a full install, not a patch install.</note>
     
     
   </section>
   </sections></group>
   <group>
     
       <title>A simple Xdialog that uses the Chrome Control</title>
     <sections>
   
   
   
     <section>
   
       <videos>
         <video>
        <description>Watch video</description>
           <link>http://www.ajaxvideotutorials.com/V12Videos/Xbasic_xdialog_with_chrome_intro.swf</link>
         </video>
         
       </videos>
       
     </section>
     
     
   <section>
     
     <description>Create a new script with this code:
</description>
     <example><![CDATA[dim cp as helper::Chrome
cp.html = <<%html%
<h1>Hello</h1>    
<p>This is html inside an Xdialog.</p>
%html%
dim dlg_title as c 
dim dlg_body as c 
dlg_body = <<%dlg%
{chrome=100,20cp};
%dlg%
dim dlg_event as c 
dlg_title = "Chrome in an Xdialog"
ui_dlg_box(dlg_title,dlg_body,dlg_event)

]]></example>
   
   </section>
     
   <section>
     <description>And here is the resulting Xdialog when you run the code.
</description>
  
     <figure><link>images/xdialog_chrome1.jpg</link></figure>
     
   </section>
     
   <section>
     <description>In the above code, notice that a new object is declared with the 
</description>
     <example><![CDATA[dim cp as helper::Chrome]]></example>
  
   </section>
     
   <section>
     <description>command. Also notice that the HTML to display in the Chrome control was set by setting the .html property.
You can either set the object's .html property if you want to specify explicit HTML to display, or you can set the .url property (if you want to show a URL - see next example).
Once the Chrome object has been declared, it can be placed in the Xdialog using this Xdialog command:
</description>
     <example><![CDATA[{chrome=100,20cp};]]></example>

     
     
   </section>
     
   <section>
     <description>In this above example, the width of the Chrome control is set to 100 'characters' and the height to 20 'lines'.
Notice that the 'cp' in the above command is the name of the helper::Chrome object that was defined.
You can put as many Chrome objects on an Xdialog as you want. For exmaple:
</description>
     <example><![CDATA[dim cp1 as helper::chrome
dim cp2 as helper::chrome
....
dim cpn as helper::chrome]]></example>
    
   </section>
     
   <section>
     <description>And then in your Xdialog body:
</description>
     <example><![CDATA[{chrome=100,20cp1};
{chrome=100,20cp2};
{chrome=100,20cpn};]]></example>
   </section>
     
     
     </sections></group>
     <group>
        <title>Specifying a URL to load</title>
       <sections>
     
     
     
     
     
     
     
     
     
   <section>
    
   <videos>
     <video>
       <description>Watch video</description>
       <link>http://www.ajaxvideotutorials.com/V12Videos/Xbasic_xdialog_with_chrome_intro2.swf</link>
     </video>
     
     
   </videos>
   </section>
     
   <section>

     <example><![CDATA[dim cp as helper::Chrome
cp.url = "http://www.google.com"

dim dlg_title as c 
dim dlg_body as c 
dlg_body = <<%dlg%
{stretch=height,width}
{chrome=100,30cp};
%dlg%
dim dlg_event as c 
dlg_title = "Chrome in an Xdialog"
ui_dlg_box(dlg_title,dlg_body,dlg_event)]]></example>
     <figure><link>images/xdialog_chrome2.jpg</link></figure>

     
     
   </section>
     </sections></group>
     
     <group>
          <title>Specifying a Dynamic URL</title>
       <sections>
     
     
     
     
     
     
   <section>
  
     <description>In this next example we show how the URL property can be dynamically changed after the Xdialog has been rendered.
</description>
     <example><![CDATA[dim cp as helper::Chrome
cp.url = "http://www.google.com"

dim urls as c 
urls = <<%txt%
http://www.google.com
http://www.bing.com
http://www.yahoo.com
%txt%

dim url as c 
url = word(urls,1,crlf())

dim dlg_title as c 
dim dlg_body as c 
dlg_body = <<%dlg%
{startup=urlchanged}
{stretch=width}
[.160url^+urls] ;
{stretch=height,width}
{chrome=173,60cp};
%dlg%
dim dlg_event as c 
dlg_event = <<%code%
if a_dlg_button = "urlchanged" then 
    a_dlg_button = ""
    cp.url = url 
end if 
%code%
dlg_title = "Chrome in an Xdialog"
ui_dlg_box(dlg_title,dlg_body,dlg_event)]]></example>
    
   </section>
   
     
   <section>
     <description>The resulting Xdialog looks like this:
You can type any address into the address bar and then hit the Go button to go to the page.
</description>
 
     <figure><link>images/xdialog_chrome3.jpg</link></figure>
     
     
   </section>
     </sections></group>
     <group>  <title>Using Xbasic to Execute Javascript in the Chrome Control</title><sections>
     
     
   <section>
   
     <description>The Chrome object exposes two methods that allows you to execute Javascript from Xbasic. These are:
</description>
    <cases>
      <case>
        <title>.executeJavascript(codetorun)</title>
        <description>executes the Javascript asynchronously</description>
      </case>
      <case>
        <title>.executeJavascriptResult(codeToRun) </title>
        <description>executes the Javascript synchronously and returns the result to Xbasic</description>
      </case>
      
      
    </cases>
   </section>
    <section>
     <description>Consider the following example of an Xdialog that is hosting the Chrome control, showing some HTML with an input control. We have to Xdialog buttons, one to set the value in the HTML input, and the other to read the value from the HTML input.
</description>
     <example><![CDATA[dim cp as helper::Chrome
cp.html = <<%html%
Name: <input id=&quot;name&quot; />
%html%
dim dlg_title as c 
dim dlg_body as c 
dlg_body = <<%dlg%
{chrome=40,10cp};
;
%dlg%
dim dlg_event as c 
dlg_event = <<%code%
if a_dlg_button = "setName" then 
    a_dlg_button = ""
    dim jstorun as c 
    dim name as c 
    name = ui_get_text("Name","Enter name")
    jstorun = "document.getElementById('name').value = '" + js_escape(name) + "';"
    cp.ExecuteJavascript(jstorun)
else if a_dlg_button = "readName" then 
    a_dlg_button = ""
    dim jstorun as c = "document.getElementById('name').value"
    dim result as c 
    result = cp.ExecuteJavascriptResult(jstorun)
    ui_msg_box("Notice:","Value read from the HTML is: " + result)
end if 
%code%
dlg_title = "Chrome in an Xdialog"
ui_dlg_box(dlg_title,dlg_body,dlg_event) ]]></example>
     
     
   </section>
    <section>
     <description>The important thing to notice in this example is that the Javascript that gets executed here is computed by Xbasic and Xbasic is invoking the Javascript.
</description>
 
   </section></sections></group>
   <group>   <title>Using Javascript to Invoke Xbasic</title><sections>
   
   
    <section>
   
     <description>In this example, rather than using Xbasic to invoke Javascript on the Chrome control, we turn it around and invoke Xbasic from Javascript.
This Xdialog has an event called 'event1' (see code in red below) and the HTML has a button. When the user clicks on the HTML button, the Xdialog event ('event1') is fired.
In order to make this work, a special Javascript function (called xDialogEvent) must be added to the HTML page. The onclick event for the button is then set to:
</description>
     <example><![CDATA[xDialogEvent('event1')
]]></example>
    
     <note>Because it is cumbersome to have to have to add the xDialogEvent() helper function to the HTML yourself, a special helper function can be called to 'prepare' the HTML you pass into the chrome object. For example:</note>
     
     
   </section>
    <section>

     <example><![CDATA[dim cp as helper::Chrome
cp.html = a5_html_page_prepare(<<%html%
<button onclick=&quot;xdialogEvent('event1');&quot;>Invoke Event on My Parent 
Xdialog</button>
%html%)
dim cp as helper::Chrome
cp.html = <<%html%
<html>
    <head>  
        <script>  
        function xDialogEvent(eventName) {
		  
            var client = 
		new XMLHttpRequest();   
            
		client.open('GET', 'a5xdialog:' + eventName,false);  
            
		client.setRequestHeader('My-Custom-Header', 'Some Value');  
            client.send();  
        }  
        </script>  
    </head>  
    <body>  
        <button onclick=&quot;xDialogEvent('event1');&quot;></p>
		<p class="Xbasic">        Invoke 
		Event on My Parent Xdialog</button>  
    </body>  
 </html>
%html%

dim dlg_title as c 
dim dlg_body as c 
dlg_body = <<%dlg%
{chrome=40,10cp};
%dlg%
dim dlg_event as c 
dlg_event = <<%code%
if a_dlg_button = "event1" then 
    a_dlg_button = ""
    ui_msg_box("Notice","This is Xbasic here. Event1 has just been fired.")
end if 
%code%
dlg_title = "Chrome in an Xdialog"
ui_dlg_box(dlg_title,dlg_body,dlg_event)

 ]]></example>
   
   </section>
   </sections></group>
   <group> <title>Using Built In Images</title><sections>
   
    <section>
     
     <description>Alpha Anywhere comes with a large library of built in images and icons that you might want to use in the HTML that is shown in the Chrome control.
You can easily use built in images using this syntax:
</description>
     <example><![CDATA[$$application.chrome</font>.png&quot;]]></example>
     <figure><link></link></figure>
    
   </section>
   
   <section>
     
     <description>The portion shown in red is the built in image name.
</description>
     
     
     
   </section>
      
   <section>
     
     <description>For example:</description>
     <example><![CDATA[dim cp as helper::Chrome
cp.html = <<%html%
<img src=&quot;a5res:images/$$code.aScript.png&quot; />
<img src=&quot;a5res:images/$$file.open.png&quot; />
<img src=&quot;a5res:images/a5_email_people.png&quot; />
%html%
dim dlg_title as c 
dim dlg_body as c 
dlg_body = <<%dlg%
{chrome=100,20cp};
%dlg%
dim dlg_event as c 
dlg_title = "Chrome in an Xdialog"
ui_dlg_box(dlg_title,dlg_body,dlg_event)
 ]]></example>
     
     
   </section>
   
   <section>
     <description>And the resulting Xdialog:
</description>
     <figure><link>images/xdialog_localImages.jpg</link></figure>
     
     
   </section>
   </sections></group>
   <group><title>Referencing Static Resources</title>
     <sections>
   
   
   
      <section>
        
     <description>To display image files you can either use the special a5file prefix on the filename, or you can use the standard file:// protocol. However, in order to the use file:// protocol, you have to turn Chrome security off using the command shown in red.
</description>
  <example><![CDATA[dim cp as helper::Chrome
'in order to use the standard file:// protocol you have to turn 
'Chrome's web security off.
'otherwise you can use use the special a5file: command.

cp.flag_web_security_disabled = .t.
cp.html = <<%html%

<img src=&quot;a5file:C:\Program Files (x86)\a5V12\a5v12logo.jpg&quot; />
<img src=&quot;file://C:\Program Files (x86)\a5V12\a5v12logo.jpg&quot; />

%html%
dim dlg_title as c 
dim dlg_body as c 
dlg_body = <<%dlg%
{chrome=100,20cp};
%dlg%
dim dlg_event as c 
dlg_title = "Chrome in an Xdialog"
ui_dlg_box(dlg_title,dlg_body,dlg_event)

]]></example>
     
   </section>
   
      <section>
     
     <description>And the resulting Xdialog:
</description>
     <figure><link>images/xdialog_chromeImages.jpg</link></figure>
     
     
   </section>
   </sections></group>
   <group><title>Using the Chrome Debugger</title><sections>
   
   
 <section>
   
  <description>You can use the Chrome debugger to debug Javascript that is running inside the Chrome control. For example, consider the following Xdialog.
The HTML has a Javascript function that executes a loop. The function uses the 'debugger;' Javascript command to turn on the debugger.
The Xdialog has a button that executes this code:
</description> 
   <example><![CDATA[cp.OpenDevtools()]]></example>
 </section>  
   
  <section>
 
  <description>'cp' is the Chrome object (created by the dim cp as helper::Chrome command), and we are calling the object's .OpenDevTools() method to enable the Chrome Developer tools.
Once the Developer Tools have been opened, we can click the button on the HTML page to run the Javascript and debug into the code. 
</description> 
   <videos>
     <video>
       <description>Watch Video
</description>
       <link>http://www.ajaxvideotutorials.com/V12Videos/xdialog_chrome_debugger.swf</link>
     </video>
     
   </videos>
 </section>  
    
     
  <section>
 
 
   <example><![CDATA[dim cp as helper::Chrome
cp.html = <<%html%
	<script>    
		function loopTest() { </p>
		<p class="Xbasic">          debugger;    
          for(var i = 1; i < 10; i++) {     
                      document.getElementById('div1').innerHTML 
		= 'Count: ' + i ;     
          }    
		}    
		</script>    
		<button onclick=&quot;loopTest();&quot;>Start Loop</button>    
		<div id=&quot;div1&quot;></div>
    %html%


dim dlg_title as c 
dim dlg_body as c 
dlg_body = <<%dlg%
{chrome=100,20cp};
;
%dlg%
dim dlg_event as c 
dlg_event = <<%code%
if a_dlg_button = "openDebugger" then 
    'open the Chrome debugger
    a_dlg_button = ""
    cp.OpenDevtools()
end if 
%code%
dlg_title = "Chrome in an Xdialog"
ui_dlg_box(dlg_title,dlg_body,dlg_event)

 ]]></example>
 </section>   
 
 </sections></group>
 
 
 <group><title>Setting the Zoom Level of the HTML Document</title><sections>
   <section>
     
    <description>You can set/get the zoom level of the HTML shown in the Chrome control by using these methods:
</description> 
    <cases>
      <case>
        <description>.GetZoomLevel()
</description>
      </case>
        <case>
        <description>.SetZoomLevel(level)
</description>
      </case>
      
    </cases>
    
     
   </section>
   <section>
     <description>The level is a numeric value
</description>
   </section>
   </sections></group>
   <group><title>Binding Events Programmatically</title><sections>
     <section>
       
     <description>When you write the HTML that is displayed in the Chrome control you can either add events directly into the HTML markup, or you can bind the events programmatically using Xbasic.
For example, if your HTML included this markup:
</description>
<example><![CDATA[<button onclick=&quot;myclickevent();&quot;>Button1</button>]]></example>
   </section>
   
   <section>
     <description>then, when you ran the Xdialog and clicked on the button, the Javascript function myclickevent() would be invoked. 
However if your HTML included this markup:
</description>
     <example><![CDATA[<button >Button1</button>]]></example>
   </section>
   <section>
     <description>then, clicking on the button would do nothing because no event had been bound to the button.
Using methods of the Chrome control, you can bind event handlers to any element.
The syntax is:
</description>
     <example><![CDATA[<chromeObject}.AddEventListner(<i>definition</i>)]]></example>
   </section>
   <section>
     <description>Where definition is a string in this format:
</description>
     <example><![CDATA[elementId|eventName|xdialogEventToFire]]></example>
   </section>
   <section>
     <description>For example:
</description>
     <example><![CDATA[dim definition as c 
definition = "btn1|click|XbasicEvent1"
cp.AddEventListeners(definition)
]]></example>
   </section>
   <section>
     <description>The definition string that you pass into the .AddEventListners() function can be a cr-lf delimited string. This allows you to bind events to multiple elements with a single call to the .AddEventListners() function.
The above code will bind an onClick event to an element with an id of 'btn1'. When the user clicks the button, the Xdialog event called 'XbasicEvent1' will be fired. 
</description>
    <note>We are using the .AddEventListeners() to invoke Xbasic (by calling an event in the parent Xdialog). We are NOT using the method to bind a Javascript event handler, since there are existing Javascript methods to bind Javascript events to elements.</note>
   </section>
<section>
  <description>Watch video to see an example of using the .AddEventListners() method.
</description>
  <videos>
    <video>
      <description>Watch video - Part 1
</description>
      <link>http://www.ajaxvideotutorials.com/V12Videos/xdialog_chrome_bindingEvents1.swf</link>
    </video>
    <video>
      <description>Watch video - Part 2
</description>
      <link>http://www.ajaxvideotutorials.com/V12Videos/xdialog_chrome_bindingEvents2.swf</link>
    </video>
    <video>
      <description>Download sample code used in video
</description>
      <link>http://www.ajaxvideotutorials.com/V12Videos/Xbasic_xdialog_with_chrome_control_event_binding.zip</link>
    </video>
    
  </videos>
  
</section>   
<section>
  <description>The .AddEventListners() function can be called before the Xdialog is even instantiated. There is no need to wait for Xdialog and the Chrome control inside the Xdialog to be ready. For example, consider the following script:
</description>
   <example><![CDATA[dim cp as helper::Chrome
html = <<%html%
<div id=&quot;div1&quot;>This is div1</div></div>
<button id=&quot;b1&quot;>Button1</button></div>
<button id=&quot;b2&quot;>Button2</button></div>
%html%</div>
cp.html = html</div>
'notice that the event binding is defined before the xdialog has even been rendered!
dim mapping as c 
mapping = <<%txt%
b1|click|event1
b2|click|event2
%txt%
cp.AddEventListeners(mapping)

dim dlg_title as c = "Binding Multiple Events Handlers at Once"
dim dlg_body as c 
dlg_body = <<%dlg%
{chrome=80,10cp};
%dlg%
dim dlg_event as c 
dlg_event = <<%code%
if a_dlg_button = "event1" then 
    a_dlg_button = ""
    ui_msg_box("Notice","Event 1 has fired")
else if a_dlg_button = "event2" then 
    a_dlg_button = ""
    ui_msg_box("Notice","Event 2 has fired")
end if 
%code%
ui_dlg_box(dlg_title,dlg_body,dlg_event)
<img class="ajT" src="https://mail.google.com/mail/u/0/images/cleardot.gif" style="height: 8px; 
opacity: 0.3; 
width: 20px; 
background-image: url('https://ssl.gstatic.com/ui/v1/icons/mail/ellipsis.png'); 
background-repeat: no-repeat no-repeat; background-position: initial"></div>
 ]]></example>
  
</section>   </sections></group>
<group> <title>Setting/Getting Attributes and Values Programmatically</title><sections>



<section>
 
  <description>When you host a Chrome control in an Xdialog you will often want to manipulate attributes of the HTML that is displayed using Xbasic.
You can obviously do this by using Xbasic to send Javascript to the Chrome control (using the .executeJavascript() method), but a more direct method is available using methods of the Chrome object that let you directly manipulate the DOM.
For example, say you want to set the Inner HTML of a div with the id of 'div1'.
You Xdalog could execute this code
</description>
  
  <example><![CDATA[dim js as c 
js = "document.getElementById('div1').innerHTML = '" + js_escape("some text") + "'; "
cp.ExecuteJavascript(js)
]]></example>
</section>   
<section>
  <description>However, the .SetInnerHTML() method provides a more direct way of accomplishing this. For example
</description>
  <example><![CDATA[cp.SetInnerHTML("div1","some text");]]></example>
  <note>The js_escape() function is a helper function that ensures that all text in the string is properly escaped so as not to cause Javascript errors.</note>
</section>
   <section>
     <description>Similarly you can use the following methods:
</description>
     <cases>
       <case>
         <title>HasElement(elementId)</title>
         <description>indicates whether the specified elementId is present</description>
       </case>
        <case>
         <title>HasAttribute(elementId,attributeName)</title>
         <description>indicates if the specified element has the specified attribute</description>
       </case>
        <case>
         <title>GetAttribute(elementId,attributeName)</title>
         <description>gets the value of the specified attribute from the specified element</description>
       </case>
        <case>
         <title>SetAttribute(elementId,attributeName,attributeValue)</title>
         <description>sets the value of an attribute</description>
       </case>
        <case>
         <title>GetInnerText(elementId)</title>
         <description>gets the inner text property of an element</description>
       </case>
        <case>
         <title>GetValue(elementId)</title>
         <description>gets the value of element (for example, an INPUT control)</description>
       </case>
        <case>
         <title>SetValue(elementId,value)</title>
         <description>sets the value of an element</description>
       </case>
        <case>
         <title>GetOuterHtml(elementId)</title>
         <description>gets the outer html for an element</description>
       </case>
        <case>
         <title>GetInnerHtml(elementId)</title>
         <description>gets the inner html for an element</description>
       </case>
        <case>
         <title>SetInnerHtml(elementId,value)</title>
         <description>sets the inner html of an element</description>
       </case>
    
     </cases>
     
   </section>
   
   <section>
     <description>Example code</description>
 <example><![CDATA[dim cp as helper::Chrome
html = "
This is div1
"
cp.html = html
dim dlg_title as c 
dim dlg_body as c 
dlg_body = <<%dlg%
{chrome=80,10cp};
<Set Inner HTML of div1!setdiv>;
<Set Attributes on div1!setattr>
%dlg%
dim dlg_event as c 
dlg_event = <<%code%
if a_dlg_button = "setdiv" then
    a_dlg_button = ""
    cp.SetInnerHtml("div1","Test Alpha Anywhere's ability to set the Inner HTML of an element.")
else if a_dlg_button = "setattr" then 
    a_dlg_button = ""
    cp.SetAttribute("div1","style","border: solid 1px blue; border-radius: 10px; background: yellow;")
end if 
%code%


dlg_title = "Using Google Charts in a Chrome Control in an Xdialog"
ui_dlg_box(dlg_title,dlg_body,dlg_event)
 ]]></example>    
     
     
   </section></sections></group>
   <group><title>Using Google Charts in an Xdialog</title><sections>
   <section>
     
    <description>You can use the Google Charts API to add charting to your Xdialogs. For example, the image below shows an Xdialog with a Google chart.
For example, the image below shows an Xdialog with a Google chart.
</description> 
    <videos>
      <video>
        <description>Watch video 
</description>
        <link>http://www.ajaxvideotutorials.com/V12Videos/xdialog_chrome_jquery_googleCharts.swf</link>
      </video>
      <video>
        <description>Download code
</description>
        <link>http://www.ajaxvideotutorials.com/V12Videos/xdialog_google_charts.zip</link>
      </video>
      
    </videos> 
   </section>
   
    <section>

    <description>TIP: In addition to watching the above videos, you might also find these videos helpful. They show how Googl Charts can be used in a UX Web component and they give more background information on using the Google API documentation to get working code samples:
</description> 
    <videos>
      <video>
        <description>Watch Video - Part 1
</description>
        <link>http://www.ajaxvideotutorials.com/V12Videos/googleChart_1.swf</link>
      </video>
      <video>
        <description>Watch Video - Part 2
</description>
        <link>http://www.ajaxvideotutorials.com/V12Videos/googleChart_2.swf</link>
      </video>
      
    </videos> 
   </section>
   <section>
     <figure><link>images/xdialog_googleCharts.jpg</link></figure>
   </section>
   
   </sections></group>
   <group> <title>Using the Alpha Anywhere Javascript Library, Styles and 3rd Party Javascript Libraries</title>
     <sections>
   
   
  <section>
   
    <description>A huge advantage of being able to use the Chrome control in your Xdialogs is the ability to use Alpha Anywhere Javascript libraries and styles and 3rd party libraries and styles in your Xdialog.
</description>
 

    
  </section> 
   
     <section>

    <description>A special helper function called a5_html_page_prepare() makes it very easy to create the HTML page that you will load into the Chrome control with all of the libraries and styles that you want.
The function takes some input HTML and then adds the necessary code to your input HTML to load the Javascript and styles that you specify.

The function syntax is:
</description>
    <example><![CDATA[c html = a5_html_page_prepare(C html [,C javascriptLibrariesPublic [,L flagIncludeA5JSlibraries 
      [,C A5StyleName [,C jQueryTheme [,L flagIncludeGoogleJSAPI ]]]]])
]]></example>
  
    
  </section> 
  
    <section>

    <description>where:
</description>

    <cases>
      <case>
           <description>html  -- the input HTML that you want to transform
</description>
      </case>
        <case>
           <description>javascriptLibrariesPublic - a comma delimited list of public Javascript libraries that can be loaded from the Google CDN
</description>
      </case>
        <case>
           <description>flagIncludeA5JSLibraries - .t./.f. - indicates if you want to include the Alpha Anywhere Javascript libraries
</description>
      </case>
        <case>
           <description>A5StyleName - the name of an Alpha Anywhere style sheet to load. If you us this option your HTML can use the {style} placeholder to refer to the style name.
</description>
      </case>
        <case>
           <description>jQueryTheme - Name of a jQuery UI theme. Typically only used if you are also loading the jQuery UI library (see javascriptLibrariesPublic)
</description>
      </case>
        <case>
           <description>flagIncludeGoogleJSAPI  -- .t./.f. - indicates if you want to load the Google JSAPI library. If you set this flag to true, the following Google Chart packages will also be loaded: 'table', 'corechart', 'gauge', 'geochart', 'treemap', 'orgchart', 'timeline'
</description>
      </case>
      
    </cases>
    
  </section> 
  
    <section>
  
    <description>The javascriptLibrariesPublic Parameter.
The following libraries can be loaded.
</description>

    <cases>
      <case>
           <description>AngularJS</description>
      </case>
        <case>
           <description>Chrome Frame
</description>
      </case>
        <case>
           <description>Dojo
</description>
      </case>
        <case>
           <description>Ext Core
</description>
      </case>
        <case>
           <description>jQuery
</description>
      </case>
        <case>
           <description>jQuery UI
</description>
      </case>
        <case>
           <description>MooTools
</description>
      </case>
        <case>
           <description>Prototype
</description>
      </case>
        <case>
           <description>script.aculo.us
</description>
      </case>
        <case>
           <description>SWFObject
</description>
      </case>
        <case>
           <description>Web Font Loader
</description>
      </case>
      
    </cases>
    
  </section> 
  
    <section>
 
    <description>For each library that you load, you can specify an optional build number. The syntax is:
</description>
    <example><![CDATA[libraryName|buildNumber]]></example>
  
  </section> 
   
     <section>
  
    <description>If you leave out the buildNumber then the most recent build on the Google CDN as of December 1, 2013 is loaded.
If you set the buildNumber to 'internal' then the code is loaded from the Google CDN and then cached locally so that future loads are faster.

</description>
 
  </section> 
     <section>
   
    <description>Example
</description>
    <example><![CDATA[dim html as c 
html = ""
html = a5_html_page_prepare(html,"jquery|internal,jquery 
ui|internal,angularjs|internal",.t., "iOS","Sunny")]]></example>
   
  </section> 
     <section>

    <description>In the above example:
</description>

    <cases>
      <case>
         <description>jQuery is being loaded from a local version
</description>
      </case>
       <case>
         <description>jQuery ui is being loaded from a local version
</description>
      </case>
       <case>
         <description>angularjs is being loaded from a local version
</description>
      </case>
       <case>
         <description>the Alpha Anywhere Javascript Library is being loaded
</description>
      </case>
       <case>
         <description>the iOS Alpha Anywhere style is being loaded
</description>
      </case>
       <case>
         <description>The 'Sunny' jQuery UI theme is being loaded.
</description>
      </case>
      
    </cases>
    <note>IMPORTANT: When you specify that Alpha Anywhere Javascript library and jQuery should be loaded the jQuery object is automatically changed from its default '$' to 'jQuery'.</note>
  </section> 
     <section>

    <description>For example, in the code below, the jQuery date picker is used for the input control.
</description>
   <videos>
     <video>
       <description>Watch video
</description>
       <link>http://www.ajaxvideotutorials.com/V12Videos/xdialog_chrome_jquery_dateControl.swf</link>
     </video>
     
     
   </videos>
    <cases>
      <case>
        
      </case>
      
    </cases>
    
  </section> 
   <section>
    <example><![CDATA[dim html as c 
html = <<%html%
<p>This input control uses the jQuery Date Picker</p>
<input id=&quot;dt1&quot; name=&quot;dt1&quot; value=&quot;1/1/2013&quot;/>
<script>
 jQuery('#dt1').datepicker({function(dateText, inst) 
 {$e.execute(this,'change')}});     
 </script>
 %html%
html = a5_html_page_prepare(html,"jquery|internal,jquery ui|internal",.t., "MobBlue","Sunny")

dim cp as helper::Chrome
cp.html = html
ui_dlg_box("Xdalog with Chrome Control - Using jQuery",<<%dlg%
{stretch=width,height}
{chrome=150,50cp};
%dlg%,<<%code%
%code%)]]></example>
  
  </section> 
<section>
  <description>And the resulting Xdialog
</description>
  <figure><link>images/xdialog_jquery_date.jpg</link></figure>
  
</section>   
</sections></group>
<group><title>Using the .OnReady() Event</title><sections>


<section>
  
 <description>The Chrome control has an .OnReady() event that fires, and executes Xbasic, once the control has been initialized. 
For example:
</description> 
  <example><![CDATA[dim cp as helper::Chrome
html = <<%html%
<div id=&quot;div1&quot;>This is div1</div>
%html%
cp.html = html

'the onReady event fires when the chrome control has been initialized
cp.OnReady = "ui_msg_box(\"Notice\",\"The Chrome control has been initialized.\")"

dim dlg_title as c 
dim dlg_body as c 
dlg_body = <<%dlg%
{chrome=80,10cp};
%dlg%
dim dlg_event as c 
%code%
dlg_title = "Xdialog"
ui_dlg_box(dlg_title,dlg_body,dlg_event) ]]></example>
  <note>The .onReady() event executes Xbasic code, not Javascript. If you want to fire Javascript when the Chrome control is ready, simply put an onload event in the tag of the HTML you display in the control. For example:
</note>
</section>
</sections></group>
<group> <title>Summary of Properties and Methods of the Chrome Object</title><sections>


<section>
 
  <description>When you dim a Chrome object, the resulting object instance has many properties and methods that are exposed to Xbasic.
For example</description>
 <example><![CDATA[dim cp as helper::chrome]]></example> 
</section>

<section>
  <description>When the above Xbasic is executed, the resulting Xbasic variable 'cp' has various method and properties, which are summaries here:
</description>
  
</section>
<section>
  <title>Properties
</title>
 <cases>
   <case>
     <description>flag_web_security_disabled   
</description>
   </case>
    <case>
     <description>flag_allow_file_access_from_url
</description>
   </case>
    <case>
     <description>flag_allow_universal_file_access_from_url
</description>
   </case>
    <case>
     <description>flag_page_cache_disabled
</description>
   </case>
    <case>
     <description>flag_caret_browsing_enabled
</description>
   </case>
    <case>
     <description>flag_databases_disabled
</description>
   </case>
    <case>
     <description>flag_plugins_disabled
</description>
   </case>
    <case>
     <description>flag_java_disabled
</description>
   </case>
    <case>
     <description>flag_javascript_disabled
</description>
   </case>
    <case>
     <description>flag_dom_paste_disabled
</description>
   </case>
    <case>
     <description>flag_encoding_detector_enabled
</description>
   </case>
    <case>
     <description>flag_drag_drop_disabled
</description>
   </case>
    <case>
     <description>flag_load_drops_disabled
</description>
   </case>
    <case>
     <description>flag_history_disabled
</description>
   </case>
    <case>
     <description>flag_remote_fonts_disabled
</description>
   </case>
    <case>
     <description>flag_image_load_disabled
</description>
   </case>
    
 </cases>
  
</section>
</sections></group>

<group> <title>Methods</title><sections>
<section>
 
 <cases>
   <case>
     <title>ExecuteJavascript(code)</title>
     <description>executes some Javascript</description>
   </case>
   <case>
     <title>ExecuteJavascriptResult(code)</title>
     <description>executes some Javascript and returns a result to Xbasic</description>
   </case>
   <case>
     <title>Print() </title>
     <description>invokes the Chrome control's print dialog</description>
   </case>
   <case>
     <title>GoBack()</title>
     <description></description>
   </case>
   <case>
     <title>GoForward()</title>
     <description></description>
   </case>
   <case>
     <title>Reload() </title>
     <description>reload the current page</description>
   </case>
   <case>
     <title>Stop()</title>
     <description>stops the page loading</description>
   </case>
   <case>
     <title>GetZoomLevel()</title>
     <description>gets the numeric zoom level</description>
   </case>
   <case>
     <title>SetZoomLevel(level)</title>
     <description>sets the zoom level</description>
   </case>
   <case>
     <title>OpenDevtools()</title>
     <description>opens the Chrome developer tools</description>
   </case>
   <case>
     <title>CloseDevtools() </title>
     <description>closes the Chrome developer tools</description>
   </case>
   <case>
     <title>OnReady(XbasicCode)</title>
     <description>executes Xbasic code when the Chrome control has been initialized.</description>
     <note>The tasks performed by the following method could just as well be done by using the .ExecuteJavascript() or .ExecuteJavascriptResult() methods. However, since these methods that go directly against the DOM without having to execute Javascript, they are more convenient to use.</note>
   </case>
   <case>
     <title>HasElement(elementId)</title>
     <description>indicates whether the specified elementId is present</description>
   </case>
   <case>
     <title>HasAttribute(elementId,attributeName) </title>
     <description>indicates if the specified element has the specified attribute</description>
   </case>
   <case>
     <title>GetAttribute(elementId,attributeName)</title>
     <description>gets the value of the specified attribute from the specified element</description>
   </case>
   <case>
     <title>SetAttribute(elementId,attributeName,attributeValue) </title>
     <description>sets the value of an attribute</description>
   </case>
   <case>
     <title>GetInnerText(elementId)</title>
     <description>gets the inner text property of an element</description>
   </case>
   <case>
     <title>GetValue(elementId)</title>
     <description>gets the value of element (for example, an INPUT control)</description>
   </case>
   <case>
     <title>SetValue(elementId,value)</title>
     <description>sets the value of an element</description>
   </case>
   <case>
     <title>GetOuterHtml(elementId)</title>
     <description>gets the outer html for an element</description>
   </case>
   <case>
     <title>GetInnerHtml(elementId)</title>
     <description>gets the inner html for an element</description>
   </case>
   <case>
     <title>SetInnerHtml(elementId,value)</title>
     <description>sets the inner html of an element</description>
   </case>
   <case>
     <title>AddEventListeners(definition)</title>
     <description>binds an event handler to an element. See section above 'Binding events programmatically'</description>
   </case>
    <case>
     <title>DropEventListeners(elementId)</title>
     <description>DropEventListeners(elementId)</description>
   </case>
   
   
   
 </cases> 
  
</section>









   
 </sections> 
 </group>
 
 
 
 
 <group>
   <title>Videos - Using the Chrome Embeddable Browser in Xdialog</title>
   <sections>
     <section>
        <description>Xdialog allows users who are building desktop applications to create very powerful 'screens' to prompt for and display information to users. You can now embed Google's Chrome browser directly into your Xdialogs. This means that you can use the full power of HTML, CSS3 and Javascript to create amazing looking Xdialog screen. When you embed the Chrome control in an Xdialog you can easily respond to events in the HTML with either Javascript of Xbasic code. You can also easily send events from Xbasic to the HTML that is displayed in the embedded Chrome control.

If you have used Xdialog in your desktop applications in the past, this new feature will open up many exiting possibilities.
</description>
     </section>
     <section>
       <title>Introduction</title>
       <videos>
         <video>
           <description>Watch video - Part 1</description>
           <link>http://www.ajaxvideotutorials.com/V12Videos/Xbasic_xdialog_with_chrome_intro.swf</link>
           
         </video>
           <video>
           <description>Watch video - Part 2
</description>
           <link>http://www.ajaxvideotutorials.com/V12Videos/Xbasic_xdialog_with_chrome_intro2.swf"</link>
           
         </video>
         
         
         
       </videos>
       
       
     </section>
      <section>
      <title>Debugger</title>
       <videos>
         <video>
           <description>Watch Video - Part 3</description>
           <link>http://www.ajaxvideotutorials.com/V12Videos/xdialog_chrome_debugger.swf</link>
           
         </video>
         
         
       </videos>
       
       
     </section>
      <section>
       <title>Binding events:</title>
       <videos>
          <video>
           <description>Watch video - Part 1</description>
           <link>http://www.ajaxvideotutorials.com/V12Videos/xdialog_chrome_bindingEvents1.swf</link>
           
         </video>
           <video>
           <description>Watch video - Part 2</description>
           <link>http://www.ajaxvideotutorials.com/V12Videos/xdialog_chrome_bindingEvents2.swf</link>
           
         </video>
         
         
         
       </videos>
       
       
     </section>
      <section>
       <title>Google Charts:</title>
       <videos>
         <video>
           <description>Watch video</description>
           <link>http://www.ajaxvideotutorials.com/V12Videos/xdialog_chrome_jquery_googleCharts.swf</link>
           
         </video>
       
         
       </videos>
       
       
     </section>
      <section>
       <title>Using jQuery:</title>
       <videos>
          <video>
           <description>Watch video</description>
           <link>http://www.ajaxvideotutorials.com/V12Videos/xdialog_chrome_jquery_dateControl.swf</link>
           
         </video>
         
         
         
       </videos>
       
       
     </section>
       <section>
       <description>For extensive documentation on how to embed a Chrome control into Xdialogs see the release notes.</description>
      
       
     </section>
     
     
     
   </sections>
   
   
   
 </group>
 
 
 
 
 
 
 
 
 </groups> 
  
</page>