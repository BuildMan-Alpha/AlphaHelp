<page>
	<shortlink>guides xdialog a tutorial in xdialog</shortlink>
	
	<topic>A Tutorial in Xdialog</topic>
	<description>A dialog, or dialog box, is used throughout Windows programs to interact with the user. A dialog can be used to gather information from the user, or to present information to users. Xdialog is an extremely powerful and flexible language for describing a standard Windows dialog box. In fact, testament to the power and flexibility of Xdialog is the fact that much of what's new in Alpha Anywhere is written using Xdialog.
</description>
<sections>
<section>
	<title>What is a Dialog?</title>
<description>
Xdialog allows you to create dialog boxes that contain all standard Windows controls, such as text boxes, combo boxes, list boxes, drop-down combo boxes, radio buttons, check boxes, tab controls, tree controls and more. In addition you can put images on dialog boxes, and you can create both modal and modeless dialog boxes.  In a modal dialog box, the user must close the dialog before giving focus to another window, while in a modeless dialog box, the user can leave the dialog box open, while continuing to work in other windows.

The following dialog, which is displayed when you choose the Backup Database command, is an example of a dialog box created using Xdialog. 
</description>	
	<figure><link>images/XD_Backup_Database.png</link></figure>
</section>	
<section>

<description>Xdialog will allow you to add dialog boxes to your application that are indistinguishable from dialog boxes that an experienced C or C++ programmer might create. And, it will allow you to do it in a fraction of the time that it would take even the most skilled C programmers!
</description>	
	
</section>	
<section>
	<title><![CDATA[Using the <;<; Delimiter ]]></title>
	<description><![CDATA[The Format parameter in the UI_DLG_BOX() command can be extremely long. It is not practical to enter the dialog Format on a single line between quotes.
The <;<; delimiter in an Xbasic script is used when you want to enter a long quoted string over many lines. The syntax of the <;<; delimiter is:
]]></description>
	<example><![CDATA[<;<;%code%
text...
text...
text...
%code%
]]></example>
	
</section>	
<section>
	<description>%code% is a tag that indicates the start of the string and the end of the string. The actual text used for the marker is irrelevant. The only requirement is that the marker at the beginning of the string must match the marker at the end of the string. In the above example, the text "code" is used as the marker.
</description>
<note>While you are free to use any string that you want in the %marker% delimiter, we recommend that you use %dlg% as the delimiter for the "Dialog Format" string, and %code% as the delimiter for the "Code" string in a UI_DLG_BOX() command. If you use these specially named delimiters, Alpha Anywhere will give you bubble-help in the Code Editor while you are editing these strings.</note>	
</section>
<section>
	<description>The following Xbasic commands create two CR-LF (carriage return-line feed) delimited strings:
</description>
	<example><![CDATA[Colors = <;<;%dlg%
Green
Red
Blue
%dlg%
Sizes = <;<;%code%
Small
Medium
Large
%code%
]]></example>
</section>
<section>
	<description><![CDATA[The << delimiter is used in practically every Xdialog script that you will create.]]>
</description>
</section>


<section>
	<title>Standard Controls
</title>
<description>In this lesson you will learn about the standard Windows controls, such as edit boxes, radio buttons, check boxes, etc. that you can place on your dialog boxes.
</description>
<cases>
	<case>
		<description>Simple Edit Control
</description>
	</case>
	<case>
		<description>Setting the Size of an Edit Control
</description>
	</case>
	<case>
		<description>Check Box Controls
</description>
	</case>
	<case>
		<description>Radio Buttons
</description>
	</case>
	<case>
		<description>Testing a Radio Control's Variable
</description>
	</case>
	<case>
		<description>Freeform Radio Button Controls
</description>
	</case>
	<case>
		<description>Multiple Freeform Radio Button Groups
</description>
	</case>
	<case>
		<description>Combo Boxes
</description>
	</case>
	<case>
		<description>Combo Boxes - Populated from a String
</description>
	</case>
	<case>
		<description>List Boxes
</description>
	</case>
	<case>
		<description>Dialog with Two List Boxes
</description>
	</case>
	<case>
		<description>Multi-Select List Box
</description>
	</case>
	<case>
		<description>Multi-Column List Box
</description>
	</case>
	<case>
		<description>Other Controls
</description>
	</case>
	
	
</cases>
	
</section>


<section>
	<title>Controlling the Layout of Controls</title>
<description>This lesson discusses the various commands and techniques that you can use to control the layout of your dialog boxes.
</description>
<cases>
	<case>
		<description>Understanding the Grid Nature of a Dialog Box
</description>
	</case>
	<case>
		<description>Address Dialog - No Formatting
</description>
	</case>
	<case>
		<description>Address Dialog - Column Formatting
</description>
	</case>
	<case>
		<description>Address Dialog - Adding Blank Lines
</description>
	</case>
	<case>
		<description>Address Dialog - Spacing of Controls
</description>
	</case>
	<case>
		<description>Address Dialog - Margins
</description>
	</case>
	<case>
		<description>Frames
</description>
	</case>
	<case>
		<description>Frames - Using Regions
</description>
	</case>
	<case>
		<description>Lines
</description>
	</case>
	<case>
		<description>Regions
</description>
	</case>
	<case>
		<description>Horizontal Regions
</description>
	</case>
	<case>
		<description>Sharing Row and Column Dimensions Across Regions
</description>
	</case>
	<case>
		<description>Using the {Col} and {Row} Commands
</description>
	</case>
	<case>
		<description>Advanced Example Using the {Row} and {Col} Commands
</description>
	</case>
	<case>
		<description>Cell Spillover
</description>
	</case>
	
	
</cases>
	
</section>



<section>
	<title>More on Controlling the Layout of Dialogs</title>
<description>This lesson presents additional commands and techniques that you can use to control the layout of your dialog boxes.
</description>
<cases>
	<case>
		<description>Specifying the Default Button
</description>
	</case>
	<case>
		<description>Setting the Button Width
</description>
	</case>
	<case>
		<description>Setting the Button Height
</description>
	</case>
	<case>
		<description>Setting the Button Hot Key
</description>
	</case>
	<case>
		<description>Conditionally Disabling Controls
</description>
	</case>
	<case>
		<description>Conditionally Showing Controls
</description>
	</case>
	<case>
		<description>Conditionally Replacing Controls
</description>
	</case>
	<case>
		<description>Conditionally Sizing Controls
</description>
	</case>
	<case>
		<description>Setting the Initial Focus
</description>
	</case>
	<case>
		<description>Auto-Selecting Text in a Text Box
</description>
	</case>
	
	
</cases>
	
</section>


<section>
	<title>Special Formatting for Text Box Controls</title>
<description>Text box controls have a large number of special formatting options that change the behavior and appearance of text box controls.
These formatting options are enclosed between '%' characters at the start of the text box.
</description>
<cases>
	<case>
		<description>Text Box Formatting Codes
</description>
	</case>
	<case>
		<description>User Defined Smart Fields
</description>
	</case>
	<case>
		<description>The Code Editor Control
</description>
	</case>
	<case>
		<description>Multi-line and Word-wrapped Text Boxes
</description>
	</case>
	
	
</cases>
	
</section>
<section>
	<title>Introduction to Dialog Box Events</title>
	<description>Up to this point, the dialogs that we have discussed have not included any event processing.
An understanding of how to process dialog events is essential if you want to create dialogs that behave in ways that are customized to work just the way you want. For example, using event processing, you could validate data in a control on a dialog, or you could change the value in variables, or arrays that are displayed by the dialog.
</description>
<cases>
	<case>
		<description>What is a Dialog Event?
</description>
	</case>
	<case>
		<description>What is a Dialog Event?
</description>
	</case>
	<case>
		<description>Keeping a Dialog Open after Processing Events
</description>
	</case>
	<case>
		<description>Trapping the OK Button
</description>
	</case>
	<case>
		<description>Trapping the Cancel Button
</description>
	</case>
	<case>
		<description>Trapping the Change Event
</description>
	</case>
	<case>
		<description>Trapping Other Events
</description>
	</case>
	<case>
		<description>Trapping the Double Click Event
</description>
	</case>
	<case>
		<description>Seeing the Name of Events
</description>
	</case>
	<case>
		<description>Using the KillFocus Event
</description>
	</case>
	<case>
		<description>Events and Working with Arrays
</description>
	</case>
	
</cases>	
</section>
<section>
	<title>Working with Images on Dialogs
</title>
	<description>Xdialog allows you to place images on dialogs. You can place the images on the dialog background, on a button, next to an element in a list box, and so on.
This lesson discusses some of the ways in which you can work with images.
</description>
<cases>
	<case>
		<description>Image Controls
</description>
	</case>
	<case>
		<description>Using Images from External Files
</description>
	</case>
	
</cases>	
</section><section>
	<title>More Dialog Box Controls
</title>
	<description>This lesson discusses several additional types of controls that you can put on a dialog box.
</description>
<cases>
	<case>
		<description>Check Box-List Box Control
</description>
	</case>
	<case>
		<description>Tabbed List Box Control
</description>
	</case>
	<case>
		<description>Tab Controls
</description>
	</case>
	<case>
		<description>Trapping Tab Control Events
</description>
	</case>
	<case>
		<description>Conditionally Displaying Panes on a Tab Control
</description>
	</case>
	
</cases>	
</section><section>
	<title>Adding Help To a Dialog Box</title>
	<description>You can add pop-up help to a dialog box using the {Help} command.
The pop-up help is accessed from a standard Windows help file (.hlp or .chm). You need a third party product, such as RoboHelp? to create Windows help files. The pop-up help is displayed when the user presses the F1 key. The pop-up help can also be displayed when the user presses a button on your dialog.
</description>
<cases>
	<case>
		<description>The Help Command
</description>
	</case>
	
</cases>	
</section><section>
	<title>

The Record List Control
</title>
	<description>A record list control displays data in a combo box, edit-combo box, or a list box. Unlike combo boxes or list boxes, however, the record list is populated dynamically with data from records in a table. The advantage of this over a combo box or list box is that there is no limit to the number of entries that can be displayed in a record list. In addition, record lists have other advantages over combo boxes in that they can be multi-columned.
If you are familiar with the Table Lookup Field Rule, you can think of the record list control as being loosely equivalent to a table lookup.
The record list control gives you a great deal of control over various aspects of the data in the drop-down list or list associated with the record list control. For example, you can control how many columns of data are displayed, column widths, what data is displayed in each column, which records are displayed in the list, and what value is returned when the user makes a selection.
</description>
<note>While this lesson will teach you the syntax of the record list commands (which frankly can get quite tricky), the easiest way to create a record list control on an Xdialog box is to let Alpha Anywhere do it for you automatically using Action Scripting. Use the "Display an Xdialog Box" action to create the Xdialog box, and then view the underlying Xbasic code.</note>
</section><section>


<cases>
	<case>
		<description>Simple Record Lists
</description>
	</case>
	<case>
		<description>Simple List Box-Record List Control
</description>
	</case>
	<case>
		<description>Advanced Record Lists
</description>
	</case>
	<case>
		<description>Syntax of the KEYLIST_BUILD function
</description>
	</case>
	<case>
		<description>Advanced List Box-Record List Control
</description>
	</case>
	<case>
		<description>Formatting Record Lists
</description>
	</case>
	<case>
		<description>Optimizing Performance of Advanced Record Lists
</description>
	</case>
	<case>
		<description>Record List Events
</description>
	</case>
	
</cases>	
</section><section>
	<title>Working with Pointer Arrays
</title>
	<description>Pointer arrays (also called "property arrays") allow you to represent "multi-columned" data in an array. For example, for a customer, you have information about the customer's name, address, phone number etc.
</description>
<note> For background, refer to the section on "Dot Variables" in the Xbasic Reference Manual.</note>
</section><section>
<description>Assume that you have the following information about some customers:
</description>
<figure><link>images/atable2.png</link></figure>
</section>
<section>
	<description>This data can be represented in a pointer array as follows:
</description>
	<example><![CDATA[DIM customer3 as P
Customer1.name = "Alpha"
Customer1.address = "1 Main St."
Customer1.city = "Boston"
Customer1.state = "MA"
Customer1.zip = "02116"
Customer1.phone = "6175551212"
Customer2.name = "Beta"
Customer2.address = "2 Center St."
Customer2.city = "New York"
Customer2.state = "NY"
Customer2.zip = "01001"
Customer2.phone = "2125551212"
Customer3.name = "Gamma"
Customer3.address = "3 Maple Ln."
Customer3.city = "Cambridge"
Customer3.state = "MA"
Customer3.zip = "02139"
Customer3.phone = "6178641212"]]></example>
	
</section>
<section>
	<description>This lesson discusses techniques for using pointer arrays in dialog boxes.
</description>
<cases>
	<case>
		<description>Displaying Data from a Pointer Array in a Dialog Box
</description>
	</case>
	<case>
		<description>Displaying Data from a Table
</description>
	</case>
	<case>
		<description>Displaying Data from a Table - One Record at a Time
</description>
	</case>
	
	
</cases>	
</section>

<section>
	<title>Tree Controls</title>
<description>A tree control is a variation of a list box. The tree control is very familiar to all Windows uses as many of the standard Windows user interfaces (such as the Explorer) utilize a tree control.
Like a list box, a tree control displays an array of value. In the case of the tree control however, the array of values must be specially formatted to represent the hierarchy of the tree.
By default, the period is used to indicate different levels of hierarchy, but any character can be specified.
For example, consider an array with the data:
</description>	
<example><![CDATA[a.1.A
a.1.B
a.2.A
a.2.B
b.1.A
b.1.B
b.2.A
b.2.B]]></example>	
	
</section>
<section>

<description><![CDATA[This data represents a tree with two top-level branches ("a" and "b"). The "a" branch has two second level branches ("1" and "2"), The "1" branch has two "leaves" ("A" and "B"), and so on.
A list box is converted into a tree control by changing the control directive from "^#" to "^<;".
For example, the following script displays the above data in a tree control:]]>
</description>	
<example><![CDATA[dim data[10] as C
data[1] = "a.1.A"
data[2] = "a.1.B"
data[3] = "a.2.A"
data[4] = "a.2.B"
data[5] = "b.1.A"
data[6] = "b.1.B"
data[7] = "b.2.A"
data[8] = "b.2.B"
result=ui_dlg_box("Simple Tree",<;<;%dlg%
{ysize=2}
[.32,10node^<;data]| 
 
%dlg% )]]></example>	
	
</section>
<section>

<description>The above script displays this dialog box. Lesson 12: A Simple Tree Control:

</description>	
<figure><link>file:///C:/dev/AlphaHelp/helpfiles/Desktop/Guide/Design/View/Xdialog/Controls/Tree Control/images/XD_Simple Tree.gif</link></figure>
	
</section>
<section>

<description>When you double click on a branch, the branch opens to display its children. In the picture below, we have double clicked on the "a" branch, then the "1" branch to display the leaves ("A" and "B"). 
</description>	
<figure><link>file:///C:/dev/AlphaHelp/helpfiles/Desktop/Guide/Design/View/Xdialog/Controls/Tree Control/images/XD_Simple Tree 2.gif</link></figure>
	
</section>

<section>
	<description>When you make a selection from a tree control, the variable is set to the full "path" of the current selection. For example, if the user selects "a", then the variable (called "node" in the above script) is set to "a". If the user selects "1", then the variable is set to "a.1". If the user selects "A", then the variable is set to "a.1.A".
The following script, which is a simple variation on the above script, demonstrates the point:
</description>
<example><![CDATA[dim data[10] as C
data[1] = "a.1.A"
data[2] = "a.1.B"
data[3] = "a.2.A"
data[4] = "a.2.B"
data[5] = "b.1.A"
data[6] = "b.1.B"
data[7] = "b.2.A"
data[8] = "b.2.B"
result=ui_dlg_box("Simple Tree",<;<;%dlg%
{ysize=2}
[.32,10node^<;data] |

 ;
[.32node]
%dlg% )
 ]]></example>	
</section>

<section>
	<description>The above script displays this dialog box, A Simple Tree Control-Showing Return Variable: 
</description>
	<figure><link>file:///C:/dev/AlphaHelp/helpfiles/Desktop/Guide/Design/View/Xdialog/Controls/Tree Control/images/XD_Simple Tree 3.gif</link></figure>
	
	
</section>
<section>
	<description>As you navigate in the tree, the control below the tree shows the value in the tree control variable.
</description>
	<cases>
		<case>
			<description>A Simple Tree Control
</description>
		</case>
		<case>
			<description>A Simple Tree Control - Showing the Return Variable
</description>
		</case>
		<case>
			<description>Adding Navigator Icons to a Tree Control
</description>
		</case>
		<case>
			<description>Adding Images to a Tree Control
</description>
		</case>
		<case>
			<description>Tree Control Events
</description>
		</case>
		
	</cases>
</section>
<section>
	<title>Advanced Buttons</title>
<description>This lesson covers various ways in which a button can be formatted. Often you will want to put bitmaps on buttons, combine bitmaps and text, and set the text on a button dynamically.</description>	
<cases>
	<case>
		<description>Variable Text on a Button
</description>
	</case>
	<case>
		<description>Putting Bitmaps on Buttons
</description>
	</case>
	<case>
		<description>Working with Images that Contain Multiple Sub-Images
</description>
	</case>
	<case>
		<description>Combining Text and Bitmaps on Buttons
</description>
	</case>
	<case>
		<description>Justifying the Bitmap and Text
</description>
	</case>
	<case>
		<description>Creating Buttons the Easy Way
</description>
	</case>
	<case>
		<description>Dynamically Changing the Bitmap on a Button
</description>
	</case>
	
</cases>	
</section>

<section>
	<title>Using Owner-Draw Specifications in Controls</title>
<description>As we saw in the previous lesson, the term "owner-draw" refers to the fact that the developer can control certain aspects about the appearance of a button. For example, we saw how owner-draw strings allowed us to put text and a bitmap on a button.
Owner-draw strings can also be used with other control types. In the case of list boxes and tree controls, for example, you may want to associate a bitmap with each entry in the control. Alternatively, you may want to transform the way the data in the control is displayed (e.g., swapping the order of two words in each array entry).
</description>	
<cases>
	<case>
		<description>A Simple Owner-Draw List Box
</description>
	</case>
	<case>
		<description>Understanding the Owner-Draw Operators
</description>
	</case>
	<case>
		<description>Numbering the Rows in a List Box
</description>
	</case>
	<case>
		<description>Transforming Data in a List Box
</description>
	</case>
	<case>
		<description>Specifying Multiple Images in a List Box
</description>
	</case>
	<case>
		<description>Another Approach to Specifying Multiple Images in a List Box
</description>
	</case>
	<case>
		<description>Specifying the Font of the List Box
</description>
	</case>
	<case>
		<description>Summary of Owner-Draw Commands
</description>
	</case>
	<case>
		<description>Deriving the Font to Use Dynamically
</description>
	</case>
	<case>
		<description>Dynamically Sizing List Box Row Height
</description>
	</case>
	<case>
		<description>Displaying List Box Entries in Color
</description>
	</case>
	<case>
		<description>Dynamic Buttons
</description>
	</case>
</cases>	
</section>

<section>
	<title>Using Embedded Owner-Draw Specifications in Controls</title>
<description>In the previous lesson we showed some techniques for including bitmaps and font information in the data displayed by various Xdialog controls. In this lesson we will show you how you can embed the owner draw directive directly in the data that you are displaying. In many cases this will greatly simplify using fonts and images in your controls.
</description>	
<cases>
	<case>
		<description>Displaying Data in Columns
</description>
	</case>
	<case>
		<description>Specifying the Font
</description>
	</case>
	<case>
		<description>Specifying the Font Color
</description>
	</case>
	<case>
		<description>Specifying the Row Background Color
</description>
	</case>
	<case>
		<description>Specifying Images in the Data
</description>
	</case>
</cases>	
</section>


<section>
	<title>Modeless Dialog Boxes
</title>
<description>A modeless Xdialog differs from a modal dialog box in that you can leave the dialog box open while continuing to work on other parts of Alpha Anywhere. Up till now, all of the examples in this book have been for modal dialog boxes.
Throughout Alpha Anywhere itself, we use modeless Xdialog boxes extensively. For example, the Query Genie, the Find by Key dialog, and the Index Selector are all modeless dialog boxes.
The syntax for modeless dialog boxes is virtually identical to the syntax for modal dialog boxes. The only difference is that the command to display a modeless dialog box is:
</description>	
<example><![CDATA[ui_modeless_dlg_box(title, dialog_body, dialogevent)
]]></example>	
</section>

<section>

<description>In addition, the title and dialog_event parameters are not optional, whereas in the case of a modal dialog, the title parameter can be blank and the dialog_event parameter can be omitted.
Following is an example of a very simple modeless Xdialog box.
</description>	
<example><![CDATA[ui_modeless_dlg_box("Name",<;<;%dlg%
Name: [.20name];
{lf};
;
%dlg%,<;<;%code%
if a_dlg_button = "close" then
   ui_modeless_dlg_close("name")
   end
end if
%code%)
]]></example>	
</section>
<section>
	<description>Simple Modeless Xdialog Box</description>
	<figure><link>images/XD_Simple Modeless.gif</link></figure>
</section>

<section>

<description>Notice that when you click the X on the title bar, the dialog box does not close. In fact, the only way to close this dialog is to click the "Close" button. When you click this button, the dialog box event handler executes this command:
</description>	
<example><![CDATA[ui_modeless_dlg_close("name")
]]></example>	
</section>

<section>

<description>which closes the modeless dialog box.
It is required that you explicitly include code in all modeless Xdialog boxes to close the dialog box. In order to enable users to close an Xdialog box by clicking the "X" on the title bar, you can include the {Can_Exit=event_name} command in the dialog box.
For example:
</description>	
<example><![CDATA[ui_modeless_dlg_box("Name",<;<;%dlg%
{can_exit=close}
Name: [.20name];
{lf};
;
%dlg%,<;<;%code%
if a_dlg_button = "close" then
   ui_modeless_dlg_close("name")
   end
end if
if a_dlg_button = "name" then
   if name <> "" then
       ui_msg_box("Hello","Hello " + name)
   else
       ui_msg_box("Hello","Please type in your name")
   end if
   end
end if
%code%)
]]></example>	
</section>

<section>

<description>This script will display the following dialog box, a Modeless Dialog - Enabling the X to Close:
</description>	
<figure><link>images/XD_Enabling the X to close.gif</link></figure>
<cases>
	<case>
		<description>Simple Modeless Dialog Box
</description>
	</case>
	<case>
		<description>Closing Modeless Dialog Boxes Automatically
</description>
	</case>
	<case>
		<description>Enabling the X Button to Close
</description>
	</case>
	
	
</cases>
</section>

<section>
	<title>Embedded Dialog Boxes
</title>
<description>Xdialog allows you to embed one dialog inside another dialog box. This is a very powerful concept because it allows you to create extremely complex dialog boxes using a very modular approach. The Settings dialog in Alpha Anywhere (accessed by selecting View > Settings from the menu) is an example of an Xdialog box that relies on embedded dialog boxes.
Explaining how embedded dialog boxes work is easiest by looking at a working example. Consider the following script:
</description>	
<example><![CDATA[ui_dlg_box("Embedded",<;<;%dlg%
{startup=init}
{embedded=60,15frame1};
{line=1,0};
;
%dlg%,<;<;%code%
if a_dlg_button = "init" then
   ui_modeless_dlg_box("frame1",<;<;%dlg%
   This is an embedded dialog box;
   %dlg%,<;<;%code2%
   1=1
   %code2%)
end if
%code%)
]]></example>	
	
</section>

<section>

<description>When this script is run, the following dialog box is displayed, a Simple Embedded Dialog Box:</description>	
<figure><link>images/XD_Embedded_dialog.gif</link></figure>
	
</section>

<section>

<description>Let's analyze how this script works.
Notice the command {embedded=60,15frame1}. This defines the area in which the embedded dialog box will display. An area 60 columns wide and 15 lines high is defined for the embedded dialog. This area is given an arbitrary label called "frame1". Any subsequent modeless dialog box that has a title of "frame1" will be displayed in the area defined for the embedded dialog.
Next, notice the command {startup=init}. The {startup=event} command is used to specify an event that should execute as soon as the dialog box is opened. In this case the startup event is called "init" and it executes the following code:
</description>	
<example><![CDATA[ui_modeless_dlg_box("frame1",<;<;%dlg%
This is an embedded dialog box;
%dlg%,<;<;%code2%
1=1
%code2%)]]></example>
</section>
<section>
	<description>The code displays a modeless dialog box with the title, "frame1". Because the dialog's title is "frame1" the dialog is displayed inside the parent dialog box. Notice that the event for this dialog box is a meaningless "1=1". as Discussed in the previous lesson, the event parameter is mandatory for a modeless dialog box. Since we do not have the need for a real event processor in this simple script, we just define a dummy event string that does not do much.
Notice that the embedded dialog box does not have any explicit code to close the modeless dialog box. That's because this modeless dialog box is used as an embedded dialog box and when the parent dialog box closes, the embedded dialog box also closes automatically.
The above example is not really that useful because it is so simple that you would be better off not using an embedded dialog box. However the following example is a much more practical example of how embedded dialog boxes can be used.
</description>
	<cases>
		<case>
			<description>Simple Embedded Dialog Box
</description>
		</case>
		<case>
			<description>Creating a Genie Dialog Box
</description>
		</case>
		
	</cases>
	
	
</section>
<section>
	<title>Miscellaneous Examples
</title>
	<cases>
		<case>
			<description>"Hot" Labels - Displaying Dynamic Help When Clicking on a Label
</description>
		</case>
		<case>
			<description>"Web" Style Buttons
</description>
		</case>
		<case>
			<description>A Genie Style Dialog that also has Tabs
</description>
		</case>
		<case>
			<description>Adding Right-Click Context Menus
</description>
		</case>
		<case>
			<description>Advanced - Computing the Size of an Embedded Dialog
</description>
		</case>
		<case>
			<description>Advanced - Reading Variables in External Modeless Xdialogs
</description>
		</case>
		<case>
			<description>Anchor Buttons - Advanced Example
</description>
		</case>
		<case>
			<description>Anchor Buttons - Exact Positioning of Buttons
</description>
		</case>
		<case>
			<description>Auto-Advance to Next Control When Current Control is Full
</description>
		</case>
		<case>
			<description>Calling the Generic Find/Replace/Goto Dialog Box
</description>
		</case>
		<case>
			<description>Colored Dynamic Text
</description>
		</case>
		<case>
			<description>Colored Static Text
</description>
		</case>
		<case>
			<description>Controlling Insertion Point and Selected Text in a Text Object
</description>
		</case>
		<case>
			<description>Displaying Data from a Set
</description>
		</case>
		<case>
			<description>Displaying Time Variables
</description>
		</case>
		<case>
			<description>Dynamic Dialog Box Titles
</description>
		</case>
		<case>
			<description>Edit Combo Box with Bubble Help for Choices
</description>
		</case>
		<case>
			<description>Explorer Style Dialog Box
</description>
		</case>
		<case>
			<description>Hanging Indents
</description>
		</case>
		<case>
			<description>ImageViewer Control - Displaying Images on an Xdialog
</description>
		</case>
		<case>
			<description>Linking Modeless Dialogs
</description>
		</case>
		<case>
			<description>MDI Xdialog Framework
</description>
		</case>
		<case>
			<description>MDI Xdialog with ListView Control
</description>
		</case>
		<case>
			<description>Menu Style Buttons
</description>
		</case>
		<case>
			<description>Move to Next Control on ENTER
</description>
		</case>
		<case>
			<description>Multiple Instances of a Modeless Dialog Box
</description>
		</case>
		<case>
			<description>Owner Draw Radio Buttons
</description>
		</case>
		<case>
			<description>Resizable List Box Columns
</description>
		</case>
		<case>
			<description>Rollup Modeless Dialog Boxes
</description>
		</case>
		<case>
			<description>Stretchable Window with Resizable Regions
</description>
		</case>
		<case>
			<description>Tab Stops - Controlling Which Controls Have Tab Stops
</description>
		</case>
		<case>
			<description>Where is the Mouse?
</description>
		</case>
	
	</cases>
	
	
</section>
<section>
	<title>ADO Examples</title>
<cases>
		<case>
			<description>Using the A5_ADO_TO_ARRAY function
</description>
		</case>
		<case>
			<description>Building Connection Strings
</description>
		</case>
	
		
</cases>	
	
</section>
<section>
	<title>ActiveX Examples</title>
<cases>
		<case>
			<title>Graphing
</title>
			<cases>
				<case>
					<description>XY Graph
</description>
				</case>
				<case>
					<description>Complete List of Supported Chart Types
</description>
				</case>
				<case>
					<description>Complete List of Supported Data Types
</description>
				</case>
				<case>
					<description>Pie Chart
</description>
				</case>
				<case>
					<description>Bar Graph
</description>
				</case>
				<case>
					<description>Interactive Pie Chart
</description>
				</case>
			</cases>
		</case>
		<case>
			<title>Other
</title>
			<cases>
				<case>
					<description>Using the Kodak Image Control
</description>
				</case>
				<case>
					<description>Using the Microsoft Calendar Control
</description>
				</case>
			</cases>
		</case>
		<case>
			<title>HTML
</title>
			<cases>
				<case>
					<description>Responding to JavaScript Events on an HTML Page
</description>
				</case>
				<case>
					<description>HTML Editor Style Xdialog Example
</description>
				</case>
				<case>
					<description>Internet Browser Style Xdialog Example
</description>
				</case>
				<case>
					<description>Creating a User Defined Control
</description>
				</case>
				<case>
					<description>Xdialog, HTML, and JavaScript - a Powerful Combination
</description>
				</case>
			</cases>
		</case>
		
</cases>	
	
</section>
<section>
	<title>Property Sheets
</title>
<cases>
	<case>
		<description>Customer Information Input
</description>
	</case>
	<case>
		<description>Populated from Table
</description>
	</case>
	<case>
		<description>Different Style Sheets
</description>
	</case>
	
</cases>	
	
	
</section>
</sections>	
	
	
</page>