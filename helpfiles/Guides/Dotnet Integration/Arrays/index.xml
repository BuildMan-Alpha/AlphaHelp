<page>
    <topic>Arrays</topic>
    <description>This section discusses creating Dotnet Array objects from Xbasic.</description>
    <discussion>
        <p>While Xbasic will automatically convert built-in Xbasic array types into equivalent dotnet, there are conditionswhere it is required that DotNet arrays be explicitly created.  </p>
        <p>A good example of where explicitly created dotnet array objects is needed is with the many 'Value' types. In XBasic, numeric values are generally always floating point, So when we convert a numeric array to DotNotimplicitly on invokation, The DotNet type is always creates an array of Double values.</p>
        <p>If the dotnet property you are setting, or method you are calling expects an array of 32 Bit integer values (Int32) Then passing an array of Double will result in a type error, and the call will fail. </p>
    </discussion>
    <sections>
        <section>
            <title>Creating an assigning an array of Int32 types from xbasic</title>
            <description>            
                <p>The System::Array::CreateInstance() Method creates a DotNet Array.  The
                First parameter is the type, the second parameter is the size of the array.</p>
                <p>The System::Type::GetType() method returns the Type given the name of the type.  
                In this case the type we want to create is 'System.Int32'. 
                </p>
                <p>The second parameter is the 'size' of the array to create, in this example we want to create array with two entries.
                </p>
                <p>Note that unlike C#, the array operator in XBasic starts ar '1' not '0'.</p>
            </description>
            <example><![CDATA[
dim arr as p = System::Array::CreateInstance( System::Type::GetType("System.Int32") , 2 )
arr[1] = 100
arr[2] = 200
]]></example>
        </section>
    </sections>
</page>