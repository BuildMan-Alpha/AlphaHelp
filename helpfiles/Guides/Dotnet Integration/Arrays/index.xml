<page>
    <topic>Arrays</topic>
    <description>This section discusses creating DotNet Array objects from XBasic.</description>
    <discussion>
        <p>While XBasic will automatically convert built-in XBasic array types into equivalent DotNet, there are conditions where it is required that DotNet arrays be explicitly created.  </p>
        <p>A good example of where explicitly created DotNet array objects are needed is with the many 'value' types. In XBasic, numeric values are generally always floating point. 
        When we convert a numeric array to DotNot implicitly on invocation, the DotNet type is always created as an array of Double values.</p>
        <p>If the DotNet property you are setting, or method you are calling expects an array of 32 Bit integer values (Int32) then 
        passing an array of Double will result in a type error, and the call will fail.</p>
    </discussion>
    <sections>
        <section>
            <title>Creating and Assigning an Array of Int32 types from XBasic</title>
            <description>            
                <p>The *[xb:System::Array::CreateInstance()]* method creates a DotNet Array.  The
                first parameter is the type, the second parameter is the size of the array.</p>
                <p>The *[xb:System::Type::GetType()]* method returns the *[xb:System::Type]* given the name of the type.  
                In this case the type we want to create is *['System.Int32']*. 
                </p>
                <p>The second parameter is the 'size' of the array to create.  It can also be an array of integers with lengths for each dimension.  In this example we want to create an array of one dimension with two entries.
		</p>
                <p>There is an optional third parameter that is the lower bounds for the array.  Note that .NET arrays are indexed beginning at zero, so you want to populate this argument accordingly (see below).
		</p>
                <p>Both the second and third arguments can be integer arrays, where each entry in the arrays represents the value for one of the dimensions of a multi-dimensional array.
                </p>
                <p>Note that unlike C#, the array operator in XBasic starts at '1' not '0'.</p>
            </description>
            <example><![CDATA[
dim arr as p = System::Array::CreateInstance( System::Type::GetType("System.Int32") , 2 )
arr[1] = 100
arr[2] = 200
]]></example>
        </section>
    </sections>
</page>