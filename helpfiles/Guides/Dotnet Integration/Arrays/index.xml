<page>
    <topic>Arrays</topic>
    <description>This section discusses creating DotNet Array objects from XBasic.</description>
    <discussion>
        <p>While XBasic will automatically convert built-in XBasic array types into equivalent DotNet, there are conditions where it is required that DotNet arrays be explicitly created.  </p>
        <p>A good example of where explicitly created DotNet array objects is needed is with the many 'Value' types. In XBasic, numeric values are generally always floating point. 
        When we convert a numeric array to DotNot implicitly on invokation, the DotNet type is always creates an array of Double values.</p>
        <p>If the DotNet property you are setting, or method you are calling expects an array of 32 Bit integer values (Int32) then 
        passing an array of Double will result in a type error, and the call will fail.</p>
    </discussion>
    <sections>
        <section>
            <title>Creating an Assigning an Array of Int32 types from XBasic</title>
            <description>            
                <p>The *[xb:System::Array::CreateInstance()]* Method creates a DotNet Array.  The
                first parameter is the type, the second parameter is the size of the array.</p>
                <p>The *[xb:System::Type::GetType()]* method returns the *[xb:System::Type]* given the name of the type.  
                In this case the type we want to create is *['System.Int32']*. 
                </p>
                <p>The second parameter is the 'size' of the array to create, in this example we want to create array with two entries.
                </p>
                <p>Note that unlike C#, the array operator in XBasic starts ar '1' not '0'.</p>
            </description>
            <example><![CDATA[
dim arr as p = System::Array::CreateInstance( System::Type::GetType("System.Int32") , 2 )
arr[1] = 100
arr[2] = 200
]]></example>
        </section>
    </sections>
</page>