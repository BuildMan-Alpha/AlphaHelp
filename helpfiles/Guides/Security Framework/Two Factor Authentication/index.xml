<page build="5786">
    <shortlink>two factor auth</shortlink>
    <topic>Two-factor Authentication</topic>
    <description>Enable Two-factor Authentication to provide a more secure way for users to log into your applications.</description>
    <sections>
        <section>
            <title>Overview</title>
            <description>
                <p>You can now use two-factor authentication for logging into to your applications. Two-factor authentication can be implemented as a user-preference (i.e. some users of your application may choose to enable it while others might want to continue using single-factor authentication). Users who elect to turn two-factor authentication on can then select the way in which they will get the authentication code. If you want to force all users of your application to use two-factor authentication you can write Xbasic code (discussed below) to automatically set the user preference.</p>
                <p>Two-factor authentication provides a more secure way for users to log into an application. The log-in process is divided into two stages. In the first stage the user is prompted for their userid and password. If the userid and password are successfully validated, the log-in process advances to the second stage where the user is prompted to enter an authentication code. </p>
                <p>If the user enters the correct authentication code they will then be logged into the application.</p>
                <p>There are various ways in which the user can get an authentication code after their userid and password have been validated in the first stage. The options are:</p>
                <p>
                    <list>
                        <item>
                            <name>SMS</name>
                            <description>A SMS message is sent to the user's mobile device. The SMS message contains the authentication code.</description>
                        </item>
                        <item>
                            <name>Email</name>
                            <description>An email is sent to the user with the authentication code</description>
                        </item>
                        <item>
                            <name>Google Authenticator</name>
                            <description>
                                <p>The user will open the Google Authenticator App on their mobile device to get a authentication code.</p>
                                <p>Before the user can use the Google Authenticator App they will first have to register the application. You can generate a QR code to help the user register your app in Google Authenticator (see below).</p>
                            </description>
                        </item>
                    </list>
                </p>
            </description>
        </section>
        <section>
            <title>How to Set up Two-Factor Authentication</title>
            <description>
                <p>Before you can turn on Two-Factor Authentication you must first define an Extended User Information table for your Web Project.</p>
                <p>This table is used to store each user's preferences for Two-Factor Authentication. For example, if a user specifies that they want to use SMS to receive their authentication code, the user's mobile phone number will be stored in this table. If the user specifies that they want to use Email to receive their authentication code, the user's email address will be stored in this table.</p>
                <p>Once you have defined the Extended User Information table for your Web Project you can set up your Two-factor Authentication properties.</p>
                <p>
                    <list bullet="true">
                        <item>
                            <name>To set up the Extended User Information table click the Project Properties button on the Web Projects Control Panel. Expand the Extended user security info property and define your settings. *[VERY IMPORTANT]*: When you define the fields for the Extended User Information table you must include a field called OtherOptionsJSON of type M.</name>
                        </item>
                        <item>
                            <name>To set up the Two-factor Authentication properties click the Project Properties button on the Web Projects Control Panel. Expand the Two-factor Authentication property and define your settings.</name>
                        </item>
                    </list>
                </p>
            </description>
        </section>
        <section>
            <title>Token Expiration</title>
            <description>
                <p>If a user elects to receive their two-factor authentication via SMS or Email you can now set an expiration on the token. The default expiration is 2 hours (7200 seconds). If a user does not use the token they received to complete stage 2 of their login within the allowed time, the token will expire and the user will have to start their login flow from scratch. You can set the token lifetime in the Web Project Properties.</p>
            </description>
        </section>
        <section>
            <title>Allowing Users to Set their Two-factor Authentication Preferences</title>
            <description>
                <p>Your Web Application will typically have a page where user's can go to define their two-factor authentication preferences. A sample UX component is provided for you to include in your Web Application. You can customize this sample component. To use this sample component, create a new UX Component and select the SecurityFramework-Two-FactorAuthenticationPreferences template. See "Two-factor Authentication Preferences Component" below for more information.</p>
            </description>
            <important>
                <p>You cannot use Two-factor Authentication with a Login Component. Two-factor Authentication can only be used with the integrated Login feature in the TabbedUI and UX Components.</p>
            </important>
        </section>
        <section>
            <title>Two-factor Authentication Preferences Component</title>
            <description>
                <p>A sample UX component is provided to allow you to let users of your application specify if they want to turn on two-factor authentication, and if so, what their preferred method is for getting the authentication code.</p>
                <p>If you want to allow users of your application to choose whether or not to use two-factor authentication then you will want to include this sample component in your application.</p>
                <p>When you create a new UX component, select the SecurityFramework-Two-FactorAuthenticationPreferences template.</p>
            </description>
            <figure>
                <link>images/2fauserpref1.jpg</link>
            </figure>
        </section>
        <section>
            <description>
                <p>Here is how the component will look for a user who has turned two-factor authentication on and who has selected the Google Authenticator app as their method for obtaining the authentication code.</p>
            </description>
            <figure>
                <link>images/2fauserpref2.jpg</link>
            </figure>
        </section>
        <section>
            <description>
                <p>If a user selects Google Authenticator as their method, the user can then click on the hyperlink shown in the above image to obtain a QR code that can be used to configure the Google Authenticator app on their mobile devices.</p>
            </description>
            <figure>
                <link>images/googleauthenticatorqrcode.gif</link>
            </figure>
        </section>
        <section>
            <description>
                <p>If the user selects SMS, the dialog will allow the user to enter their mobile device's phone number.</p>
                <p>If the user select Email, the dialog will allow the user to enter the e-mail address where the authentication code should be sent.</p>
            </description>
        </section>
        <section>
            <title>How to Programmatically Set A User's Two-factor Authentication Preferences</title>
            <description>
                <p>Two Xbasic functions make it easy to get and set a user's two-factor authentication settings. These are the [a5_setTwoFactorAuthenticationSettings()] and [a5_getTwoFactorAuthenticationSettings()] functions</p>
                <p>Setting Two-factor Authentication Options</p>
                <p>Syntax:</p>
                <p>
                    <example><![CDATA[p result = a5_setTwoFactorAuthenticationSettings(c userid,c  json)]]></example>
                </p>
                <p>Where:</p>
                <p>
                    <list>
                        <item>
                            <name>result</name>
                            <description>An object with error and errorText (if error is .t.) as properties.</description>
                        </item>
                        <item>
                            <name>userid</name>
                            <description>The user's user id</description>
                        </item>
                        <item>
                            <name>json</name>
                            <description>
                                <p>JSON string defining the two-factor options. For example:</p>
                                <p>
                                    <example><![CDATA[{
    "requireTwoFactorAuthentication": true,
    "method": "Google Authenticator",
    "mobilePhone": "",
    "email": ""
}]]></example>
                                </p>
                            </description>
                        </item>
                    </list>
                </p>
                <p>Getting Two-factor Authentication Options</p>
                <p>Syntax:</p>
                <p>
                    <example><![CDATA[c result = a5_getTwoFactorAuthenticationSettings(c userid)]]></example>
                </p>
                <p>Where:</p>
                <p>
                    <list>
                        <item>
                            <name>result</name>
                            <description>A JSON string showing user's settings. (Use [json_parse()] to convert the string to an Xbasic dot variable)</description>
                        </item>
                        <item>
                            <name>userid</name>
                            <description>The user's user id</description>
                        </item>
                    </list>
                </p>
                <p>An example of what the returned result might be:</p>
                <p>
                    <example><![CDATA[{
    "requireTwoFactorAuthentication": true,
    "method": "Google Authenticator",
    "mobilePhone": "",
    "email": ""
}]]></example>
                </p>
            </description>
        </section>
        <section>
            <title>How to Require All Users to Use Two-step Authentication</title>
            <description>
                <p>By default, the security framework uses single-step authentication. Once a user has entered a valid user id and password they are logged into the application.</p>
                <p>If you want to force all users to use two-step authentication you must programmatically set their two-step authentication preferences. This must be done on a user by user basis since each user's settings are unique (unless the method is Google Authenticator). Settings are unique for each user because in the case of SMS, it is necessary to store the user's mobile phone number and in the case of Email, it is necessary to store the user's email.</p>
                <p>Each user's initial log in to your application will be a single-step login. However, in the server-side onLogin event you can redirect the user to a page where you can prompt for their mobile phone number or email address and then you can store their preferences.</p>
                <p>On subsequent logins the user will go through the two-factor login process.</p>
            </description>
        </section>
        <section>
            <title>Sample Login Components</title>
            <description>
                <p>When you create a new UX component there are three sample template components that you can use for user login. These are:</p>
                <p>
                    <list bullet="true">
                        <item>
                            <name>[SecurityFramework-LoginComponent]</name>
                        </item>
                        <item>
                            <name>[SecurityFramework-LoginComponentMobileApp]</name>
                        </item>
                        <item>
                            <name>[SecurityFramework-LoginComponentMobileApp-PersistentLogin]</name>
                        </item>
                    </list>
                </p>
                <p>Each of these sample components has been updated to support two-factor authentication (if two-factor authentication is turned on for that user). If the user does not have two-factor authentication turned on, then these components will use a single step login process.</p>
            </description>
            <important>
                <p>When creating a Login component as a UX you should be sure to set the permission for the component and for the page that hosts the component as Always Allowed.</p>
            </important>
        </section>
        <section>
            <title>TabbedUI Component</title>
            <description>
                <p>The TabbedUI component allows you to integrate a login window as part of the component. The TabbedUI builder now has a section for customizing the UI that is shown when the prompt for the authorization code is shown.</p>
            </description>
            <figure>
                <link>images/2fatabbedui.gif</link>
            </figure>
        </section>
        <section>
            <title>Videos</title>
            <videos>
                <title>Introduction to Two-factor Authentication</title>
                <description>
                    <p>Two-factor authentication is a more secure than single-factor authentication because even if a user's password is stolen, the user account is still protected because the person who stole the password will likely not be able to get the authentication code to complete the login to the application.</p>
                    <p>In this video, we demonstrate a login component that utilizes two-factor authentication.</p>
                </description>
                <date>2019-04-10</date>
                <video>
                    <name>Watch Video</name>
                    <link>https://www.viddler.com/v/ba9e2b4f</link>
                </video>
            </videos>
        </section>
        <section>
            <videos>
                <title>Configuring the Extended User Information Table for Two-factor Authentication</title>
                <description>
                    <p>Before you configure a web project to use two-factor authentication, you first have to create an Extended User Information table for your web project.</p>
                    <p>This video shows how to create an Extended User Information table.</p>
                </description>
                <date>2019-04-10</date>
                <video>
                    <name>Watch Video</name>
                    <link>https://www.viddler.com/v/8da9434c</link>
                </video>
            </videos>
        </section>
        <section>
            <videos>
                <title>Configuring a Web Project to use Two-factor Authentication</title>
                <description>
                    <p>In order to use two-factor authentication in a web project you  must configure settings in the application Project Settings.</p>
                    <p>In this video, we show how two-factor authentication settings are defined.</p>
                </description>
                <date>2019-04-10</date>
                <video>
                    <name>Watch Video</name>
                    <link>https://www.viddler.com/v/e5b9f857</link>
                </video>
            </videos>
        </section>
        <section>
            <videos>
                <title>Setting User-preferences for Two-Factor Authentication</title>
                <description>
                    <p>Two-factor authentication is a preference setting for each user in your application. Some users may elect to turn two-factor authentication on, while others may prefer single factor authentication. If a user turns two-factor authentication on, they must specify which option they wish to use - SMS, Email or Goggle Authenticator.</p>
                    <p>A sample UX component is provided to allow users to set their two-factor authentication preferences. In this video we show how to use this sample UX component.</p>
                </description>
                <date>2019-04-10</date>
                <video>
                    <name>Watch Video</name>
                    <link>https://www.viddler.com/v/84c35c0a</link>
                </video>
            </videos>
        </section>
    </sections>
    <links>
        <link link="a5_setTwoFactorAuthenticationSettings function">a5_setTwoFactorAuthenticationSettings()</link>
        <link link="a5_getTwoFactorAuthenticationSettings function">a5_getTwoFactorAuthenticationSettings()</link>
        <link link="json_parse%20function">json_parse()</link>
        <link link="ux%20template%20securityframework%20logincomponent">SecurityFramework-LoginComponent</link>
        <link link="ux%20template%20securityframework%20logincomponentmobileapp">SecurityFramework-LoginComponentMobileApp</link>
        <link link="ux%20template%20persistent%20login">SecurityFramework-LoginComponentMobileApp-PersistentLogin</link>
    </links>
</page>