
h2 (already converted to title) - group
h3 - section
h4 - case or step





<p>Lists with Hierarchical Data </p>
<p>If you have Lists with hierarchical data, when you synchronize any List in 
the hierarchy, all of the Lists in the hierarchy are synchronized. The 
data sent back to the server by default includes the top level parent record and 
only the dirty child records. However, when synchronizing hierarchical data you 
can optionally submit all child records to the server (including records that 
were not edited).</p>
<p>To indicate that you want to submit all child records, not just dirty child 
records, set the 'allChildRecords' flag in optional arguments, as shown below:</p>

<p>{dialog.object}.saveListEdits('LIST',{rows: 'allRows', 
allChildRecords: true});</p>

<note> It only makes sense to submit all child records to 
the server if you have defined a custom synchronization handler. The option to 
define a custom synchronization handler is only available if the List data 
source is set to Custom or Static.</p>

<p>For example, say you have this hierarchy:</p>
<p>Customer List</p>
<p>    Orders List</p>
<p>        OrderDetails List</p>

<p>In other words, the OrderDetails List specifies that the Orders List is its 
parent, and the Orders List specifies that the Customer List is its parent, and 
the two child Lists (Orders and OrderDetails) specify that their data is 
pre-loaded.</p>
<p>In this example, the Customer List will contain all of the data for its child 
Lists.</p>
<p>When you synchronize edits at any level in the hierarchy, the 'logical' 
record is submitted to the server. The 'logical' record is the top-level 
parent record, and all of the child records. As mentioned above, by default, the 
'logical' record only includes leaf node child records that are dirty. 
However, if you set the allChildRecords flag to true then the composite record 
that is submitted to the server is the complete record (including clean child 
records).</p>

<p>{dialog.object}.synchronizeLists([options]) - Synchronizes all Lists. 
This method just calls the .saveListEdits() 
method for each List on the 
component. See .saveListEdits() for more information.</p>
<p>The options options object is described in the section covering the 
.saveListEdits()
method.</p>

<h3>List Methods - Detail View Part</h3>
<p>The following List methods can be used for Lists that have a Detail View 
part:</p>

<note>In order to invoke any of these methods, your 
Javsascript code must first get a pointer to the List object. For example:<br>
<br>
var listObj = {dialog.object}.getControl('LIST1');<br>
listObj.nameOfListMethodToInvoke();</p>

<p><listObj>.addTableRow(data [,options]) - Adds a new row of data to a 
List that has a Detail View. By default, the new row is added at the end of the 
List, but you can add the new row (i.e. insert the row) at any position by 
setting options.</p>
<p>Where:</p>
<ul>
<li>
data - an object with the values in the List that you want to set. 
</li>
<li>
options - an object with optional settings.</li>
</ul>
<p>The options object can contain these properties:</p>
<p>options.setFocusToTargetRow - true/false - If true, then focus will be 
given to the target row. The default for this property is false.</p>
<p>options.insertRow - true/false -- default false. Set to true if you 
want to insert at a specified position in the List rather than at the end. 
(Requires build 4444 or above)</p>
<p>options.insertPosition - if options.insertRow is true, specify 
where in the List the new row should be inserted. options.insertPosition can 
either be a number or a string. If it is a number, it represents a zero based 
row number in the List where the new record will be inserted. If it is a string 
it represents the List value where the new row will be inserted.</p>

<p>Example:</p>

<p>//create a data object with values for the columns in the List 
you want to edit</p>
<p>var data = {};</p>
<p>data.FIRSTNAME = 'Cecelia';</p>
<p>data.LASTNAME = 'Longwood';</p>

<p>//define optional settings<br>
var ops = {};</p>
<p>ops.setFocusToTargetRow = true;</p>

<p>//get a pointer to the List control and then call the .addTableRow() 
method</p>
<p>var lObj = {dialog.object}.getControl('CUSTOMERLIST')</p>
<p>lObj.addTableRow(data,ops);</p>

<p>//insert the new row at position 3 (zero based)</p>
<p>var ops = {};</p>
<p>ops.setFocusToTargetRow = true;</p>
<p>ops.insertRow = true;</p>
<p>ops.insertPosition = 3;</p>
<p>lObj.addTableRow(data,ops);</p>




<p>Contrast the .addTableRow() method with the List object's
.appendRows()
method.</p>
<p>The .addTableRow() method is the programmatic equivalent of the user entering
some values into the List Detail view controls and then clicking on the Save
button to save their changes back to the List. When the user does this, the List
becomes dirty and the edits that have been made to the list can be synchronized
with the server.</p>
<p>The .appendRows() method is a low level method that adds the data to the
List, but this method does not add the necessary information to the List to
cause the List row that was added to become dirty. The new row cannot be
synchronized with the server.</p>
<note> To programmatically update a table row see the .updateTableRow() 
method.</p>
<p><listObj>.deleteRow(options) - Marks the current row in the List
as deleted. The row is not physically removed from the List until the data are
synchronized. If the current row is a new record, then the row is immediately
removed from the List.</p>
<p>options - a JSON object with these properties:</p>
<p>prompt - true/false - prompt for confirmation. Default is true.</p>
<p><listObj>.detailViewIsDirty() - Returns true/false if the controls
that show the Detail View are dirty or not.</p>
<p><listObj>.disableDetailView([flag]) - disables all of the controls in
the Detail View. If flag is false, enables all controls.</p>
<p><listObj>.fieldIsDirty(field [, rowNumber]) - Returns true if the
specified field is dirty. If the rowNumber is not passed in the currently
selected row is used. For new records, the field is considered dirty if it is
not blank.</p>
<p><listObj>.harvestListRow([zeroBasedRowNum]) - gets a JSON object of
the data in the row. If row is an existing row, the object includes an _oldData
object with the original values in the row. If the optional row number is not
passed in, the current row is harvested.</p>
<p><listObj>.harvestList([flagPrimaryKeysOnly]) - gets an array of JSON objects for each row
in the list that is either dirty, or a new row;</p>
<p>You can optionally pass in a flag (true/false) to indicate that you want an
array of primary keys for the dirty rows.</p>
<p><listObj>.listIsDirty() - Returns true if the List control has any
dirty rows. A 'dirty' row is an edited row, or new row that has not yet been
committed on the serever side. See also {dialog.object}._hasDirtyLists()</p>
<p><listObj>.listRowIsDirty([zeroBasedRowNum]) - Returns true if the
current row in the List is dirty. You can optionally specify a zero based row
number.</p>
<p><listObj>.listRowIsNew([zeroBasedRowNum]) - Returns true if the
current row in the List is a new row. You can optionally specify a zero based
row number.</p>
<p><listObj>.newDetailViewRecord() - Sets all of the controls in the List
Detail view to their 'new record' value and unselects the current row in the
List.</p>
<p><listObj>.populateUXControls() - populates UX
controls with data from the List. This method is internal - it is called
automatically when the onSelect event fires if the List has a Detail View.</p>
<p><listObj>.resetForm([options]) - Resets the Detail View form. Options
is an optional JSON object with these properties:</p>
<p>prompt - true/false - if true, prompts for confirmation before
resetting the form</p>
<p><listObj>.resetRow([options]) - Resets a List row that has been edited
to its original values. If the row has been marked as deleted, then 'un-deletes'
the row. Options is an optional JSON object with these
properties:</p>
<p>prompt - true/false - if true, prompts for confirmation before
resetting the form.</p>
<p><listObj>.setRowClean([zeroBasedRowNum]) - sets the row state to
clear. If row num is not specified, current row.</p>
<p>var lObj = {dialog.object}.getControl('list1');<br>
lObj.setRowClean();</p>
<p><listObj>.setServerSideError(flag [, zeroBasedRowNum [, errorObject]])
- Used internally to put information about server side errors into the List's
data object. </p>
<p>Sets the data object ._hasServerSideError flag to true or false;</p>
<p>If flag is true then also sets the data object's .serverSideErrors object to
the passed in errorObject</p>
<p><listObj>.updateListFromUXControls() - Updates the data in the List
with edits made in the List's Detail View controls.</p>
<p>var lObj = {dialog.object}.getControl('list1');<br>
lObj.updateListFromUXControls();</p>

<p><listObj>.updateTableRow(primaryKeyOrRowNumber,data [,options]) -
Updates data in a row in a List that has a Detail View.</p>
<p>Where:</p>
<ul>
<li>primaryKeyOrRowNumber - The primary key value or row number (zero
based) of the row you want to update. If this argument is a string then it
is assumed to be a primary key value. If it is a number, then it is assumed
to be a row number. The primary key of the List is specified in the List
builder.</li>
<li>data - an object with the values in the List that you want to
set. </li>
<li>options - an object with optional settings.</li>
</ul>
<p>The options object can contain these properties:</p>
<p>options.setFocusToTargetRow - true/false - If true, then focus will be
given to the target row. The default for this property is false.</p>
<p>Example:</p>

<p>//create a data object with values for the columns in the List
you want to edit</p>
<p>var data = {};</p>
<p>data.FIRSTNAME = 'Cecelia';</p>
<p>data.LASTNAME = 'Longwood';</p>

<p>//specify the primary key of the row to update</p>
<p>var primaryKey = '1234';</p>

<p>//define optional settings<br>
var ops = {};</p>
<p>ops.setFocusToTargetRow = true;</p>

<p>//get a pointer to the List control and then call the .updateTableRow()
method</p>
<p>var lObj = {dialog.object}.getControl('CUSTOMERLIST')</p>
<p>lObj.updateTableRow(primaryKey,data,ops);</p>

<p>Contrast the .updateTableRow() method with the List object's .updateRow()
method.</p>
<p>The .updateTableRow() method is the programmatic equivalent of the user
entering some values into the List Detail view controls and then clicking on the
Save button to save their changes back to the List. When the user does this, the
List becomes dirty and the edits that have been made to the List can be
synchronized with the server.</p>
<p>The .updateRow() method is a low level method that updates the data in a
row, but this method does not add the necessary information to the List to cause
the List row that was edited to become dirty. It does also not add the
._oldData
object to the List to store the original values that were in the List row before
it was edited. The changes that were made to the List cannot be synchronized
with the server.</p>
<note> To programmatically add a table row see the .addTableRow() 
method.</p>


<p><listObj>._ClearServerSideErrors([zeroBasedRowNum]) - Used internally.
Clears error messages from the Detail View controls.</p>
<p><listObj>._debugListData() - shows the contents of the data object for
the current row in the List. You must have specified a placeholder for the debug
information.</p>
<p><listObj>._getControlsInDv() - Returns an array of all of the controls
in the Detail View. Only controls that actually exit are returned. For example,
say you specified that the Detail View is all of the controls in a container
called 'CONTAINER_1' and one of the controls in this container is called 'SHIPPING_ADDRESS',
but the List does not have a field called 'SHIPPING_ADRESS'. The array of
controls returned by this function will not include the 'SHIPPING_ADDRESS'
control.</p>
<p><listObj>._getListFieldFromControl() - Takes the name of a Detail View
control and returns the field name in the List that the control is mapped to.</p>
<p><listObj>._getRoute() - For use with Lists that contain hierarchical
data. Gets an array of objects with the current row primary key value (default)
or row number in all Lists in the hierarchy. Each object in the array has two
properties: list an row. 'list' is the name of the List, and row is the current
(zero based) row number that is selected. </p>
<p>For example, say you have three Lists - CUSTOMERS, ORDERS, ORDERDETAILS. </p>
<p>var lObj = {dialog.object}.getControl('CUSTOMERS');</p>
<p>var route = lObj._getRoute()</p>

<p>This will return an array that might look like this:</p>
<p>[</p>
<p>    {list: 'CUSTOMERS', row: 'ALFKI'},</p>
<p>    {list: 'ORDERS', row: '11063',</p>
<p>    {list: 'ORDERDETAILS', row: '11063|||27'}</p>
<p>]</p>

<p>To use row numbers:</p>
<p>var route = lObj._getRoute('rowNumber');</p>

<p><listObj>._hasClientSideError() - returns true if any control in the
List Deail View has a client-side validation error.</p>
<note> The placeholders that you specify for the Global Error Message and the
Fade-out Message will consume space in the Layout. You can wrap then in a NoFloat container and set the float property of the container iself to .f. so
that they don't consume space.</p>
<p><listObj>._logicalRow2PhysicalRow() - Takes the logical row number
(the value of the *key property in the data object - also the same as the row
number in the data when it is loaded - before any client side sorting/filtering)
and converts to a physical row number in the current sorted/filtered client side
view of the data.</p>
<p><listObj>._setRoute(routeArray) - For use with Lists that contain
hierarchical data. Sets the selected row on each List in the routeArray. See
._getRoute()
method for more details.</p>
<note> If you don't pass in a routeArray to the
method, the method will look for a value in the <listObj> '__currentRoute'
property. This property is automatically set when you call the {dialog.object}.saveListEdits()
method.</p>
<p><listObj>._showServerSideErrors([zeroBasedRowNum]) - Used internally.
Paints error messages on the Detail View controls using information stored in
the List data .serverSideErrors object.</p>

<h3>List Methods - Search Part</h3>
<p>The following List methods can be used for Lists that have a integrated Search
part:</p>

<note>In order to invoke any of these methods, your
Javsascript code must first get a pointer to the List object. For example:<br>
<br>
var listObj = {dialog.object}.getControl('LIST1');<br>
listObj.nameOfListMethodToInvoke();</p>


<p><listObj>.searchModeOn() - If the List Search Part is set to 'QueryByForm'
then turns search mode on.</p>
<p>Example: </p>
<p>var lobj = {dialog.object}.getControl('LIST1')<br>
lobj.searchModeOn();</p>

<note> The search mode can be displayed by adding a Label control to the UX and
setting the control's client-side calculated expression to:<br>
dialog.listDetailView.LISTNAME.mode<br>
<br>
where 'LISTNAME' would be replaced by the actual List name (in capitals).</p>
<p><listObj>.searchModeOff() - If the List Search Part is set to 'QueryByForm'
then turns search mode off.</p>
<p>Example: </p>

<p><listObj>.searchList([options]) - Submits the Search Part to
search the List.  You can specify if the search should be performed
client-side, server-side or 'auto'.</p>
<ul>
<li>options - an optional JSON format string that indicates where the
search should be performed (client-side or server-side). In the case of
server-side search, you can set additional optional properties. </li>
</ul>
<p>The JSON options object has the following optional properties:</p>

<ul>
<li>
searchMode - can
be set to clientSide,
serverSide or
auto. The 'auto' option performs a server-side search if the List is not 'dirty'
(i.e. does not have any unsynchronized edits). Otherwise, it performs a
client-side search.</li>
</ul>
<ul>
<li>
maxRows - in the case of a
server-side search, indicates the maximum number of rows that the search is
allowed to return. This property overrides the property that is set in the
List Builder on the Search Part pane.</li>
</ul>
<ul>
<li>
maxPayload - in the case of
a server-side search, indicates the maximum payload that the search is
allowed to return. This property overrides the property that is set in the
List Builder on the Search Part pane.</li>
</ul>
<p>Example:</p>
<p>
{dialog.object}.getControl('LIST1').searchList({searchMode : 'auto', maxRows:
30});</p>

<note> The 
beforeSearch client-side event fires before the search is performed. This
event exposes the searchWhere property that tells you where the search will be
performed.</p>

<p><listObj>.clearSearchList([options]) - Removes any filter previously
applied by submitting the Search Part.</p>
<p>See .searchList() method for information about options.</p>

<p><listObj>.queryByFormClearControls() - Removes the search criteria
from the Detail View form when the List is in 'search' mode.</p>
<p>Events</p>
<ul>
<li>beforeSearch - Fires before the search is executed. The 'e'
object passed into the event has these properties:
searchMode - 'search' (user
is performing a search) or 'clear' - user is clearing a previously applied
search and searchWhere - 'clientSide'
or 'serverSide'.</li>
<li>afterSearchComplete - Fires after the search has executed. The
'e' object passed into the event has these properties:
searchMode - 'search' (user
is performing a search) or 'clear' - user is clearing a previously applied
search and recordsInQuery -
a count of the number of records found by the search.</li>
</ul>

<title>Videos</title>


<table>



<tr>
<td>
UX Component - List Control</td>
<td>
Introduction to the List Control Detail View</td>
<td>
The List control can have an associated Detail
View. The Detail View allows you to see details
for the currently selected row in the List. The
Detail View can be updateable, allowing you to
update data that is in the List.<br>
<br>
In this video we show how you can add a Detail
View to a List. We show two different genies
that you can use - one for setting up a List
with a Detail View, and another for adding a
Detail View to an existing List.<br>
<br>
IMPORTANT: Lists with Detail Views are
the essential building block for applications
that can work while you are disconnected. For
more information about the features of Lists
with Detail Views, see the videos in the 'UX
Component - Disconnected Applications' category.
<u>Even if you do not need to build mobile
applications that work while disconnected, the
information regarding Lists and Detail Views in
these videos will be relevant.</u><br>
<br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_list_detailView1.swf">Watch Video - Part
1</link><br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_list_detailView2.swf">Watch Video - Part 2</link><br>
<br>
<br>
Date Added: 2014-09-07</td>
</tr>



<tr>
<td>
UX Component - List Control</td>
<td>
Contrasting Data Binding at the UX Level with
Data Binding at the List Level to Update a SQL
Database</td>
<td>
When you want to update data in a SQL database
using a UX component you previously could define
Data Binding properties for the UX component,
then define a server-side action that loaded the
primary keys of the records you wanted to edit
and another server-side action to save the edits
back to the SQL database.<br>
<br>
Now, using a List control with an updateable
Detail View, you can perform edits on a SQL
database using the List and its associated
Detail View.<br>
<br>
In this video we contrast the two methods of
performing CRUD (create, read, update, delete)
operations on a SQL database using Data Binding
and List controls.<br>
<br>
<br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_crud_1.swf">Watch Video - Part
1</link><br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_crud_2.swf">Watch Video - Part 2</link><br>
<br>
<br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_crud_compare.zip">Download Components</link><br>
<br>
Date Added: 2014-09-07</td>
</tr>



<tr>
<td>
UX Component - List Control</td>
<td>
List Control Search Part </td>
<td>
The List control has a built-in Search Part that
allows you to perform searches on the database
that is used to populate the List. (This is very
much like the Search Part in a Grid component).<br>
<br>
The Search Part in the List can be configured in
three different ways:<br>
- individual fields for the Search Part
(allowing the user for example to enter criteria
in a Name, City or Country field)<br>
- a single keyword field (allowing the user to
enter criteria in a single field then then
searching for matches in multiple fields)<br>
- query by form (allowing the List's Detail View
to be used to enter the search criteria)<br>
<br>
In this video we show how the various options
can be used to search a List. <br>
<br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_list_searchPart_1.swf">Watch Video - Part 1</link><br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_list_searchPart_2.swf">
Watch Video - Part 2</link><br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_list_searchPart_3.swf">
Watch Video - Part 3</link><br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_list_searchPart_4.swf">
Watch Video - Part 4</link><br>
<br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/list_searchPart.zip">
Download Components</link><br>
<br>
Date Added: 2014-09-07</td>
</tr>



<tr>
<td>
</td>
<td>
</td>
<td>
</td>
</tr>



<tr>
<td>
UX Component - Disconnected Applications</td>
<td>
Introduction</td>
<td>
You can build applications that are designed to
work when you are disconnected. The UX component
and the List control are the fundamental
building blocks of these types of applications.<br>
<br>
In this video overview we show how a UX
component is built using a List control with an
associated Detail View to display and edit data,
how the data in the List is persisted to Local
Storage and then how the edits made to the List
data are synchronized with the server. We also
show how your disconnected data can be
'hierarchical' - i.e. a list of customers, with
orders for each customer and order details for
each order.<br>
<br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_disconnected_introduction_1.swf">Watch Video 1 - Setting up a List with a Detail
View using the Quick Setup Genie</link><br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_disconnected_introduction_2.swf">Watch Video 2 -
Editing Data and Persisting Data to Local Storage</link><br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_disconnected_introduction_3.swf">Watch Video 3 - Introduction to Hierarchical
Data Structures</link><br>

<br>
Date Added: 2014-09-07</td>
</tr>



<tr>
<td>
UX Component - Disconnected Applications</td>
<td>
Editing Data While Offline and then
Synchronizing the Data</td>
<td>
When you build an application for disconnected
operation, the List control is the basic
building block for the application. The List
control is used as the 'offline' data storage.
The data in the List control can be thought of
as an in-memory table. Edits to this data are
persisted to Local Storage and then are pushed
to the server to synchronize with the server
database when a connection is available.<br>
<br>
In this video we look at how data in the List
are edited and then synchronized with the server
database.<br>
<br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_editing_data_whileOffline.swf">Watch Video</link><br>
<br>
Date Added: 2014-09-07</td>
</tr>



<tr>
<td>
UX Component - Disconnected Applications</td>
<td>
Editing Data While Offline - Behind the Scenes -
What Data are Stored in the List</td>
<td>
In order to get a better understanding of how
the data in a List control are stored to support
disconnected operation, this video shows how you
can debug into the internal data that is stored
in the List when the user edits, enters and
deletes records.<br>
<br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_dataObjectForEachRow.swf">Watch Video</link><br>
<br>
Date Added: 2014-09-07</td>
</tr>



<tr>
<td>
UX Component - Disconnected Applications</td>
<td>
Synchronization Errors - Validation Errors</td>
<td>
When a user synchronizes edits to data that were
made while they were offline, there is the
possibility of synchronization errors.<br>
<br>
These errors can typically result because the
user entered a value in a field that was
rejected by some server-side validation logic, because of a write conflict,
or because the database rejected the edit.<br>
<br>
In this video we show how synchronization errors
that result from server-side validation errors
and database errors
are handled.<br>
<br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_serversidevalidation_1.swf">
Watch Video - Part 1</link><br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_serversidevalidation_2.swf">
Watch Video - Part 2</link><br>
<br>
<br>
Date Added: 2014-09-07</td>
</tr>



<tr>
<td>
UX Component - Disconnected Applications</td>
<td>
Synchronization Errors - Write Conflicts</td>
<td>
When a user synchronizes edits that were made
while they were offline, there is the
possibility that some other user edited and then
synchronized the same data before the user had a
chance to synchronize his/her edits.<br>
<br>
If this happens a write conflict will occur and
the user will be notified that the synchronize
operation could not be completed. The user will
have to choose how to resolve the conflict. The
developer also has the option of handling write
conflict errors programmatically.<br>
<br>
In this video we show how write-conflict errors
are handled.<br>
<br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_write_conflict1.swf">
Watch Video - Part 1</link><br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_write_conflict2.swf">
Watch Video - Part 2</link><br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_write_conflict3.swf">
Watch Video - Part 3</link><br>
<br>
<br>
Date Added: 2014-09-07</td>
</tr>



<tr>
<td>
UX Component - Disconnected Applications</td>
<td>
Synchronization Events</td>
<td>
When data in a List control is synchronized with
the server database there are a number of events
that fire (on both the client-side and the
server-side) that give you a lot of control over
the process and allow you to inject custom code
to be executed.<br>
<br>
In this video we discuss some of the events that
fire when data are synchronized.<br>
<br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_list_synch_events.swf">Watch Video</link><br>
<br>
Date Added: 2014-09-07</td>
</tr>



<tr>
<td>
UX Component - Disconnected Applications</td>
<td>
Custom Synchronization Handlers</td>
<td>
When the user synchronizes a List that is based
on a SQL database, Alpha Anywhere automatically
generates the SQL statements to perform the
various CRUD (create, read, update, delete)
operations.<br>
<br>
However, if your List is based on a custom
datasource (for example, a web service), then
you must write your own functions to handle
synchronization of the data.<br>
<br>
In this video we show an example of how custom
handlers can be written to synchronize data.<br>
<br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/xb_customSync_1.swf">Watch Video - Part 1</link><br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/xb_customSync_2.swf">Watch Video - Part
2</link><br>
<br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_customHandlers_list_synchronization.zip">
Download Component</link><br>
<br>
Date Added: 2014-09-07</td>
</tr>



<tr>
<td>
UX Component - Disconnected Applications</td>
<td>
Incremental Refresh</td>
<td>
After a List has been populated with data from
the server you can perform incremental refreshes
on the List data to retrieve any edits that have
been made to server data. Unlike a full refresh,
only rows that have been edited are sent to the
client, resulting in a much smaller payload
being sent to the client compared to a full
refresh of the List data.<br>
<br>
You can also set a 'synchronization policy' in
the List definition to specify that every time
edits to the List data are synchronized with a
server an incremental refresh of the List should
also be performed.<br>
<br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_incrementalRefresh.swf">Watch Video</link><br>
<br>
Date Added: 2014-09-07</td>
</tr>



<tr>
<td>
UX Component - Disconnected Applications</td>
<td>
Geographic Data - Capturing Location Information
when the User Edits Data</td>
<td>
You can configure a List so that every time the
user enters a new record, or edits a record, the
user's location will be stored. This allows you
to create applications where you capture the
location of the device at the time a record was
edited or entered.<br>
<br>
In this video we show how this is done.<br>
<br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_list_captureLocation.swf">
Watch Video - Part 1</link><br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_list_captureLocation2.swf">
Watch Video - Part 2</link><br>
<br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_geography.zip">
Download Component</link><br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/mysql_schema_geogTable.zip">
Schema for MySQL Table Used in Component</link><br>
<br>
Date Added: 2014-09-07</td>
</tr>



<tr>
<td>
UX Component - Disconnected Applications</td>
<td>
Geographic Data - Capturing Location Information
when the User Synchronizes Data</td>
<td>
In a  previous video we show how location
information can be captured at the time the user
edits a record in the List. But you can also
capture location information at the time the
user synchronizes the data.<br>
<br>
In this video who show how to configure the List
to submit location information at the time the
user synchronizes the List.<br>
<br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_list_captureLocationAtSynchTime.swf">
Watch Video</link><br>
<br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_captureLocationOnSynch.zip">
Download Component</link><br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/mysql_schema_geogTable.zip">
Schema for MySQL Table Used in Component</link><br>
<br>
Date Added: 2014-09-07</td>
</tr>



<tr>
<td>
</td>
<td>
</td>
<td>
</td>
</tr>



<tr>
<td>
UX Component - Disconnected Applications</td>
<td>
Geographic Data - Geocoding Data</td>
<td>
In order to perform geography searches on your
data (for example, find all records that are
within 5 miles of my current location), you need
to geocode the data in your table. For example,
if you have captured the address for the record,
when the record is synchronized, you can make a
call to a geocoding service to get the
latitude/longitude for the record. Then when the
record is written to the database you can also
compute the location field value so that
geography searches are possible.<br>
<br>
In this video we discuss the features that the
List control exposes to support working with
geographic data.<br>
<br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_geocodedataonsynch.swf">
Watch Video</link><br>
<br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_geocode.zip">
Download Component</link><br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/mysql_schema_geocodeexample.zip">
Schema for MySQL Table Used in Component</link><br>
<br>
Date Added: 2014-09-07</td>
</tr>



<tr>
<td>
UX Component - Disconnected Applications</td>
<td>
Setting Default Values for Fields in New Records</td>
<td>
When you enter a new record in a List with a
Detail View you might want to set default values
for certain of the fields in the Detail View.<br>
<br>
The List builder allows you to execute
Javascript code to compute the default value for
each field in the List. This allows for
sophisticated computations for the default
value, including setting the default value for a
field to the value that was just entered into
the previously entered record.<br>
<br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_definingDefaultValueForNewRecord.swf">
Watch Video</link><br>
<br>
Date Added: 2014-09-07</td>
</tr>



<tr>
<td>
UX Component - Disconnected Applications</td>
<td>
Synchronizing Data in Batches</td>
<td>
If the user has made a large number of edits
while they were offline you might want to
synchronize the data in batches, rather than
sending all of the edits to the server at once.
<br>
<br>
In this video we show how you can configure the
synchronization process so that data are sent to
the server in batches.<br>
<br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_batchSynch.swf">
Watch Video</link><br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_synch_in_batches.zip">
Download Component</link><br>
<br>
Date Added: 2014-09-07</td>
</tr>



<tr>
<td>
UX Component - Disconnected Applications</td>
<td>
Delaying Populate List Till Active Search</td>
<td>
In an application designed for disconnected
usage, the user will typically load a subset of
the database onto their mobile device while they
have connection.<br>
<br>
This is usually done by adding a Search Part to
the primary List control in the component and
specifying the the List should not be populated
until the user has performed a search to
retrieve the 'records of interest'. <br>
<br>
TIP: For more information on how to set up the
Search Part for a List control see the video
titled 'List Control Search Part'.<br>
<br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_search_delayPopulate.swf">
Watch Video</link><br>
<br>
Date Added: 2014-09-07</td>
</tr>



<tr>
<td>
UX Component - Disconnected Applications</td>
<td>
Settings Maximum Number of Records that a Search
Can Return</td>
<td>
In an application designed for disconnected
usage, the List controls in the UX component
hold the data that will be available while the
user is offline. These Lists are populated when
the user does a search to retrieve the 'records
of interest' that they want to have available to
them while they are on-line.<br>
<br>
Since the amount of data that can be held on a
mobile device is limited, you will typically
want to ensure that the user does not enter
search criteria that retrieve too many records.<br>
<br>
In this video we show how you can set limits on
how large a result a user search is permitted to
return.<br>
<br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_search_settingMaxSize.swf">
Watch Video</link><br>
<br>
Date Added: 2014-09-07</td>
</tr>



<tr>
<td>
UX Component - Disconnected Applications</td>
<td>
Persisting Data to Local Storage</td>
<td>
When you build an application for disconnected
operation you need to be sure that the data in
the application is persisted to Local Storage so
that edits that are made to any data are not
lost if the application is restarted before the
user has had a chance to synchronize the data
with the server.<br>
<br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/UX_LocalStorage_1.swf">Watch Video - Part 1</link><br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/UX_LocalStorage_2.swf">Watch Video - Part 2</link><br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/UX_LocalStorage_3.swf">Watch Video - Part
3</link><br>
<br>
<br>
Date Added: 2014-09-07</td>
</tr>



<tr>
<td>
UX Component - Disconnected Applications</td>
<td>
Working with Hierarchical Data</td>
<td>
The data for disconnected applications are
stored in List controls. In many types of
applications the data you need to work with is
hierarchical. For example, you might have a list
of customers. Each customer has orders and each
order has order details.<br>
<br>
In a connected application, you can make an Ajax
callback to the server when a user selects a
different customer to fetch to orders for that
customer. However, in a disconnected application
you cannot make callbacks to the server, so when
the user selects a customer, the orders for that
customer must already have been retrieved from
the server so that the data can be shown without
making an Ajax callback.<br>
<br>
The List control can easily be populated with
hierarchical data. In this video we explain how
a List control is populated with a customers,
each customers' orders, and each order's
details.<br>
<br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_hierarchicaldata_1.swf">
Watch Video - Part 1</link><br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_hierarchicaldata_2.swf">
Watch Video - Part 2</link><br>
<br>
In this follow on video we show how new records
can be added to child tables and how the new
records are automatically linked to their
parent. In the video we show how a new order is
added for the selected Customer record and then
how new order detail records are added for the
new order. When the data are synchronized, the
linking fields are automatically filled in - the
customer Id is filled into the new order record
and the order id is filled into the new order
detail records.<br>
<br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_hierarchicaldata_3.swf">
Watch Video - Part 3</link><br>
<br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_cust_order_details.zip">
Download Component</link><br>
<br>
<br>
Date Added: 2014-09-07</td>
</tr>



<tr>
<td>
UX Component - Disconnected Applications</td>
<td>
Managing Local Storage</td>
<td>
When you build an application that is designed
for offline use (i.e. a disconnected application), the data in
the List controls, and the variables in the UX
component are persisted to Local Storage.<br>
<br>
In this video we show how you can manage the
data in Local Storage using the built-in Local
Storage manager and using methods of the UX
component.<br>
<br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_manage_localStorage_1.swf">Watch Video - Part 1</link><br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_manage_localStorage_2.swf">Watch Video - Part 2</link><br>
<br>
<br>
Date Added: 2014-09-07</td>
</tr>



</table>
