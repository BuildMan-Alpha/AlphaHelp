
h2 (already converted to title) - group
h3 - section
h4 - case or step









<h4>Server-side Events - Defined at the Table Level</h4>
<p>When performing CRUD operations on the table(s) in a List, a rich set of
server-side events are available.</p>

<figure><link>images/serversideevents.jpg</link></figure>

<ul>
<li>Before insert - Fires before a record is inserted into a table
(i.e. before a SQL INSERT statement is executed). The 'e' object that is
passed into the function contains the SQL statement that is about to be
executed and the arguments that will be passed to the statement. You code
can modify these values. Your code can also choose to abort the operation by
setting the e.abort
flag. A full description of the properties passed in with the 'e' object is
available if you click the smart field for this property.</li>
<li>Before update - Fires before a record is updated (i.e. before a
SQL UPDATE statement is executed). See comments for Before insert.</li>
<li>Before delete - Fires before a record is deleted (i.e. before a
SQL DELETE statement is executed - in the case where the delete type is set
to 'hard', or a SQL UPDATE statement is executed - in the case where the
delete type is set to 'soft').</li>
<li>After insert - Fires after a new record has been inserted into a
table. The 'e' object that is passed into the function has
e.primaryKeyValue, the
primary key of the record that was inserted (useful if the primary key is an
auto-increment value). Click the smart field for this property to see a full
description of the properties passed in with the 'e' object.</li>
<li>After update - Fires after a record has been updated.</li>
<li>After delete - Fires after a record has been deleted.</li>
<li>On write conflict - Fires if there was a write conflict when
executing an Update operation. This event allows you to handle write
conflict synchronization errors programmatically, rather than bubbling the
errors back to the user for him/her to resolve. See 
<link href="Resolving Write Conflicts Programmatically - The onWriteConflict Event">Resolving Write
Conflicts Programmatically</link> for more information.</li>
</ul>

<note> In addition to the above server-side events (which are defined
at the individual table level for each table referenced in the SQL statement for
the List), another very important server-side event is fired when the List is
synchronized. See  <link href="Server-side Events - Defined at the List Level">Server-side Events - Defined at the List Leve</link><link href="Server-side Events - Defined at the List Level">l</link> for more information.</p>






<h4>Geographic Data</h4>
<p>The Table Properties allows you to set certain properties that pertain to
geographic data.</p>
<figure><link>images/geogfields1.jpg</link></figure>
<p>Geocode record - Allows you to geocode the record at the time the
record is updated or inserted. You can geocode a record if the record contains
one or more fields with address information. For example, the record might
contain fields called 'address', 'city', 'state' and 'country'. 'Geocoding'
means that a latitude and longitude value are looked up for the address
specified by the address fields. You can specify the name of the field in the
record where the longitude value will be stored and the name of the field where
the latitude value will be stored. Alternatively, or in addition, you can also 
specify that the latitude and longitude values should be encoded in a 'location'
field (i.e. a field with a 'geography' or 'geometry' data type - depending on
the SQL database type).</p>
<note> If you want to perform geography searches (i.e.
find all records within 10 miles of my current location), you need to have a
'location' field in the record.</p>
<p>Location fields - If the record has latitude and longitude fields you
can specify that these values should be encoded into a 'location' field (i.e. a
field with a 'geography' or 'geometry' data type - depending on the SQL database
type) when the record is inserted or updated. </p>
<note> Typically a user is unlikely to manually enter
values into the latitude or longitude fields. A more likely scenario is that
your UX component will have a map with a marker that can be dragged. When the
user drags the marker, the latitude and longitude fields on the UX are updated,
and then when the data are synchronized, the 'location' field is encoded using
the update longitude and latitude fields.</p>
<p>Store location information when record is saved - When the user saves
edits made in the List's Detail View, you can save the current location of the
device (i.e. its latitude and longitude) in the List data. This information will
be obtained from the GPS on the device. Then, when the data in the List are
eventually synchronized with the server, the latitude and longitude values that
were captured at the time the Detail View edits were saved can be stored in
fields in the record that is being updated/inserted. (Do not confuse the term
'saved' here with 'synchronized'. 'Saved' means that edit to the List Detail
View were saved back to the List - it does not imply that the data were
synchronized with the server - this is a separate action.)</p>
<p>So, for example, the user might have entered 5 records before synchronizing
their edits. Each of the 5 records were entered when the user was in a different
location. When the data are synchronized, the location at the time each
record was entered will be stored in the latitude and longitude fields in
the record that is inserted.</p>
<p>You can also specify that the captured longitude and latitude value should be
encoded in a location field.</p>
<p>Store data for which operation types - Options for this property are 'InsertOnly'
or 'InsertAndUpdate'. You might want to capture the location information only
when a new record is first created, but not when it was subsequently edited.</p>


<h3>Default Values for the New Record</h4>

<p>When you define a List control with a
Detail View you can specify Javascript code to return
the default value for a field when a new record is
created in the Detail View. A new option has been added
to the List builder to allow you to automatically use
the default value that was defined for the control to
which the List field is bound for new record default
values.</p>
<p>
For example, assume:</p>
<ul>
<li>You have a list with a field called FNAME</li>
<li>You have a control in the List's Detail View called FIRSTNAME
and the FNAME List field is mapped to this control</li>
<li>In the List builder, you defined the following Javascript code
for the FNAME field's default value:
return 'Sam'; 
</li>
<li>The FIRSTNAME control has its
Default value 
property set to 'Fred'.</li>
</ul>
<p>When you click the New Record button in the List Detail View, the
default value for the FIRSTNAME control (i.e. the control to which the
FNAME List field is bound) will be set to 'Sam' because there was an
explicit Default value rule set in the List builder. The default value
of 'Sam' will be used even though the FIRSTNAME control defined a
default value of 'Fred'.</p>
<p>However, assume that you now edit the List and delete the Default
value Javascript code for the FNAME field. Now, when you create a new
Detail View record, the default value shown in the FIRSTNAME control is
governed by the setting of the 'Default
values policy for new record in Detail View' property in the List
builder.</p>
<p>This property can either be set to:</p>
<ul>
<li>UseControlValue - (default choice)The default value will
be 'Fred'</li>
<li>None - The control will not have a default value (even
though the control specified 'Fred' as its default value)</li>
</ul>
<p>


<title>List Search Part</title>
<p>The List can have an integrated Search Part for filtering the records shown
in the List. </p>
<p>To turn on the List's Search Part, check the Has Search Part 
property on the List Properties pane in the List Builder.</p>

<figure><link>images/searchPartPropPane.jpg</link></figure>

<p>This will add a new pane to the List Builder where you can configure the
List's Search Part.</p>

<figure><link>images/searchpartproperties.jpg</link></figure>

<note>A genie is available for quickly adding a
Search Part to an existing List. After you have turned on the Search Part by
checking the Has Search Part property on the Detail View pane, switch
to the Search Part pane (shown above) and then click the Search Part - Quick
Setup Genie button at the bottom of the screen.  See 
<link href="Using the Search Part - Quick Setup Genie">Search Part - Quick Setup Genie</link>
below for more information on this Genie.<br>
<br>
<figure><link>images/dv_quicksetupgenie.jpg</link></figure>

<p>The Search Part can be implemented in three different ways:</p>
<ul>
<li>
IndividualControls - You specify a separate set of controls on the UX
where the user will enter search criteria. For each field in the List that
you want to be able to search in, an individual search control would be
added to the List. For example, the List might have these fields: CustomerId,
Firstname, Lastname, City, State, Zip. You might want to let the user search
for data in the Firstname and Lastname fields. Therefore you would add
search controls for Firstname and Lastname.</li>
<li>
SingleKeywordControl - You create a single control in which the user
will enter search criteria. You specify in which fields in the List will be
searched. A match if found if any of the specified field matches the search
criteria.</li>
<li>
QueryByForm - This option is only available if the List has a Detail
View. The Detail View controls also server as the Search Part control. The
List can be set into a 'search' state and then search criteria can be
entered into the Detail View controls. See the .searchModeOn() and .searchModeOff()
methods below for information on how to toggle the search mode on and off.
The List can actually be in three different states: 'search', 'edit'
(editing an existing record) and 'enter' (entering a new record).</li>
</ul>
<p>The filtering can be done server-side or client-side. When you call the Lists
.searchList() method - to submit the Search Part and perform the search - you
can specify whether you want the search to be performed client-side, or
server-side. You can also specify 'auto'. This option performs a server-side
search if it is allowed, but falls back to a client-side search if server-side
searching is not allowed. If a List has any unsynchronized edits, then
server-side searching is not allowed - because it would result in new data being
loaded into the List, thus losing the edits to the List that had been made.</p>
<p>Once the data in the List are synchronized, then server-side searching is
again allowed.</p>
<note> If you are searching in a child List and the parent
List is set to pre-fetch data then the search is always client-side. </p>

<p>Other properties of interest on the Search Part Pane include:</p>

<p>Delay populate List till active search - List is not populated
with any data until the user has performed a search. This is particularly useful when you are building mobile applications
for disconnected use. The following use case indicates how this property is
useful: <br>
<br>
Say you are building a mobile application for disconnected use. While the
user still has a connection (for example. before leaving the office for the
day) he/she will enter search criteria in the List's Search Part to retrieve
the records that they would like to have while they are disconnected. Since
the user will be expected to immediately execute a search after starting the
application, there is no point in populating the List initially when the
application is started (before the user has had a chance to execute a
search) because the records will be immediately discarded when the user
executes the search to retrieve the records of interest.</p>

<h3>Using the Search Part - Quick Setup Genie</h3>
<p>The Search Part - Quick Setup Genie is designed to allow you to add a Search
Part to an existing List control that does not currently have a Search Part.</p>
<p>The purpose of the Genie is to automatically add controls to the UX component
where the user will enter the search criteria (for the case where the Search
Part style is set to IndividualControls or SingleKeywordControl ),
bind these controls to the Search Part and to add buttons to the UX for various
Search Part actions (such as Search, Clear Search, etc.)</p>

<note> This genie differs from the List Quick Setup Genie,
which builds a List control (with optional Detail View and Search parts) from
scratch.</p>

<p>Clicking the genie button opens this dialog:</p>
<p>(If the Search Part style is set to IndividualControl. The dialog will
appear slightly differently for other Search Part styles.)</p>


<figure><link>images/searchPartr_quicksetupgeniedialog.jpg</link></figure>

<h3>Delay Populate and Custom Data Sources</h3>
<p>If the List is populated using a Custom data source and you have checked
the delay populate property you must add the necessary code to your custom
function to test if there is an active search. The 'e' object that is passed
into your custom function will have the necessary properties for you to test
in your code.</p>
<p>For example, your custom function might include this code:</p>

<p>if e.delayPopulateTillActiveSearch = .t. then <br>
if e.getDataMode = "populateList" then <br>
if e.flagActiveSearch = "" then <br>
exit function
<br>
end if <br>
end if <br>
end if <br>
</p>

<p>Set search maximum result size properties - This property allows
you to set rule for how many records a search may return, or </p>

<h3>Setting Search Result Maximums</h3>
<p>In a mobile application you that is designed for disconnected use, the data in List control represents the 'disconnected' data (i.e. the subset of the master database
that the user will have available to them on the mobile device. The typical design pattern is to specify that the List should not be populated with any records until
the user has performed a search to retrieve the sub-set of records that they want to use when they are disconnected.</p>

<p>The 'Set search maximum result size properties' property allows you to
define rules for the search.</p>

<p>
<figure><link>images/searchMax1.jpg</link></figure>

<p>The rules allows you to set properties to guard against the situation where the user performs a search that is
not sufficiently restrictive and returns too large a subset of the master database. You would want to prevent this from happening because it would result in an excessively
long time to download the search result to the mobile device, or would download more data that can fit into memory or storage in the browser on the mobile device.</p>

<p>You can specify the maximum search result in two ways:</p>
<ul>
<li>number of rows - the maximum number of rows that a search can return. (In the case of hierarchical data - i.e. a List that has child, grandchild, great-grandchild Lists, etc.
the row count refers to rows in the top-most parent List).</li>

<li>payload size - the maximum size in bytes of the data in the search result. This is the data that would be sent to the browser to populate the List. This is typically the more
important setting as a large number of rows that have a very short record length would not result in a large payload and might not result in excessive download times or memory usage.
</li>
</ul>

<p>If the user enters search criteria that returns a result that violates the
maximum search size properties, the 
onSearchResultTooLarge event fires. You will typically use this event to
display some user interface to the to the user instructing them to enter a more
restrictive search.</p>
<p>IMPORTANT Even if the user performs a search that satisfies the rules specified here, there is still a chance that the data will fail to load successfully into the List
after it has been downloaded to the client (i.e. the browser). That's because, if you have
specified that the List data should be persisted to Local Storage,
there may not be enough free space in Local Storage to store the data. In this case the client-side 
onSearchResultTooLargeForLocalStorage
event will fire allowing you to instruct the user to enter a more restrictive search, or to try to free space in Local Storage.</p>


<h3>QBF Syntax</h3>
<p>When you enter search criteria, you can optionally use a special QBF syntax
(if you have configured the search field to allow QBF syntax - See 
<link href="Setting Search Field Properties">Setting
Search Field Properties</link>).</p>
<p>The QBF syntax operators are: </p>
<p>comma, .., >, >=, <, <=</p>
<p>Examples</p>
<p>boston,london,paris - Search
for 'boston', 'london' or 'paris' in the field.</p>
<p>boston..  - search for
values greater or equal to 'boston'</p>
<p>234..  - search for
values greater or equal to 234</p>
<p>>=234 - search for values
greater or equal to 234</p>
<p>123..456 - search for values
between 123 and 456 (inclusive)</p>
<p>123..456,689..900 - search
for values between 123 and 456 or between 689 and 900</p>

<h3>Setting Search Field Properties</h3>
<p>In the List builder, on the Fields pane, click the smart field for the
'Search properties' property to configure the search properties for each field.</p>

<figure><link>images/searchPart1.jpg</link></figure>

<p>Clicking this button displays this dialog:</p>
<figure><link>images/searchPart2.jpg</link></figure>

<p>The search option property brings up a list of search options:</p>
<figure><link>images/searchPart3.jpg</link></figure>

<note> For client-side searches, only options 1, 2, 3, -1,
-2 and -3 are currently implemented.</p>

<h3>Search Part Methods</h3>
<p>For information about the List object methods that can be used for Lists
that have a Search Part, see the section below 
<link href="List Methods - Search Part">List Methods - Search
Part</link>.</p>



<title>Capturing Images Using the Camera</title>
<p>IMPORTANT: This feature requires Alpha Anywhere V3.1</p>
<p>You can use the camera on a mobile device to capture images for image
fields in your List. The images that you capture are just like any other
data - they are persisted to Local Storage if you don't have an internet
connection.</p>
<note> If you run the UX component on a device that
does not have a camera, you can select images from the filesystem when the
camera is invoked.</p>
<p>There are two ways in which a List control can display images</p>
<ul>
<li>A field in the table on which the List is based contains a binary
field and the binary field contains an image (i.e. binary data in the
form of an jpg, png, etc. image)</li>
<li>A character field in the table contains the filename of an image
(the image file will typically be in a folder in the webroot of your
Application Server). For example, the field might contain
productImages/product1.jpg
(which would be a reference to a file called 'product1.jpg'
in the 'productImages'
folder in the webroot.</li>
</ul>
<p>The image can be displayed in the List itself, or/and in the List's
Detail View.</p>
<ul>
<li>To display the image in the List you must go to the Fields tab in
the List builder and set the control type for the field to
Image.</li>
<li>To display the image in the List's Detail View, you must add an
[Image - Data Bound] 
control to the Detail View, then map this control to the corresponding
field in the List by editing 
Detail view field map property.<br>
<br>
(Important: Do not confuse the 
[Image - Data Bound] 
control with the  [Image] 
control in the Other Controls section of the UX toolbox.)<br>
</li>
</ul>

<figure><link>images/listdocumentation_image_datababound.jpg</link></figure>
<p>Image showing the [Image - Data Bound] control in the UX toolbox<br>
<br>
<figure><link>images/detailviewfieldmap.</link></figure>
Image showing the 'Detail view field map' property in the List builder</p>

<p>One you have placed a  
[Image - Data Bound]  control in the Detail View, you can add a
button (see below) which will open the camera. The user will then be able to
take a picture to set the image in the Detail View image control. This is
just like editing any other control in the List Detail View - the
Save button will become
enabled and the user can click the 
Save button to save the edits back to the List. Once the edits are
saved back to the List, the 
Synchronize button will become enabled and the user will be able to
synchronize the edits. The image data will be sent to the server (along with
any other edits to the Detail View) and added to the database.</p>
<p>If the image field in the List's data source is a binary field, the
binary data for the image will be written to the database. If the image
field in the List's data source is a character field, a file for the image
will be created in the specified folder (see below on how the 'upload'
folder is specified) and the field in the record will be updated with the
filename of the file that was created.</p>

<h3>Configuring a Button to Update the Image using the Camera or Photo
Library</h3>
<p>Once you have placed the[Image -
Data Bound] control in the List Detail view, you can place a button
next to the image to update the image. The button will allow you to use the
camera to update the image by taking a new photo, or to select an existing
image from the photo library on the device, or if the device does not have a
camera  (for example, a desktop computer), you can select an image from
the filesystem.</p>
<p>To define the event handler for the button's
click event, use Action
Javascript and select the Image Capture for List-Detail</p>
<figure><link>images/detailview_imagecapture1.jpg</link></figure>
<p>The builder for this action is shown below:</p>
<figure><link>images/imagecaturegenie.jpg</link></figure>


<p>Key properties that you must define in the builder iinclude:</p>
<ul>
<li>Image control - the name of the
[Image - Data Bound]
control in the List Detail View that you want to update</li>
<li>Image capture method - Options are
HTML5,
PhoneGap, and
PhoneGapPreferred.
HTML5 uses the built in
methods for accessing the camera that HTML5 exposes. If you are running
your UX component in a PhoneGap shell then you can use the
PhoneGap, or
PhoneGapPreferred
method. The PhoneGapPreferred
method will use PhoneGap
if the UX is running in a PhoneGap shell and will fall back to
HTML5 otherwise.</li>
<li>
Create image thumbnails - Specify if thumbnails should be
created for this image when the data are synchronized. See below for
more information.</li>
</ul>
<p>HTML5 Specific Options</p>
<ul>
<li>Resize image - can be set to Always, or Only if Image Exceeds
Max Size. Specify if the image should be resized. If set to Always the
image will always be resized. If set to Only if Image Exceeds Max Size,
the image will only be resized if it exceeds the Maximum image size
property.</li>
<li>Maximum image size - If the captured image exceeds this size,
it will be resized.</li>
<li>Resize image (if greater than max allowed size) - (Applies
only if the image is captured using the HTML5 image capture) - If the
image that is captured exceeds the maximum allowed size specify that the
image should be resized. When an image is resized, the following
properties can be specified: Image compression, Max image height (in
pixels) and Max image width (in pixels).</li>
<li>Image compression - The compression factor to use when
resizing the image. Specify a value between 0 and 1. The lower the
number, the greater the image compression.</li>
<li>Max image height - when the image is resized, the maximum
dimension that the image height can be.</li>
<li>Max image width - when the image is resized, the maximum
dimension that the image width can be.</li>
</ul>
<p>The following are PhoneGap specific options:</p>
<ul>
<li>Photo source - Options are
Camera or
Photo Library.
Unlike the HTML5 option,
you cannot prompt for the source at run-time.</li>
<li>Save picture to photo album - Should the picture also be
saved to the photo library</li>
<li>Image quality - Specify a number between 1 and 100.</li>
<li>Allow picture edit after capture - Can the user edit the
picture after taking it.</li>
<li>Max image height - The maximum height (in pixels) of the
picture</li>
<li>Max image width - The maximum width (in pixels) of the
picture</li>
</ul>
<p>Client-side events</p>
<ul>
<li>Before image capture - Javascript to run before the camera
action is invoked. If your Javascript includes
return false the action
is aborted.</li>
<li>On image capture - Javascript to run after the image has been
captured. Your Javascript code can reference
e.data and (in the case
where PhoneGap is used) 
e.fileSystemURL, the URL of the image in the device's filesystem.</li>
</ul>
<note>When you use the HTML5 option, the browser will
prompt whether you want to capture the image using the camera or select from
the photo library. When using PhoneGap you specify up-front whether you want
to use the camera or photo library.</p>

<h4>Specifying the Upload Folder</h4>
<p>If the image field in the List's data source is a character field, you
must specify a folder on the server where the image file will be created
once the List data are synchronized.</p>
<p>To specify the Upload Folder for an image field, go to the Fields tab in
the List builder. Select the image field and then click the smart field for
the 'Image capture and storage properties' property. A dialog box (shown
below) will be displayed where you can specify:</p>
<ul>
<li>Upload folder - the folder where the image file will be
created data are synchronized</li>
<li>File exists action - Can be set to Overwrite or Rename.</li>
<li>Stored filename transformation expression - You can control
what value gets written to the image character field by specify a
transformation expression. For example if you set the transformation
expression to "<Filename>", the fully qualified image filename will be
stored in the field. If you set the transformation expression to "<ShortFilename>"
a relative filename will be stored in the image field.</li>
</ul>



<note> In the case where the image field is a binary
field, the Image capture and storage properties dialog allows you to specify
the image type that will be stored in the binary field. For example, the
user might have uploaded a PNG image, but you can specify that the binary
data must be converted to JPG format.</p>

<figure><link>images/imagecapture_uploadprops.jpg</link></figure>



<h4>Capturing Thumbnail Images</h4>
<p>When the data in the List control is synchronized with the server
database you can create thumbnail images for each image that was edited on
the client-side.</p>
<p>To specify that you want to create thumbnail images when the data are
synchronized, check the Create thumbnail images property. Then click the
smart field for the thumbnail definition. The 'Define Thumbnails' dialog
(shown below) allows you to specify the thumbnail images that should be
created.</p>
<p>You can create a many thumbnail images as you want when the data are
synchronized.</p>
<p>Each thumbnail image that you create can either be stored in a binary or
character field in the database you are synchronizing with.</p>

<figure><link>images/thumbnaildialog.jpg</link></figure>

<title>Persisting Data To Local Storage</title>
<p>The UX component can persist three different types of data to Local
Storage</p>
<ul>
<li>List data</li>
<li>UX component variables</li>
<li>UX component state (not currently implemented)</li>
</ul>

<h3>Persisting List Data</h3>
<p>Each List that you add to a UX component has its own settings for
controlling if the List data should be persisted. If the data in a List is
static (i.e. is never changed while the application is running), then there
is no need to persist the data.</p>
<p>For List controls, you control whether the data in the List is persisted
to Local Storage by setting a property in the List builder for the List:</p>
<figure><link>images/listLocalStorageSetting.jpg</link></figure>


<h3>Persisting Variables</h3>
<p>Variables are persisted whenever a 'trigger' event occurs. For some
controls (e.g. Radiobutton,. Checkbox, Slider, etc.), the 'trigger' is when
the value in the control is changed. For textbox and textarea controls, the
'trigger' is when the control is blurred (i.e. loses focus) and the value in
the field has changed. </p>
<p>You can also manually trigger the event by calling the UX component's
{dialog.object}.persistVariablesToLocalStorage()
method.</p>
<p>When variables are persisted to Local Storage various client-side events
are fired. </p>
<p>The 
onBeforePersistControlValuesToLocalStorage event fires first. This
event fires before the variables are persisted. Its purpose is to allow you
to specify any additional data that you want to persist along with the
variable values. Your code can set the
e.userData property. The
value you set in this property will be available when the
onRestoreVariablesFromLocalStorage
fires.</p>
<p>The localStorageEncryption
event fires next. The event allows you to add your own encrypting to the
JSON data that is about to be stored to Local Storage. The event handler
gets the JSON data in the e.data property and the event handler can set
e.data to the encrypted string.</p>
<p>When the component is loaded if the 'Restore variables from Local
Storage' setting is true (see <link href="Local Storage Settings">Local Storage Settings</link> below), then the
previously persisted variable values (if any) will be restored. </p>
<p>The 
onRestoreVariablesFromLocalStorage event will fire after the data has
been restored. This event handler can access the
e.userData property which
was optionally defined when the 
onBeforePersistControlValuesToLocalStorage event was fired.</p>
<p>If the 'Restore variables from Local Storage' property is set of false,
you can still manually restore persisted variables by calling the UX
component's {dialog.object}._restoreVariablesFromLocalStorage()
method.</p>

<h3>Local Storage Settings</h3>

<p>You can control what gets persisted to Local Storage by setting
properties in the UX component as shown below.</p>

<figure><link>images/LOCALSTORAGE_PROPS2.gif</link></figure>

<ul>
<li>Namespace - In order to manage the keys in Local Storage, you
specify a 'namespace'. All keys for this component will use the
namespace as a prefix. If you specify <Default> or leave the namespace
blank, a system generated namespace will be used. In addition to the
namespace specified here, all keys will also include 'ALPHA_' in the
namespace. This allows for easy identification of keys in Local Storage
that are tied to any UX application. For example, if you set the
'namespace' property to 'orderApp', the key that stores the data for a
List called 'Orders' will be 'ALPHA_orderAPP.LIST.ORDERS'. <br>
<br>
You can specify an optional 'friendly name' and 'description' for the
namespace. The friendly name, description, version and a datestamp are
automatically persisted to a key called 'ALPHA_namespace._INFO' any time
any UX data are persisted to Local Storage.</li>
<li>Persist variable values - Check this property to persist to
Local Storage the value of all variables on the UX. (A 'variable' is
associated with each data entry control on the UX. For example, a
textbox, radiobutton, checkbox, slider, etc. all have an associated
'variable' that contains the current 'value' for the control.)</li>
<li>Persist component state - (Not currently implemented) Stores
in Local Storage information such as what Panel in a Panel Navigator
currently has focus, what Panels in a Panel Layout are currently
visible, etc.</li>
<li>Working Preview testing mode - When you are in Working
Preview you can specify that the local file system on your computer
should be used for storing data that would otherwise be put in the
browser's Local Storage. The benefit of this is to allow you to easily
see what's being stored in Local Storage because you can simply examine
the contents of the files in the specified folder on your computer.</li>
</ul>
<note> Using the 'Filesystem' option for Local Storage
is significantly slower than using the browser Local Storage.</p>
<ul>
<li>
Restore variables from Local Storage - If this property is
checked, then when the component is re-loaded, any variable whose value
was persisted to Local Storage will be restored. </li>
<li>Restore data in List controls from Local Storage - If this property is checked
the data in the List controls are restored when the component is
reloaded. (Only the Lists that you indicated should be persisted to
Local Storage are restored. Each List has its own setting to indicate if
it is persistable. See below for more information.)</li>
</ul>


<title>Managing Local Storage</title>
<p>Local Storage is a shared resource and it is limited. The exact
limitation is a function of your device. In order to free up storage space
for an application on a device, it might be necessary to delete storage
being used by some other application that you are no longer using.</p>
<p>You can add a pre-defined control to your UX to manage Local Storage.
This control is primarily intended for use by developers while they are
designing the application. It is not ideal for the users of your
application.</p>
<p>To insert the 'Local Storage Manager' into your component, select the
control from the 'Defined Controls' section in the UX toolbox.</p>

<figure><link>images/localstoragemgr1.jpg</link></figure>


<p>
<br>
This will insert a List control into the component that will allow you to see
all of the keys in Local Storage, the keys for this component (i.e. app), all
keys (excluding keys for this app), etc. You can see how much space each key is
consuming and you can peek at the data in the key. You can also delete keys.</p>
<p>
</p>
<p>
The image below is showing the keys in Local Storage for an component where the
'Namespace' property has been set to 'app1'</p>
<p>
</p>
<p>
<figure><link>images/localstoragemgr2.gif</link></figure>

<p>If you tap on the Show button you can see up to the first 1,000 bytes of data
in the key:</p>
<figure><link>images/localstoragemgr3.jpg</link></figure>

<h3>Methods for Managing Local Storage</h3>
<p>The UX component has several methods that make it easy for developers to add
functionality to their components to manage the data in Local Storage.</p>
<note> These methods cannot be used in Working Preview if
you have configured your component to use the file system for Local Storage.</p>
<p>The {dialog.object}._ls_getData()
function returns an object with information about the keys stored in Local
Storage.  The method takes a flag to indicate which keys in Local Storage
to return information on.</p>
<p>The object that is returned has these properties</p>
<ul>
<li>data - an array with information about each key found. The array
has an object for each key found. The object has a key and size
property indicating the key name of the item and the size in bytes of the
item.</li>
<li>size - the total size in bytes of all keys found</li>
<li>keyCount - the number of keys that were found.</li>
</ul>
<p>Example:</p>

<p>//pass in the 'a' flag to get info on All keys</p>
<p>var obj = {dialog.object}._ls_getData('a')</p>
<p>console.log('Number of keys: ' + obj.keyCount);</p>
<p>console.log('Number of bytes: ' + obj.size);</p>
<p>var data = JSON.stringify(obj.data);</p>
<p>console.log('Data: ' + data);</p>

<p>The following flags can be used:</p>

<table>



<tr>
<td>
Flag</td>
<td>
Meaning</td>
</tr>



<tr>
<td>
a</td>
<td>
All keys in Local Storage </td>
</tr>



<tr>
<td>
aa</td>
<td>
All keys created by UX components. Keys that are
added to Local Storage all have 'ALPHA_' as a
prefix. Only keys that have this prefix are
returned.</td>
</tr>



<tr>
<td>
t</td>
<td>
All keys for this UX component. These
keys all start with 'ALPHA_' followed by the
namespace for the component (e.g. ALPHA_NS1).
<br>
NOTE: The namespace for the component is
specified in the UX component properties - Local
Storage section.</td>
</tr>



<tr>
<td>
o</td>
<td>
All other keys  (i.e.excluding keys
for this UX component). (Same as using the 'a'
flag, then removing keys returned for the 't'
flag).</td>
</tr>



<tr>
<td>
oa</td>
<td>
All UX component keys, but excluding keys for
this component. (Same as using the 'aa' flag,
then removing keys returned for the 't' flag).</td>
</tr>



<tr>
<td>
</td>
<td>
</td>
</tr>



<tr>
<td>
v:t</td>
<td>
Key used to persist variables for this UX
component.<br>
NOTE: The UX component allows you to
specify that variables in a component should be
persisted to Local Storage (See Local Storage
section in UX properties).</td>
</tr>



<tr>
<td>
v:a</td>
<td>
All UX component keys that store persisted
variables (for any UX component, not just this
component). </td>
</tr>



<tr>
<td>
v:o</td>
<td>
All UX components keys that store persisted
variables, excluding this UX component
(Same as using 'va' and then removing 'vt').</td>
</tr>



<tr>
<td>
</td>
<td>
</td>
</tr>



<tr>
<td>
lists:t</td>
<td>
All of the List components in this component
that are persisted to Local Storage.<br>
NOTE: Not every List in a UX component is
persisted to Local Storage. Each List in a UX
has its own setting (defined in the List
Builder) to control whether it is persisted.</td>
</tr>



<tr>
<td>
lists:a</td>
<td>
All of the List components (from any UX
component) that are persisted to Local Storage.</td>
</tr>



<tr>
<td>
lists:o</td>
<td>
All of the List components, excluding the Lists
in this component. (Same as using 'lists:a'
and then removing 'lists:t')</td>
</tr>



<tr>
<td>
</td>
<td>
</td>
</tr>



</table>


<p>Once you have retried the array of information using the
{dialog.object}._ls_getData() method, you might want to delete the keys
listed in the array. You can pass in the object returned by the
{dialog.object}._ls_getData()
method to the {dialog.object}._ls_deleteKeys()
method.</p>
<p>For example:</p>
<p>            </p>
<p>//delete all keys in local storage for other UX components</p>
<p>var obj = {dialog.object}._ls_getData('o');</p>
<p>{dialog.object}._ls_deleteKeys(obj);</p>


<p>Namepsace Information Key</p>
<p>Each UX component that persists data to Local Storage automatically stores a
key in Local Storage with information about the UX component every time the UX
component persists data to Local Storage.</p>
<p>The special key is name:</p>
<p>ALPHA_<your component namespace>._INFO</p>
<p>The data in the key contains these properties:</p>
<ul>
<li>lastUsed - the last date that information for this namespace was
written to Local Storage. This will allow you to write routines that delete
keys for infrequently used applications.</li>
<li>friendlyName - the component 'friendly name' - specified in the
UX builder - Local Storage section.</li>
<li>description - the component 'description' - specified in the UX
builder - Local Storage section.</li>
<li>version - the component 'version' - specified in the UX builder -
Local Storage section.</li>
</ul>

<p>For example, here is some data that might be stored in the ._INFO key for a
particular UX component:</p>

<p>{<br>
"lastUsed": "2014-07-26T14:27:41.122Z",<br>
"friendlyName": "Expense Reporting",<br>
"description": "An application to capture expenses.",<br>
"version": 1<br>
}</p>

<title>Client-side Events</title>
<h3>Client-side Events for Lists with a Detail View</h3>
<p>If a List has a Detail View, there are a large number of client-side events
that are exposed.</p>
<p>To define these client-side events, click the smart field for the Events
property (on the Detail View pane in the List Builder) to open a builder for
client-side List Detail View events. <br>
</p>
<figure><link>images/client_side_dv_events_smartfield.jpg</link></figure>
<p>The builder shows all of the client-side events for Lists with Detail Views.</p>

<figure><link>images/list_dv_props6.jpg</link></figure>

<p>The key client-side events are summarized below:</p>

<ul>
<li>canUpdateList - Fires when the user tries to update the List with
edits that have been ade to the List Detail View. If function returns false,
action is cancelled. The data object is passed in as a member of the e
object. If you set properties in e.data, you can overrride the values that
the user entered.</li>
<li>canSynchronizeList - Fires when the user tries to synchronize the
data in the List (by making an Ajax callback). If function returns false,
action is cancelled. The data object is passed in as a member of the e
object. If you set properties in e.data, you can override the values from
the List that will be submitted to the server. You can prevent the data in a
particular row in the List from being synchronized by setting the ._isDirty
property of the row data to false. For example to prevent the data in row 2
(zero based) from being synchronized, use this code:<br>
<br>
e.data[2]._isDirty = false;<br>
<br>
The data passed into the e object 
includes batchSize, totalDirtyRows and startingRow. If
all data is not being submitted in batches, batchSize is 0. To test
if this is the first batch in a job test for batchSize > 0 and 
startingRow = 1<br>
</li>
</ul>

<ul>
<li>afterSynchronizeList - Fires after the data in the List has been
synchronized. Data passed into the event handler includes: hasErrors,
recordsWithErrors, recordsSubmitted, recordsUpdate, recordsInserted,
recordsDeleted, recordsWithServerSideValidationErrors,
recordsWithWriteConflictErrors, recordsWithDatabaseErrors,l istId</li>
<li>afterRefreshListIncremental - Fires after an incremental refresh
is performed on a List (to retrieve records from the server that were
added/updated/deleted after the List control was initially populated). Data
passed into the event handler includes: rowsUpdated, rowsInserted,
rowsDeleted,l istId.</li>
<li>canResetRow - Fires when the user tries to undo edits to a row of
data in the List. If function returns false, action is cancelled.</li>
<li>canUndoEdits - Fires when the user tries to undo edits to the
List Detail View form. If function returns false, action is cancelled.</li>
<li>afterResetRow - Fires after the user has undone edits to a row of
data in the List.</li>
<li>afterUndoEdits - Fires after the user has undone edits to the
List Detail View.</li>
<li>canNewRecord - Fires when the user tries to go to a new Detail
View record. If function returns false, action is cancelled.</li>
<li>afterNewRecord - Fires after the new record has been displayed in
the DetailView form</li>
<li>afterListRowSelectCancelled - Fires when user tries to select a
new row in a List and the action is cancelled because the Detail View for
the current List, or any child List, is dirty.  If your event
handler sets e.handled = true, the system message will be suppressed. A
typical use for this event is to give focus to the dirty Detail View. For
example, say you have hierarchical data with customers, orders and
orderDetails. If the user has edited the Detail View for the orderDetail
list and then clicks on a different row in the customer List, the action
will be cancelled and this event will fire. If the Detail View for the
orderDetail List is in another Panel, this event can give focus to the Panel
so that the user can save the dirty Detail View record.</li>
<li>afterSynchronizeListBatch - If the List is being synchronized in
batches, fires when a batch is completed. If the function returns false, the
next batch (if any) will not be sent. The data in the e object that is
passed in will allow you to create your own progress counter. The e object
includes these properties: totalDirtyRows, batchSize, 
startingRow and pctComplete. NOTE: If you want to execute code at
the start of the batched job, see the canListSynchronize event.</li>
<li>beforeSynchronizeListBatchStart  - If the List is being
synchronized in batches, fires before the first batch is send to the server.</li>
<li>afterSynchronizeListBatchEnd  - If the List is being
synchronized in batches, fires after the last batch in the job has
completed.</li>
<li>canCancelBatch - If the List is being synchronized in batches,
fires if the user clicks the 'Cancel' button to stop sending batches of
records to the server to synchronize. If the function returns false, then
the synchronization is not cancelled.</li>
<li>afterCancelBatch - If the List is being synchronized in batches,
fires after the user has clicked the 'Cancel' button to stop sending batches
of records to the server to synchronize.</li>
<li>modeChanged - Fires when the List mode changes. Modes are
'enter', 'edit' and 'search'. 'search' applies only if the List has a Search
Part and the Search Part is set to QueryByForm mode.</li>
</ul>

<p>The following two events are defined in Fields pane of the List Builder
(because the events are defined at the individual field level):</p>
<p>
</p>
<ul>
<li>
onDetailView Populate Javascript</li>
<li>
onListUpdate Javascript</li>
</ul>
<p>
These properties allow you to transform the data before
it is displayed in the Detail View and before the Detail
View is saved back to the List. The code you you specify
in these two properties must 'return' the transformed
value. For example:
return
this._value.toUpperCase()</p>
<p>
The Javascript for both of these properties can refer to</p>
<p>
this._value</p>
<p>
</p>
<p>
to get the default value that the Detail View control
should be populated with when the user clicks on a
Detail View row and to get the default value that the
List should be updated with when the user clicks the
Save button to save the Detail View back to the List.</p>
<p>
</p>

<h3>Client-side Events for Lists with a Search Part</h3>
<p>The following client-side events are specific to Lists with a Search Part.
These events are defined on the 'List Properties' pane in the List builder (by
clicking the 'More events...' property)</p>

<ul>
<li>afterSearchComplete - Fires after the user submits the List's
Search Part to execute a search of the records in the List. The 'searchMode'
parameter is either 'search ' or 'clear' - user cleared existing Search Part
filter. 'searchWhere' indicates where the search will be performed.
It is either 'clientSide', or 'serverSide'</li>
<li>beforeSearch - Fires before the user submits the List's Search
Part to execute a search of the records in the List. The 'searchMode'
parameter is either 'search ' or 'clear' - user cleared existing Search Part
filter. 'searchWhere' indicates where the search will be performed. It is
either 'clientside', or 'serverside'. The 'listIsDirty' property indicates
if the List is dirty (has unsynchronized edits). If the 'listIsDirty'
property is true and the 'searchWhere' property is true, you can display a
message telling the user that server-side searches are not permitted. If
your event returns false, the system error message will then be suppressed.</li>
<li>onSearchResultTooLarge - Typically used in mobile applications
when you want to ensure that the user is not trying to retrieve too much
data from the server. Fires if the user executes a server-side search that
returns too many records. Allows you to display UI telling the user to enter
more restrictive search criteria. The maximum allowed search size is set in
the List builder, but can be overwritten by properties set in the <listObject>.searchList()
method.</li>
<li>onSearchResultTooLargeForLocalStorage - If the List is set to
persist to Local Storage this event will fire if the user peformed a
server-side search that retrieved more records than could be stored in Local
Storage. You can use this event to instruct the user to enter more
restictive search criteria.</li>
</ul>
<h3>Client-side Events for Lists that Persist Data to Local Storage</h3>
<p>The following client-side events are specific to Lists that have been set to
store their data to Local Storage. These events are defined on the 'List
Properties' pane in the List builder (by clicking the 'More events...' property)</p>
<ul>
<li>onBeforePersistToLocalStorage - Fires before the List is
persisted to Local Storage. You can optionally set the e.userData property
to any object and the data in e.userData will be persisted along with the
List data. </li>
<li>onPersistToLocalStorage - Fires after the List is persisted to
Local Storage. The 'success' parameter (logical value - true/false)
indicates if the data was successfully saved to Local Storage, or not. The
'mode' parameter indicates what List action (e.g. 'populate', 'append', 'udate',
etc.) triggered the event.</li>
<li>onRestoreFromLocalStorage - Fires after the List data has been
restored from Local Storage. The e.userData property contains any data that
was set in the onBeforePersistToLocalStorage event. </li>
</ul>




<title>Client-side Expressions</title>
<p>There are several system fields that can be used in client-side expressions
(show/hide, enable, etc.)
For example</p>
<p>dialog.listDetailView.LIST1.mode = 'enter'</p>
<p>The 'mode' system field can be 'enter', 'edit' or 'search'.</p>
<p>In the above example, 'LIST1' is the name (i.e. variablename) for the List.</p>
<p>Other system fields specific to Lists with a Detail View or Search Part are:</p>

<table>



<tr>
<td>
Name</td>
<td>
Description</td>
</tr>



<tr>
<td>

dialog.listDetailView.SPECIFY_LIST_NAME.isDirty</td>
<td>
Indicates whether any field in the List's Detail
View has been edited. After the edits in the
current List row are saved back to the List,
this flag will be reset to false.</td>
</tr>



<tr>
<td>

dialog.listRow.SPECIFY_LIST_NAME.isDirty</td>
<td>
Indicates if the current row in the List has
been edited. This flag is set to true after
edits in a Detail View have been saved back to
the List.</td>
</tr>



<tr>
<td>

dialog.list.SPECIFY_LIST_NAME.isDirty</td>
<td>
Indicates if any row in the List has been
edited. When this flag is true, it indicates
that the List has data that needs to be
synchronized.</td>
</tr>



<tr>
<td>

dialog.hasDirtyLists</td>
<td>
Indicates if the UX component has any Lists that
have been edited. When this flag is true, it
indicates that the UX has one or more Lists with
data that needs to be synchronized.</td>
</tr>



<tr>
<td>

dialog.listDetailView.SPECIFY_LIST_NAME.mode</td>
<td>
Indicates the Detail View mode. Can be 'enter' -
entering a new record, 'edit' - editing an
existing record, or 'search' - (Only applies if
the List has a Search Part which has been
configured as 'Query by Form') indicates that
the Detail View is being used to enter search
criteria rather than editing field values.</td>
</tr>



</table>
<p><br>
</p>

<title>Deleting Records</title>
<p>When records are delete in a List's Detail View, the record is initially
simply marked as deleted. It is not physically deleted until the List is
synchronized. At any time before the List is synchronized you can undelete the
record by calling the List object's .resetRow()
method.</p>
<p>Two types of 'deletes' are supported - 'hard' and 'soft'. A 'hard' delete
will physically delete the record from the database. A 'soft' delete will simply
set the value is a special field to 1 to indicate that the record has been
'deleted' (actually it would be more accurate to say that the record has been
'marked as deleted').</p>
<p>When you configure the Table Properties for the Detail View, you can specify
if you want to perform 'hard' or 'soft' deletes.</p>
<p>A common use case for 'soft' deletes is when working with a tables that have
relationships. For example consider a database that has tables for 'customers',
'orders' and 'orderDetails'. If you attempt to delete a customer record without
first deleting all orders for that customer, the delete will fail (assuming the
database has been configured with foreign keys).  Rather
than having to worry about implementing logic to first delete all customer
orders, it is simpler to just set a flag field in the customer record.</p>
<p>When the List is displayed, it will automatically filter our records that
have been marked as deleted.</p>


<title>Contrasting Defining Data Binding for a UX with Lists/Detail View</title>
<p>Prior to this version of Alpha Anywhere, when you wanted to perform CRUD
(create, read, update, delete) operations on a SQL database you would typically
set the Data Binding properties of the UX (as shown in the image below). </p>
<p>Setting the Data Binding properties for a UX involved specifying which table
or tables the UX was 'bound' to, and then mapping control on the UX to fields in
the bound tables.</p>
<p>Having done that you would then define a Save Submitted Data to Table(s)
action in the UX's AfterDialogValidate
server-side event. (See image below). You would also (optionally) define a Load
Primary Keys for Parent Table action in the
onDialogInitialize event.</p>

<figure><link>images/databindingUXLevel.jpg</link></figure>


<figure><link>images/server-side_actions_saverecord.jpg</link></figure>

<p>Alternatively, you could use Action Javascript actions to perform CRUD
operations on 'unbound' tables. These action (shown below) can be thought of as
using 'ad-hoc' data binding.</p>
<figure><link>images/unboundcrudactions.jpg</link></figure>

<p>A List with an updateable Detail View also allows you to perform CRUD
operations against a SQL database, and therefore represents an alternative
to the above techniques. </p>
<note>It is possible to continue to use Data Binding
along with Lists with updateable Detail Views.</p>

<p>If you define Data Binding using the Data Binding pane in the UX builder (see
image at top of section), you are said to be defining the data binding at the 'UX
level'. When you define the data binding at the UX level your UX can only perform CRUD
actions against a single set of linked tables (i.e. the tables that the UX is
data bound to).</p>
<p>However, if you use Lists with Detail View to perform your CRUD actions, then
you can update multiple independent sets of tables. That's because you can have
multiple Lists on the UX, each with its own 'data binding' definition (i.e. the
data binding is done at the 'List' level)</p>
<p>Choosing whether to create a UX that does CRUD operations against a SQL
database by defining data binding at the UX level, or by creating a List with an
updateable Detail View is a matter of personal preference. Both methods have
their advantages.</p>
<p>However, if you want to build an application that can be used while
disconnected, then you must use the List with Detail View method.</p>

<title>Configuring a List Control for Disconnected Applications</title>
<p>When you are building an application for disconnected usage there are certain
List control properties that must be carefully considered. These are:</p>

<p>Pagination - The 'pagination' option for the List should not be
checked. With pagination turned on, you only load one 'page' of data into the
List at a time. You then go back to the server each time a new 'page' of data is
requested. Since the application is designed for disconnected usage, you will
not be able to go back to the server to get more data. </p>
<p>For a disconnected application, you want to load all of the 'relevant data'
into the List while you have a connection (i.e. before you go offline).
If all of the 'relevant' data turns out to be a large number of rows, then you
will want to turn on the 'list virtualization' feature to improve the List
performance (see below). </p>
<p>You can add a Search Part to the List to allow the user to search for the
'relevant data' that they want to have available when they are disconnected (see
below).</p>

<p>List virtualization - If your List has a large number of rows in it,
turn on virtualization (on the List Properties pane in the List Builder). With
List virtualization, the List performance is substantially improved because only
a subset of the List rows are rendered.</p>

<figure><link>images/listvirtualizationsetting.gif</link></figure>

<p>Search Part - By adding a Search Part to the List and checking the
'Delay populate till active search' property, you allow the user to search for
'relevant' data while they have a connection (i.e. before they go offline). 
</p>
<p>If the user enters search criteria that are not sufficiently restrictive and
tries to load too much data into a List your application should display an error
and inform the user to enter more restrictive search criteria. See 
<link href="Setting Search Result Maximums">Setting
Search Result Maximums</link> for information on how to specify the maximum search
size and what events can be used to display  feedback to the user should
they try to load too many records onto their mobile device.</p>


<title>Miscellaneous Topics</title>


<h3>Preventing Duplicate Synchronization Commands</h3>


<p>When you are working
with disconnected data in a List control there is a small possibility of
a synchronization request being submitted to the server more than once -
resulting in the possibility of duplicate records in the database.</p>
<p>To understand how this might happen, consider what happens when the
user clicks the 'Synchronize' button on a device to synchronize edits
that were made while offline.</p>
<ol>
<li>
A JSON packet containing all of the edits that were made to the List
(including any child Lists) is sent to the server.</li>
<li>
The server processes the updates.</li>
<li>
After the server has completed processing the updates, the server
sends a response back to the client indicating which rows were
successfully synchronized and which rows have errors. This response
will set the 'dirty' state of each row in the List that had been
edited back to 'clean'.</li>
</ol>
<p>Obviously, in order for the server to receive the synchronization
request, the user must have a connection. But suppose that AFTER
the user sends a synchronization request to the server, but BEFORE
the server completes the work and can send a response back to the client
looses connectivity.</p>
<p>The server will continue processing the updates to the server and
will do all of the synchronization requests contained in the package
sent from the client. The server does not know that the client is now
offline and so, after it completes all of the work, it will send a
response to client indicating which rows were successfully synchronized.
However, since the client is now offline, the client will not receive
this message from the server. This means that all of the rows on the
client that were edited are still marked as 'dirty' (even though the
server has successfully applied all of the edits).</p>
<p>Now assume that the client gets its connection back and the user
clicks the 'Synchronize' button again. The client will send a JSON
package to the server and this package will include all of the updates
that were previously sent to the server.</p>
<p>In order to protect against this possibility, a special server-side
log can be used to prevent synchronization commands from being executed
more than once.</p>
<p>In order to turn on the server-side synchronization log, edit the
List control and on the Detail View pane, check the
Use server-side synchronization
log table property.</p>


<figure><link>images/synclog.jpg</link></figure>

<p>Before you can check this property however, you must first define the
setting for the Synchronization Log Table. To define these settings,
click the Project Properties button when the Web Projects Control Panel
has focus.</p>
<p>Scroll to the Offline Data Synchronization Log Table Settings section
and set the properties for the table. You can map this table to an
existing table in your SQL database or Alpha Anywhere can create a new
table for you with the correct table structure.</p>

<figure><link>images/offlinesynctableproperties.jpg</link></figure>
<p>




<title>METHODS</title>
<h3>UX Component Methods</h3>
<p>The following are new methods for the UX component. These methods apply to UX
components that contain Lists which have Detail Views.</p>


<p>{dialog.object}.countRecordsToSynch(listId) - Returns an
object with properties showing the number of records that have not yet been
synchronized with the server. The object has these properties: count,
updatedRecords, newRecords, deletedRecords. 'count' is all dirty records
(edits, inserts and deletes), 'updatedRecords' is all records that were
edited, 'newRecords' is records that were added and 'deletedRecords' is
records that were deleted.</p>
<note> If the listId is a child List of a
parent List that has pre-fetched data, the counts from the top-level List
are returned. For example, if your UX as a List for 'Customers' and 'Orders'
and the data for 'Orders' has been pre-fetched in the 'Customer' List,
requesting the count of records to be synched for the 'Orders' list will
return the count for the 'Customer' list since data for pre-fetched child
Lists are synchronized at the parent List level.</p>
<p><br>
var o = {dialog.object}.countRecordsToSynch(listOrders)</p>
<p>alert('You have ' +  o.count + ' records to
synchronize')


<p>{dialog.object}._getDirtyLists() - Returns an array of the Lists that
are dirty. See also ._hasDirtyLists().</p>

<p>{dialog.object}._getListForDetailViewControl(colName) - If the
specified colName is in the Detail View of any List control on the UX,
returns the name of the List control.</p>
<p>var listName =
{dialog.object}._getListForDetailViewControl('state');</p>

<p>{dialog.object}._hasDirtyLists() - Returns true if any List on the UX
is dirty. See also ._getDirtyLists().</p>

<p>{dialog.object}._isControlInListDetailView(colName) - Returns
true if the colName is inside the Detail View of any List control on the
UX</p>

<p>var flag = {dialog.object}._isControlInListDetailView('firstname');</p>

<p>{dialog.object}.persistListToLocalStorage(ListId) - Manually persist List data and state to Local Storage
(assuming the List properties have been set to allow persistence to Local
Storage). Normally this method is not needed because the List is
automatically persisted to Local Storage any time the List contents is
changed (by adding, deleting or editing data in the List).</p>

<p>{dialog.object}.refreshListData() Method - Incremental Refresh Option
- The .refreshListData() method makes an Ajax callback to refresh the data shown
in a List control. By default, the Ajax callback computes a new set of data to
show in the List, sends that data back to the client, completely repopulating
the List.</p>
<note> If the List has any unsynchronized edits you cannot
execute the .refreshListData()
method.</p>
<p>You can specify that you want to perform an 'incremental' refresh, rather
than a 'full' refresh. The
syntax is:</p>

<p>{dialog.object}.refreshListData(listId,{mode:
'incremental'});</p>
<p>{dialog.object}.refreshListData(listId,{mode: 'full'});</p>

<p>If the optional second argument is omitted, a full refresh is assumed.</p>
<p>In the case of an 'incremental' refresh, only data for rows that have been
edited or added to the the database since the time the List was initially
populated are sent to the client. In addition, a list of keys that have been
deleted is also sent to the client. This may result in a substantially smaller
payload being sent back to the client - especially if only a few rows have been
edited or added. The size of the payload is important in mobile applications.</p>
<p>The main benefit of this option is the reduction on the response payload.
There is a small cost in terms of the load placed on the server, as the server
has to determine which records have changed. </p>
<p>Also, the payload of the initial request from the client to the server to
request a refresh is slightly larger because a list of primary keys and their
CRC values has to be sent to the server.</p>
<p>IMPORTANT: In order to use the 'incremental' refresh option, you must
set the Include CRC in List data property to true. </p>


<p>{dialog.object}.refreshListsIncremental() - Performs an incremental
refresh on all Lists. This method simply executes the standard
{dialog.object}.refreshListData() 
method, passing in the optional {mode: "incremental"} parameter to the method.</p>
<p>An incremental refresh differs from a full refresh in that only rows that
were edited on the server after the List was initially populated are sent to the
client. An incremental refresh can only be done if the List's
Include CRC in List data
property has been checked.</p>

<figure><link>images/listcrcproperty.jpg</link></figure>

<p>{dialog.object}.saveListEdits(listId [,options] ) - Synchronizes edits
that have been made to the List (and any of its child Lists). By default, edits
from all dirty rows in the List are submitted to the server. You can optionally
specify that just the edits for the currently selected row should be submitted
to the server (by passing in {rows:
'current'} in the optional 
options parameter.</p>
<p>If the List is based on a SQL data source, the data are automatically saved
to the table(s) on which the List is based. Alpha Anywhere automatically
generates the necessary SQL CRUD statements from the submitted data.</p>
<p>If the List is not based on a SQL data source (for example the
Data Source property of the List is set to 'Custom', 'Static',
'Javascript', etc.), then you must write your own synchronization handler to
persist the submitted data. See 
<link href="Custom Handlers for Synchronization Tasks">Custom Handlers for Synchronization Tasks</link>
for more information.</p>
<p>When you submit multiple dirty rows of data you can choose to submit all rows
at once, or you can submit data in batches. The batch size can be specified in
the List properties, or you can override the setting in List properties by
specifying an option in the JSON options passed in as the second parameter to
the method. For example:</p>
<p>{dialog.object}.saveListEdits('LISTCUSTOMERS',{rows: 'allRows',
batchSize: 10});<br>
</p>
<p>When you submit data in batches, the first batch is submitted, then once that
batch is synchronized a subsequent callback is triggered to submit the next
batch, and so on, until all of the dirty rows have been submitted. The user can
cancel before all batches have been submitted. If the user does cancel, the
current batch that is being processed will continue to process, but once this
batch completes, no further batches will be sent to the server. For more
information on synchronizing in batches, see the section 
<link href="Synchronizing Data in Batches">Synchronizing Data
in Batches</link>.</p>

<p>Behind the scenes, this method does this:</p>
<ol>
<li>calls the List's .harvestList() method to get all of the dirty data to
submit to the server</li>
<li>makes an Ajax callback and submits the List data</li>
<li>performs server-side validation of the submitted data.</li>
<li>if server-side errors are found, compute the necessary Javascript to
return information about the errors to the List so that the Detail View
controls can be decorated with the appropriate error messages.</li>
<li>if any write conflicts were found on the server (because another user
had edited any of the records that were edited in the List), compute the
necessary Javascript to return information about the conflicts to the user
so that she may resolve them.</li>
<li>computes an Ajax response to refresh the rows in the List that were
updated and remove the 'dirty' flags from List rows that were previously
marked as 'dirty'.</li>
</ol>
<p>When the List edits are pushed to the server, you can optionally specify that
any edits that were made on the server (presumably, by other users) should be
pushed back to the List.</p>
<p>When you configure the List control you can set the synchronization policy to
control whether 'server-to-client' synching should take place.</p>
<p>Since 'server-to-client' synching is a more expensive operation than
'client-to-server' synching, you might want to turn this option off and instead
provide a menu choice to the client to explicitly do a 'server-to-client' synch.
To do an explicit 'server-to-client' synch, you can all this method:</p>

<p>{dialog.object}.refreshListData(listId,{mode:
'incremental'}); </p>

<note> When you specify the 'incremental' mode any rows in the List that are
dirty will not be refreshed.</p>


<p>Lists with Hierarchical Data </p>
<p>If you have Lists with hierarchical data, when you synchronize any List in
the hierarchy, all of the Lists in the hierarchy are synchronized. The
data sent back to the server by default includes the top level parent record and
only the dirty child records. However, when synchronizing hierarchical data you
can optionally submit all child records to the server (including records that
were not edited).</p>
<p>To indicate that you want to submit all child records, not just dirty child
records, set the 'allChildRecords' flag in optional arguments, as shown below:</p>

<p>{dialog.object}.saveListEdits('LIST',{rows: 'allRows',
allChildRecords: true});</p>

<note> It only makes sense to submit all child records to
the server if you have defined a custom synchronization handler. The option to
define a custom synchronization handler is only available if the List data
source is set to Custom or Static.</p>

<p>For example, say you have this hierarchy:</p>
<p>Customer List</p>
<p>    Orders List</p>
<p>        OrderDetails List</p>

<p>In other words, the OrderDetails List specifies that the Orders List is its
parent, and the Orders List specifies that the Customer List is its parent, and
the two child Lists (Orders and OrderDetails) specify that their data is
pre-loaded.</p>
<p>In this example, the Customer List will contain all of the data for its child
Lists.</p>
<p>When you synchronize edits at any level in the hierarchy, the 'logical'
record is submitted to the server. The 'logical' record is the top-level
parent record, and all of the child records. As mentioned above, by default, the
'logical' record only includes leaf node child records that are dirty.
However, if you set the allChildRecords flag to true then the composite record
that is submitted to the server is the complete record (including clean child
records).</p>

<p>{dialog.object}.synchronizeLists([options]) - Synchronizes all Lists.
This method just calls the .saveListEdits()
method for each List on the
component. See .saveListEdits() for more information.</p>
<p>The options options object is described in the section covering the
.saveListEdits()
method.</p>

<h3>List Methods - Detail View Part</h3>
<p>The following List methods can be used for Lists that have a Detail View
part:</p>

<note>In order to invoke any of these methods, your
Javsascript code must first get a pointer to the List object. For example:<br>
<br>
var listObj = {dialog.object}.getControl('LIST1');<br>
listObj.nameOfListMethodToInvoke();</p>

<p><listObj>.addTableRow(data [,options]) - Adds a new row of data to a
List that has a Detail View. By default, the new row is added at the end of the
List, but you can add the new row (i.e. insert the row) at any position by
setting options.</p>
<p>Where:</p>
<ul>
<li>
data - an object with the values in the List that you want to set.
</li>
<li>
options - an object with optional settings.</li>
</ul>
<p>The options object can contain these properties:</p>
<p>options.setFocusToTargetRow - true/false - If true, then focus will be
given to the target row. The default for this property is false.</p>
<p>options.insertRow - true/false -- default false. Set to true if you
want to insert at a specified position in the List rather than at the end.
(Requires build 4444 or above)</p>
<p>options.insertPosition - if options.insertRow is true, specify
where in the List the new row should be inserted. options.insertPosition can
either be a number or a string. If it is a number, it represents a zero based
row number in the List where the new record will be inserted. If it is a string
it represents the List value where the new row will be inserted.</p>

<p>Example:</p>

<p>//create a data object with values for the columns in the List
you want to edit</p>
<p>var data = {};</p>
<p>data.FIRSTNAME = 'Cecelia';</p>
<p>data.LASTNAME = 'Longwood';</p>

<p>//define optional settings<br>
var ops = {};</p>
<p>ops.setFocusToTargetRow = true;</p>

<p>//get a pointer to the List control and then call the .addTableRow()
method</p>
<p>var lObj = {dialog.object}.getControl('CUSTOMERLIST')</p>
<p>lObj.addTableRow(data,ops);</p>

<p>//insert the new row at position 3 (zero based)</p>
<p>var ops = {};</p>
<p>ops.setFocusToTargetRow = true;</p>
<p>ops.insertRow = true;</p>
<p>ops.insertPosition = 3;</p>
<p>lObj.addTableRow(data,ops);</p>




<p>Contrast the .addTableRow() method with the List object's
.appendRows()
method.</p>
<p>The .addTableRow() method is the programmatic equivalent of the user entering
some values into the List Detail view controls and then clicking on the Save
button to save their changes back to the List. When the user does this, the List
becomes dirty and the edits that have been made to the list can be synchronized
with the server.</p>
<p>The .appendRows() method is a low level method that adds the data to the
List, but this method does not add the necessary information to the List to
cause the List row that was added to become dirty. The new row cannot be
synchronized with the server.</p>
<note> To programmatically update a table row see the .updateTableRow() 
method.</p>
<p><listObj>.deleteRow(options) - Marks the current row in the List
as deleted. The row is not physically removed from the List until the data are
synchronized. If the current row is a new record, then the row is immediately
removed from the List.</p>
<p>options - a JSON object with these properties:</p>
<p>prompt - true/false - prompt for confirmation. Default is true.</p>
<p><listObj>.detailViewIsDirty() - Returns true/false if the controls
that show the Detail View are dirty or not.</p>
<p><listObj>.disableDetailView([flag]) - disables all of the controls in
the Detail View. If flag is false, enables all controls.</p>
<p><listObj>.fieldIsDirty(field [, rowNumber]) - Returns true if the
specified field is dirty. If the rowNumber is not passed in the currently
selected row is used. For new records, the field is considered dirty if it is
not blank.</p>
<p><listObj>.harvestListRow([zeroBasedRowNum]) - gets a JSON object of
the data in the row. If row is an existing row, the object includes an _oldData
object with the original values in the row. If the optional row number is not
passed in, the current row is harvested.</p>
<p><listObj>.harvestList([flagPrimaryKeysOnly]) - gets an array of JSON objects for each row
in the list that is either dirty, or a new row;</p>
<p>You can optionally pass in a flag (true/false) to indicate that you want an
array of primary keys for the dirty rows.</p>
<p><listObj>.listIsDirty() - Returns true if the List control has any
dirty rows. A 'dirty' row is an edited row, or new row that has not yet been
committed on the serever side. See also {dialog.object}._hasDirtyLists()</p>
<p><listObj>.listRowIsDirty([zeroBasedRowNum]) - Returns true if the
current row in the List is dirty. You can optionally specify a zero based row
number.</p>
<p><listObj>.listRowIsNew([zeroBasedRowNum]) - Returns true if the
current row in the List is a new row. You can optionally specify a zero based
row number.</p>
<p><listObj>.newDetailViewRecord() - Sets all of the controls in the List
Detail view to their 'new record' value and unselects the current row in the
List.</p>
<p><listObj>.populateUXControls() - populates UX
controls with data from the List. This method is internal - it is called
automatically when the onSelect event fires if the List has a Detail View.</p>
<p><listObj>.resetForm([options]) - Resets the Detail View form. Options
is an optional JSON object with these properties:</p>
<p>prompt - true/false - if true, prompts for confirmation before
resetting the form</p>
<p><listObj>.resetRow([options]) - Resets a List row that has been edited
to its original values. If the row has been marked as deleted, then 'un-deletes'
the row. Options is an optional JSON object with these
properties:</p>
<p>prompt - true/false - if true, prompts for confirmation before
resetting the form.</p>
<p><listObj>.setRowClean([zeroBasedRowNum]) - sets the row state to
clear. If row num is not specified, current row.</p>
<p>var lObj = {dialog.object}.getControl('list1');<br>
lObj.setRowClean();</p>
<p><listObj>.setServerSideError(flag [, zeroBasedRowNum [, errorObject]])
- Used internally to put information about server side errors into the List's
data object. </p>
<p>Sets the data object ._hasServerSideError flag to true or false;</p>
<p>If flag is true then also sets the data object's .serverSideErrors object to
the passed in errorObject</p>
<p><listObj>.updateListFromUXControls() - Updates the data in the List
with edits made in the List's Detail View controls.</p>
<p>var lObj = {dialog.object}.getControl('list1');<br>
lObj.updateListFromUXControls();</p>

<p><listObj>.updateTableRow(primaryKeyOrRowNumber,data [,options]) -
Updates data in a row in a List that has a Detail View.</p>
<p>Where:</p>
<ul>
<li>primaryKeyOrRowNumber - The primary key value or row number (zero
based) of the row you want to update. If this argument is a string then it
is assumed to be a primary key value. If it is a number, then it is assumed
to be a row number. The primary key of the List is specified in the List
builder.</li>
<li>data - an object with the values in the List that you want to
set. </li>
<li>options - an object with optional settings.</li>
</ul>
<p>The options object can contain these properties:</p>
<p>options.setFocusToTargetRow - true/false - If true, then focus will be
given to the target row. The default for this property is false.</p>
<p>Example:</p>

<p>//create a data object with values for the columns in the List
you want to edit</p>
<p>var data = {};</p>
<p>data.FIRSTNAME = 'Cecelia';</p>
<p>data.LASTNAME = 'Longwood';</p>

<p>//specify the primary key of the row to update</p>
<p>var primaryKey = '1234';</p>

<p>//define optional settings<br>
var ops = {};</p>
<p>ops.setFocusToTargetRow = true;</p>

<p>//get a pointer to the List control and then call the .updateTableRow()
method</p>
<p>var lObj = {dialog.object}.getControl('CUSTOMERLIST')</p>
<p>lObj.updateTableRow(primaryKey,data,ops);</p>

<p>Contrast the .updateTableRow() method with the List object's .updateRow()
method.</p>
<p>The .updateTableRow() method is the programmatic equivalent of the user
entering some values into the List Detail view controls and then clicking on the
Save button to save their changes back to the List. When the user does this, the
List becomes dirty and the edits that have been made to the List can be
synchronized with the server.</p>
<p>The .updateRow() method is a low level method that updates the data in a
row, but this method does not add the necessary information to the List to cause
the List row that was edited to become dirty. It does also not add the
._oldData
object to the List to store the original values that were in the List row before
it was edited. The changes that were made to the List cannot be synchronized
with the server.</p>
<note> To programmatically add a table row see the .addTableRow() 
method.</p>


<p><listObj>._ClearServerSideErrors([zeroBasedRowNum]) - Used internally.
Clears error messages from the Detail View controls.</p>
<p><listObj>._debugListData() - shows the contents of the data object for
the current row in the List. You must have specified a placeholder for the debug
information.</p>
<p><listObj>._getControlsInDv() - Returns an array of all of the controls
in the Detail View. Only controls that actually exit are returned. For example,
say you specified that the Detail View is all of the controls in a container
called 'CONTAINER_1' and one of the controls in this container is called 'SHIPPING_ADDRESS',
but the List does not have a field called 'SHIPPING_ADRESS'. The array of
controls returned by this function will not include the 'SHIPPING_ADDRESS'
control.</p>
<p><listObj>._getListFieldFromControl() - Takes the name of a Detail View
control and returns the field name in the List that the control is mapped to.</p>
<p><listObj>._getRoute() - For use with Lists that contain hierarchical
data. Gets an array of objects with the current row primary key value (default)
or row number in all Lists in the hierarchy. Each object in the array has two
properties: list an row. 'list' is the name of the List, and row is the current
(zero based) row number that is selected. </p>
<p>For example, say you have three Lists - CUSTOMERS, ORDERS, ORDERDETAILS. </p>
<p>var lObj = {dialog.object}.getControl('CUSTOMERS');</p>
<p>var route = lObj._getRoute()</p>

<p>This will return an array that might look like this:</p>
<p>[</p>
<p>    {list: 'CUSTOMERS', row: 'ALFKI'},</p>
<p>    {list: 'ORDERS', row: '11063',</p>
<p>    {list: 'ORDERDETAILS', row: '11063|||27'}</p>
<p>]</p>

<p>To use row numbers:</p>
<p>var route = lObj._getRoute('rowNumber');</p>

<p><listObj>._hasClientSideError() - returns true if any control in the
List Deail View has a client-side validation error.</p>
<note> The placeholders that you specify for the Global Error Message and the
Fade-out Message will consume space in the Layout. You can wrap then in a NoFloat container and set the float property of the container iself to .f. so
that they don't consume space.</p>
<p><listObj>._logicalRow2PhysicalRow() - Takes the logical row number
(the value of the *key property in the data object - also the same as the row
number in the data when it is loaded - before any client side sorting/filtering)
and converts to a physical row number in the current sorted/filtered client side
view of the data.</p>
<p><listObj>._setRoute(routeArray) - For use with Lists that contain
hierarchical data. Sets the selected row on each List in the routeArray. See
._getRoute()
method for more details.</p>
<note> If you don't pass in a routeArray to the
method, the method will look for a value in the <listObj> '__currentRoute'
property. This property is automatically set when you call the {dialog.object}.saveListEdits()
method.</p>
<p><listObj>._showServerSideErrors([zeroBasedRowNum]) - Used internally.
Paints error messages on the Detail View controls using information stored in
the List data .serverSideErrors object.</p>

<h3>List Methods - Search Part</h3>
<p>The following List methods can be used for Lists that have a integrated Search
part:</p>

<note>In order to invoke any of these methods, your
Javsascript code must first get a pointer to the List object. For example:<br>
<br>
var listObj = {dialog.object}.getControl('LIST1');<br>
listObj.nameOfListMethodToInvoke();</p>


<p><listObj>.searchModeOn() - If the List Search Part is set to 'QueryByForm'
then turns search mode on.</p>
<p>Example: </p>
<p>var lobj = {dialog.object}.getControl('LIST1')<br>
lobj.searchModeOn();</p>

<note> The search mode can be displayed by adding a Label control to the UX and
setting the control's client-side calculated expression to:<br>
dialog.listDetailView.LISTNAME.mode<br>
<br>
where 'LISTNAME' would be replaced by the actual List name (in capitals).</p>
<p><listObj>.searchModeOff() - If the List Search Part is set to 'QueryByForm'
then turns search mode off.</p>
<p>Example: </p>

<p><listObj>.searchList([options]) - Submits the Search Part to
search the List.  You can specify if the search should be performed
client-side, server-side or 'auto'.</p>
<ul>
<li>options - an optional JSON format string that indicates where the
search should be performed (client-side or server-side). In the case of
server-side search, you can set additional optional properties. </li>
</ul>
<p>The JSON options object has the following optional properties:</p>

<ul>
<li>
searchMode - can
be set to clientSide,
serverSide or
auto. The 'auto' option performs a server-side search if the List is not 'dirty'
(i.e. does not have any unsynchronized edits). Otherwise, it performs a
client-side search.</li>
</ul>
<ul>
<li>
maxRows - in the case of a
server-side search, indicates the maximum number of rows that the search is
allowed to return. This property overrides the property that is set in the
List Builder on the Search Part pane.</li>
</ul>
<ul>
<li>
maxPayload - in the case of
a server-side search, indicates the maximum payload that the search is
allowed to return. This property overrides the property that is set in the
List Builder on the Search Part pane.</li>
</ul>
<p>Example:</p>
<p>
{dialog.object}.getControl('LIST1').searchList({searchMode : 'auto', maxRows:
30});</p>

<note> The 
beforeSearch client-side event fires before the search is performed. This
event exposes the searchWhere property that tells you where the search will be
performed.</p>

<p><listObj>.clearSearchList([options]) - Removes any filter previously
applied by submitting the Search Part.</p>
<p>See .searchList() method for information about options.</p>

<p><listObj>.queryByFormClearControls() - Removes the search criteria
from the Detail View form when the List is in 'search' mode.</p>
<p>Events</p>
<ul>
<li>beforeSearch - Fires before the search is executed. The 'e'
object passed into the event has these properties:
searchMode - 'search' (user
is performing a search) or 'clear' - user is clearing a previously applied
search and searchWhere - 'clientSide'
or 'serverSide'.</li>
<li>afterSearchComplete - Fires after the search has executed. The
'e' object passed into the event has these properties:
searchMode - 'search' (user
is performing a search) or 'clear' - user is clearing a previously applied
search and recordsInQuery -
a count of the number of records found by the search.</li>
</ul>

<title>Videos</title>


<table>



<tr>
<td>
UX Component - List Control</td>
<td>
Introduction to the List Control Detail View</td>
<td>
The List control can have an associated Detail
View. The Detail View allows you to see details
for the currently selected row in the List. The
Detail View can be updateable, allowing you to
update data that is in the List.<br>
<br>
In this video we show how you can add a Detail
View to a List. We show two different genies
that you can use - one for setting up a List
with a Detail View, and another for adding a
Detail View to an existing List.<br>
<br>
IMPORTANT: Lists with Detail Views are
the essential building block for applications
that can work while you are disconnected. For
more information about the features of Lists
with Detail Views, see the videos in the 'UX
Component - Disconnected Applications' category.
<u>Even if you do not need to build mobile
applications that work while disconnected, the
information regarding Lists and Detail Views in
these videos will be relevant.</u><br>
<br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_list_detailView1.swf">Watch Video - Part
1</link><br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_list_detailView2.swf">Watch Video - Part 2</link><br>
<br>
<br>
Date Added: 2014-09-07</td>
</tr>



<tr>
<td>
UX Component - List Control</td>
<td>
Contrasting Data Binding at the UX Level with
Data Binding at the List Level to Update a SQL
Database</td>
<td>
When you want to update data in a SQL database
using a UX component you previously could define
Data Binding properties for the UX component,
then define a server-side action that loaded the
primary keys of the records you wanted to edit
and another server-side action to save the edits
back to the SQL database.<br>
<br>
Now, using a List control with an updateable
Detail View, you can perform edits on a SQL
database using the List and its associated
Detail View.<br>
<br>
In this video we contrast the two methods of
performing CRUD (create, read, update, delete)
operations on a SQL database using Data Binding
and List controls.<br>
<br>
<br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_crud_1.swf">Watch Video - Part
1</link><br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_crud_2.swf">Watch Video - Part 2</link><br>
<br>
<br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_crud_compare.zip">Download Components</link><br>
<br>
Date Added: 2014-09-07</td>
</tr>



<tr>
<td>
UX Component - List Control</td>
<td>
List Control Search Part </td>
<td>
The List control has a built-in Search Part that
allows you to perform searches on the database
that is used to populate the List. (This is very
much like the Search Part in a Grid component).<br>
<br>
The Search Part in the List can be configured in
three different ways:<br>
- individual fields for the Search Part
(allowing the user for example to enter criteria
in a Name, City or Country field)<br>
- a single keyword field (allowing the user to
enter criteria in a single field then then
searching for matches in multiple fields)<br>
- query by form (allowing the List's Detail View
to be used to enter the search criteria)<br>
<br>
In this video we show how the various options
can be used to search a List. <br>
<br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_list_searchPart_1.swf">Watch Video - Part 1</link><br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_list_searchPart_2.swf">
Watch Video - Part 2</link><br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_list_searchPart_3.swf">
Watch Video - Part 3</link><br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_list_searchPart_4.swf">
Watch Video - Part 4</link><br>
<br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/list_searchPart.zip">
Download Components</link><br>
<br>
Date Added: 2014-09-07</td>
</tr>



<tr>
<td>
</td>
<td>
</td>
<td>
</td>
</tr>



<tr>
<td>
UX Component - Disconnected Applications</td>
<td>
Introduction</td>
<td>
You can build applications that are designed to
work when you are disconnected. The UX component
and the List control are the fundamental
building blocks of these types of applications.<br>
<br>
In this video overview we show how a UX
component is built using a List control with an
associated Detail View to display and edit data,
how the data in the List is persisted to Local
Storage and then how the edits made to the List
data are synchronized with the server. We also
show how your disconnected data can be
'hierarchical' - i.e. a list of customers, with
orders for each customer and order details for
each order.<br>
<br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_disconnected_introduction_1.swf">Watch Video 1 - Setting up a List with a Detail
View using the Quick Setup Genie</link><br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_disconnected_introduction_2.swf">Watch Video 2 -
Editing Data and Persisting Data to Local Storage</link><br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_disconnected_introduction_3.swf">Watch Video 3 - Introduction to Hierarchical
Data Structures</link><br>

<br>
Date Added: 2014-09-07</td>
</tr>



<tr>
<td>
UX Component - Disconnected Applications</td>
<td>
Editing Data While Offline and then
Synchronizing the Data</td>
<td>
When you build an application for disconnected
operation, the List control is the basic
building block for the application. The List
control is used as the 'offline' data storage.
The data in the List control can be thought of
as an in-memory table. Edits to this data are
persisted to Local Storage and then are pushed
to the server to synchronize with the server
database when a connection is available.<br>
<br>
In this video we look at how data in the List
are edited and then synchronized with the server
database.<br>
<br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_editing_data_whileOffline.swf">Watch Video</link><br>
<br>
Date Added: 2014-09-07</td>
</tr>



<tr>
<td>
UX Component - Disconnected Applications</td>
<td>
Editing Data While Offline - Behind the Scenes -
What Data are Stored in the List</td>
<td>
In order to get a better understanding of how
the data in a List control are stored to support
disconnected operation, this video shows how you
can debug into the internal data that is stored
in the List when the user edits, enters and
deletes records.<br>
<br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_dataObjectForEachRow.swf">Watch Video</link><br>
<br>
Date Added: 2014-09-07</td>
</tr>



<tr>
<td>
UX Component - Disconnected Applications</td>
<td>
Synchronization Errors - Validation Errors</td>
<td>
When a user synchronizes edits to data that were
made while they were offline, there is the
possibility of synchronization errors.<br>
<br>
These errors can typically result because the
user entered a value in a field that was
rejected by some server-side validation logic, because of a write conflict,
or because the database rejected the edit.<br>
<br>
In this video we show how synchronization errors
that result from server-side validation errors
and database errors
are handled.<br>
<br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_serversidevalidation_1.swf">
Watch Video - Part 1</link><br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_serversidevalidation_2.swf">
Watch Video - Part 2</link><br>
<br>
<br>
Date Added: 2014-09-07</td>
</tr>



<tr>
<td>
UX Component - Disconnected Applications</td>
<td>
Synchronization Errors - Write Conflicts</td>
<td>
When a user synchronizes edits that were made
while they were offline, there is the
possibility that some other user edited and then
synchronized the same data before the user had a
chance to synchronize his/her edits.<br>
<br>
If this happens a write conflict will occur and
the user will be notified that the synchronize
operation could not be completed. The user will
have to choose how to resolve the conflict. The
developer also has the option of handling write
conflict errors programmatically.<br>
<br>
In this video we show how write-conflict errors
are handled.<br>
<br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_write_conflict1.swf">
Watch Video - Part 1</link><br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_write_conflict2.swf">
Watch Video - Part 2</link><br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_write_conflict3.swf">
Watch Video - Part 3</link><br>
<br>
<br>
Date Added: 2014-09-07</td>
</tr>



<tr>
<td>
UX Component - Disconnected Applications</td>
<td>
Synchronization Events</td>
<td>
When data in a List control is synchronized with
the server database there are a number of events
that fire (on both the client-side and the
server-side) that give you a lot of control over
the process and allow you to inject custom code
to be executed.<br>
<br>
In this video we discuss some of the events that
fire when data are synchronized.<br>
<br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_list_synch_events.swf">Watch Video</link><br>
<br>
Date Added: 2014-09-07</td>
</tr>



<tr>
<td>
UX Component - Disconnected Applications</td>
<td>
Custom Synchronization Handlers</td>
<td>
When the user synchronizes a List that is based
on a SQL database, Alpha Anywhere automatically
generates the SQL statements to perform the
various CRUD (create, read, update, delete)
operations.<br>
<br>
However, if your List is based on a custom
datasource (for example, a web service), then
you must write your own functions to handle
synchronization of the data.<br>
<br>
In this video we show an example of how custom
handlers can be written to synchronize data.<br>
<br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/xb_customSync_1.swf">Watch Video - Part 1</link><br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/xb_customSync_2.swf">Watch Video - Part
2</link><br>
<br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_customHandlers_list_synchronization.zip">
Download Component</link><br>
<br>
Date Added: 2014-09-07</td>
</tr>



<tr>
<td>
UX Component - Disconnected Applications</td>
<td>
Incremental Refresh</td>
<td>
After a List has been populated with data from
the server you can perform incremental refreshes
on the List data to retrieve any edits that have
been made to server data. Unlike a full refresh,
only rows that have been edited are sent to the
client, resulting in a much smaller payload
being sent to the client compared to a full
refresh of the List data.<br>
<br>
You can also set a 'synchronization policy' in
the List definition to specify that every time
edits to the List data are synchronized with a
server an incremental refresh of the List should
also be performed.<br>
<br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_incrementalRefresh.swf">Watch Video</link><br>
<br>
Date Added: 2014-09-07</td>
</tr>



<tr>
<td>
UX Component - Disconnected Applications</td>
<td>
Geographic Data - Capturing Location Information
when the User Edits Data</td>
<td>
You can configure a List so that every time the
user enters a new record, or edits a record, the
user's location will be stored. This allows you
to create applications where you capture the
location of the device at the time a record was
edited or entered.<br>
<br>
In this video we show how this is done.<br>
<br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_list_captureLocation.swf">
Watch Video - Part 1</link><br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_list_captureLocation2.swf">
Watch Video - Part 2</link><br>
<br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_geography.zip">
Download Component</link><br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/mysql_schema_geogTable.zip">
Schema for MySQL Table Used in Component</link><br>
<br>
Date Added: 2014-09-07</td>
</tr>



<tr>
<td>
UX Component - Disconnected Applications</td>
<td>
Geographic Data - Capturing Location Information
when the User Synchronizes Data</td>
<td>
In a  previous video we show how location
information can be captured at the time the user
edits a record in the List. But you can also
capture location information at the time the
user synchronizes the data.<br>
<br>
In this video who show how to configure the List
to submit location information at the time the
user synchronizes the List.<br>
<br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_list_captureLocationAtSynchTime.swf">
Watch Video</link><br>
<br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_captureLocationOnSynch.zip">
Download Component</link><br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/mysql_schema_geogTable.zip">
Schema for MySQL Table Used in Component</link><br>
<br>
Date Added: 2014-09-07</td>
</tr>



<tr>
<td>
</td>
<td>
</td>
<td>
</td>
</tr>



<tr>
<td>
UX Component - Disconnected Applications</td>
<td>
Geographic Data - Geocoding Data</td>
<td>
In order to perform geography searches on your
data (for example, find all records that are
within 5 miles of my current location), you need
to geocode the data in your table. For example,
if you have captured the address for the record,
when the record is synchronized, you can make a
call to a geocoding service to get the
latitude/longitude for the record. Then when the
record is written to the database you can also
compute the location field value so that
geography searches are possible.<br>
<br>
In this video we discuss the features that the
List control exposes to support working with
geographic data.<br>
<br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_geocodedataonsynch.swf">
Watch Video</link><br>
<br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_geocode.zip">
Download Component</link><br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/mysql_schema_geocodeexample.zip">
Schema for MySQL Table Used in Component</link><br>
<br>
Date Added: 2014-09-07</td>
</tr>



<tr>
<td>
UX Component - Disconnected Applications</td>
<td>
Setting Default Values for Fields in New Records</td>
<td>
When you enter a new record in a List with a
Detail View you might want to set default values
for certain of the fields in the Detail View.<br>
<br>
The List builder allows you to execute
Javascript code to compute the default value for
each field in the List. This allows for
sophisticated computations for the default
value, including setting the default value for a
field to the value that was just entered into
the previously entered record.<br>
<br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_definingDefaultValueForNewRecord.swf">
Watch Video</link><br>
<br>
Date Added: 2014-09-07</td>
</tr>



<tr>
<td>
UX Component - Disconnected Applications</td>
<td>
Synchronizing Data in Batches</td>
<td>
If the user has made a large number of edits
while they were offline you might want to
synchronize the data in batches, rather than
sending all of the edits to the server at once.
<br>
<br>
In this video we show how you can configure the
synchronization process so that data are sent to
the server in batches.<br>
<br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_batchSynch.swf">
Watch Video</link><br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_synch_in_batches.zip">
Download Component</link><br>
<br>
Date Added: 2014-09-07</td>
</tr>



<tr>
<td>
UX Component - Disconnected Applications</td>
<td>
Delaying Populate List Till Active Search</td>
<td>
In an application designed for disconnected
usage, the user will typically load a subset of
the database onto their mobile device while they
have connection.<br>
<br>
This is usually done by adding a Search Part to
the primary List control in the component and
specifying the the List should not be populated
until the user has performed a search to
retrieve the 'records of interest'. <br>
<br>
TIP: For more information on how to set up the
Search Part for a List control see the video
titled 'List Control Search Part'.<br>
<br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_search_delayPopulate.swf">
Watch Video</link><br>
<br>
Date Added: 2014-09-07</td>
</tr>



<tr>
<td>
UX Component - Disconnected Applications</td>
<td>
Settings Maximum Number of Records that a Search
Can Return</td>
<td>
In an application designed for disconnected
usage, the List controls in the UX component
hold the data that will be available while the
user is offline. These Lists are populated when
the user does a search to retrieve the 'records
of interest' that they want to have available to
them while they are on-line.<br>
<br>
Since the amount of data that can be held on a
mobile device is limited, you will typically
want to ensure that the user does not enter
search criteria that retrieve too many records.<br>
<br>
In this video we show how you can set limits on
how large a result a user search is permitted to
return.<br>
<br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_search_settingMaxSize.swf">
Watch Video</link><br>
<br>
Date Added: 2014-09-07</td>
</tr>



<tr>
<td>
UX Component - Disconnected Applications</td>
<td>
Persisting Data to Local Storage</td>
<td>
When you build an application for disconnected
operation you need to be sure that the data in
the application is persisted to Local Storage so
that edits that are made to any data are not
lost if the application is restarted before the
user has had a chance to synchronize the data
with the server.<br>
<br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/UX_LocalStorage_1.swf">Watch Video - Part 1</link><br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/UX_LocalStorage_2.swf">Watch Video - Part 2</link><br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/UX_LocalStorage_3.swf">Watch Video - Part
3</link><br>
<br>
<br>
Date Added: 2014-09-07</td>
</tr>



<tr>
<td>
UX Component - Disconnected Applications</td>
<td>
Working with Hierarchical Data</td>
<td>
The data for disconnected applications are
stored in List controls. In many types of
applications the data you need to work with is
hierarchical. For example, you might have a list
of customers. Each customer has orders and each
order has order details.<br>
<br>
In a connected application, you can make an Ajax
callback to the server when a user selects a
different customer to fetch to orders for that
customer. However, in a disconnected application
you cannot make callbacks to the server, so when
the user selects a customer, the orders for that
customer must already have been retrieved from
the server so that the data can be shown without
making an Ajax callback.<br>
<br>
The List control can easily be populated with
hierarchical data. In this video we explain how
a List control is populated with a customers,
each customers' orders, and each order's
details.<br>
<br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_hierarchicaldata_1.swf">
Watch Video - Part 1</link><br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_hierarchicaldata_2.swf">
Watch Video - Part 2</link><br>
<br>
In this follow on video we show how new records
can be added to child tables and how the new
records are automatically linked to their
parent. In the video we show how a new order is
added for the selected Customer record and then
how new order detail records are added for the
new order. When the data are synchronized, the
linking fields are automatically filled in - the
customer Id is filled into the new order record
and the order id is filled into the new order
detail records.<br>
<br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_hierarchicaldata_3.swf">
Watch Video - Part 3</link><br>
<br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_cust_order_details.zip">
Download Component</link><br>
<br>
<br>
Date Added: 2014-09-07</td>
</tr>



<tr>
<td>
UX Component - Disconnected Applications</td>
<td>
Managing Local Storage</td>
<td>
When you build an application that is designed
for offline use (i.e. a disconnected application), the data in
the List controls, and the variables in the UX
component are persisted to Local Storage.<br>
<br>
In this video we show how you can manage the
data in Local Storage using the built-in Local
Storage manager and using methods of the UX
component.<br>
<br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_manage_localStorage_1.swf">Watch Video - Part 1</link><br>
<a href="http://www.ajaxvideotutorials.com/V12Videos/ux_manage_localStorage_2.swf">Watch Video - Part 2</link><br>
<br>
<br>
Date Added: 2014-09-07</td>
</tr>



</table>
