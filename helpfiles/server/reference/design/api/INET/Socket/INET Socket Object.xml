<page>
	<topic>INET::Socket Object</topic>
	<properties>
		<property generated="true">
			<name>IsBusy</name>
			<type>L</type>
			<description>
Type: "L",
 
Indicates whether the socket connection is busy.
 </description>
		</property>
		<property generated="true">
			<name>IsOpen</name>
			<type>L</type>
			<description>
Type: "L", 
 
Indicates whether the socket connection is open.
 </description>
		</property>
		<property generated="true">
			<name>IsReadable</name>
			<type>L</type>
			<description>
Type: "L", 
 
Indicates whether you can read from the socket.
 </description>
		</property>
		<property generated="true">
			<name>IsWriteable</name>
			<type>L</type>
			<description>
Type: "L", 
 
Indicates whether you can write to the socket.
 </description>
		</property>
		<property generated="true">
			<name>RemoteAddress</name>
			<type>C</type>
			<description>
Type: "C", 
 
The URL of the remote computer.
 </description>
		</property>
		<property generated="true">
			<name>LocalAddress</name>
			<type>C</type>
			<description>
Type: "C", 
 
The URL of the local computer.
 </description>
		</property>
		<property generated="true">
			<name>RemotePort</name>
			<type>N</type>
			<description>
Type: "N"
 
The port being used by the remote computer.
 </description>
		</property>
		<property generated="true">
			<name>LocalPort</name>
			<type>N</type>
			<description>
Type: "N"
 
The port being used by the local computer.
 </description>
		</property>
		<property generated="true">
			<name>Handle</name>
			<type>N</type>
			<description>Numeric Handle property</description>
		</property>
		<property generated="true">
			<name>CallResult</name>
			<type></type>
			<description>
CallResult
 
Provides information about success or failure.
 </description>
		</property>
		<property generated="true">
			<name>Blocking</name>
			<type>L</type>
			<description>Type: "L", Logical Blocking property</description>
		</property>
		<property generated="true">
			<name>Broadcast</name>
			<type>L</type>
			<description>Type: "L", Logical Broadcast property</description>
		</property>
		<property generated="true">
			<name>Debug</name>
			<type>L</type>
			<description>Type: "L", Logical Debug property</description>
		</property>
		<property generated="true">
			<name>Delay</name>
			<type>L</type>
			<description>Type: "L", Logical Delay property</description>
		</property>
		<property generated="true">
			<name>KeepAlive</name>
			<type>L</type>
			<description>Type: "L", Logical KeepAlive property</description>
		</property>
		<property generated="true">
			<name>Linger</name>
			<type>L</type>
			<description>Type: "L", Logical Linger property</description>
		</property>
		<property generated="true">
			<name>OutOfBandInLine</name>
			<type>L</type>
			<description>Type: "L", Logical OutOfBandInLine property</description>
		</property>
		<property generated="true">
			<name>Route</name>
			<type>L</type>
			<description>Type: "L", Logical Route property</description>
		</property>
		<property generated="true">
			<name>ReceiveBufferSize</name>
			<type>N</type>
			<description>Type: "N", Numeric ReceiveBufferSize property</description>
		</property>
		<property generated="true">
			<name>ReceiveTimeout</name>
			<type>N</type>
			<description>Type: "N", Numeric ReceiveTimeout property</description>
		</property>
		<property generated="true">
			<name>ReuseAddress</name>
			<type>L</type>
			<description>Type: "L", Logical ReuseAddress property</description>
		</property>
		<property generated="true">
			<name>SendBufferSize</name>
			<type>N</type>
			<description>Type: "N", Numeric SendBufferSize property</description>
		</property>
		<property generated="true">
			<name>SendTimeout</name>
			<type>N</type>
			<description>Type: "N", Numeric SendTimeout property</description>
		</property>
		<property generated="true">
			<name>BytesAvailable</name>
			<type>N</type>
			<description>Type: "N", Numeric BytesAvailable property</description>
		</property>
		<property generated="true">
			<name>IsListening</name>
			<type>L</type>
			<description>Type: "L", Logical IsListening property</description>
		</property>
	</properties>
	<methods>
		<methodref generated="true">
			<name>Accept</name>
			<ref href="/Server/Reference/Design/Api/INET/Socket/INET Socket Accept Method.xml">Accept</ref>
			<description>Accept a new connection (the socket must already be listening).
Returns a status object with information about the success of the call
If the call is successful, AcceptedSocket contains the new instance of INET::Socket.
HandshakeReadTimeout is appropriate for SSL sockets only. </description>
        
		</methodref>
		<methodref generated="true">
			<name>Close</name>
			<ref href="/Server/Reference/Design/Api/INET/Socket/INET Socket Close Method.xml">Close</ref>
			<description>Close an open connection.</description>
		</methodref>
		<methodref generated="true">
			<name>GetOptions</name>
			<ref href="/Server/Reference/Design/Api/INET/Socket/INET Socket GetOptions Method.xml">GetOptions</ref>
			<description>Get one or more option values in a single call:
Get one or more option values in a single call</description>

		</methodref>
		<methodref generated="true">
			<name>Connect</name>
			<ref href="/Server/Reference/Design/Api/INET/Socket/INET Socket Connect Method.xml">Connect</ref>
			<description>Open a connection to the requested host and port.
Note: ConnectTimeout is in milliseconds.</description>
		</methodref>
		<methodref generated="true">
			<name>Listen</name>
			<ref href="/Server/Reference/Design/Api/INET/Socket/INET Socket Listen Method.xml">Listen</ref>
			<description>Open a socket to listen for incoming requests.</description>
		</methodref>
		<methodref generated="true">
			<name>Peek</name>
			<ref href="/Server/Reference/Design/Api/INET/Socket/INET Socket Peek Method.xml">Peek</ref>
			<description>Read received characters from into stringNote:  Peek does not remove the charaters from the receive buffer.</description>
		</methodref>
		<methodref generated="true">
			<name>QueryTCP</name>
			<ref>QueryTCP</ref>
			<description>Returns .t. the TCP connection described by the arguments matches
an active connection with the requested state.</description>
		</methodref>
		<methodref generated="true">
			<name>Read</name>
			<ref href="/Server/Reference/Design/Api/INET/Socket/INET Socket Read Method.xml">Read</ref>
			<description>Read characters from socket into string.</description>
		</methodref>
		<methodref generated="true">
			<name>ReadBinary</name>
			<ref href="/Server/Reference/Design/Api/INET/Socket/INET Socket ReadBinary Method.xml">ReadBinary</ref>
			<description>Read bytes from socket into a BLOB variable.</description>
		</methodref>
		<methodref generated="true">
			<name>ReadLine</name>
			<ref href="/Server/Reference/Design/Api/INET/Socket/INET Socket ReadLine Method.xml">ReadLine</ref>
			<description>Reads a line from the receive buffer.
A line is terminated by a carriage-return and a line feed.
If nothing is available, an empty string is returned.</description>
		</methodref>
		<methodref generated="true">
			<name>SetOptions</name>
			<ref href="/Server/Reference/Design/Api/INET/Socket/INET Socket SetOptions Method.xml">SetOptions</ref>
			<description>Set one or more options in a single call:
</description>
		</methodref>
		<methodref generated="true">
			<name>Write</name>
			<ref href="/Server/Reference/Design/Api/INET/Socket/INET Socket Write Method.xml">Write</ref>
			<description>Write string data.</description>
		</methodref>
		<methodref generated="true">
			<name>WriteBinary</name>
			<ref href="/Server/Reference/Design/Api/INET/Socket/INET Socket WriteBinary Method.xml">WriteBinary</ref>
			<description>Write binary data.</description>
		</methodref>
		<methodref generated="true">
			<name>SendFile</name>
			<ref href="/Server/Reference/Design/Api/INET/Socket/INET Socket SendFile Method.xml">SendFile</ref>
			<description>Send the file named.</description>
		</methodref>
		<methodref generated="true">
			<name>ReadUntil</name>
			<ref href="/Server/Reference/Design/Api/INET/Socket/INET Socket ReadUntil Method.xml">ReadUntil</ref>
			<description>Reads from the input stream until the delimiter is encountered or a timeout occurs.
If the function returns false, there may still be data in the returned buffer.
This means that the read timed out before receiving the delimiter.
If ReturnDelimiter is true, the delimiter is returned with the string.</description>
		</methodref>
		<methodref generated="true">
			<name>ReadChunked</name>
			<ref>ReadChunked</ref>
			<description>Read all chunks from an HTTP chunked data stream and return them in one binary object.</description>
		</methodref>
		<methodref generated="true">
			<name>ReadAndDiscard</name>
			<ref>ReadAndDiscard</ref>
			<description>Read up to Length bytes of data from the socket and returns.  All data read is discarded</description>
		</methodref>
	</methods>

<sections><section>
<description></description>
<list>

<item>
<name-title>Client Computer
</name-title>
<description-title>
 
Host Computer
 </description-title>
</item>

<item>
<name></name>
<description>dim ServerSocket as INET::Socket

dim ClientSocket as INET::Socket

 

ServerSocket.Listen()

ServerSocket.Accept(ClientSocket)
</description>
</item>

<item>
<name>dim LocalSocket as INET::Socket

 

LocalSocket.Connect()

LocalSocket.Write()
</name>
<description></description>
</item>

<item>
<name></name>
<description>ClientSocket.Read()

ClientSocket.Write()
</description>
</item>

<item>
<name>LocalSocket.Read()
</name>
<description></description>
</item>
<item>
<name></name>
<description></description>
</item>
</list>
</section></sections>

<sections><section>
<description>There may be more exchanges of data.
</description>
<list>
<item>
<name-title>Client Computer
</name-title>
<description-title>
 
Host Computer
 </description-title>
</item>

<item>
<name>LocalSocket.Close()
</name>
<description>
</description>
</item>

<item>
<name></name>
<description>ClientSocket.Close()</description>
</item>

</list></section></sections>

<sections><section><list>

<item>
<name-title>Client Computer
</name-title>
<description-title>
 
Host Computer
 </description-title>
</item>


<item>
<name></name>
<description>ServerSocket.Close()
</description>
</item>




</list>
</section></sections>






	<see>
		<ref>INET</ref>
	</see>
	
	
<terms>INET,socket,arguments,blob,contains,debug,file,function,http,logical,object,string</terms>
	
	
	
</page>