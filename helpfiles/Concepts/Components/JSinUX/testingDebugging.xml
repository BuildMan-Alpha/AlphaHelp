<page>
<topic><![CDATA[Testing & Debugging]]></topic>
<description></description>
    <sections>
        <section>
            <description>Alpha Anywhere has a number of ways you can debug and test your Javascript code from within the development environment. These debugging methods are available for more than just the UX component. They can be used in Grids, Tabbed UIs, Custom Components, and even .html and .a5w pages.
            </description>
        </section>
        <section>
            <title>Javascript Interactive Window</title>
            <description>The Interactive Window is like a scratch pad for writing javascript. It can be found on the Interactive Window tab in Javascript Functions. Code written in the Interactive Window is executed when the Run Javascript button is clicked. If there were any errors in your javascript, a popup will appear with a description of the error. If there were no errors and your script doesn't invoke any popup windows (alert(), prompt() or confirm()), nothing will happen. Use one of the native javascript messaging functions, such as alert(), to display any values you want to see in your javascript.
            </description>
            <figure>
                <link>image05.png</link>
            </figure>
        </section>
        <section>
            <description>
                The Interactive Window does not have the full context of a web browser, so you do not have access to document or window objects found in a web browser nor do you have access to external javascript sources, placeholder objects, or any other built-in javascript functions and objects in Alpha Anywhere. The Interactive Window is a good place to work out and test simple scripts that don't require external input, such as a text formatting or date parsing script. For more complicated scripts that require the browser, you will need to publish the component to the local webroot and test it in a browser. You can also run the component in Working Preview and use Visual Studio or Google Chrome to assist with debugging and testing javascript.
            </description>
        </section>
        <section>
            <title>Debugging using Visual Studio</title>
            <description>
                Microsoft Visual Studio's debugger can be used in Working Preview to debug javascript. If Visual Studio is installed, you can leverage Visual Studio's Just-In-Time debugging tool for javascript. The debugger can be launched from the Internet Explorer environment using the debugger; statement. To tell what browser is being used, look at the bottom of the Working Preview window. You should see a link that says either "Internet Explorer" or "Chrome". If the link says "Chrome", click the link to switch to Internet Explorer.
            </description>
            <figure>
                <link>image42.png</link>
            </figure>
        </section>
        <section>
            <description>
                <p>To open the Visual Studio debugger, place the debugger; statement in your javascript code. You can put this anywhere -- including Client-Side and control events! The first time the debugger; statement is encountered, Visual Studio's Just-In-Time Debugger window will appear. You will be asked what program to use for debugging the component. Select Visual Studio from the list of programs and launch Working Preview again to begin debugging the component.
                </p>
                <p>If you placed the debugger; statement in your javascript and the Just-In-Time debugger did not appear, double-check Working Preview is using Internet Explorer. If Working Preview is using Internet Explorer and the Just-In-Time debugger doesn't appear, debugging may be disabled in Internet Explorer's Internet Options. Check Internet Options to make sure debugging is not disabled.
                </p>
            </description>
            <figure>
                <link>image34.png</link>
            </figure>
        </section>
        <section>
            <description>
                If you don't have Visual Studio installed, you can download Microsoft's Visual Studio Express for free from Microsoft's website.
            </description>
        </section>
        <section>
            <title>Chrome Debugger</title>
            <description>
                If you don't have Visual Studio installed, Google's Chrome debugger is a great alternative. The Chrome debugger can be used inside Working Preview to debug your component. At the bottom of Working Preview, there is an "Internet Explorer" link. Clicking the link opens a window that will let you change the browser used by Working Preview. If Google Chrome is installed on your system, you'll have an option to switch to Chrome for the Working Preview. Changing the browser used in Working Preview will close the Working Preview and place you back in Design mode. Subsequent visits to Working Preview will be using the browser you selected.
            </description>
            <figure>
                <link>image31.png</link>
            </figure>
        </section>
        <section>
            <description>
                Similar to using the Visual Studio debugger, Chrome's debugger also supports using the debugger; statement to add breakpoints. Placing the debugger; statement in your javascript will open the Chrome debugger in Working Preview when the statement is encountered. The first time you run a component in Working Preview, the debugger; statement may not open the Chrome debugger. The Chrome debugger needs to be activated first. The Open Chrome Debugger link at the bottom of the Working Preview window will launch the Chrome debugger.
            </description>
            <figure>
                <link>image36.png</link>
            </figure>
        </section>
        <section>
            <description>
                Once the Chrome debugger has been opened, it will remain open in the background. Click Reload Page and the Chrome debugger will popup whenever debugger; is encountered. You can also click the Open Chrome Debugger link to bring the Chrome debugger to the foreground.
            </description>
            <figure>
                <link>image38.png</link>
            </figure>
        </section>
        <section>
            <description>
                The Working Preview window can be detached from the designer when using the Chrome browser. When detached, you can make changes to the component in Design mode and see the changes right away in the Working Preview window. The Refresh button will update the Working Preview. You can also turn on auto-refresh. Auto-refresh will immediately update Working Preview when any change is made to the component. If you component has a lot of controls or is complex, however, you may notice a delay while editing with auto-refresh on.
            </description>
            <figure>
                <link>image14.png</link>
            </figure>
        </section>
    </sections>
</page>