<page>
   <topic>SQL_Lookup Function</topic>
   <syntax>A value = sql_lookup(* conn ,C table ,C filter ,C result_Expression [,* args [,L flagReturnAllValues [,C ColumnSeparator ]]])</syntax>
   <arguments>
   
    <argument>
         <name>value</name>
         <description>Value returned by the function. Can be of any type, depending on the  value that result_expression evaluates to. Returns a null value if no matching value was found as of Build 3209_3580.
</description>
     </argument>
     <argument>
         <name>conn</name>
         <description>An explicit AlphaDAO connection string, or a named connection string.  (e.g. ::name::myconnectionstring), or a pointer to an open connection. 
</description>
     </argument>
     <argument>
         <name>table</name>
         <description>The name of the table in the remote database in which to perform the  lookup.</description>
     </argument>
     <argument>
         <name>filter</name>
         <description>A filter expression to determine which record in the remote table to  find. The filter expression must use SQL syntax and must use portable AlphaDAO  functions. For example, strings must be single quoted, the AND,  OR and NOT  operators are not surrounded by periods. The filter expression can use  arguments. For example, customerid = :whatcustomerid
</description>
     </argument>
     <argument>
         <name>result_Expression</name>
         <description>A expression to determine what value gets returned. The expression  can be as simple as a single column name in the remote table, or it can be a  complex expression. The expression must be written using portable AlphaDAO  syntax.
</description>
     </argument>
     <argument>
         <name>args</name>
         <description>If the filter expression includes arguments, you must supply argument  values using a SQL::arguments object.
</description>
     </argument>
     <argument>
         <name>flagReturnAllValues</name>
         <description>Logical</description>
     </argument>
     <argument>
         <name>ColumnSeparator</name>
         <description>Character</description>
     </argument>
   </arguments>
   <description>Does a lookup into a table in a remote database using AlphaDAO. Returns a field value or expression from the remote table. Connection can be explicit, or a named connection (e.g. ::name::myconnection).</description>
   
   <example><![CDATA[
connection = "{A5API=Access,FileName='C:\northwind2\northwind2003.mdb',UserName='Admin'}"
table = "customers"
result_expression = "concatenate(city,' - ',contactname)"
filter = "customerid = 'bolid'"
?sql_lookup(connection,table,filter,result_expression)
= "Madrid - Mart n Sommer"

'This example uses a named connection string and it uses arguments in the filter
connection = "::Name::Northwind"
table = "customers"
result_expression = "concatenate(city,' - ',contactname)"
filter = "customerid = :whatcustomerid"
dim args as sql::arguments
args.set("whatcustomerid","Bolid")
?sql_lookup(connection,table,filter,result_expression,args)
= "Madrid - Mart n Sommer"

'In this example we pass in an open connection.
'Since the function will not have to open and then close the connection, it is significantly faster
dim cn as sql::connection
cn.open("::Name::Northwind")
table = "customers"
result_expression = "concatenate(city,' - ',contactname)"
filter = "customerid = 'bolid'"
?sql_lookup(cn,table,filter,result_expression)
= "Madrid - Mart n Sommer"

]]></example>
   
  <terms>sql helper,column,database,field,filter,function,logical,lookup,pointer,record,sql</terms>
 

</page>