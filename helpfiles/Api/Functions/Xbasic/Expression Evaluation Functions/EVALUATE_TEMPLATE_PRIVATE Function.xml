<page>
   <topic>EVALUATE_TEMPLATE_PRIVATE Function</topic>
   <syntax>C EVALUATE_TEMPLATE_PRIVATE(C template[,C Macro1[,...C MacroN]])</syntax>
   <arguments>
     <argument>
         <name>template</name>
         <description>An Xbasic expression contained in a character variable.</description>
     </argument>
     <argument>
         <name>Macro1</name>
         <description>Character</description>
     </argument>
     <argument>
         <name>MacroN</name>
         <description>Character</description>
     </argument>
   </arguments>
   <description>Evaluate code with optional macros in its own variable namespace.</description>
   <discussion>
EVALUATE_TEMPLATE_PRIVATE() executes the Xbasic code specified by Expression in its own variable name-space. This means is that variables outside this call cannot be seen while your Expression is executing and vice-versa. This protects you in case the code you want to run uses a variable with the same name as your calling code and you don't want it to be overwritten.

   </discussion>
  
   <sections>
       <section>
       <title>Example</title>
            <description>Assume the variable "command" is set to: "dim global newVar as C"</description>
            <example><![CDATA[
Evaluate_template_private(command) -> same as executing the command: "dim global newVar as C"
]]></example>
       </section>
   </sections>
   <see>
      <ref>EVAL_VALID()</ref>
      <ref href="/Api/Functions/Xbasic/Expression Evaluation Functions/index.xml">EVAL()</ref>
      <ref href="/Api/Functions/Xbasic/Expression Evaluation Functions/">EVALUATE_TEMPLATE()</ref>
      <ref href="/Server/Reference/Design/Platform/Xbasic/Code Indirection.html">Code Indirection</ref>
   </see>
<terms>expressions,case,function,set,template,templates,variable,xbasic</terms>
</page>