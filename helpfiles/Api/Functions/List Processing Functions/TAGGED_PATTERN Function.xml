<page>
   <topic>TAGGED_PATTERN Function</topic>
   <syntax>Formatted_String as C = TAGGED_PATTERN(C tagged_input,C tagged_output,C String)</syntax>
   <arguments>
     <argument>
         <name>tagged_input</name>
         <description>A formatted string that identifies the tags of the Input_String and the characters that separate the tags. The general format of the Input_String is:
 Placeholder [ Input_Format_Characters ] Separator_Character Placeholder [ IInput_Format_Characters ] Separator_Character...
The syntax for the Input_Format string is described below:</description>
         
         <list>
	         <item>
	         <name>1-99</name>
	         <description>Placeholder for tagged elements (i.e. "fields"). "1" indicates first tagged element, "2" is second tagged element, and so on.
</description>
	         </item>
	         
	         	         <item>
	         <name>Input Format Characters</name>
	         <description>Allow you to refine the search process. This is useful when the formatting of the Input_String is irregular.
</description>
	         </item>
	         
	         	         <item>
	         <name>Separator Character</name>
	         <description>Typically, a non-alpha, non-numeric character. Also excluding "?", "*", "", and "".</description>
	         </item>
	         
	         	         <item>
	         <name-title>Input Format Characters</name-title>
	         <description-title>Meaning</description-title>
	         </item>
	         
	         	         <item>
	         <name>*</name>
	         <description>Wildcard - 0 to N characters. You cannot use "*" as a separator between elements. You must use "\*".
</description>
	         </item>
	         
	         	         <item>
	         <name>+ [ N ]</name>
	         <description>Match N or more characters. When N is missing, the expression means match 0 or more characters.</description>
	         </item>
	         
	         <item>
	         <name>?</name>
	         <description>Single wildcard character. You cannot use "?" as a separator between elements. You must use "\?".</description>
	         </item>
	         
	         <item>
	         <name>[]</name>
	         <description>Square brackets denote a set of characters.</description>
	         </item>
	         
	         <item>
	         <name>^</name>
	         <description>Indicates characters that do not match.</description>
	         </item>
	         
	         <item>
	         <name>a-z</name>
	         <description>Lowercase letters.</description>
	         </item>
	         
	          <item>
	         <name>A-Z</name>
	         <description>Uppercase letters.</description>
	         </item>
	         
	          <item>
	         <name>0-9</name>
	         <description>Numbers.</description>
	         </item>
	         
	          <item>
	         <name>\</name>
	         <description>Escape character. Used in front of   * ? or \ when you want to use these characters in the output_string.
</description>
	         </item>
         
         </list>
         

  
  
  
  
     </argument>
     <argument>
         <name>tagged_output</name>
         <description>A formatted string that identifies the new sequence of the tags of the Input_String and the new characters that separate the tags.
</description>
     </argument>
     <argument>
         <name>String</name>
         <description>A character string.</description>
     </argument>
   </arguments>
   <description>Perform tagged expression replacement on a string.</description>
   <discussion>
TAGGED_PATTERN() parses the Input_String (into "tags", or "fields") using the format specified by the Input_Format string and creates a formatted character string based on the format specified by Output_Format.
For example, assume that you have a string which contains the value:  "John:Smith:Programmer". This string has three fields (or tags) separated by colons. The Input_Format string that corresponds with this string is "1:2:3". An Output_Format string of "2, 1: 3" would create a result string of "Smith, John: Programmer". The Output_Format string specifies field 2, then a comma and a space, then field 1, then a colon and a space, then field 3.
Contrast the TAGGED_PATTERN() function with the WORD_TAGGED_PATTERN()function that operates on a string that is divided into multiple "words". This is typically a CR-LF delimited string in which the function operates on each "word" in the string.
The following are examples of various Input_Format strings:
   </discussion>
  
  <sections>
       <section>
           <list>
           
           
           <item><name-title>Example</name-title><description-title>Description</description-title></item>
           
           
           
           <item>
           <name>"1-2-3"
           </name>
           <description>Tag 1 is composed of the characters up to the first encountered "-" character. Tag 2 is composed of the remaining characters up to the second "-". Tag 3 is composed of the remaining characters.

          </description>
           </item>
           
           <item>
           <name>"1^a-zA-Z + 2"
           </name>
           <description>Tag 1 is composed of alphabetic characters, breaking at the first non-alphabetic character. Tag 2 is composed of the first remaining alphabetic characters through the end of the string.

          </description>
           </item>
           
           <item>
           <name>"1-/2-/3"
           </name>
           <description>Tag 1 is composed of characters up to the first "-" or "/" character. Tag 2 is composed of remaining characters up to the second "-" or "/" character. Tag 3 is composed of the remaining characters.

          </description>
           </item>
           </list>
       </section>
   </sections>
  
  
   <sections>
       <section>
       <title>Example</title>
            <description>This script parses and input string and creates a modified output string in an address format.</description>
          <example><![CDATA[ 
          string = "Fred:Smith:123 Main Street:Boston:Ma:02116"
address = tagged_pattern("1:2:3:4:5:6","1 2~3~4,5 6",string)
          
          ]]></example>
       </section>
       
       <section>
       <description>now convert the "~" to carriage return-line feed.</description>
       <example><![CDATA[
       address = stritran(address, "~", crlf() )
? address
= "Fred Smith
123 Main Street
Boston,Ma 02116"

        ]]></example>
       </section>
       
       <section>
       <description>This script parses a U.S format date (month, day, year) and outputs a European format date (day, month, year).
</description>
       <example><![CDATA[
       ? tagged_pattern("1/2/3", "2-1-3", "2/29/00")
= "29-2-00"
? tagged_pattern("1A-Z2A-Z3", "2-1-3", "2A29B00")
= "29-2-00"
? tagged_pattern("1^0-92^0-93^0-9", "2-1-3", "2A29B00C")
= "29-2-00"

        ]]></example>
       </section>
       
   </sections>
   <see>
      <ref>Character Formatting Functions</ref>
      <ref>List Processing Functions</ref>
      <ref>WORD_TAGGED_PATTERN()</ref>
   </see>
  
<terms>list processing,contains,expressions,field,formatting,function,list,placeholder,replacement,script,search,set,string</terms>
</page>