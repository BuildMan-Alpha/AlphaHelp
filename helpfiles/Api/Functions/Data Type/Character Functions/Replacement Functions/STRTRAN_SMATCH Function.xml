<page>
   <topic>STRTRAN_SMATCH Function</topic>
   <syntax>Output_String as C = STRTRAN_SMATCH(C character,C substring_pattern,C replacement_pattern[,C reorder])</syntax>
   <arguments>
     <argument>
         <name>Output_String</name>
         <description>The character string produced by the replacement operation.</description>
     </argument>
     <argument>
         <name>character</name>
         <description>The character string to search.</description>
     </argument>
     <argument>
         <name>substring_pattern</name>
         <description>A pattern of characters to search for. It can include one or more "*" wildcard characters, each of which selects an arbitrary number of characters, and one or more "?" wildcard characters, each of which selects a single character.
</description>
     </argument>
     <argument>
         <name>replacement_pattern</name>
         <description>A pattern of characters to replace. It can include one or more "*" wildcard characters, each of which selects an arbitrary number of characters, and one or more "?" wildcard characters, each of which selects a single character.
In the simple case, there is a one-to-one match between wildcards. However, it is possible to replace the text selected by any wildcard with constant text and/or expressions that generate text.
</description>
     </argument>
     <argument>
         <name>reorder</name>
         <description>Optional. Default = "1,2,3,...,N". A comma delimited series of numbers that sets the order of the wildcard replacements. If you wished to replace the text found by wildcard 1 in the substring_pattern  with the text found by wildcard 2 in the substring_pattern, you would change the implicit replacement Reorder value of "1,2" to "2,1". You can drop text found by a wildcard by not specifying its number. You can repeat text found by a wildcard by specifying its number multiple times.
</description>
     </argument>
   </arguments>
   <description>Replaces occurrences that match a pattern with another pattern.</description>
   <discussion>
The STRTRAN_SMATCH() function replaces strings with variable content. It will optionally reorder the content as the replacement is made.
Note : The substring_pattern argument is case sensitive.
   </discussion>
  
   <sections>
       <section>
       <title>Example</title>
            <description>The following examples associate the text to the left of the "=" with the first wildcard and the text to the right of the equal sign with the second wildcard. It replaces the text in the same order that it is found, but adds other text.
</description>
            <example><![CDATA[
string = 
peter=rabbit
charlotte=spider
harry=horse
%a%
? strtran_smatch(string, "*=*" + crlf() , "*, Species = *" + crlf() )
= peter, Species = rabbit
charlotte, Species = spider
harry, Species = horse
]]></example>
       </section>
       
       <section>
            <description>This example adds the optional reorder argument, but leaves things unchanged.</description>
            <example><![CDATA[
string = 
peter=rabbit
charlotte=spider
harry=horse
%a%
? strtran_smatch(string, "*=*" + crlf() , "*, Species = *" + crlf() , "1 2")
= peter, Species = rabbit
charlotte, Species = spider
harry, Species = horse
]]></example>
       </section>
       
       <section>
            <description>This example reorders the text.</description>
            <example><![CDATA[
string = 
peter=rabbit
charlotte=spider
harry=horse
%a%
? strtran_smatch(string, "*=*" + crlf() , "*, Species = *" + crlf() , "2 1")
= rabbit, Species = peter
spider, Species = charlotte
horse, Species = harry
]]></example>
       </section>
       
       <section>
            <description>This example repeats the second text.</description>
            <example><![CDATA[
string = 
peter=rabbit
charlotte=spider
harry=horse
%a%
? strtran_smatch(string, "*=*" + crlf() , "*, Species = *" + crlf() , "2 2")
= rabbit, Species = rabbit
spider, Species = spider
horse, Species = horse

]]></example>
       </section>
   </sections>
   <see>
      <ref>Character Replacement Functions</ref>
   </see>
<terms>string,replacement,arguments,case,defaults,expressions,function,number,search,text,variable</terms>
</page>