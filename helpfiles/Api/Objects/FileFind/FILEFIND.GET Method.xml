<page>
   <topic>FILEFIND.GET Function</topic>
   <syntax>FILEFIND as C = Get(C pattern[,N file_attribute[,C filefindformat]])</syntax>
   <arguments>
     <argument>
         <name>pattern</name>
         <description>A pattern to select file names using wildcard characters like ?*' and ?? '.
</description>
     </argument>
     <argument>
         <name>file_attribute</name>
         <description>Optional. Default = 0 (normal files). The File_Attribute parameter is a numeric value specifying the type of file to find. You can find files that have one or more of the following attributes:
</description>

<list>
<item>
<name>File Attribute
</name>
<description>Description
</description>
</item>

<item>
<name>FILE_FIND_NORMAL
</name>
<description>Normal
</description>
</item>

<item>
<name>FILE_FIND_READONLY
</name>
<description>Read-only
</description>
</item>

<item>
<name>FILE_FIND_HIDDEN
</name>
<description>Hidden
</description>
</item>

<item>
<name>FILE_FIND_SYSTEM
</name>
<description>System
</description>
</item>

<item>
<name>FILE_FIND_LABEL
</name>
<description>Label
</description>
</item>

<item>
<name>FILE_FIND_DIRECTORY
</name>
<description>Directory
</description>
</item>

<item>
<name>FILE_FIND_ARCHIVE
</name>
<description>Archive
</description>
</item>

<item>
<name>FILE_FIND_AND_FLAGS
</name>
<description>Specifies that multiple flags should be ANDed together rather than ORed. By default flags are ORed.
</description>
</item>

<item>
<name>FILE_FIND_NOT_READONLY
</name>
<description>Files that are NOT readonly
</description>
</item>

<item>
<name>FILE_FIND_NOT_DIRECTORY
</name>
<description>Files that are NOT directory files
</description>
</item>

<item>
<name>FILE_FIND_NOT_ARCHIVE
</name>
<description>Files that do not have their archive bit turned on.
</description>
</item>

<item>
<name>FILE_FIND_AND_NOT_FLAGS
</name>
<description>Specifes that when multiple "NOT" flags are used that the flags should be ANDed together.
</description>
</item>



</list>
     </argument>
     <argument>
         <name>filefindformat</name>
         <description>Specifies the type of file to retrieve. The format string can contain these characters:</description>
<list>
<item>
<name>"P" = Path</name>
</item>

<item>
<name>"N" = Filename</name>
</item>

<item>
<name>"D" = Directory - "d" if file is a directory, "-" if not.</name>
</item>

<item>
<name>"H" = Hidden - "h" if file is hidden, "-" if not.</name>
</item>

<item>
<name>"S" = System - "s" if file is a system file, "-" if not.</name>
</item>

<item>
<name>"T" = Date and time file was last updated</name>
</item>

<item>
<name>"L" = Size</name>
</item>

<item>
<name>"C" = Creation date and time</name>
</item>

<item>
<name>"R" = Last time read</name>
</item>

<item>
<name>"A" = Archive bit</name>
</item>

<item>
<name>"X" = DOS short name (8.3), if the file is a long file name</name>
</item>


</list>
 
 
 
 
 
 
     </argument>







   </arguments>
   <description>Returns a string containing all the files - you can specify what gets listed.</description>
   <discussion>
The FILEFIND.GET() method creates a CR-LF delimited string with information about the files in a directory that match a pattern. The format string controls the format in which the information is returned.
   </discussion>
 
   <sections>
       <section><title>Example</title>
            <description>The following script populates an array with information about the files in a folder. The '0' attribute is used to select normal files. The format string returns the fullname, the directory flag, and the date time stamp. The information is displayed in a dialog box.</description>
            <example><![CDATA[
list = filefind.get("f:\a5v5\*.*",0,"PN|D|T")
format = "name|directory|time
dim pp2000 as P
pp.initialize_properties(format,list)
dim indx as N
indx = 1
ui_dlg_box("Display File Information",<<%a%
Name|Directory|Time;
[.30,20indx^#pp\.name]|[.10,20indx^#pp\.directory]|[.40,20indx^#pp\.time];
%a%)
]]></example>
       </section>
       <sections></sections>
       
       
       
       
        <section><title>How To Identify an Empty Directory</title>
            <description>The following script determines if a directory is empty.</description>
            <example><![CDATA[
dim path as C
dim FILEFIND as C
path = "YOUR DIRECTORY"
FILEFIND = filefind.get(path + "\*.*", FILE_FIND_NOT_DIRECTORY, "N")
if (FILEFIND = "") then
'The directory is empty
end if
]]></example>
       </section>
       
       
       
   </sections>
   <see>
      <ref>FILEFIND Methods</ref>
      <ref>File  Functions and Methods</ref>
   </see>
 <terms>filefind,array,directory,file,function,label,script,string,system,time</terms>
</page>