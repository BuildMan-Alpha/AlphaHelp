<page>
	<topic>DotNet::Services.CreateObject Method</topic>
	<syntax>CreateObject as L (BYREF Instance as P, ClassName as C, OPTIONAL Assembly as DotNet::AssemblyReference = null_value(), PARAMS Args as A)</syntax>
<description>Creates an instance of an arbitrary .NET class</description>	
	<discussion>CreateObject() creates an instance of an arbitrary .NET class without registering the assembly or class in the Xbasic type system. Once the instance is destroyed, the assembly is still loaded in the Common Language Runtime (CLR), but Xbasic will retain no knowledge of the type.
</discussion>
	
<sections>
	<section>
		<description>Create an instance of a type registered in the .NET global assembly cache (GAC).</description>
		<example><![CDATA[Dim Services as DotNet::Services
Dim Instance as P
 
' Create a StringBuilder instance with a capacity of 4096 chars.
If .not. Services.CreateObject(Instance, "System.Text.StringBuilder", \
        null_value((, 4096( 
    UI_Msg_Box("Error creating StringBuilder instance", \
        Services.CallResult.Text(
End If]]></example>
	</section>
	
</sections>	
<see>
	<ref>.NET Framework Support in Alpha Anywhere</ref>
	<ref>DotNet::AssemblyReference</ref>
	<ref>DotNet::Services</ref>
	<ref>CallStaticFunction Method</ref>
	<ref>ConstructGenericTypeName Method</ref>
	<ref>GetStaticProperty Method</ref>
	<ref>SetStaticProperty Method</ref>
	<ref>RegisterClass Method</ref>
	<ref>RegisterAssembly Method</ref>
	<ref>RegisterNamespace Method</ref>
	<ref>GenerateWebServiceClientFromURL Method</ref>
	<ref>GenerateWebServiceClientFromWSDL Method</ref>
	<ref>Preloaded .NET Classes </ref>
	<ref>Writing Xbasic wrapper classes for .NET classes </ref>
	<ref>DotNetPath Function</ref>
	<ref>DotNet Examples </ref>
</see>	
	
</page>