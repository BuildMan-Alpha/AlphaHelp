<page>
	<topic>SQL::Schema Object</topic>
	<properties>
		<property generated="true">
			<name>XML</name>
			<type>C</type>
			<description>
Type: "C", 
 
Mode: "RW", 
 
The schema in XML format.
 </description>
		</property>
		<property generated="true">
			<name>Name</name>
			<type>C</type>
			<description>
Type: "C", 
 
Mode: "R", 
 
The unique name of the table. Note: The table must be unique for the owner, but may not be globally unique.
 </description>
		</property>
		<property generated="true">
			<name>NativeAPI</name>
			<type>C</type>
			<description>
Type: "C", 
 
Mode: "R",
 
The name of the API active when this object was created.
 </description>
		</property>
		<property generated="true">
			<name>NativeSyntax</name>
			<type>C</type>
			<description>
Type: "C",
 
Mode: "R",
 
The name of the syntax at the time the object was created.
 </description>
		</property>
		<property generated="true">
			<name>Comment</name>
			<type>C</type>
			<description>
Type: "C",
 
Mode: "R",
 
The comment stored for the table (if the database supports it).
 </description>
		</property>
		<property generated="true">
			<name>Owner</name>
			<type>C</type>
			<description>
Type: "C", 
 
Mode: "R", 
 
The SQL database user or group that owns the table.
 </description>
		</property>
		<property generated="true">
			<name>Catalog</name>
			<type>C</type>
			<description>Type: "C", String Catalog property</description>
		</property>
		<property generated="true">
			<name>Schema</name>
			<type>C</type>
			<description>Type: "C", String Schema property</description>
		</property>
		<property generated="true">
			<name>Table</name>
			<type></type>
			<description>
Type: "P",
 
Type: "R",
 
An array of table ( SQL::TableInfo ) definitions.
 </description>
		</property>
		<property generated="true">
			<name>TableInDependencyOrder</name>
			<type></type>
			<description>
Type: "P",
 
Type: "R", 
 
An array of table ( SQL::TableInfo ) definitions ordered from the top of the dependency hierarchy.
 </description>
		</property>
		<property generated="true">
			<name>CallResult</name>
			<type></type>
			<description>CallResult property</description>
		</property>
	</properties>
	<methods>
		<methodref generated="true">
			<name>Clear</name>
			<ref>Clear</ref>
			<description>Clear out existing entries.</description>
		</methodref>
		<methodref generated="true">
			<name>CreateTables</name>
			<ref>CreateTables</ref>
			<description>Creates all tables in the schema in the database identified by the connection optionally dropping existing tables.</description>
		</methodref>
		<methodref generated="true">
			<name>DeleteTable</name>
			<ref>DeleteTable</ref>
			<description>Delete a Table.</description>
		</methodref>
		<methodref generated="true">
			<name>DropTables</name>
			<ref>DropTables</ref>
			<description>Drops all tables in the schema from the database.</description>
		</methodref>
		<methodref generated="true">
			<name>GenerateCreateScript</name>
			<ref>GenerateCreateScript</ref>
			<description>Generate a script to create the tables in the schema.</description>
		</methodref>
		<methodref generated="true">
			<name>GenerateDropScript</name>
			<ref>GenerateDropScript</ref>
			<description>Generate a script to drop the tables in the schema.</description>
		</methodref>
		<methodref generated="true">
			<name>ListTables</name>
			<ref>ListTables</ref>
			<description>Return a list of tables for the current database.</description>
		</methodref>
		<methodref generated="true">
			<name>ListTablesWithTypes</name>
			<ref>ListTablesWithTypes</ref>
			<description><![CDATA[Return a list of tables for the current database suffixed with (<type>).]]></description>
		</methodref>
		<methodref generated="true">
			<name>LoadCurrentDBFDatabase</name>
			<ref>LoadCurrentDBFDatabase</ref>
			<description>Clear any current information and load the schema from the open DBF database.</description>
		</methodref>
		<methodref generated="true">
			<name>TableInDependencyOrderNumber</name>
			<ref>TableInDependencyOrderNumber</ref>
			<description>Get the index of a TableInDependencyOrder from the name.</description>
		</methodref>
		<methodref generated="true">
			<name>TableNumber</name>
			<ref>TableNumber</ref>
			<description>Get the index of a Table from the name.</description>
		</methodref>
		<methodref generated="true">
			<name>TablesReferencedBy</name>
			<ref>TablesReferencedBy</ref>
			<description>Generate a collection of tables referenced by this table.</description>
		</methodref>
		<methodref generated="true">
			<name>TablesReferencing</name>
			<ref>TablesReferencing</ref>
			<description>Generate a collection of tables that reference this table.</description>
		</methodref>
		<methodref generated="true">
			<name>ToExcel</name>
			<ref>ToExcel</ref>
			<description>Create an Excel 2003 workbook with a sheet for each table in the schema.</description>
		</methodref>
		<methodref generated="true">
			<name>UpdateStatistics</name>
			<ref>UpdateStatistics</ref>
			<description>Gather statistical information about the actual tables in the schema.</description>
		</methodref>
	</methods>
	
<description>A SQL::Schema object (a database description) is a container for one or more SQL::TableInfo objects (table descriptions).</description>
	
<sections><section><title>Discussion</title>

<description>Note : as of the writing of this help topic, it is impossible to DIM an array of objects based on a class. The following code sample shows a work-around.
This example creates an array containing five SQL::TableInfo objects.
</description>
<example><![CDATA[
dim ti as SQL::TableInfo
dim arr[5] as P
arr[1] = ti
for i = 2 to 5
    arr[i] = ti.clone()
next i
]]></example>


	</section>
	
<section>
<description>Note :The TableInDependencyOrder property lists all tables in the order they should be created and populated in copying them to a new database.
</description>

</section>
	
	
	
	</sections>
	
	
	<sections>
	<section><title>Example</title>
	<description>This example interactive window session shows how to use the sql::schema object and the tablesReferencing and tablesReferencedBy methods of the sql::schema object.
The connection string is pointing to a SQL Server version of Northwind. 
</description>
	<example><![CDATA[
dim cn as sql::connection 
 ?cn.open("::Name::nw")
 = .T.
 dim s as sql::Schema
 ?cn.GetSchema(s)
 = .T.

 ?s.TableNumber("customers")
 = 2
 dim tiCustomer as sql::TableInfo
 tiCustomers = s.table[2]
 r1 = s.TablesReferencedBy(tiCustomers)
 ?r1.table.count 
 = 0
 r2 = s.TablesReferencing(tiCustomers)
 ?r2.table.Count
 = 1
 ?r2.table1.name 
 = "Orders"
 dim tiOrders as sql::TableInfo 
 ?s.tableNumber("orders")
 = 5
 tiOrders = s.table[5]
 r3 = s.TablesReferencedBy(tiOrders)
 ?r3.Table.count 
 = 3
 ?r3.table[1].name 
 = "Customers"
 ?r3.table[2].name 
 = "Employees"
 ?r3.table[3].name 
 = "Shippers"
 r4 = s.TablesReferencing(tiOrders)
 ?r4.Table.count 
 = 1

 ?r4.table[1].name 
 = "Order Details"
	]]></example>
	
	
	</section>
	</sections>
	
	
	
	
	
	
   
	<see>
		<ref>SQL</ref>
	</see>
</page>