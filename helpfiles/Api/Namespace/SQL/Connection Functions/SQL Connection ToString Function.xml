<page>
   <topic>SQL::Connection::ToString Function</topic>
   <syntax>String as C = ToString(SQLStatement as C [, Arguments as SQL::Arguments][, RowsToCopy = -1 as N [, StartRow = 1 as N [, ColumnSeparator as C [,RowSeparator as C [, ColumnReferences as SQL::TableInfo [, UserContext as P]]]]]])</syntax>
   <arguments>
    <argument>
         <name>String</name>
         <description>The retrieved data.</description>
     </argument>
      <argument>
         <name>SQL::Connection</name>
         <description>A SQL::Connection object.
</description>
     </argument>
     
     
     
     
     <argument>
         <name>SQLStatement</name>
         <description>A SQL SELECT statement.
</description>
     </argument>
     <argument>
         <name> Arguments</name>
         <description>Optional. A SQL::Arguments object. One or more arguments to be resolved when the SELECT statement is executed.
</description>
     </argument>
     <argument>
         <name> RowsToCopy = -1</name>
         <description>Optional. Default = -1 (all). The number of rows to copy.
 </description>
     </argument>
     <argument>
         <name> StartRow = 1</name>
         <description>Optional. Default = 1 (first). The first row to copy.
 </description>
     </argument>
     <argument>
         <name> ColumnSeparator</name>
         <description>Optional. Default = " ". Characters to insert between columns.</description>
     </argument>
     <argument>
         <name>RowSeparator</name>
         <description>Optional. Default = CR-LF. Characters to insert between rows.</description>
     </argument>
     <argument>
         <name> ColumnReferences</name>
         <description>Optional. A SQL::TableInfo object. When data is formatted for a column in the result set: (1) if ReferenceColumns has a column with a matching name, that object will be used to format the data; (2) otherwise the ColumnInfo property of the result set is used to format the data.
</description>
     </argument>
     <argument>
         <name> UserContext</name>
         <description>Optional. The user context is passed into the evaluation of the expression when data is formatted.
</description>
     </argument>
   </arguments>
   <description>Fetch data to a string using a SQL query.</description>
   <discussion>
The ToString() method fetches data to a string using a SQL query.
   </discussion>
   <example><![CDATA[
dim conn as SQL::Connection
dim connString as C
dim query as C
query = "select firstname, lastname from customer where lastname > 'm'"
connString = "{A5API='Access', FileName='c:\program files\a5v8\mdbfiles\alphasports.mdb'}"
if .not. conn.open(connString)
    ui_msg_box("Error", conn.CallResult.text)
    end
end if
ui_msg_box("Results", conn.ToString(query))
conn.close()
]]></example>
   <sections>
       <section>
            <description>This example retrieves four rows of data, starting at the third row.
Note : Even though there are no arguments to pass, the following script DIMs and passes the args variable.
</description>
            <example><![CDATA[
dim conn as SQL::Connection
dim connString as C
dim query as C
dim args as SQL::Arguments
query = "select firstname, lastname from customer where lastname > 'm'"
connString = "{A5API='Access', FileName='c:\program files\a5v8\mdbfiles\alphasports.mdb'}"
if .not. conn.open(connString)
    ui_msg_box("Error", conn.CallResult.text)
    end
end if
ui_msg_box("Results", conn.ToString(query, args, 4, 3, "|", crlf()))
conn.close()
]]></example>
       </section>
   </sections>
   <see>
      <ref>SQL::Connection Object</ref>
   </see>
   <terms>arguments,column,defaults,expressions,function,insert,number,object,script,set,string,users</terms>
</page>