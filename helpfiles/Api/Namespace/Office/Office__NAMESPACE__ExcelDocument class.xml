<page>
	<topic>Office::ExcelDocument Class</topic>
	<properties>
		<property generated="true">
			<name>CallResult</name>
			<type></type>
			<description>CallResult property</description>
		</property>
		<property generated="true">
			<name>FileName</name>
			<type>C</type>
			<description>String FileName property</description>
		</property>
		<property generated="true">
			<name>ActiveSheetIndex</name>
			<type>N</type>
			<description>Numeric ActiveSheetIndex property</description>
		</property>
		<property generated="true">
			<name>ErrorMessage</name>
			<type>C</type>
			<description>String ErrorMessage property</description>
		</property>
		<property generated="true">
			<name>SheetCount</name>
			<type>N</type>
			<description>Numeric SheetCount property</description>
		</property>
		<property generated="true">
			<name>FormatCount</name>
			<type>N</type>
			<description>Numeric FormatCount property</description>
		</property>
		<property generated="true">
			<name>FontCount</name>
			<type>N</type>
			<description>Numeric FontCount property</description>
		</property>
	</properties>
	<methods>
		<method generated="true">
			<name>AddFont</name>
			<syntax>.AddFont as Office::Font ([InitialFont  as P])</syntax>
			<arguments>
				<argument>
					<name>InitialFont</name>
					<description>Pointer</description>
				</argument>
			</arguments>
			<description>Create a new font and add it to the document.
You can pass an existing font to copy its values into the new one.</description>
		</method>
		<method generated="true">
			<name>AddFormat</name>
			<syntax>.AddFormat as Office::Format ([InitialFormat  as P])</syntax>
			<arguments>
				<argument>
					<name>InitialFormat</name>
					<description>Pointer</description>
				</argument>
			</arguments>
			<description>Create a new format and add it to the document.  
You can pass an existing format to copy its values into the new one.</description>
		</method>
		<method generated="true">
			<name>AddPicture</name>
			<syntax>.AddPicture as N (FileName as C)</syntax>
			<arguments>
				<argument>
					<name>FileName</name>
					<description>Character</description>
				</argument>
			</arguments>
			<description>Add a new picture to the document from the file specified.
Formats supported include BMP, DIB, PNG, JPG and WMF 
Use the index value returned to reference the picture in other functions such as Office::Spreadsheet::SetPicture().</description>
		</method>
		<method generated="true">
			<name>AddSheet</name>
			<syntax>.AddSheet as Office::Spreadsheet ([Name as C])</syntax>
			<arguments>
				<argument>
					<name>Name</name>
					<description>Character</description>
				</argument>
			</arguments>
			<description>Add a new spreadsheet to the document assigning it the name provided.</description>
		</method>
		<method generated="true">
			<name>AddSheetFromDBF</name>
			<syntax>.AddSheetFromDBF as Office::Spreadsheet (Table as P, SheetName  as C [, IncludeHeadings  as L [, RowsToCopy  as N [, StartRow  as N [, ReferenceColumns  as P [, UserContext  as P]]]]])</syntax>
			<arguments>
				<argument>
					<name>Table</name>
					<description>Pointer</description>
				</argument>
				<argument>
					<name>SheetName</name>
					<description>Character</description>
				</argument>
				<argument>
					<name>IncludeHeadings</name>
					<description>Logical</description>
				</argument>
				<argument>
					<name>RowsToCopy</name>
					<description>Numeric</description>
				</argument>
				<argument>
					<name>StartRow</name>
					<description>Numeric</description>
				</argument>
				<argument>
					<name>ReferenceColumns</name>
					<description>Pointer</description>
				</argument>
				<argument>
					<name>UserContext</name>
					<description>Pointer</description>
				</argument>
			</arguments>
			<description>Create a new spreadsheet and add it to the document.
Add the data in the table.
Optionally include headings, select a range of rows and include 
a SQL::TableInfo and user context to handle advanced transformations.</description>
		</method>
		<method generated="true">
			<name>AddSheetFromResultSet</name>
			<syntax>.AddSheetFromResultSet as Office::Spreadsheet (ResultSet as P, SheetName  as C [, IncludeHeadings  as L [, RowsToCopy  as N [, StartRow  as N [, ReferenceColumns  as P [, UserContext  as P]]]]])</syntax>
			<arguments>
				<argument>
					<name>ResultSet</name>
					<description>Pointer</description>
				</argument>
				<argument>
					<name>SheetName</name>
					<description>Character</description>
				</argument>
				<argument>
					<name>IncludeHeadings</name>
					<description>Logical</description>
				</argument>
				<argument>
					<name>RowsToCopy</name>
					<description>Numeric</description>
				</argument>
				<argument>
					<name>StartRow</name>
					<description>Numeric</description>
				</argument>
				<argument>
					<name>ReferenceColumns</name>
					<description>Pointer</description>
				</argument>
				<argument>
					<name>UserContext</name>
					<description>Pointer</description>
				</argument>
			</arguments>
			<description>Create a new spreadsheet and add it to the document.
Add the data in the result set.
Optionally include headings, select a range of rows and include 
a SQL::TableInfo and user context to handle advanced transformations.</description>
		</method>
		<method generated="true">
			<name>Clear</name>
			<syntax>.Clear as V ()</syntax>
			<description>Reinitialize the Excel document as a new one.
Important Note: Be sure that you have saved any existing document data using Save or SaveToBlob() before calling this function.</description>
		</method>
		<method generated="true">
			<name>CopySheet</name>
			<syntax>.CopySheet as Office::Spreadsheet (Name as C, Index as N)</syntax>
			<arguments>
				<argument>
					<name>Name</name>
					<description>Character</description>
				</argument>
				<argument>
					<name>Index</name>
					<description>Numeric</description>
				</argument>
			</arguments>
			<description>Add a new spreadsheet to the document with the name specified by copying the contents of the sheet at index N.</description>
		</method>
		<method generated="true">
			<name>CustomNumericFormat</name>
			<syntax>.CustomNumericFormat as C (Index as N)</syntax>
			<arguments>
				<argument>
					<name>Index</name>
					<description>Numeric</description>
				</argument>
			</arguments>
			<description>Get the format expression for the custom numeric format at the index specified.</description>
		</method>
		<method generated="true">
			<name>DefaultFont</name>
			<syntax>.DefaultFont as L (FontName as C, FontSize as N)</syntax>
			<arguments>
				<argument>
					<name>FontName</name>
					<description>Character</description>
				</argument>
				<argument>
					<name>FontSize</name>
					<description>Numeric</description>
				</argument>
			</arguments>
			<description>Get the default font name and size for this workbook.</description>
		</method>
		<method generated="true">
			<name>DeleteSheet</name>
			<syntax>.DeleteSheet as L (Index as N)</syntax>
			<arguments>
				<argument>
					<name>Index</name>
					<description>Numeric</description>
				</argument>
			</arguments>
			<description>Delete the sheet at the index specified from the Excel document.</description>
		</method>
		<method generated="true">
			<name>FindSheet</name>
			<syntax>.FindSheet as L (Sheet as P, Name as C)</syntax>
			<arguments>
				<argument>
					<name>Sheet</name>
					<description>Pointer</description>
				</argument>
				<argument>
					<name>Name</name>
					<description>Character</description>
				</argument>
			</arguments>
			<description>Get a spreadsheet by name.</description>
		</method>
		<method generated="true">
			<name>GetFont</name>
			<syntax>.GetFont as Office::Font (Index as N)</syntax>
			<arguments>
				<argument>
					<name>Index</name>
					<description>Numeric</description>
				</argument>
			</arguments>
			<description>Get the font indexed by Index.  Index must be a value between 1 and the number of fonts returned by the FontCount property.</description>
		</method>
		<method generated="true">
			<name>GetFormat</name>
			<syntax>.GetFormat as Office::Format (Index as N)</syntax>
			<arguments>
				<argument>
					<name>Index</name>
					<description>Numeric</description>
				</argument>
			</arguments>
			<description>Get the format indexed by Index.  Index must be a value between 1 and the number of formats returned by the FormatCount property.</description>
		</method>
		<method generated="true">
			<name>GetSheet</name>
			<syntax>.GetSheet as Office::Spreadsheet (Index as N)</syntax>
			<arguments>
				<argument>
					<name>Index</name>
					<description>Numeric</description>
				</argument>
			</arguments>
			<description>Get the spreadsheet at the index specified.</description>
		</method>
		<method generated="true">
			<name>Load</name>
			<syntax>.Load as L (FileName as C)</syntax>
			<arguments>
				<argument>
					<name>FileName</name>
					<description>Character</description>
				</argument>
			</arguments>
			<description>Load the contents of an existing Excel (.xls) file.</description>
		</method>
		<method generated="true">
			<name>LoadFromBlob</name>
			<syntax>.LoadFromBlob as L (Data as B)</syntax>
			<arguments>
				<argument>
					<name>Data</name>
					<description>B</description>
				</argument>
			</arguments>
			<description>Load the Excel Document from a memory image of an Excel (.xls) file.</description>
		</method>
		<method generated="true">
			<name>Save</name>
			<syntax>.Save as L (FileName as C)</syntax>
			<arguments>
				<argument>
					<name>FileName</name>
					<description>Character</description>
				</argument>
			</arguments>
			<description>Save the document to an Excel 2003 (.xls) file.</description>
		</method>
		<method generated="true">
			<name>SaveToBlob</name>
			<syntax>.SaveToBlob as L (Data as B)</syntax>
			<arguments>
				<argument>
					<name>Data</name>
					<description>B</description>
				</argument>
			</arguments>
			<description>Save the document to a memory image of an Excel 2003 (.xls) file.</description>
		</method>
		<method generated="true">
			<name>SetActiveSheet</name>
			<syntax>.SetActiveSheet as V (Index as N)</syntax>
			<arguments>
				<argument>
					<name>Index</name>
					<description>Numeric</description>
				</argument>
			</arguments>
			<description>Set the index of the spreadsheet that is considered active/current.</description>
		</method>
		<method generated="true">
			<name>SetDefaultFont</name>
			<syntax>.SetDefaultFont as V (FontName as C, FontSize as N)</syntax>
			<arguments>
				<argument>
					<name>FontName</name>
					<description>Character</description>
				</argument>
				<argument>
					<name>FontSize</name>
					<description>Numeric</description>
				</argument>
			</arguments>
			<description>Set a default font name and size for this workbook.</description>
		</method>
		<method generated="true">
			<name>SetLocale</name>
			<syntax>.SetLocale as V (Locale as C)</syntax>
			<arguments>
				<argument>
					<name>Locale</name>
					<description>Character</description>
				</argument>
			</arguments>
			<description>Set the locale name for the document.</description>
		</method>
	</methods>
  
	<see>
		<ref>Office</ref>
	</see>
</page>