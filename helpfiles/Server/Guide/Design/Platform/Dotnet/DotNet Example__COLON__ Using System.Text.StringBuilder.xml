<page>
	<topic>DotNet Example: Using System.Text.StringBuilder</topic>
	<sections>
		<section>
			<description>The script below shows an interactive window session in which the .NET type System.Text.StringBuilder is mapped into the XBasic type system.
</description>
			<note>This example is more demonstrative than useful. Although StringBuilder is an efficient way to build large strings in .NET applications, calling into .NET from XBasic is a fairly expensive operation and using StringBuilder this way would come at a cost.</note>
			
		</section>
<section>
	<description>We do not have to specify an assembly for System.Text.StringBuilder when we register the class because it is part of an assembly that has already been loaded into memory. In fact, we do not really have to go to the trouble of registering the StringBuilder class at all, as it is pre-loaded along with most of the core .NET System namespace when Alpha Anywhere starts up.
</description>
	<example><![CDATA[' Register StringBuilder as MyNS::MyS
' (for demonstration purposes)
dim sv as DotNet::Services
?sv.registerclass("MyNS", "MyS", "System.Text.StringBuilder")
= .T.
 
dim s as MyNS::MyS
 
'NOTE: All of the above could actually be replaced by:
'dim s as System::Text::StringBuilder
 
' Read the Capacity property
'
?s.Capacity
= 16
 
' Set the Capacity property and read it back to be sure
' (not required in practice except in tight memory situations)
s.capacity = 44
?s.Capacity
= 44
 
' Add a string value
'
s.append("Hello")
 
'
' Ensure capacity compares the value you send with the current capacity.
' If you need more space, the capacity will be changed.
' (not required in practice except in tight memory situations)
?s.ensurecapacity(66)
= 66
 
' The resulting capacity is returned.
' (not required in practice except in tight memory situations)
'
s.remove(1,2)
 
' Remove two characters starting with the second one.
' .NET functions are zero based.
'
?s.tostring()
= "Hlo"
 
'
'
s.insert(1, "el")
?s.tostring()
= "Hello"
 
' Note: StringBuilder is an object.  
' To get the string value, call the function ToString()
'
'
s.append("Hello")
s.Replace(" Bob", "Bob")
?s.tostring()
= "Fred"]]></example>
</section>		
		
	</sections>
<see>

<ref>.NET Framework Support in Alpha Anywhere </ref>
<ref>DotNet::AssemblyReference</ref>
<ref>DotNet::Services</ref>
<ref>CreateObject Method</ref>
<ref>CallStaticFunction Method</ref>
<ref>ConstructGenericTypeName Method</ref>
<ref>GetStaticProperty Method</ref>
<ref>SetStaticProperty Method</ref>
<ref>RegisterClass Method</ref>
<ref>RegisterAssembly Method</ref>
<ref>RegisterNamespace Method</ref>
<ref>GenerateWebServiceClientFromURL Method</ref>
<ref>GenerateWebServiceClientFromWSDL Method</ref>
<ref>Preloaded .NET Classes </ref>
<ref>Writing Xbasic wrapper classes for .NET classes </ref>
<ref>DotNetPath Function</ref>
<ref>DotNet Examples 	</ref>
	
	
</see>
	
	
</page>