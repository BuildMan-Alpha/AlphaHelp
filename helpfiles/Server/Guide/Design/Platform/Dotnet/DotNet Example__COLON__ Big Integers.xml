<page>
	<topic>DotNet Example: Big Integers</topic>
	<description>This sample demonstrates loading, registering and using a .NET class from a DLL in the standard location. It also demonstrates using a constructor to load a value into a .NET class when it is created.

 Xbasic lacks native support for infinite-precision integer arithmetic, but the .NET Framework has it. Now you can perform calculations with arbitrarily long integers from Alpha Anywhere, using the .NET System.Numerics.BigInteger class. (This sample may look suspiciously similar to Writing Xbasic wrapper classes for .NET classes. Don't let that distract you.)

 Copy the following script, paste it into Alpha Anywhere, and run it.</description>
	<sections>
		<section>
			
			
		
		<example>
			<![CDATA[dim Sv as DotNet::Services
dim assy as DotNet::AssemblyReference
assy.filename = DotNetPath()+"System.Numerics.dll"
dim flag as L = Sv.RegisterClass("Numerics", "BigInteger", "System.Numerics.BigInteger", assy)
if .NOT. flag then
    ui_msg_box("BigInteger Demo","BigInteger class not registered")
    end 
end if
dim ctr as n
dim Result as C
dim BigInt As Numerics::BigInteger
Base = new Numerics::BigInteger(3040506)
dim ans(0..10) as c
For ctr = 0 To 10
  ans(ctr) = BigInt.Pow(Base, ctr).ToString()
  Result = Result + ans(ctr) + crlf()
next
showvar(Result)]]>
			
		</example>
		
		
		
		
	</section>
	<section>
	<description>The result will be:</description>	
		<figure><link>images/bigintSampleResult.png</link></figure>
	</section>
	<section>
		<description>Note that we have been careful about keeping the BigInteger values in BigInteger variables; to see the results in Alpha Anywhere, we converted to string form using the .NET Framework, BigInt.Pow(Base, ctr).ToString().
Also note the use of the new keyword to create an instance of the Numerics::BigInteger class and set an initial value in a single statement. This syntax is called using a constructor.
We had to specify the file path of the DLL for the System.Numerics namespace because its assembly is not preloaded.
</description>
		
	</section>
	</sections>
	<see>
		
<ref href="http://msdn.microsoft.com/en-us/library/system.numerics.biginteger.aspx">MSDN documentation on the BigInteger class</ref>
<ref>.NET Framework Support in Alpha Anywhere </ref>
<ref>::AssemblyReference</ref>
<ref>DotNet::Services</ref>
<ref href="/Api/Namespace/DotNet/CreateObject Method.html">CreateObject Method</ref>
<ref href="/Api/Namespace/DotNet/CallStaticFunction Method.html">CallStaticFunction Method</ref>
<ref href="/Api/Namespace/DotNet/ConstructGenericTypeName Method.html">ConstructGenericTypeName Method</ref>
<ref href="/Api/Namespace/DotNet/GetStaticProperty Method.html">GetStaticProperty Method</ref>
<ref href="/Server/Guide/Design/Platform/Dotnet/SetStaticProperty Method.html">SetStaticProperty Method</ref>
<ref href="/Api/Namespace/DotNet/RegisterClass Method.html">RegisterClass Method</ref>
<ref href="/Api/Namespace/DotNet/RegisterAssembly Method.html">RegisterAssembly Method</ref>
<ref href="/Api/Namespace/DotNet/RegisterNamespace Method.html">RegisterNamespace Method</ref>
<ref href="/Api/Namespace/DotNet/GenerateWebServiceClientFromURL Method.html">GenerateWebServiceClientFromURL Method</ref>
<ref href="/Api/Namespace/DotNet/GenerateWebServiceClientFromWSDL Method.html">GenerateWebServiceClientFromWSDL Method</ref>
<ref href="/Server/Guide/Design/Platform/Dotnet/Preloaded .NET Classes.html">Preloaded .NET Classes </ref>
<ref href="/Server/Guide/Design/Platform/Xbasic/Writing Xbasic Wrapper Classes for .NET classes.html">Writing Xbasic wrapper classes for .NET classes </ref>
<ref href="/Api/Namespace/DotNet/DotNetPath Function.xml">DotNetPath Function</ref>
<ref>DotNet Examples 		</ref>
		
		
	</see>
	
</page>