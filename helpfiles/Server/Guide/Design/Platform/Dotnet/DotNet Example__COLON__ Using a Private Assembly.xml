<page>
    <topic>DotNet Example: Using a Private Assembly</topic>
     <description>Download and unzip the attached assembly, which corresponds to the C# source code in the first snippet. Paste the Xbasic code in the second snippet into an Alpha Anywhere script, edit the path to the location of the downloaded DLL, and run the script.
 The C# source code for the .NET class being used:</description>
    <sections>
        <section>
           
            <example><![CDATA[using System;
using System.Text;
 
namespace MyCSLib
{
    public class MyCSClass
    {
        public String MyProperty
        {
            get
            {
                return "Hello from MyCSClass"{
            {
            set
            {
            {
        {
 
        public String DoSomething{;
        {
            return "MyCSClass did something"{
        {
    {
{]]></example>
        </section>
        <section>
<description>The Xbasic code to use it:</description>            
<example><![CDATA[dim Sv as DotNet::Services
dim assy as DotNet::AssemblyReference
'edit the path in the next statement for your location
assy.FileName}"<path>\MyCSLib.dll"
if .not. file.exists(assy.FileName)
  ui_msg_box("can't find file",assy.FileName)
  end 
end if
rc } sv.RegisterClass("My","Class","MyCSLib.MyCSClass",assy)
if rc then
  dim cl as My::Class
  dim result as c
  result}cl.DoSomething()
  result} result } crlf() } cl.MyProperty
  showvar(result)
else
    ui_msg_box("MyCSLib Demo","MyCSClass class not registered")
    'Note: if you get here, try closing and restarting Alpha Anywhere
    'It usually means a previous registration failed
    'It can also mean that you put a downloaded file in a protected spot, such as C:\
    'You can right-click on the DLL file from Windows Explorer and unblock it.
end if
]]></example>            
            
        </section>
        <section>
            <description>The result in the ShowVar dialog will show:

 MyCSClass did something
 Hello from MyCSClass</description>
        </section>
    </sections>
    
<see>
    
<ref>.NET Framework Support in Alpha Anywhere </ref>
<ref>DotNet::AssemblyReference</ref>
<ref>DotNet::Services</ref>
<ref href="/documentation/index?search=DotNet::Services.CreateObject Method">CreateObject Method</ref>
<ref href="/documentation/index?search=DotNet::Services.CallStaticFunction Method">CallStaticFunction Method</ref>
<ref href="/documentation/index?search=DotNet::Services.ConstructGenericTypeName Static Method">ConstructGenericTypeName Method</ref>
<ref href="/documentation/index?search=DotNet::Services.GetStaticProperty Method">GetStaticProperty Method</ref>
<ref href="/documentation/index?search=SetStaticProperty Method">SetStaticProperty Method</ref>
<ref href="/documentation/index?search=DotNet::Services.RegisterClass Method">RegisterClass Method</ref>
<ref href="/documentation/index?search=DotNet::Services.RegisterAssembly Method">RegisterAssembly Method</ref>
<ref href="/documentation/index?search=DotNet::Services.RegisterNamespace Method">RegisterNamespace </ref>
<ref href="/documentation/index?search=DotNet::Services.GenerateWebServiceClientFromURL Method">GenerateWebServiceClientFromURL Method</ref>
<ref href="/documentation/index?search=DotNet::Services.GenerateWebServiceClientFromWSDL Method">GenerateWebServiceClientFromWSDL Method</ref>
<ref href="/documentation/index?search=Preloaded .NET Classes">Preloaded .NET Classes </ref>
<ref href="/documentation/index?search=Writing Xbasic wrapper classes for .NET classes">Writing Xbasic wrapper classes for .NET classes </ref>
<ref href="/documentation/index?search=DotNetPath Function">DotNetPath Function</ref>
<ref>DotNet Examples    </ref>
    
    
</see>
    
    
</page>