<page>
	<shortlink>server xb Miscellaneous Xbasic Array Improvements</shortlink>
	<topic>Miscellaneous Xbasic Array Improvements</topic>
	<description>Implicit array declaration, dynamic array sizing, appending entries to an array, initialize array from table</description>
	
<sections>
<section>
	<title>Implicit Array Declaration</title>
	<description>When you use the [] syntax to set a property array, you do not need to have dimmed an array in advance. For example, as shown in this Interactive window session:</description>
	<example><![CDATA[b[] = "alpha"
b[] = "beta"
?b.size()
= 2
]]></example>
</section>	

<section>
	
	<description>This example uses a property array.
</description>
	<example><![CDATA[a.array[].name = "Alpha"
a.array[..].city = "Burlington"
a.array[].name = "Microsoft"
a.array[..].city = "Seattle"
?a.array.size()
= 2
?a.array.dump_properties("Name|city")
= Alpha|Burlington
Microsoft|Seattle
]]></example>
</section>	
	
	
<section>
	<title>Dynamic Array Sizing</title>
	<description>When you delete entries from an array, the array size does not change. With dynamic array sizing turned on, deleting an entry from an array will resize the array. The following Interactive window session demonstrates:
</description>
	<example><![CDATA[dim array[3] as c
array[1] = "alpha"
array[2] = "beta"
array[3] = "gamma"
?array.size()
=3
array.delete(2,1)
?array.dump()
= alpha
gamma
?array.size()
=3 ]]></example>
</section>	
	
	
<section>
	
	<description>Now, repeating this exercise, but turning on the array's 'dynamic' property:
</description>
	<example><![CDATA[dim array[3] as c
array.set_dynamic(.t.)
array[1] = "alpha"
array[2] = "beta"
array[3] = "gamma"
?array.size()
=3
array.delete(2,1)
?array.dump()
= alpha
gamma
?array.size()
=2
 ]]></example>
</section>	
	
	
<section>
	
	<description><![CDATA[The <array>.set_dynamic(flag) method can be used to turn on/off the dynamic sizing property of an array. The <array>.get_dynamic() method can be used to determine the state of an array's dynamic sizing property.
If you dim an array with a size of 0 (and then populate the array using the [] syntax), the dynamic sizing property is automatically assumed to be set to True. For example:
]]></description>
	<example><![CDATA[dim array[0] as p
array[] = "alpha"
array[] = "beta"
?array.size()
=2
array.delete(2,1)
?array.size()
=1]]></example>
</section>	

	
<section>
	
	<description>This shows that an array dimmed with an initial size of 0 defaults to dynamic properties on, whereas
an array dimmed with non-zero size defaults to dynamic properties off.

</description>
	<example><![CDATA[dim arr1[0] as p
dim arr2[1] as p
? arr1.get_dynamic()
= .T.
? arr2.get_dynamic()
= .F. ]]></example>
</section>	

	
<section>
	<title>Appending Entries to An Array</title>
	<description><![CDATA[The new <array>.append() method makes it easier to add new entries to an array. <array>.append() adds a new entry to the array and returns the index of the new array slot. For example:]]></description>
	<example><![CDATA[ ]]></example>
</section>

	
<section>
	<title>Initialize Array From Table
</title>
	<description><![CDATA[The <array>.initialize_from_table() method now has two new parameters that allow you to optionally append to an existing array (instead of always initializing it), and to specify a list of fieldnames (rather than populating the array with every field in the source table).
Also, it is no longer necessary to dim the array with the correct size before you execute the .initialize_from_table() method - you can dim it as a 0 size array and the array will be resized correctly based on the number of records that satisfy your filter criteria.
For example, here is an Interactive window session (in the sample Alphasports database):
]]></description>
	<example><![CDATA['Start with empty array (automatically dynamic)
dim arr0 as p
'Pull in NY records from Customer table...
arr.initialize_from_table("customer","bill_state_region='NY'","",.f.)
?arr.size()
= 8


'Now, pull in MA records from the Customer table. Notice that the append flag is set to TRUE so that records are added to the end of the array.
arr.initialize_from_table("customer","bill_state_region='MA'","",.t.)
? arr.size()
= 29

In this example, only selected columns are loaded into the array.

dim fieldList as c 
fieldList = <<%txt%
CUSTOMER_ID
COMPANY
FIRSTNAME
LASTNAME
%txt

dim arrlim[0] as p
arrlim.initialize_from_table("customer","bill_state_region='NY'","",.f.,fieldlist)
? arrlim2
= COMPANY = "Alpha Software New York"
CUSTOMER_ID = "00000010"
FIRSTNAME = "Bryan"
LASTNAME = "Bloomberg"

 ]]></example>
</section>

</sections>
	
	
</page>