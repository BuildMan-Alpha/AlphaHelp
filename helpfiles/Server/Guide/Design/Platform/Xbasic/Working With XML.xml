<page>
	<shortlink>server xb Xbasic Working With XML</shortlink>
	<topic>Xbasic - Working With XML</topic>
	<description>Some ways to work with XML in Xbasic</description>
	
<sections>
<section>
	<cases>
		<case>
			<title>*property_from_xml()</title>
			<description>takes a new optional flag to parse the XML and generate the special '__a5_elementContent' and '__A5_Xml_manifest' properties where needed (see below)</description>
		</case>
		<case>
			<title>*property_to_xml()</title>
			<description>can consume the special '__a5_elementContent' and '__A5_Xml_manifest' properties when generating XML from an Xbasic dot variable.</description>
		</case>
		
	</cases>
	
	
	
</section>	
<section>
	
	<title>showXML() function</title>
	<description>Consider the following very simple snippet of XML.
</description>
	<example><![CDATA[xml = <<%txt%

    Fred Smith

%txt%]]></example>
	
</section>
<section>
	<description>If you view this XML using the XML viewer function (showXML()), you will see this:
</description>
	<figure><link>images/parseXML1.jpg</link></figure>
</section>
<section>
	<description>You will notice that the XML has an attribute called 'city-name'. This is not a valid Xbasic variable name, so the attribute has to be renamed (to 'city_name'). In order that the *property_to_xml() function can get back to the same XML that was originally parsed, a list of all of the attribute names that were changed is kept in the special __A5_Xml_Manifest property.
</description>
	<figure><link>images/parseXML2.jpg</link></figure>
</section>
<section>
	<description>Also, you will notice that in the XML snippet, the 'name' element has a value and also it has attributes. The attribute values are shown as properties and the element value is shown using the special property name '__A5_elementContent'.

Here is how you can parse the above XML into an Xbasic dot variable:
</description>
	<example><![CDATA[delete p 
dim p as p
'set the optional 3rd flag to .t. to use the special properties
*property_from_xml(xml,p,.t.)


'convert the dot variable into a script so we can 'see' what's in the variable
?*variable_to_script(p)
= DIM name as P
DIM name.city_name as C = "boston"
DIM name.__A5_elementContent as C = <<%str%

Fred Smith
%str%
DIM __A5_Xml_Manifest as C = <<%str%
@Mapping:
city_name=city-name%str%

'now, go back to XML
?*property_to_xml(p,"")

= 
    Fred Smith
]]></example>
</section>
<section>
	<description>Notice how this is a perfect 'round-trip'! The generated XML is the same as the initial XML that was parsed. Now, try the above exercise without using the new optional flag on the *property_to_xml() function
</description>
	<example><![CDATA[delete p 
dim p as p
*property_from_xml(xml,p,.f.)


'convert the dot variable into a script so we can 'see' what's in the variable
?*variable_to_script(p)
= DIM name as P
DIM name.city_name as C = "boston"]]></example>
</section>
<section>
	<description>Notice how the Xbasic dot variable only has the value of the attribute. It does NOT have the value of the element!
</description>
</section>
</sections>	
	
	
	
	
	
</page>