<page>
	<topic>Parameters that Can be Passed to Global Functions</topic>
<sections>
	<section>
		<description>You can pass any Alpha Anywhere variable type to a Global Function. This includes variables of type:</description>
		<cases>
			<case>
				<description>C (character)</description>
			</case>
			<case>
				<description>D (date)</description>
			</case>
			<case>
				<description>N (numeric)</description>
			</case>
			<case>
				<description>L (logical)</description>
			</case>
			<case>
				<description>T (time)</description>
			</case>
			<case>
				<description>B (blob - binary large object)</description>
			</case>
			<case>
				<description>P (pointer)</description>
			</case>
			<case>
				<description>U (collection)</description>
			</case>
				<case>
				<description>F (function) -the name of another global function.</description>
			</case>
		</cases>
		
		<note>You can only pass in the name of a user defined Global function. You can not pass in the name of built-in Alpha Anywhere function).</note>
	</section>

<section>
	<description>Passing in a function name is useful when you want to create a function that uses a different function internally depending on a parameter that was passed to it.
For example:
</description>
	<example><![CDATA[function get_left as C (string as C, length as N)
    Get_left = left(string,length)
end function
function get_right as C (string as C, length as N)
    Get_right = right(string,length)
end function
function get_string as C (string as C, length as N, function as f)
    Get_string = function(string,length)
end function ]]></example>
</section>

<section>
	<description>If you called this function using the command, get_string("now is the time,3, get_left), it would return the left most 3 characters of the string, (using the user-defined get_left() function).</description>
	<example><![CDATA[? get_string("now is the time",3,get_right)
]]></example>
</section>


<section>
	<description>If you want to pass in a variable whose type you do not know in advance, you can pass the variable using the "as A" declaration. Then, in the body of your function, you can test the variable's type.</description>
	<example><![CDATA[function what_type as C (input as a)
    What_type = typeof(input)
end function]]></example>
</section>


<section>
	<description>Use the pointer type when you want to pass in multiple variables at once, and return multiple variables. For example:</description>
	<example><![CDATA[function adjust as P (who as P)
    Who.firstname= upper(who.firstname)
    Who.lastname = upper(who.lastname)
    Who.salary = who.salary*1.1
    Adjust = who
end function]]></example>
</section>


<section>
	<description>Now, test out the function :</description>
	<example><![CDATA[dim person as P
Person.firstname = "Fred"
Person.lastname = "Thomas"
Person.salary = 35500
X = adjust(person)
? x.salary
= 39050.000000
? person.salary
= 39050.000000 ]]></example>
</section>

<section>
	<description>To reference an array in a function, use the pointer type.  For example:</description>
	<example><![CDATA[function capitalize as P (input_array as P)
    Size = input_array.size()
    For I = 1 to size
        Input_arrayI = upper(input_arrayI )
    Next it
    Capitalize = input_array
end function]]></example>
</section>


<section>
	<description>Now, test out the function :</description>
	<example><![CDATA[dim cities5 as C
Cities.initialize(<<%a%
Boston
New york
Los angeles
London
Madrid
%a%)
capitalize(cities)
? cities
= 1 = "BOSTON"
2 = "NEW YORK"
3 = "LOS ANGELES"
4 = "LONDON"
5 = "MADRID" ]]></example>
</section>


</sections>	
<see>
	<ref>How to Define a Global Function</ref>
	<ref>Global Scripts</ref>
	<ref>Passing Variables by Reference</ref>
</see>	
	
	
	
</page>