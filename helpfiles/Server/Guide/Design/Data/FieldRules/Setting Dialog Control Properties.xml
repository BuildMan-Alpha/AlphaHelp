<page>
	<topic>Setting Dialog Control Properties</topic>
	<sections>
		<section>
			<description>Web publishing applications only. Select each control in the Control Types list to display its Control Properties menu. There are many optional properties for each control. The default values for these properties produce a useable starting configuration for your dialog. This means that you can largely ignore these optional properties when you are learning to build dialogs or you expect to gradually refine your design in later revisions.
A dialog component has few requirements. You are free to add and format controls (of any type) as you wish.
The ((|#Data_Type|Data Type)) setting informs the page how to validate input to a control. It does not affect the type of data generated by a control, which is always "character" data.
</description>
			
		</section>
<section>
	<title>Select the Control Type</title>
	<description>The types of controls that you can place on a dialog are:</description>
	<cases>
		<case>
			<description><![CDATA[((|#AdvancedButton_Properties|Advanced button)) - a free form button that can set a variable's value or run a script]]></description>
		</case>
		<case>
			<description><![CDATA[Blurb - a static text control that does not have a heading]]></description>
		</case>
		<case>
			<description><![CDATA[((|#Calendar_Properties|Calendar)) a monthly calendar]]></description>
		</case>
		<case>
			<description><![CDATA[((|#CheckBox_Properties|Check box)) - allowing a selection from a list of values]]></description>
		</case>
		<case>
			<description><![CDATA[((|#Custom_Control_Properties|Custom)) - allows you to define the content of the dialog cell with Xbasic and HTML]]></description>
		</case>
		<case>
			<description><![CDATA[((|#DropDownBox_Properties|Drop Down Box)) - a list box that may appear as a list or combo box, and allowing a selection from a list of values, which is often retrieved from a table]]></description>
		</case>
		<case>
			<description><![CDATA[Heading - a static text control without a heading that spans the width of the dialog]]></description>
		</case>
		<case>
			<description><![CDATA[((|#Hidden_Control_Properties|Hidden)) - a mechanism for creating and storing variables in the dialog component]]></description>
		</case>
		<case>
			<description><![CDATA[((|#Label_Properties1|Label)) - a read-only control suitable for character, numeric, and date/time data]]></description>
		</case>
		<case>
			<description><![CDATA[((|#Image_Properties|Image)) - displaying either embedded or linked images]]></description>
		</case>
		<case>
			<description><![CDATA[((|#Link_Properties|Link)) - a hyperlink, which may open another page or select a record to display]]></description>
		</case>
		<case>
			<description><![CDATA[((|#Lookup_Properties|Lookup)) - a variation on a textbox or textarea control that retrieves one or more field values from a grid]]></description>
		</case>
		<case>
			<description><![CDATA[((|#RadioButton_Properties|Radio button)) - allowing a selection from a list of values]]></description>
		</case>
		<case>
			<description><![CDATA[((|#Tab_Control_and_Tab_Pane_Properties|Tab Control)) - a control that allows you to selectively display and hide other controls]]></description>
		</case>
		<case>
			<description><![CDATA[((|#TextArea_Properties|Text area)) - similar to a text box, but with multiple lines]]></description>
		</case>
		<case>
			<description><![CDATA[((|#TextBox_Properties|Text box)) - an editable control suitable for character, numeric, and date/time data]]></description>
		</case>

	</cases>
</section>
<section>
	<list>
		<item>
			<name-title>Purpose</name-title>
			<description-title>Action</description-title>
		</item>
		<item>
			<name>Date field</name>
			<description>
 
To create a control appropriate for s a date, set the control type to "textbox" and then modify Date picker properties.
 </description>
		</item>
		<item>
			<name>Image or image reference field
</name>
			<description>
 
To display a picture, set the control type to "Image".
 </description>
		</item>
		<item>
			<name>True/False choice
</name>
			<description>Set the control type of the field to check box and define its Choice properties.
</description>
		</item>
		<item>
			<name>Short list of choices
</name>
			<description>Set the control type of the field to radio button and define its Choice properties. Choices can be static or dynamic (retrieved from a table).
</description>
		</item>
		<item>
			<name>Long list of choices
</name>
			<description>Set the control type of the field to drop down list box and define its Choice properties. Choices can be static or dynamic (retrieved from a table).
</description>
		</item>
			
		
	</list>
</section>	
	
	
	
<section>
	<title>Select the appropriate display format</title>
	<description>An In-Line style overrides the formatting of the cascading style sheet. If you wanted the text to be bolded, or in a different font, point size, or color, this is where you would define the formatting.
You may also want to define validation rules to improve the quality of user input.
You may want to allow only certain users to see a field. To do this set a minimum user security level required before the field will display.
</description>
</section>	
	
<section>
	<title>Control Settings</title>
	<description>The following properties are available for all control types.</description>
	<cases>
		<case>
			<title>Name</title>
			<description>Specifies the name of the control, which must be unique within the form.</description>
			<example><![CDATA[tmpl.Variable_Info
.varname as C]]></example>
		</case>
		
		<case>
			<title>Scope</title>
			<description>Sets the "visibility" of the variable set by the control. The options are:</description>
			<cases>
				<case>
					<description>"Local" - Local variables can only be seen by this page.</description>
				</case>
				<case>
					<description>"Session" - Session variables can be seen by other pages in your application.</description>
				</case>
			</cases>
			<example><![CDATA[tmpl.Variable_Info
.scope as C
]]></example>
		</case>
		
		
		
		<case>
			<title>Control Type</title>
			<description>You may change the type of control.</description>
			<example><![CDATA[tmpl.Variable_Info
.controltype as C]]></example>
		<cases>
			<case>
				<title>Options</title>
			</case>
			<case>
				<description>AdvancedButton</description>
			</case>
			<case>
				<description>CheckBox</description>
			</case>
			<case>
				<description>DropDownBox</description>
			</case>
			<case>
				<description>Image</description>
			</case>
			<case>
				<description>Label</description>
			</case>
			<case>
				<description>Link</description>
			</case>
			<case>
				<description>RadioButton</description>
			</case>
			<case>
				<description>TextArea</description>
			</case>
			<case>
				<description>TextBox</description>
			</case>
			
			
			<case>
				
				<description>Calendar</description>
			</case>
			<case>
				<description>Custom</description>
			</case>
			<case>
				<description>Hidden</description>
			</case>
			<case>
				<description>Tab Control</description>
			</case>
			<case>
				<description>Tab Pane</description>
			</case>
			
			
			
			<case>
				<description>Blurb</description>
			</case>
			<case>
				<description>Heading</description>
			</case>
			
		</cases>



		</case>
		
		<case>
			<title>Data Type</title>
			<description>Specifies the type of data returned by the control. The data type only affects the way validation operations run. From the perspective of Xbasic scripts, all variables are of type character. The options are:</description>
			<example><![CDATA[tmpl.Variable_Info
.type as C]]></example>
			<cases>
				<case>
					<title>Options</title>
					
				</case>
				<case>
					<description>"Character"</description>
				</case>
				<case>
					<description>"Numeric"</description>
				</case>
				<case>
					<description>"Logical"</description>
				</case>
				<case>
					<description>"Date"</description>
				</case>
				<case>
					<description>"Time"</description>
				</case>
			</cases>
			
		</case>
		<case>
			<title>Validation Rules</title>
			<description>Specifies rules for verifying that the user's input or selection is acceptable. Click the '...' icon to display the Field Validation dialog box.</description>
			<example><![CDATA[tmpl.Variable_Info.HasValidationRules as L
tmpl.Variable_Info.ValidationSettings
 .Enable_ClientSideValidation as L
.Validate_OnBlur as L
.general.require_value as L
 .general.error_msg as C
 .text_format.lLetters as L
 .text_format.lDigits as L
 .text_format.lwhite space as L
 .text_format.lOther as L
 .text_format.lSpecial as L
 .text_format.use_simple_mask as L
 .text_format.simple_mask as C
 .text_format.regex as C
 .text_format.error_msg as C
 .text_format.place_holder as C
 .numeric_format.numeric_type as C
 .numeric_format.grouping as C
 .numeric_format.decimal as C
 .numeric_format.decimal_places as N
 .numeric_format.error_msg as C
 .logical_format.terms as C
 .logical_format.error_msg as C
 .data_length.lRequired as L
 .data_length.min_length as N
 .data_length.max_length as N
 .data_length.error_msg as C
 .data_value.expression_type as C
 .data_value.equality as C
 .data_value.value as C
 .data_value.value1 as C
 .data_value.value2 as C
 .data_value.expression as C
 .data_value.error_msg as C
 .xfile.source as C
 .xfile.dbf.table as C
 .xfile.dbf.field as C
 .xfile.validation_type as C
 .xfile.ado.cs as C
 .xfile.ado.connection_type as C
 .xfile.ado.table as C
 .xfile.ado.field as C
 .xfile.ado.access_fn as C
 .xfile.ado.use_saved_connection_string AS L
 .xfile.ado.saved_connection_string as C
 .xfile.error_msg as C ]]></example>
			
		</case>
		<case>
			<title>Client side validation
</title>
			<description>Specifies whether data in this control should be validated before the form is submitted.</description>
			<example><![CDATA[tmpl.Variable_Info
.Enable_ClientSideValidation as L ]]></example>
		</case>
		<case>
			<title>Initial Value</title>
			<description>Optionally, set an initial value for the control to display.</description>
			<example><![CDATA[tmpl.Variable_Info
 .InitialValue as C]]></example>
		</case>
		<case>
			<title>Calculated Field Expression</title>
			<description>Optionally, set an initial value for the control to display.</description>
			<example><![CDATA[tmpl.Variable_Info
 .InitialValue as C ]]></example>
		</case>
		
		
		
	</cases>
</section>
<section>
	<title>Events</title>
	<description>The server Validate event is available for all types of controls. The Validate event provides an opportunity to run a script at the server after the form has been submitted.</description>
	<cases>
		<case>
			<title>Server
</title>
		</case>
		<case>
			<description>Specify the Xbasic to run to when the form is submitted. Click the '...' icon to display the Server Events dialog box.</description>
		<example><![CDATA[events.server.validate = <<%code%
' code here
%code%]]></example>
		</case>
	</cases>
	
	
</section>
<section>
<title>Advanced Button Properties</title>
	<description>An advanced button is device for running a script without submitting the form. The script is defined under the button's Events > Server property.</description>
	<cases>
		<case>
			<title>Button Label</title>
			<description>The label of the button.</description>
			<example><![CDATA[tmpl.Variable_Info.controltype as C]]></example>
		</case>
		<case>
			<title>In-line Style</title>
			<description>Specify style attributes that override the settings inherited from the style sheet. Click '...' to display the Style Editor.</description>
			<example><![CDATA[tmpl.Variable_Info
 .AdvancedButton.InLineStyle as C]]></example>
		</case>
		
	</cases>
</section>

<section>
	<title>Blurb Properties</title>
	<description>A blurb is a static text control similar to a label but without a heading.</description>
	<cases>
		<case>
			<title>Text</title>
			<description>The label of the button.</description>
			<example><![CDATA[tmpl.Variable_Info
.controltype as C]]></example>
		</case>
		<case>
			<title>In-line Style</title>
			<description>Specify style attributes that override the settings inherited from the style sheet. Click  to display the Style Editor.</description>
			<example><![CDATA[tmpl.Variable_Info
 .AdvancedButton.InLineStyle as C]]></example>
		</case>
		
	</cases>
	
</section>
<section>
	<title>Calendar Properties</title>
	<description>The Calendar control is a control that a user can place on a dialog component. The Calendar control always displays the calendar on the page. The calendar control can be read-only or set the value of a variable.</description>
	<cases>
		<case>
			<title>Date format</title>
			<description>Specify the format in which date values are passed to the calendar control. e.g. mm/dd/yyyy.</description>
			<example><![CDATA[with tmpl.Variable_info
.Calendar.DateFormat as C]]></example>
		</case>
		<case>
			<title>Read only</title>
			<description>Specify if the calendar control is for displaying date values only, or should it allow the user to also set date values. If the calendar control is read only, then the user cannot click on any of the days, and the buttons at the top of the control to change the year and month are hidden.</description>
			<example><![CDATA[with tmpl.Variable_info
.Calendar.Readonly as L]]></example>
		</case>
		<case>
			<title>Switch year
</title>
			<description>This property is available on if the Read only property is not set. If a date value has a two digit year, specify which year to switch from 1900 to 2000.</description>
			<example><![CDATA[with tmpl.Variable_info
.Calendar.SwitchYear as N]]></example>
		</case>
		<case>
			<title>Combo boxes</title>
			<description>When enabled, displays the combo boxes for the year and month pickers.</description>
			<example><![CDATA[with tmpl.Variable_info
			.Calendar.UseComboBoxes as L]]></example>
		</case>
		<case>
			<title>Low year</title>
			<description>Specifies the low year in the year picker.</description>
			<example><![CDATA[with tmpl.Variable_info
.Calendar.LowYear as N]]></example>
		</case>
		<case>
			<title>High year</title>
			<description>Specifies the high year in the year picker.</description>
			<example><![CDATA[with tmpl.Variable_info
.Calendar.HighYear as N]]></example>
		</case>
		
	</cases>
</section>
	<section>
		<title>CheckBox Properties</title>
		<description>Check boxes are appropriate when you want to set a True/False value into a logical field. The most important property for a check box control is the definition of its choices.</description>
		<cases>
			<case>
				<title>Choices
</title>
				<description>Specify the choices to display. Click '...' to display the Define Choices dialog box.</description>
				<example><![CDATA[tmpl.Variable_Info
.CheckBox.Choices as C]]></example>
			</case>
			<case>
				<description>Dynamic choices from a .DBF table are defined by:</description>
				<example><![CDATA[tmpl.Variable_Info
.CheckBox.Datasource as C
.CheckBox.Table as C
.CheckBox.DisplayValueField as C
.CheckBox.StoredValueField as C
.CheckBox.maxchoices as N
.CheckBox.Filter as C]]></example>
			</case>
			<case>
				<description>Dynamic choices from a ADO/ODBC source are defined by:</description>
				<example><![CDATA[t mpl.Variable_Info
.CheckBox.Datasource as C
.CheckBox.ADO.ConnectionString as C
.CheckBox.ADO.SQL as C
.CheckBox.maxchoices as N]]></example>
			</case>
			<case>
				<description>Dynamic choices from a variable are defined by:</description>
				<example><![CDATA[t mpl.Variable_Info
.CheckBox.Datasource as C
.CheckBox.DataSourceVariableName as C]]></example>
			</case>
			
			<case>
				<title>Orientation</title>
				<description>Specifies the placement of buttons. The options are:</description>
				<cases>
					<case>
						<description>"Horizontal"</description>
					</case>
					<case>
						<description>"Vertical"</description>
					</case>
				</cases>
			
				<example><![CDATA[tmpl.Variable_Info
.CheckBox.Orientation as C]]></example>
			</case>
			
			<case>
				<title>In-line Style</title>
				<description>Specify style attributes that override the settings inherited from the style sheet. Click '...' to display the Style Editor.</description>
				<example><![CDATA[tmpl.Variable_Info
.CheckBox.InLineStyle as C]]></example>
			</case>
			
			<case>
				<title>Style control if error</title>
				<description>Indicate whether to change the style of the entry if there is an error.</description>
				<example><![CDATA[tmpl.Variable_Info
.CheckBox.StyleFieldIfError as L]]></example>
			</case>
			
			<case>
				<title>In-line style for errors</title>
				<description>Specify style attributes that override the settings inherited from the style sheet when errors occur. Click '...' to display the Style Editor.</description>
				<example><![CDATA[tmpl.Variable_Info

.CheckBox.ErrorInLineStyle as C
]]></example>
			</case>
			<case>
				<title>Not in list rule</title>
				<description>If the current value in the variable does not match the list of choices in the control, how should the current value in the variable be changed. The options are:</description>
				<cases>
					<case>
						<description>"First Entry"</description>
					</case>
					<case>
						<description>"Null"</description>
					</case>
					<case>
						<description>"Do Nothing"</description>
					</case>
				</cases>
				<example><![CDATA[tmpl.Variable_Info
				.CheckBox.NotInListRule as C]]></example>
			</case>
			
			
			
		</cases>
		
	</section>	
		
	<section>
		<title>Custom Control Properties</title>
		<description>Custom controls are appropriate when you want display or calculate something beyond the abilities of a standard control.</description>
		<note>Custom grid controls may not contain HTML controls bound to updateable fields.</note>
		<cases>
			<case>
				<title>Definition</title>
				<description>Specify the HTML and Xbasic to display. Click '...' to display the Define Xbasic for Custom Control dialog box.</description>
				<example><![CDATA[tmpl.Variable_Info
.CustomControlXbasic as C]]></example>
			</case>
			</cases></section>
			
<section>
	<title>Drop Down Box Properties</title>
	<description>Drop Down Boxes are appropriate when you want to select a value from a large list of alternatives. The most important properties for a check box control is the definition of its choices and its height. A height of 1 produces a combo box. A height greater than 1 produces a list box.
If you set the height to be more than 1 line, you can also set the multi-select allowed field to "Multiple". This allows the user to select more than one value to insert into the field. (Commas will separate the resulting selections.)
</description>
	<cases>
		<case>
			<title>Choices
</title>
			<description>Specify the choices to display. Click '...' to display the Define Choices dialog box.</description>
			<example><![CDATA[tmpl.Variable_Info
.DropDownBox.Choices as C]]></example>
		</case>
		<case>
	
			<description>Dynamic choices from a .DBF table are defined by:</description>
			<example><![CDATA[tmpl.Variable_Info

 .DropDownBox.Datasource as C
 .DropDownBox.Table as C
.DropDownBox.DisplayValueField as C
.DropDownBox.StoredValueField as C
 .DropDownBox.maxchoices as N
.DropDownBox.Filter as C]]></example>
		</case>
		<case>
	
			<description>Dynamic choices from a ADO/ODBC source are defined by:</description>
			<example><![CDATA[t mpl.Variable_Info
.DropDownBox.Datasource as C
.DropDownBox.ADO.ConnectionString as C
.DropDownBox.ADO.SQL as C
.DropDownBox.maxchoices as N]]></example>
		</case>
		<case>
	
			<description>Dynamic choices from a variable are defined by:</description>
			<example><![CDATA[t mpl.Variable_Info
.DropDownBox.Datasource as C
.DropDownBox.DataSourceVariableName as C]]></example>
		</case>
		
		<case>
			<title>Height</title>
			<description>Specify the number of rows to display.</description>
			<example><![CDATA[t mpl.Variable_Info
.DropDownBox.Size as N]]></example>
		</case>
		
		<case>
			<title>Multi-select</title>
			<description>If the number of rows is greater than 1, specify if the user may select more than one entry. The options are"</description>
			<cases>
				<case>
					<description>Single</description>
				</case>
				<case>
					<description>Multiple</description>
				</case>
			</cases>
		
			<example><![CDATA[tmpl.Variable_Info
.DropdownBox.selectStyle as C]]></example>
		</case>
		
		<case>
			<title>In-line Style</title>
			<description>Specify style attributes that override the settings inherited from the style sheet. Click '...' to display the Style Editor.</description>
			<example><![CDATA[t mpl.Variable_Info
.DropDownBox.InLineStyle as C]]></example>
		</case>
		
		<case>
			<title>Style control if error</title>
			<description>Indicate whether to change the style of the entry if there is an error.</description>
			<example><![CDATA[t mpl.Variable_Info
.DropDownBox.StyleFieldIfError as L]]></example>
		</case>
		
		<case>
			<title>In-line style for errors</title>
			<description>Specify style attributes that override the settings inherited from the style sheet when errors occur. Click '...' to display the Style Editor.</description>
			<example><![CDATA[t mpl.Variable_Info
.DropDownBox.ErrorInLineStyle as C]]></example>
		</case>
		
		<case>
			<title>Not in list rule</title>
			<description>If the current value in the variable does not match the list of choices in the control, how should the current value in the variable be changed. The options are:</description>
			<cases>
				<case>
					<description>"First Entry"</description>
				</case>
				<case>
					<description>"Null"</description>
				</case>
				<case>
					<description>"Do Nothing" - Choose this value when the contents of the drop down box are being generated by a filtered database lookup. This choice prevents the last entry in the drop down box from reappearing.</description>
				</case>
				
			</cases>
		
		
			<example><![CDATA[tmpl.Variable_Info
.DropDownBox.NotInListRule as C]]></example>
		</case>
		
	</cases>
	
	
	
	
</section>

<section>
	<title>Heading Properties</title>
	<description>A heading is a static text control without a heading that spans the width of the dialog.</description>
	<cases>
		<case>
			<title>Text</title>
			<description>The name of the image to display.</description>
			<example><![CDATA[tmpl.Variable_Info
.Heading.Text as C]]></example>
		</case>
		<case>
			<title>In-line Style</title>
			<description>Specify style attributes that override the settings inherited from the style sheet. Click '...' to display the Style Editor.</description>
			<example><![CDATA[tmpl.Variable_Info
.Heading.InLineStyle as C]]></example>
		</case>
		
	</cases>
	
	
</section>



<section>
	<title>Hidden Control Properties</title>
	<description>Hidden controls are appropriate when you want to store a value in the dialog component.</description>
	<case>
		<title>Name</title>
		<description>Specifies the variable's name.</description>
		<example><![CDATA[tmpl.Variable_Info
.Varname as C]]></example>
	</case>
	
	
	
</section>



<section>
	<title>Image Properties</title>
	<note>For more information about using image files as Links, see Using Images in Link Fields.</note>
	<cases>
		<case>
			<title>Image name</title>
			<description>The name of the image to display.</description>
			<example><![CDATA[tmpl.Variable_Info
.Image.Imagename as C]]></example>
		</case>
		<case>
			<title>In-line Style</title>
			<description>Specify style attributes that override the settings inherited from the style sheet. Click '...' to display the Style Editor.
 </description>
			<example><![CDATA[tmpl.Variable_Info
.Image.InLineStyle as C]]></example>
		</case>
		<case>
			<title>Text description</title>
			<description>Text description for the image.</description>
			<example><![CDATA[tmpl.Variable_Info
.Image.Alt as C]]></example>
		</case>
		<case>
			<title>Is Hyperlink</title>
			<description>Indicates whether there is a hyperlink associated with the picture.</description>
			<example><![CDATA[tmpl.Variable_Info
.Image.IsHyperLink as L]]></example>
		</case>
		<case>
			<title>Hyperlink target</title>
			<description>The page or URL to open when the link is clicked.</description>
			<example><![CDATA[tmpl.Variable_Info
.Image.hyperlinkTarget as C]]></example>
		</case>
		
		
	</cases>
	
	
</section>

<section>
	<title>Label Properties</title>
	
	<cases>
		<case>
			<title>In-line Style</title>
			<description>
 
Specify style attributes that override the settings inherited from the style sheet. Click '...' to display the Style Editor.
 </description>
			<example><![CDATA[tmpl.Variable_Info
.Label.InLineStyle as C]]></example>
		</case>
		
		
	</cases>
	
	
</section>
		

<section>
	<title>Link Properties</title>
	<description>An essential decision about a link control is what it will display. The options are:</description>
	<cases>
		<case>
			<description>Value from other field(s)</description>
		</case>
		<case>
			<description>Static text</description>
		</case>
		<case>
			<description>Static image</description>
		</case>
		
	</cases>
	
	<cases>
		<case>
			<title>In-line Style</title>
			<description>Specify style attributes that override the settings inherited from the style sheet. Click '...' to display the Style Editor.</description>
			<example><![CDATA[tmpl.Variable_Info
.Link.InLineStyle as C]]></example>
		</case>
		
		<case>
			<title>Display what in link?</title>
			<description>Specifies what is displayed in the link. The options are:</description>
			<cases>
				<case>
					<description>"Value in field"</description>
				</case>
				<case>
					<description>"Value from other field(s)"</description>
				</case>
				<case>
					<description>"Static text"</description>
				</case>
				<case>
					<description>"Static image"</description>
				</case>
				
			</cases>
			
			
			<example><![CDATA[tmpl.Variable_Info
.link.DisplayType as C]]></example>
		</case>
		
		<case>
			<title>Field(s) to display</title>
			<description>Specify the HTML to display in the link. Use field placeholders to include values from other fields in the grid. Typically, the fields that you reference will have the Hide row or Hide column properties checked.</description>
			<example><![CDATA[tmpl.Variable_Info
.link.DisplayExpression as C]]></example>
		</case>
		
		<case>
			<title>Static text</title>
			<description>Specify the text to display in the link.</description>
			<example><![CDATA[tmpl.Variable_Info
.StaticText as C]]></example>
		</case>
		
		<case>
			<title>Static image</title>
			<description>Specify the image to display in the link.</description>
			<example><![CDATA[tmpl.Variable_Info
.StaticImage as C]]></example>
		</case>
		
		<case>
			<title>Static image inline style</title>
			<description>Specifies style attributes for the image.</description>
			<example><![CDATA[tmpl.Variable_Info
.StaticImageInlineStyle as C]]></example>
		</case>
		
		<case>
			<title>Static image text</title>
			<description>Specifies the text description of the image.</description>
			<example><![CDATA[tmpl.Variable_Info
.StaticImageAlt as C]]></example>
		</case>
		
		<case>
			<title>Dynamic image control</title>
			<description>Specify the control that contains the image to display.</description>
			<example><![CDATA[tmpl.Variable_Info
.link.AlternateImageControl]]></example>
		</case>
		
		<case>
			<title>ink address type</title>
			<description>Information about how to process the link information.</description>
			<cases>
				<case>
					<description>"Explicit or Computed"</description>
				</case>
				
			</cases>
			<example><![CDATA[tmpl.Variable_Info
.Link.Type as C]]></example>
		</case>
		
		<case>
			<title>Link Address</title>
			<description>When the Link address type is "Computed from fields in the grid", this field appears. Click '...' to define the link address in the Link Address Builder.</description>
			<example><![CDATA[tmpl.Variable_Info
.link.ComputedAddress]]></example>
		</case>
		
		<case>
			<title>Target frame or window</title>
			<description>The default is "Explicit". Defines where to display the linked page. The default is Null. The options are:</description>
		<cases>
			<case>
				<description>"Same Frame"</description>
			</case>
			<case>
				<description>"Whole Page"</description>
			</case>
			<case>
				<description>"New Window"</description>
			</case>
			<case>
				<description>"Parent Frame"</description>
			</case>
			
		</cases>
		
			<example><![CDATA[tmpl.Variable_Info
.Link.targetFrameOrWindow as C]]></example>
		</case>
		
		
		
	</cases>
	
</section>

<section>
	<title>Lookup Properties</title>
	<description>The lookup property allows you retrieve one or more field values from a grid. For more information about lookup windows, refer to Defining Lookups for Text Boxes.</description>
	<cases>
		<case>
			<title>Lookup</title>
			<description>When checked, makes the Textbox or Textarea control able to open a secondary lookup grid and retrieve field values.</description>
			<example><![CDATA[tmpl.Variable_Info
.HasLookup as L]]></example>
		</case>
		
		<case>
			<title>Lookup definition</title>
			<description>Specifies lookup grid to use, field mappings, and other properties of the lookup window.
</description>
		
		</case>
		
		<case>
			<title>Grid name</title>
			<description>Specifies the name of the grid to display in the lookup window.</description>
			<example><![CDATA[tmpl.Variable_Info
.Lookup.GridName as C]]></example>
		</case>
		
		<case>
			<title>Window title</title>
			<description>Specifies the title of the lookup window.</description>
			<example><![CDATA[tmpl.Variable_Info
.Lookup.WindowTitle as C]]></example>
		</case>
		
		<case>
			<title>Width</title>
			<description>Sets the width of the lookup window in pixels.</description>
			<example><![CDATA[tmpl.Variable_Info
.Lookup.WindowWidth as N]]></example>
		</case>
		
		<case>
			<title>Height</title>
			<description>Sets the height of the lookup window in pixels.</description>
			<example><![CDATA[tmpl.Variable_Info
.Lookup.WindowHeight as N]]></example>
		</case>
		
		<case>
			<title>Scrollbars</title>
			<description>Enables and disables scrollbars in the lookup window.</description>
			<example><![CDATA[tmpl.Variable_Info
.Lookup.HasScrollBars as L]]></example>
		</case>
		
		<case>
			<title>Resizable</title>
			<description>Enables or disables resizing of the lookup window.</description>
			<example><![CDATA[
Enables or disables resizing of the lookup window.
tmpl.Variable_Info
.Lookup.IsResizeable as L]]></example>
		</case>
		
		<case>
			<title>Inherit parent style</title>
			<description>Specifies whether to use its style sheet or inherit the style sheet of the parent page.</description>
			<example><![CDATA[tmpl.Variable_Info
.Lookup.LookupWindowInheritParentStyle as L]]></example>
		</case>
		
		<case>
			<title>Select record link label</title>
			<description>Specifies the text to display in the selection link.</description>
			<example><![CDATA[tmpl.Variable_Info
.Lookup.LookupGrid.LinkLabel as C]]></example>
		</case>
		
		<case>
			<title>Select record link label style</title>
			<description>Specifies style attributes that override the settings inherited from the style sheet. Click '...' to define the In-line style. Refer to the Style Editor for details.</description>
			<example><![CDATA[tmpl.Variable_Info
.Lookup.LookupGrid.LinkLabelStyle as C]]></example>
		</case>
		
		<case>
			<title>Field map</title>
			<description>A comma delimited list of the fields to retrieve from the lookup window.</description>
			<example><![CDATA[tmpl.Variable_Info
.Lookup.LookupGrid.ReturnFields as  C]]></example>
		</case>
		
		<case>
			<description>A comma delimited list of the fields to write in the grid.</description>
			<example><![CDATA[tmpl.Variable_Info
.Lookup.FillinFields as C]]></example>
		</case>
		
		<case>
			<title>Link type</title>
			<description>Specifies whether to display text or a graphic as the link to the lookup window. The options are:</description>
	<cases>
		<case>
			<description>Text</description>
		</case>
		<case>
			<description>Icon</description>
		</case>
		
	</cases>
	
	
			<example><![CDATA[tmpl.Variable_Info
.Lookup.LinkType as C]]></example>
		</case>
		
		<case>
			<title>Link label</title>
			<description>If text is selected for link type, defines the text to display.</description>
			<example><![CDATA[tmpl.Variable_Info
.Lookup.LinkLabel as C]]></example>
		</case>
		<case>
			<title>Link label style</title>
			<description>Specifies style attributes that override the settings inherited from the style sheet.</description>
			<example><![CDATA[tmpl.Variable_Info
.Lookup.LinkLabelStyle as C]]></example>
		</case>
		
		<case>
			<title>Icon name</title>
			<description>If icon is selected for link type, defines the text to display.</description>
			<example><![CDATA[tmpl.Variable_Info
.Lookup.IconName as C]]></example>
		</case>
		
		<case>
			<title>Override Settings</title>
			<description>Override settings.</description>
			<example><![CDATA[tmpl.Variable_Info
.Lookup.LookupGrid.OverrideSettings as C]]></example>
		</case>
		
			<case>
			<title>Query Parameters</title>
			<description>Query parameters.</description>
			<example><![CDATA[tmpl.Variable_Info
.Lookup.QueryParameters as C]]></example>
		</case>
	</cases>
	
	
	
</section>


<section>
	<title>Radio Button Properties</title>
	<description>RadioButton controls are appropriate when you want to select between a small number of choices. The most important property for a check box control is the definition of its choices.</description>
	
	<cases>
		<case>
			<title>Choices</title>
			<description>Specify the choices to display. Click '...' to display the Define Choices dialog box.
</description>
	
		</case>
		
		<case>
			<title>In-line Style</title>
			<description>Specify style attributes that override the settings inherited from the style sheet. Click '...' to display the Style Editor.</description>
			<example><![CDATA[t mpl.Variable_Info
.RadioButton.InLineStyle as C]]></example>
		</case>
		
		<case>
			<title>Orientation</title>
			<description>Specifies the placement of buttons. The options are:</description>
			<cases>
				<case>
					<description>"Horizontal"</description>
				</case>
				<case>
					<description>"Vertical"</description>
				</case>
			</cases>
			
			
			<example><![CDATA[tmpl.Variable_Info
.RadioButton.Orientation as C]]></example>
		</case>
		
		<case>
			<title>Type</title>
			<description>Specifies the nature of the choices. The options:</description>
			<cases>
				<case>
					<description>"Static"</description>
				</case>
				<case>
					<description>"Dynamic"</description>
				</case>
			</cases>
			
			<example><![CDATA[tmpl.Variable_Info
.RadioButton.Type as C]]></example>
		</case>
		
		<case>
			<title>Style control if error</title>
			<description>Indicate whether to change the style of the entry if there is an error.</description>
			<example><![CDATA[t mpl.Variable_Info
.RadioButton.StyleFieldIfError as L]]></example>
		</case>
		
		<case>
			<title>In-line style for errors
</title>
			<description>
 
Specify style attributes that override the settings inherited from the style sheet when errors occur. Click '...' to display the Style Editor.
 </description>
			<example><![CDATA[t mpl.Variable_Info
.RadioButton.ErrorInLineStyle as C]]></example>
		</case>
		
		<case>
			<title>Not in list rule</title>
			<description>If the current value in the variable does not match the list of choices in the control, how should the current value in the variable be changed. The options are:</description>
			<cases>
				<case>
					<description>"First Entry"</description>
				</case>
				<case>
					<description>"Null"</description>
				</case>
				<case>
					<description>"Do Nothing"</description>
				</case>
			</cases>
			
			<example><![CDATA[tmpl.Variable_Info
.RadioButton.NotInListRule as C]]></example>
		</case>
		
		
	</cases>
	
	
	
	
</section>


<section>
	<title>Row Properties</title>
	<description>Row properties are available for all types of controls.</description>
	<cases>
		<case>
			<title>Hide row
</title>
			<description>Specifies whether or not to display this row in the Form. (Note: The control in this row can still be displayed in another row if you convert that row to a freeform layout.)</description>
			<example><![CDATA[t mpl.Variable_Info

.Column.Hide as L]]></example>
		</case>
		
		<case>
			<title>Security Level</title>
			<description>Controls access to the control.</description>
			<example><![CDATA[t mpl.Variable_Info
.Column.SecurityLevel as N]]></example>
		</case>
		
		<case>
			<title>Row label</title>
			<description>The label defaults to the name of the control.</description>
			<example><![CDATA[t mpl.Variable_Info
.Column.Heading as C]]></example>
		</case>
		
		<case>
			<title>Row label position</title>
			<description>The position of the label in relationship to the control. The options are:</description>
			<cases>
				<case>
					<description>"Left"</description>
				</case>
				<case>
					<description>"Right"</description>
				</case>
				<case>
					<description>"Above"</description>
				</case>
				<case>
					<description>"Below"</description>
				</case>
				
			</cases>
			<example><![CDATA[tmpl.Variable_Info
.Column.LabelPosition as C]]></example>
		</case>
		
		<case>
			<title>Row label in-line style</title>
			<description>Specify style attributes that override the settings inherited from the style sheet. Click '...' to display the Style Editor.</description>
			<example><![CDATA[t mpl.Variable_Info
.Column.LabelInLineStyle as C]]></example>
		</case>
		
		<case>
			<title>Label prefix
</title>
			<description>Specify text or an image that should be displayed to the left of the row label. You can use HTML tags in the text.</description>
			<example><![CDATA[t mpl.Variable_Info
.Column.Heading_Left as C]]></example>
		</case>
		
		<case>
			<title>Freeform layout</title>
			<description>Specifies whether there is a freeform layout. The option is:</description>
			<cases>
				<case>
					<description>"Freeform"</description>
				</case>
			</cases>
			<example><![CDATA[tmpl.Variable_Info
.Column.Type as C]]></example>
		</case>
		
		<case>
			<title>Freeform template
</title>
			<description>Specify if this row should display just this field, or allow a freeform layout.</description>
			<example><![CDATA[tmpl.Variable_Info

.Column.FreeFormTemplate as C
]]></example>
		</case>
		
		<case>
			<title>Cell in-line style
</title>
			<description>Specify style attributes that override the settings inherited from the style sheet. Click '...' to display the Style Editor.</description>
			<example><![CDATA[t mpl.Variable_Info
.Column.InLineStyle as C]]></example>
		</case>
		
		<case>
			<title>Style label if error</title>
			<description>Specify if the label should be styled if a validation error occurs (V6 only).</description>
			<example><![CDATA[t mpl.Variable_Info
.Column.StyleLabelIfFieldError as L]]></example>
		</case>
		
		<case>
			<title>Label in-line error style</title>
			<description>Specify style attributes that override the settings inherited from the style sheet. Click '...' to display the Style Editor.</description>
			<example><![CDATA[t mpl.Variable_Info
.Column.ErrorLabelInLineStyle as C]]></example>
		</case>
		
		<case>
			<title>Break Type</title>
			<description>When the number of layout columns is greater than 1, forces a new row. The options are:</description>
			<cases>
				<case>
					<description>"None"</description>
				</case>
					<case>
					<description>"Break before"</description>
				</case>
					<case>
					<description>"Break after"</description>
				</case>
					<case>
					<description>"Break before and after"</description>
				</case>
				
			</cases>
			
			
			<example><![CDATA[tmpl.Variable_Info
.Breaktype as C]]></example>
		</case>
		
		<case>
			<title>Column Span</title>
			<description>When the number of layout columns is greater than 1, the number of columns to group together.</description>
			<example><![CDATA[tmpl.Variable_Info
.nCols as N]]></example>
		</case>
		
		<case>
			<title>Bubble Help Text</title>
			<description>Optionally, set an initial value for the control to display.</description>
			<example><![CDATA[tmpl.Variable_Info
.BubbleHelp as C]]></example>
		</case>
		
		<case>
			<title>Label Bubble Help Text</title>
			<description>Optionally, set an initial value for the control to display.</description>
			<example><![CDATA[tmpl.Variable_Info
.BubbleHelpLabel as C]]></example>
		</case>
	</cases>
	
</section>

<section>
	<title>Tab Control and Tab Pane Properties</title>
	<description>Optionally, add a tab control to your grid. A tab control allows you to selectively hide and display different groups of fields. Refer to Setting Dialog Tab Properties.</description>
	
</section>

<section>
	<title>Text Area Properties</title>
	<description>The most important properties of a Text Area control are the Rows and Columns properties, which define its size.</description>
	
	<cases>
		<case>
			<title>Rows</title>
			<description>Specify the number of rows to display.</description>
			<example><![CDATA[t mpl.Variable_Info
.TextArea.Rows as N]]></example>
		</case>
		<case>
			<title>Columns</title>
			<description>Specify the number of columns to display.</description>
			<example><![CDATA[t mpl.Variable_Info
.TextArea.Cols as N]]></example>
		</case>
		<case>
			<title>In-line Style</title>
			<description>Specify style attributes that override the settings inherited from the style sheet. Click '...' to display the Style Editor.</description>
			<example><![CDATA[t mpl.Variable_Info
.TextArea.InLineStyle as C]]></example>
		</case>
		
	</cases>
	
	
</section>

<section>
	<title>TextBox Properties</title>
	<description>The most important properties of a TextBox control are the Size and MaxLength properties. The MaxLength should match the field definition in your table. The size can be larger or smaller than the MaxLength value, depending on the needs of your design.</description>
	<cases>
		<case>
			<title>Size</title>
			<description>The width of the control.</description>
			<example><![CDATA[t mpl.Variable_Info

.Textbox.Size as N]]></example>
		</case>
		
		<case>
			<title>Max Length</title>
			<description>The maximum number of characters to accept.</description>
			<example><![CDATA[t mpl.Variable_Info
.Textbox.MaxLength as N]]></example>
		</case>
		
		<case>
			<title>In-line Style</title>
			<description>Specify style attributes that override the settings inherited from the style sheet. Click '...' to display the Style Editor.
 </description>
			<example><![CDATA[t mpl.Variable_Info
.Textbox.InLineStyle as C]]></example>
		</case>
		
		<case>
			<title>Style control if error</title>
			<description>Specifies whether to use a different in-line style when an error occurs.</description>
			<example><![CDATA[t mpl.Variable_Info
.Textbox.StyleFieldIfError as L]]></example>
		</case>
		
		<case>
			<title>Control in-line error style</title>
			<description>Specify style attributes that override the settings inherited from the style sheet when errors occur. Click '...' to display the Style Editor.</description>
			<example><![CDATA[t mpl.Variable_Info
.Textbox.ErrorInLineStyle as C]]></example>
		</case>
		
		<case>
			<title>Is a password field</title>
			<description>Indicates that this is a password field.</description>
			<example><![CDATA[t mpl.Variable_Info
.Textbox.IsPassword as L]]></example>
		</case>
		
	</cases>
	
	
</section>



		
	</sections>
	
<see>
	<ref>Setting Dialog Properties</ref>
</see>	
	
	
	
</page>