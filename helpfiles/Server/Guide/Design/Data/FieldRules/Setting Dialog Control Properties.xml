<page>
	<topic>Setting Dialog Control Properties</topic>
	<sections>
		<section>
			<description>Select each control in the Control Types list to display its Control Properties menu. There are many optional properties for each control. The default values for these properties produce a useable starting configuration for your dialog. This means that you can largely ignore these optional properties when you are learning to build dialogs or you expect to gradually refine your design in later revisions.
A dialog component has few requirements. You are free to add and format controls (of any type) as you wish.
The ((|#Data_Type|Data Type)) setting informs the page how to validate input to a control. It does not affect the type of data generated by a control, which is always "character" data.
</description>
			
		</section>
<section>
	<title>Select the Control Type</title>
	<description>The types of controls that you can place on a dialog are:</description>
	<cases>
		<case>
			<description><![CDATA[((|#AdvancedButton_Properties|Advanced button)) - a free form button that can set a variable's value or run a script]]></description>
		</case>
		<case>
			<description><![CDATA[Blurb - a static text control that does not have a heading]]></description>
		</case>
		<case>
			<description><![CDATA[((|#Calendar_Properties|Calendar)) a monthly calendar]]></description>
		</case>
		<case>
			<description><![CDATA[((|#CheckBox_Properties|Check box)) - allowing a selection from a list of values]]></description>
		</case>
		<case>
			<description><![CDATA[((|#Custom_Control_Properties|Custom)) - allows you to define the content of the dialog cell with Xbasic and HTML]]></description>
		</case>
		<case>
			<description><![CDATA[((|#DropDownBox_Properties|Drop Down Box)) - a list box that may appear as a list or combo box, and allowing a selection from a list of values, which is often retrieved from a table]]></description>
		</case>
		<case>
			<description><![CDATA[Heading - a static text control without a heading that spans the width of the dialog]]></description>
		</case>
		<case>
			<description><![CDATA[((|#Hidden_Control_Properties|Hidden)) - a mechanism for creating and storing variables in the dialog component]]></description>
		</case>
		<case>
			<description><![CDATA[((|#Label_Properties1|Label)) - a read-only control suitable for character, numeric, and date/time data]]></description>
		</case>
		<case>
			<description><![CDATA[((|#Image_Properties|Image)) - displaying either embedded or linked images]]></description>
		</case>
		<case>
			<description><![CDATA[((|#Link_Properties|Link)) - a hyperlink, which may open another page or select a record to display]]></description>
		</case>
		<case>
			<description><![CDATA[((|#Lookup_Properties|Lookup)) - a variation on a textbox or textarea control that retrieves one or more field values from a grid]]></description>
		</case>
		<case>
			<description><![CDATA[((|#RadioButton_Properties|Radio button)) - allowing a selection from a list of values]]></description>
		</case>
		<case>
			<description><![CDATA[((|#Tab_Control_and_Tab_Pane_Properties|Tab Control)) - a control that allows you to selectively display and hide other controls]]></description>
		</case>
		<case>
			<description><![CDATA[((|#TextArea_Properties|Text area)) - similar to a text box, but with multiple lines]]></description>
		</case>
		<case>
			<description><![CDATA[((|#TextBox_Properties|Text box)) - an editable control suitable for character, numeric, and date/time data]]></description>
		</case>

	</cases>
</section>
<section>
	<list>
		<item>
			<name-title>Purpose</name-title>
			<description-title>Action</description-title>
		</item>
		<item>
			<name>Date field</name>
			<description>
 
To create a control appropriate for s a date, set the control type to "textbox" and then modify Date picker properties.
 </description>
		</item>
		<item>
			<name>Image or image reference field
</name>
			<description>
 
To display a picture, set the control type to "Image".
 </description>
		</item>
		<item>
			<name>True/False choice
</name>
			<description>Set the control type of the field to check box and define its Choice properties.
</description>
		</item>
		<item>
			<name>Short list of choices
</name>
			<description>Set the control type of the field to radio button and define its Choice properties. Choices can be static or dynamic (retrieved from a table).
</description>
		</item>
		<item>
			<name>Long list of choices
</name>
			<description>Set the control type of the field to drop down list box and define its Choice properties. Choices can be static or dynamic (retrieved from a table).
</description>
		</item>
			
		
	</list>
</section>	
	
	
	
<section>
	<title>Select the appropriate display format</title>
	<description>An In-Line style overrides the formatting of the cascading style sheet. If you wanted the text to be bolded, or in a different font, point size, or color, this is where you would define the formatting.
You may also want to define validation rules to improve the quality of user input.
You may want to allow only certain users to see a field. To do this set a minimum user security level required before the field will display.
</description>
</section>	
	
<section>
	<title>Control Settings</title>
	<description>The following properties are available for all control types.</description>
	<cases>
		<case>
			<title>Name</title>
			<description>Specifies the name of the control, which must be unique within the form.</description>
			<example><![CDATA[tmpl.Variable_Info
.varname as C]]></example>
		</case>
		
		<case>
			<title>Scope</title>
			<description>Sets the "visibility" of the variable set by the control. The options are:</description>
			<cases>
				<case>
					<description>"Local" - Local variables can only be seen by this page.</description>
				</case>
				<case>
					<description>"Session" - Session variables can be seen by other pages in your application.</description>
				</case>
			</cases>
			<example><![CDATA[tmpl.Variable_Info
.scope as C
]]></example>
		</case>
		
		
		
		<case>
			<title>Control Type</title>
			<description>You may change the type of control.</description>
			<example><![CDATA[tmpl.Variable_Info
.controltype as C]]></example>
		<cases>
			<case>
				<title>Options</title>
			</case>
			<case>
				<description>AdvancedButton</description>
			</case>
			<case>
				<description>CheckBox</description>
			</case>
			<case>
				<description>DropDownBox</description>
			</case>
			<case>
				<description>Image</description>
			</case>
			<case>
				<description>Label</description>
			</case>
			<case>
				<description>Link</description>
			</case>
			<case>
				<description>RadioButton</description>
			</case>
			<case>
				<description>TextArea</description>
			</case>
			<case>
				<description>TextBox</description>
			</case>
			
			
			<case>
				
				<description>Calendar</description>
			</case>
			<case>
				<description>Custom</description>
			</case>
			<case>
				<description>Hidden</description>
			</case>
			<case>
				<description>Tab Control</description>
			</case>
			<case>
				<description>Tab Pane</description>
			</case>
			
			
			
			<case>
				<description>Blurb</description>
			</case>
			<case>
				<description>Heading</description>
			</case>
			
		</cases>



		</case>
		
		<case>
			<title>Data Type</title>
			<description>Specifies the type of data returned by the control. The data type only affects the way validation operations run. From the perspective of Xbasic scripts, all variables are of type character. The options are:</description>
			<example><![CDATA[tmpl.Variable_Info
.type as C]]></example>
			<cases>
				<case>
					<title>Options</title>
					
				</case>
				<case>
					<description>"Character"</description>
				</case>
				<case>
					<description>"Numeric"</description>
				</case>
				<case>
					<description>"Logical"</description>
				</case>
				<case>
					<description>"Date"</description>
				</case>
				<case>
					<description>"Time"</description>
				</case>
			</cases>
			
		</case>
		<case>
			<title>Validation Rules</title>
			<description>Specifies rules for verifying that the user's input or selection is acceptable. Click the '...' icon to display the Field Validation dialog box.</description>
			<example><![CDATA[tmpl.Variable_Info.HasValidationRules as L
tmpl.Variable_Info.ValidationSettings
 .Enable_ClientSideValidation as L
.Validate_OnBlur as L
.general.require_value as L
 .general.error_msg as C
 .text_format.lLetters as L
 .text_format.lDigits as L
 .text_format.lwhite space as L
 .text_format.lOther as L
 .text_format.lSpecial as L
 .text_format.use_simple_mask as L
 .text_format.simple_mask as C
 .text_format.regex as C
 .text_format.error_msg as C
 .text_format.place_holder as C
 .numeric_format.numeric_type as C
 .numeric_format.grouping as C
 .numeric_format.decimal as C
 .numeric_format.decimal_places as N
 .numeric_format.error_msg as C
 .logical_format.terms as C
 .logical_format.error_msg as C
 .data_length.lRequired as L
 .data_length.min_length as N
 .data_length.max_length as N
 .data_length.error_msg as C
 .data_value.expression_type as C
 .data_value.equality as C
 .data_value.value as C
 .data_value.value1 as C
 .data_value.value2 as C
 .data_value.expression as C
 .data_value.error_msg as C
 .xfile.source as C
 .xfile.dbf.table as C
 .xfile.dbf.field as C
 .xfile.validation_type as C
 .xfile.ado.cs as C
 .xfile.ado.connection_type as C
 .xfile.ado.table as C
 .xfile.ado.field as C
 .xfile.ado.access_fn as C
 .xfile.ado.use_saved_connection_string AS L
 .xfile.ado.saved_connection_string as C
 .xfile.error_msg as C ]]></example>
			
		</case>
		<case>
			<title>Client side validation
</title>
			<description>Specifies whether data in this control should be validated before the form is submitted.</description>
			<example><![CDATA[tmpl.Variable_Info
.Enable_ClientSideValidation as L ]]></example>
		</case>
		<case>
			<title>Initial Value</title>
			<description>Optionally, set an initial value for the control to display.</description>
			<example><![CDATA[tmpl.Variable_Info
 .InitialValue as C]]></example>
		</case>
		<case>
			<title>Calculated Field Expression</title>
			<description>Optionally, set an initial value for the control to display.</description>
			<example><![CDATA[tmpl.Variable_Info
 .InitialValue as C ]]></example>
		</case>
		
		
		
	</cases>
</section>
<section>
	<title>Events</title>
	<description>The server Validate event is available for all types of controls. The Validate event provides an opportunity to run a script at the server after the form has been submitted.</description>
	<cases>
		<case>
			<title>Server
</title>
		</case>
		<case>
			<description>Specify the Xbasic to run to when the form is submitted. Click the '...' icon to display the Server Events dialog box.</description>
		<example><![CDATA[events.server.validate = <<%code%
' code here
%code%]]></example>
		</case>
	</cases>
	
	
</section>
<section>
<title>Advanced Button Properties</title>
	<description>An advanced button is device for running a script without submitting the form. The script is defined under the button's Events > Server property.</description>
	<cases>
		<case>
			<title>Button Label</title>
			<description>The label of the button.</description>
			<example><![CDATA[tmpl.Variable_Info.controltype as C]]></example>
		</case>
		<case>
			<title>In-line Style</title>
			<description>Specify style attributes that override the settings inherited from the style sheet. Click '...' to display the Style Editor.</description>
			<example><![CDATA[tmpl.Variable_Info
 .AdvancedButton.InLineStyle as C]]></example>
		</case>
		
	</cases>
</section>

<section>
	<title>Blurb Properties</title>
	<description>A blurb is a static text control similar to a label but without a heading.</description>
	<cases>
		<case>
			<title>Text</title>
			<description>The label of the button.</description>
			<example><![CDATA[tmpl.Variable_Info
.controltype as C]]></example>
		</case>
		<case>
			<title>In-line Style</title>
			<description>Specify style attributes that override the settings inherited from the style sheet. Click  to display the Style Editor.</description>
			<example><![CDATA[tmpl.Variable_Info
 .AdvancedButton.InLineStyle as C]]></example>
		</case>
		
	</cases>
	
</section>
<section>
	<title>Calendar Properties</title>
	<description>The Calendar control is a control that a user can place on a dialog component. The Calendar control always displays the calendar on the page. The calendar control can be read-only or set the value of a variable.</description>
	<cases>
		<case>
			<title>Date format</title>
			<description>Specify the format in which date values are passed to the calendar control. e.g. mm/dd/yyyy.</description>
			<example><![CDATA[with tmpl.Variable_info
.Calendar.DateFormat as C]]></example>
		</case>
		<case>
			<title>Read only</title>
			<description>Specify if the calendar control is for displaying date values only, or should it allow the user to also set date values. If the calendar control is read only, then the user cannot click on any of the days, and the buttons at the top of the control to change the year and month are hidden.</description>
			<example><![CDATA[with tmpl.Variable_info
.Calendar.Readonly as L]]></example>
		</case>
		<case>
			<title>Switch year
</title>
			<description>This property is available on if the Read only property is not set. If a date value has a two digit year, specify which year to switch from 1900 to 2000.</description>
			<example><![CDATA[with tmpl.Variable_info
.Calendar.SwitchYear as N]]></example>
		</case>
		<case>
			<title>Combo boxes</title>
			<description>When enabled, displays the combo boxes for the year and month pickers.</description>
			<example><![CDATA[with tmpl.Variable_info
			.Calendar.UseComboBoxes as L]]></example>
		</case>
		<case>
			<title>Low year</title>
			<description>Specifies the low year in the year picker.</description>
			<example><![CDATA[with tmpl.Variable_info
.Calendar.LowYear as N]]></example>
		</case>
		<case>
			<title>High year</title>
			<description>Specifies the high year in the year picker.</description>
			<example><![CDATA[with tmpl.Variable_info
.Calendar.HighYear as N]]></example>
		</case>
		
	</cases>
</section>
	<section>
		<title>CheckBox Properties</title>
		<description>Check boxes are appropriate when you want to set a True/False value into a logical field. The most important property for a check box control is the definition of its choices.</description>
		<cases>
			<case>
				<title>Choices
</title>
				<description>Specify the choices to display. Click '...' to display the Define Choices dialog box.</description>
				<example><![CDATA[tmpl.Variable_Info
.CheckBox.Choices as C]]></example>
			</case>
			<case>
				<description>Dynamic choices from a .DBF table are defined by:</description>
				<example><![CDATA[tmpl.Variable_Info
.CheckBox.Datasource as C
.CheckBox.Table as C
.CheckBox.DisplayValueField as C
.CheckBox.StoredValueField as C
.CheckBox.maxchoices as N
.CheckBox.Filter as C]]></example>
			</case>
			<case>
				<description>Dynamic choices from a ADO/ODBC source are defined by:</description>
				<example><![CDATA[t mpl.Variable_Info
.CheckBox.Datasource as C
.CheckBox.ADO.ConnectionString as C
.CheckBox.ADO.SQL as C
.CheckBox.maxchoices as N]]></example>
			</case>
			<case>
				<description>Dynamic choices from a variable are defined by:</description>
				<example><![CDATA[t mpl.Variable_Info
.CheckBox.Datasource as C
.CheckBox.DataSourceVariableName as C]]></example>
			</case>
			
			<case>
				<title>Orientation</title>
				<description>Specifies the placement of buttons. The options are:</description>
				<cases>
					<case>
						<description>"Horizontal"</description>
					</case>
					<case>
						<description>"Vertical"</description>
					</case>
				</cases>
			
				<example><![CDATA[tmpl.Variable_Info
.CheckBox.Orientation as C]]></example>
			</case>
			
			<case>
				<title>In-line Style</title>
				<description>Specify style attributes that override the settings inherited from the style sheet. Click '...' to display the Style Editor.</description>
				<example><![CDATA[tmpl.Variable_Info
.CheckBox.InLineStyle as C]]></example>
			</case>
			
			<case>
				<title>Style control if error</title>
				<description>Indicate whether to change the style of the entry if there is an error.</description>
				<example><![CDATA[tmpl.Variable_Info
.CheckBox.StyleFieldIfError as L]]></example>
			</case>
			
			<case>
				<title>In-line style for errors</title>
				<description>Specify style attributes that override the settings inherited from the style sheet when errors occur. Click '...' to display the Style Editor.</description>
				<example><![CDATA[tmpl.Variable_Info

.CheckBox.ErrorInLineStyle as C
]]></example>
			</case>
			
			
			
			
		</cases>
		
	</section>	
		
		
		
		
		
		
		
		
		
	</sections>
	
	
	
	
	
</page>