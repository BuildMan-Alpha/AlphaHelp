<page>
	<topic>JSON Data</topic>
	 <groups>
      <group background="true">
     <title>Introduction</title>
          <sections>
              <section>
                
               
                
               <description>JSON, or Javascript Object Notation, is simply a terse way of storing javascript objects. In many programming languages, to create an object you must first create a variable and then create the children of that variable independently. For example, you could define an object named 'o'  in javascript like this:</description>
			   <example><![CDATA[var o = new Object();
 o.firstName = 'Selwyn';
 o.lastName = 'Rabins';]]></example>
			   
              </section>
			  
			  <section>
				  <description>Using this method, the children of the 'o' object would need to be created one by one; each one including the name of its parent object. This results in a lot of code that is often difficult to interpret. In this case the object 'o' has a very simple name. However, it is not be hard to imagine situations in which the object name is much longer or where the programmer wants a child of the object to be an array or an object in and of itself. JSON provides a compelling alternative that makes this task straightforward. Rather than define each child individually, all of the children that belong to an object are enclosed in curly brackets. Each child in the object, except for the last child, is then delimited using a comma.  </description>
				  <example><![CDATA[var o = {
 firstname: 'Selwyn',
 lastName: 'Rabins'
 }]]></example>
				  
			  </section>
			  
			  <section>
				  <description>The simplicity of JSON's format has made it ubiquitous in Web application development. JSON is very frequently used for data storage, where it is gaining in popularity over xml, and many websites return data in JSON format. This makes it possible, for example, to pull news stories off the web in json format, work with apps like twitter, or call external servers and ask for things. Once you acquire this JSON it is then very easy to manipulate. Among other things you can filter out fields, add fields, or extract an individual element from the data. JSON is the ideal way for sending complex data from the client to the server, or from the server to the client. Having a good understanding of JSON is therefore very helpful in building web applications.

In the javascript language JSON is processed inline. This means that you can use JSON in javascript and it will be automatically recognized by the javascript engine. You can add objects, arrays, and literal values to your JSON data, write some javascript code to build a given part of an object, and it will just work. When the javascript engine comes across any JSON data it knows that a sub-object is a sub-object, an array is an array, and a literal value is a literal value. You do not have to parse JSON in javascript. 

Most of Alpha Anywhere's server-side code is written in Xbasic, a language that does not support JSON natively. However, Alpha Anywhere does support a lot of methods that work with JSON and allow you to both import and export JSON to and from your components. How do these methods work? When you create a JSON object, the children of that object are read in Xbasic as a string. The Xbasic methods then take that string, work against it, and return either JSON or Xbasic. Alpha Anywhere's set of methods can do the same thing for Xbasic objects, returning either JSON or Xbasic. This gives you the ability to parse a string into an object and an object into a string. For example, take the following Xbasic object:
</description>
				<example><![CDATA[dim o as p
 dim o.firstName as c = "Selwyn"
 dim o.lastName as c = "Rabins" ]]></example>  
				  
			  </section>
			  <section>
				  <description>You could create an 'o' object like the one above in Xbasic. It would work, but you would end up having to write a lot of unnecessary code for each of the 'o' parent object's children. Include Alpha Anywhere's JSON parse method, and you can easily simplify things by placing the data for 'o' object's children into a JSON format:</description>
				  <example><![CDATA[dim o as p
 o = json_parse("{firstName: 'Selwyn', lastName: 'Rabins'}")]]></example>
				  
			  </section>
			  
			  
          </sections>
      </group>
	</groups>
	
  
  
  
  
  
  
	
  <groups>
    <group background="true">
        <sections>
          <section>
            <title>Using JSON with Xbasic</title>
            <description>The example below demonstrates how you can apply this information in building a UX component using Xbasic on the server-side that uses JSON.  To be used as Xbasic, JSON needs to be a string. For more information you can follow this video  here. </description>
            
            
          </section>          
        </sections>
</group>

    <group>
   
	<sections>
    <section>
      <title>Create JSON from Xbasic:</title>
      <steps>
        <step>
            <description>In Alpha Anywhere's toolbar click on the Interactive Window button. This will open the Code editor.</description>
            <figure><link>images/interactive.png</link></figure>
        </step>
        
        <step>
          <description>In the Code Editor, go to the Interactive tab and define the following dot variable name 'pp' by entering this code. This is an Xbasic object. Hit Enter at the end of every line.</description>
          <example><![CDATA[dim pp as p
pp.Name = "Fred"
pp.Age = 30
]]></example>
        </step>
        
        <step>
          <description>Now add ?json_generate(pp) to the end of the pp object. Hit Enter again.</description>
          <example><![CDATA[dim pp as p
pp.Name = "Fred"
pp.Age = 30
?json_generate(pp)
]]></example>
        </step>
        <step>
          <description>You should see a generated JSON representation of the pp object. You have succesfully serialized the 'pp' object into a JSON string.</description>
          <figure><link>images/interactive2.png</link></figure>
        </step>
      </steps>
      
    </section>    
  </sections>
	</group>
  
    <group background="true">
      <sections>
        <section>
          <description>In JSON objects start with a curly bracket and end with a closed curly bracket. Inside the object are name value pairs. All property names are double quoted. In this object, for example, the property names are "Name", "Age". JSON can also encode the logical values true and false. Add a new 'Married' property to your Xbasic code and set it to true 'pp.Married = .t.'.
</description>
          <example><![CDATA[dim pp as p
pp.Name = "Fred"
pp.Age = 30
pp.Married = .t.
]]></example>
        </section>
         <section>
          <description>Now run this object again using ?json_generate(pp). The generated JSON should look like this:</description>
          <example><![CDATA[= {
        "Name": "Fred",
        "Age": 30,
        "Married" : true
}
]]></example>
        </section>
         <section>
          <description>In addition to creating JSON data from Xbasic you can also instatiate an object from a JSON string. The following example will demostrate how.</description>
         
        </section>
      </sections>
</group>
<group>


<sections>
  <section>
    <title>Create Xbasic from JSON:</title>
    <steps>
      <step>
        <description>In Alpha Anywhere's toolbar click on the Interactive Window button. This will open the Code editor.</description>
        <figure><link>images/interactive.png</link></figure>
      </step>
      <step>
        <description>The Code Editor will open. Click the New Script using Xbasic Editor button on the top left of the Code Editor's toolbar.</description>
        <figure><link>images/interactive3.png</link></figure>
      </step>
      <step>
        <description>This will open a new tab in the Code Editor. Enter the following code. Hit Enter after every line.</description>
        <example><![CDATA[dim txt as c 
txt = <<%str%
{
        "Name": "Fred",
        "Age": 30,
        "Married" : true
}
%str%
dim pp2 as p
pp2 = json_parse(txt)
debug(1)
]]></example>
        <note><![CDATA[Note: In Xbasic the angle bracket, angle bracket << defines a string whose definition expands over multiple lines. Here we have defined all of our JSON data as an xbasic string and have given that string a variable name of 'txt'. A Xbasic object named pp2 is then created that takes as its value the parsed txt variable.]]></note>
      </step>
      
      <step>
        <description>The debug(1) has been added to the end of this code so we can see the JSON data in the debugger. Click the lightning bolt in the toolbar to run the code.</description>
        <figure><link>images/interactive4.png</link></figure>
      </step>
      
      <step>
        <description>The Xbasic debugger will open. Type 'pp2' into the Expression entry box at the bottom of the debugger. 

</description>
        <figure><link>images/interactive5.png</link></figure>
      </step>
      
      <step>
        <description>Hit Enter and then click the expand or 'plus' button , to the left of the Expression box, to show all of the JSON data in the pp2 object.</description>
        <figure><link>images/interactive6.png</link></figure>
      </step>
      <step>
        <description>The expanded Expression box lets you drill down.</description>
        <figure><link>images/interactive7.png</link></figure>
      </step>
      
      
      
    </steps>
  </section>  
</sections>
  
  </group>
</groups>
  <groups>
    <group background="true"><title>JSON and Sub-Objects</title>
      <sections>
        <section>
          <description>The previous example showed how to parse a string containing JSON data that contained simple literal values. However, what if you wanted to create sub-objects within your data? As the objects in the examples above demonstrate, all properties in JSON are delimited with a comma; except for the last property which has nothing after it. As long as a property is delimited and has a property name in double quotes followed by a colon, the definition can be an object, array, or literal. To see how to create a sub-object in JSON that can be used with Xbasic watch this video, or follow the guide below.</description>
          
        </section>
        
      </sections>
      
    </group>
    <group>
      <sections>
        <section>
          <title>Creating a Sub-Object in JSON to use with Xbasic:</title>
          <steps>
            <step>
              <description>In Alpha Anywhere's toolbar click on the Interactive Window button. This will open the Code editor.</description>
            </step>
            <step>
              <description>The Code Editor will open. Click the New Script using Xbasic Editor button  on the top left of the Code Editor's toolbar.</description>
            </step>
            <step>
              <description>Enter the same code into the Code Editor that you did in step 3 of the 'Create Xbasic from JSON' example. The code should look like this.</description>
              <figure><link>images/interactive8.png</link></figure>
       
            </step>
            <step>
              <description>Now place a comma after the "Married" property. Hit enter and on the line below the "Married" property add a new property name called "Address".</description>
            </step>
            <step>
              <description>Place a colon next to the 'Address' and a set of curly brackets. Inside the brackets add three more properties; a "Street" property, "Number" property, and a "City" property, </description>
              <example><![CDATA[dim txt as c 
txt = <<%str%
{
        "Name": "Fred",
        "Age": 30,
        "Married" : true,
        "Address" : {
                       "Street" : "Main Street",     
                        "Number" : 123,
                        "City" : "Boston"
                            }
}
%str%
dim pp2 as p
pp2 = json_parse(txt)
debug(1)
 ]]></example>
           
           
            </step>
            <step>
              <description>Now click the lightning bolt icon  in the Alpha Anywhere toolbar to run this code. The debugger should open. type pp2 into the Expression entry box at the bottom of the debugger and hit Enter.</description>
              <figure><link>images/interactive9.png</link></figure>
            </step>
            
            
            <step>
              <description>Click the Expand or plus button  to the right of the Expression entry.</description>
              <figure><link>images/interactive10.png</link></figure>
            </step>
            
            
            <step>
              <description>Click on the Address value to expand the Address sub-object that you defined. You should see all of the JSON data from the sub-object you defined inside of your Xbasic code.</description>
              <figure><link>images/interactive11.png</link></figure>
            </step>
                   
          </steps>     
        </section>       
      </sections>
    </group>
  </groups>
  
  <groups>
    <group background="true"><title>JSON and Arrays</title>
      <sections>
        <section>
          <description>Arrays in JSON start with a square bracket [ and end with a square bracket ]. JSON arrays are base 0, meaning the first element in a JSON array is 0, the second element is 1, the third element is 2, and so on. This is different from Xbasic which is base 1. Arrays can contain literal values or objects themselves. This example will show how to add an array property to your JSON data named "Children", to be used in an Xbasic object named pp2. This array will use objects as its elements. The first element in the array will be this object {"Name" : "John", "Age" : 3} which has the "Name" of "John" and an "Age" of 3. Like all objects, each of the properties within this object are delimited by a comma, with the exception on the last property in the object. For more information on the steps that follow watch this video</description>
          
        </section>
        
      </sections>
      
    </group>
    <group>
      <sections>
        <section>
          <title>Creating an Array in JSON to use with Xbasic:</title>
          <steps>
            <step>
              <description>In Alpha Anywhere's toolbar click on the Interactive Window button. This will open the Code editor.</description>
            </step>
             <step>
              <description>The Code Editor will open. Click the New Script using Xbasic Editor button  on the top left of the Code Editor's toolbar.</description>
            </step>
             <step>
              <description>Enter the following code into the New Script page in the Code Editor.</description>
              <example><![CDATA[dim txt as c 
txt = <<%str%
{
        "Name": "Fred",
        "Age": 30,
        "Married" : true,
        "Address" : {
                       "Street" : "Main Street",     
                        "Number" : 123,
                        "City" : Boston
                            },
        "Children" : [
                            {"Name" : "John", "Age" : 3}
                            ]
}
%str%
dim pp2 as p
pp2 = json_parse(txt)
debug(1)
 ]]></example>
            
            </step>
            <step>
              <description>Create two more elements for the "Children" array. As with objects, each element in the array should have a trailing comma; excepting the last element which has no comma. The result should look something like this:</description>
              <example><![CDATA["Children" : [
                            {"Name" : "John", "Age" : 3},
                            {"Name" : "Sally", "Age" : 5},
                            {"Name" : "Kim", "Age" : 7}
                            ]
 ]]></example>
            </step>
            
            <step>
              <description>Now click the lightning icon in the toolbar and run the code. The Debugger should open. Enter pp2 into the Expression box at the bottom on the debugger.

</description>
              <figure><link>images/array1.png</link></figure> 
            </step>
            
             <step>
              <description>Click the Expand or 'plus' button next to the Expression box to see all of the properties in the pp2 object.

</description>
              <figure><link>images/array2.png</link></figure> 
            </step>
            
             <step>
              <description>Click on the Children array property that you defined. The elements within that property will be displayed.

</description>
              <figure><link>images/array3.png</link></figure> 
            </step>
            
             <step>
              <description>Now click on one of the elements in your Children array in the Value list. You should be able to see the object properties for each element.</description>
              <figure><link>images/array4.png</link></figure> 
            </step>
            
          </steps>
          
        </section>
        
      </sections>
      
      
      
    </group>
    <group background="true">
      <sections>
        <section>
          <description>This example has shown how to create a complex Xbasic object using data parsed from JSON that includes an array. You can also pass things from Xbasic into JSON using json_generate(). Here is How.</description>
        </section>
      </sections>
      
    </group>
    

  <group>
    <sections>
      <section>
        <title>Show your Xbasic object's data in JSON form:</title>
        <steps>
          <step>
            <description>Remove the debug(1) line in your code and add this to the end instead. This code will output the JSON from the pp2 Xbasic object using the json_generate() method. The showvar() method will display the result.</description>
            <example><![CDATA[dim txt2 as c
txt2 = json_generate(pp2)
showvar(txt2)
 ]]></example>
          </step>
          <step>
            <description>Click the lightning icon  to run the code. A Variable dialog will open displaying the pp2 objects data in JSON form. The result should look something like this:</description>
            <figure><link>images/array5.png</link></figure>
            
          </step>
          
        </steps>
        
      </section>
      
    </sections>
    
    
  </group>
    </groups>
  
  
	
	
</page>