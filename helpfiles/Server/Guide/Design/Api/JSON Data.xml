<page>
	<topic>JSON Data</topic>
	 <groups>
      <group>
          <sections>
              <section>
                
                <title>Introduction</title>
                
               <description>JSON, or Javascript Object Notation, is simply a terse way of storing javascript objects. In many programming languages, to create an object you must first create a variable and then create the children of that variable independently. For example, you could define an object named 'o'  in javascript like this:</description>
			   <example><![CDATA[var o = new Object();
 o.firstName = 'Selwyn';
 o.lastName = 'Rabins';]]></example>
			   
              </section>
			  
			  <section>
				  <description>Using this method, the children of the 'o' object would need to be created one by one; each one including the name of its parent object. This results in a lot of code that is often difficult to interpret. In this case the object 'o' has a very simple name. However, it is not be hard to imagine situations in which the object name is much longer or where the programmer wants a child of the object to be an array or an object in and of itself. JSON provides a compelling alternative that makes this task straightforward. Rather than define each child individually, all of the children that belong to an object are enclosed in curly brackets. Each child in the object, except for the last child, is then delimited using a comma.  </description>
				  <example><![CDATA[var o = {
 firstname: 'Selwyn',
 lastName: 'Rabins'
 }]]></example>
				  
			  </section>
			  
			  <section>
				  <description>The simplicity of JSON's format has made it ubiquitous in Web application development. JSON is very frequently used for data storage, where it is gaining in popularity over xml, and many websites return data in JSON format. This makes it possible, for example, to pull news stories off the web in json format, work with apps like twitter, or call external servers and ask for things. Once you acquire this JSON it is then very easy to manipulate. Among other things you can filter out fields, add fields, or extract an individual element from the data. JSON is the ideal way for sending complex data from the client to the server, or from the server to the client. Having a good understanding of JSON is therefore very helpful in building web applications.

In the javascript language JSON is processed inline. This means that you can use JSON in javascript and it will be automatically recognized by the javascript engine. You can add objects, arrays, and literal values to your JSON data, write some javascript code to build a given part of an object, and it will just work. When the javascript engine comes across any JSON data it knows that a sub-object is a sub-object, an array is an array, and a literal value is a literal value. You do not have to parse JSON in javascript. 

Most of Alpha Anywhere's server-side code is written in Xbasic, a language that does not support JSON natively. However, Alpha Anywhere does support a lot of methods that work with JSON and allow you to both import and export JSON to and from your components. How do these methods work? When you create a JSON object, the children of that object are read in Xbasic as a string. The Xbasic methods then take that string, work against it, and return either JSON or Xbasic. Alpha Anywhere's set of methods can do the same thing for Xbasic objects, returning either JSON or Xbasic. This gives you the ability to parse a string into an object and an object into a string. For example, take the following Xbasic object:
</description>
				<example><![CDATA[dim o as p
 dim o.firstName as c = "Selwyn"
 dim o.lastName as c = "Rabins" ]]></example>  
				  
			  </section>
			  <section>
				  <description>You could create an 'o' object like the one above in Xbasic. It would work, but you would end up having to write a lot of unnecessary code for each of the 'o' parent object's children. Include Alpha Anywhere's JSON parse method, and you can easily simplify things by placing the data for 'o' object's children into a JSON format:</description>
				  <example><![CDATA[dim o as p
 o = json_parse("{firstName: 'Selwyn', lastName: 'Rabins'}")]]></example>
				  
			  </section>
			  
			  
          </sections>
      </group>
	</groups>
	
	
  <groups>
    <group>
        <sections>
          <section>
            <title>Using JSON with Xbasic</title>
            <description>The example below demonstrates how you can apply this information in building a UX component using Xbasic on the server-side that uses JSON.  To be used as Xbasic, JSON needs to be a string. For more information you can follow this video  here. </description>
            
            
          </section>          
        </sections>

    
	
	<sections>
    <section>
      <title>Create JSON from Xbasic:</title>
      <steps>
        <step>
            <description>In Alpha Anywhere's toolbar click on the Interactive Window button. This will open the Code editor.</description>
            <figure><link>images/interactive.png</link></figure>
        </step>
        
        <step>
          <description>In the Code Editor, go to the Interactive tab and define the following dot variable name 'pp' by entering this code. This is an Xbasic object. Hit Enter at the end of every line.</description>
          <example><![CDATA[dim pp as p
pp.Name = "Fred"
pp.Age = 30
]]></example>
        </step>
        
        <step>
          <description>Now add ?json_generate(pp) to the end of the pp object. Hit Enter again.</description>
          <example><![CDATA[dim pp as p
pp.Name = "Fred"
pp.Age = 30
?json_generate(pp)
]]></example>
        </step>
        <step>
          <description>You should see a generated JSON representation of the pp object. You have succesfully serialized the 'pp' object into a JSON string.</description>
          <figure><link>images/interactive2.png</link></figure>
        </step>
      </steps>
      
    </section>    
  </sections>
	</group>
  </groups>
  
	<groups>
    <group>
      <sections>
        <section>
          <description>In JSON objects start with a curly bracket and end with a closed curly bracket. Inside the object are name value pairs. All property names are double quoted. In this object, for example, the property names are "Name", "Age". JSON can also encode the logical values true and false. Add a new 'Married' property to your Xbasic code and set it to true 'pp.Married = .t.'.
</description>
          <example><![CDATA[dim pp as p
pp.Name = "Fred"
pp.Age = 30
pp.Married = .t.
]]></example>
        </section>
         <section>
          <description>Now run this object again using ?json_generate(pp). The generated JSON should look like this:</description>
          <example><![CDATA[= {
        "Name": "Fred",
        "Age": 30,
        "Married" : true
}
]]></example>
        </section>
         <section>
          <description>In addition to creating JSON data from Xbasic you can also instatiate an object from a JSON string. The following example will demostrate how.</description>
         
        </section>
      </sections>
</group>
</groups>
<sections>
  <section>
    <title>Create Xbasic from JSON:</title>
    <steps>
      <step>
        <description>In Alpha Anywhere's toolbar click on the Interactive Window button. This will open the Code editor.</description>
        <figure><link>images/interactive.png</link></figure>
      </step>
      <step>
        <description>The Code Editor will open. Click the New Script using Xbasic Editor button on the top left of the Code Editor's toolbar.</description>
        <figure><link>images/interactive3.png</link></figure>
      </step>
      <step>
        <description>This will open a new tab in the Code Editor. Enter the following code. Hit Enter after every line.</description>
        <example><![CDATA[dim txt as c 
txt = <<%str%
{
        "Name": "Fred",
        "Age": 30,
        "Married" : true
}
%str%
dim pp2 as p
pp2 = json_parse(txt)
debug(1)
]]></example>
        
      </step>
      
      
    </steps>
  </section>  
</sections>
  
  
  
  
	
	
</page>