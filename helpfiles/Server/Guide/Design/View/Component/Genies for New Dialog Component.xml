<page>
	<topic>Genies for New Dialog Component</topic>
<sections>
<section>
	<description>As we said in New Dialog Component V11, "at a fundamental level, binding a dialog to a database is simple, as long as you are able to write a few lines of Xbasic code. On the other hand, you don't need to write code, as Alpha Five can write the code for you."
In this article, we'll see how Alpha Five can write data binding code. In Server-side Action Scripting V11, we see how Alpha Five can generate other server-side actions.
We start by inserting a new control into a dialog, selecting Create multiple new controls at once, and clicking the Populate list from a table link. In this example we picked the Customer.dbf table from AlphaSports, and left Include data binding information checked.
</description>
	<figure><link>images/dialog_populate_list_from_customer_with_binding_info.png</link></figure>
	
</section>	
<section>
	<description>After pressing OK, we have all the fields we need. What's more, the field types match the corresponding types in the table. Here we see an automatically generated numeric field type.</description>
	<figure><link>images/dialog_automatic_numeric_field_type.png</link></figure>
	
</section>		
<section>
	<description>We also have automatically generated binding information for the field, seen at the lower right.
</description>
	<figure><link>images/dialog_automatic_data_binding_information.png</link></figure>
	
</section>	
<section>
	<description>The data binding panel of the dialog definition has four actions. We have expanded the descriptions for the two major actions.
</description>
	<figure><link>images/dialog_data_binding.png</link></figure>
	
</section>		
<section>
	<description>We aren't stuck with the bindings we got from the original table. We can create the tables to match the controls we have in the dialog. This is a three-step process.
</description>
	<figure><link>images/make_tables_for_dialog_controls.png</link></figure>
	
</section>	
<section>
	<description>In the first step, we define our table aliases (abstract table names) and fields. Here we are setting the lengths of all the character fields at once.
</description>
	<figure><link>images/define_table_aliases_and_fields.png</link></figure>
	
</section>	
<section>
	<description>The table properties are relatively simple. Here we have chosen SQL, a connection string, and a table name to create on the connection.
</description>
	<figure><link>images/define_table_properties.png</link></figure>
	
</section>	
<section>
	<description>At this point we can actually create the table or tables, or if the database we need is not available, save the settings for later creation. The settings will be saved even if we create the table.</description>
	<figure><link>images/dialog_create_tables.png</link></figure>
	
</section>	
<section>
	<description>Going back to the data binding pane, we can now bind the dialog controls to the fields of the SQL table we just created.
</description>
	<figure><link>images/bind_dialog_controls_to_table_fields.png</link></figure>
	
</section>	
<section>
	<description>The first step is to specify the tables. These are already set properly, because of the previous steps.
</description>
	<figure><link>images/dialog_bind_to_table.png</link></figure>
	
</section>	
<section>
	<description>The second step is to bind the controls to the appropriate fields. Again, these are already set properly, because of the previous steps.
</description>
	<figure><link>images/dialog_bind_controls_to_fields.png</link></figure>
	
</section>	
<section>
	<description>Now we need to actually generate the code. We do that with a server-side action in the afterDialogValidate event handler.
</description>
	<figure><link>images/server-side_actions_select_an_action.png</link></figure>
	
</section>	
<section>
	<description>We pick the save action and check the debug option.
</description>
	<figure><link>images/save_submitted_data_to_tables.png</link></figure>
	
</section>	
<section>
	<description>The server-side action goes into the event handler code as 
</description>
	<example><![CDATA[ExecuteServerSideAction("Save Data::save_customer")]]></example>
</section>
<section>
	
	<figure><link>images/save_data_server-side_action_script.png</link></figure>
	
</section>	
<section>
	<description>We checked the option to generate SQL debug output, so when we add a submit button and test the dialog we can see the SQL actions.
</description>
	<figure><link>images/dialog_data_binding_sql_debug_output.png</link></figure>
	
</section>	
	
</sections>	
	
	
	
</page>