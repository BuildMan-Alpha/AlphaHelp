<page>
	<topic>Google Map Component
</topic>
<sections>
	
<section>
	
	<title>Introduction
</title>
<description>When you want to present information about location, the best user interface is often a map. In Alpha Five V11, you can use map components in your Web pages as easily as you use grids or dialogs.
</description>	
	
</section>	
<section>
	<description>Our map component depends on the Google Maps JavaScript API (http://code.google.com/apis/maps/documentation/javascript/). The JavaScript Maps API V3 is a free service, available for any web site that is free to consumers. Please see the terms of use for more information. If you don't qualify for the terms of use (http://code.google.com/apis/maps/terms.html), you can use the Google Maps API Premier (http://code.google.com/apis/maps/documentation/premier/guide.html) service with the Alpha Five Google Map Component, as explained in the Google Map Properties below, once you license a Client ID from Google.
</description>
	
</section>
<section>
	<description>Maps are based on locations, specified by latitude and longitude. In a geographic database, a location is a searchable data type: see Geographic Databases. </description>
	
</section>
<section>
	<description>Determining a latitude and longitude from an address is called geocoding. Determining the user's current position is called geolocation. Our map component uses the free Nominatim (http://wiki.openstreetmap.org/wiki/Nominatim) service for geocoding by default, or Google Maps API Premier (http://code.google.com/apis/maps/documentation/premier/guide.html) if you have a license. Our map component can optionally use HTML 5 geolocation on supported browsers; this works best on mobile devices.
</description>
	
</section>	
<section>
	<description>In addition to using the Google Map Component by itself, you can link it to a Grid, place it in a Tabbed UI, place it in a Page Layout component, and call it from Action JavaScript. The Google Map Component works in desktop applications as well as Web applications. The image below is a Google Map Component with default options running in Working Preview mode — i.e., on the desktop.</description>
	<figure><link>images/google_map_1.png</link></figure>
</section>
<section>
	<title>Creating a Google Map Component
</title>
	<description>From the Alpha Five Web Projects Control Panel, create a new Web Component, select More Components, select Google Map, and press OK. Switch to the Properties Panel.</description>
	
</section>
	
	
	
<section>
	<title></title>
<cases>
	<case>
		<title>Google Map Properties</title>
		<cases>
			<case>
				<title>Initial Map Type</title>
				<description>The type of Google Map to display. This can be changed by the user using the displayed controls.</description>
			</case>
			<case>
				<title>Use Google Maps Premier</title>
				<description>Check this if you have a Google Maps Premier client ID and want to use it</description>
			</case>
			<case>
				<title>Google Maps Premier Client ID</title>
				<description>Enter your Google Maps Premier client ID</description>
			</case>
			<case>
				<title>Use SSL for Google Maps Premier</title>
				<description>Check this if you want to call Google Maps Premier using SSL (HTTPS:) Note: Google does not allow you to call the Maps API using SSL unless you have a Premier license.</description>
			</case>
			<case>
				<title>Use Sensor</title>
				<description>Check this if you want to use a GPS or other geolocation method for any reason./description>
			</case>
			<case>
				<title>Set Initial Position from Sensor</title>
				<description>Check this if you want to use a GPS or other geolocation method (IP geolocation) to set the initial map center.</description>
			<note>We use HTML 5 geolocation, and fall back to any other specified initial position if HTML 5 geolocation is unavailable or the user does not allow the use of her location. On a mobile device, HTML 5 geolocation can have an accuracy of a few meters in the best case, using assisted GPS. On a desktop computer, HTML 5 geolocation tends not to be very accurate.</note>
			</case>
			<case>
				<title>Initial zoom factor</title>
				<description>The initial zoom factor on the map. This can be changed by the user using the displayed controls. 0 shows the whole world; 20 shows a few square yards. Displaying a circle will override this setting.</description>
			</case>
			<case>
				<title>Create marker at initial center</title>
				<description>Check this if you want a push pin and/or polygon vertex created at the initial map center</description>
			</case>
			<case>
				<title>Initial marker is draggable</title>
				<description>Check this if you want the initial push pin to be draggable by the user</description>
			</case>
			<case>
				<title>Show markers</title>
				<description>Check this if you want push pins displayed</description>
			</case>
			<case>
				<title>Added markers are draggable</title>
				<description>Check this if you want any user-added push pins to be draggable by the user</description>
			</case>
			<case>
				<title>Show polygon</title>
				<description>Check this if you want a polygonal area displayed</description>
			</case>
			<case>
				<title>Polygon color</title>
				<description>The color used for displaying the Polygon, as hex RGB, e.g. #FF0000</description>
			</case>
			<case>
				<title>Maximum number of points</title>
				<description>The maximum number of markers or vertices to display</description>
			</case>
			<case>
				<title>Show circle</title>
				<description>Check this if you want a circle displayed</description>
			</case>
			<case>
				<title>Circle color</title>
				<description>The color used for displaying the circle, as hex RGB, e.g. #00FF00</description>
			</case>
			<case>
				<title>Circle radius</title>
				<description>The radius of the circle to display, in meters. 1 mile is roughly 1609 m. Note that displaying a circle resets the map size.</description>
			</case>
			<case>
				<title>Geocoding source</title>
				<description>The service to use for geocoding addresses.</description>
			</case>
			<case>
				<title>Reinitialize on Geocode</title>
				<description>Check this if you want to reinitialize the map if the user geocodes an address. Otherwise, the geocoded point will be added to the map.</description>
			</case>
			
			
		</cases>
		
	</case>
	
	
	
</cases>	
	
	
</section>	
	
<section>
	<title>HTML Properties
</title>
<cases>
	<case>
		<title>Map Width</title>
		<description>The width of the map, e.g. "400px" or "3in"</description>
	</case>
	<case>
		<title>Map Height</title>
		<description>The height of the map, e.g. "500px" or "4in"</description>
	</case>
	<case>
		<title>Toolbar HTML</title>
		<description>HTML that defines the controls for the toolbar. A default set of controls is provided that you may edit to suit your needs.</description>
	</case>
	
</cases>	
	
	
</section>
	
	
<section>
	<description>For discussion of the other properties, which the Google Map Component has in common with all custom and user-defined components, see Custom Component Sections and Events.</description>
</section>	
	
<section>
	<title>JavaScript Functions</title>
	<description>No user-modifiable JavaScript functions have been defined by default in the Google Map Component. This area is a good place to put new JavaScript functions that you want to call from HTML events. Functions created here can use the component's JavaScript methods and properties, and the methods and properties of Google Maps API objects that are stored in the component's JavaScript properties.
</description>
	
</section>
	
<section>
	<title>Xbasic Functions
</title>
<description>One user-modifiable Xbasic function has been defined by default.
</description>	
<example><![CDATA['Sample Callback function -- edit the action to your own purposes
function TakeLatLng as C (e as P)
  dim npts as N = val(Request.Variables._npts)
  dim radius as C = Request.Variables._radius 'in meters
  dim LatLngArray(npts) as C 'e.g. ["(42.478606, -71.201289)",...]
  for i=1 to npts
    LatLngArray(i) = eval("Request.Variables._LatLng"+(i-1))
  next
  dim showCircle as L = ("true" = Request.Variables._showCircle)
  dim showMarkers as L = ("true" = Request.Variables._showMarkers)
  dim showPolygon as L = ("true" = Request.Variables._showPolygon)
  'debug(1)
  'do something with the values 
  'for example: pop up a message
  TakeLatLng = "true" + radius + "true"+LatLngArray(1)+"alert('radius is "
  'for example: do a point-radius search if we're showing the circle, and display results
  'for example: do a Polygon search if we're showing the Polygons, and display results
end function]]></example>	
	
</section>	

<section>
	<description>Callback functions can return JavaScript to be executed by the component.

You may also add other Xbasic functions here, both callback functions and functions called from server-side events.
</description>
</section>	
	

<section>
	<title>Server-side events</title>
	<description>Like user-defined components, the Google Map Component exposes 3 user-modifiable server-side events: onComponentInitialize, onComponentExecute, and onInitialRender, called in that order when the component is first run. When an ajax callback is made, the onComponentExecute event is called.

The Google Map Component does all of its server-side initialization in the systemOnInitialRender event, which is called just prior to onInitialRender. You can usefully populate the markerPropertyArray or markerPropertyArrayString inside the onComponentInitialize event, perhaps obtaining your data from a database or a web service. If markerPropertyArrayString has been defined when systemOnInitialRender is run, it is used to populate the JavaScript bulkMarkersArray; if not, then if markerPropertyArray has been defined, it is used to populate the JavaScript bulkMarkersArray.</description>

<note>Do not overwrite e.javascript in the onInitialRender event, or no map will be displayed. You may append your own JavaScript if you wish, e.g. e.javascript = e.javascript + myJS. Similarly, do not overwrite e.html, or the DIV that holds the map will not be created. If you wish to modify the DIV or toolbar HTML, edit the exposed HTML properties.</note>
</section>		

<section>
	<title>Client-side events</title>
<description>Like custom and user-defined components, the Google Map Component exposes 3 user-modifiable client-side events:
</description>	
<cases>
	<case>
		<description>canAjaxCallback 
</description>
	</case>
	<case>
		<description>afterAjaxCallbackComplete 
</description>
	</case>
	<case>
		<description>onInitializeComplete 
</description>
	</case>
	
	
</cases>

	
</section>
	
<section>
	<title>Linking a Map to a Grid
</title>
<description>Follow this recipe to make a Map pop up to display a location from a Grid row.
</description>	
<steps>
	<step>
		<description>Create a new Google Map Component 
</description>
	</step>
	<step>
		<description>Edit the Toolbar HTML and delete everything defined, since we don't want a toolbar 
</description>
	</step>
	<step>
		<description>Change the maximum number of points to 1 
</description>
	</step>
	<step>
		<description>Save the map 
</description>
	</step>
	<step>
		<description>Open your grid 
</description>
	</step>
	<step>
		<description>Add an Action Button 
</description>
	</step>
	<step>
		<description>In the Button Action, Add a new action using Action JavaScript to open a Google Map Component 
</description>
	</step>
	<step>
		<description>Pick the map you just saved 
</description>
	</step>
	<step>
		<description>If your grid has latitude and longitude fields, bind them to the CenterLat and CenterLng arguments 
</description>
	</step>
	<step>
		<description>If your grid doesn't have latitude and longitude fields, but has an address field, bind that to the CenterAddress argument. The address field needs to be complete enough for geocoding. 
</description>
	</step>
	<step>
		<description>Optionally bind the Titles and InfoText arguments to fields you want to appear in the marker's mouseOver and onClick displays 
</description>
	</step>
	<step>
		<description>Set the pop-up window width and height to be a few pixels larger than your map. 
</description>
	</step>
	<step>
		<description>Save the Action Button 
</description>
	</step>
	<step>
		<description>Create a Toolbar Action Button bound to the Action Button you just saved 
</description>
	</step>
	<step>
		<description>Run your grid and adjust your settings to be pleasing 
</description>
	</step>
	
	
</steps>	
	
</section>	


<section>
	
	<description>Here's what we were able to do following this recipe exactly with an Airport database Grid. Click on the thumbnail to see it full size, and press the Backspace key to return to this discussion.
</description>
	<figure><link>images/pop-up_map_for_airport_row.png</link></figure>
	
	
</section>
<section>
	
	<description>Note that to get latitude and longitude fields in this grid we used the following Alpha Five Portable SQL expressions:
</description>
	<example><![CDATA[GeogLatitude(Location) AS Lat,  GeogLongitude(Location)  AS Lon]]></example>
	
</section>

<section>
	<description>If you had separate city, state, and address fields in your database, you could concatenate them in a SQL expression. In general, however, it is best to geocode addresses once and store the location in the database, rather than geocoding them on the fly every time they are viewed.
</description>
</section>

<section>
	<title>Using a Map as an Alternate Grid View
</title>
	<description>In a grid that has latitude and longitude fields:
</description>
	<steps>
		<step>
			<description>Check the property "Has Alternate Views" 
</description>
		</step>
		<step>
			<description>Open the builder for the Alternate Views definition. 
</description>
		</step>
		<step>
			<description>Add an Alternate View of type Google Map 
</description>
		</step>
		<step>
			<description>Select the Location type 
</description>
		</step>
		<step>
			<description>Create expressions for Latitude and Longitude 
</description>
		</step>
		<step>
			<description>Optionally create expressions for Title and Info box 
</description>
		</step>
		<step>
			<description>Optionally create a list of expressions for dynamic markers, or select a built-in image sequence for numbered or lettered markers 
</description>
		</step>
		<step>
			<description>In the Main View tab configure how you want the alternate view displayed 
</description>
		</step>
		<step>
			<description>Run the grid and adjust the settings to be pleasing 
</description>
		</step>
		
		
	</steps>
</section>
<section>
	
	<description>We achieved the alternate view below following the above recipe. Click on the thumbnail to view the image full size, and press the Backspace key to return to this discussion.</description>
	<figure><link>images/airports_alternate_view.png</link></figure>
	
</section>
<section>
	<title>Locations versus Addresses for marker placement
</title>
	<description>If you have a table with addresses rather than locations, using it as is will lead to degraded runtime performance for your grid, as each call to geocode an address takes a fraction of a second. This is noticeable but not severe on a web page, since the geocoding happens in asynchronous Ajax callbacks, and all of your addresses can be geocoded in a couple of seconds. It is annoyingly slow when you run a Google Map Component with bulk markers (e.g. for an Alternate View) that are defined by addresses on the desktop or in Working Preview, since the Ajax callbacks for geocoding are serialized: a map with 10 bulk markers defined by addresses can take as long as 10 seconds to initialize, long enough for a user to think it has crashed.
</description>
	
	
</section>

<section>
	<description>We can geocode addresses with the free Nominatim (http://wiki.openstreetmap.org/wiki/Nominatim) service as well as with Google. Nominatim imposes no rate limit, but takes a large fraction of a second to return a geocoded location. Nominatim seems to work fairly well for U.S. and U.K. addresses, but your mileage may vary. We have had reports of Nominatim not working well for specific languages and locations, such as Flemish place names in Belgium.
</description>
</section>

<section>
	<description>Google is the geocoding default. Be aware, however, that the free Google Maps API is rate-limited to about 6 geocoding attempts per second, after which it will stop giving answers. In practice, this imposes a limit on the number of rows per page in a grid that uses a map that is based on addresses rather than locations in an alternate view .
</description>
</section>
<section>
	<description>If you are a Google Premier Maps customer, check "Use Google Maps Premier," and supply a Google Premier Maps Client ID, then we geocode addresses with Google Maps Premier, which typically returns a geocoded location in 100 ms, even if you selected Nominatum, since Google Premier Maps is so much better and faster than Nominatum. (For $10K a year, it certainly should be better.) If you have a case where this presents a problem, let us know and we'll change the behavior.
</description>
<note>If you create a map that takes its initial position from an address using Nominatim for geocoding and use IE 9, don't be surprised if you see a message about the page "accessing information that is not under its control" in Live Preview. You can eliminate the message by loosening IE's permissions for the intranet zone. Specifically, change the security settings for Local Intranet|Custom|Miscellaneous|Access data across domains to Enable from Prompt. Using Google for geocoding does not cause this message to display.

If you plan to deploy a site that uses Nominatim for geocoding and your users plan to use IE 9, you may want to advise them to add your site to the Trusted Sites list.</note>
</section>

<section>
	<description>If you have a database with addresses that you'd like to be the basis of a Google Map alternate view, consider adding locations to the table as a one-time process using a bulk geocoding operation. If you need to add locations as people enter addresses in your grid, you can use Action JavaScript to geocode the latitude and longitude from the address.
</description>
	
</section>

<section>
	<description>If you need to store Geography location objects in a geography-enabled SQL database for searching purposes, you can use the GeogCreateLocation Portable SQL function to construct the location object from the latitude and longitude, typically in the onBeforeSQLCommandExecute event for INSERT and UPDATE queries.
</description>
	
</section>

<section>
	<description>If you're having trouble getting geocoding to work, test the individual addresses at http://nominatim.openstreetmap.org or http://maps.google.com until you get the format right. The more complete the address, the more likely it is to code properly. Also, delimiting the address fields with commas helps the parser. Try Alpha's address, "70 Blanchard Rd, Burlington, MA", as a known good case.</description>
	
</section>




<section>
	
	<title>Using dynamic markers and labeled marker sequences
</title>
	<description>If you want a map to communicate some attribute at each location, you can use dynamic markers, meaning that the marker glyph used at any point depends on some expression, such as "sales > 100000" or "population>1000000" or "elevation < 500". This map feature is similar to the conditional image feature of grids. Hover over each picture to see it full size.</description>
	<figure><link>images/dynamic_markers.png</link></figure>
	<figure><link>images/elevation_markers.png</link></figure>
</section>

<section>
	<description>If you want to be able to visually connect grid rows with their corresponding markers, you can use labeled marker sequences, and also use marker sequences for the grid images. This behavior is similar to what a business search on Google Maps will show you.
</description>
	<figure><link>images/image_sequence.png</link></figure>
	
</section>

<section>
	<description>images/image_sequence.png</description>
</section>

<section>
	<title>Using the Google Map as a Grid search control
</title>
<description>In a grid that is based on a SQL database that has a Geography field, add the Geography field to the search part of the grid and set it to a Map control type. (Hover over each picture to see it full size.)
</description>	

<figure><link>images/map_control_type_in_search.png</link></figure>
	
</section>


<section>

<description>Open the map properties.
</description>	
<figure><link>images/map_search_part_properties.png</link></figure>
	
</section>

<section>

<description>Set the properties and test the control. You can display the results in the grid, in a map that is an alternate view to the grid, and/or in the search grid itself.
</description>	
<figure><link>images/search_for_25_miles_around_Boston.png</link></figure>
	
</section>

<section>
<title>Customizing your Google Map Component</title>
<description>The Google Map Component was designed for several different use cases:
</description>	
<cases>
	<case>
		<description>A map around a fixed geographic point specified either by Latitude and Longitude or by Address 
</description>
	</case>
	<case>
		<description>A map displaying a number of fixed geographic points 
</description>
	</case>
	<case>
		<description>A map that allows the user to specify and display the center and radius for a search 
</description>
	</case>
	<case>
		<description>A map that allows the user to specify and display the points defining a polygon for a search 
</description>
	</case>
	<case>
		<description>A map that allows the user to specify and display a search and then see the results of the search 
</description>
	</case>
	
	
</cases>
	
</section>
<section>
	<description>Each of these use cases requires slightly different controls, which is why the Toobar HTML is exposed as a property. The different controls require slightly different processing, which is why the sample Xbasic Ajax callback handler function TakeLatLng has been supplied in user-modifiable form, and the JavaScript helper function computePostValues has been supplied to return all the user-supplied markers, the radius, and the states of the circle, marker, and polygon display for the Ajax callback.

As you have seen, we have already supplied the customization of the Google Map Component for most of these use cases, in conjunction with a Grid. You are, however, free to create your own customizations by using the exposed events, methods and properties, both on the client side and the server side.
</description>
	
</section>

<section>
	<title>Google Map Component Action JavaScript actions</title>
<cases>
	<case>
		<description>Clear all markers 
</description>
	</case>
	<case>
		<description>Add marker(s) to the map 
</description>
	</case>
	<case>
		<description>Close all infoboxes 
</description>
	</case>
	<case>
		<description>Open an infobox 
</description>
	</case>
	<case>
		<description>Center map on an address 
</description>
	</case>
	<case>
		<description>Set map zoom level 
</description>
	</case>
	<case>
		<description>Show a marker layer 
</description>
	</case>
	<case>
		<description>Hide a marker layer 
</description>
	</case>
	<case>
		<description>Bounce markers on a layer 
</description>
	</case>
	<case>
		<description>Bounce a marker 
</description>
	</case>
	
	
</cases>	
	
</section>

<section>
	<title>Google Map Component Xbasic Arguments and Properties
</title>
<cases>
	<case>
		<description>Arguments </description>
		<figure><link>images/atable2.png</link></figure>
	</case>
	<case>
		<description>Properties </description>
		<example><![CDATA[dim tmpl.DivName as c = default " m around "
dim tmpl.CenterLat as N = default 0
dim tmpl.CenterLng as N = default 0
dim tmpl.markInitialPosition as L = default .T.
dim tmpl.showMarkers as L = default .T.
dim tmpl.showPolygon as L = default .T.
dim tmpl.DivWidth as C = default "');"
dim tmpl.DivHeight as C = default "map_canvas"
dim tmpl.radius as N = default 1609
dim tmpl.maxMarkers as N = default 4
dim tmpl.reinitOnGeocode as L = default .T.
dim tmpl.zoom as N = default 13
dim tmpl.Titles as C = default "400px"
dim tmpl.InfoText as C = default "400px"
dim tmpl.showCircle as L = default .F.
dim tmpl.isDraggable as L = default .T.
dim tmpl.isInitialDraggable as L = default .F.
dim tmpl.CenterAddress as C = default "400px"
dim tmpl.MapTypeId as C = default "500px"
dim tmpl.usePremier as L = default .F.
dim tmpl.clientID as C = default "400px"
dim tmpl.useSSL as L = default .F.
dim tmpl.useSensor as L = default .F.
dim tmpl.markerPropertyArray(0) as P 'see below for properties
dim tmpl.markerPropertyArrayString as C = default "400px" 
dim tmpl.autoScaleToBulkMarkers as L = .T.
dim tmpl.bulkMarkerClickAction as C = default ""
dim tmpl.CircleColor as C = default ""
dim tmpl.PolygonColor as C = default ""
dim tmpl.GeocodeDelay as N = default 0
dim tmpl.GeocodeMethod as C = default "ROADMAP" 'could also be "Google"
dim tmpl.GoogleMapsSrc as C
dim tmpl.HtmlToolbar as C
 
'tmpl.markerPropertyArray Properties:
    dim title as c = default "400px"
    dim infotext as c = default "400px"
    dim type as c = default "400px"
    dim icon as c = default "400px"
    dim layer as c = default "400px"
    dim animation as n = default 0
    dim duration as n = default 0
    dim callback as C = default "400px"
    dim circleObj as p 
 
    dim circleObj.radius as n = default 0 
    dim circleObj.strokeColor as c = default ""
    dim circleObj.strokeOpacity as n = default .8
    dim circleObj.strokeWeight as n = default 2
    dim circleObj.fillColor as c = default ""
    dim circleObj.fillOpacity as n = default .35]]></example>
	</case>
</cases>	
	
</section>
<section>
	<title>Google Map Component JavaScript Properties and Methods
</title>
<cases>
	<case>
		<description>Properties (all belong to componentName) 
</description>
		<example><![CDATA[.markersArray = [];
.markersArray2 = [];
.infoWindowsArray = [];
.layersArray = [];
.circlesArray = [];
.geocoder; //only used for google geocoder
.map;
.marker;
.myPoly;
.showMarkers = [showMarkers];
.showPolygon = [showPolygon];
.markInitialPosition = [markInitialPosition];
.myRadius = "{radius}";
.maxMarkers = [maxMarkers];
.reinitOnGeocode = [reinitOnGeocode];
.titles = ["{Titles}"];
.InfoText = ["{InfoText}"];
.myCircle;
.showCircle = [showCircle];
.isDraggable = [isDraggable];
.isInitialDraggable = [isInitialDraggable];
.bulkMarkersArray = [[bulkMarkersArray]];
.autoScaleToBulkMarkers = [autoScaleToBulkMarkers];
.minLat;
.maxLat;
.minLng;
.maxLng;
.bulkMarkerClickAction=[bulkMarkerClickAction];
.GeocodeDelay=[GeocodeDelay];
.GeocodeMethod="{GeocodeMethod}";
.GoogleMapsSrc="{GoogleMapsSrc}";]]></example>
	</case>
	
	<case>
		<description>Methods (all belong to componentName) 
</description>
		<example><![CDATA[ //This function is called from the OnInitializeComplete client-side event
//Dynamically load Google Maps API JavaScript, put it at the end of the page
//It will run when the rest of the page has been processed, and
// call back to .initializeGoogleMap()
.loadScript[]
 
//callback from Google Maps startup
//Geocode or otherwise set the initial map center, 
// then chain to initialize2
.initializeGoogleMap[]
 
//Try to Geocode the supplied address, then chain to initialize2
.encodeAddress[address]
 
//This function is chained from initialize or encodeAddress
//Set map options, create map object, add map click listener,
// mark initial position if wanted, and create bulk loaded markers
.initialize2[myLatLng]
 
//addBulkMarkersCallback: add contents of markerArray argument to bulk markers
//  API exposed for use by Ajax callbacks; called by initialize2
.addBulkMarkersCallback[markerArray, fClearAllMarkers, fClearBulkMarkers,
    fRecenterMapNew, fRecenterMapAll]
 
//doGeocode: address into LatLng, if we can
// Note that geocoding is asynchronous
.doGeocode[address, title, infotext, icon, rowNumber, layer, animation,
    duration, callback, [opt]circleObj]
 
.doGeocode2[address, canDrag]
 
.openInfoWindow[index] //index is Xbasic 1-based row number
 
.addBulkMarker2[lat, lng, title, infotext, icon, rowNumber, layer, animation,
    duration, callback, [opt]circleObj]
 
 
//addBulkMarker: Add the LatLng marker, with infotext, title, icon, layer,
// animation, duration, callback, and optionally a circle
// Also update bounds
//rowNumber can be used by a defined bulkMarkerClickAction
.addBulkMarker[latlng, title, infotext, icon, rowNumber, layer, animation,
  duration, callback, [opt]circleObj]
 
//reset map bounds to fit all markers if wanted
.autoScaleMap[]
 
.addMarker2[lat, lng, canDrag]
 
//Add a marker to the map with a title and InfoText box
//Add a listener for marker drag events
//Show updated polygon if wanted
//Show circle for the first marker if wanted
.addMarker[location, canDrag]
 
//Attach an InfoText ballon to a specified marker
//Add a listener to the marker to show the InfoText
.attachInfoText[marker, num]
 
//Geocode the address in the address input box or optional address argument
//If successful, make this the new map center, reinitialize
// the markers, and add this as a new first marker
.encodeAddressField[[opt]address]
 
//Hide bulk markers in a given layer
.hideLayer[layer]
 
//Show bulk markers in a given layer
.showLayer[layer]
 
.bounceLayer[layer, seconds, action]
 
.bounceBulkMarker[index, seconds, action]
 
//Remove the markers from the map, but keep them in the array
.clearOverlays[]
 
//Show any markers currently in the array
.showOverlays[]
 
//Turn marker displays on or off
.toggleMarkers[]
 
.deleteBulkMarkers[]
 
//Delete all markers in the arrays
//also calls .deleteBulkMarkers()
.deleteOverlays[] 
 
//Create and show the polygon defined by the markers
.showPoly[]
 
//Hide the polygon
.clearPoly[]
 
//Turn the polygon display on or off
.togglePoly[]
 
//Show a circle on the map around the center point if wanted
//Fit the map to the bounding box of the circle
.setRadius[value]
 
//Create a URL-encoded string containing the values to post back to the server
.computePostValues[]
 
//Perform an Ajax callback to the Xbasic function 'TakeLatLng'
// using computePostValues() to do the heavy lifting
.SubmitLatLng[]
 
//Ajax callback to do Geocoding
.geoCodeCallback[arg, callback]
]]></example>
		
	</case>
</cases>	
	
	
</section>
<section>
		<title>Videos</title>
	<description>For Map Alternate View Videos see Google Map Alternate View.
</description>

	
</section>
<section>
	<description>Geography Search Videos 
</description>
	
	<videos>
		<video>
			<name>Watch Video - Part 1
</name>
			<link>http://www.ajaxvideotutorials.com/V11Videos/GeographySearches_Part1.swf</link>
		</video>
		<video>
			<name>Watch Video - Part 2
</name>
			<link>http://www.ajaxvideotutorials.com/V11Videos/GeographySearches_Part2.swf</link>
		</video>
		
	</videos>
	
	
</section>




</sections>	
<see>
	<ref>Geographic Databases</ref>
	<ref>Web Grid Alternate Views</ref>
	<ref>Web Grid Geographical Search</ref>
	<ref>Google Map Alternate View</ref>
	<ref>How to bulk geocode addresses in a database</ref>
</see>	
	
</page>