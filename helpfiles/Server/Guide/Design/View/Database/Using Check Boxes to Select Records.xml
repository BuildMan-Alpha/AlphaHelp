<page>
	<topic>Using Check Boxes to Select Records</topic>
<sections>
	<section>
		<description>This example shows how to use check boxes in a grid to select records to print. In this case the example prints labels, but the technique is applicable to selecting records for any process.

This example passes the selected list of Customer_IDs to a second page named PrintLabel.a5w. It prints the appropriate records using the CustomerLabels label layout or Letter to Customers letter layout of the AlphaSports customer table.
</description>
		<steps>
			<step>
				<description>Create a new read-only grid tabular component based on the AlphaSports customer table with a search part.</description>
			</step>
			<step>
				<description>Display the Grid > Query (DBF) page.</description>
			</step>
			<step>
				<description>Enter "Lastname" in the Order field.</description>
			</step>
			
			<step>
				<title>Selecting the Fields to Display</title>
				<description>Display the Grid > Fields page.</description>
			</step>
			
			<step>
				<description>Press CTRL and click to select the "Customer_ID", "Firstname", "Lastname", "Company", "Phone", "Bill_Address_1", "Bill_City", "Bill_State_Region", "Bill_Postal_Code", "Bill_Country", and "Email" fields.</description>
			</step>
			
			<step>
				<description>Press the '>' icon to add them to the Selected Fields list.</description>
			</step>
			
			<step>
				<description>Select the "Customer_Id" field in the Selected Fields list:</description>
				<cases>
					<case>
						<description>Select "True" in the Column Properties > Freeform layout list (click the check box).</description>
					</case>
						<case>
						<description>Click in the Column Properties > Freeform template field to display the Freeform Column Layout dialog.</description>
					</case>
						<case>
						<description>Enter the following HTML code and click OK. This line of code adds the "Customer_Id" to a check box selection list.</description>
						<example><![CDATA[<input type="check box" name="cust_id[]" value=" {Customer_Id} "> ]]></example>
					</case>
					
				</cases>
		
		
			</step>
			
			<step>
				<description>Add white-space: nowrap; to each field's Label Properties > In-line style field.</description>
			</step>
			
			<step>
				<description>Change the C olumn Properties > Column heading values as follows:</description>
				<cases>
					<case>
						<description>Change "Bill_Address_1" to "Address".</description>
					</case>
					<case>
						<description>Change "Bill_City" to "City".</description>
					</case>
					<case>
						<description>Change "Bill_State_Region" to "State".</description>
					</case>
					<case>
						<description>Change "Bill_Postal_Code" to "Postal Code".</description>
					</case>
					<case>
						<description>Change "Bill_Country" to "Country".</description>
					</case>
					
				</cases>
			
			</step>
			
			<step>
				<description>Add white-space: nowrap; to each field's Label Properties > In-line style field.</description>
			</step>
			
			<step>
				<description>Change the C olumn Properties > Column heading values as follows:</description>
			<cases>
				<case>
					<description>Change "Bill_Address_1" to "Address".</description>
				</case>
				<case>
					<description>Change "Bill_City" to "City".</description>
				</case>
				<case>
					<description>Change "Bill_State_Region" to "State".</description>
				</case>
				<case>
					<description>Change "Bill_Postal_Code" to "Postal Code".</description>
				</case>
				<case>
					<description>Change "Bill_Country" to "Country".</description>
				</case>
			</cases>
			</step>
			
			<step>
				<description>The "Email" field opens your email client to send a message. To achieve this effect:</description>
				<cases>
					<case>
						<description>Change its Display Settings > Control type to "Link".</description>
					</case>
					<case>
						<description>Set its Link Properties > Display what in link field to "Value in Field".</description>
					</case>
					<case>
						<description>Sets its Link Properties > Link address type field to "Field value is an email address".</description>
					</case>
				</cases>
			</step>
			
			<step>
				<title>Setting Grid Properties</title>
				<description>Display the Grid > Properties menu.</description>
			</step>
			
			<step>
				<description>Select the "Corporate" style in the Select Style dialog box.</description>
			</step>
			
			<step>
				<description>Select "True" in the Shading and Dividers > Alternate row shading list (enable the check box).</description>
			</step>
			
			<step>
				<title>Defining the Search Part</title>
				<description>Display the Search > Fields page.</description>
			</step>
			
			<step>
				<description>Press CTRL and click to select the "Customer_ID", "Lastname", "Company", and "Ship_State_Region" in the Available Fields list.</description>
			</step>
			
				
			<step>
				<description>Press the '>' icon to add them to the Selected Fields list.</description>
			</step>
			
				
			<step>
				<description>Display the Search > Properties menu.</description>
			</step>
			
				
			<step>
				<description>Set the Search Options > Initial state to "Closed".</description>
			</step>
			
				
			<step>
				<description>Click Save and name the grid "CustomerGridRadiobuttons". Close the Grid Builder.</description>
			</step>
			
				
			<step>
				<title>Creating the CustomerGridLabels Page</title>
				<description>Click New > OK to create a new A5W page.</description>
			</step>
			
			<step>
				<description>Click File > Save As, enter "SelectLabelType" in the File name field, and click Save.</description>
			</step>
			
			<step>
				<description>Select Insert Component > Select, pick "CustomerGridRadiobuttons", and click OK > OK.</description>
			</step>
			
			<step>
				<description>Insert three buttons into the grid into the table cell that contains the Data. </description>
			<figure><link>images/WPT_Adding_Buttons_to_Page.gif</link></figure>
			<cases>
				<case>
					<description>Position the cursor and click the '-' icon to insert a push button. You will notice that the Grid Builder automatically adds beginning and ending form tags.
</description>
<figure><link>images/Button_tool_button.gif</link></figure>
				</case>
				<case>
					<description>Position the cursor between the push button and the closing form tag and insert a space character and another push button. Insert another space character and a third push button</description>
				</case>
				<case>
					<description>Double click the buttons and modify their labels as shown above.
</description>
				</case>
				
			</cases>
			</step>
			
			<step>
				<description>Display the Source tab.
</description>
			</step>
			
			<step>
				<description><![CDATA[Just after the <head> tag insert the following Javascript code. The determineSelectedRadioButton() function builds a list of Customer_Id values of selected records.
]]></description>
<example><![CDATA[function printLabels()
{
var toolbar = 'no';
var menubar = 'no';
var location = 'no';
var statusbar = 'no';
var resizable = 'yes';
var width = 750;
var height = 500;
window.open('PrintLabel.a5w?'+determineCustIdsFromCheck boxes(),'LabelsWindow','location='+location+',menubar='+menubar+',toolbar='+toolbar+',status='+statusbar+',resizable='+resizable+',width='+width+',height='+height)
}
function determineSelectedRadioButton()
{
     var retVal = ''; 
     for (i = 0; i < document.SelectCustomer.cust_id.length; i++) 
     { 
         if (document.SelectCustomer.cust_idi.checked) 
         { 
             retVal = document.SelectCustomer.cust_idi.value; 
             break; 
         } 
     } 
     return retVal; 
} 
 ]]></example>
			</step>
			
			<step>
				<description>The next step is to modify the HTML table that contains the Xbasic commands to display the various grid component parts. The unmodified code will look something like this.
</description>
<example><![CDATA[<table>
     <tr> 
         <td> <%A5 ?x_out.Output.Body.Grid_Echo %> </td> 
     </tr> 
     <tr> 
         <td> <%A5 ?x_out.Output.Body.UpdateErrors %> </td> 
     </tr> 
     <tr> 
         <td> <%A5 ?x_out.Output.Body.Search_HTML %> </td> 
     </tr> 
     <tr> 
         <td> <%A5 ?x_out.Output.Body.Grid_HTML %>
<form method=post> 
<input id=button1 type=button value="Print Labels" name=button1>  
<input id=button2 type=button value="Print Labels (open in a new window)" name=button2>  
<input id=button3 type=button value="Clear Selections" name=button3> 
</form></td> 
     </tr> 
     <tr> 
         <td> <%A5 ?x_out.Output.Body.DetailView_HTML %> </td> 
     </tr> 
</table> 
 ]]></example>
			</step>
			<step>
				<description>Modify this code as follows.</description>
				<cases>
					<case>
						<description>1. When the user selects a customer using a radio button and then clicks the "Print Labels" or "Print Labels (open in a new window)" button, the form data is submitted to a page named "PrintLabel.a5w". This page builds a query for the selected customer and then generates a PDF file containing the selected label or letter.</description>
						<example><![CDATA[<form method=post>]]></example>
					</case>
					<case>
						<description>becomes</description>
						<example><![CDATA[<form name=SelectCustomer method=post action="printlabel.a5w">]]></example>
					</case>
					
				
					<case>
						<description>2. The three buttons are modified to apply the current style sheet's button style.</description>
						<example><![CDATA[<input ]]></example>
						
					</case>
					<case>
						<description>becomes</description>
						<example><![CDATA[<input class=" <%a5 ? tmpl.style_name %> Button" ]]></example>
						
					</case>
				<case>
					<description><![CDATA[3. Change the type parameters of the three buttons. The first button submits the page and loads the page specified in the <form> tag above. Thus, you need to change the code from:
]]></description>
					<example><![CDATA[type=button ]]></example>
				</case>
					<case>
					<description>to</description>
					<example><![CDATA[type=submit ]]></example>
				</case>
				<case>
					<description><![CDATA[4. The second button works differently. Instead of submitting the form, this button uses client-side JavaScript to open a new browser window and load the labels within it, using the Javascript printLabels() function. This JavaScript has control over the size of the window as well as other properties such as whether or not the window has toolbars or can be resized. Thus, you need to add this code at the end of the <button> tag:
]]></description>
					<example><![CDATA[onclick="printLabels();"  ]]></example>
				</case>
				<case>
					<description>5. The third button uses the standard form technique for clearing current selections. You need to change the code from:
</description>
					<example><![CDATA[type=button
 ]]></example>
					
				</case>
				<case>
					<description>to</description>
					<example><![CDATA[type=clear]]></example>
					
				</case>
				<case>
					<description><![CDATA[The revised <form> and <button> code looks like this.]]></description>
					<example><![CDATA[<form name=SelectCustomer method=post action="printlabel.a5w">
     <input class="<%a5 ? tmpl.style_name %>Button" type=submit value="Print Labels"> 
     <input class="<%a5 ? tmpl.style_name %>Button" type=button value="Print Labels (open in a new window)" onclick="printLabels();"> 
     <input class="&l;%a5 ? tmpl.style_name %>Button" type=reset value="Clear Selections"> 
</form> 
 ]]></example>
					
				</case>
				
				
				
				
				</cases>
			
			</step>
			<step>
				<description>Save the page and close the HTML Editor.
</description>
			</step>
			
			
		</steps>
		
	</section>
<section>
	<title>Creating the PrintLabels Page</title>
	<steps>
		<step>
			<description>Create a new A5W page and switch to the Source view in the HTML Editor.
</description>
			
		</step>
		<step>
			<description><![CDATA[Paste the following code above the <html> tag.]]>
</description>
<cases><case>
			<example><![CDATA[<%a5
if eval_valid("cust_id")
    if cust_id[1] = ""
        goto CustidNotSpecified
    end if
    dim filter as c
    dim order as c
    filter = cust_id.dump()
    filter = *for_each(x,"customer_id = " + quote(x),filter)
    filter = strtran(alltrim(filter), crlf()," .or. ")
    order = ""
    dim filename as c
    filename = session.session_folder + chr(92) + "templabels.pdf"
    filename = label.saveas("CustomerLabels@[PathAlias.ADB_Path]\customer.dbf","PDF",filter,order,filename,.f.)
    if file.exists(filename)
        response.redirect(session.session_url + "templabels.pdf?" + time("hms3"))
        end
    end if
else
    CustidNotSpecified:
%>
 ]]></example>
 </case>
	 <case>
		 <description>This Xbasic code first checks to see if it has received the cust_id parameter from the calling page. If it has been received and exists, the code next checks to see if it contains any values. If not, the script goes to the error handler CustidNotSpecified:.</description>
		 <example><![CDATA[<%a5
if eval_valid("cust_id")
    if cust_id[1] = ""
        goto CustidNotSpecified
    end if
 ]]></example>
	 </case>
	  <case>
		 <description>If the script continues, it uses the *for_each() function to build a list of arguments for a filter expression, separating each argument with an .or. operator.
</description>
		 <example><![CDATA[ dim filter as c
    dim order as c
    filter = cust_id.dump()
    filter = *for_each(x,"customer_id = " + quote(x),filter)
    filter = strtran(alltrim(filter), crlf()," .or. ")
    order = ""
 ]]></example>
	 </case>
	  <case>
		 <description>Next, the script creates a filename that is located in the current session folder and passes that name as one of the arguments in the LABEL.SAVEAS() method. Since this is using an Alpha Anywhere print routine, it would only work with an Alpha Anywhere table.
</description>
		 <example><![CDATA[ dim filename as c
    filename = session.session_folder + chr(92) + "templabels.pdf"
    filename = label.saveas("CustomerLabels@[PathAlias.ADB_Path]\customer.dbf", "PDF", filter, order, filename, .f.)
 ]]></example>
	 </case>
	  <case>
		 <description>Finally, if the print routine worked and the PDF file was created, the script loads the new PDF file using the RESPONSE.REDIRECT() method. The time("hms3") argument added to the filename guarantees that you open the most recent PDF file, and not any version that might have been cached.
</description>
		 <example><![CDATA[ if file.exists(filename)
        response.redirect(session.session_url + "templabels.pdf?" + time("hms3"))
        end
    end if
else
    CustidNotSpecified:
%>
 ]]></example>
	 </case>
	  <case>
		 <description>Paste the following code into the body of the document. It displays an error message if an error occurs.
</description>
		 <example><![CDATA[<p>Error: You must call page with a query string that specifies the Customer ID(s).<br>
For example: <%a5 ? request.script_name %> ?cust_id[]=000001&cust_id[]=000013</p>
 ]]></example>
	 </case>
 </cases>
		</step>
		<step>
			<description>Save the PrintLabel.A5W page and display the A5W Pages tab of the Web Projects Control Panel.
</description>
		
		</step>
		<step>
			<description>Right click the "SelectLabelType" page, select Publish (Local Webroot) and open.
</description>
			
		</step>
		<step>
			<description>Select a couple of records and try the different print buttons.
</description>
			
		</step>
		
	</steps>
	
</section>



</sections>	
	
</page>