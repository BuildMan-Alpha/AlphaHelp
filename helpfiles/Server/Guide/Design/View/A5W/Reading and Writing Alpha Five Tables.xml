<page>
	<shortlink>server a5w Reading and Writing Alpha Anywhere Tables</shortlink>
	<topic>Reading and Writing Alpha Anywhere Tables</topic>
	<description>One of the most common uses of the Application Server is displaying data from a database. This is quite easy to do now that you know how to include Xbasic in our pages. All that is needed is to use the Xbasic commands to open a table and retrieve data from it.</description>
		
<sections>
	<section>
		<note>The Publishing AlphaMovies topic describes techniques appropriate for Alpha Anywhere database users.</note>
	</section>
	
<section>
	<title>Displaying Data From a Table</title>
<steps>
	<step>
		<description>Create a new A5W page with the following content.</description>
		<example><![CDATA[<html>
<head><title>Reading from a Table</title></head>
<body>
<%A5
dim pTbl as P
pTbl = table.open("customer")
pTbl.fetch_first()
%>
<font size=2 face=Verdana>Data from the Customer table</font>
<table BORDER="1">
     <tr> 
         <td><font size=2 face=Verdana>Customer ID</font></td> 
         <td><font size=2 face=Verdana> <%A5 ? pTbl.customer_id %> </font></td> 
     </tr> 
     <tr> 
         <td><font size=2 face=Verdana>First name</font></td> 
         <td><font size=2 face=Verdana> <%A5 ? pTbl.firstname %> </font></td> 
     </tr> 
     <tr> 
         <td><font size=2 face=Verdana>Last name</font></td> 
         <td><font size=2 face=Verdana> <%A5 ? pTbl.lastname %> </font></td> 
     </tr> 
</table> 
<%A5
pTbl.close()
%>
</body> 
</html> 
 ]]></example>
	</step>
	<step>
		<description>Click the 'lightning' icon to run the page in Live Preview.
</description>

	</step>
	<step>
		<description>Select an entry from the list box and click Select. Things to note in this page include:
</description>
		<cases>
			<case>
				<description>pTbl is a Pointer variable. The process of opening a table returns a pointer variable, which thereafter is used to run all table methods.
</description>
			</case>
			<case>
				<description>The pTbl.fetch first() method returns the first record in the table.
</description>
			</case>
			<case>
				<description>The pTbl.close() method closes the table and makes it accessible to other persons and/or applications.
</description>
			</case>
			
		</cases>
	</step>
	<step>
		<description>Select File > Save As and name the page "Reading_from_a_Table".
</description>
		
	</step>
	<step>
		<description>Click  to run the page in Live Preview. 
</description>
		<figure><link>images/WPT_Reading_from_a_Table.gif</link></figure>
	</step>
	
	
</steps>	
	
</section>	
	<section>
		<description>The page opens the customer table, reads the first record, displays the values of three fields, then closes the table.
</description>
	</section>
	
	
	<section>
		<title>About Objects and Pointers
</title>
		<description>For those new to programming, it may be easy to understand the idea of a variable that contains a number or a character string. Understanding a pointer variable may be more challenging.
Pointers can be thought of as the "names" of objects (in reality to describe a pointer as the "location" of an object would be more precise).
When you refer to a particular object in Alpha Anywhere, you are defining that particular object as belonging to a category of objects that have similar characteristics that you can edit and that react to actions that you can create and control.
You can specify the appearance or display of an object by manipulating its characteristics and you can determine how an object reacts to user input by writing Xbasic scripts that control what happens when an object does something or is accessed by a user.
For example, you can think of a car as an object. You may own two cars which have similar properties and actions, but, of course, behave differently according to what those properties and actions are.
Lets say your two cars are:
</description>
<cases>
	<case>
		<description>Car1: Ford Focus
</description>
	</case>
	<case>
		<description>Car2: Masserati
</description>
	</case>
	
</cases>
	</section>
	
	<section>
		<description>Now, both of these are objects are particular objects of a certain type. They are cars. Since they are both cars you know, by definition, that they share certain characteristics. For example, a few of their shared characteristics are:</description>
		<cases>
	<case>
		<description>name</description>
	</case>
	<case>
		<description>color</description>
	</case>
	<case>
		<description>gas_Accepted</description>
	</case>
	<case>
		<description>top Speed</description>
	</case>
	<case>
		<description>current_Speed</description>
	</case>
	<case>
		<description>passenger_Capacity</description>
	</case>
</cases>
	</section>
	<section>
		<description>Characteristics of objects are referred to as  properties. The properties of your two car objects have values appropriate to their own characteristics. Some property values are shown below for the two cars.</description>
	</section>
	
	
	<section>
		<title>Object Type: Car</title>
		<cases>
			<case>
				<title>Car Object 1</title>
				<list>
					<item>
						<name-title>Property Name</name-title>
						<description-title>Property Value</description-title>
					</item>
					<item>
						<name>Name</name>
						<description>Ford Focus</description>
					</item>
					<item>
						<name>Color</name>
						<description>Blue</description>
					</item>
					<item>
						<name>Gas_Accepted</name>
						<description>Regular</description>
					</item>
					<item>
						<name>Top Speed</name>
						<description>95</description>
					</item>
					<item>
						<name>current_Speed</name>
						<description>0</description>
					</item>
					<item>
						<name>passenger_Capacity</name>
						<description>5</description>
					</item>
					
					
				</list>
				
			</case>
			<case>
				<title>Car Object 2</title>
				<list>
					<item>
						<name-title>Property Name</name-title>
						<description-title>Property Value</description-title>
					</item>
					<item>
						<name>Name</name>
						<description>Masserati</description>
					</item>
					<item>
						<name>Color</name>
						<description>Red</description>
					</item>
					<item>
						<name>Gas_Accepted</name>
						<description>Premium</description>
					</item>
					<item>
						<name>Top Speed</name>
						<description>195</description>
					</item>
					<item>
						<name>current_Speed</name>
						<description>0</description>
					</item>
					<item>
						<name>passenger_Capacity</name>
						<description>2</description>
					</item>
					
					
				</list>
				
			</case>
			
			
		</cases>
		
	</section>
	<section>
		<description>Objects 1 and 2 are both objects of type car and they both have the same collection of properties (as would all objects that are defined as Cars), though its the values of those properties that distinguish one object of the same type from another.
Objects of the same type also share actions or methods. These are things the objects do, rather than what the objects are.
In this example, all cars (or, in other words, all objects of type car) perform certain actions. These are:
</description>
	</section>
<section>
	<cases>
		<case>
				<title>accelerate(pressure)</title>
			<description>What happens? Speed up when the gas pedal is pushed up until top speed. Also, display the current speed on the dashboard.</description>
		</case>
		<case>
				<title>brake(pressure)</title>
			<description>What happens? Slow down when the brake pedal is pushed.</description>
		</case>
		<case>
				<title>turn(direction, degree)</title>
			<description>What happens? Turn the wheels according to the direction and degree indicated by the steering wheel.
</description>
		</case>
		<case>
				<title>Beep(pressure)</title>
			<description>What happens? Make a noise when the horn is pressed.</description>
		</case>
		<case>
				<title>monitor_Tank()</title>
			<description>What happens? (Ford Focus) Flash a dashboard warning light when the gas tank is less than 2 gallons full.
(Masserati) Flash a dashboard warning light when the gas tank is less than 10 gallons full.
</description>
		</case>
		
	</cases>
	
	
	
	
	
</section>	
	<section>
<description>As you can see, what happens for each action is sometimes determined by an input from the driver. The car objects acceleration action is affected by the drivers pressure on the gas pedal.  This action also determines what value is stored in the current_Speed property. (I.e., methods can set the values of properties of objects). And the accelerate method uses the top_Speed property setting to limit how fast the car can go.
Other actions happen automatically without any driver input. The dashboard flashes when the gas drops below a certain level without any input from the driver as the monitor_Tank() action is continually performed for a car object. Make note of this -  both car objects have the same methods. One, named monitor_Tank(), however, does a slightly different action relevant to its particular object. In fact, in Alpha Anywhere the names of the methods for an object are already determined. But we can control what actually happens when that method performs its action.
In other words, objects that are built-in to Alpha Anywhere (like a form or table) have a predetermined set of methods, but you can control what actually happens when those methods are run using Xbasic.
In summary, a car object is fully defined by these properties and methods:
</description>		
		
		
	</section>
	<section>
		<cases>
			<case>
				<title>Object Specification:</title>
					<list>
						<item>
							<name-title>Type</name-title>
							<description-title>Car</description-title>
						</item>
						<item>
							<name>Properties</name>
							<description>name</description>
						</item>
						<item>
							<name>-</name>
							<description>color</description>
						</item>
						<item>
							<name>-</name>
							<description>gas_Accepted</description>
						</item>
						<item>
							<name>-</name>
							<description>top_Speed</description>
						</item>
						<item>
							<name>-</name>
							<description>current_Speed</description>
						</item>
						<item>
							<name>-</name>
							<description>passenger_Capacity</description>
						</item>
						<item>
							<name>Methods</name>
							<description>accelerate(pressure)</description>
						</item>
						<item>
							<name>-</name>
							<description>brake(pressure)</description>
						</item>
						<item>
							<name>-</name>
							<description>turn(direction, rate)</description>
						</item>
						<item>
							<name>-</name>
							<description>beep (pressure)</description>
						</item>
						<item>
							<name>-</name>
							<description>monitor_Tank()</description>
						</item>
						
					</list>		
							
				
				
			</case>
			
		</cases>
		
		
		
		
	</section>
	<section>
		<description>All the parts of your applications written in Alpha Anywhere are objects or distinct entities. An object is a part of Alpha Anywhere that has properties (or characteristics) and methods (or scripts that do something to or with an object).
For example, tables, databases, forms, browses, reports, scripts, and even the Alpha Anywhere program itself are all objects.
You may have noticed that properties of an object are like variables. They are storage locations that hold variable data values. They are, in fact, variables that belong to and describe a specific object. In the same way, methods are like scripts. Methods are pre-named scripts that execute certain actions.
When you create an object in Alpha Anywhere, it returns a way to reference the object. This reference is a pointer. When you create a new table object, you get back a pointer to the table.
You use this pointer to access the table's methods. as you saw in the script above, to read and write a table's records, we first created a pointer named pTbl, then we gave it a value with the table.open() command. Afterwards, we could read the first record of the table with the pTbl.fetch_first() method.
</description>
		<example><![CDATA[<%A5
dim pTbl as P
pTbl = table.open("customer")
pTbl.fetch_first()
%>
 ]]></example>
		
	</section>
<section>
	<title>Navigating Through a Table</title>
	<description>Now that we know how to display data from a table and we know how to work with user input, we can combine them to add navigation to the basic page we just created.
In this example we have added an HTML form that contains the navigation buttons. Additionally it contains a hidden field that stores the current record number. This current record number is needed so that the application knows where we were so it can move to the previous or next record. The WYSIWYG view of this page is illustrated below. 
</description>
	<figure><link>images/WPT_Xbasic_Seen_in_WYSIWYG_Mode.gif</link></figure>
	
</section>	
	<section>
		<steps>
			<step>
				<description>Create a new A5W page with the following content.
</description>
			</step>
			<step>
				<description>Select File > Save As and name the page "Navigating through a table".</description>
		
<example><![CDATA[<HTML>
<HEAD><TITLE>Navigating Through a Table</TITLE></HEAD>
<BODY>
<%A5
dim pTbl as P
pTbl = table.open("customer")
if eval_valid("nav_button") then
    select
        case nav_button = "First"
            pTbl.fetch_first()
        case nav_button = "Previous"
            pTbl.fetch_goto( val(this_recno) )
            pTbl.fetch_prev()
        case nav_button = "Next"
            pTbl.fetch_goto( val(this_recno) )
            pTbl.fetch_next()
        case nav_button = "Last"
            pTbl.fetch_last()
    end select
else
    pTbl.fetch_first()
end if
%>
<TABLE BORDER="1">
<TR><TD>Customer ID</TD><TD> <%A5 ? pTbl.customer_id %> </TD></TR>
<TR><TD>First name</TD><TD> <%A5 ? pTbl.firstname %> </TD></TR>
<TR><TD>Last name</TD><TD> <%A5 ? pTbl.lastname %> </TD></TR>
</TABLE>
<FORM ACTION=" <%A5 ? Request.script_name %> ">
<INPUT TYPE="SUBMIT" NAME="nav_button" VALUE="First">
<NPUT TYPE="SUBMIT" NAME="nav_button" VALUE="Previous">
<INPUT TYPE="SUBMIT" NAME="nav_button" VALUE="Next">
<INPUT TYPE="SUBMIT" NAME="nav_button" VALUE="Last">
<INPUT TYPE="HIDDEN" NAME="this_recno" VALUE=" <%A5 ? pTbl.recno()%> ">
</FORM>
<%A5
pTbl.close()
%>
</BODY>
</HTML>
 ]]></example>
 
 <cases>
	 <case>
		 
		 <description><![CDATA[There are several new items to note in this page. ]]></description>
		 <cases>
						  <case>
					 <description><![CDATA[First, we create a function that responds to nav_button, opens the underlying table, and fetches the appropriate record. The first time the page is loaded the nav_button variable has not yet been assigned a value (and implicitly dimmed). as a result, the expression eval_valid("nav_button") returns .F. . as a result, the function uses pTbl.fetch_first() to retrieve the first record. ]]></description>
					 
				 </case>
				 <case>
					 <description><![CDATA[The <FORM ... </FORM> code section responds to the user's input. When the user clicks on one of the INPUT buttons, the resulting NAME, VALUE pair is submitted to the HTML page ( <%A5 ? Request.script_name %> ), as opposed to the server. This causes the browser to reload the HTML page and interpret all its code again. This time the nav_button variable has a value. as a result, the expression eval_valid ("nav_button") returns .T.. The routine uses the select case syntax to analyze the value of nav_button and read the appropriate record. ]]></description>
					 
				 </case>
				 <case>
					 <description><![CDATA[When nav_button has the value "Previous" or "Next", the script depends on the value of a variable named this_recno that stores the value of ((TBL.RECNO Method|pTbl.recno())), which is the current record number. Unlike previous pages, this page does not use an Xbasic variable to save the this runtime information. Rather it uses a hidden button , which is the fifth element of the form control. ]]></description>
					 
				 </case>
						  <case>
					 <description><![CDATA[At the bottom of the page pTbl.close() closes the Alpha Anywhere table.
 ]]></description>
					 
				 </case>
		 </cases>
	 </case>
	
	 
	 
	 
 </cases>
 
 
 
			</step>
			
			
<step>
	
	<description>Click the 'lightning' icon to run the page in Live Preview. After being run, your browser will display something like this. 
</description>
	<figure><link>images/WPT_Navigating_Through_a_table.gif</link></figure>
	
</step>			
		
		</steps>
	
	</section>
<section>
	<title>The Table Methods You Should Know</title>
	<description>As the last example illustrated, there are many table functions, methods, and properties that provide useful services when you are writing a program. Here are some of the most frequently used.</description>
	<cases>
		
		<case>
			<title><![CDATA[TABLE.OPEN() ]]></title>
			<description>Note that this is a method of the "TABLE" object. Use this method web publishing scripts to return a table pointer.</description>
		</case>
		
		<case>
			<title><![CDATA[TABLE.CURRENT() ]]></title>
			<description>This method opens the table associated with the currently open form or browse. Use this method when writing a script tied to a button on a conventional Alpha Anywhere form.</description>
		</case>
		
		<case>
			<title><![CDATA[<TBL>.FETCH_FIRST() ]]></title>
			<description>This method uses the pointer returned by TABLE.OPEN()to retrieve the first record in the table.
</description>
		</case>
		
		<case>
			<title><![CDATA[<TBL>.FETCH_EOF() ]]></title>
			<description>This method is used as the test in a WHILE ... END WHILE loop when stepping through the records in a table.</description>
		</case>
		
		<case>
			<title><![CDATA[<TBL>.FETCH_NEXT() ]]></title>
		
		</case>
		<case>
			<title><![CDATA[<TBL>.FETCH_PREV() ]]></title>
		
		</case>
		<case>
			<title><![CDATA[<TBL>.FETCH_LAST() ]]></title>
		
		</case>
		
		<case>
			<title><![CDATA[<TBL>.FETCH_GOTO() ]]></title>
			<description>These methods provide additional ways to navigate through records once a table is open.</description>
		</case>
		
		<case>
			<title><![CDATA[<TBL>.CLOSE() ]]></title>
			<description>You must always close a table after you are finished with it.</description>
		</case>
		
		<case>
			<title><![CDATA[<TBL>.CHANGE_BEGIN() ]]></title>
			
		</case>
		<case>
			<title><![CDATA[<TBL>.CHANGE_END() ]]></title>
			<description>These methods start and end a group of commands that update the values of existing table records.</description>
		</case>
		<case>
			<title><![CDATA[<TBL>.ENTER_BEGIN() ]]></title>
			
		</case>
		<case>
			<title><![CDATA[<TBL>.ENTER_END() ]]></title>
			<description>These methods start and end a group of commands that create new table records.</description>
		</case>
		<case>
			<title><![CDATA[<TBL>.DELETE() ]]></title>
			<description>This method deletes the current record.</description>
		</case>
		<case>
			<title><![CDATA[Value = <TBL>. Fieldname ]]></title>
			<description>This syntax allows you to read the Value of the field named Fieldname.
</description>
		</case>
		<case>
			<title><![CDATA[<TBL>. Fieldname = Value ]]></title>
			<description></description>
		</case>
		
		<case>
			<title><![CDATA[<TBL>. Fieldname = Value ]]></title>
			<description>This syntax allows you to set the Value of the field named Fieldname.</description>
		</case>
		
		
		
	</cases>
	
	
</section>	
	
	
	
</sections>	
	
	
</page>