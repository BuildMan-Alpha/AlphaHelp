<page>
	<shortlink>server a5w Uploading Files to the Application Server</shortlink>
	<topic>Uploading Files to the Application Server</topic>
		<description><![CDATA[Web publishing applications only. To upload a file, your <form> tag must use the POST method and set the enctype to multipart/form-data as follows:]]></description>
	
<sections>
	<section>
		<example><![CDATA[<form method="POST" action="upload.a5w" enctype="multipart/form-data" >]]></example>
	</section>
	<section>
		<description>This enables the user's browser to correctly encode the data in your file so it can be sent across the Internet.
Next you need a form field to specify the file to be uploaded. This is done with a File input type, as in:
</description>
		<example><![CDATA[<input type="file" name="FileToUpload" value="">]]><br/></example>
	</section>
	
	<section>
		<description>To upload multiple files from a single HTML element add an input element to your form setting the "multiple" attribute. Tip: Make sure the name of the element ends with square brackets ("[]") so Alpha Anywhere recognizes that there are one or more files to upload.
</description>
		<example><![CDATA[<input type="file" name="FilesToUpload[]" value="" multiple="true">]]></example>
	</section>
	<section>
		<description><![CDATA[This creates what appears to be a textbox with a Browse button directly next to it.

When the form is then submitted, the browser will encode the specified file and upload it as part of the HTTP request being sent to the server. The server decodes the file and then makes an object available to your A5W environment as a member of Request.Variables. In the example here, that object will be named FileToUpload because that was the name that was specified in the file input field.  Because a single file is uploaded, FileToUpload will be a scalar (a single variable).
If you had set the "name" attribute in your HTML to a value that ended in square brackets ("[]") and set the "multiple" attribute to true, FileToUpload would have been an array of one or more objects. 
]]></description>
		<cases>
			<case>
				<title>FileToUpload</title>
				<description>Has number of properties and methods.  The description of INET::UploadedFile provides more complete information.</description>
			</case>
			<case>
				<title>Size </title>
				<description>Is the size of the uploaded file data in bytes.</description>
			</case>
			<case>
				<title>FileName </title>
				<description>Is a character string and it contains the name of the file as it had existed on the user's system. This will be just the bare filename with no path information.</description>
			</case>
			<case>
				<title>ContentType </title>
				<description>Is the MIME type of the data uploaded.</description>
			</case>
			<case>
				<title>Encoding </title>
				<description>Is the encoding type of the data uploaded.</description>
			</case>
			<case>
				<title>CharacterSet </title>
				<description>Is the character set of the data uploaded.</description>
			</case>
			<case>
				<title>SaveToFile() </title>
				<description>Save the data uploaded to a file using a stream (this reduces the memory load while saving the file contents).</description>
			</case>
			<case>
				<title>SaveToStorage() </title>
				<description>Save the data uploaded to an A5Storage container using a stream (this reduces the memory load while saving the file contents).</description>
			</case>
			<case>
				<title>Data</title>
				<description>Contains the contents of the uploaded file. The Data property is a virtual property; meaning that it does not get loaded into memory until you reference it. The file contents can be quite large, so use the properties and functions on FileToUpload to determine whether to use the Data property.  Referencing the data property will force the entire file to be loaded into memory.

The type of FileToUpload.data is blob, even if the file that has been uploaded is plain ASCII.</description>
			</case>
			
		</cases>
		
	</section>
	
	
	<section>
		<description>

To enforce a restriction on what is uploaded, you must first allow the user to upload the file, then you can use Xbasic to see if it meets your criteria. This is a limitation of HTML and not of the Application server. For example, to enforce a maximum file upload size, you would look at FileToUpload.Size.

If the file meets your criteria, you can then save FileToUpload to a file using FileUpload.SaveToFile(), put it into a field in your table, etc. If it does not meet your criteria, simply don't do anything with the uploaded data and it will be deleted from memory when the page finishes loading. Tip: To save the data in blob variable to a file, use SaveToFile().

</description>
		
	</section>
	
	
	<section>
		
		
	</section>
	<section>
		<description>
The following example shows how to implement file uploading to the Application Server. Place this code into a page named "fileupload.a5w". The uploaded file will be placed in the document root as defined on the General tab of the Application Server Control Panel. 
		</description>
		<example><![CDATA[<html>
<%a5
dim msg as c = ""
if eval_valid("Request.Variables.FileToUpload")
    FileToUpload = Request.Variables.FileToUpload
    FileToUpload.SaveToFile(ServerSetting.Document_Root + "\\" + FileToUpload.FileName)
    msg = "<a href=\"/" + FileToUpload.FileName + "\" target=\"_blank\">" + FileToUpload.FileName + "</a> was uploaded<br /><br />"
end if
%>
<head>
<title>File Upload example</title>
</head>
<body bgcolor="#ffffff">
<%a5 ? msg %>
<form action=" <%a5 ? request.script_name %> " method="POST" enctype="multipart/form-data">
<input type="file" name="FileToUpload" value=""><br />
<input type="submit" name="cmd" value="Upload File">
</form>
</body>
</html> ]]></example>
	</section>
	<section>
		
		
	</section>
	
</sections>	
	<see>
		<ref>A5W Page HTML FORM Syntax</ref>
	</see>
	
	
</page>