<page>
	<topic>Grid Fields</topic>
	<description>A rundown of options for creating and manipulating grid fields in the Grid Component builder.</description>
	<groups>
		<group>
			<sections>
				<section>
					<title>Selecting the Fields to Display</title>
					<steps>
						<step>
							<description>Display the Grid > Fieldspage.</description>
						</step>
						<step>
							<title>Do you want the grid to be editable?</title>
							<description>If you want the grid to be updateable, but initially specified read-only, you may check the editable?checkbox.</description>
							<cases>
								<case>
									<note>Although a grid starts out as updateable, it can still be read only. This has the virtue of using text boxes instead of labels to represent the data in the grid, which in turn provides more reliable formatting alternatives, as well as the ability to copy data
										from the fields. If you change a grid that started out as updateable to read only, you will have to manually reset the grid field control types to label. If the grid is updateable, you may also disable the update properties of any particular field.</note>
								</case>
								<case>
									<title>Refresh the Available Fields List</title>
									<description>If a field that you know is part of the table is not visible in the Available Fieldslist (typically after you have restructured a table), go to the Grid > Query page and click [round_img] to refresh it.</description>
								</case>
							</cases>
						</step>
						<step>
							<title>Add to the Selected Fields List</title>
							<description>Display the Grid > Fieldspage.</description>
						</step>
						<step>
							<description>Use [left_img] and [leftleft_img] to move fields from the Available Fieldslist to the Selected Fieldslist.</description>
						</step>
						<step>
							<description>Use [right_img] and [rightright_img] to move fields from the Selected Fieldslist to the Available Fieldslist.</description>
						</step>
						<step>
							<description>Optionally, use the [upbar_img], [up_img], [down_img] and [downbar_img] buttons to reorganize the sequence of selected fields.</description>
						</step>
					</steps>
				</section>
				<section>
					<title>Detail View Considerations</title>
					<description>When creating a Detail View, it is necessary to have a unique key for each record. Thus, if you are going to have a Detail View, you must:</description>
					<steps>
						<step>
							<description>Add your key field into the Selected Fieldslist.</description>
						</step>
						<step>
							<description>Select the control that contains the key field and change its Display Settings > Control typeto "Link".</description>
						</step>
						<step>
							<description>Change the control's Link Properties > Link address typeto "DetailView Link".</description>
						</step>
						<step>
							<description>Display the Detail View > Propertiespage.</description>
						</step>
						<step>
							<description>Select the control that contains the key field in the Detail view hyperlink field > Hyperlink fieldlist.</description>
						</step>
					</steps>
				</section>
				<section>
					<description>There are two other special fields named and that can identify a record's position in the grid and in the current query. However, in a multi-user environment, cannot be relied upon to provide a consistent link to the target record. In this case you would want
						to create an expression based on two or more fields in the source table and use this expression as the Hyperlinkfield of the Detail View properties page.</description>
				</section>
			</sections>
		</group>
		<group background="true">
			<sections>
				<section>
					<title>Grid Field Properties</title>
					<description>The Grid Fields page is where you define what fields you will use in your grid, insert special controls, and set properties for individual controls. To display an individual field's Properties menu simply select that field in the Selected: Fields list. The
						properties for each field control you select are defined on the right side of the screen. These Field Properties change depending on the control selected, whether that control is editable or not, and the nature of the grid layout selected. The default values
						for these properties produce a useable starting configuration for your grid. This means that you can largely ignore these optional properties when you are learning to build grids or you expect to gradually refine your design in later revisions.</description>
				</section>
				<section>
					<description>By default the Field Properties for any given field are displayed by Category. Right clicking on the white space in the Field Properties list will display other options. These include Categorized , the default, which displays menu options in groups; Alphabetical ,
						which displays all menu options in a single alphabetized group; The Toolbar visible option, which displays buttons that switch between Categorized and Alphabetical display modes; and the Help visible option, which displays help for the currently selected property
						at the bottom of the property menu</description>
				</section>
			</sections>
		</group>
		<group>
			<sections>
				<section>
					<title>Property Menu Options:</title>
					<description>Right click in whitespace for menu options</description>
					<figure>
						<link>images/01_fprop.png</link>
					</figure>
				</section>
				<section>
					<note>It is notpossible to display a default value for a field in a grid's new record row. However, you can insert a default value if the user leaves the field blank by inserting a script into the grid's BeforeValidateNewRecordsevent.</note>
				</section>
			</sections>
		</group>
		<group background="true">
			<title>Display Settings</title>
			<sections>
				<section>
					<title>Control type</title>
					<description>If your grid is ' Read only ', then the fields that you put on the grid will be displayed by default using Label  controls. If the grid is Updateable , then the fields initially will be displayed using textbox controls. Label controls display the value of
						the field but do not have a width setting. In contrast, Textbox controls always have a specified character width, even if the field is Read only. For some data types, such as Images  and dates, you will have to manually select the control type. You can select
						other control type by using the Control Type dropdown under Display Settingsin the Field Properties list. The types of controls that you can place on a grid are:</description>
				</section>
			</sections>
		</group>
		<group>
			<sections>
				<section>
					<cases>
						<case>
							<title>Label</title>
							<description>A read-only control suitable for character, numeric, and date/time data.</description>
							<figure>
								<link>images/01_alabel.png</link>
							</figure>
						</case>
						<case>
							<title>Textbox</title>
							<description>An editable control suitable for character, numeric, and date/time data.</description>
							<figure>
								<link>images/01_acontrol2.png</link>
							</figure>
						</case>
						<case>
							<title>TextArea</title>
							<description>Similar to a text box, but with multiple lines.</description>
							<figure>
								<link>images/01_acontrol3.png</link>
							</figure>
						</case>
						<case>
							<title>Link</title>
							<description>A link that may open another page or select a record to display.</description>
							<figure>
								<link>images/01_acontrol4.png</link>
							</figure>
						</case>
						<case>
							<title>Image</title>
							<description>Displays either embedded or linked images.</description>
							<figure>
								<link>images/01_acontrol5.png</link>
							</figure>
						</case>
						<case>
							<title>DropDownBox</title>
							<description>A list box that appears as either a list or combo box. Drop-down boxes present a selection from an existing list of values; that is hard coded or retrieved from a table.</description>
							<figure>
								<link>images/01_acontrol6.png</link>
							</figure>
						</case>
						<case>
							<title>RadioButton</title>
							<description>A circular button that allows users to select from a list of values.</description>
							<figure>
								<link>images/01_acontrol7.png</link>
							</figure>
						</case>
						<case>
							<title>Checkbox</title>
							<description>A square box that allows a selection from a list of values.</description>
							<figure>
								<link>images/01_acontrol8.png</link>
							</figure>
						</case>
						<case>
							<title>Custom</title>
							<description>You define the data to display and its formatting using Xbasic and HTML.</description>
							<figure>
								<link>images/01_acontrol9.png</link>
							</figure>
						</case>
						<case>
							<title>Hidden</title>
							<description>Hides controls without hiding the column that contains them.</description>
							<figure>
								<link>images/01_acontrol10.png</link>
							</figure>
							<example><![CDATA[tmpl.Field_Info[N] .controltype as C ]]></example>
						</case>
					</cases>
				</section>
			</sections>
		</group>
		<group background="true">
			<sections>
				<section>
					<title>Control javascript</title>
					<description>You can specify Javascript for each control in the Grid's Grid part or Detail View part. This makes it very easy to use 3rd party libraries, such as jQuery, to decorate controls. When you define the Javascript for a control, you can use the special {grid.controlId}
						placeholder. This placeholder gets replaced at run-time with the actual Id of the control. Example code to use the jQuery datepicker (ignore any markers you see):</description>
				</section>
			</sections>
		</group>
		<group>
			<sections>
				<section>
					<example><![CDATA[jQuery('#{Grid.ControlIdEscaped}').datepicker( { onSelect: function(dateText, inst) { //get the ID of the control var id=i nst.id; //the ID is encoded for jQuery ( periods are converted to \\.) - remove the encoding. id=$ u.s.tran(id,'\\',''); id=i
						d.split('.'); //get the name of the control. it is the word after the last period id=i d[id.length-1]; {grid.object}.setValue('G',id,{grid.rowNumber},dateText); } } ); ]]></example>
				</section>
				<section>
					<description>Here is another, much simpler way of doing it. This causes the control's 'change' event to fire when the selection is made, thus causing the record to go dirty.</description>
					<example><![CDATA[jQuery('#{Grid.ControlIdEscaped}').datepicker( { onSelect: function(dateText, inst) { $e.execute(this,'change') } } ); ]]>
					</example>
				</section>
				<section>
					<description>Notice that when the user makes a selection from the date picker, it puts the value in the control, but does not cause the row to go dirty. That's because jQuery did not automatically call the Grid's .setValue() method to set the field value (which would have
						caused the row to go dirty). Therefore, it is necessary to hook the jQuery date picker's onSelect event where we can call the Grid object's .setValue() method.</description>
				</section>
				<section>
					<description>See Also, JQuery Support</description>
				</section>
				<section>
					<title>Grid and UX Component - jQuery Date Picker</title>
					<description>The Grid and Dialog Component both have a 'Control Javascript' property. This property can be used to define any Javascript that you want to emit when the control is rendered. This property can be used to for many different reasons. This video shows how the
						property can be used to hook up the jQuery date picker.</description>
				</section>
				<section>
					<videos>
						<video>
							<name>Watch Video</name>
							<link>http://www.ajaxvideotutorials.com/V11Videos/JqueryDatePickerInGrid.swf</link>
						</video>
					</videos>
				</section>
				<section>
					<description>See Also JQuery Support</description>
				</section>
			</sections>
		</group>
		<group background="true">
			<sections>
				<section>
					<title>Display format</title>
					<description>If the control type is Label, Link, TextBox, or TextArea, the Display Format property allows you to automatically change the presentation of your data. For example, a money value could be displayed with its currency symbol and commas, and with the correct
						number of decimal characters. An In-Line style overrides the formatting of the cascading style sheet. If you wanted the text to be bolded, or in a different font, point size, or color, this is where you would define the formatting. You may want to allow only
						certain users to see a field. To do this set a minimum user security level required before the field will display. You may want to allow the user to see the fields in a grid, but not edit, delete, or insert records. To do this, set three different permission
						properties that control grid update. You may also want to define validation rules to improve the quality of user input.</description>
				</section>
				<section>
					<description><![CDATA[This expression formats the data after it has been entered into the field. Click to display the Display Format dialog box. This property should be set to one of the following values: Null (empty) An Xbasic expression that returns a character value.
						The expression should use & < value> as Placeholder for the field value, as in the following example: f_upper(& < value>).  Optionally, click Select Pre-Defined Format to select a format from the Pre-Defined Formats dialog box. 
Note : There are no predefined display formats for short time (Y) fields. However, you can write your own.  
Note : If the control type is "TextBox" and the field type is "Date", then a Date Picker will appear. You must set the tmpl.Field_Info[N].DatePicker.DateFormat to the same style. See Date Picker DateFormat.  
]]></description>
				</section>
			</sections>
		</group>
		<group>
			<sections>
				<section>
					<cases>
						<case>
							<title>Display Format</title>
							<example><![CDATA[tmpl.Field_Info[N] .DisplayFormat as C ]]></example>
						</case>
						<case>
							<title>Display unformat</title>
							<description>If you set a Display Format, you may also place a character expression in the this field. This expression reformats the data before it is stored in the database.</description>
							<example><![CDATA[tmpl.Field_Info[N] .DisplayUnFormat as C ]]></example>
						</case>
					</cases>
				</section>
			</sections>
		</group>
		<group>
			<title>Conditional style</title>
			<description>The conditional formatting option in Alpha Anywhere lets you format data conditionally, depending on its value. For example, you might set the color of the quantity field to be red if it is above average. In the video, you'll see the conditional formatting
				in action, including conditional formatting at the cell and control level, and conditional formatting at the row level. To see how to add conditional images to a grid, check out this video. Where this property allows you to alter the styles of a field, you
				can also alter the style of a given row using the Conditional Style properties in the Shading and Dividers section of the Grid Properties page.</description>
			<videos>
				<video>
					<name>Conditional Formatting Video</name>
					<link>http://www.screencast.com/users/AlphaSoftware/folders/Jing/media/f0ed6fba-5990-46ce-a5ea-cbd26106c2ae</link>
				</video>
				<video>
					<name>Conditional Images Video</name>
					<link>http://screencast.com/t/vx3dDw1t</link>
				</video>
			</videos>
		</group>
		<group>
			<sections>
				<section>
					<title>Create a Conditional Style for a Field:</title>
					<steps>
						<step>
							<description>Open the Grid Builder and go to the Design tab. On the Component Type page select read-only</description>
						</step>
						<step>
							<description>On the Data Source page select either .dbf or SQL . This example uses the SQL table Northwindsdatabase.</description>
						</step>
						<step>
							<description>On Query(DBF) or Query(AlphaDAO) create the connection to your database and select a table to work with. This example uses the Order_detailstable.</description>
						</step>
						<step>
							<description>On the Fields page add some fields from the Available Fields: list to the Selected: fields list.</description>
							<figure>
								<link>images/01_constyle.png</link>
							</figure>
						</step>
						<step>
							<description>Select a selected field, in this case Quantity, and scroll down the field's property list to the Summary values section.</description>
							<figure>
								<link>images/01_constyle2.png</link>
							</figure>
						</step>
						<step>
							<description>Check the Average checkbox under the Summary values section.</description>
							<figure>
								<link>images/01_constyle3.png</link>
							</figure>
						</step>
						<step>
							<description>Still in Field Properties , go to the Display Settings and click the Conditional style property button.</description>
							<figure>
								<link>images/01_constyle4.png</link>
							</figure>
						</step>
						<step>
							<description>The Conditional Style (Server-side) dialog will open. Click the Add condition button at the bottom of the dialog.</description>
							<figure>
								<link>images/01_constyle5.png</link>
							</figure>
						</step>
						<step>
							<description>The Edit Condition dialog will load. Click the ' Insert Fieldname ' hyperlink.</description>
							<figure>
								<link>images/01_constyle6.png</link>
							</figure>
						</step>
						<step>
							<description>Add the 'Quantity' field, or the fields you are using, to your expression. Then after it add '> summary.quantity.average' to complete the Expression.</description>
							<cases>
								<case>
									<example><![CDATA[Quantity> summary.quantity.average  
]]>
									</example>
								</case>
								<case>
									<figure>
										<link>images/01_constyle7.png</link>
									</figure>
								</case>
							</cases>
						</step>
						<step>
							<description>In the Style: menu click on the Font color selector button and change the font color. Click OK to add the Expression to the Conditional Style dialog.</description>
							<figure>
								<link>images/01_constyle8.png</link>
							</figure>
						</step>
						<step>
							<description>
								<![CDATA[Click the Add condition button again. Add a second condition, this time using a less than < sign . ]]>
							</description>
							<example><![CDATA[Quantity < summary.quantity.average ]]>
							</example>
						</step>
						<step>
							<description>Set a different Font color for this condition. Click OK, the Conditional Style (Server-side) dialog should now look something like this:</description>
							<figure>
								<link>images/01_constyle9.png</link>
							</figure>
						</step>
						<step>
							<description>Now go to Live Preview > Full Preview . All of the records in the Quantity field should be colored differently, depending on if they are above or below the average. In the Quantity field blue is below and green above average</description>
							<figure>
								<link>images/01_constyle10.png</link>
							</figure>
							<cases>
								<case>
									<title>Add Conditional images:</title>
									<description><![CDATA[Fields. choose image (insert) Conditional style Quantity > summary.quantity.average Choose image file. built in system image Quantity
										< summary.quantity.average Can insert custom javascript onto the control ]]></description>
								</case>
							</cases>
						</step>
					</steps>
				</section>
			</sections>
		</group>
		<group background="true">
			<sections>
				<section>
					<title>Initial value</title>
					<description></description>
				</section>
			</sections>
		</group>
		<group background="true">
			<sections>
				<section>
					<title>Bubble help</title>
					<description></description>
				</section>
			</sections>
		</group>
		<group background="true">
			<sections>
				<section>
					<title>Validation rules</title>
					<description>The Validation rules property defines how your grid component will respond when a user inputs data into an editable field. As with the Field Properties list, these rules change depending on what type of control you are working with.</description>
					<cases>
						<case>
							<title>Invalid data type error message</title>
							<description>The 'Invalid data type error message' rule works with all fields except character fields. This rule allows you to define a message that will display if the user types in an invalid date, time, short time, or number into an input field.</description>
							<figure>
								<link>images/01_fframe16.png</link>
							</figure>
						</case>
					</cases>
				</section>
			</sections>
		</group>
		<group background="true">
			<sections>
				<section>
					<title>Validation Xbasic</title>
					<description></description>
				</section>
			</sections>
		</group>
		<group background="true">
			<sections>
				<section>
					<title>Immediate validation</title>
					<description></description>
				</section>
			</sections>
		</group>
		<group background="true">
			<sections>
				<section>
					<title>Has help</title>
					<description></description>
				</section>
			</sections>
		</group>
		<group background="true">
			<title>Client Side Properties</title>
			<sections>
				<section>
					<description>'Client-side' properties for a Grid include Calculated Fields, Show/hide Fields, Enable Expressions, Conditional Styles, and Client-side Formatting. Client-side Calculated fields are computed using Javascript. The calculation is performed as soon as any of
						the operands, i.e. javascript variables, in the client-side calculation change. You must therefore add formatting logic into your client-side calculated expressions. To see an example watch this video.</description>
					<videos>
						<video>
							<name>video</name>
							<link>http://www.ajaxvideotutorials.com/V10Videos/ClientSideCalcFields.swf</link>
						</video>
					</videos>
				</section>
				<section>
					<title>Show/hide Fields</title>
					<description>Show/hide Fields can be used with any field or Container. If you want to show/hide multiple fields at once, wrap the fields in a the show/hide expression for the container. Hiding fields can be useful. For example, you might have a grid with a 'billing address'field,
						a 'shipping addressfield', and a " shipping address is the same as billing address' field. If the later is checked, you might then want to hide the entire shipping address part of the grid. Here is the video.</description>
					<videos>
						<video>
							<name>video</name>
							<link>http://www.ajaxvideotutorials.com/V10Videos/ClientSideShowHide.swf</link>
						</video>
					</videos>
				</section>
				<section>
					<title>Enable Expression</title>
					<description>Enable Expression allows you to enable or disable an input control. Conditional Styles contain conditions that are evaluated in a Browser using Javascript. This makes it possible to dynamically style controls without having to make Ajax callbacks. For example,
						if a user enters an exceedingly large value into a Quantity field, the entry can immediately be displayed in red to show it is too big. In contrast to 'client-side' conditional styles, 'server-side' conditional styles use conditions that are expressed using
						Xbasic expressions. These conditions are then evaluated on the server. The video below shows how client-side conditional styles can be used to display a different font and background color depending for different ranges of values.</description>
					<videos>
						<video>
							<name>video</name>
							<link>http://www.ajaxvideotutorials.com/V10Videos/ClientSideConditionalStyle.swf</link>
						</video>
					</videos>
				</section>
				<section>
					<title>Client-side Formatting</title>
					<description>can be used to define masks for character fields or number formats for numeric fields. For example, you might use a mask in formatting a US Phone number: ( ) -. For more on using client side properties check out this video.</description>
					<videos>
						<video>
							<name>video</name>
							<link>http://www.ajaxvideotutorials.com/V10Videos/UsingUserDefinedJavascriptInClientSideCalculations.swf</link>
						</video>
					</videos>
				</section>
				<section>
					<note>The Client-side expressions that are used to define Client side properties can reference system fields. System fields are fields that are inherent inside Alpha Anywhere and that are not defined in the Query table you are using to access your data. Using these
						references can be used make your expressions more dynamic and can be used with different types of data. For example, grid.rowIsCheckedis a logical system field that will return true if the current row is checked. grid.checkedRowCountis a numeric system field
						that holds a count of the number of checked rows.</note>
				</section>
			</sections>
		</group>
		<group>
			<sections>
				<section>
					<title>Client side formatting</title>
					<description></description>
				</section>
				<section>
					<title>Format type</title>
					<description>The Mask Builder Dialog</description>
					<figure>
						<link>images/01_maskb.png</link>
					</figure>
				</section>
				<section>
					<title>Format definition</title>
				</section>
				<section>
					<title>Calculated field expression</title>
				</section>
				<section>
					<title>Show/hide expression</title>
					<description>When you define a client-side show/hide expression, you can also specify an animation effect to execute when the target object is shown or hidden. As demonstrated in the image below, when you open the expression builder there is a checkbox ' Animate show/hide '.
						When this box is clicked, the 'Define Animation' button is shown. The image below shows the dialog that is shown when the button is pressed. When you examine the expression in the property Grid, it will look something like this:</description>
					<cases>
						<case>
							<example><![CDATA[[Fade,Slow|Fade,Fast]]Region=" MA" ]]></example>
						</case>
						<case>
							<description>The animation expression is added in front of the show/hide expression and is enclosed in braces ]. It shows the animation effect and duration for the 'show' action and the 'hide' action.</description>
							<figure>
								<link>images/01_ashowhide.png</link>
							</figure>
						</case>
					</cases>
				</section>
				<section>
					<title>Enable expression</title>
				</section>
				<section>
					<title>Conditional style</title>
					<description>Conditional styling for a Grid row, checked rows are red. Unchecked rows are black.</description>
					<figure>
						<link>../../../../../Client/Guide/Design/View/Grid/images/clienside_onrowchecked.jpg</link>
					</figure>
				</section>
			</sections>
		</group>
		<group background="true">
			<title>Control Properties</title>
			<sections>
				<section>
					<description></description>
				</section>
			</sections>
		</group>
		<group background="true">
			<sections>
				<section>
					<title>Label Properties</title>
					<cases>
						<case>
							<title>In-line style</title>
							<description>Specifies style attributes that override the settings inherited from the style sheet. Click [dot_img] to define the In-line style. Refer to the Style Editor for details.</description>
							<example><![CDATA[tmpl.Field_Info[N] .Label.InLineStyle as C ]]></example>
						</case>
					</cases>
				</section>
			</sections>
		</group>
		<group background="true">
			<sections>
				<section>
					<title>TextBox Properties</title>
					<description>The most important properties of a TextBox control are the Size and MaxLength properties. The MaxLength should match the field definition in your table. The size can be large></description>
					<cases>
						<case>
							<title>HTML5type</title>
							<description></description>
						</case>
						<case>
							<title>Size</title>
							<description>Sets the width of the field in characters.</description>
							<note>No matter what you specify for height and width of a control, if the content is larger, then your browser will expand the table cell for you. There is no way to avoid this from the design of your grid or HTML. You can trim your data if it is crucial that your
								cells never expand. And even then, you have no control over the fonts being used by your user's browser so they could have things set to be really large and still be larger than the table cell.</note>
						</case>
						<case>
							<title>MaxLength</title>
							<description>Sets the maximum length of the user's input in characters.</description>
						</case>
						<case>
							<title>In-line style</title>
							<description>Specifies style attributes that override the settings inherited from the style sheet. Click to define the In-line style. Refer to the Style Editor for details.</description>
						</case>
						<case>
							<title>Container in-line style</title>
							<description></description>
						</case>
						<case>
							<title>Is a password field</title>
							<description>If this is a password field, the characters will be replaced with bullets.</description>
						</case>
						<case>
							<title>Watermark</title>
							<description>Sometimes, the size of screen matters when a user is accessing an application you've created. So how do you build an effective application to be used when screen real estate is limited, such as an Ajax Web app that will run on an iPhone? That's why "liquid"
								forms are an increasingly popular platform for running Web applications today. Liquid forms automatically reconfigure themselves based on the screen size. That's necessary for something like a smart phone,ine- color: initial; " This first video  we put together
								will show how the grid makes it easy to design liquid forms. Watermark fields    are also an effective tool for dealing with small screen sizes. Watermark fields let you put the field label inside the field itself. This is a great way to save space when you
								don't have space to spare.</description>
							<videos>
								<video>
									<name>This first video</name>
									<link>http://www.screencast.com/users/AlphaSoftware/folders/Jing/media/b2401e42-5c83-468a-8960-1f74a935367b</link>
								</video>
								<video>
									<name>Watermark fields</name>
									<link>http://www.screencast.com/users/AlphaSoftware/folders/Jing/media/a0a0b477-5f14-4458-a153-516e48ac3b32</link>
								</video>
							</videos>
						</case>
						<case>
							<title>Custom attributes</title>
							<description></description>
						</case>
						<case>
							<title>Code Examples</title>
							<cases>
								<case>
									<title>Size</title>
									<example><![CDATA[tmpl.Field_Info[N] .Textbox.Size as N ]]>
									</example>
								</case>
								<case>
									<title>MaxLength</title>
									<example><![CDATA[tmpl.Field_Info[N] .Textbox.MaxLength as N ]]>
									</example>
								</case>
								<case>
									<title>Date Picker</title>
									<description>Specifies whether the control should have a pop-up calendar.</description>
									<example>
										<![CDATA[tmpl.Field_Info[N] .DatePicker.Display as L ]]>
									</example>
								</case>
								<case>
									<title>In-line style</title>
									<example><![CDATA[tmpl.Field_Info[N] .Textbox.InLineStyle as C ]]>
									</example>
								</case>
								<case>
									<title>Is a password field</title>
									<example><![CDATA[tmpl.Field_Info[N] .Textbox.IsPassword as L ]]>
									</example>
								</case>
								<case>
									<title>Control In-line error style</title>
									<description>Specifies style attributes that are used when a validation error occurs. Click [dot_img] to define the In-line style. Refer to the Style Editor for details.</description>
									<example><![CDATA[tmpl.Field_Info[N] .Textbox.ErrorInlineStyle as C ]]>
									</example>
								</case>
							</cases>
						</case>
					</cases>
				</section>
			</sections>
		</group>
		<group background="true">
			<sections>
				<section>
					<title>TextArea Properties</title>
					<description>The most important properties of a TextArea control are the Rows and Columns properties, which define its size.</description>
					<cases>
						<case>
							<title>HTML editor</title>
							<description>If you are creating an Updateable grid you can check the HTML editor property checkbox and add an HTML editor to your grid. This will allow users to easily add HTML to their records. If you want to add this property to a number of fields then you will need
								to go to Display Settings in the Field Properties list and change the Control Type for each field to TextArea . After creating a second TextArea control, simply check the HTML property again for that control, or use the eyedroppertool.</description>
						</case>
						<case>
							<description>The HTML editor comes with a number of additional properties. HTML editor width defines the width between columns that the unopened editor fills. Similarly HTML editor height specifies the row height of the unopened editor. These properties are for the default
								editor, where a user clicks on a given TextArea control to open the HTML editor for that record. However, you can also define a Popup mode by checking the HTML editor is popup property checkbox. When you add a popup HTML editor to the Grid, to edit HTML fields,
								the data in the Grid is not saved when the user closes the popup HTML editor. The data is only saved when the user clicks the Submit button. The Save grid data when closing popup editor property allows you to automatically submit the data in the Grid as soon
								as the popup HTML editor is closed. Unopened HTML editor width</description>
							<figure>
								<link>images/01_htmled2.png</link>
							</figure>
						</case>
						<case>
							<description>An Open HTML editor</description>
							<figure>
								<link>images/01_htmled.png</link>
							</figure>
						</case>
						<case>
							<figure>
								<link>images/SaveHTMLOnClosePopup.gif</link>
							</figure>
						</case>
						<case>
							<title>Rows</title>
							<description>Sets the height of the control by specifying the number of rows.</description>
							<example><![CDATA[tmpl.Field_Info[N] .TextArea.Rows as N ]]></example>
						</case>
						<case>
							<title>Columns</title>
							<description>Set the width of the control by specifying the number of columns.</description>
							<example><![CDATA[tmpl.Field_Info[N] .TextArea.Cols as N ]]></example>
						</case>
						<case>
							<title>In-line Style</title>
							<description>Specifies style attributes that override the settings inherited from the style sheet. Click to define the In-line style. Refer to the Style Editor for details.</description>
							<example><![CDATA[tmpl.Field_Info[N] .TextArea.InLineStyle as C ]]></example>
						</case>
						<case>
							<title>Watermark</title>
							<description>Sometimes, the size of screen matters when a user is accessing an application you've created. So how do you build an effective application to be used when screen real estate is limited, such as an Ajax Web app that will run on an iPhone? That's why "liquid"
								forms are an increasingly popular platform for running Web applications today. Liquid forms automatically reconfigure themselves based on the screen size. That's necessary for something like a smart phone,ine- color: initial; " This first video  we put together
								will show how the grid makes it easy to design liquid forms. Watermark fields    are also an effective tool for dealing with small screen sizes. Watermark fields let you put the field label inside the field itself. This is a great way to save space when you
								don't have space to spare.</description>
						</case>
					</cases>
				</section>
			</sections>
		</group>
		<group background="true">
			<sections>
				<section>
					<title>Link Properties</title>
					<description>An essential decision about a link control is what it will display. The options are: Value in field, Value from other field(s), Static text, Static image, Image in another control Link controls have choices for the Link address type. The link could be: a URL
						(presumably also a field value), an email address (presumably also a field value), a link to the detail view form, a value that is computed (see Link Address Builder ), a value that specifies filter, order, and/or linking informationfor the records in a second
						grid</description>
					<example><![CDATA[with tmpl.field_info[N] .link.InLineStyle as C ]]>
					</example>
					<cases>
						<case>
							<title>In-line style</title>
							<description>Specifies style attributes that override the settings inherited from the style sheet. Click to define the In-line style. Refer to the Style Editor for details.</description>
						</case>
						<case>
							<title>Display what in link?</title>
							<description>
								<p>Specifies style attributes that override the settings inherited from the style sheet. Click to define the In-line style. Refer to the Style Editor for details. Specifies what is displayed in the link. The options are:"Value in field", "Value from other field(s)",
									"Static text", "Static image", "Image in another control"</p>
								<p>Field(s) to display - Specify the HTML to display in the link. Use field placeholders to include values from other fields in the grid. Typically, the fields that you reference will have the Hide row or Hide column properties checked. Static text - Specify
									the text to display in the link. Static image - Specify the image to display in the link. Dynamic image control - Specify the control that contains the image to display. Link address type</p>
							</description>
							<example><![CDATA[with tmpl.field_info[N] .link.DisplayType as C]]>
							</example>
						</case>
						<case>
							<title>Using Images in Link Fields:</title>
							<cases>
								<case>
									<description>Open the Grid Builder . On the Design tab click on the Component Type page and select Tabular in the Grid Layout menu.</description>
								</case>
								<case>
									<description>Open the Data Source page and select either .dbf or SQL .</description>
								</case>
								<case>
									<description>On the Query(DBF) or Query(AlphaDAO) page select the table you will work from.</description>
								</case>
								<case>
									<description>Open the Fields page. Select several fields and move them from the Available Fields: list into the Selected: fields list; using the arrows between the two list.</description>
								</case>
								<case>
									<description>Select the field that you want to contain the linking data.</description>
								</case>
								<case>
									<description>Go to the selected field's Field Properties list. Under the Display Settings section find the Control type property. Set the control type to 'link '.</description>
								</case>
								<case>
									<description>Now go to the Link Properties section of the Field Properties. Find the Display what in link? property and select "Image in another control ".</description>
								</case>
								<case>
									<description>While in Link Properties set the Dynamic image control property to the name of the image field you wish to display. For the Link address type property select "DetailView link ".</description>
								</case>
								<case>
									<description>Images may be used in hyperlinks and in link fields to detail view forms.</description>
									<figure>
										<link>images/WP_Image_before_link.gif</link>
									</figure>
								</case>
								<case>
									<title>Preview of the grid showing both ID and Thumbnail fields before modification.</title>
									<cases>
										<case>
											<description>1. For the field that contains the linking data:</description>
											<cases>
												<case>
													<description>1. In Display Settings > Control typeset the control type of the field to "link".</description>
												</case>
												<case>
													<description>2. In Link Properties > Display what in link?select "Image in another control".</description>
												</case>
												<case>
													<description>3. In Link Properties > Dynamic image controlselect the name of the image field that you wish to display.</description>
												</case>
												<case>
													<description>4. In Link Properties > Link address typeselect "DetailView link".</description>
												</case>
											</cases>
										</case>
										<case>
											<description>2. For the field that contains the image you wish to display:</description>
											<cases>
												<case>
													<description>In Column Properties > Hide columncheck the check box. Preview of the grid after modification showing the Thumbnail image in the ID field:</description>
													<figure>
														<link>images/WP_Image_as_link.gif</link>
													</figure>
												</case>
											</cases>
										</case>
									</cases>
								</case>
							</cases>
						</case>
						<case>
							<title>Static Text:</title>
							<description>You use the Link Display Valuedialog box to compose the HTML code that will be displayed in a link. The link may contain references to any of the fields on the grid.</description>
							<example><![CDATA[with tmpl.field_info[N] .StaticText as C]]>
							</example>
							<cases>
								<case>
									<description>1. Select the field placeholders in the Available Fieldslist that you want to use in the link expression.</description>
								</case>
								<case>
									<description>2. Arrange the field placeholders in the order that you want to see them in the expression.</description>
								</case>
								<case>
									<description>3. Optionally, add any text that you want around the fields.</description>
								</case>
								<case>
									<description>4. Optionally, click HTML Editorto use it to format the expression.</description>
								</case>
								<case>
									<description>5. Click OKto save your work or Cancelto discard it.</description>
								</case>
							</cases>
						</case>
						<case>
							<title>Link address type</title>
							<description>You can specify that the link address type is 'Javascript'. Any Javascript function call or command can be added to the 'onclick' event. The Javascript will be executed when the link is clicked. "Field Value is a Link address" , "Field Value is an email address" ,
								"DetailView link" , "Computed from fields in the grid" , "Javascript"</description>
							<example><![CDATA[with tmpl.field_info[N] .Link.Type as C ]]>
							</example>
							<figure>
								<link>images/01_flink.png</link>
							</figure>
						</case>
						<case>
							<description>Javascript link with an onClick event opening an alert box.</description>
							<figure>
								<link>images/01_aa.png</link>
							</figure>
						</case>
						<case>
							<title>Link Address</title>
							<description>When the Link address type is "Computed from fields in the grid", this field appears. Click to define the link address in the Link Address Builder .</description>
							<example><![CDATA[with tmpl.field_info[N] .link.ComputedAddress ]]>
							</example>
							<cases>
								<case>
									<title>Link Address Builder</title>
									<description>A common requirement is to open a page that contains a grid component, showing just records that match certain values. For example, assume that when you click the hyperlink, you want to open a page named CustomerInfo.A5w. We will make the following assumptions
										about this page:</description>
									<cases>
										<case>
											<description>The page contains a Grid component named customers.</description>
										</case>
										<case>
											<description>The table has a field named Customer_ID.</description>
										</case>
									</cases>
								</case>
								<case>
									<title>Alpha Anywhere .DBF Syntax</title>
									<description>If the data is coming from an Alpha Anywheretable, the filter expression that we want to apply to the customersgrid on the CustomerInfo.A5wpage is therefore:</description>
									<example><![CDATA[customer_id="{customerID}" ]]>
									</example>
								</case>
								<case>
									<description>where {customerID}is the value in field for which we are defining the Link control. Grid components understand two special parameters: _Filterand _Order. So, to open the CustomerInfo.A5wpage showing just the records that we want, the computed link address
										is:</description>
									<example><![CDATA[CustomerInfo.A5w?customers_filter=customer_id="{customerID}" ]]>
									</example>
								</case>
								<case>
									<description>Other example computed link address are:</description>
									<example><![CDATA[CustomerInfo.A5w?customers_filter=firstname="{firstname}".and.lastname="{lastname}"?customers_order="{lastname}" OrderInfo.A5w?orders_filter=orderid="{orderid}" ]]>
									</example>
								</case>
								<case>
									<title>SQL Syntax</title>
									<description>The syntax for the "Filter" and "Order" parameters must be appropriate for the database on which the Grid component is based. SQL syntax typically uses single quotes for character values and "AND" and "OR" to join conditions (as opposed to .AND.and .OR.which
										Alpha Anywhere uses for querying local tables). So the above examples would become:</description>
									<example><![CDATA[CustomerInfo.A5w?customers_filter=customer_id='{customerID}' CustomerInfo.A5w?customers_filter=firstname='{firstname}' AND lastname='{lastname}'?customers_order={lastname} OrderInfo.A5w?orders_filter=orderid='{orderid}' ]]>
									</example>
								</case>
								<case>
									<title>Composing a Link Address:</title>
									<description>If you have a field in your grid where the Display Settings > Control Type is "Link":</description>
									<cases>
										<case>
											<description>Click or in the Link Properties > Link Address field to display the Link Address Builder.</description>
										</case>
										<case>
											<description>Select a page from the Pages in Project list and click Insert Page.</description>
										</case>
										<case>
											<description>Position the cursor in the Link Address text box, select a field placeholder from the Grid Fields list, and click Insert Field. Repeat as Necessary.</description>
										</case>
										<case>
											<description>Add additional syntax elements as Necessary to the Link Address text box.</description>
										</case>
										<case>
											<description>Click OK to save your inputs or Cancel to discard them.</description>
										</case>
										<case>
											<description>See Also, Creating Grid Components, Automatically Populating Linking Field Values</description>
										</case>
									</cases>
								</case>
							</cases>
						</case>
						<case>
							<title>Target frame or window</title>
							<description>The default is "Explicit". Defines where to display the linked page. The default is Null. The options are: Blank (opens in a new window) "Explicit", "WindowName" (e.g. "Window2"), "_blank", "_parent", "_self", "_search", "_top"</description>
							<example><![CDATA[tmpl.Field_Info[N] .Link.targetFrameOrWindow as C ]]>
							</example>
							<cases>
								<case>
									<title>Clear Parameters</title>
									<description>The default is .F. . Specifies whether the target URL preserves existing parameters.</description>
									<example><![CDATA[tmpl.Field_Info[N] .Link.ClearParameters as L ]]>
									</example>
								</case>
								<case>
									<title>Scroll to Detail View</title>
									<description>The default is .T. . Specifies that the page should scroll down to display the detail view form when a record is selected.</description>
									<example><![CDATA[tmpl.Field_Info[N] .Link.ScrollToDetailView as L]]>
									</example>
								</case>
								<case>
									<title>Additional Code Reference</title>
									<cases>
										<case>
											<description>Field(s) to display</description>
											<example><![CDATA[with tmpl.field_info[N] .link.DisplayExpression as C ]]>
											</example>
										</case>
										<case>
											<description>Static image</description>
											<example><![CDATA[with tmpl.field_info[N] .StaticImage as C ]]>
											</example>
										</case>
										<case>
											<description>Dynamic image control</description>
											<example><![CDATA[with tmpl.field_info[N] .link.AlternateImageControl ]]>
											</example>
										</case>
									</cases>
								</case>
							</cases>
						</case>
					</cases>
				</section>
			</sections>
		</group>
		<group background="true">
			<sections>
				<section>
					<title>Image Properties</title>
					<description>This concerns Image properties for images based on field controls. For more information about using image files as Links, see using images in Link Fields.</description>
				<cases>
					<case>
						<title>In-line style 
</title>
						<description>Specifies style attributes that override the settings inherited from the style sheet. Click to define the In-line style. Refer to the Style Editor for details . </description>
			<example><![CDATA[tmpl.Field_Info[N]         
.Image.InLineStyle as C   ]]></example>
					</case>
					<case>
						<title>Text description
</title>
						<description>The text description of the image.    
</description>
<example><![CDATA[tmpl.Field_Info[N]         
.Image.Alt as C   ]]></example>
					</case>
					<case>
						<title>Embed image in HTML
</title>
						<description></description>
					</case>
					<case>
						<title>Scale image on server
</title>
						<description></description>
					</case>
					<case>
						<title>No image found image
</title>
						<description></description>
					</case>
					<case>
						<title>New record image
</title>
						<description></description>
					</case>
					<case>
						<title>Related Properties</title>
						<cases>
							<case>
								<title>Image name</title>
								<description>The name of the image to display. </description>
								<example><![CDATA[tmpl.Field_Info[N]         .Image.Imagename as C]]></example>
							</case>
							<case>
								<title>Is Hyperlink</title>
								<description>Is the image a hyperlink?</description>
								<example><![CDATA[tmpl.Field_Info[N]         
.Image.IsHyperLink as L   ]]></example>
							</case>
							<case>
								<title>Hyperlink target</title>
								<description>The page to display when the link is clicked. </description>
								<example><![CDATA[tmpl.Field_Info[N]         
.Image.hyperlinkTarget as C]]></example>
							</case>
							<case>
								<title>Target frame</title>
								<description>The name of the window that will display the new page.</description>
								<example><![CDATA[tmpl.Field_Info[N]         
.Image.hyperlinkTargetFrame as C   
]]></example>
							</case>
							<case>
								<title>Image path</title>
								<description>For image file references: the folder where the images are stored. </description>
								<example><![CDATA[tmpl.Field_Info[N]          
.Image.ImagePath as C]]></example>
							</case>
							
							
						</cases>
					</case>
					
					
					
				</cases>
				
				
				</section>
			</sections>
		</group>
		<group background="true">
			<sections>
				<section>
					<title>DropDownBox Properties </title>
					<description>DropDownBoxes are appropriate when you want to select a value from a large list of alternatives. The most important properties for a dropdownbox control is the definition of its choices and its height. A height of 1 produces a combo box. A height greater than 1 produces a list box. If you set the height to be more than 1 line, you can also set the multi-select allowed field to "Multiple". This allows the user to select more than one value to insert into the field. (Commas will separate the resulting selections) Note :DropDownBoxes do not allow the user to enter new values.  
</description>
				</section>
			</sections>
		</group>
		<group>
			<sections>
				<section>
					<title>Choices</title>
					<description>Defines the choices the appear in the control. Click [dot_img] to define the true and false Choices set by the check box. Refer to Defining Choices for Check Boxes, Radio Buttons, and Drop Down Listsfor details.  </description>
				
				</section>
				<section>
					<title>Dropdown Controls - Group Headings</title>
					<description>You can now insert group headings in the data displayed in a Dropdown control. For example:
</description>
				</section>
				<section>
					<description>The above list was entered into the choices for the Dropdown control as follows:
</description>
					<example><![CDATA[[[[General Motors]]]
Camaro
Cadilac
GMC
[[[Ford]]]
Mustang
Lincoln
Focus
[[[BMW]]]
3 Series
5 Series
7 Series ]]></example>
					
				</section>
<section>
	<title>Displaying Field1 While Storing Field2:
</title>
<description>The following grid component displays a valuable capability of choice lists used by drop down lists and radio buttons.
The sample grid below is based on the AlphaSports Invoice_Itemstable, which uses the Product_IDfield to link to the Producttable. The second column of the grid displays the Descriptionfield from the Producttable, while it stores the Product_IDfield from the Producttable.
To implement this feature:
</description>	
<steps>
	<step>
		<description>Create an updateable grid based on the AlphaSports Invoice_Itemstable.
</description>
	</step>
	<step>
		<description>Display the Grid > Fieldsmenu of the Grid Component Builder.
</description>
	</step>
	<step>
		<description>Select the "Product_ID" field in the Available Fieldslist.
</description>
	</step>
	<step>
		<description>Change the Display Settings > Control typeto "Dropdownbox".
</description>
	</step>
	<step>
		<description>Click the [dot_img] in the DropDownBox Properties > Choicesfield to display the Define Choicesdialog.
</description>
	</step>
	<step>
		<description>Select "Dynamic" in the Define Choices > List Typefield.
</description>
	</step>
	<step>
		<description>Select "product" in the Data Source > Table namefield.
</description>
	</step>
	<step>
		<description>Select "Description" in the Data Source > Display value field/ex pressionfield.
</description>
	</step>
	<step>
		<description>Select "Product_ID" in the Data Source > Stored value field/ex pressionfield.
</description>
<figure><link>../../Data/FieldRules/images/WPT_Display_One_Field_Store_Another.gif</link></figure>

	</step>
	
	
</steps>	
	
</section>	
<section>
	<description>When you allow the user to select multiple values, the control returns an array. To convert an array to a character value, you need to use an expression like the following.  </description>
	<example><![CDATA[TargetVariable = crlf_to_comma(ControlName.dump()
]]></example>
	
</section>		
<section>
	<title>Related Properties</title>
	<cases>
		<case>
			<title>Height</title>
			<description>Set the height of the label in lines. The default is 1, which produces a combo box. Values larger than 1 produce a list box.</description>
			<example><![CDATA[with tmpl.field_info[N]        .DropdownBox.Size as N]]></example>
		</case>
		<case>
			<title>Multi-select allowed</title>
			<description>Defines whether the user can select more than one value from the list. The options are: "Single"  
"Multiple"  </description>
			<example><![CDATA[with tmpl.field_info[N]          
.DropdownBox.selectStyle as C ]]></example>
		</case>
		<case>
			<title>In-line style</title>
			<description>Specifies style attributes that override the settings inherited from the style sheet. Click to define the In-line style. Refer to the Style Editor for details.  </description>
			<example><![CDATA[with tmpl.field_info[N]          
.DropdownBox.InLineStyle as C]]></example>
		</case>
		<case>
			<title>Not in list rule  </title>
			<description>Specifies the value to display if the list contains a value not coded in the page. The options are:  </description>
			
			<cases>
				<case>
					<description>"Add to list" - display the value  </description>
				</case>
				<case>
					<description>"Do Nothing" - show the first value in the list</description>
				</case>
				<case>
			<example><![CDATA[with tmpl.field_info[N]            
.DropdownBox.NotInListRule as C]]></example>
				</case>
				
				
			</cases>
		</case>
		
		
		
		
	</cases>
	
</section>
				
				
			</sections>
		</group>
		<group>
			<sections>
				<section>
					<title>Displaying Multiple Fields in a Drop Down List:</title>
					<description>Displaying multiple fields in a drop down list is a challenge because browsers automatically compress multiple white-space characters down to a single character. Thus, it is difficult to format columns.
This example uses the underscore character "_" to guarantee that fields and columns are aligned. This example is based on the Invoice_Itemstable of the AlphaSports sample database.
</description>
				</section>
			</sections>
		</group>
		<group>
			<sections>
				<section>
					<title>Creating the Drop Down List
</title>
					<steps>
<step>
	<description>Create a grid based on the Invoice_Itemstable of the AlphaSports sample database.
</description>
</step>						
<step>
	<description>Display the Grid > Fieldsmenu.
</description>
</step>						
<step>
	<description>Move the "Invoice_Number" field to the Selected Fieldslist.
</description>
</step>
<step>
	<description>Select the "Invoice_Number" field in the Selected Fieldslist.
</description>
<cases>
	<case>
		<description>1. Set its Display Settings > Control typeproperty to "DropDownBox".
</description>
	</case>
	<case>
		<description>2. Set its DropDownBox Properties > Heightproperty to 10.
</description>
	</case>
	<case>
		<description>3. Set its DropDownBox Properties > In-line styleproperty to "font-family:Courier New; ".
</description>
	</case>
	<case>
		<description>4. Set its DropDownBox Properties > Not in list ruleproperty to "Do Nothing".
</description>
	</case>
	<case>
		<description>5. Set its Column Properties > Column headingproperty to "Select Invoice Item".
</description>
	</case>
	<case>
		<description>6. Set its Column Properties > Heading in-line styleproperty to "font-family: Courier New; text-align: left;".
</description>
	</case>
	
	
</cases>
</step>
<step>
	<description>Click [dot_img] in the DropDownBox Properties > Choicesproperty to display the Define Choicesdialog box.
</description>
	<cases>
	<case>
		<description>1. Set the Define Choices > List Typeproperty to "Dynamic".
</description>
	</case>
	<case>
		<description>2. Set the Data Source > Data source typeproperty to "DBF-Table".
</description>
	</case>
	<case>
		<description>3. Set the Data Source > Table nameproperty to "invoice_items".
</description>
	</case>
	<case>
		<description>4. Click [dot_img] in the Data Source > Display value field/ex pressionproperty to display the Expression Builder.
</description>
	</case>
	<case>
		<description>5. Enter the following expression and click OK.
</description>
<example><![CDATA[Invoice_Number+" "+alltrim(Product_Id) + " " + padl(str(Price,250,2,"$("),10,"_") + " " + padl(alltrim(str(quantity,10) ),10,"_") + " " + padl(str(Extension,250,2,"$("),10,"_")]]></example>
	</case>

</cases>
</step>
<step>
	<description>Display the Grid > Properties menu.
</description>
</step>
<step>
	<description>Set the Layout Options > Rows of dataproperty to 1.
</description>
</step>
<step>
	<description>Set the Customization > Total records message positionproperty to ""No Message.
</description>
</step>
<step>
	<description>Click [dot_img] in the Freeform Edit Regions > Above gridproperty to display the HTML Editor.
</description>
</step>
<step>
	<description>Switch to the Sourcetab and enter the following text into the body of the page.
</description>
<example><![CDATA[& ID& & & & PID&
& & & & & Price& & & Quantity 
face=Tahoma>& & & Extension
]]></example>
</step>
<step>
	<description>Click Savein the HTML Editorand Savein the Grid Builder.
</description>
</step>
<step>
	<description>Click Browser to preview your work. It should look something like the following.
</description>
<figure><link>images/WPT_Drop_down_list_w_many_fields.gif</link></figure>
</step>
						
					</steps>
				</section>
			</sections>
		</group>
		<group background="true">
			<sections>
				<section>
					<title>RadioButton Properties </title>
					<description>RadioButton controls are appropriate when you want to select between a small number of choices. The most important property for a check box control is the definition of its choices.  When you allow the user to select multiple values, the control returns an array. To convert an array to a character value, you need to use an expression like the following:  
</description>
<example><![CDATA[TargetVariable=crlf_to_comma(ControlName.dump()]]></example>


				</section>
			</sections>
		</group>
		<group>
			<sections>
				<section>
					<cases>
<case>
	<title>Choices</title>
	<description>This property opens the Define Choices for field (RadioButton) dialog. Here you will define what type of RadioButton you will have, 'Static', 'Dynamic', or 'Variable'. Static radio buttons are drawn from a static list of values. Dynamic radio buttons are dynamically computed from a database.  If you specify "Dynamic" radio buttons, this opens a list of properties to define; including one to enter the maximum number of choices to show.  Variable radio buttons are where a list is set to a variable  such as a Server-side event, a session variable, or a page variable. Logical values are represented by the values "True" and "False".  
</description>
</case>	
<case>
	<title>In-line style</title>
	<description>Specifies style attributes that override the settings inherited from the style sheet. Click to define the In-line style. Refer to the Style Editor for details.  
</description>
<example><![CDATA[tmpl.Field_Info[N]                  .RadioButton.InLineStyle as C ]]></example>
</case>						
<case>
	<title>Orientation
</title>
	<description>The orientation of the label. The choices are: "Horizontal" and "Vertical"  
</description>
<![CDATA[tmpl.Field_Info[N]                  
.RadioButton.Orientationas C ]]>
</case>	
<case>
	<title>Not in list rule
</title>
	<description></description>
</case>	
<case>
	<title>Additional Properties</title>
	<cases>
		<case>
			<title>Type</title>
			<example><![CDATA[tmpl.Field_Info[N]                  
.RadioButton.Typeas C ]]></example>
		</case>
		<case>
			<title>Maximum choices</title>
			<example><![CDATA[tmpl.Field_Info[N]                  
.RadioButton.maxchoices as N ]]></example>
		</case>
		<case>
			<title>Style control if error</title>
			<description>Specifies whether to apply a second style to the field if a validation error occurs.  </description>
			<example><![CDATA[with tmpl.field_info[N]            .RadioButton.StyleFieldIfError as L]]></example>
		</case>
		<case>
			<title>In-line style for errors</title>
			<description>Specifies style attributes that are used when a validation error occurs. Click to define the In-line style. Refer to the Style Editorfor details.</description>
			<example><![CDATA[tmpl.Field_Info[N]                  .RadioButton.ErrorInLineStyleas C ]]></example>
		</case>
		
		
	</cases>
</case>	
</cases>
</section>
			</sections>
		</group>
		
		<group background="true">
			<sections>
				<section>
					<title></title>
					<description></description>
				</section>
			</sections>
		</group>
		
		
		
			
		<group background="true">
			<sections>
				<section>
					<title></title>
					<description></description>
				</section>
			</sections>
		</group>
		
		
			
		<group background="true">
			<sections>
				<section>
					<title>CheckBox Properties</title>
					<description>Check boxes are appropriate when you want to set a True/False value into a logical field. The most important property for a check box control is the definition of its choices.</description>
<cases>
	<case>
		<title>Choices</title>
		<description>Click [dot_img] to define the true and false choices set by the check box. Refer to Defining Choices for Check Boxes, Radio Buttons, and Drop Down Listsfor details.  </description>
		
	</case>
	<case>
		<title>Orientation  </title>
		<description>The orientation of the label. The choices are:  
"Horizontal"  
"Vertical"  
</description>
		<example><![CDATA[with tmpl.field_info[N]       .CheckBox.Orientation as C]]></example>
	</case>
	<case>
		<title>In-line style</title>
		<description>Specifies style attributes that override the settings inherited from the style sheet. Click to define the In-line style. Refer to the Style Editor for details.  </description>
		<example><![CDATA[with tmpl.field_info[N]       .CheckBox.InLineStyle as C ]]></example>
	</case>
	<case>
		<title>Not in list rule  </title>
		<description>Specifies the value to set if the user input does not match a specified choice. The options are:  </description>
		<cases>
			<case>
				<description>"First Entry" - use the first entry in the list  
</description>
			</case>
			<case>
				<description>"Null" - set the field to NULL  
</description>
			</case>
			<case>
				<description>"Do Nothing" - accept the user input  
</description>
			</case>
			<case>
				<example><![CDATA[with tmpl.field_info[N]      .CheckBox.NotInListRule as C ]]></example>
			</case>
			
		</cases>
		
	</case>
	
</cases>
				</section>
			</sections>
		</group>
		
			
		<group background="true">
			<sections>
				<section>
					<title>Date Picker Properties 
</title>
					<description>A date picker is a variation on a TextBox control. The date picker option appears in a TextBox control if the grid is updateable.  
</description>
<note><![CDATA[Pop-up blockers will prevent the Calendar Picker from appearing and will sometimes generate an error message. User grids and the server hosting the Application Server can use different date formats like yy-mm-dd or yy/mm/dd, as opposed to the US date format mm/dd/yy.  In the Grid Component Builder set Grid Properties > Advanced > Date format on client does not match server to TRUE and enter the client date format in the following field. You may use different separators between the YY, MM, and DD parts of the date format. This property informs the Application Server that it needs to translate dates entered through this grid component. ]]></note>
				</section>
			</sections>
		</group>
		
			
		<group background="true">
			<sections>
				<section>
					<title>Custom Control Properties</title>
					<description>The Custom control is a control where the data contents and formatting of a column (or row) is defined by your Xbasic and HTML code. A custom control can reference a number of grid component and data variables, including the value of data in other grid cells. A custom control can create its own variables to carry values between cells of the grid. There are no important constraints upon what the grid cell of a custom control can display, other than that it must contain valid HTML code. This means, for example, that row-by-row, the type of web control that appears in a grid cell could vary from label to textbox to drop down listbox. </description>
			<note>Custom controls cannot be used for data entry to bound table fields.  </note>	
				</section>
				<section>
					
					<description>A custom control with a dynamic background and font.
</description>
					<figure><link>images/01_custom.png</link></figure>
				</section>
				<section>
					
					<description>The following will show how to create a custom control similar to the one above.  This is a custom control where Xbasic dynamically sets the font and background properties, depending on whether the Unit Price value is above or below the average. The Average for this grid is computed by simply adding an average Summary value to the component.  
</description>
				
				</section>
			</sections>
		</group>
		
		
		<group>
			<sections>
				<section>
					
					<title>Create a Custom Control: </title>
<steps>
<step>
	<description>Open the Grid Builder and go to the Design tab. On the Data Source page choose either dbf or SQL . </description>

</step>	
<step>
	<description>On the Query(DBF) or Query(AlphaDAO) page connect to a Table that has some numeric fields in it. </description>

</step>	
<step>
	<description>From the Design menu open the Fields page. Move a number of fields from the Available Fields: list into the Selected: fields list.  </description>
	<figure><link>images/01_custom2.png</link></figure>
</step>	
<step>
	<description>Select one of your numeric fields in the Selected list, this example uses a field called UnitPrice, and in its Field Properties list find the Display Settings section. </description>

</step>	
<step>
	<description>Under Display Settings find the Control type property and click the button next to it. Select the Custom option from the Select Control Type dialog.  </description>
	<figure><link>images/01_custom3.png</link></figure>
</step>	
<step>
	<description>The Field Properties list for custom controls will be displayed. In this list find the Custom Controls Properties section and under it the Definition property. </description>
	
</step>	
<step>
	<description>Click the button [doc_img] next to the Definition property.</description>
	<figure><link>images/01_custom4.png</link></figure>
</step>	
<step>
	<description>The Define Xbasic for Custom Control: dialog will open. Delete the default code and replace it with the code below. If your field is not called UnitPrice, replace the name UnitPrice, wherever it occurs in this code, with the name of the field you are using.  
</description>
	<example><![CDATA[function UnitPrice_render as c (data as p, args as p, PageVars as p)  
with PageVars  
if data.UnitPrice > args.summary. UnitPrice.average then 
UnitPrice_render = <<%html% 

%html% + data. UnitPrice+ "
" 
else 
UnitPrice_render = <<%html% 

%html% + data. UnitPrice+ "
" 
end if 
end 
UnitPrice_xbasicError: 
UnitPrice_render = "Error in custom control xbasic: " + error_text_get() 
end with 
end function  ]]></example>
<note><![CDATA[AlphaAnywhere will fill in some of the code above automatically, so if you wanted to you could just save the existing framework and fill in the blanks. In this example, the field name is UnitPrice. As a result, the function is named UnitPrice_Render(). If the name of your customized field is not UnitPricethen swap out UnitPricefor the name of the field you are using.  The UnitPrice_Render()function will return a value that is composed of quoted HTML and unquoted Xbasic. In this example, the if and else clauses have similar content. Both are character strings that combine HTML coding and a reference to the quantity field, using the prefix " data. ". Although not a required technique, embedding the HTML inside the 
... 
tags simplifies the coding. Likewise, embedding the 
tag inside the <<%html% ... %html string simplifies the coding by removing the requirement to escape special characters.  
]]></note>
</step>	
<step>
	<description>You need to add an average summary value to your control. In the Field Properties list find the Summary values section and check the box next to the Average property.</description>
	<figure><link>images/01_custom5.png</link></figure>
</step>	
<step>
	<description>Done. View your custom control in Live Preview.</description>
	<figure><link>images/01_custom6.png</link></figure>
</step>	
	
	
	
</steps>					
					
				</section>
			</sections>
		</group>
		
		
		<group background="true">
			<sections>
				<section>
					<title>Variables</title>
					<description>You may dimension local variables of any type within the fieldname_render()function. However, if you want to create variables that have scope beyond the current grid cell, you must define it as an element of either the:  
</description>
					<cases>
						<case>
							<description>argspointer (valid for the grid page)  
</description>
						</case>
						<case>
							<description>sessionpointer (valid for the session)  
</description>
						</case>
						
					</cases>
				</section>
				<section>
					<description>For example, this code is able to create a running total of the Extensionfield by adding values to session.rt.  
</description>
					<example><![CDATA[if eval_valid(" session.rt") = .f. then  
    session.rt = Data.EXTENSION  
else  
    session.rt = session.rt + Data.EXTENSION   
end if]]></example>
				</section>
			</sections>
		</group>
		
		<group background="true">
			<sections>
				<section>
					<title>Define Xbasic For Custom Control Dialog</title>
					<description>As the example above on creating a custom control demonstrates, getting to the Define Xbasic for Custom Control Dialog is fairly straightforward. After defining a grid table you go to the Fields page and  add some fields to the Selected: fields list. You then go to the Field Properties list and change the Control type of the selected field control to Custom . From there you go to the Custom Controls Properties and click the button next to the Definition property.  
</description>
				</section>
					<section>
					
					<description>When the Define Xbasic for Custom Control dialog loads, you will see some code that lays out a default function for you based on whatever field you selected as your custom control. This is only a framework, you will have to create the code that determines what you want your custom control to do. There are, however, some tools to help make this task easier. The Insert button at the top of the dialog can add Row values, Grid Data Values, Summary values, and System variables to your function's code through a series of point and click events. To insert Current Row Values , i.e. the value of any field in the Current Row, click Insert select Data and then choose the FieldName that you want to add to your code . To insert Grid Data Values , or the value of any of the fields on any of the rows of the current grid page, click Insert > Args > Data > RowNumber > FieldName . If the grid has any Summary values , then you can insert any of them by clicking Insert, selecting Args, then Summary, FieldName, and finally the SummaryType you want. Finally, The Define Xbasic for Custom Control dialog provides several System variables that you can use in your calculations by clicking Insert > Args > Info > System variable . 
</description>
				</section>
			</sections>
		</group>
		
		
		<group>
			<sections>
				<section>
					<title>Current Row Values:  </title>
					<description>Insert > Data > FieldName     </description>
					<figure><link>images/01_custom7.png</link></figure>
				</section>
				<section>
					<title>Grid Data Values:</title>
					<description>Insert > Args > Data > RowNumber > FieldName </description>
					<figure><link>images/01_custom8.png</link></figure>
				</section>
				<section>
					<title>Summary Values:</title>
					<description>Insert > Args > Summary > FieldName > SummaryType </description>
					<figure><link>images/01_custom9.png</link></figure>
				</section>
				<section>
					<title>System Variables   
</title>
<description>Available System Variables </description>
					<list>
						<item>
							<name-title>Name</name-title>
							<description-title>Description</description-title>
						</item>
						<item>
							<name>Args.Info.TotalPages</name>
							<description>Numeric. The number of grid pages required to display all records.</description>
						</item>
						<item>
							<name>Args.Info.CurrentPage</name>
							<description>Numeric. The current grid page.</description>
						</item>
						<item>
							<name>Args.Info.TotalRecords</name>
							<description>Numeric. The number of records returned by the current table query.</description>
						</item>
						<item>
							<name>Args.Info.RecordsPerPage</name>
							<description>Numeric. The maximum number of records to display in a grid page</description>
						</item>
						<item>
							<name>Args.Info.Database_type</name>
							<description>Character. The type of database.</description>
						</item>
						<item>
							<name>Args.Info.HasEmptyRows</name>
							<description>Logical. Does the current grid page have an empty row?  </description>
						</item>
						<item>
							<name>Args.FirstEmptyRow</name>
							<description>Numeric. The row number of the first empty row.</description>
						</item>
						<item>
							<name>Args.IsNewRecord</name>
							<description>Logical. Are you processing a newly input record?  </description>
						</item>
						<item>
							<name>Args.RowNumber  </name>
							<description>Numeric. The current row number.</description>
						</item>
						<item>
							<name>Args.Summary</name>
							<description>Pointer. The values of various summary calculations.  
</description>
						</item>
						
						
					</list>
				</section>
				<section>
					<description>Insert > Args > Info > System variable </description>
					<figure><link>images/01_custom10.png</link></figure>
					
				</section>
				
				
			</sections>
		</group>
		
		
		<group>
			<sections>
				<section>
					<title>Custom Controls on an Editable Grid</title>
					<description>This topic illustrates several useful techniques when placing a custom control on an editable grid. The grid shown below displays the Extensionfield is in a custom control.
</description>
<figure><link>images/WP_Custom_Controls_on_Editable_Grid.gif</link></figure>
				</section>
				<section>
					<description>The code that creates the control is as follows. First, the standard boilerplate code.
</description>
					<example><![CDATA[function EXTENSION_render as c (data as p, args as p, PageVars as p)

with PageVars
   
on error goto EXTENSION_xbasicError]]></example>
				</section>
				<section>
					<description>You cannot define the HTML for the new record rows in an editable grid. as a result, the first thing to do is test whether you are creating a new record. If Args.IsNewRecordis TRUE, then exit.
</description>
					<example><![CDATA[if Args.IsNewRecord = .t. then   
exit function
end if]]></example>
				</section>
				<section>
					<description>This example simply changes the background color of the cell if the value of the Extensionfield is greater than 100. What you have to do here is define code that can be placed into the cell of a table. The grid is, after all, just a table. Items that you can place into a table cell include:
</description>
<cases>
	<case>
		<description>formatted HTML text 
</description>
	</case>
	<case>
		<description>image</description>
	</case>
	<case>
		<description>table </description>
	</case>
	<case>
		<description>VariableContent- any legal HTML code</description>
	</case>
	
</cases>
					
				</section>
				
<section>
	<description>In this case the cell will contain a table. The cells will have different background colors ( bgcolor="#00FF00"and bgcolor="#FF0000") and right alignment ( align="right"). The alignment of the grid column has no effect inside this table, so, if you want right alignment, you need to explicitly define it. The table will be wide enough to contain any expected content ( width="80px"). The advantage of explicitly defining the table width is that it avoids having cell contents vary in width according to the data they contain; the behavior you see with label controls.</description>
	<example><![CDATA[if Data.EXTENSION > 100 then
EXTENSION_render = <%html%
disp
%html%
else   
EXTENSION_render = <%html%
disp
%html%
end if
disp = alltrim( str (Data.EXTENSION,250,2,"$(") )
EXTENSION_render = stritran(EXTENSION_render, " disp", disp)
end
EXTENSION_xbasicError:
EXTENSION_render = "Error"
end with
end function ]]></example>
</section>				
	<section>
		<description>To simplify the formatting of the Extensionamount, the HTML contains the string " disp", which the script replaces with alltrim( str( Data.EXTENSION,250,2,"$(") ).
</description>
	</section>			
	<section>
		<description>Advanced use of custom controls in a grid 
One of the control types available in the Alpha Five Version 10 grid is the  custom control. This allows you to define an arbitrary Xbasic function to compute the HTML and Javascript for the control. 

In the example below, the grid is showing invoices. One of the cells in the grid shows the line items for the invoice. This could have been done using an embedded grid component, but the custom control is a lighter weight, faster solution. 

</description>
<videos>
	<video>
		<name>Video 1</name>
		<link>http://www.ajaxvideotutorials.com/V10Videos/CustomControlExample_Part1.mp4</link>
	</video>
	<video>
		<name>Video 2</name>
		<link>http://www.ajaxvideotutorials.com/V10Videos/CustomControlExample_Part2.mp4</link>
	</video>
	
	
</videos>


	</section>		
	<section>
		<description>See Also: Locking Individual Records Sorting a Grid on Multiple Fields </description>
	</section>
			
				
			</sections>
		</group>
		
		
		<group background="true">
			<sections>
				<section>
					<title>Hidden Properties </title>
					<description>The Hidden control type displays a grid column (or row), but does not display any data. This is different from the Hide property, that hides a grid column (or row). 
In this example we would like to achieve three goals:  
</description>
<steps>
	<step>
		<description>Set the value of a field with a script in the CanInsertRecordevent </description>
	</step>
	<step>
		<description>Display the value of said field. </description>
	</step>
	<step>
		<description>Prevent the user from editing the field. </description>
	</step>
	
</steps>
				</section>
			</sections>
		</group>
		
		
		<group>
			<sections>
				<section>
					<title>Updating Hidden Grid Fields using dbf:  </title>
					<steps>
						<step>
							<description>Open the Grid Builder and go to the Design tab. Go to the Component Type page and select Grid is: Updateable . On the Data Source page select .dbf .  </description>
						</step>
						<step>
							<description>On the Query(DBF) page connect to the table that you will extract data from. This example uses the AlphaSports Customerstable.  </description>
						</step>
						<step>
							<description>If you are using Query(DBF) click the Calculated fields button. The Calculated Values dialog will open. Create a calculated field definition similar to the one below and click OK .  </description>
						<example><![CDATA[cust_id = customer_id]]></example>
						<note>This calculated field definition takes the customer_idfield in the Alpha Sports customers table and creates a new identical field named cust_id. This copy can be displayed but be placed in a non-editable label control.</note>
						</step>
						<step>
							<description>Open to the grid Fields page. Take the two fields that appeared in your calculated field definition and move them from the Available fields: list to the Selected: fields list.  </description>
						</step>
						<step>
							<description>Add two additional fields to the Selected: fields list from the Available fields list. Position these fields in the middle of the Selected: fields list using the up and down arrows.  </description>
						</step>
						<step>
							<description>Go to Live Preview . Your table should look something like this.  </description>
						<figure><link>images/01_hide.png</link></figure>
						</step>
						<step>
							<description>In the Selected: fields list, click on the control of the field you copied in your calculated field definition; this example uses Customer_id.  </description>
						</step>
						<step>
							<description>Go to the Field Properties list for this field control. Find the Display Settings section and under it the Control type property. Change Control type to ' Hidden '</description>
					<figure><link>images/01_hide3.png</link></figure>
						</step>
						<step>
							<description>Scroll down the Field Properties list to the Column Properties section. Check the Hide column property checkbox.</description>
						</step>
						<step>
							<description>In the Selected: fields list, select the second field, in this case the firstnamefield.</description>
						</step>
						<step>
							<description>In the Field Properties list go to the Column Properties section again.</description>
						</step>
						<step>
							<description>Find the Column heading property and change it, in this case to 'First Name'. Also change the Heading in-line style property to ' text-align: left '.</description>
				<figure><link>images/01_hide4.png</link></figure>
						</step>
						<step>
							<description>Check the Freeform layout property checkbox. The Freeform template property will appear. Click the button next to it to open the Freeform Column Layout dialog.</description>
						</step>
						<step>
							<description>In  the Freeform Column Layout dialog enter a field definition similar to the one below and click OK.  </description>
						<example><![CDATA[{Customer_Id}{Firstname}    ]]></example>
						<note>This step is important. This step places the editable field that you copied, in this example "customer_ID",  on the grid. This allows the event script to modify it. However, since, the "customer_ID" control is hidden, only the "firstname" field shows.  </note>
						</step>
						<step>
							<description>Click on the third field in your Selected: fields list, in this case the "lastname" field.  </description>
						</step>
						<step>
							<description>In Column Properties change the Column heading property, in this case to "Last Name", and set Heading in-line style to "text-align: left;"  

</description><figure><link>images/01_hide5.png</link></figure>
						</step>
						<step>
							<description>Finally, click on your calculated field in the Selected: fields list. Go back to the Column Properties section of the Field Properties list.  </description>
						</step>
						<step>
							<description>Change the Column heading property. In this example our calculated field is cust_id so the heading will be "Customer ID". Also change the Heading in-line style property to "text-align: left;"  </description>
						</step>
						<step>
							<description>Scroll up to the Display Setting section of the Field Properties list. Change the Control type to ' Label '. </description>
						<figure><link>images/01_hide6.png</link></figure>
						</step>
						<step>
							<description>From the Design menu, open then Properties page. Find the Layout Options section and under it the Rows of data property. Set Rows of data to 5.  </description>
							<figure><link>images/01_hide7.png</link></figure>
						</step>
							<step>
							<description>Now click on the Update Settings page. Find the Permissions section of the page and in it the Number of new record rows property , set this to 1.  </description>
						</step>
						<step>
							<description>Save the grid and go to Live Preview. Placing scripts in the CanInsertRecordevent will  now update the Customer_IDfield.  
</description>
							
							<figure><link>images/01_hide2.png</link></figure>
						</step>
						
						
					</steps>
				</section>
				<section>
					<title>Custom Control Properties  </title>
					<example><![CDATA[with tmpl.field_info[N]            
.CustomControlXbasic as C]]></example>
				</section>
				<section>
					<description>See Also: Suppressing Blank Fields in an Address| Creating a Grid that Looks Like a Dialog   
</description>
				</section>
				
				
			</sections>
		</group>
		
		<group background="true">
			<sections>
				<section>
					<title>[Tab Control] </title>
					<description>A tab control allows you to selectively hide and display different groups of fields. Refer to Setting Grid Tab Properties.  </description>
				
				</section>
			</sections>
		</group>
		
		
		<group>
			<sections>
				<section>
					<title>Grid Component - Tab and Accordion Controls - Animation
</title>
					<description>You can now animate the tab and accordion controls in the Grid component. 
You can control the animation method to hide and show panes. The animation methods are 'slide' and 'fade'. You can use one method to show the pane, and another method to hide the pane. For example, you might choose to 'slide' the pane into view, but 'fade' it out of view. 
</description>
<videos>
	<video>
		<name>Watch Video</name>
		<link>http://www.ajaxvideotutorials.com/V11Videos/AnimatingTabsAndAccordioinInTheGrid.swf</link>
	</video>
	
</videos>

				</section>
			</sections>
		</group>
		
		<group background="true">
			<sections>
				<section>
					<title>[Tab Pane] </title>
					<description></description>
				</section>
			</sections>
		</group>
		
		<group background="true">
			<sections>
				<section>
					<title>[Tab Control End] 
</title>
					<description></description>
				</section>
			</sections>
		</group>
		
		<group background="true">
			<sections>
				<section>
					<title>[Frame Begin]</title>
					<description>When designing a grid component with Columnar formatting, you may position controls by placing them into frames. A frame has a label and places a box around selected fields. You can use the frame feature in columnar layouts, such as columnar grids, search forms, and detail view forms. This example shows how to create a columnar grid with 2 frames.  </description>
				</section>
				
<section>
<title>Using Frames for Control Positioning:  </title>	
<steps>
	<step>
		<description>Open the Grid Builder and create a new blank grid. On the Component Type page select Form (Columnar) under the Grid Layout menu. </description>
		<figure><link>images/01_fframe8.png</link></figure>
	</step>
	<step>
		<description>Under Data Source select either .dbf or SQL . </description>
		
	</step>
	<step>
		<description>On the Query(DBF) or Query(AlphaDAO) page connect to the table that you will use to extract data. If using SQL make sure to set the primary key to a field you will use from your table. </description>

	</step>
	<step>
		<description>Go to the Fields page. There should be a number of fields in the Available Fields: list. Highlight a field </description>

	</step>
	<step>
		<description>Click the right arrow to move fields from the Available fields: list to the Selected: fields list. </description>
		<figure><link>images/01_fframe9.png</link></figure>
	</step>
	<step>
		<description>Add three more fields to the Selected: fields list. Next, check the editable? checkbox next to the Selected: fields title.  </description>
		<figure><link>images/01_fframe10.png</link></figure>
	</step>
	<step>
		<description>The Notice dialog will appear. Select all fields and click OK .  </description>
		<figure><link>images/01_fframe11.png</link></figure>
	</step>
	<step>
		<description>The fields you selected should now appear as textbox controls. Highlight the first two fields in your Selected fields: list by holding down the Shift key and clicking on each field.  </description>
		<figure><link>images/01_fframe12.png</link></figure>
	</step>
	<step>
		<description>Click the Insert.. hyperlink underneath the Available fields: list.  
</description>
		<figure><link>images/01_fframe13.png</link></figure>
	</step>
	<step>
		<description>The Insert Special Control dialog will open. Select a [Frame begin] control and click OK .  </description>
		<figure><link>images/01_fframe14.png</link></figure>
	</step>
	<step>
		<description>An Insert Frame dialog will appear. Give the frame a Label name that describes the two fields you selected. For example, Customerfor a Firstand a Lastnamefield or Locationfor an Addressand a Cityfield.  </description>
		<figure><link>images/01_fframe15.png</link></figure>
	</step>
	<step>
		<description>You should now see a [Frame:] control and a [Frame End] Control around the first two field controls in the Selected: fields list.  </description>

	</step>
	<step>
		<description>Add a second [Frame] control around the last two fields in your Selected fields list using the same steps.  </description>
		<figure><link>images/01_fframe.png</link></figure>
	</step>
	<step>
		<description>Go to Live Preview . You should see something like this:  

</description>
		<figure><link>images/01_fframe2.png</link></figure>
		<note><![CDATA[On the Grid > Properties page, under the Layout Options section, there is a  Number of 'Layout' Columns    property that specifies the number of columns inside each record column. By default this is set to 1. Below you can see how changing this property will alter the look of your [Frame] control.]]></note>
	</step>
	<step>
		<description>Go to the Layout Options section on the Grid> Properties page. Change the  Number of 'Layout' Columnsproperty to  2. Go back to Live preview,   Framed fields now appear next to each other on the same row:  
  </description>
		<figure><link>images/01_fframe3.png</link></figure>
	</step>
	<step>
		<description>On the Grid Properties page go to the Layout Options section and set the Repeating Columnsproperty to 1 and the Rows of Data property to 2. Go to Live Preview :  </description>
		<figure><link>images/01_fframe4.png</link></figure>
	</step>
	<step>
		<description>On the Fields page add a third field to your second [Frame] control. You can use the Up and Down arrows to the right of the Selected: fields list to position the field vertically. Check field is editable?     </description>
		<figure><link>images/01_fframe7.png</link></figure>
	</step>
	<step>
		<description>Layout Options > Number of "Layout" Columnsproperty to 3. The three framed fields appear in the same row. 
  </description>
		<figure><link>images/01_fframe5.png</link></figure>
	</step>
	
	
</steps>	
	
	
</section>				
			</sections>
		</group>
		
		
		<group background="true">
			<sections>
				<section>
					<title>[Frame End] </title>
					<description></description>
				</section>
			</sections>
		</group>
		
		
		<group background="true">
			<sections>
				<section>
					<title>[Container Begin] </title>
					<description></description>
				</section>
			</sections>
		</group>
		
		<group background="true">
			<sections>
				<section>
					<title>[Container End] </title>
					<description></description>
				</section>
			</sections>
		</group>
		
		<group background="true">
			<sections>
				<section>
					<title>[ Static Text] </title>
					<description>Unbound controls (these are in the Layout Controls section)  
There are a number of 'unbound' controls available in the Layout Controls section.  
</description>
<cases>
	<case>
		<description>Static image (can be conditional based on data in the grid. Can also be based on comparisons with summary values)  </description>
	</case>
	<case>
		<description>Static text  
</description>
	</case>
	<case>
		<description>Image based on a value in the grid and unbound text</description>
		<figure><link>images/NewInV10_Unbound.jpg</link></figure>
	</case>
	
</cases>
				</section>
			</sections>
		</group>
		
		
		<group background="true">
			<sections>
				<section>
					<title>[Column Spacer] Properties </title>
					<description>When designing a dialog component or a grid component with columnar formatting (where the Layout Options > Number of "Layout" Columnsproperty is greater than 1), you may position controls by inserting column spacers after controls.The following example shows the effects of adding column spacers. In this case the grids Number of 'Layout' Columnsproperty has been set to 2 and its  Rows of data  property is 3. Both of these properties can be found in the Layout Options section of the Grid Properties page.  
</description>
				</section>
			</sections>
		</group>
		
		<group>
			<sections>
				<section>
					<title>Add a column spacer:</title>
<steps>
	<step>
		<description>Open the Grid Builder . On the Design tab open the Component Type page. From the Grid Layout menu select the Stacked Columnar option.  </description>
		<figure><link>images/01_column.png</link></figure>
	</step>
	<step>
		<description>On the Data Source page select either .dbf or SQL . Go to the Query(DBF) or Query(AlphaDAO) page and connect to the Table you will use for your data. Set the Primary key to a field you will use.  </description>

	</step>
	<step>
		<description>Go to the Fields page and move 5 fields from the Available Fields: list into the Selected: fields list.  </description>
		<figure><link>images/01_column2.png</link></figure>
	</step>
	<step>
		<description>From the Design menu open the Properties page. Find the Layout Options section of the grid properties and change the Number of 'Layout' columns property to 2.  </description>

	</step>
	<step>
		<description>In the same Layout Options section, find the Rows of data property and enter a 3 next to it.  </description>
		<figure><link>images/01_column3.png</link></figure>
	</step>
	<step>
		<description>Go to Live preview . Without column spacers your grid should look something like this:  </description>
		<figure><link>images/01_column4.png</link></figure>
	</step>
	<step>
		<description>Open the Design tab again and go to the Fields page. Click on the Insert... hyperlink underneath the Available Fields: list.</description>
		
	</step>
	<step>
		<description>The Insert Special Control dialog will open. Select the [Column Spacer] option and click OK .
</description>
		<figure><link>images/01_column5.png</link></figure>
	</step>
	<step>
		<description>Position the [Column Spacer] control so that it is fourth in your Selected: fields list. To move the control in the list use the up and down arrow buttons.  </description>
		<figure><link>images/01_column6.png</link></figure>
	</step>
	<step>
		<description>Now go to Live Preview . The spacer should push your fourth field control down one row:  </description>
		<figure><link>images/01_column7.png</link></figure>
	</step>
	
</steps>
				</section>
			</sections>
		</group>
		
		<group background="true">
			<sections>
				<section>
					<title>[Row Spacer] </title>
					<description></description>
				</section>
			</sections>
		</group>
		
		<group background="true">
			<sections>
				<section>
					<title>[Merge Cells Begin] </title>
					<description>Merges can be used to position controls in groups for both grid and UX components. Merging controls is only possible when the grid format is columnar and the Number of Layout Columns property, found under the Layout Options on the Properties page, is set to a value greater than 1. Merges can be used to combine multiple fields under one title. For example, if you have a firstnamefield and a lastnamefield, you could combine them under one merged group and give it the title 'Full Name'.   </description>
				</section>
			</sections>
		</group>
		
		<group>
			<sections>
				<section>
					<title>Using Merges for Control Positioning:  </title>
					<steps>
						<step>
							<description>In the Grid Builder go to the Design tab and open the Component Type page. In the Grid  Layout menu select Form (Columnar) .</description>
						</step>
							<step>
							<description>Open the Data Source page and select either .dbf or SQL . On the Query(DBF) or Query(AlphaDAO) connect to the table that you will draw data from.</description>
						</step>
							<step>
							<description>Click Select Primary Key and check a field that you will include in your grid.</description>
						</step>
							<step>
							<description>Open the grid's Fields page. Move 10 fields from the Available Fields: list to the Selected: Fields list.</description>
						</step>
							<step>
							<description>Go the the grid Properties page and under the Layout Options page change the Number of 'Layout' Columns property to 3.</description>
						</step>
									<step>
							<description>View your grid in Live Preview . It should look something like this:  </description>
							<figure><link>images/01_hide8.png</link></figure>
						</step>
							<step>
							<description>Return to the Fields page on the Design tab. Select a field in the Selected: fields list and then click the Insert... hyperlink; the link is located underneath the Available Fields: list.</description>
						</step>
							<step>
							<description>The Insert Special Control dialog will open. Select the [Merge Cells Begin] control and click OK .</description>
						</step>
							<step>
							<description>Now select a second field underneath [Merge Cells Begin] and click the Insert... hyperlink again. When the Insert Special Control dialog opens select [Merge Cells End] and click OK .</description>
						</step>
							<step>
							<description>Use the up and down arrows to the right of the Selected: fields list to move related fields inside the Merge Cell. For example, move all fields relating to a name or address inside the Merge cells.</description>
						<figure><link>images/01_merge.png</link></figure>
						</step>		
							<step>
							<description>Click the [Merge Cells Begin] control in the Selected: fields list. In the Field Properties list in the Merge Cells Properties find the Row Heading property.</description>
						</step>
							<step>
							<description>Change the name of the Row Heading property to something that describes all of the fields contained inside the Merge cells.</description>
						<figure><link>images/01_merge2.png</link></figure>
						</step>
							<step>
							<description>Repeat steps 7 through 12 to create a second set of Merge Cells with a Row heading.</description>
						<figure><link>images/01_merge3.png</link></figure>
						</step>
							<step>
							<description>Go to the Live Preview tab and click Full Preview. The grid should look something like this.  </description>
							<figure><link>images/01_merge4.png</link></figure>
							<note>The Merge cell entitled ' Address' now combines the Address, PostalCode, City, Region, and Countryfields in this grid. The Merge cell named ' Contact' combines the ContactNameand ContactTitlefields.  </note>
						</step>
							<step>
							<description>Go to the Design tab and open the Fields page again. Select one of the fields inside a Merge cell you defined. Go over to the Field Properties list and scroll down to Row Properties.  </description>
						</step>
						<step>
							<description>Find the Break property and change it from 'None' to 'Break After' using the drop down. Repeat this process for your second Merge Cell.  </description>
							
							<cases>
								<case>
									<description>Adding Breaks </description>
									<figure><link>images/01_merge6.png</link></figure>
								</case>
								<case>
									<description>Inserted Breaks </description>
									<figure><link>images/01_merge7.png</link></figure>
								</case>
								
							</cases>
						</step>
							<step>
							<description>Go to Live Preview.  </description>
							<figure><link>images/01_merge5.png</link></figure>
							<note>In this example Breaks have been added after the Contact Nameand PostalCodefields. Notice how this impacts the Contactand AddressMerge Cells that contain these fields. See also  Number of 'Layout' Columns  </note>
						</step>
						
					</steps>
				</section>
			</sections>
		</group>
		<group background="true">
			<sections>
				<section>
					<title>[Merge Cells End] </title>
					<description>[Merge Cells End] is used in conjunction with [Merge Cells Begin] to encapsulate fields inside a single cell. [Merge Cells End] does not contain any Field properties, these are defined in [Merge Cells Begin]. For more information on how to use merge cells see the example in  [Merge Cells Begin]  .  </description>
				</section>
			</sections>
		</group>
		
		<group background="true">
			<sections>
				<section>
					<title>[Button] </title>
					<description></description>
				</section>
			</sections>
		</group>
		<group background="true">
			<sections>
				<section>
					<title>[Hyperlink] </title>
					<description></description>
				</section>
			</sections>
		</group>
		
		<group background="true">
			<title>Lookup Properties </title>
			<sections>
				<section>
					
					<description>The Lookup property allows you retrieve one or more field values from another grid. Your grid must be Updateable before you can add a Lookup property. You can set a field to be updateable from the the grid Fields page by clicking the (editable?) checkbox above the Selected: fields list. Lookups open in an Ajax window. This makes the lookup perform quickly and causes the Lookup window to open on the page, without requiring a new Browser window. Because of Ajax, popup blockers will not prevent the Lookup from opening.  

When you check the checkbox next to the Lookup property, you will notice that two additional properties appear. These are the Lookup Type and Lookup definition properties.  
</description>
				</section>
			</sections>
		</group>
		<group background="true">
			<sections>
				<section>
					<title>Lookup </title>
					<description>When checked, makes the Textbox or Textarea control able to open a secondary lookup grid and retrieve field values.  
</description>
				</section>
			</sections>
		</group>
		<group background="true">
			<sections>
				<section>
					<title>Lookup Type </title>
					<description>Lookup Type has a dropdown select list with these options: Grid Component , Auto-Suggest List , and Edit-Combo List . The  Auto-Suggest list option creates Lookups that function much like a Google search toolbar. As you start typing into a textbox, a list of suggestions is supplied. With Grid Component Lookups, the suggestions can come from either a static list of values or, more commonly, from a table. For more on auto-suggest fields watch this video or this short  video . Both the Auto-suggest and edit-combo controls allow you to enter multiple values in the field you are editing. For example, say you have a field called 'Send to' and you want to support a comma delimited list, such as 'Smith,Jones,King,Cohen' and you want the user to be able to select each entry in the list from the pick list. The edit-combo, or auto-suggest control can be used for this; video. For more on edit combo boxes you can check out this video  and also this video on edit-combo box fields and how you can include edit-combo boxes in your grid components. </description>
				</section>
			</sections>
		</group>
		
			<group>
			<sections>
				<section>
				
					<description>Lookup Grid Component Type 
</description>
					<figure><link>images/01_lookup2.png</link></figure>
				</section>
				<section>
				
					<description>Lookup with Auto-Suggest List 
</description>
					<figure><link>images/01_lookup3.png</link></figure>
				</section>
				<section>
				
					<description>Lookup using an Edit-Combo List 
</description>
					<figure><link>images/01_lookup4.png</link></figure>
				</section>
			</sections>
		</group>
		
			<group background="true">
			<sections>
				<section>
					<title>Lookup Definition 
</title>
					<description>Lookup definition allows you to define what component and/or fields will be used in you Lookup, what filters will be used, and more. Both dynamic and static filters can be applied to a Lookup depending on what type of Lookup it is. Using a dynamic filter will cause the lookup to be created from data already entered into the Grid. For example, if a user were to enter the state 'ma' then only customers in 'ma' will be shown when the lookup is open.  Going a step further, the list of choices can be filtered based on other fields previously filled in. For example, say that you have defined a "city" field to be an auto-suggest field. If you previously entered "CA" into the "state" field, then when you enter a "city" field, the list of suggestions will only show cities in California.  While Lookups require an Updateable grid there are some options in terms of user interface. Lookups can be configured to force a user to select from the lookup, while not permitting users to enter data into the field with the lookup.  
</description>
				</section>
			</sections>
		</group>
		
			<group>
			<sections>
				<section>
				
					<description>The Define Lookup Window </description>
					<figure><link>images/01_lookup.png</link></figure>
				</section>
				<section>
					<cases>
						<case>
							<title>Grid name</title>
							<description>Specifies the name of the grid to display in the lookup window.  </description>
						</case>
						<case>
							<title>Window title</title>
							<description>Specifies the title of the lookup window.  </description>
						</case>
						<case>
							<title>Width</title>
							<description>Sets the width of the lookup window in pixels.  
</description>
						</case>
						<case>
							<title>Height  </title>
							<description>Sets the height of the lookup window in pixels.  
</description>
						</case>
						<case>
							<title>Window Position  </title>
							<description>Specify where the window will be shown  
</description>
						</case>
							<case>
							<title>Resizable  </title>
							<description>Enables or disables resizing of the lookup window.  
</description>
						</case>
						<case>
							<title>Inherit parent style  </title>
							<description>Specifies whether to use its style sheet or inherit the style sheet of the parent page.  </description>
						</case>
						<case>
							<title>Select record link label  </title>
							<description>Specifies the text to display in the selection link.</description>
						</case>
						<case>
							<title>Select record link label style  </title>
							<description>Specifies style attributes that override the settings inherited from the style sheet. Click to define the In-line style. Refer to the ((Style Editor)) for details.  </description>
						</case>
						<case>
							<title>Field map  </title>
							<description>A comma delimited list of the fields to retrieve from the lookup window or fields to write in the grid.  
</description>
						</case>
							<case>
							<title>Link type</title>
							<description>Specifies whether to display text or a graphic as the link to the lookup window. The options are: "Text" and "Icon"  </description>
						</case>
						<case>
							<title>Link label  </title>
							<description>Appears if the Link type is text, defines what text is displayed.  
</description>
						</case>
						<case>
							<title>Link label style</title>
							<description>Specifies style attributes that override the settings inherited from the style sheet.  </description>
						</case>
						<case>
							<title>Icon name  </title>
							<description>If icon is selected for link type, defines the text to display.  
</description>
						</case>
						
					</cases>
					
				</section>
			</sections>
		</group>
		
			<group background="true">
			<sections>
				<section>
					
					<description>A text box control on a grid component or ux component may have an associated lookup window that can be used to set the values of one or more fields with a single click. If you want to define a lookup for a text box control that is on the Search Part of a grid, then go to the Search Properties page and in the Search Options section set the Search style property to "1" and the Allow 'Query By Form ' property to "False".  
</description>
				</section>
				<section>
					
					<description>Creating a text box Grid Component type Lookup takes three steps. 1.) First a Lookup grid needs to be defined. This is the "source" grid that will appear on the 'destination' when the Lookup is called. The Lookup grid can include all of the same or different tables as the destination grid. Being its own grid component it can also include such features as a Quick Search. 2.) Secondly, you must set the properties of the field control that initiates the Lookup.  3.) The final step is setting the properties of the field controls that will receive lookup values. 
</description>
				</section>
			</sections>
		</group>
		
			<group>
			<sections>
				<section>
					<title>Create the Lookup Grid: </title>
					<steps>
						<step>
							<description>In the Grid Builder open the Design tab. On the Component Type page select Tabular from the Grid Layout menu. For the Grid is: selection click the Read only option.</description>
						</step>
						<step>
							<description>Under Data Source select either dbf or SQL. On Query(DBF) or Query(AlphaDAO) connect the table you will use. This example uses the Northwinds Customerstable.</description>
						</step>
						<step>
							<description>While on the Query page, click Select Primary Key and choose a field that you will use in your grid.</description>
						</step>
						<step>
							<description>Open the Fields page. Move 5 fields from the Available Fields: list into the Selected: fields list using the right arrow key. These are the fields you want to retrieve when the Lookup is called.</description>
						</step>
						<step>
							<description>Save your grid as something, like LookupOne. </description>
						</step>
						<step>
							<description>Go to Live Preview . This is the Grid that you will use to define your Lookup. Close the component</description>
						</step>
						
						
					</steps>
				</section>
<section>
	<title>Define the Destination grid and Lookup call: </title>
<steps>
<step>
	<description>Create a new grid component. Open the Grid Builder and go to the Design page.</description>
</step>	
<step>
	<description>On the Component Type page select Tabular on the Grid Layout menu. Click Grid is: Updateable .</description>
</step>	
<step>
	<description>Under Data Source connect to a table that you want to use.</description>
</step>	
<step>
	<description>On the Query(DBF) or Query(AlphaDAO) page connect to the a table. This can be the same table or a different table than the one used in your 'Source' grid.</description>
</step>	
<step>
	<description>On the Fields page move several fields from the Available Fields list to the Selected: fields list.</description>
</step>	
<step>
	<description>Select a TextBox control from the Selected: fields list. This is the field that will have the Lookup.

</description>
<figure><link>images/01_lookup19.png</link></figure>
<note>You can use both TextBox and TextArea controls to initiate a Lookup field.  By default, most fields added to an updateable grid appear as textbox controls automatically. When the destination grid is published, if a field is a lookup field, then an icon is shown to the right of the control. Pressing the icon opens a second browser window which displays the lookup window (the "source" grid component). When the user makes a selection in the lookup window, the 'source' grid will fill in one or more fields in the "destination" grid.  </note>
</step>	
<step>
	<description>Now go to the Field Properties list for the TextBox you selected. Find the Lookup properties section and check the Lookup checkbox.</description>
</step>	
<step>
	<description>Under Lookup type select Grid Component .</description>
</step>
<step>
	<description>Click the button next to Lookup definition. The Define Lookup Window dialog will open.</description>
</step>	
<step>
	<description>In the Define Lookup Window dialog find the Grid name property and click the button next to it. Select the Lookup grid that you created.</description>
<note>The Define Lookup Window dialog gives you the option to customize a number properties: For example, you can set the Window title field. By default, this property takes the column label of the field you selected in the "destination" grid. You can also set the Lookup Width and Height . You can change the Select record link label and click the button next to the Select record link label style property to open the Style Editor . This will allow you to define your own custom HTML coding.  </note>
</step>	
<step>
	<description>In the Field Mapping section of the Define Lookup Window dialog find the Field map property. Click the button next to it to open the Define Field Mapping dialog</description>
	<figure><link>images/01_lookup20.png</link></figure>
	<note>The Define Field Mapping dialog allows you to specify a map between fields in the Lookup window and fields on your grid or dialog component. For example, your grid or dialog component might include these fields: ID, Fname, Lname, and Company. The Lookup window grid might have these fields on it: CustomerID, Firstname, Lastname, and CompanyName. You can map the CustomerIDfield to the IDfield, the Firstnamefield to the Fnamefield and so on. When the user makes a selection in the Lookup window, the Lookup window closes, and the corresponding data from the Lookup window is filled into the destination grid or dialog component. The Define Field Mapping dialog only shows fields that are displayed in text boxes in the Lookup window.  </note>
</step>	
<step>
	<description>Click Add Field , select a destination Field: from the drop-down list at left, select the source field (from the Lookup window) list at right, and click OK .</description>
</step>		
<step>
	<description>Repeat for all the fields you wish to insert into a record.</description>
</step>	
<step>
	<description>Click OK to return to the Define Lookup Window dialog.</description>
</step>	
<step>
	<description>Find the Main Window of the Define Lookup Window dialog. Find Link type field and select "Text" or "Icon".</description>
<note>This field specifies the link that appears to the right of the textbox or textarea control and that opens the Lookup window. If the choice in the previous field was " Icon ", enter the relative path to the graphic you want to use. If the choice was " Text ", enter the text to using Link label field, also found in the Main Window part. Optionally, define an in-line HTML style for the link label text using the Link label style field.  

Optionally, go to the Advanced section and click the button next to the Override settings property. This will display the Override Properties dialog. Use the Existing Properties tab and the Setting Grid Properties topic as references. Place new values into the Override Properties tab. 17. Optionally, add filter and order parameters into the Advanced > Query parameters property. This expression will select the records that appear in the lookup grid. For more information about formatting these expressions, see A5W Page Link, Filter, and Order Syntax and Automatically Populating Linking Field Values.  
</note>
</step>	
<step>
	<description>Click OK to return to the Grid Builder. Go to the Live Preview tab and click Full Preview. Your grid should look something like this, This example also has a Quick Search field:
</description>

<figure><link>images/01_lookup21.png</link></figure>
<note>Clicking [look_img] next to a lookup field column will display the Lookup window. Clicking the Select link to the left of a row in the Lookup window copies all of the fields in that row to your page.</note>
</step>
	
</steps>	
	
	
</section>				
<section>
	<title>Position the Lookup Window:</title>
<steps>
	
	<step>
		<description>Go back to the Fields page. Select the field control that initiates your lookup grid.  Go to the Lookup section of the Field Properties list for this control.</description>
	</step>
	<step>
		<description>Click on the button next to Lookup definition property and open the Define Lookup Window dialog. Define Lookup Window
</description>
<figure><link>images/02_Lookuppos.png</link></figure>
	</step>
	<step>
		<description>In the Lookup Window section of the dialog, click on the button next to the Window position option.</description>
	</step>
	<step>
		<description>This will open Window Position dialog. Select one of the Position options: In-View , Center , Absolute , or Relative .</description>
	<figure><link>images/02_Lookuppos2.png</link></figure>
	</step>
	<step>
		<description>Click OK , OK , and Save your grid.</description>
		<note>In order to be able to modify the data in fields, those fields must appear on a grid. This applies to cases where a lookup is used to populate a row. There are cases where you might not want all of the data that the Lookup inserts into a grid to be displayed. In these instances it is possible to hide these fields. The following example demonstrates how to do this.  
</note>
	</step>
	
	
</steps>	
	
	
</section>
<section>
	<title>Hiding Controls filled by a Lookup Grid Component:
</title>
	<steps>
<step>
	<description>In the Grid Builder  open the Design tab. On the Component Type  page select Tabular  from the Grid Layout menu. For the Grid is: selection click the Read only  option.</description>
</step>		
<step>
	<description>Under Data Source select either dbf or SQL. On Query(DBF) or Query(AlphaDAO) connect the table you will use. This example uses the Northwinds Customerstable.</description>
</step>	
<step>
	<description>While on the Query page, click Select Primary Key and choose a field that you will use in your grid.
</description>
</step>	
<step>
	<description>Open the Fields page. Move 5 fields from the Available Fields: list into the Selected: fields list using the right arrow key. Save  your grid as something, like LookupOne. </description>
</step>	
<step>
	<description>Go to Live Preview. This is the Grid that you will use to define your Lookup. Close the component
</description>
<figure><link>images/01_lookup5.png</link></figure>
</step>		
<step>
	<description>Create a second grid component. Open the Grid Builder and go to the Design page.</description>
</step>	
<step>
	<description>On the Component Type  page select Tabular  on the Grid Layout menu. Click Grid is: Updateable .</description>
</step>	
<step>
	<description>Under Data Source select the same data source that you used for the first grid component.</description>
</step>		
<step>
	<description>On the Query(DBF) or Query(AlphaDAO)  page connect to the same table that you used to create the first grid component.</description>
</step>	
<step>
	<description>On the Fields  page move the same five fields that you used in the first grid from the Available Fields  list to the Selected:  fields list.</description>
</step>	
<step>
	<description>Add two additional new fields to the Selected: fields list. In this example the new fields are CustomerIDand CompanyName.</description>
<figure><link>images/01_lookup6.png</link></figure>
</step>	
<step>
	<description>Select the first 'new' field and move it to the top of the Selected list using the up arrow. In the Field properties under Display Settings , change this fields Control type  property to 'Label '.</description>
<figure><link>images/01_lookup7.png</link></figure>
</step>		
<step>
	<description>Select the second 'new' field, in this case CompanyName. Move it to the end of the Selected: fields list using the arrows.</description>
<figure><link>images/01_lookup8.png</link></figure>
</step>	
<step>
	<description>With the field highlighted, go over to its Field Properties. Under the Display Settings  properties, change the Control type  to ' Labe l'.</description>
</step>			
<step>
	<description>In the Column Properties section check the Freeform layout  property checkbox. Find the Freeform layout template  property and click the button [dot_img] to the right of it.</description>
<figure><link>images/01_lookup9.png</link></figure>
</step>		
<step>
	<description>The Free-form Column Layout dialog will open. To the left is a list of Available fields created from the fields you selected.</description>
</step>	
<step>
	<description>Choose the name of the current field, i.e. the second 'new field that was added, in this case CompanyName. Double click on the field name to add it to the code area.</description>
<figure><link>images/01_lookup10.png</link></figure>
</step>	
<step>
	<description>Next select three fields from the Available Fields  list that you wish to hide and add them to the code area. Click OK .</description>
<figure><link>images/01_lookup11.png</link></figure>
</step>	
<step>
	<description>Back on the Fields page again, for each field you wish to hide do the following. First click on the field in the Selected: fields list.</description>
</step>		
<step>
	<description>Next, go to the Field Properties list for each field. Under Display Settings, change the Control Type to ' Hidden '. Under Column Properties check the Hide column checkbox.</description>

<cases>
	<case>
		<figure><link>images/01_lookup13.png</link></figure>
	</case>
		<case>
		<figure><link>images/01_lookup12.png</link></figure>
	</case>
	
</cases>
</step>	
<step>
	<description>In your Selected: fields list there should now be two TextBox field controls, two 'Label' field controls, and three 'Hidden' field controls. Select the first TextBox field control.</description>
</step>	
<step>
	<description>Go to the Field Properties list and in the Lookup section check the Lookup checkbox.</description>
</step>		
<step>
	<description>Two more properties will appear. Under the first, Lookup Type , select Grid Component .</description>
</step>	
<step>
	<description>Click the button to the right of the Lookup definition property. This will open the Define Lookup Window dialog.

</description>
	<figure><link>images/01_lookup14.png</link></figure>
</step>	
<step>
	<description>In the Define Lookup Window dialog, from the component list select the LookupOnegrid component that you created in steps 1 through 5.</description>
</step>	
<step>
	<description>Find the Field Map property, under Field Mapping , and click the button next to it. This will display the Define Field Mapping dialog.</description>
</step>		
<step>
	<description>Click the Add Field button.</description>
	<cases>
		<case>
			<figure><link>images/01_lookup15.png</link></figure>
		</case>
				<case>
			<figure><link>images/01_lookup16.png</link></figure>
		</case>
		
	</cases>
	
</step>	
<step>
	<description>Click OK  and OK  again. Go to Live Preview :</description>
	<cases>
		<case>
			<description>In the Grid that calls the Lookup only 2 of the 5 Lookup fields are visible, 3 are hidden 
</description>
			<figure><link>images/01_lookup17.png</link></figure>
		</case>
		<case>
			<description>The Lookup displays all 5 fields 
</description>
			<figure><link>images/01_lookup18.png</link></figure>
		</case>
		
		
	</cases>
	
	
</step>			
	</steps>
	
	
	
</section>				
	
<section>
	<title>Code Reference</title>
<cases>
	<case>
		<title>Lookup  </title>
		<example><![CDATA[tmpl.Field_Info[N]             .HasLookup as L ]]></example>
	</case>
	<case>
		<title>Grid name  </title>
		<example><![CDATA[tmpl.Field_Info[N]             .Lookup.GridName as C ]]></example>
	</case>
	<case>
		<title>Window title</title>
		<example><![CDATA[tmpl.Field_Info[N]             .Lookup.WindowTitle as C ]]></example>
	</case>
	<case>
		<title>Width</title>
		<example><![CDATA[tmpl.Field_Info[N]             .Lookup.WindowWidth as N ]]></example>
	</case>
	<case>
		<title>Height</title>
		<example><![CDATA[tmpl.Field_Info[N]             .Lookup.WindowHeight as N ]]></example>
	</case>
	<case>
		<title>Scrollbars</title>
		<description>Enables and disables scrollbars in the lookup window.  </description>
		<example><![CDATA[tmpl.Field_Info[N]             .Lookup.HasScrollBars as L ]]></example>
	</case>
	<case>
		<title>Resizable</title>
		<example><![CDATA[tmpl.Field_Info[N]             .Lookup.IsResizeable as L ]]></example>
	</case>
	<case>
		<title>Inherit parent style</title>
		<example><![CDATA[tmpl.Field_Info[N]             .Lookup.LookupWindowInheritParentStyle as L]]></example>
	</case>
	<case>
		<title>Select record link label</title>
		<example><![CDATA[tmpl.Field_Info[N]             .Lookup.LookupGrid.LinkLabel as C ]]></example>
	</case>
	<case>
		<title>Select record link label style</title>
		<example><![CDATA[tmpl.Field_Info[N]               .Lookup.LookupGrid.LinkLabelStyle as C]]></example>
	</case>
	<case>
		<title>Field map</title>
		<cases>
			<case>
				<title>lookup</title>
		<example><![CDATA[tmpl.Field_Info[N]              .Lookup.LookupGrid.ReturnFields as  C ]]></example>
				
			</case>
			<case>
				<title>grid</title>
		<example><![CDATA[tmpl.Field_Info[N]                .Lookup.FillinFields as C ]]></example>
				
			</case>
		</cases>
	</case>
	<case>
		<title>Link type</title>
		<example><![CDATA[tmpl.Field_Info[N]             .Lookup.LinkType as C ]]></example>
	</case>
	<case>
		<title>Link label</title>
		<example><![CDATA[tmpl.Field_Info[N]             .Lookup.LinkLabel as C ]]></example>
	</case>
	<case>
		<title>Link label style</title>
		<example><![CDATA[tmpl.Field_Info[N]             .Lookup.LinkLabelStyle as C ]]></example>
	</case>
	<case>
		<title>Icon name</title>
		<example><![CDATA[tmpl.Field_Info[N]             .Lookup.IconName as C ]]></example>
	</case>
	
	
</cases>	
	
</section>	
	
		
<section>
	<description>See Also
 A5W Page Link, Filter, and Order Syntax 
</description>
</section>		
				
				
			</sections>
		</group>
		
			<group background="true">
				<title>Javascript</title>
			<sections>
				<section>
					<title>Desktop Applications and Working Preview - Action Javascript to Print Report</title>
<description>If you use the 'client-side xbasic' feature to add a button to a Grid component to print a Report, the report will also render when the Grid is running on the Desktop and Working Preview. 
This as opposed to the report only rendering if the Grid was running in the Browser or in Live Preview. 

</description>
<videos>
	<video>
		<name>Watch Video 
</name>
		<link>http://www.ajaxvideotutorials.com/V10Videos/WorkingPreviewReport.swf</link>
	</video>
	
	
</videos>
				</section>
			</sections>
		</group>
		
			<group>
			<sections>
				<section>
					<title>Grid Component - Pop-up Ajax Windows</title>
					<cases>
						<case>
							<title>Position</title>
							<description>You can now control the position of pop-up Ajax windows. 
</description>
<videos>
	<video>
		<name>Watch Video - Part 1</name>
		<description>http://www.ajaxvideotutorials.com/V10Videos/PopWindowPosition_Part1.swf</description>
	</video>
	<video>
		<name>Watch Video - Part 2</name>
		<description>http://www.ajaxvideotutorials.com/V10Videos/PopWindowPosition_Part2.swf</description>
	</video>
	
	
</videos>
							
						</case>
						<case>
							<title>New Window Properties</title>
							<description>When you use Action Javascript to open a child Grid, Report, or .a5w page in a pop-up Ajax window you can now set the title bar position to 'top' or 'bottom'. Previously the window title was always at the top of the window. You can also specify that the window should not be moveable. Previously, windows were always moveable. 
</description>
							
						</case>
						<case>
							<title>Javascript</title>
							<description>When you write the Javascript for the Window events, you can now use two new placeholders that make it very easy to execute methods on the child Grid that is opened in the pop-up Ajax window. The placeholders are: 
</description>
<cases>
	<case>
		<description>{Grid.ChildComponentName}
</description>
	</case>
	<case>
		<description>{Grid.ChildObject}
</description>
	</case>
	
</cases>
							
						</case>
						
						
					</cases>
				</section>
			</sections>
		</group>
		
			<group background="true">
			<sections>
				<section>
					<title>Ajax Windows</title>
			<cases>
<case>
	<title>Animation</title>
<description>Animation effects have been added for pop-up Ajax windows.


Ajax windows that contain IFrames, which in turn contain display PDF files, cannot be animated. As a result, the Animation property has not been made available for Ajax windows that host .a5w pages, since .a5w pages are hosted in an IFrame.

There are several animation methods that have been exposed. The 'slide' and 'fade' methods are based on methods in the jQuery core library. All of the other methods are based on method in the jQueryUI library. By default, both of these libraries are loaded. The Web Project Properties dialog contains settings which control if these libraries are loaded, and from where they should be loaded.

You can control the animation effect for the window display and the window close. You can also control the animation speed. If you use the smart field to choose an animation, the animation builder will pop up.

</description>
<figure><link>../../../../../Client/Guide/Design/View/Component/images/animation_builder.png</link></figure>	
</case>				
<case>
	
<description>Certain animation styles will mess up the positioning of windows. If you find this to be the case, you should stick with the 'Fade' style for the 'show' animation.
</description>
<videos>
	<video>
		<name>Watch Video</name>
		<link>http://www.ajaxvideotutorials.com/V11Videos/AnimatingAjaxWindows.swf</link>
		
	</video>
	
	
</videos>
</case>				
		
<case>
	<title>Background Style Property</title>
<description>You can now set a background style property for pop-up Ajax windows. This will allow you, for example, to set a background color, or background image for the window.
</description>

</case>				
<case>
	<title>Centering Content</title>
<description>Ajax Windows that display Grids, UX, or Custom Components can now automatically center the content in the window. You can specify if you want vertical, horizontal or both vertical and horizontal centering.
The image below shows a pop-up Ajax window where a background color has been set, and the window contents has been centered on both the vertical and horizontal dimension.</description>
<figure><link>../../../../../Client/Guide/Design/View/Component/images/windowbackground.jpg</link></figure>	
</case>				
										
				
			</cases>
			
				</section>
				
<section>
	<description>See Also: JQuery Support </description>
	
	
</section>				
				
				
				
				
				
				
				
			</sections>
			
		</group>
		
		
<group background="true">
	<title>Time Picker Properties</title>
<sections>
<section>
	
	<description>You can enable a Time Picker for Short-time fields and Character fields. To turn on the Time Picker for these field types, check the 'Time Picker' property in the new 'Time Picker Properties' section. The Open how property lets you define whether a user clicking on an icon (ClickIcon) or clicking on a field (Focus) will open the Timepicker. The Time format property allows you to set how the time is displayed, there are , , and options. Checking the User must select from Time picker property will automatically open the time picker when the field control it is in gets focus. The OK button label property and Cancel button label property simply change the text on the OK and Cancel buttons that appear on the time picker. As with other labels you can introduce HTML directly into the label definition, to give the OK and Cancel buttons the appearance you want.
</description>
</section>	
</sections>	
</group>		
		
<group>
<sections>
<section>

	<description>Time picker with icon</description>
	<figure><link>images/02_Lookuppos3.png</link></figure>
</section>	
</sections>	
</group>		
				
<group background="true">
<sections>
<section>
	<title>Column Properties</title>
	<description>Set Columnor RowProperties
There are situations where you will want to hide a column or row. This will be true if you are placing the field in a different column or row using a Freeform template. A freeform layout allows to insert any HTML code plus any combination of fields on the grid into a grid column. For example, although your database had  firstname and  lastname fields, a freeform layout could display a single  name field that combined these two values.  
In almost all cases you will want to define the column or row heading.  
If you want to control access to this field, you may set a minimum security level requirement (V7). A users with a too low security level will not be able to see the column.  
The column's cell in-line style field defines additional HTML formatting that you want to apply to the cell of the grid. If you wanted to change the border or background of the cell, this is where you would do it.  
The can sort property enables and disables the ability to click on the column heading and sort the current page based on the values in the selected column.  
</description>
<cases>
	<case>
		<title>Hide column, Hide row</title>
		<description>Hides the column or row that would contain this field. You might choose to hide the field if it was displayed in a free-form layout.</description>
		<example><![CDATA[tmpl.Field_Info[N] 
.Column.Hide as L ]]></example>
	</case>
<case>
		<title>Column heading,  
Row heading</title>
		<description>The label that identifies the column o row.</description>
		<example><![CDATA[tmpl.Field_Info[N] 
.Column.Heading as C]]></example>
	</case>
	<case>
		<title>Column in-line style, Row label in-line style</title>
		<description>Specifies style attributes that override the settings inherited from the style sheet. Click to define the In-line style. Refer to the Style Editor for details.</description>
		<example><![CDATA[tmpl.Field_Info[N] 
.Column.LabelInLineStyle as C]]></example>
	</case>
	<case>
		<title>Heading prefix, Label prefix</title>
		<description>Specify HTML text or the path to and name of an image to be displayed to the left of the row or above the column heading.</description>
		<example><![CDATA[tmpl.Field_Info[N] 
.Column.Heading_Left as C]]></example>
	</case>
	<case>
		<title>Row label position</title>
		
	
		<cases>
			<case>
				<description>The position of the label in relationship to the control. The options are:  </description>
				<cases>
					<case>
						<description>"Left"  
</description>
					</case>
					<case>
						<description>"Right"  
</description>
					</case>
					<case>
						<description>"Above"  
</description>
					</case>
					<case>
						<description>"Below"  
</description>
					</case>
					
				</cases>
			</case>
			<case>
				
<example><![CDATA[tmpl.Field_Info[N] 
.Column.LabelPosition as C 
]]></example>				
			</case>
			
		</cases>
	</case>
	<case>
		<title>Can sort</title>
		<description>Specifies whether the grid will be sorted when the user clicks on the column or row heading.  </description>
		<example><![CDATA[tmpl.Field_Info[N] 
.Column.Sort as C ]]></example>
	</case>
	<case>
		<title>Sort field </title>
		<description>Specify the field(s) to sort on when user clicks on the column or row title. Put commas between field names.  </description>
		<example><![CDATA[tmpl.Field_Info[N] 
.Column.Sort as C ]]></example>
	</case>
	<case>
		<title>Freeform layout</title>
		<description>Specify if this column or row should display just this field, or allow a free-form layout. The options are:  
"Freeform"  
</description>
		<example><![CDATA[tmpl.Field_Info[N] 
.Column.Type as C 
]]></example>
	</case>
	<case>
		<title>Freeform template</title>
		<description>Click the [dot_img] to display the Freeform Column Layoutdialog box to define the fields and formats to display in this grid cell.  </description>
		<example><![CDATA[tmpl.Field_Info[N] 
.Column.FreeFormTemplate = <<%html% 
' code here 
%html% ]]></example>
	</case>
	<case>
		<title>Cell in-line style</title>
		<description>Specifies style attributes that override the settings inherited from the style sheet. Click to define the In-line style. Refer to the Style Editor for details.  </description>
		<example><![CDATA[tmpl.Field_Info[N] 
.Column.InLineStyle as C 
]]></example>
	</case>
	<case>
		<title>Security level   </title>
		<description>If the user is logged in with a security level that is lower than the security level you specify here, the column or row will be hidden. Set the security level to 0 to always show this column or row.  
</description>
		<example><![CDATA[tmpl.Field_Info[N] 
.Column.SecurityLevel as N 
]]></example>
	</case>
	<case>
		<title>Bubble Help Text</title>
		<description>Optionally, set an initial value for the control to display.  </description>
		<example><![CDATA[tmpl.Variable_Info[N] 
.BubbleHelp as C ]]></example>
	</case>
	<case>
		<title>Label Bubble Help Text  </title>
		<description>Optionally, set an initial value for the control to display.</description>
		<example><![CDATA[tmpl.Variable_Info[N] 
.BubbleHelpLabel as C ]]></example>
	</case>
	<case>
		<title>Break Type</title>
		<cases>
			<case>
				<description>Forces a new row either before or after a control. The options are:  </description>
			<cases>
				<case>
					<description>"None"  </description>
				</case>
				<case>
					<description>"Break before"  
</description>
				</case>
				<case>
					<description>"Break after"  
</description>
				</case>
				<case>
					<description>"Break before and after"  
</description>
				</case>
				
			</cases>	
			</case>
			<case>
				<example><![CDATA[tmpl.Variable_Info[N] 
.Breaktype as C  ]]></example>
			</case>
			
		</cases>
		
		
	</case>
	<case>
		<title>Column Span  </title>
		<description>The number of columns to group together.</description>
		<example><![CDATA[ tmpl.Variable_Info[N] 
.nCols as N ]]></example>
	</case>
	
</cases>


</section>	
</sections>	
</group>		
		
<group background="true">
<sections>
<section>
	<title>Formatting Grid Controls  
</title>
	<cases>
		<case>
			<title>Opening a Grid Component   </title>
			<cases>
				<case>
					<description>Select "Web Components" in the left pane, so that you can see your new grid component.  
</description>
				</case>
				<case>
					<description>Select "AlphaSports_Customer_Grid" and click Edit.  
</description>
				</case>
				<case>
					<description>At this point your new grid should look something like the following (using the default cascading style sheet).  
</description>
					<figure><link>images/WPT_First_Grid.gif</link></figure>
				</case>
				
			</cases>
			
		</case>
		<case>
			<title>Modifying Grid Controls</title>
			<description>There are many formatting options available through the Grid Component Buildermenus. We will just make a few modifications to some of the (textbox) controls show you how easy it is.  </description>
			<cases>
				<case>
					<description>1. Display the Grid > Fieldspage.  
</description>
				</case>
				<case>
					<description>2. Select "Customer_Id" in the Selected Fieldslist.  
</description><cases>
	<case>
		<description>1. Change its Column Properties > Column headingto "ID".  
</description>
	</case>
	<case>
		<description>2. Change its Column Properties > Heading in-line styleto "text-align: left;".  
</description>
	</case>
	
</cases>
				</case>
				<case>
					<description>3. Select "Firstname" in the Selected Fieldslist.  
</description>
					<cases>
	<case>
		<description>1. Change its TextBox Properties > Sizeto 10.  
</description>
	</case>
	<case>
		<description>2. Change its Column Properties > Column headingto "First Name".  
</description>
	</case>
	<case>
		<description>3. Change its Column Properties > Heading in-line styleto "text-align: left;".  
</description>
	</case>
	
</cases>
				</case>
				<case>
					<description>4. Select "Lastname" in the Selected Fieldslist.  
</description>
					<cases>
	<case>
		<description>1. Change its TextBox Properties > Sizeto 10.  
</description>
	</case>
	<case>
		<description>2. Change its Column Properties > Column headingto "Last Name".  
</description>
	</case>
	<case>
		<description>3. Change its Column Properties > Heading in-line styleto "text-align: left;".  
</description>
	</case>
	
</cases>
				</case>
				<case>
					<description>5. Select "Company" in the Selected Fieldslist.  
</description>
					<cases>
	<case>
		<description>1. Change its TextBox Properties > Sizeto 20.  
</description>
	</case>
	<case>
		<description>2. Change its Column Properties > Heading in-line styleto "text-align: left;".  
</description>
	</case>
	
</cases>
				</case>
				<case>
					<description>6. Select "Phone" in the Selected Fieldslist.  
</description>
					<cases>
	<case>
		<description>1. Change its TextBox Properties > Sizeto 17.  
</description>
	</case>
	<case>
		<description>2. Change its Column Properties > Heading in-line styleto "text-align: left;".  
</description>
	</case>
	
</cases>
				</case>
				<case>
					<description>7. Select "Fax" in the Selected Fieldslist.  
</description>
					<cases>
	<case>
		<description>1. Change its TextBox Properties > Sizeto 17.  
</description>
	</case>
	<case>
		<description>2. Change its Column Properties > Heading in-line styleto "text-align: left;".  
</description>
	</case>
	
</cases>
				</case>
				<case>
					<description>8. Select the Live Previewtab. The grid should now look something like this.  
</description>
<figure><link>images/New_Grid_with_Modified_Fields.gif</link></figure>
				</case>
				
				
			</cases>
		</case>
		
		
	</cases>
</section>	
<section>
	<description>See. Suppressing Blank Fields in an Address, Creating a Grid that Looks Like a Dialog   </description>
</section>
</sections>	
</group>		
		
<group background="true">
<sections>
<section>
	<title>Dynamic Column and Row Grid Headings</title>
	<description>If you would like to be able to dynamically change the title of a grid column or row, the solution to creating conditional headings in grid components is to define a variable that contains the column or row heading that you want to display. Change "component_name" to the name of your component. Change "[1]" to reflect the index number of the column or row you wish to modify.
Add additional Xbasic code to set the value of var1.
</description>
<example><![CDATA[with tmpl_1
    componentName = "component_name"
    with field_info[1]
        .Column.Heading = var1
    end with
end with]]></example>
</section>	
<section>
	<description>See Also: Column Properties </description>
</section>
</sections>	
</group>		
		
		<group background="true">
<sections>
<section>
	<title>Row Properties </title>
	<description></description>
	<cases>
		<case>
			<title>Cell in-line Style </title>
			<description>The appearance of a control and the grid cell that contains it are set by the style sheet attached to the grid component. In the Grid or UX Component Builders, two properties can override these style sheet settings. These are the In-line style property found in the control's properties settings (i.e. Label Properties, Dropdown Properties, etc..) and the Cell in-line style property found in the Column (or Row) Properties section of the Field Properties list. The picture shows what this can look like. Here is a grid component with four field rows, Company Name, Contact Name, City, and Country. The last field, Country, has had its Cell in-line style properties modified so that the background and the border are green. Cell in-line style for Country field.</description>
			<figure><link>images/02_Incellstyle.png</link></figure>
			<cases>
				<case>
					<title></title>
					<description>1. Open the Grid Builder. On the Design tab in the Component Type page select Grid is: Read Only.</description>
				</case>
				<case>
					<description>2. Open the Data Source page and select either dbf or SQL. </description>
				</case>
				<case>
					<description>3. On the Query(DBF) or Query(AlphaDAO) page select a table you want to use, click Select Primary Key to choose field you will use.</description>
				</case>
				<case>
					<description>4. On the Fields page move a number of fields from the Available Fields: list to the Selected: fields list using the arrows between the two lists.</description>
				</case>
				<case>
					<description>5. Select one of the fields in the Selected: fields list. In the Field Properties list scroll down to either the Column Properties section or the Row Properties section depending.</description>
				</case>
				<case>
					<description>6. In this section find the Cell in-line style property. Click the button next to it. This will open the  Style Editor.</description>
				<figure><link>images/02_Styleeditor.png</link></figure>
				</case>
				
				<case>
					<description>7. In the Style Editor set the Background color, border style and color, font type and size, and other style attributes to your liking. </description>
				</case>
				<case>
					<description>8. Now go to Live Preview and see how your styling looks. Cell in-line style on Contact Name field:
</description><figure><link>images/02_Styleeditor2.png</link></figure>
				</case>
				
				
				
			</cases>
		</case>
		<case>
			<title>Break </title>
			<description>The Break property works only with columnar formatting where the Number of 'Layout' Columns property is greater than 1. The Number of Layout Columns property is located in the Layout Options section of the Grid Properties page. A Break can be inserted before, after, or before and after and control. When a break is added to a grid is appears as a carriage return symbol in the Selected: fields list on the fields page.</description>
			<cases>
				<case>
					<title>Using the Break property for Control Positioning:  
</title>
					
					<figure><link>images/02_breaknew.png</link></figure>
				</case>
				<case>
					<figure><link>images/02_breaknew2.png</link></figure>
					<note>This causes the Contact Name, City, and Country fields to wrap to a second row. The effect only visible on the City field due to the fact that this is the only field that would not wrap to the next row by default. By default, the grid also only shows the labels of the first row of controls. However, this can be overcome by changing the Column heading property.</note>
				</case>
				
			</cases>
		</case>
		<case>
			<title>Column span </title>
			<description>The Column span property only works with columnar grids when the Number of 'Layout' Columns , found in the Layout Options portion of the grid Properties page, is set to a value greater than one. Changing the Column span value of a control helps position that control inside a grid or UX component. This is often achieved in concert with other layout properties such as the Number of "Layout" columns and the Repeating columns property. 
</description>
			<cases>
				<case>
					<title>Using Column span for Control Positioning:  </title>
					<description>1. In the Grid Builder go to the Design tab and open the Component Type page. In the Grid Layout menu select a Form (Columnar) grid.</description>
					<figure><link>images/01_colspan.png</link></figure>
				</case>
				<case>
					<description>2. Open the Data Source page and select either .dbf or SQL as a data source.</description>

				</case>
				<case>
					<description>3. Click on the Query(DBF) or Query(AlphaDAO) page and connect to the table that you will pull data from. Click Select Primary Key and choose a field you will use.</description>
					
				</case>
				<case>
					<description>4. Open the Fields page. Move 6 fields from the Available Fields: list into the Selected: fields list using the arrow buttons.</description>
					<figure><link>images/01_colspan2.png</link></figure>
				</case>
				<case>
					<description>5. Now go to the grid Properties page . In the Layout Options section find the Number of 'Layout' columns property and set it to 2.</description>
					<figure><link>images/01_colspan3.png</link></figure>
				</case>
				<case>
					<description>6. Find the Repeating columns property, also located under Layout Options, and set the Repeating columns property to be 3.</description>
					<figure><link>images/01_colspan4.png</link></figure>
				</case>
				<case>
					<description>7. Now go to Live Preview and see how the records on your grid look:</description>
					<figure><link>images/01_colspan5.png</link></figure>
				</case>
				<case>
					<description>8. Return the the Design tab and on the Fields page click on the first field control in your Selected: fields list.</description>

				</case>
				<case>
					<description>9. Go to the Row Properties section of the Field Propertie s list. Find the Column spanproperty and set its value to 2.  </description>
					<figure><link>images/01_colspan6.png</link></figure>
				</case>
				<case>
					<description>10. Now go to Live Preview again. Notice how changing the column span for the first field pushes the other fields down.  

</description>
					<figure><link>images/01_colspan7.png</link></figure>
				</case>
				<case>
					<description>11. Go back to the Fields page. Select the fourth field in your Selected: fields list. Go to the Field Properties list and again find the Row Properties section.   Set the  Column spanvalue for this property to 2.  </description>
					
				</case>
				<case>
					<description>12. Open the grid in Live Preview :  </description>
					<figure><link>images/01_colspan8.png</link></figure>
				</case>
				
			</cases>
		</case>
		
	</cases>
</section>	
</sections>	
</group>		
		
		
<group background="true">
<sections>
<section>
	<title>Update Settings</title>
	<description>If the grid is editable and the control type is editable, you may optionally suppress editing of the field that you view through the control.  
You may also set a minimum security level required to change the field's contents.  
</description>
<cases>
	<case>
		<title>Updateable</title>
		<description>Specifies whether the field can be edited.</description>
		<example><![CDATA[with tmpl.field_info[N]         .Updateable as L ]]></example>
	</case>
	<case>
		<title>Table alias</title>
		<description>This property defines the alias of the table that contains the field.  </description>
		<example><![CDATA[with tmpl.field_info[N          .Table_Alias as C ]]></example>
	</case>
	<case>
		<title>Field to update</title>
		<description>Specifies the field that binds to the control.  </description>
		<example><![CDATA[with tmpl.field_info[N]         .FieldToUpdate as C ]]></example>
	</case>
	<case>
		<title>Security level  </title>
		<description>Specifies the minimum security level required to edit the contents of the field.  </description>
		<example><![CDATA[with tmpl.field_info[N]       .UpdateSecurityLevel as N ]]></example>
	</case>
	
	
</cases>
</section>	
</sections>	
</group>		
				
										
<group background="true">
<sections>
<section>
	<title>Summary Values</title>
	<description>Summary values display various types of information about a field as it appears throughout the entire table. In other words these calculations summarize all values on all pages of the grid, not just values displayed on the visible page. Summary types include: Total (numeric fields only), Count (numeric fields only), Average (numeric fields only), Minimum, Maximum, Standard Deviation (numeric fields only), Variance (numeric fields only), First, and Last. You can have summaries of as many columns as you want. Summaries can appear on all pages or on the last page only. 
</description>
</section>	
<section>
	<description>Four Summary Values</description>
	<figure><link>images/01_summary.png</link></figure>
	<cases>
		<case>
			<title>Total 
</title>
			<description>Displays the total value of the fields in all the records of the table.  
</description>
			<example><![CDATA[.Summary.total.has as L 
.Summary.total.displayformat as C 
 ]]></example>
		</case>
		<case>
			<title>Count 
</title>
			<description>Displays the count of the fields in all the records of the table.  
</description>
			<example><![CDATA[.Summary.count.has as L 
.Summary.count.displayformat as C 
]]></example>
		</case>
		<case>
			<title>Average 
</title>
			<description>Displays the average value of the fields in all the records of the table.  
</description>
			<example><![CDATA[.Summary.average.has as L 
.Summary.average.displayformat as C 
]]></example>
		</case>
		<case>
			<title>Minimum 
</title>
			<description>Displays the minimum value found in the field.  
</description>
			<example><![CDATA[.Summary.min.has as L 
.Summary.min.displayformat as C 
]]></example>
		</case>
		<case>
			<title>Maximum 
</title>
			<description>Displays the maximum value found in the field.  
</description>
			<example><![CDATA[.Summary.max.has as L 
.Summary.max.displayformat as C 
]]></example>
		</case>
		<case>
			<title>Standard Deviation 
</title>
			<description>Displays the standard deviation of the fields in all the records of the table.  
</description>
			<example><![CDATA[.Summary.stddev.has as L 
.Summary.stddev.displayformat as C 
]]></example>
		</case>
		<case>
			<title>Variance 
</title>
			<description>Displays the variance of the fields in all the records of the table.  
</description>
			<example><![CDATA[.Summary.var.has as L 
.Summary.var.displayformat as C 
]]></example>
		</case>
		<case>
			<title>First 
</title>
			<description>Displays the first value found in the field.  
</description>
			<example><![CDATA[.Summary.first.has as L 
.Summary.first.displayformat as C 
]]></example>
		</case>
		<case>
			<title>Last 
</title>
			<description>Displays the last value found in the field.  
</description>
			<example><![CDATA[.Summary.last.has as L 
.Summary.last.displayformat as C 
]]></example>
		</case>
		<case>
			
			<description>All summary types of a grid.  
</description>
			<figure><link>images/01_summary2.png</link></figure>
		</case>
		
		
		
	</cases>
</section>
</sections>	
</group>	

<group>
<sections>
<section>
	<title>Styling Summary Values</title>
	<description>You can define inline styles for summary values. You can also use the new BeforeSummarySectionRenderevent to make the inline style conditional on the value of the summary field. 
</description>
<videos>
	<video>
		<name>Watch Video</name>
		<link>http://www.ajaxvideotutorials.com/V11Videos/StylingSummaryGridValues.swf</link>
	</video>
	
</videos>
</section>	
<section>
	<cases>
		<case>
			<title>Average </title>
			<example><![CDATA[tmpl.summary.average.label as C tmpl.field_info[N] 
]]></example>
		</case>
			<case>
			<title>Count
</title>
			<example><![CDATA[tmpl.summary.count.label as C tmpl.field_info[N]]]></example>
		</case>
			<case>
			<title>First</title>
			<example><![CDATA[tmpl.summary.first.label as C tmpl.field_info[N]]]></example>
		</case>
			<case>
			<title>Last
</title>
			<example><![CDATA[tmpl.summary.last.label as C tmpl.field_info[N]
]]></example>
		</case>
			<case>
			<title>Maximum
</title>
			<example><![CDATA[tmpl.summary.max.label as C tmpl.field_info[N]
]]></example>
		</case>
			<case>
			<title>Minimum</title>
			<example><![CDATA[tmpl.summary.min.label as C tmpl.field_info[N]]]></example>
		</case>
			<case>
			<title>Standard Deviation</title>
			<example><![CDATA[tmpl.summary.stddev.label as C tmpl.field_info[N]]]></example>
		</case>
			<case>
			<title>Total
</title>
			<example><![CDATA[tmpl.summary.total.label as C tmpl.field_info[N]]]></example>
		</case>
			<case>
			<title>Variance</title>
			<example><![CDATA[tmpl.summary.var.label as C tmpl.field_info[N]
]]></example>
		</case>
			
	</cases>
	
	
</section>
</sections>	
</group>			

<group>
<sections>
<section>
	<title>Setting Grid Control Properties</title>
	<description>Allowed Control Types - purpose and action:</description>
<cases>
	<case>
		<title>RTF</title>
		<description>Rich Text Formatted (RTF) text</description>
	</case>
	<case>
		<title>Date field</title>
		<description>To create a control appropriate for s a date, set the control type to"calendar" or "textbox" and then modify Date picker properties.
</description>
	</case>
	<case>
		<title>Image or image reference field
</title>
		<description>To create a field that displays a picture, set the control type to "Image".
</description>
	</case>
	<case>
		<title>Detail view link </title>
		<description>Set the control type of the field the that connects to the detail view to type "link". 
</description>
	</case>
	<case>
		<title>True/False choice</title>
		<description>Set the control type of the field to check box and define its Choiceproperties. 
</description>
	</case>
	<case>
		<title>Short list of choices 
</title>
		<description>Set the control type of the field to radio button and define its Choiceproperties. Choices can be static or dynamic (retrieved from a table). 
</description>
	</case>
	<case>
		<title>Long list of choices 
</title>
		<description>Set the control type of the field to drop down list box and define its Choiceproperties. Choices can be static or dynamic (retrieved from a table). 
</description>
	</case>
	
	
	
</cases>	
	
	
	
</section>	

</sections>	
</group>	

<group background="true">
<sections>
<section>
	<title>Calendar Properties </title>
	<description>The Calendar control is a control that a user can place on Grid and Dialog components. Compare it to the date picker control, which is a text box with a button that opens a calendar in a pop-up window. The Calendar control always displays the calendar on the page. The user does not have to click a button to open the calendar in a new window. The Calendar control can be read-only or set the value of table field.  </description>
	<note>This allows the user's grid and touse different date formats. This feature was added in V7 to resolve the problem where the server was using a US style date format (dd/mm/yy), but the application needed to use a date format such as yy-mm-dd or yy/mm/dd. In the Grid Component Builderset Grid Properties > Advanced > Date format on client does not match serverto TRUE and enter the client date format in the following field. You may use different separators between the YY, MM, and DD parts of the date format. This property informs the Application Serverthat it needs to translate dates entered through this grid component.  </note>
</section>	
<section>
	<cases>
		<case>
			<title>Date format</title>
			<description>Specify the format in which date values are passed to the calendar control. e.g.  mm/dd/yyyy .  </description>
			<example><![CDATA[with tmpl.field_info[N] 
.Calendar.DateFormat as C 
]]></example>
		</case>
		<case>
			<title>Read only</title>
			<description>Specify if the calendar control is for displaying date values only, or should it allow the user to also set date values. If the calendar control is read only, then the user cannot click on any of the days, and the buttons at the top of the control to change the year and month are hidden.  </description>
			<example><![CDATA[with tmpl.field_info[N] 
.Calendar.Readonly as L 
]]></example>
		</case>
		<case>
			<title>Switch year</title>
			<description>This property is available on if the Read only property is not set. If a date value has a two digit year, specify which year to switch from 1900 to 2000.</description>
			<example><![CDATA[with tmpl.field_info[N] 
.CalendarSwitchYear as N ]]></example>
		</case>
		<case>
			<title>Combo boxes</title>
			<description>When enabled, displays the combo boxes for the year and month pickers.</description>
			<example><![CDATA[with tmpl.field_info[N] 
.Calendar.UseComboBoxes as L]]></example>
		</case>
		<case>
			<title>Low year</title>
			<description>Specifies the low year in the year picker.  </description>
			<example><![CDATA[with tmpl.field_info[N] 
.Calendar.LowYear as N ]]></example>
		</case>
		<case>
			<title>High year</title>
			<description>Specifies the high year in the year picker.  </description>
			<example><![CDATA[with tmpl.field_info[N] 
.Calendar.HighYear as N
]]></example>
		</case>
		
		
	</cases>
	
	
</section>
<section>
	<description>A columnar grid with a calendar control.  
</description>
	<figure><link>images/WP_Calendar_Control.gif</link></figure>
	
</section>
</sections>	
</group>	

<group background="true">
<sections>
<section>
	<title>Date Picker Properties</title>
	<description>Here are the Date Picker Properties</description>
	<cases>
		<case>
			<title>Date format</title>
			<description>Refer to Date and Time Format Elementsfor supported formats.  </description>
			<example><![CDATA[with tmpl.field_info[N] 
.DatePicker.DateFormat as C 
]]></example>
		</case>
		<case>
			<title>Date picker icon</title>
			<description>Selects the icon that appears to the right of the field. The options are:</description>
<figure><link>images/atable.png</link></figure>
		
			<example><![CDATA[with tmpl.field_info[N] 
DatePicker.IconNumber as N 
]]></example>
		</case>
		<case>
			<title>Switch year  </title>
			<description>The number that is used to place 2 year dates into the current or prior century.  </description>
			<example><![CDATA[with tmpl.field_info[N] 
.DatePicker.SwitchYear as N
]]></example>
		</case>
		<case>
			<title>Use combo boxes</title>
			<description>Enables or disables the month and year combo boxes.  </description>
			<example><![CDATA[with tmpl.field_info[N] 
.DatePicker.UseComboBoxes as L
]]></example>
		</case>
		<case>
			<title>Low year</title>
			<description>The lowest number year shown in the year list box.  </description>
			<example><![CDATA[with tmpl.field_info[N] 
.DatePicker.LowYear as N 
]]></example>
		</case>
		<case>
			<title>High year</title>
			<description>The highest number year shown in the year list box.  </description>
			<example><![CDATA[with tmpl.field_info[N] 
.DatePicker.HighYear as N 
]]></example>
		</case>
		
		
		
	</cases>
</section>	
<section>
	<description>The Calendar control appears when the user clicks the calendar icon to the right of the date field.  
</description>
	<figure><link>images/WP_Date_Picker_Control.gif</link></figure>

</section>
<section>
	<description>The size of the pop-up calendar of the date picker is defined in a JavaScript file named  a5_html_calendar.js .   To change the size of the calendar modify the pixel offset values associated with  offsetWidth (30) and  offsetHeight (40) in the following line in this file.  </description>
	<example><![CDATA['<body class="'+style+'PAGEBODY" 
on load="fill_calendar('+old_month+', '+old_year+', settings, '+month_type+', '+day_type+'); 
window.resizeTo(document.getElementById(\'cal_layout_table\').offsetWidth+ 30  , 
document.getElementById(\'cal_layout_table\').offsetHeight+ 40  )" style="margin:0px; 
overflow: hidden;">\n'+ ]]></example>
</section>
<section>
	<description>Drop down list, radio button, and check box controls. Dropdown list controls optionally allow multiple selections.  
</description>
	<figure><link>images/WP_Choice_Controls.gif</link></figure>
	
</section>


</sections>	
</group>	

<group background="true">
<sections>
<section>
	<title></title>
	<description></description>
</section>	
</sections>	
</group>	

<group background="true">
<sections>
<section>
	<title></title>
	<description></description>
</section>	
</sections>	
</group>	
		
		
		
		
		
		
		
		
		
		
		
	</groups>
	<links>
		<link href="../../Data/FieldRules/images/Refresh_Display_Button.gif">round_img</link>
		<link href="../../Data/FieldRules/images/Move_Right_Button.gif">left_img</link>
		<link href="../../Data/FieldRules/images/Move_Last_Button_2.gif">leftleft_img</link>
		<link href="../../Data/FieldRules/images/Move_Left_Button.gif">right_img</link>
		<link href="../../Data/FieldRules/images/Move_First_Button_3.gif">rightright_img</link>
		<link href="../../Data/FieldRules/images/Move_First_button.gif">upbar_img</link>
		<link href="../../Data/FieldRules/images/Move_Up_Button.gif">up_img</link>
		<link href="../../Data/FieldRules/images/Move_Down_Button.gif">down_img</link>
		<link href="../../Data/FieldRules/images/Move_Last_button.gif">downbar_img</link>
		<link href="file:///C:/dev/AlphaHelp/helpfiles/Server/Guide/Design/View/Grid/images/Web_Properties_button.gif">dot_img</link>
		<link href="images/01_lookup22.png">look_img</link>
	</links>
</page>