<page>
	<topic>Grid Fields</topic>
	<groups>
		<group>
			<sections>
				<section>
					<title>Selecting the Fields to Display</title>
					<steps>
						<step>
							<description>Display the Grid > Fieldspage.</description>
						</step>
						<step>
							<title>Do you want the grid to be editable?</title>
							<description>If you want the grid to be updateable, but initially specified read-only, you may check the editable?checkbox.</description>
							<cases>
								<case>
									<note>Although a grid starts out as updateable, it can still be read only. This has the virtue of using text boxes instead of labels to represent the data in the grid, which in turn provides more reliable formatting alternatives, as well as the ability to copy data
										from the fields. If you change a grid that started out as updateable to read only, you will have to manually reset the grid field control types to label. If the grid is updateable, you may also disable the update properties of any particular field.</note>
								</case>
								<case>
									<title>Refresh the Available Fields List</title>
									<description>If a field that you know is part of the table is not visible in the Available Fieldslist (typically after you have restructured a table), go to the Grid > Query page and click [round_img] to refresh it.</description>
								</case>
							</cases>
						</step>
						<step>
							<title>Add to the Selected Fields List</title>
							<description>Display the Grid > Fieldspage.</description>
						</step>
						<step>
							<description>Use [left_img] and [leftleft_img] to move fields from the Available Fieldslist to the Selected Fieldslist.</description>
						</step>
						<step>
							<description>Use [right_img] and [rightright_img] to move fields from the Selected Fieldslist to the Available Fieldslist.</description>
						</step>
						<step>
							<description>Optionally, use the [upbar_img], [up_img], [down_img] and [downbar_img] buttons to reorganize the sequence of selected fields.</description>
						</step>
					</steps>
				</section>
				<section>
					<title>Detail View Considerations</title>
					<description>When creating a Detail View, it is necessary to have a unique key for each record. Thus, if you are going to have a Detail View, you must:</description>
					<steps>
						<step>
							<description>Add your key field into the Selected Fieldslist.</description>
						</step>
						<step>
							<description>Select the control that contains the key field and change its Display Settings > Control typeto "Link".</description>
						</step>
						<step>
							<description>Change the control's Link Properties > Link address typeto "DetailView Link".</description>
						</step>
						<step>
							<description>Display the Detail View > Propertiespage.</description>
						</step>
						<step>
							<description>Select the control that contains the key field in the Detail view hyperlink field > Hyperlink fieldlist.</description>
						</step>
					</steps>
				</section>
				<section>
					<description>There are two other special fields named and that can identify a record's position in the grid and in the current query. However, in a multi-user environment, cannot be relied upon to provide a consistent link to the target record. In this case you would want
						to create an expression based on two or more fields in the source table and use this expression as the Hyperlinkfield of the Detail View properties page.</description>
				</section>
			</sections>
		</group>
		<group background="true">
			<sections>
				<section>
					<title>Grid Field Properties</title>
					<description>The Grid Fields page is where you define what fields you will use in your grid, insert special controls, and set properties for individual controls. To display an individual field's Properties menu simply select that field in the Selected: Fields list. The
						properties for each field control you select are defined on the right side of the screen. These Field Properties change depending on the control selected, whether that control is editable or not, and the nature of the grid layout selected. The default values
						for these properties produce a useable starting configuration for your grid. This means that you can largely ignore these optional properties when you are learning to build grids or you expect to gradually refine your design in later revisions.</description>
				</section>
				<section>
					<description>By default the Field Properties for any given field are displayed by Category. Right clicking on the white space in the Field Properties list will display other options. These include Categorized , the default, which displays menu options in groups; Alphabetical ,
						which displays all menu options in a single alphabetized group; The Toolbar visible option, which displays buttons that switch between Categorized and Alphabetical display modes; and the Help visible option, which displays help for the currently selected property
						at the bottom of the property menu</description>
				</section>
			</sections>
		</group>
		<group>
			<sections>
				<section>
					<title>Property Menu Options:</title>
					<description>Right click in whitespace for menu options</description>
					<figure>
						<link>images/01_fprop.png</link>
					</figure>
				</section>
				<section>
					<note>It is notpossible to display a default value for a field in a grid's new record row. However, you can insert a default value if the user leaves the field blank by inserting a script into the grid's BeforeValidateNewRecordsevent.</note>
				</section>
			</sections>
		</group>
		<group background="true">
			<title>Display Settings</title>
			<sections>
				<section>
					<title>Control type</title>
					<description>If your grid is ' Read only ', then the fields that you put on the grid will be displayed by default using Label  controls. If the grid is Updateable , then the fields initially will be displayed using textbox controls. Label controls display the value of
						the field but do not have a width setting. In contrast, Textbox controls always have a specified character width, even if the field is Read only. For some data types, such as Images  and dates, you will have to manually select the control type. You can select
						other control type by using the Control Type dropdown under Display Settingsin the Field Properties list. The types of controls that you can place on a grid are:</description>
				</section>
			</sections>
		</group>
		<group>
			<sections>
				<section>
					<cases>
						<case>
							<title>Label</title>
							<description>A read-only control suitable for character, numeric, and date/time data.</description>
							<figure>
								<link>images/01_alabel.png</link>
							</figure>
						</case>
						<case>
							<title>Textbox</title>
							<description>An editable control suitable for character, numeric, and date/time data.</description>
							<figure>
								<link>images/01_acontrol2.png</link>
							</figure>
						</case>
						<case>
							<title>TextArea</title>
							<description>Similar to a text box, but with multiple lines.</description>
							<figure>
								<link>images/01_acontrol3.png</link>
							</figure>
						</case>
						<case>
							<title>Link</title>
							<description>A link that may open another page or select a record to display.</description>
							<figure>
								<link>images/01_acontrol4.png</link>
							</figure>
						</case>
						<case>
							<title>Image</title>
							<description>Displays either embedded or linked images.</description>
							<figure>
								<link>images/01_acontrol5.png</link>
							</figure>
						</case>
						<case>
							<title>DropDownBox</title>
							<description>A list box that appears as either a list or combo box. Drop-down boxes present a selection from an existing list of values; that is hard coded or retrieved from a table.</description>
							<figure>
								<link>images/01_acontrol6.png</link>
							</figure>
						</case>
						<case>
							<title>RadioButton</title>
							<description>A circular button that allows users to select from a list of values.</description>
							<figure>
								<link>images/01_acontrol7.png</link>
							</figure>
						</case>
						<case>
							<title>Checkbox</title>
							<description>A square box that allows a selection from a list of values.</description>
							<figure>
								<link>images/01_acontrol8.png</link>
							</figure>
						</case>
						<case>
							<title>Custom</title>
							<description>You define the data to display and its formatting using Xbasic and HTML.</description>
							<figure>
								<link>images/01_acontrol9.png</link>
							</figure>
						</case>
						<case>
							<title>Hidden</title>
							<description>Hides controls without hiding the column that contains them.</description>
							<figure>
								<link>images/01_acontrol10.png</link>
							</figure>
							<example>
								<![CDATA[tmpl.Field_Info[N] .controltype as C ]]>
							</example>
						</case>
					</cases>
				</section>
			</sections>
		</group>
		<group background="true">
			<sections>
				<section>
					<title>Control javascript</title>
					<description>You can specify Javascript for each control in the Grid's Grid part or Detail View part. This makes it very easy to use 3rd party libraries, such as jQuery, to decorate controls. When you define the Javascript for a control, you can use the special {grid.controlId}
						placeholder. This placeholder gets replaced at run-time with the actual Id of the control. Example code to use the jQuery datepicker (ignore any markers you see):</description>
				</section>
			</sections>
		</group>
		<group>
			<sections>
				<section>
					<example>
						<![CDATA[jQuery('#{Grid.ControlIdEscaped}').datepicker( { onSelect: function(dateText, inst) { //get the ID of the control var id=i nst.id; //the ID is encoded for jQuery ( periods are converted to \\.) - remove the encoding. id=$ u.s.tran(id,'\\',''); id=i
						d.split('.'); //get the name of the control. it is the word after the last period id=i d[id.length-1]; {grid.object}.setValue('G',id,{grid.rowNumber},dateText); } } ); ]]>
					</example>
				</section>
				<section>
					<description>Here is another, much simpler way of doing it. This causes the control's 'change' event to fire when the selection is made, thus causing the record to go dirty.</description>
					<example>
						<![CDATA[jQuery('#{Grid.ControlIdEscaped}').datepicker( { onSelect: function(dateText, inst) { $e.execute(this,'change') } } ); ]]>
					</example>
				</section>
				<section>
					<description>Notice that when the user makes a selection from the date picker, it puts the value in the control, but does not cause the row to go dirty. That's because jQuery did not automatically call the Grid's .setValue() method to set the field value (which would have
						caused the row to go dirty). Therefore, it is necessary to hook the jQuery date picker's onSelect event where we can call the Grid object's .setValue() method.</description>
				</section>
				<section>
					<description>See Also, JQuery Support</description>
				</section>
				<section>
					<title>Grid and UX Component - jQuery Date Picker</title>
					<description>The Grid and Dialog Component both have a 'Control Javascript' property. This property can be used to define any Javascript that you want to emit when the control is rendered. This property can be used to for many different reasons. This video shows how the
						property can be used to hook up the jQuery date picker.</description>
				</section>
				<section>
					<videos>
						<video>
							<name>Watch Video</name>
							<link>http://www.ajaxvideotutorials.com/V11Videos/JqueryDatePickerInGrid.swf</link>
						</video>
					</videos>
				</section>
				<section>
					<description>See Also JQuery Support</description>
				</section>
			</sections>
		</group>
		<group background="true">
			<sections>
				<section>
					<title>Display format</title>
					<description>If the control type is Label, Link, TextBox, or TextArea, the Display Format property allows you to automatically change the presentation of your data. For example, a money value could be displayed with its currency symbol and commas, and with the correct
						number of decimal characters. An In-Line style overrides the formatting of the cascading style sheet. If you wanted the text to be bolded, or in a different font, point size, or color, this is where you would define the formatting. You may want to allow only
						certain users to see a field. To do this set a minimum user security level required before the field will display. You may want to allow the user to see the fields in a grid, but not edit, delete, or insert records. To do this, set three different permission
						properties that control grid update. You may also want to define validation rules to improve the quality of user input.</description>
				</section>
				<section>
					<description>
						<![CDATA[This expression formats the data after it has been entered into the field. Click to display the Display Format dialog box. This property should be set to one of the following values: Null (empty) An Xbasic expression that returns a character value.
						The expression should use & < value> as Placeholder for the field value, as in the following example: f_upper(& < value>).  Optionally, click Select Pre-Defined Format to select a format from the Pre-Defined Formats dialog box. 
Note : There are no predefined display formats for short time (Y) fields. However, you can write your own.  
Note : If the control type is "TextBox" and the field type is "Date", then a Date Picker will appear. You must set the tmpl.Field_Info[N].DatePicker.DateFormat to the same style. See Date Picker DateFormat.  
]]>
					</description>
				</section>
			</sections>
		</group>
		<group>
			<sections>
				<section>
					<cases>
						<case>
							<title>Display Format</title>
							<example>
								<![CDATA[tmpl.Field_Info[N] .DisplayFormat as C ]]>
							</example>
						</case>
						<case>
							<title>Display unformat</title>
							<description>If you set a Display Format, you may also place a character expression in the this field. This expression reformats the data before it is stored in the database.</description>
							<example>
								<![CDATA[tmpl.Field_Info[N] .DisplayUnFormat as C ]]>
							</example>
						</case>
					</cases>
				</section>
			</sections>
		</group>
		<group>
			<title>Conditional style</title>
			<description>The conditional formatting option in Alpha Anywhere lets you format data conditionally, depending on its value. For example, you might set the color of the quantity field to be red if it is above average. In the video, you'll see the conditional formatting
				in action, including conditional formatting at the cell and control level, and conditional formatting at the row level. To see how to add conditional images to a grid, check out this video. Where this property allows you to alter the styles of a field, you
				can also alter the style of a given row using the Conditional Style properties in the Shading and Dividers section of the Grid Properties page.</description>
			<videos>
				<video>
					<name>Conditional Formatting Video</name>
					<link>http://www.screencast.com/users/AlphaSoftware/folders/Jing/media/f0ed6fba-5990-46ce-a5ea-cbd26106c2ae</link>
				</video>
				<video>
					<name>Conditional Images Video</name>
					<link>http://screencast.com/t/vx3dDw1t</link>
				</video>
			</videos>
		</group>
		<group>
			<sections>
				<section>
					<title>Create a Conditional Style for a Field:</title>
					<steps>
						<step>
							<description>Open the Grid Builder and go to the Design tab. On the Component Type page select read-only</description>
						</step>
						<step>
							<description>On the Data Source page select either .dbf or SQL . This example uses the SQL table Northwindsdatabase.</description>
						</step>
						<step>
							<description>On Query(DBF) or Query(AlphaDAO) create the connection to your database and select a table to work with. This example uses the Order_detailstable.</description>
						</step>
						<step>
							<description>On the Fields page add some fields from the Available Fields: list to the Selected: fields list.</description>
							<figure>
								<link>images/01_constyle.png</link>
							</figure>
						</step>
						<step>
							<description>Select a selected field, in this case Quantity, and scroll down the field's property list to the Summary values section.</description>
							<figure>
								<link>images/01_constyle2.png</link>
							</figure>
						</step>
						<step>
							<description>Check the Average checkbox under the Summary values section.</description>
							<figure>
								<link>images/01_constyle3.png</link>
							</figure>
						</step>
						<step>
							<description>Still in Field Properties , go to the Display Settings and click the Conditional style property button.</description>
							<figure>
								<link>images/01_constyle4.png</link>
							</figure>
						</step>
						<step>
							<description>The Conditional Style (Server-side) dialog will open. Click the Add condition button at the bottom of the dialog.</description>
							<figure>
								<link>images/01_constyle5.png</link>
							</figure>
						</step>
						<step>
							<description>The Edit Condition dialog will load. Click the ' Insert Fieldname ' hyperlink.</description>
							<figure>
								<link>images/01_constyle6.png</link>
							</figure>
						</step>
						<step>
							<description>Add the 'Quantity' field, or the fields you are using, to your expression. Then after it add '> summary.quantity.average' to complete the Expression.</description>
							<cases>
								<case>
									<example>
										<![CDATA[Quantity> summary.quantity.average  
]]>
									</example>
								</case>
								<case>
									<figure>
										<link>images/01_constyle7.png</link>
									</figure>
								</case>
							</cases>
						</step>
						<step>
							<description>In the Style: menu click on the Font color selector button and change the font color. Click OK to add the Expression to the Conditional Style dialog.</description>
							<figure>
								<link>images/01_constyle8.png</link>
							</figure>
						</step>
						<step>
							<description>Click the Add condition button again. Add a second condition, this time using a less than
								< sign . </description>
									<example>
										<![CDATA[Quantity < summary.quantity.average ]]>
									</example>
						</step>
						<step>
							<description>Set a different Font color for this condition. Click OK, the Conditional Style (Server-side) dialog should now look something like this:</description>
							<figure>
								<link>images/01_constyle9.png</link>
							</figure>
						</step>
						<step>
							<description>Now go to Live Preview > Full Preview . All of the records in the Quantity field should be colored differently, depending on if they are above or below the average. In the Quantity field blue is below and green above average</description>
							<figure>
								<link>images/01_constyle10.png</link>
							</figure>
							<cases>
								<case>
									<title>Add Conditional images:</title>
									<description>Fields. choose image (insert) Conditional style Quantity > summary.quantity.average Choose image file. built in system image Quantity
										< summary.quantity.average Can insert custom javascript onto the control </description>
								</case>
							</cases>
						</step>
					</steps>
				</section>
			</sections>
		</group>
		<group background="true">
			<sections>
				<section>
					<title>Initial value</title>
					<description></description>
				</section>
			</sections>
		</group>
		<group background="true">
			<sections>
				<section>
					<title>Bubble help</title>
					<description></description>
				</section>
			</sections>
		</group>
		<group background="true">
			<sections>
				<section>
					<title>Validation rules</title>
					<description>The Validation rules property defines how your grid component will respond when a user inputs data into an editable field. As with the Field Properties list, these rules change depending on what type of control you are working with.</description>
					<cases>
						<case>
							<title>Invalid data type error message</title>
							<description>The 'Invalid data type error message' rule works with all fields except character fields. This rule allows you to define a message that will display if the user types in an invalid date, time, short time, or number into an input field.</description>
							<figure>
								<link>images/01_fframe16.png</link>
							</figure>
						</case>
					</cases>
				</section>
			</sections>
		</group>
		<group background="true">
			<sections>
				<section>
					<title>Validation Xbasic</title>
					<description></description>
				</section>
			</sections>
		</group>
		<group background="true">
			<sections>
				<section>
					<title>Immediate validation</title>
					<description></description>
				</section>
			</sections>
		</group>
		<group background="true">
			<sections>
				<section>
					<title>Has help</title>
					<description></description>
				</section>
			</sections>
		</group>
		<group background="true">
			<title>Client Side Properties</title>
			<sections>
				<section>
					<description>'Client-side' properties for a Grid include Calculated Fields, Show/hide Fields, Enable Expressions, Conditional Styles, and Client-side Formatting. Client-side Calculated fields are computed using Javascript. The calculation is performed as soon as any of
						the operands, i.e. javascript variables, in the client-side calculation change. You must therefore add formatting logic into your client-side calculated expressions. To see an example watch this video.</description>
					<videos>
						<video>
							<name>video</name>
							<link>http://www.ajaxvideotutorials.com/V10Videos/ClientSideCalcFields.swf</link>
						</video>
					</videos>
				</section>
				<section>
					<title>Show/hide Fields</title>
					<description>Show/hide Fields can be used with any field or Container. If you want to show/hide multiple fields at once, wrap the fields in a the show/hide expression for the container. Hiding fields can be useful. For example, you might have a grid with a 'billing address'field,
						a 'shipping addressfield', and a " shipping address is the same as billing address' field. If the later is checked, you might then want to hide the entire shipping address part of the grid. Here is the video.</description>
					<videos>
						<video>
							<name>video</name>
							<link>http://www.ajaxvideotutorials.com/V10Videos/ClientSideShowHide.swf</link>
						</video>
					</videos>
				</section>
				<section>
					<title>Enable Expression</title>
					<description>Enable Expression allows you to enable or disable an input control. Conditional Styles contain conditions that are evaluated in a Browser using Javascript. This makes it possible to dynamically style controls without having to make Ajax callbacks. For example,
						if a user enters an exceedingly large value into a Quantity field, the entry can immediately be displayed in red to show it is too big. In contrast to 'client-side' conditional styles, 'server-side' conditional styles use conditions that are expressed using
						Xbasic expressions. These conditions are then evaluated on the server. The video below shows how client-side conditional styles can be used to display a different font and background color depending for different ranges of values.</description>
					<videos>
						<video>
							<name>video</name>
							<link>http://www.ajaxvideotutorials.com/V10Videos/ClientSideConditionalStyle.swf</link>
						</video>
					</videos>
				</section>
				<section>
					<title>Client-side Formatting</title>
					<description>can be used to define masks for character fields or number formats for numeric fields. For example, you might use a mask in formatting a US Phone number: ( ) -. For more on using client side properties check out this video.</description>
					<videos>
						<video>
							<name>video</name>
							<link>http://www.ajaxvideotutorials.com/V10Videos/UsingUserDefinedJavascriptInClientSideCalculations.swf</link>
						</video>
					</videos>
				</section>
				<section>
					<note>The Client-side expressions that are used to define Client side properties can reference system fields. System fields are fields that are inherent inside Alpha Anywhere and that are not defined in the Query table you are using to access your data. Using these
						references can be used make your expressions more dynamic and can be used with different types of data. For example, grid.rowIsCheckedis a logical system field that will return true if the current row is checked. grid.checkedRowCountis a numeric system field
						that holds a count of the number of checked rows.</note>
				</section>
			</sections>
		</group>
		<group>
			<sections>
				<section>
					<title>Client side formatting</title>
					<description></description>
				</section>
				<section>
					<title>Format type</title>
					<description>The Mask Builder Dialog</description>
					<figure>
						<link>images/01_maskb.png</link>
					</figure>
				</section>
				<section>
					<title>Format definition</title>
				</section>
				<section>
					<title>Calculated field expression</title>
				</section>
				<section>
					<title>Show/hide expression</title>
					<description>When you define a client-side show/hide expression, you can also specify an animation effect to execute when the target object is shown or hidden. As demonstrated in the image below, when you open the expression builder there is a checkbox ' Animate show/hide '.
						When this box is clicked, the 'Define Animation' button is shown. The image below shows the dialog that is shown when the button is pressed. When you examine the expression in the property Grid, it will look something like this:</description>
					<cases>
						<case>
							<example>
								<![CDATA[[Fade,Slow|Fade,Fast]]Region=" MA" ]]>
							</example>
						</case>
						<case>
							<description>The animation expression is added in front of the show/hide expression and is enclosed in braces ]. It shows the animation effect and duration for the 'show' action and the 'hide' action.</description>
							<figure>
								<link>images/01_ashowhide.png</link>
							</figure>
						</case>
					</cases>
				</section>
				<section>
					<title>Enable expression</title>
				</section>
				<section>
					<title>Conditional style</title>
					<description>Conditional styling for a Grid row, checked rows are red. Unchecked rows are black.</description>
					<figure>
						<link>../../../../../Client/Guide/Design/View/Grid/images/clienside_onrowchecked.jpg</link>
					</figure>
				</section>
			</sections>
		</group>
		<group background="true">
			<title>Control Properties</title>
			<sections>
				<section>
					<description></description>
				</section>
			</sections>
		</group>
		<group background="true">
			<sections>
				<section>
					<title>Label Properties</title>
					<cases>
						<case>
							<title>In-line style</title>
							<description>Specifies style attributes that override the settings inherited from the style sheet. Click [dot_img] to define the In-line style. Refer to the Style Editor for details.</description>
							<example>
								<![CDATA[tmpl.Field_Info[N] .Label.InLineStyle as C ]]>
							</example>
						</case>
					</cases>
				</section>
			</sections>
		</group>
		<group background="true">
			<sections>
				<section>
					<title>TextBox Properties</title>
					<description>The most important properties of a TextBox control are the Size and MaxLength properties. The MaxLength should match the field definition in your table. The size can be large></description>
					<cases>
						<case>
							<title>HTML5type</title>
							<description></description>
						</case>
						<case>
							<title>Size</title>
							<description>Sets the width of the field in characters.</description>
							<note>No matter what you specify for height and width of a control, if the content is larger, then your browser will expand the table cell for you. There is no way to avoid this from the design of your grid or HTML. You can trim your data if it is crucial that your
								cells never expand. And even then, you have no control over the fonts being used by your user's browser so they could have things set to be really large and still be larger than the table cell.</note>
						</case>
						<case>
							<title>MaxLength</title>
							<description>Sets the maximum length of the user's input in characters.</description>
						</case>
						<case>
							<title>In-line style</title>
							<description>Specifies style attributes that override the settings inherited from the style sheet. Click to define the In-line style. Refer to the Style Editor for details.</description>
						</case>
						<case>
							<title>Container in-line style</title>
							<description></description>
						</case>
						<case>
							<title>Is a password field</title>
							<description>If this is a password field, the characters will be replaced with bullets.</description>
						</case>
						<case>
							<title>Watermark</title>
							<description>Sometimes, the size of screen matters when a user is accessing an application you've created. So how do you build an effective application to be used when screen real estate is limited, such as an Ajax Web app that will run on an iPhone? That's why "liquid"
								forms are an increasingly popular platform for running Web applications today. Liquid forms automatically reconfigure themselves based on the screen size. That's necessary for something like a smart phone,ine- color: initial; " This first video  we put together
								will show how the grid makes it easy to design liquid forms. Watermark fields    are also an effective tool for dealing with small screen sizes. Watermark fields let you put the field label inside the field itself. This is a great way to save space when you
								don't have space to spare.</description>
							<videos>
								<video>
									<name>This first video</name>
									<link>http://www.screencast.com/users/AlphaSoftware/folders/Jing/media/b2401e42-5c83-468a-8960-1f74a935367b</link>
								</video>
								<video>
									<name>Watermark fields</name>
									<link>http://www.screencast.com/users/AlphaSoftware/folders/Jing/media/a0a0b477-5f14-4458-a153-516e48ac3b32</link>
								</video>
							</videos>
						</case>
						<case>
							<title>Custom attributes</title>
							<description></description>
						</case>
						<case>
							<title>Code Examples</title>
							<cases>
								<case>
									<title>Size</title>
									<example>
										<![CDATA[tmpl.Field_Info[N] .Textbox.Size as N ]]>
									</example>
								</case>
								<case>
									<title>MaxLength</title>
									<example>
										<![CDATA[tmpl.Field_Info[N] .Textbox.MaxLength as N ]]>
									</example>
								</case>
								<case>
									<title>Date Picker</title>
									<description>Specifies whether the control should have a pop-up calendar.</description>
									<example>
										<![CDATA[tmpl.Field_Info[N] .DatePicker.Display as L ]]>
									</example>
								</case>
								<case>
									<title>In-line style</title>
									<example>
										<![CDATA[tmpl.Field_Info[N] .Textbox.InLineStyle as C ]]>
									</example>
								</case>
								<case>
									<title>Is a password field</title>
									<example>
										<![CDATA[tmpl.Field_Info[N] .Textbox.IsPassword as L ]]>
									</example>
								</case>
								<case>
									<title>Control In-line error style</title>
									<description>Specifies style attributes that are used when a validation error occurs. Click [dot_img] to define the In-line style. Refer to the Style Editor for details.</description>
									<example>
										<![CDATA[tmpl.Field_Info[N] .Textbox.ErrorInlineStyle as C ]]>
									</example>
								</case>
							</cases>
						</case>
					</cases>
				</section>
			</sections>
		</group>
		<group background="true">
			<sections>
				<section>
					<title>TextArea Properties</title>
					<description>The most important properties of a TextArea control are the Rows and Columns properties, which define its size.</description>
					<cases>
						<case>
							<title>HTML editor</title>
							<description>If you are creating an Updateable grid you can check the HTML editor property checkbox and add an HTML editor to your grid. This will allow users to easily add HTML to their records. If you want to add this property to a number of fields then you will need
								to go to Display Settings in the Field Properties list and change the Control Type for each field to TextArea . After creating a second TextArea control, simply check the HTML property again for that control, or use the eyedroppertool.</description>
						</case>
						<case>
							<description>The HTML editor comes with a number of additional properties. HTML editor width defines the width between columns that the unopened editor fills. Similarly HTML editor height specifies the row height of the unopened editor. These properties are for the default
								editor, where a user clicks on a given TextArea control to open the HTML editor for that record. However, you can also define a Popup mode by checking the HTML editor is popup property checkbox. When you add a popup HTML editor to the Grid, to edit HTML fields,
								the data in the Grid is not saved when the user closes the popup HTML editor. The data is only saved when the user clicks the Submit button. The Save grid data when closing popup editor property allows you to automatically submit the data in the Grid as soon
								as the popup HTML editor is closed. Unopened HTML editor width</description>
							<figure>
								<link>images/01_htmled2.png</link>
							</figure>
						</case>
						<case>
							<description>An Open HTML editor</description>
							<figure>
								<link>images/01_htmled.png</link>
							</figure>
						</case>
						<case>
							<figure>
								<link>images/SaveHTMLOnClosePopup.gif</link>
							</figure>
						</case>
						<case>
							<title>Rows</title>
							<description>Sets the height of the control by specifying the number of rows.</description>
							<example>
								<![CDATA[tmpl.Field_Info[N] .TextArea.Rows as N ]]>
							</example>
						</case>
						<case>
							<title>Columns</title>
							<description>Set the width of the control by specifying the number of columns.</description>
							<example>
								<![CDATA[tmpl.Field_Info[N] .TextArea.Cols as N ]]>
							</example>
						</case>
						<case>
							<title>In-line Style</title>
							<description>Specifies style attributes that override the settings inherited from the style sheet. Click to define the In-line style. Refer to the Style Editor for details.</description>
							<example>
								<![CDATA[tmpl.Field_Info[N] .TextArea.InLineStyle as C ]]>
							</example>
						</case>
						<case>
							<title>Watermark</title>
							<description>Sometimes, the size of screen matters when a user is accessing an application you've created. So how do you build an effective application to be used when screen real estate is limited, such as an Ajax Web app that will run on an iPhone? That's why "liquid"
								forms are an increasingly popular platform for running Web applications today. Liquid forms automatically reconfigure themselves based on the screen size. That's necessary for something like a smart phone,ine- color: initial; " This first video  we put together
								will show how the grid makes it easy to design liquid forms. Watermark fields    are also an effective tool for dealing with small screen sizes. Watermark fields let you put the field label inside the field itself. This is a great way to save space when you
								don't have space to spare.</description>
						</case>
					</cases>
				</section>
			</sections>
		</group>
		<group background="true">
			<sections>
				<section>
					<title>Link Properties</title>
					<description>An essential decision about a link control is what it will display. The options are: Value in field, Value from other field(s), Static text, Static image, Image in another control Link controls have choices for the Link address type. The link could be: a URL
						(presumably also a field value), an email address (presumably also a field value), a link to the detail view form, a value that is computed (see Link Address Builder ), a value that specifies filter, order, and/or linking informationfor the records in a second
						grid</description>
						<example><![CDATA[with tmpl.field_info[N]       
.link.InLineStyle as C ]]></example>
					<cases>
						<case>
							<title>In-line style</title>
							<description>Specifies style attributes that override the settings inherited from the style sheet. Click to define the In-line style. Refer to the Style Editor for details.</description>
						</case>
						<case>
							<title>Display what in link?</title>
							
							<description>
								<p>Specifies style attributes that override the settings inherited from the style sheet. Click to define the In-line style. Refer to the Style Editor for details. Specifies what is displayed in the link. The options are:"Value in field", "Value from other field(s)",
									"Static text", "Static image", "Image in another control"</p>
								<p>Field(s) to display - Specify the HTML to display in the link. Use field placeholders to include values from other fields in the grid. Typically, the fields that you reference will have the Hide row or Hide column properties checked. Static text - Specify
									the text to display in the link. Static image - Specify the image to display in the link. Dynamic image control - Specify the control that contains the image to display. Link address type</p>
							</description>
							<example><![CDATA[with tmpl.field_info[N]        
.link.DisplayType as C]]></example>
						</case>
						<case>
							<title>Using Images in Link Fields:</title>
							<cases>
								<case>
									<description>Open the Grid Builder . On the Design tab click on the Component Type page and select Tabular in the Grid Layout menu.</description>
								</case>
								<case>
									<description>Open the Data Source page and select either .dbf or SQL .</description>
								</case>
								<case>
									<description>On the Query(DBF) or Query(AlphaDAO) page select the table you will work from.</description>
								</case>
								<case>
									<description>Open the Fields page. Select several fields and move them from the Available Fields: list into the Selected: fields list; using the arrows between the two list.</description>
								</case>
								<case>
									<description>Select the field that you want to contain the linking data.</description>
								</case>
								<case>
									<description>Go to the selected field's Field Properties list. Under the Display Settings section find the Control type property. Set the control type to 'link '.</description>
								</case>
								<case>
									<description>Now go to the Link Properties section of the Field Properties. Find the Display what in link? property and select "Image in another control ".</description>
								</case>
								<case>
									<description>While in Link Properties set the Dynamic image control property to the name of the image field you wish to display. For the Link address type property select "DetailView link ".</description>
								</case>
								<case>
									<description>Images may be used in hyperlinks and in link fields to detail view forms.</description>
									<figure>
										<link>images/WP_Image_before_link.gif</link>
									</figure>
								</case>
								<case>
									<title>Preview of the grid showing both ID and Thumbnail fields before modification.</title>
									<cases>
										<case>
											<description>1. For the field that contains the linking data:</description>
											<cases>
												<case>
													<description>1. In Display Settings > Control typeset the control type of the field to "link".</description>
												</case>
												<case>
													<description>2. In Link Properties > Display what in link?select "Image in another control".</description>
												</case>
												<case>
													<description>3. In Link Properties > Dynamic image controlselect the name of the image field that you wish to display.</description>
												</case>
												<case>
													<description>4. In Link Properties > Link address typeselect "DetailView link".</description>
												</case>
											</cases>
										</case>
										<case>
											<description>2. For the field that contains the image you wish to display:</description>
											<cases>
												<case>
													<description>In Column Properties > Hide columncheck the check box. Preview of the grid after modification showing the Thumbnail image in the ID field:</description>
													<figure>
														<link>images/WP_Image_as_link.gif</link>
													</figure>
												</case>
											</cases>
										</case>
									</cases>
								</case>
							</cases>
						</case>
						<case>
							<title>Static Text:</title>
							<description>You use the Link Display Valuedialog box to compose the HTML code that will be displayed in a link. The link may contain references to any of the fields on the grid.</description>
							<example><![CDATA[with tmpl.field_info[N]        
.StaticText as C]]></example>
							<cases>
								<case>
									<description>1. Select the field placeholders in the Available Fieldslist that you want to use in the link expression.</description>
								</case>
								<case>
									<description>2. Arrange the field placeholders in the order that you want to see them in the expression.</description>
								</case>
								<case>
									<description>3. Optionally, add any text that you want around the fields.</description>
								</case>
								<case>
									<description>4. Optionally, click HTML Editorto use it to format the expression.</description>
								</case>
								<case>
									<description>5. Click OKto save your work or Cancelto discard it.</description>
								</case>
							</cases>
						</case>
						<case>
							<title>Link address type</title>
							<description>You can specify that the link address type is 'Javascript'. Any Javascript function call or command can be added to the 'onclick' event. The Javascript will be executed when the link is clicked. "Field Value is a Link address" , "Field Value is an email address" ,
								"DetailView link" , "Computed from fields in the grid" , "Javascript"</description>
						<example><![CDATA[with tmpl.field_info[N]        
.Link.Type as C ]]></example>
							<figure>
								<link>images/01_flink.png</link>
							</figure>
						</case>
						<case>
							<description>Javascript link with an onClick event opening an alert box.</description>
							<figure>
								<link>images/01_aa.png</link>
							</figure>
						</case>
						<case>
							<title>Link Address</title>
							<description>When the Link address type is "Computed from fields in the grid", this field appears. Click to define the link address in the Link Address Builder .</description>
							<example><![CDATA[with tmpl.field_info[N]        
.link.ComputedAddress ]]></example>
							<cases>
								<case>
									<title>Link Address Builder</title>
									<description>A common requirement is to open a page that contains a grid component, showing just records that match certain values. For example, assume that when you click the hyperlink, you want to open a page named CustomerInfo.A5w. We will make the following assumptions
										about this page:</description>
									<cases>
										<case>
											<description>The page contains a Grid component named customers.</description>
										</case>
										<case>
											<description>The table has a field named Customer_ID.</description>
										</case>
									</cases>
								</case>
								<case>
									<title>Alpha Anywhere .DBF Syntax 
</title>
									<description>If the data is coming from an Alpha Anywheretable, the filter expression that we want to apply to the customersgrid on the CustomerInfo.A5wpage is therefore:
</description>
									<example><![CDATA[customer_id="{customerID}" 
]]></example>
								</case>
								<case>
									<description>where {customerID}is the value in field for which we are defining the Link control.
Grid components understand two special parameters: _Filterand _Order. So, to open the CustomerInfo.A5wpage showing just the records that we want, the computed link address is:
</description>
									<example><![CDATA[CustomerInfo.A5w?customers_filter=customer_id="{customerID}"
]]></example>
								</case>
								<case>
									<description>Other example computed link address are:
</description>
									<example><![CDATA[CustomerInfo.A5w?customers_filter=firstname="{firstname}".and.lastname="{lastname}"?customers_order="{lastname}"
OrderInfo.A5w?orders_filter=orderid="{orderid}"
]]></example>
								</case>
								<case>
									<title>SQL Syntax 
</title>
									<description>The syntax for the "Filter" and "Order" parameters must be appropriate for the database on which the Grid component is based. SQL syntax typically uses single quotes for character values and "AND" and "OR" to join conditions (as opposed to .AND.and .OR.which Alpha Anywhere uses for querying local tables). So the above examples would become:
</description>
									<example><![CDATA[CustomerInfo.A5w?customers_filter=customer_id='{customerID}'
CustomerInfo.A5w?customers_filter=firstname='{firstname}' AND lastname='{lastname}'?customers_order={lastname}
OrderInfo.A5w?orders_filter=orderid='{orderid}'
]]></example>
								</case>
								<case>
									<title>Composing a Link Address:
</title>
								<description>If you have a field in your grid where the Display Settings > Control Type is "Link": 
</description>	
								<cases>
									<case>
										<description>Click or in the Link Properties > Link Address field to display the Link Address Builder. </description>
									</case>
									<case>
										<description>Select a page from the Pages in Project list and click Insert Page. </description>
									</case>
									<case>
										<description>Position the cursor in the Link Address text box, select a field placeholder from the Grid Fields list, and click Insert Field. Repeat as Necessary. </description>
									</case>
									<case>
										<description>Add additional syntax elements as Necessary to the Link Address text box. </description>
									</case>
									<case>
										<description>Click OK to save your inputs or Cancel to discard them. </description>
									</case>
									<case>
										<description>See Also, Creating Grid Components, Automatically Populating Linking Field Values </description>
									</case>
									
								</cases>	
								</case>
							</cases>
						</case>
						<case>
							<title>Target frame or window </title>
							<description>The default is "Explicit". Defines where to display the linked page. The default is Null. The options are: 
Blank (opens in a new window) "Explicit", "WindowName" (e.g. "Window2"), "_blank", "_parent", "_self", "_search", "_top"  
</description>
<example><![CDATA[tmpl.Field_Info[N]              
.Link.targetFrameOrWindow as C  ]]></example>
<cases>
	<case>
		<title>Clear Parameters </title>
		<description>The default is .F. . Specifies whether the target URL preserves existing parameters.  </description>
<example><![CDATA[tmpl.Field_Info[N]              
.Link.ClearParameters as L  ]]></example>
	</case>
	<case>
		<title>Scroll to Detail View</title>
		<description>The default is .T. . Specifies that the page should scroll down to display the detail view form when a record is selected.  </description>
	<example><![CDATA[tmpl.Field_Info[N]              
.Link.ScrollToDetailView as L]]></example>
	</case>
	<case>
		<title>Additional Code Reference</title>
		<cases>
			<case>
				<description>Field(s) to display</description>
				<example><![CDATA[with tmpl.field_info[N]        .link.DisplayExpression as C ]]></example>
			</case>
			<case>
				<description>Static image</description>
				<example><![CDATA[with tmpl.field_info[N]        .StaticImage as C ]]></example>
			</case>
			<case>
				<description>Dynamic image control  </description>
				<example><![CDATA[with tmpl.field_info[N]        .link.AlternateImageControl ]]></example>
			</case>
			
			
		</cases>
	</case>
	
</cases>
							
						</case>
					</cases>
				</section>
			</sections>
		</group>
		<group background="true">
			<sections>
				<section>
					<title>Image Properties</title>
					<description>This concerns Image properties  for images based on field controls. For more information about using image files as Links, see using images in Link Fields.     
</description>
				</section>
			</sections>
		</group>
		<group background="true">
			<sections>
				<section>
					<title></title>
					<description></description>
				</section>
			</sections>
		</group>
		<group background="true">
			<sections>
				<section>
					<title></title>
					<description></description>
				</section>
			</sections>
		</group>
		<group background="true">
			<sections>
				<section>
					<title></title>
					<description></description>
				</section>
			</sections>
		</group>
		<group background="true">
			<sections>
				<section>
					<title></title>
					<description></description>
				</section>
			</sections>
		</group>
		<group background="true">
			<sections>
				<section>
					<title></title>
					<description></description>
				</section>
			</sections>
		</group>
		<group background="true">
			<sections>
				<section>
					<title></title>
					<description></description>
				</section>
			</sections>
		</group>
		<group background="true">
			<sections>
				<section>
					<title></title>
					<description></description>
				</section>
			</sections>
		</group>
	</groups>
	<links>
		<link href="../../Data/FieldRules/images/Refresh_Display_Button.gif">round_img</link>
		<link href="../../Data/FieldRules/images/Move_Right_Button.gif">left_img</link>
		<link href="../../Data/FieldRules/images/Move_Last_Button_2.gif">leftleft_img</link>
		<link href="../../Data/FieldRules/images/Move_Left_Button.gif">right_img</link>
		<link href="../../Data/FieldRules/images/Move_First_Button_3.gif">rightright_img</link>
		<link href="../../Data/FieldRules/images/Move_First_button.gif">upbar_img</link>
		<link href="../../Data/FieldRules/images/Move_Up_Button.gif">up_img</link>
		<link href="../../Data/FieldRules/images/Move_Down_Button.gif">down_img</link>
		<link href="../../Data/FieldRules/images/Move_Last_button.gif">downbar_img</link>
		<link href="file:///C:/dev/AlphaHelp/helpfiles/Server/Guide/Design/View/Grid/images/Web_Properties_button.gif">dot_img</link>
	</links>
</page>