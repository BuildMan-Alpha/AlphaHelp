<page>
	<topic>Writing Server Event Scripts</topic>
	<description>Web publishing applications only. Server event scripts provide an opportunity to respond to or process the input from a dialog (form) web component. You can run scripts when the following events occur.</description>
	
	<sections>
<section>
	<cases>
		<case>
			<title>OnClick </title>
			<description>Available only for AdvancedButton objects. The OnClick script runs every time the button is clicked.</description>
		</case>
		<case>
			<title>Initialize </title>
			<description>The Initialize event fires once, the first time the Form is run.</description>
		</case>
		<case>
			<title>Validate</title>
			<description>The Validate event fires when a form is submitted.</description>
		</case>
		<case>
			<title>AfterValidate </title>
			<description>The AfterValidate event fires after the Validate event.</description>
		</case>
		<case>
			<title>Activate </title>
			<description>The Activate event fires every time the form is run.</description>
		</case>
		
	</cases>
	
	
</section>		
<section>
	<title>Initialize Events</title>
	<description>The Initialize event fires once, the first time the form is run. If the form is submitted back to itself (as is typically the case, so that the values in the Form's controls can be validated), the Initialize event is not fired.
The Initialize event is typically used to set initial values for controls on the Form.
If you need to execute code every time the Form is run, use the Activate event.
</description>
	
</section>
<section>
	<title>Validate Events</title>
	<description>The Validate event fires when a form is submitted. Use this event to check that the value in a control is valid. If your script determines that an error has occurred, then you should set the following object properties:</description>
	<example><![CDATA[CurrentControl.Has_Error = .t.
CurrentControl.Error_Message = ""
 ]]></example>
</section>
<section>
	
	<description>You can also use this syntax:</description>
	<example><![CDATA[CurrentForm.Controls..Has_Error = .t.
CurrentForm.Controls..Error_Message = ""]]></example>
</section>

<section>

	<description>If the CurrentControl.Has_Error property is ".T.", then the form will be redisplayed with the error message shown at the top of the form. The user can then make corrections and resubmit the form.</description>

</section>

<section>
	<title>AfterValidate Events</title>
	<description>The AfterValidate event fires after the Validate event, but only if no object on the form has had its .Has_Error property set to ".T.".
A typical use of the AfterValidate event is to redirect control to another page in the application.
For example:
</description>
	<example><![CDATA[If Condition1 = .t. Then
    Response.Redirect("Page1.a5w")
Else
    Response.Redirect("Page2.a5w")
End If]]></example>
</section>

<section>
	<title>Activate Events</title>
	<description>The Activate event fires every time the form is run. It fires after the Validate and AfterValidate events.
A typical use of the Activate event is used to populate drop down list boxes on the form.
</description>
	
</section>

<section>
	<title>Declarations</title>
	<description>When you display the Form Events dialog and select "Declarations" from the Event list box, you to define any User Defined Functions that you want to be available to all Xbasic event code.</description>
<note>You can also define functions in the code for each event handler, but these functions are local to the particular event handler.</note>
</section>
		
	</sections>
	<see>
		<ref href="/documentation/index?search=Creating a Grid Component - Tutorial">Creating a Grid Component</ref>
	</see>
</page>