<page>
	
	<topic>Grid Query</topic>

	<groups>
<group background="true">
<sections>
	<section>
		<title>Define a Table Query</title>
		<description>When building components in the Grid Builder it is often necessary to pull specific data and records from a given table, be it .dbf or SQL. To do this it is necessary to create a Table Query.    
</description>
	</section>	
</sections>	
</group>		
		
<group>
<sections>
	<section>
		<steps>
			<step>
				<description>Select Grid > Query (DBF).
</description>
			</step>
			<step>
				<description>Select the data source table from the Table Name list.
</description>
			</step>
			<step>
				<title>Creating Table Aliases </title>
				<description>A table alias can make your grid portable, by separating it from direct reference to a table name. as long as a table has the same structure and the same alias, it can use a grid originally built for another table.
Optionally, enter an alias for the table. If you do not enter an alias, it will default to the name of the table.
</description>
			</step>
			<step>
				<title>Creating Calculated Fields</title>
				<description>A calculated value may be displayed, but not edited. Typically, you compute a calculated value based on the values of several other fields in each record. To create a calculated value to place on the grid Optionally, click Calculated fieldsto display the Define Calculated Fields dialog box.
</description>
				<cases>
					<case>
						<note>Alpha Anywhere documentation and software has traditionally referred the values that you calculate and place on a layout as "calculated fields". However, these values are not fields, because they are not stored in a table record. They are temporary variables that are created and calculated on demand.</note>
					</case>
					<case>
						<description>1. Enter calculated value expressions, one per line, in the format = . For example:
</description>
<example><![CDATA[=]]></example>
					</case>
					<case>
						<description>2. Optionally, click Expression Builderto use the Expression Builder to help you define the calculated value.
</description>
					</case>
					<case>
						<description>3. Optionally, click F2 - Fieldsto display a list of table fields to insert into the expression.
</description>
					</case>
					<case>
						<description>4. Optionally, click F4 - Functionsto display a list of functions to insert into the expression.
</description>
					</case>
					<case>
						<description>5. Optionally, use the [azup_img] and [zadown_img] buttons to sort the list of calculated values.
</description>
					</case>
					<case>
						<description>6. Optionally, use the [upbar_img],[up_img],[down_img] and [downbar_img] buttons to reorganize the sequence of calculated values.
</description>
					</case>
					<case>
						<description>7. Click OKto continue or Cancelto discard your inputs.
</description>
					</case>
					
					
				</cases>
			</step>
			<step>
				<title>Define Arguments </title>
				<description>Optionally, if you want to provide a value for use in the grid's filter expression, click Define Argumentsto display the Define Arguments dialog box.
</description>
			</step>
			<step>
				<title>Enter a Filter Expression </title>
				<description>Optionally, enter a logical expression that selects records from the table into the Filter field. You may click [xy_img] to use the Expression Builder to help you define the expression. A blank filter expression retrieves all records in the table.
</description>
			</step>
			<step>
				<description>Optionally, check Unique records onlyto eliminate records with duplicate values.
</description>
			</step>
			<step>
				<title>Enter an Order Expression </title>
				<description>Optionally, enter a character expression that orders selected records into the Order field. You may click [updown_img] to use the Order Builder to help you define the expression. A blank order expression retrieves records in record number order.
</description>
			</step>
			<step>
				<description>Optionally, click Ascendingor Descendingto change the sequence of records.
</description>
			</step>
			<step>
				<title>Enable Editing of Records 
</title>
				<description>Optionally, check Read only to indicate that you do not need to define a primary key.
</description>
			</step>
			<step>
				<description>Click Define Primary Key(s)to define the field or character expression that will uniquely identify records.
</description>
			</step>
			
			
			
		</steps>
	</section>	
	<section>
		<note>Since record locking is not possible in a web environment, it is highly desirable to have a way to uniquely identify each record. The default identification for a record is its number, which in some circumstances can change.</note>
	</section>
	<section>
		<description>See Also Selecting the Fields to Display 
</description>
	</section>
</sections>	
</group>			
		
		
<group background="true">
<sections>
	<section>
		<title>Using the Define Arguments Dialog
</title>
		<description>Arguments provide run-time values for use in the filter and order expressions of grid components. There are a couple places where you might regularly encounter the Define Arguments Dialog. One is in the Query section of the Grid Builder. To get here, click the button in the Web Projects Control Panel top open the Select Grid Component Template dialog. Select a template, or not, and then click OK to open the Grid Builder . On the Design page first choose a Data Source under the Data Source page, selecting either .dbf or SQL tables. Then look at the Grid> Query page. If you selected .dbf  Tables as your Data Source then you should see a Define Arguments button halfway down the Query(DBF) page, regardless of whether you have defined a Table name. Click on this and it will open the Define Arguments Dialog . If you chose a SQL table for your Data Source, then you will need to first create a connection string to the SQL table that you will use before the Define Arguments button becomes visible in Query(AlphaDAO) . For more on connection strings see the 'SQL Connection String Dialog'page. Once you choose a connection and click Connect, then you should see the Define Arguments button open on the Query(AlphaDAO) page. Click it to open the Define Arguments Dialog .  
</description>
	</section>	
	<section>
		<title>Define Arguments in Query(AlphaDAO)  </title>
		<description>images/A_DefineArgButton.png</description>
	</section>	
</sections>	
</group>		
		
		
		
<group background="true">
<sections>
	<section>
		<title>Arguments that use a prompt to obtain their value:  </title>
		<steps>
			<step>
				<description>Once the Define Arguments dialog opens, click the  Insert New Argumentbutton. 
</description><figure><link>images/A_New Arg.png</link></figure>
				
			</step>
			<step>
				<description>This will open the New Argument dialog. Enter the name of the argument into the Argument Definition > Namefield.
</description>
				
			</step>
			<step>
				<description>Select the data type of the argument in the Argument Definition > Data Typelist. The options are:
</description>
				<cases>
					<case>
						<description>"Character"
</description>
					</case>
					<case>
						<description>"Numeric"
</description>
					</case>
					<case>
						<description>"Logical"
</description>
					</case>
					<case>
						<description>"Date"
</description>
					</case>
					<case>
						<description>"Time"
</description>
					</case>
					<case>
						<description>"Y-Shorttime"
</description>
					</case>
					<case>
						<description>"K-UUID"
</description>
					</case>
					
					
				</cases>
			</step>
			<step>
				<description>Click OK to close the New Argument Dialog. You should see your new argument added to the Define Argument dialog's Existing Arguments list.
</description>
				
			</step>
			<step>
				<description>Go to the menu on the right side of the Define Arguments Dialog and look at the Argument Definition portion of the menu. You will notice the Name and Data Type have now been filled.
</description>
				<figure><link>images/A_ArgDef.png</link></figure>
			</step>
			<step>
				<description>Under the Argument Definition options go to the Get argument value fromoption. Define the type of source the argument's value will use. The options are: 

</description>
<cases>
	<case>
		<description>"Always prompt for value"
</description>
	</case>
	<case>
		<description>"Get value from variable" 
</description>
	</case>
	
</cases>
				
			</step>
			<step>
				<description>Select  ' Always prompt for value ' option you will notice a Define prompt option appear in the Argument Definition section . If you click the button next to this option it will open the Define Prompt Dialog. Add the Prompt Text of the prompt that asks for the value for the Argument and click OK to exit the Define Prompt dialog. Click OK again to save your inputs, create the argument, and exit the Define Argument Dialog.
Prompt Text:</description>
				<figure><link>images/A_Define Prompt.png</link></figure>
			</step>
			
			
			
		</steps>
	</section>	
</sections>	
</group>		
		
		
						
<group background="true">
<sections>
	<section>
		<title>The Define Prompt Dialog</title>
		<description>The Define Prompt dialog, located inside the Define Arguments dialog, has several properties associated with it. The Prompt Text is the text that will be displayed in front of the data choices control, for example 'What City?' or in the example shown below 'Showing records in state'.  </description>
		<figure><link>images/A_Show in state.png</link></figure>
	</section>	
	<section>
		
		<description>The Control Type property lets you choose the control to use in defining a prompt. The options are a drop down box, list box, radio button, or text box.  
The 'Drop Down Box', 'List Box', and 'Radio Button' controls all have a Choices property. Clicking the button next to 'Choices' will display the Enter List of Choices dialog. Here you can enter all of the choices that will appear in the control.  
</description>
		<figure><link>images/A_Choices.png</link></figure>
	</section>	
	<section>
		
		<description>The "List Box" control also comes with a Size property. Size specifies the number of lines to display in the list box. Entering a value of 0 here means that the list box will display as many lines as there are choices.  Clicking OK to go back to the Define Arguments dialog.  
The Define Prompt  </description>
		<figure><link>images/A_DefinePrompt.png</link></figure>
	</section>	
</sections>	
</group>		
		
<group>
<sections>
	<section>
		<title>Arguments that get their value from a variable: 
</title>
		<steps>
			<step>
				<description>Open the Define Arguments dialog and click Insert New Argument .
</description>
			</step>
			<step>
				<description>In the New Argument dialog, fill in an Argument Name and select a Data Type . Click OK .
</description>
			</step>
			<step>
				<description>Back in the Define Arguments dialog go to the Argument Definition section on the right-side of the dialog.
</description>
			</step>
			<step>
				<description>Select ' Get Value from variable ' in the 'Get argument value from' option, you will need to define the variable. Under the Variable section of the Define Arguments menu click the button [dot_img] to the right to open the Select Variable Dialog.
</description>
			</step>
			<step>
				<description>Click the Add New Variable button to add a new variable. 
</description>
<figure><link>images/A_New Variable.png</link></figure>
			</step>
			<step>
				<description>This will open the New Variable dialog. Define a name for your new variable and also select your variable's scope. Your options are... 
</description><cases>
	<case>
		<description>Session Variable
</description>
	</case>
	<case>
		<description>Cookie
</description>
	</case>
	<case>
		<description>Page variable 
</description>
	</case>
	
	
</cases>
			</step>
			<step>
				<description>Click OK to create the argument or, optionally, repeat this procedure to create another argument.
</description>
			</step>
			<step>
				<description>Click OKto save your inputs or Cancelto discard your inputs when you have completed defining arguments.
</description>
			</step>
			
			
		</steps>
	</section>	
</sections>	
</group>			
		
<group background="true">
<sections>
	<section>
		<title>The Select Variables Dialog
</title>
		<description>The Select Variable dialog lets you add variables to your arguments. If there are existing variables in the Variables list, you can simply highlight them and click OK to add them to an argument. To create a new variable simply click the Add New Variable button. This will open the New Variable dialog. under Variable name write the name of the variable you want to create. New Variable Dialog  
  
</description>
		<figure><link>images/A_Faidherbia.png</link></figure>
	</section>	
		<section>
	
		<description>In the New Variable dialog you will also need to choose the Variable scope . The options are a Session variable, a Cookie, or a Page variable. A 'Session variable' lives for the lifetime of any given session. For example, if someone logs on to an app and starts clicking on buttons, a session variable will be remembered between every call the person makes. A 'Cookie' variable will live a lot longer than a session variable. The user can close down their app and the browser and the cookie variable will still be there. A 'Page variable' only occurs on the page you are on and can not see past that page. Use the 'Page variable' option if you want to set the value of the argument to the value of the field in the current record.  
The Select Variable Dialog: </description>
		<figure><link>images/A_Selectvariable.png</link></figure>
	</section>	
	<section>
		<description>Once you select the Scope of your variable click OK to return to the Select Variable dialog. Highlight the variable you would like to assign to the argument under the ' Variables ' list and click OK to return to the Define Arguments dialog.  
</description>
	</section>
</sections>	
</group>		
		
<group background="true">
<sections>
	<section>
		<title>Using Defined Arguments.</title>
		<description>A common design practice is to filter a grid based on the value of an argument. A common design pattern is to print out the value of that argument in a freeform region that you place above or below the grid. This example will show how this can be accomplished in Alpha Anywhere, using a freeform region above a filtered grid. First it will define two arguments and look at how to place those arguments in a filter expression. Next it will cover how to print the value from this expression to your grid. Finally it will cover how to put this information in a Client-side event.  
</description>
	</section>	
</sections>	
</group>			
	<group>
<sections>
	<section>
		<steps>
			<step>
				<description>Open Alphasports and the Grid Builder</description>
				
			</step>
			<step>
				<description>Select DBF under Data Source and in Query select the Customer Table.</description>
				
			</step>
			<step>
				<title>Define an Argument: </title>
				<description>In the Define Arguments dialog click Insert Argument .</description>
				
			</step>
			<step>
				<description>In the New Argument dialog give this argument the Argument Name 'st' and set its Data Type to Character . Click OK  </description>
				<figure><link>images/A_st.png</link></figure>
			</step>
			<step>
				<description> Under Argument Definition set the ' Get Argument Value from ' setting to ' Get value from variable '.</description>
				
			</step>
			<step>
				<description>Under Variable click the Variable button [dot_img] and open the New Variable dialog.</description>

			</step>
			<step>
				<description>Click Add New Variable . Next to Variable Name type pgstate. Click the Scope dropdown set the scope to ' Page Variable '. Click OK to close the new variable dialog.</description>
				<figure><link>images/A_pgstate.png</link></figure>
			</step>
			<step>
				<description>Now back in the Default Arguments Dialog, Go to the Variable settings and set the Default value to ma.

</description>
				<figure><link>images/A_ma.png</link></figure>
			</step>
			<step>
				<title>Define a Second Argument: </title>
				<description>Click Insert Argument again to insert a second argument into the Default Arguments dialog's Existing Arguments list.</description>
			
			</step>
			<step>
				<description>In the New Argument dialog, give this argument the Argument Name 'ln'. Set its Data Type to Character . Click OK  </description>

			</step>
			<step>
				<description>Under Argument Definition set the ' Get Argument Value from ' setting to ' Get value from variable '.</description>

			</step>
			<step>
				<description>Under Variable click the Variable button [dot_img] and open the New Variable dialog.</description>
				
			</step>
			<step>
				<description>Click Add New Variable . In Variable Name type 'varin'. Set the Scope drop-down  to ' Page Variable '. Click OK to close the new variable dialog.</description>
				<figure><link>images/A_varin.png</link></figure>
			</step>
			<step>
				<description>In the Default Arguments Dialog, Set the Variable settings Default value to 'a'.</description>
				
			</step>
			<step>
				<description>Click OK to exit the Define Arguments Dialog.</description>
				<note>If these arguments had been bound to session variables the techniques used here could still be used but would not be necessary. Because they are bound to page variables the problem becomes more difficult.  </note>
			</step>
			<step>
				<title>Place the Arguments in a Filter Expression </title>
				<description>On the Filter shown in the Design > Grid >  Query page of your Grid Builder click the button [xy_img] to open the Expression Builder .</description>

			</step>
			<step>
				<description>In the Expression Builder menu double click the Field Name option, or hit F2 , to load the field names from the Customertable. Select ' Bill_State_Region' from the Select Field dialog that loads. You will see the Field now in the Expression Builder. Put a equals sign = after the Bill_State_Regionfield.</description>
				<figure><link>images/A_xyselectfield.png</link></figure>
			</step>
			<step>
				<description>Next double click on ' Argument ' in the Expression Builder menu, or hit F10 .
</description>
				<figure><link>images/A_xyarg.png</link></figure>
			</step>
			<step>
				<description>From Insert Arguments dialog select 'st', click on it so that it is highlighted in blue. Then click OK  </description>
				<figure><link>images/A_xyargst.png</link></figure>
			</step>
			<step>
				<description>Click the .AND. button in the Expression Builder to add this to your expression.</description>
				<figure><link>images/A_xyand.png</link></figure>
			</step>
			<step>
				<description>Hit F2 and add a second field, this time select ' Lastname'.</description>
				
			</step>
			<step>
				<description>Place a greater than sign in the Expression , either via the keyboard or by clicking the greater than button.</description>
				<figure><link>images/A_xygreater.png</link></figure>
			</step>
			<step>
				<description>Finally, add you second Argument. Hit F10 opening the Insert Arguments dialog, and select 'ln' then click Insert . The Expression should look like this.</description>
				<figure><link>images/A_xyresult.png</link></figure>
			</step>
			<step>
				<description>Click OK to close the Expression Builder and add the Expression to your Query page.</description>
				
			</step>
			<step>
				<title>Print the Value to the Grid. </title>
				<description>On the Grid Builder's Design page menu click on Grid > Properties and open the Properties page.</description>
				
			</step>
			<step>
				<description>Scroll down to the Freeform Edit Regions properties and select the Above Grid Property. Click the button [dot_img] on the Above Grid row.</description>

			</step>
			<step>
				<description>This will open the Freeform Edit Region dialog. Copy and paste the following HTML into the edit region. Showing records in state: </description>
			<example><![CDATA[<span id=&quot;statename&quot;></span>]]></example>
			<note>This html will show some text on the grid. Inside of the text there is also a a span with id of statename. This span will hold the value of the 'state' argument.  </note>
			</step>
			<step>
				<description>Go to the Grid > Fields page in the Design menu. Open the page.</description>
				
			</step>
			<step>
				<description>Click the Insert... written below the Available Fields list to open the Insert Special Control dialog.</description>

			</step>
			<step>
				<description>Click [Button] control and then click OK .</description>
				
			</step>
			<step>
				<description>In the Field Properties list on the right side of the Grid > Fields page scroll down until you reach the Javascript Properties.</description>

			</step>
			<step>
				<description>Select the onClick property and click the button [dot_img] next to it.</description>
				<figure><link>images/A_onClick.png</link></figure>
			</step>
			<step>
				<description>The Edit onClick Event Editor will appear. From the radio buttons at the top of the editor select Text mode .</description>

			</step>
			<step>
				<description>Copy and Paste the following code into the edit area. Click Save .</description>
			
				<cases>
					<case>
						<example><![CDATA[var x = {Grid.object}.argumentValue('st');  
alert(x);  
$('statename').innerHTML = x; ]]></example>
					</case>
					<case>
						<description>When the button is clicked it will call a method called argumentValue(). This method gets the value of an argument that was passed into the Grid, i.e. an argument that you want to retrieve. You can see the argumentValue() method by first clicking the ' Insert grid method... ' at the bottom of the Edit onClick Event Editor. Start typing the name of the method into the filter and it should appear from the list of methods. In this example we are converting our argument into a javascript variable called x and then alerting it. We then set the innerHtml of the span (that had an id of 'statename') equal to x. Ultimately will put this into a client-side event.  
</description>
					</case>
					
				</cases>
			</step>
			<step>
				<description>Now go to Working Preview. Notice the text 'Showing Records in State' at the top of the grid. Click on the Button that you created. A message with 'ma' will appear. Click OK .</description>
				<figure><link>images/A_buttonma.png</link></figure>
			</step>
			<step>
				<description>Now the  Javascript fires, retrieves the value of the argument 'ma', and then sets the value of the span tag. You should see a 'ma' next to the Showing records in state text.</description>
				<figure><link>images/A_buttonmacomplete.png</link></figure>
			</step>
			<step>
				<title>Put the Value of an Argument in a Client-side Event. </title>
				<description>Go back to the Design tab and return to the Grid > Fields page. Go to the Field Properties > Javascript section and click on the button  next to the onClick Event.</description>
				
			</step>
			<step>
				<description>Erase the code that you placed in the Edit onClick Event Editor and click Save .</description>

			</step>
			<step>
				<description>In the Design page menu, under Code , click on Client-side Events and open the Client-side Events page.</description>

			</step>
			<step>
				<description>Scroll down the list of Client-side Events until you find the onGridRenderComplete event near the bottom of the page. Highlight it.</description>
				<figure><link>images/A_rendercomplete.png</link></figure>
			</step>
			<step>
				<description>In the Javascript Event Handlers work area  Paste the same code that you placed in the Edit onClick Event Editor. Delete the alert(x); so the code looks like this...</description>
				
				<cases>
					<case>
						<figure><link>images/A_Eventhandlers.png</link></figure>
					</case>
					<case>
						<example><![CDATA[var x = {Grid.object}.argumentValue('st');  
$('statename').innerHTML = x; ]]></example>
					</case>
				</cases>
			</step>
			<step>
				<description>Click Save and run the Grid in Working Preview . You should see the value of the argument, 'ma' at the top of the screen.</description>
				<figure><link>images/A_Argumentvalue.png</link></figure>
				<cases>
					<case>
						<description>Shows how you can use a method of the grid object to retreive the value of any argument that was passed into the grid and has been used in the grid filter.
</description>
					</case>
					
				</cases>
			</step>
			
			
		</steps>
	</section>	
</sections>	
</group>				
	
	</groups>
	
<links>
	<link href="../../Data/FieldRules/images/Sort_Ascending_button.gif">azup_img</link>
	<link href="../../Data/FieldRules/images/Sort_Descending_button.gif">zadown_img</link>
	<link href="../../Data/FieldRules/images/Move_First_button.gif">upbar_img</link>
	<link href="../../Data/FieldRules/images/Move_Up_Button.gif">up_img</link>
	<link href="../../Data/FieldRules/images/Move_Down_Button.gif">down_img</link>
	<link href="../../Data/FieldRules/images/Move_Last_button.gif">downbar_img</link>
	<link href="../../Data/FieldRules/images/Espression_Button_black.gif">xy_img</link>
	<link href="../../Data/FieldRules/images/Order_button.gif">updown_img</link>
	<link href="images/A_expandchoices.png">dot_img</link>
	
</links>
	
<see>
	<ref>Define an Alpha Anywhere Table Query</ref>
	<ref>Define an Alpha Anywhere View Query</ref>
	<ref>Video on grid arguments</ref>
</see>
	
	
	
</page>