<page>
<topic>Grid Properties in Detail</topic>	
<groups>
<group background="true">
	<sections>
	<section>
		<description>This is a guide of all of the grid component properties and descriptions of how to use them. It should be noted that almost all the functionality you will find among these Grid Component Properties is also available for working with UX Components. UX Components have an added advantage of providing greater flexibility in project design, particularly in building applications for the web. If you are interested in building such applications then you might want to visit Alpha Anywhere's UX Builder. Grid Components currently help to support mainly desktop applications.  
</description>
		
	</section>	
	</sections>
</group>	
	
<group background="true">
	<title>Ajax</title>
	<sections>
	<section>
		
		<description>Ajax, or asynchronous Javascript and XML, allows data to be sent and received from a server behind the scenes and at differing rates while a user is viewing a page. This lets users access new data much more quickly; as they do not have to wait for the data to load or refresh when they click a button or input some other event. Enabling Ajax in the Grid Builder means that your component will load data separately through an ajax call instead of doing everything on the server directly. In this way, your component will not show a top level page refresh. Rather, users will experience a smooth transition in viewing new pages or data as the javascript underlying the component populates it with the data it requires. Before Ajax existed URL calls were used to accomplish this task. However, this was like starting over from scratch every time someone wanted to load new data, which made using something like a Grid Component a much more jarring experience.  

There are a number of ways in which you can use Ajax callbacks in Alpha Anywhere. You might use it to compute shipping charges and taxes on an order. You could also use it to filter records or add transaction records to a database.  
</description>
		<figure><link>images/A_pajax.png</link></figure>
	</section>	
	</sections>
</group>	
	
<group background="true">
	<title>Layout Options </title>
	<sections>
	<section>
		
		<description>The Grid layouts presented in the Component Type page include Tabular, Form(Columnar), and Stacked Columnar) grids. As each of these types creates different grids, selecting one or another will ultimately alter what you see in your Layout Options when you come to the properties page.  
</description>
		
	</section>	

	</sections>
</group>	
	
<group background="true">
	<sections>
	<section>
		<title>Class map</title>
		<description>Loads the Class Map Overrides Dialog. Allows you to override the way in which any of the Abstract CSS Class Names are mapped to Physical Class Names. When the Component is designed, all of the HTML controls in the component use Abstract CSS Class Names (e.g. [class.gridPartInput]). When the Component is run, the Absrtact CSS Class Names are converted to Physical CSS Class Names (e.g GlassBlueInput). The Class Map is used to convert Abstract CSS Class Names to Physical Class Names
</description>
		
	</section>	
	</sections>
</group>	
	
	
<group background="true">
	<sections>
	<section>
		<title>Resolve abstract CSS class names </title>
		<description>Can view class names using the browser to see real physical class names. If feature is turned off get to see what the abstract class name is. Can override any of the entries in the class map with your own CSS definitions. If you don't override class name you will end up with the default map.  
Default Class Map Dialog. see what maps to what. Select Abstract Class Name Dialog.  

When is it appropriate to use the class map when should you use the style editor to change the style in a class. Adjusting the class map really is for minor tweaks to the style. If you wanted to go make all of the edits input controls have a certain style it would be appropriate to do that in the style builder. But in some cases you might not get the fine control you need by adjusting the style and so making edits to the classmap will give you finer control over the appearance of individual elements in your web component.  
</description>
<videos>
	<video>
		<name>Video Part 1</name>
		<link>http://www.ajaxvideotutorials.com/V11Videos/AbstractClassNames_1.swf</link>
	</video>
	<video>
		<name>Video Part 2</name>
		<link>http://www.ajaxvideotutorials.com/V11Videos/AbstractClassNames_2.swf</link>
	</video>
	
</videos>
		
	</section>	
	</sections>
</group>	
					
					
<group background="true">
	<sections>
	<section>
		<title>Style name </title>
		<description>' Style name ' lets you set the style of an individual component. To set a style first click the button next to the Style name property to open the Select Style dialog.  
</description>
		<figure><link>images/1_stylename.png</link></figure>
	</section>	
	<section>
		<description>You will notice a Location menu when you open this dialog. CSS styles for web components can be stored in three different locations. System styles are stored in the CSS folder contained in the executable folder. Every web project you create has access to these styles, of which there are a fair number to choose from. However you can not edit these styles directly. Local styles are stored in the same folder as a web project and can only be seen by components in that project. Finally, Global files are stored in a folder that contains all of the web projects in the current open Alpha Anywhere Workspace (.abd file). Components in any web project inside the current workspace can see global styles.  
The Select Style dialog  
</description>
		<figure><link>images/1_stylename3.png</link></figure>
	</section>	
	<section>
		<description>System styles starting with Mob are intended for mobile use and Gr refers to Gradient. Mobile icons are larger compared to their desktop conterparts. The mobile icons sets conform to Apple's guidelines for iPhone icons.  
You can also utilize a setting in the Select Style dialog called  . If there is an overarching style that you want for your entire project, you can define that style in the Project Properties page off the Web Projects Control Panel .  
</description>
		<figure><link>images/1_stylename1.png</link></figure>
	</section>	
	
	<section>
		<description>To define the project style click [dot_img] the button next to the Project style property. This opens the same Select Style dialog that the Style name property uses.  
</description>
		<figure><link>images/1_stylename2.png</link></figure>
	</section>	
	<section>
		<description>You can then set the Style name property in your individual web component to be  . That component will then adopt the style set in Project Properties. Alternatively, you could define the Project Properties style after creating a number of components that use . If change the project properties, and republish any page, then that will automatically change all of the styles in all of your projects components automatically. Here is a video for more reference.
</description>
	
	</section>	
	</sections>
</group>	
	
<group>
	<sections>
	<section>
		<description>The MobBlue style for use with Mobile devices 
</description>
		<figure><link>images/1_stylenameactual.png</link></figure>
	</section>	
	<section>
		<description>GrOlive Style  
</description>
		<figure><link>images/1_stylenameactual2.png</link></figure>
	</section>	
	</sections>
</group>	
	
	
<group background="true">
	<sections>
	<section>
		<title>Style overrides for Javascript elements </title>
		<description>By default, the Tabs, Accordions, pop-up Windows, Lists (edit-combo, auto-suggest, etc.) are styled using the selected Grid style. You can override the style for these elements. This might be necessary for certain styles where the default appearance for these elements do not work well.  
</description>
		
	</section>	
	</sections>
</group>	
	
	
<group background="true">
	<sections>
	<section>
		<title>Repeating columns 
</title>
		<description>This property gives you columns of data with repeating titles that are stacked vertically. To create Repeating Columns you must first select either a Form(Columnar) or Stacked Columnar option from the Component Type page's 'Grid Layout' menu. To use this property simply enter the number of repeating columns you want in your grid. The default setting is one column. If you set the Repeating columns property to a number greater than one, the Snaking Style property will open. 
</description>
		<figure><link>images/1_repeating.png</link></figure>
		<example><![CDATA[tmpl.RepeatingColumns as N ]]></example>
	</section>	
	</sections>
</group>	
									
	
<group>
	<sections>
	<section>
		
		<description>Three Repeating Columns on a Form (Columnar) Grid 
</description>
		<figure><link>images/1_repeating2.png</link></figure>
	</section>	
	<section>
		
		<description>Three Repeating Columns in a Stacked Columnar Grid 
</description>
		<figure><link>images/1_repeating3.png</link></figure>
	</section>	
	</sections>
</group>	
									
<group background="true">
	<sections>
	<section>
		<title>Snaking style</title>
		<description>You are probably familiar with this display from sites like Netflix or Amazon, even if you have never seen the term 'Snaking style'. This style is used particularly with image links displayed in a row across a screen, think movie genre displays or a list of recently viewed items on a shopping site. Sometimes when a user hovers over one entry in the 'snaking' row it is magnified slightly to give more detail. It easy to add a Snaking style to your grid components. To see the Snaking style property you will first need to set the Repeating columns property to a number greater than 1.  

There are two options for a snaking style that can be easily selected using the dropdown next to the property.   The " TBLR " or Top to Bottom, then Left to Right option presents users with a snaking style in which the records appear vertically. The " LRTB ", or Left to Right then Top to Bottom, option creates a snaking row of records.  
</description>
		<example><![CDATA[tmpl.snaking as C ]]></example>
	</section>	
	</sections>
</group>	
									
			
<group>
	<sections>
	<section>
		
		<description>"TBLR" Snaking Style with 2 Repeating Columns (5 records)  
</description>
		<figure><link>images/1_snakingstyle2.png</link></figure>
	</section>	
	<section>
		
		<description>"LRTB" Snaking Style with 4 Repeating columns (5 Records)  
</description>
		<figure><link>images/1_snakingstyle.png</link></figure>
	</section>	
	</sections>
</group>	
									
	
<group background="true">
	<sections>
	<section>
		<title>Rows of data</title>
		<description>You can use this property to specify the number of rows data to show on each page. If your query returns more data than can fit on a page multiple pages of data will be created. Navigation buttons added to the bottom of your grid component can help you move between pages. If you are working with a ' Read-only ' grid you can display all of the records in a single page by setting the Rows of Data property to 0. This will work regardless of whether or not you have created an editable Detail View . The default number of rows for the Rows of data property is 10. 
</description>
		<figure><link>images/1_rows.png</link></figure>
	</section>	
	<section>
		<example><![CDATA[tmpl.rows as N]]></example>
	</section>
	</sections>
</group>	
									
	
<group background="true">
	<sections>
	<section>
		
		<description>10 Rows of data on a Tabular grid 
</description>
		<figure><link>images/1_rows2.png</link></figure>
	</section>	
		
	</sections>
</group>	
									
	
<group background="true">
	<sections>
	<section>
		<title>Add records only</title>
		<description>The ' Add records only ' property allows users to add new records but not see existing records. This property only works if your grid is updatable. You can make your grid updateable by going to the Component Type page and clicking the Grid is: Updateable radio button. The following lesson describes how to create a web component that allows users to enter records, but not to read, modify, or delete records. This procedure covers only the critical steps. There are many potential customizations that you may optionally apply to the resulting grid component.  
</description>
		
	</section>	
	
	</sections>
</group>	
									
	
<group>
	<sections>
	<section>
		
		<description>Users Enter Information Only 
</description>
		<figure><link>images/1_Add.png</link></figure>
	</section>	
<section>
<title>Write-Only Grid Components:</title>	
<steps>
	<step>
		<description>Open the Grid Builder and go to the Design tab. On the Component Type page select Form (Columnar) in the Grid layout: menu.</description>
	</step>
	<step>
		<description>While on the Component Type page select Grid is: Updateable .</description>
	</step>
	<step>
		<description>Open the Data Source page and choose either .dbf or SQL for your Data Source.</description>
	</step>
	<step>
		<description>On the Query(DBF) or Query(AlphaDAO) page connect to a table.</description>
	</step>
	<step>
		<description>Open the Fields page. Move a number of fields from the Available Fields: list to the Selected: fields list using the arrows between the two lists.</description>
	</step>
	<step>
		<description>Go to the Properties page. In the Layout  Options section find the Repeating columns property and change it to 1.</description>
	</step>
	<step>
		<description>Also in the Layout Options section, check the Add records only property checkbox.</description>
	</step>
	<step>
		<description>Now open the Update Settings page. In the Permissions section of Update settings change the Number of new record rows field to 1.</description>
	</step>
	<step>
		<description>Find the Customization section of the Update Settings page. Find the Target page property and set it to the URL of the page that will confirm the user's input.</description>
	</step>
	<step>
		<description>Now go to Live Preview and see how the grid appears. If it looks good place the component in an A5W page and publish it.</description>
	<cases>
		<case>
			<description>Users enter info but can sot see it.
</description>
			<figure><link>images/01_addrecords.png</link></figure>
		</case>
		
		
	</cases>
	
	</step>
	
	
</steps>	
	
	
</section>	
	
	
	</sections>
</group>	
									
								
<group background="true">
	<sections>
	<section>
		<title>Show Confirmation Message </title>
		<description>This property specifies if a conformation message should be shown after the Submit button is pressed when a user enters information. Because this feature is only utilized for grids that can be altered you will need to select  Grid is: Updateable  in the Component Type page. 
</description>
		<figure><link>images/1_ShowConfirm.png</link></figure>
	</section>	
	</sections>
</group>	
									
<group background="true">
	<sections>
	<section>
		<title>Confirmation Message Template</title>
		<description>This property creates a conformation message that appears just above your grid. By default on the right side of the screen. If you leave this property blank, a default template will be used. Use the {RecordCount} placeholder in the template to show the number of records added at any one time.  
</description>
		<figure><link>images/1_ShowConfirm2.png</link></figure>
	</section>	

	<section>

		<description>You can also add HTML directly into the message, either directly or by cutting and pasting from HTML defined elsewhere. For example....  
</description>
		<figure><link>images/1_ShowConfirm4.png</link></figure>
	</section>	
	<section>
		<description>Which will prompt users to see something like this at the top of the grid, after they hit submit.. 
</description>
		<figure><link>images/1_ShowConfirm5.png</link></figure>
	</section>	

	</sections>
</group>	
									
				
<group>
	<sections>
	<section>
		
		<description>{RecordCount} counts the number of records submitted. 
</description>
		<figure><link>images/1_ShowConfirm3.png</link></figure>
	</section>	
	</sections>
</group>	
									
				
				
<group background="true">
	<sections>
	<section>
		<title>Rows of data when search active 
</title>
		<description>Use this property to specify the number of rows to show in the Grid when a search (done in the Search Part) is active. Set to -1 to show the same number of rows as specified in the 'Rows of the data' property. Set to 0 to show all the records in the current query. The 'Maximum number of records per page' property will still apply.  
</description>
		<figure><link>images/1_Rowsactive.png</link></figure>
	</section>	
	</sections>
</group>	
									
				
<group background="true">
	<sections>
	<section>
		<title>Number of 'Layout' Columns 
</title>
		<description>The Number of 'Layout' Columns property takes all the information contained in a single record and displays it across a specified number of columns. This property only works on columnar grids, i.e. Form(Columnar) or Stacked Columnar grids. You can set a grid component to columnar using the radio buttons in the Grid Layout menu on the Component Type page. To change the number of 'Layout' columns simply type the number of columns that you want in the input area next to the Number of Layout Columns property.  
</description>
<example><![CDATA[tmpl.LayoutColumns as N ]]></example>
		<figure><link>images/1_layoutcolumns5.png</link></figure>
	</section>	
	</sections>
</group>	
									
<group>
	<sections>
	<section>
		<title>Using the Layout Columns Feature: </title>
		<steps>
			<step>
				<description>Open the Grid Builder from the Web Projects Control Panel . Open the Design tab go to the Component Type page.</description>
			</step>
			<step>
				<description>Select Form(Columnar) from the Grid Layout menu, you could also select Stacked Columnar.</description>
			<figure><link>images/1_layoutcolumns4.png</link></figure>
			</step>
			<step>
				<description>Open the Data Source page and select either .dbf or SQL for your type of data.</description>
			</step>
			<step>
				<description>On the Query(DBF) or Query(AlphaDAO) page create a connection to the table you want to use to retrieve data from. This uses the Alphasports Customerstable.</description>
			</step>
			<step>
				<description>Go to the Fields page and move ten or so fields from the Available Fields: list into the Selected fields list.</description>
			</step>
			<step>
				<description>Go to the Properties page on the Grid Builder's Design tab. Find the 'Layout Options' properties.</description>
			</step>
			<step>
				<description>Under the Layout Options section find the Number of "Layout" Columns property. By default it should be set to 1.</description>
			<figure><link>images/1_layoutcolumns5.png</link></figure>
			</step>
			<step>
				<description>Run your grid on the Working Preview tab and view the result.</description>
			<cases>
				<case>
					<description>Number of Layout Columns property set to 1 
</description>
					<figure><link>images/1_layoutcolumns2.png</link></figure>
				</case>
				<case>
					<description>Number of Layout Columns property set to 2 
</description>
					<figure><link>images/1_layoutcolumns.png</link></figure>
				</case>
				<case>
					<description>Number of Layout Columns property set to 3 
</description>
					<figure><link>images/1_layoutcolumns3.png</link></figure>
				</case>
				
				
			</cases>
			
			</step>
			
			
		</steps>
	</section>	
	</sections>
</group>	
				
<group background="true">
	<sections>
	<section>
		
		<description>The controls wrap from left to right, then top to bottom. If the Number of "Layout" Columns property is set to a value greater than 1, you can further position the controls using:  </description>
<cases>
	<case>
		<title>Breaks</title>
		<description>a break before or after a control forces the start of a new row. </description>
	</case>
	<case>
		<title>Frames</title>
		<description>a frame groups fields together inside a box, which may occupy one or more columns. </description>
	</case>
	<case>
		<title>Colspan</title>
		<description>the colspan value specifies the number of layout columns a control should use. </description>
	</case>
	<case>
		<title>Column Spacers</title>
		<description>a column spacer inserts a blank column after a control. </description>
	</case>
	<case>
		<title>Row Spacers</title>
		<description>a row spacer inserts a blank row after a control. </description>
	</case>
	<case>
		<title>Merges</title>
		<description>a merge groups adjacent controls together, so that they use a single common heading label.  </description>
	</case>
	
	
</cases>
	</section>	
	<section>
		
		<description>When designing a grid component with columnar formatting (where the  Number of "Layout" Columns  property is greater than 1), you may position controls by adjusting their column span property and inserting row spacers after controls. The Column Span and Row Spacer properties are actually found on the Fields page of the grid builder. To change a Column span, open the Fields page, click on a selected field, and scroll down the Field Properties list to the Row Properties . Find the Column span property and change the number next to it to alter the number of columns the field encompasses. To add a Row Spacer , go to the Fields page and in the Selected fields list choose select a field, the row spacer will be placed under this field. Next click the Insert... text link below the Available Fields list. This will open the Insert Special Control dialog. Select the [Row Spacer] option and click OK . control The following example shows the effects of adding column spacers. In this case the grid has the following properties:  </description>
	</section>
	</sections>
</group>	
				
<group>
	<sections>
	<section>
		<title>Using Row Spacers for Control Positioning:</title>
<steps>
	<step>
		<description>From the Web Projects Control Panel open the Grid Builder. Once on the Design tab go to the Component Type page.</description>
	</step>
	<step>
		<description>Select Form(Columnar) from the Grid Layout menu, you could also select Stacked Columnar.</description>
	</step>
	<step>
		<description>Open the Data Source page and select either .dbf or SQL for your type of data.</description>
	</step>
	<step>
		<description>On the Query(DBF) or Query(AlphaDAO) page create a connection to the table you want to use to retrieve data from. Like the previous example, this one also uses the Customerstable.</description>
	</step>
	<step>
		<description>Go to the Fields page and move ten fields from the Available Fields: list into the Selected fields list.</description>
	<figure><link>images/1_rowsofdata.png</link></figure>
	</step>
	<step>
		<description>Click on the Properties page to open it. In the Properties list locate the 'Layout Options' properties.</description>
	</step>
	<step>
		<description>Under the Layout Options section find the Number of "Layout" Columns property and enter a ' 4 ' in the input box. In Working Preview your grid records should look something like this:</description>
	<figure><link>images/1_rowsofdata2.png</link></figure>
	</step>
	<step>
		<description>Now go to the Grid Builder's grid Fields page . Click on the first field in your Selected fields list. In the Field Properties list on the right scroll down to Row Properties.   </description>
	</step>
	<step>
		<description>Under Row Properties find the  Column span  property and set itto 2.  </description>
	</step>
	<step>
		<description>Now change the Column span property for the 2nd, 3rd, and 4th fields in your Selected fields list to 2 .  </description>
	</step>
	<step>
		<description>Click on the 5th field in your Selected fields list and change its Column span property to 4. Your grid should look something like this:  </description>
<figure><link>images/1_rowsofdata3.png</link></figure>
<note>The 'Phone' field in the example above looks like its Column span is set to 4. The reason it appears like this, however, is because there are no fields following it.  </note>
	</step>
	<step>
		<description>On the Design tab's Fields page, highlight the 2nd field in your Selected fields list. Next click the Insert... link underneath the Available fields list.  </description>
	</step>
	<step>
		<description>The Insert Special Control dialog will open. Click on the [Row Spacer] control and click OK.  </description>
	</step>
	<step>
		<description>Highlight the 4th field in your Seleted fields list and add another [Row Spacer] underneath it. The result should look something like this... A Form Columnar grid with Row Spacers  
 </description>
	<figure><link>images/1_rowsofdata5.png</link></figure>
	</step>
	
	
</steps>
	</section>	
	</sections>
</group>	
				
<group background="true">
	<sections>
	<section>
		<title>Suppress empty rows </title>
		<description>The Suppress empty rows property indicates whether or not to hide empty rows. Rows are hidden if a query returns fewer records than the number of rows in the grid. By default this property is set to true.  </description>
		<figure><link>images/1_emptyrows.png</link></figure>
	</section>	
	</sections>
</group>	
				
<group background="true">
	<sections>
	<section>
		<title>Show title</title>
		<description>Indicates whether or not to display the component title. If you click on the checkbox next to this property the Title property will open and allow you to set the title for your grid. By default this property is not checked. 
</description>
<example><![CDATA[tmpl.show_title as L 
]]></example>
		<figure><link>images/1_Title3.png</link></figure>
	</section>	
	</sections>
</group>	
																							
<group background="true">
	<sections>
	<section>
		<title>Title</title>
		<description>The Title property allows you to set the HTML properties for the Title of a particular grid. Clicking the button next to Title opens the HTML editor. This lets you adjust the type of font used for the title, its color, size, its alignment, add images, and so forth. 
</description>
<example><![CDATA[tmpl.title as C]]></example>
		<figure><link>images/1_Title.png</link></figure>
	</section>	
	</sections>
</group>	
			
<group>
	<sections>
	<section>
		
		<description>Changing HTML in the Title property 
</description>
		<figure><link>images/1_Title2.png</link></figure>
	</section>	
	</sections>
</group>	
	
			
<group background="true">
	<sections>
	<section>
		<title>Font size</title>
		<description>You can scale the fonts in your grid component using this property. There are five choices to select from, 'Smallest', 'Smaller', 'Medium', 'Larger', and 'Largest'. 'Medium' is the default setting and is also not scaled; such that the fonts shown under the Medium setting will correspond to those defined in the style sheet. </description>
		<example><![CDATA[tmpl.FontSize as C]]></example>
		<figure><link>images/1_Font.png</link></figure>
	</section>	
	</sections>
</group>	

			
<group background="true">
	<sections>
	<section>
		<title>Has 'Records Per Page' selector 
</title>
		<description>Adding the ' Records Per Page ' selector allows the user to change the number of rows displayed after the grid opens on a page. This is different from actually setting the number of rows that initially appear in your grid. The selector is shown at the bottom of the page and has a dropdown list with the values specified in the 'Records Per Page' selector choices. When the user selects a new value, the grid refreshes and shows the number of rows selected. This option allows the grid to open with a limited number of rows and take up less space on a page. It has the added advantage of allowing the user to decide how many rows they wish to view.  
</description>
		<figure><link>images/AA_recordsperpage2.png</link></figure>
	</section>	
	<section>
		
		<description>Records per Page Selector 
</description>
		<figure><link>images/AA_recordsperpage.png</link></figure>
	</section>	
	</sections>
</group>	

			
<group background="true">
	<sections>
	<section>
		<title>'Records Per Page' selector choices 
</title>
		<description>The 'Records Per Page' selector choices property lets you specify the number of pages a user can view in the 'Records per page' drop down. To enter choices fill in the textbox next to this property. Separate each choice with a comma. The first number to be displayed in the 'Records per Page' selector is not set in this property. Instead, the first choice in the 'Records per Page' selector is entered next to the Rows of Data property. This property also sets the number of rows shown when your grid loads.  
</description>
		<figure><link>images/AA_recordsperpage3.png</link></figure>
	</section>	
	<section>
		<description>Set row choices 
</description>
		<figure><link>images/AA_recordsperpage4.png</link></figure>
	</section>	
	</sections>
</group>																																

			
<group background="true">
	<sections>
	<section>
		<title>'Records Per Page' template 
</title>
		<description>This property helps you specify the template for the ' Records per page ' selector . The default setting for this template is the following.... 
</description>
		<example><![CDATA[&nbsp;&nbsp;{Grid.RecordsPerPageSelector} Records per page  
]]></example>
	</section>	
	<section>
		
		<description>You can easily add HTML around the {Grid.RecordsPerPageSelector} template to change the text and background colors around it. Altering the HTML in the {Grid.RecordsPerPageSelector} template itself is difficult.  
</description>
		
	</section>	
	</sections>
</group>	

			
<group background="true">
	<sections>
	<section>
		<title>Highlight row on hover 
</title>
		<description>Highlight row on hover helps identify the currently selected row so that it is easier to click on with the mouse. It is sometimes difficult to immediately find the position of the cursor on a grid. Selecting this property will cause the style of a row to change when the mouse hovers over the row.  
</description>
		<figure><link>images/1_Highlight1.png</link></figure>
	</section>	
	<section>
		<description>A row where the cursor position is highlighted 
</description>
		<figure><link>images/1_Highlight.png</link></figure>
	</section>	
	</sections>
</group>	

			
<group background="true">
	<sections>
	<section>
		<title>Highlight row on select </title>
		<description>Highlight row on select property highlights a row in the Grid part when the user clicks on that row.  
</description>
		
	</section>	
	</sections>
</group>	

			
<group background="true">
	<sections>
	<section>
		<title>Has checkbox select column 
</title>
		<description>The ' Has checkbox select column ' property adds a column with a checkbox for each row in a grid component. This makes it possible for users to easily select one or more records. This property also adds a checkbox in the grid's title bar that will select/deselect all of the checkboxes. This feature is meant to be used in conjunction with custom Ajax callbacks. It also comes with a couple sub-properties. Checkbox select type allows you to apply an action to selections made only on one page or across multiple pages. The Checkbox selector bubble help property lets you add bubble help to the select all checkbox in the title bar.  
</description>
		<figure><link>images/1_Checkbox.png</link></figure>
	</section>	
	<section>
		
		<description>Checkboxes added to rows 
</description>
		<figure><link>images/1_Highlight2.png</link></figure>
	</section>	
	<section>
		
		<description>Checkbox Bubble Help 
</description>
		<figure><link>images/1_Checkbox2.png</link></figure>
	</section>	
	</sections>
</group>	

			
<group background="true">
	<sections>
	<section>
		<title>Has row selector column 
</title>
		<description>This property specifies if the grid has a single column containing a row selector. The row selector indicates which row in the grid is currently selected. The row selector normally appears as a small triangle on the left side of the grid. If your grid is updateable and only allows users to input data, not read existing data, then the row selector will appear as a small asterisk. 
</description>
		<figure><link>images/1_selector1.png</link></figure>
	</section>	
	<section>
		
		<description>Row selector column 
</description>
		<figure><link>images/1_selector.png</link></figure>
	</section>	
	</sections>
</group>	

			
<group background="true">
	<sections>
	<section>
		<title>Can collapse grid? </title>
		<description>The Can collapse grid? property allows a user to click an icon     to hide the grid and just show a simple title bar. The title bar has another icon     to reopen the grid. This is similar to an accordion control and requires the grid to be placed in a master template. The 'Use a master layout template' property will be automatically checked if you choose to make the grid collapsible. The Can collapse grid? property hides a number of sub-properties that will show up if Can collapse grid? is included in your component and the sub-properties window is expanded.  
</description>
		<figure><link>images/1_CollapseGrid.png</link></figure>
	</section>	
	<section>
		<description>Title bar with grid collapsed  
</description>
		<figure><link>images/1_CollapseGrid1.png</link></figure>
	</section>	
	<section>
		<description>Title bar with grid open  .  
</description>
		<figure><link>images/1_CollapseGrid2.png</link></figure>
	</section>	
	</sections>
</group>	

			
<group background="true">
			<title>Customization</title>
	<sections>
	<section>

		<description>Customization allows you add additional features to your grid. Here you can define how you want error messages to appear and choose if you want a number to display how many records are in a section of your grid.  
</description>
	
	</section>	
	</sections>
</group>	

			
<group background="true">
	<sections>
	<section>
		<title>'No records found' message </title>
		<description>The ' No records found ' message is useful for displaying instances when a query does not return any records. This might be the case, for example, if you were to conduct a Quick search inside a grid for a field that was in the table you selected on the Query page but that does not exist in the Grid Part, you might get this message. Clicking the button [dot_img] to the right of the 'No records found' message loads the HTML editor. This makes it easy to modify the default message to your liking.  
</description>
<example><![CDATA[tmpl.no_records_message as C ]]></example>
		<figure><link>images/1_norecords3.png</link></figure>
	</section>	
	<section>
		<description>Default 'No records in query' message 
</description>
		<figure><link>images/1_norecords.png</link></figure>
	</section>	
	<section>
		<description>Modified 'No records found' message 
</description>
		<figure><link>images/1_norecords2.png</link></figure>
	</section>	
	</sections>
</group>	

			
<group background="true">
	<sections>
	<section>
		<title>'Total records' message text 
</title>
		<description>The 'Total records' message text property specifies the template for the 'Total records' message. {Total_Records} is a place holder for the number of records in the query. The default text is "Records: {Total Records}". You can edit the HTML for the template directly by opening the Grid Builder, going to the Grid Properties page, scrolling down to the Customization properties, and clicking the button next to the 'Total records' message text property. This will open the HTML editor which will let you edit the text. When you are finished in the HTML editor, click the Save button and the HTML will be inserted into the property. You can also add HTML to the property directly by hand.  
</description>
<example><![CDATA[tmpl.total_records_row as C ]]></example>
		<figure><link>images/1_allrecords3.png</link></figure>
	</section>	
	<section>
		<description>Default 'Total records' message text 
</description>
		<figure><link>images/1_allrecords.png</link></figure>
	</section>	
	<section>
		<description>Modified 'Total records' message text 
</description>
		<figure><link>images/1_allrecords2.png</link></figure>
	</section>	
	</sections>
</group>	
	
<group background="true">
	<sections>
	<section>
		<title>'Total records' message position 
</title>
		<description>Specify the position of the text showing the number of records in the current query. Default = "Above Grid". The options are:
</description>
		<cases>
			<case>
				<description>"No message"</description>
			</case>
			<case>
				<description>"Above grid"
</description>
			</case>
			<case>
				<description>"Below grid"
</description>
			</case>
			<case>
				<description>"Above and below grid"
</description>
			</case>
			
			
		</cases>
	</section>	
	<section>
		<example><![CDATA[tmpl.total_records_row_position as N ]]></example>
	</section>
	</sections>
</group>	
	
<group background="true">
	<sections>
	<section>
		<title>Display title before existing records 
</title>
		<description>Enables the display of the existing records title.</description>
		<example><![CDATA[tmpl.HasExistingRecordsTitle as L ]]></example>
	</section>	
	</sections>
</group>	
<group background="true">
	<sections>
	<section>
		<title>Existing records title 
</title>
		<description>A title that appears after the column or row titles, but above the data in the grid.  
</description>
<example><![CDATA[tmpl.ExistingRecordsTitle as C ]]></example>
		<figure><link>images/1_rowexpander13.png</link></figure>
	</section>	
	<section>
		
		<figure><link>images/1_rowexpander12.png</link></figure>
	</section>	
	</sections>
</group>	

<group background="true">
	<sections>
	<section>
		<title>Display title before new records </title>
		<description>Enables the display of the new records title.</description>
		<example><![CDATA[tmpl.HasNewRecordsTitle as L ]]></example>
	</section>	
	</sections>
</group>	

<group background="true">
	<sections>
	<section>
		<title>New records title </title>
		<description>A title that appears after existing data in the grid, but above the rows used to enter new records. This only works if the grid is updateable</description>
		<example><![CDATA[tmpl.NewRecordsTitle as C ]]></example>
	</section>	
	</sections>
</group>	


<group background="true">
	<sections>
	<section>
		<title>Table tag inline style </title>
		<description>Specify the inline style for the Grid's 
tag. Clicking here loads the style editor.
Table tag attributes: Specify optional attributes to insert into the Grid's tag.
</description>
		
	</section>	
	</sections>
</group>	

<group background="true">
	<sections>
	<section>
		<title>Row separator HTML</title>
		<description>HTML code that customizes the grid's row or column separator.</description>
		<example><![CDATA[tmpl.row_separator as C ]]></example>
	</section>	
	</sections>
</group>	

<group background="true">
	<sections>
	<section>
		<title>Javascript windows</title>
		<description>Updateable grids come with default Javascript windows. These windows usually appear as confirmation and warning dialogs after a user deletes, edits, and/or tries to alter a dirty record in their table. The Javascript windows property, under Customization properties, is where you can change the icons, message text, titles, and OK/Cancel button labels for these Javascript windows.   If you also want to change the dialog styling see the Style Name property under the Layout Options section of the Properties page.  </description>
		<figure><link>images/01_JSCust3.png</link></figure>
	</section>	
	<section>
		<description>Customizable Javascript Window Properties 
</description>
		<figure><link>images/01_JSCust4.png</link></figure>
		</section>
	</sections>
</group>	

<group background="true">
	<sections>
	<section>
		
		<description>To add icons simply click the button [dot_img] in the Icons section next to the icon you wish to change. The Specify image dialog will open. Click the Image in Web Project or Style radio button and then hit the Select button and choose the Select from Web Project Folder option. A Select Image dialog will open. Click the Add Image to Project button. The Add Image to Project dialog will appear. Click the 'up' button next to Source filename: and navigate to where you stored your first simple icon on you computer. To change Message Text , Message Box Titles , and OK/Cancel Buttons labels simply change the text next to the respective property. You can also insert html directly into the text control if you like.  

</description>
		<figure><link>images/01_JSCust5.png</link></figure>
	</section>	
	</sections>
</group>	

<group>
	<sections>
	<section>
		
		<description>Default UndoEditsConfirmationJavascript Window  
</description>
		<figure><link>images/01_JSCust.png</link></figure>
	</section>	
	<section>
		
		<description>Customized UndoEditsConfirmation   
</description>
		<figure><link>images/01_JSCust2.png</link></figure>
	</section>	
	</sections>
</group>	
			
<group background="true">
	<sections>
	<section>
		<title>Customize icons 
</title>
		<description>Many of the icons used with certain images (e.g. the Row Expander icon) in a grid can be customized. The ' Customize icons ' property in the ' Customization ' section in the ' Properties ' pane is where you can alter icons using the Define Grid Icons dialog.  To open this dialog click the button [dot_img] next to the Customize icons property.  When icons in the Define Grid Icons dialog are changed from their default setting they appear in bold. If you have defined a icon map that you would like to use in a different Grid, click the Export hyperlink button.  You can also import maps using the Import hyperlink. </description>
		<note>The list of icons show here is not the exhaustive list of icons that can be customized. Many of the icons have explicit prompts in the Grid builder.  </note>
	</section>	
	</sections>
</group>	
			
			<group>
	<sections>
	<section>

		<description>The Define Grid Icons Dialog:</description>
		<figure><link>images/1_icons.png</link></figure>
		<note>You can use icons instead of text for the 'Search' button and 'Clear Search' link. To customize the icon you can either define a mapping in the style-sheet editor (to affect a change across all components that use that style), or make a local change here in Grid, Properties, Customization, Icons.  </note>
	</section>	
	</sections>
</group>	
				
				<group background="true">
	<sections>
	<section>
		
		<description>The following example shows how to insert a customized icon into a grid placeholder using the Customize icons property. The placeholders being customized in this case are RowExpander.Open and RowExpander.Close. These instructions will also show how to create the RowExpander where the icons appear. Before proceeding it would be best to have at least one component pre-defined; to use with the row expander.  
</description>
		
	</section>	
	</sections>
</group>	
			
			<group>
	<sections>
	<section>
		<title>Customize a Grid Icon: </title>
		<steps>
<step>
	<description>Create two simple icons using whatever paint or photoshop program works for you. These icons were created as 24 x 24 pixel png files.</description>
	<cases>
		<case>
			<description>duck icon 
</description>
			<figure><link>images/01_duck.png</link></figure>
		</case>
		<case>
			<description>duck nest icon 
</description>
			<figure><link>images/01_nest.png</link></figure>
		</case>
		
		
	</cases>
</step>			
<step>
	<description>From the Web Projects Control Panel open the Grid builder . On the Design tab's  Component Type page under Grid Layout: menu select a Tabular grid.</description>
</step>		
<step>
	<description>On the Data Source page choose the type of data you want to display your grid. This example uses SQL .</description>
</step>		
<step>
	<description>Under Query(DBF) or Query(AlphaDAO) , select the table that you want to draw data from.</description>
</step>		
<step>
	<description>Go to Fields and add a number of fields to your grid by moving them from the Available Fields list to the Selected fields list.</description>
</step>		
<step>
	<description>Go back to the Query page. Find the Select Primary Key button and click it. A primary key is what you use identify records uniquely. It must be one of the fields defined in your grid; preferably one with differing entries.</description>
</step>		
<step>
	<description>The Select Primary Keys dialog will open. From the fields listed, check one that appears in your grid and click OK .</description>
</step>		
	
<step>
	<description>Now go to the Properties page. Scroll down to the Row Expander properties section and check the Has row expander property.</description>
	<figure><link>images/01_icon3.png</link></figure>
</step>		
<step>
	<description>A list of Row expander properties will open. Find the Row Expander linked  content property and click the button next to it.</description>
	<figure><link>images/01_icon4.png</link></figure>
</step>		
<step>
	<description>The Define Linked Content Dialog will open. Click the Add Object button and from the drop-down select Add Linked Component .</description>
	<figure><link>images/01_icon5.png</link></figure>
</step>		
<step>
	<description>This will bring you to the Select Component Dialog, which will show you all of the components that you have created. Select a component from the list and click OK .</description>
	<figure><link>images/01_icon6.png</link></figure>
</step>		
<step>
	<description>Click OK again to close the Define Linked Content dialog and scroll up the Properties page until you find the Customization properties section.</description>
	<figure><link>images/01_icon7.png</link></figure>
</step>		
<step>
	<description>Find the Customize icons property and click the button [dot_img] next to it.</description>
	<figure><link>images/01_icon8.png</link></figure>
</step>		
<step>
	<description>The Define Grid Icons dialog will open. In the list of icons find the images.RowExpander.Open Placeholder and click the button [dot_img] next to it.</description>
	<figure><link>images/01_icon9.png</link></figure>
</step>		
<step>
	<description>The Specify image dialog will open. Click the Image in Web Project or Style radio button and then hit the Select button and choose the Select from Web Project Folder option.</description>
	<figure><link>images/01_icon10.png</link></figure>
</step>		
<step>
	<description>A Select Image dialog will open. Click the Add Image to Project button.</description>
	<figure><link>images/01_icon11.png</link></figure>
</step>		
<step>
	<description>The Add Image to Project dialog will appear. Click the 'up' button next to Source filename: and navigate to where you stored your first simple icon on you computer.</description>
	<figure><link>images/01_icon12.png</link></figure>
</step>		
<step>
	<description>Click OK , OK , and OK again to get back to the Define Grid Icons page. The altered icon should appear in bold lettering.</description>
	<figure><link>images/01_icon13.png</link></figure>
</step>		
<step>
	<description>Next Select the images.RowExpander.Close Placeholder and click the button [dot_img] next to it.</description>
	<figure><link>images/01_icon14.png</link></figure>
</step>		
<step>
	<description>Repeat steps 17 through 19 for this placeholder only this time add a different icon in step 18. Your Define Grid Icons dialog should look something like this.

</description>
	<figure><link>images/01_icon15.png</link></figure>
</step>		
<step>
	<description>Click OK and go to Working Preview or Live Preview. You should now see your new Row Expander icon. Click on it and you should see it change to the second icon you defined.</description>
	<cases>
		<case>
			<description>New Row Expander Closed 'Duck' Icon 
</description>
			<figure><link>images/01_icon.png</link></figure>
		</case>
		<case>
			<description>New Row Expander Open 'Nest' Icon 
</description>
			<figure><link>images/01_icon2.png</link></figure>
		</case>
		
	</cases>
</step>		

			
		</steps>
	</section>	
	</sections>
</group>	
	<title>Master Template </title>		
			<group background="true">
	<sections>
	<section>
		
		<description>A master layout template allows you to quickly adjust the layout of the various pieces of the Grid component (i.e. Search Part, Grid Part and Detail View Part). If you don't use a master layout template, then you have to arrange the layout of the Grid parts in the .a5w page that contains the component. If you want to run a Grid with an Ajax callback you should use a master layout template. Otherwise, Alpha Anywhere will use a default master layout template.  

Using a template allows you to layout the different parts of the Grid in the component definition, rather than on the page. Several different template styles are available, such as tabs and accordions. The Detail View includes a toolbar that allows you to navigate from record to record. The text on the tabs or labels can be specified, and the initial pane to show can be specified.  
</description>
		
	</section>	
	</sections>
</group>	
			
			<group background="true">
	<sections>
	<section>
		<title>Use a master layout template </title>
		<description>Check this property is you want to use a master template to organize the parts of your grid...  
</description>
		<figure><link>images/1_MasterTemplateSearch5.png</link></figure>
	</section>	
	</sections>
</group>	
			
			<group background="true">
	<sections>
	<section>
		<title>Master Layout Template Style </title>
		<description>If your grid component contains a Search and or Detail View Part this will give you more template style options. You can add Search and Detail 'parts' on the Component Type page of the Grid Builder . There are a number of pre-defined master layout templates that you can use to style your grid. Selecting Table - Vertical Layout will stack the search, grid, and detail parts vertically on the page in that order. Similarly, the Table - Horizontal Layout option will place the parts of your grid side by side. The Table - (Search and Grid) over (Detail View) option will place the Search and Grid parts next to one another horizontally and then add the Detail View below them. Selecting Tab Container - Tabs on Top places the grid, detail, and search parts on individual tabs that appear at the top of the grid component. You can choose other positions to place these tabs by choosing one of the Tab Container - Tabs on Bottom , Tab Container - Tabs on Left , or Tab Container - Tabs on Right options. The Accordian Container option adds a title bar above each part. You can then click on the title of each part to either close or expand it. It is also possible define your own custom master layout template by selecting the Custom option.  
</description>
		<figure><link>images/1_MasterTemplate3.png</link></figure>
	</section>	
	</sections>
</group>	
			
			
			<group>
	<sections>
	<section>
		<description>Tab Container - Tabs on top. 
</description>
		<figure><link>images/1_MasterTemplate.png</link></figure>
	</section>	
	<section>
		<description>Tab Container - Tabs on Bottom with grid pane open  
</description>
		<figure><link>images/1_MasterTemplateSearch6.png</link></figure>
	</section>	
	<section>
		<description>Tab Container - Tabs on Left with Detail open  
</description>
		<figure><link>images/1_MasterTemplateGrid3.png</link></figure>
	</section>	
	<section>
		<description>Accordion Container with Detail Open  
</description>
		<figure><link>images/1_MasterTemplateSearch7.png</link></figure>
	</section>	
	</sections>
</group>	
			
			<group background="true">
	<sections>
	<section>
		<title>Search pane Label 
</title>
		<description>In order for this property to appear you must choose a Tab Container or Accordian Container for you master template and you grid must contain a Search Part . The Search pane Label property  will place a label on the tab or title bar for your Search part. The default text for the label is simply 'Search'.  
</description>
		<figure><link>images/1_MasterTemplateSearch.png</link></figure>
	</section>	
	<section>
		
		<description>In addition to changing the text for the Search pane Label property you can also type HTML directly into the property textbox. This allows you to change the way that the text appears on the tab or title bar, depending on what type of container you selected. For example...  
</description>
		<figure><link>images/1_MasterTemplateSearch4.png</link></figure>
	</section>	
	</sections>
</group>	
			
			<group>
	<sections>
	<section>
		
		<description>Search pane Label 
</description>
		<figure><link>images/1_MasterTemplateSearch2.png</link></figure>
	</section>	
	<section>
		
		<description>Modified Search pane Label 
</description>
		<figure><link>images/1_MasterTemplateSearch3.png</link></figure>
	</section>	
	</sections>
</group>	
<group background="true">
	<sections>
	<section>
		<title>Grid pane Label </title>
		<description>If you are using a tab or an accordion container for your master template, the Grid pane label property will let you define the text that fits in the Grid panes title bar or tab.  As with the Search pane label, you can modify the Grid pane label directly using HTML.  
</description>
		<figure><link>images/1_MasterTemplateGrid.png</link></figure>
	</section>	
	</sections>
</group>	
<group>
	<sections>
	<section>
		
		<description>Grid pane label 
</description>
		<figure><link>images/1_MasterTemplateGrid2.png</link></figure>
	</section>	
	</sections>
</group>			

<group background="true">
	<sections>
	<section>
		<title>Detail View Label 
</title>
		<description>The Detail view label property allows you to change the detail pane's label to your liking. As with the Grid pane label and the Search pane label this only applies to container templates. As with the other labels you can also write HTML directly into this properties textbox.  
</description>
		<figure><link>images/1_MasterTemplatedetail.png</link></figure>
	</section>	
	<section>
		
		<description>An easy way to alter the HTML in labels is to go to View in Alpha Anywhere's menu bar and then open the HTML Editor from the dropdown list. Add the text that you want to appear on the label in the editor's Source tab. Then adjust the color and font in the editor's WYSIWYG editor. Finally go back to the Source tab and copy the applicable HTML back into the Detail view label property. Note: some label properties might not recognize new line tags.  
</description>
		<figure><link>images/1_MasterTemplatedetail4.png</link></figure>
	</section>	
	</sections>
</group>	
<group>
	<sections>
	<section>
		
		<description>Detail pane label 
</description>
		<figure><link>images/1_MasterTemplatedetail2.png</link></figure>
	</section>	
	<section>
		
		<description>Modified detail pane label 
</description>
		<figure><link>images/1_MasterTemplatedetail3.png</link></figure>
	</section>	
	</sections>
</group>				


<group background="true">
	<sections>
	<section>
		<title>Accordion Style 
</title>
		<description>If you opt for an Accordion container for your master control then you have the option of choosing an Accordion style . This property presents two options, single and multiple. Selecting ' Single ' will only allow only one accordion pane to be open at any given time. Selecting ' Multiple ' will allow users to leave panes open while they open additional panes. 'Multiple' is the Accordion style's default setting.  
</description>
		<figure><link>images/1_MasterTemplateGrid4.png</link></figure>
	</section>	
	</sections>
</group>	
<group>
	<sections>
	<section>
		
		<description>Multiple accordion panes open at once 
</description>
		<figure><link>images/1_MasterTemplatemultiple.png</link></figure>
	</section>	
	</sections>
</group>			

<group background="true">
	<sections>
	<section>
		<title>Initial open Panes 
</title>
		<description>If you have an Accordion container you can choose which panes in the accordion will be open when a user first looks at your grid component. To do this simply make a list of all of the panes that you want to be in the open position next to the Initial open panes property. Individual entries are separated by commas. How many panes you can have open at one time is determined by the Accordion style property. If you set the Accordion style to 'Single', then only one pane will open at any given time. This is true even if you listed multiple panes to open in the Initial open panes property. To do this you will need to have the Accordion Style set to its default setting, 'Multiple'.  
</description>
		<figure><link>images/1_MasterTemplatemultiple2.png</link></figure>
	</section>	
	<section>
		
		<description>The grid component is made up of three sub-parts: search part, grid part, and detail view part. In earlier versions of Alpha Anywhere, you laid out these three parts on the .a5w page that contained the grid component. With master templates, you can lay out these parts in the grid definition itself. You can also enclose the parts in a tab or accordion object.  </description>
		<videos>
			<video>
				<name>Have a look</name>
				<link>http://www.screencast.com/users/AlphaSoftware/folders/Jing/media/60da6864-a88e-4085-8879-505efa328efe</link>
			</video>
			
			
		</videos>
	</section>	
	</sections>
</group>	
	

<group background="true">
		<title>Shading and Dividers </title>
	<sections>
	<section>
	
		<description>This Section allows you to create grids with alternating colors on their rows or columns. You can also create lines to separate you rows here.  
</description>
		
	</section>	
	</sections>
</group>	
			

<group background="true">
	<sections>
	<section>
		<title>Alternate Row Shading 
</title>
		<description>Checking this box creates rows with alternating colors.  The Alternate row shading property comes with two additional properties, Even row band size and Odd row band size . The 'even' and 'odd' refer to the alternating colors. The number after each property indicates how many grid rows each color band encompasses. The default setting for both color bands is 1.  
</description>
		<figure><link>images/1_shading3.png</link></figure>
	</section>	
	<cases>
		<case>
<description>Alternate row shading</description>
<example><![CDATA[tmpl.alternate_bands as L ]]></example>
		</case>
		<case>
<description>Even row band size</description>
<example><![CDATA[tmpl.even_column_band_size as N ]]></example>
		</case>
		<case>
<description>Odd column band size</description>
<example><![CDATA[tmpl.odd_column_band_size as N]]></example>
		</case>
		
		
	</cases>
	</sections>
</group>	
<group>
	<sections>
	<section>
		
		<description>Even row band size 1, Odd row band size 1 
</description>
		<figure><link>images/1_shading.png</link></figure>
	</section>	
	<section>
		
		<description>Even row band size 2, Odd row band size 1 
</description>
		<figure><link>images/1_shading4.png</link></figure>
	</section>	
	</sections>
</group>			

<group background="true">
	<sections>
	<section>
		<title>Row Separator </title>
		<description>The Row separator property defines whether there should be separating line between rows. The divider is more noticeable in some styles.  
</description>
		<example><![CDATA[tmpl.has_row_separator as L]]></example>
	</section>	
	</sections>
</group>	
<group>
	<sections>
	<section>
		
		<description>Grid with Row separator Off 
</description>
		<figure><link>images/1_shading6.png</link></figure>
	</section>	
	<section>
		
		<description>Grid with Row separator turned On 
</description>
		<figure><link>images/1_shading7.png</link></figure>
	</section>	
	</sections>
</group>			

<group background="true">
	<sections>
	<section>
		<title>Conditional Style (Server-Side) 
</title>
		<description><![CDATA[You can also use the Conditional style property under the Display Settings section of Field Properties to set conditional styles for individual fields.  
Add style 
quantity > summary.quantity.average
select color
set below average background
quantity < summary.quantity.average.

Grid Components - Server Side - Dynamic Image, Conditional Field Style and Conditional Row Style 
The conditional expressions can now refer to the special and fields.]]> </description>
		<figure><link>images/serversideconditionals.jpg</link></figure>
	</section>	
	</sections>
</group>	
<group background="true">
	<sections>
	<section>
		<title>Conditional Style (Client-Side) </title>
		<description></description>
		
	</section>	
	</sections>
</group>			
<title>Row Labels</title>
<group background="true">
	<sections>
	<section>
		<title>Show row labels</title>
		<description>The Show row labels property displays the field name of a given row. This only works in Columnar grids, i.e. Form(Columnar) and Stacked Columnar grids, because Tabular grids have column labels, not row labels. To turn on row labels check the checkbox next to the Show row labels property. To turn off this feature, leave the checkbox unchecked.  </description>
		
	</section>	
	</sections>
</group>	
<group>
	<sections>
	<section>
		
		<description>With Row Labels 
</description>
		<figure><link>images/1_rowlabels.png</link></figure>
	</section>	
	<section>
		
		<description>Without Row Labels 
</description>
		<figure><link>images/1_rowlabels2.png</link></figure>
	</section>	
	</sections>
</group>			

<group background="true">
	<sections>
	<section>
		<title>Suppress repeated row labels </title>
		<description>When you have the snaking column option turned on, and you are displaying row labels for fields, using the 'Suppress repeated row labels' property allows you to display the labels only for the record in column one of the snaking layout. This creates a much cleaner and narrower layout, as show in the images below.  
</description>
		
	</section>	
	</sections>
</group>	
<group>
	<sections>
	<section>
		
		<description>Without Suppress Repeat 
</description>
		<figure><link>images/1_snakingstyle3.png</link></figure>
	</section>	
	<section>
		
		<description>With Suppress Repeat. 
</description>
		<figure><link>images/1_snakingstyle4.png</link></figure>
	</section>	
	</sections>
</group>			

<group background="true">
	<title>Column Titles and Sorting/Scrolling Options</title>
	<sections>
	<section>
		<title>Column titles position</title>
		<description>Column titles are the text that appears at the top of each column. The Column titles position property specifies the position of the column titles. There options for placing column titles include, ' Above Grid ', Below Grid ', and ' Above and Below Grid '. There is also an option for ' No Titles '. 
</description>
		<figure><link>images/1_column.png</link></figure>
	</section>	
	<section>
		<example><![CDATA[tmpl.show_column_titles as N ]]></example>
	</section>
	</sections>
</group>	
<group>
	<sections>
	<section>
		
		<description>Above Grid </description>
		<figure><link>images/1_columnabove.png</link></figure>
	</section>	
	<section>
		<description>Below Grid 
</description>
		<figure><link>images/1_columnbelow.png</link></figure>
	</section>	
	<section>
		<description>Above and Below Grid 
</description>
		<figure><link>images/1_columnbelowabove.png</link></figure>
	</section>	
	<section>
		<description>No Titles 
</description>
		<figure><link>images/1_columnnone.png</link></figure>
	</section>	
	</sections>
</group>			

<group background="true">
	<sections>
	<section>
		<title>Suppress titles if no records 
</title>
		<description></description>

	</section>	
	</sections>
</group>	
<group background="true">
	<sections>
	<section>
		<title>Sorting style 
</title>
		<description>Specifies the sorting style of the columns. The options are:
</description>
		<cases>
			<case>
				
				<description>"No sorting"
</description>
			</case>
				<case>
				
				<description>"Click column label to sort - do not show current sort direction"
</description>
			</case>
				<case>
				
				<description>"Click column label to sort - show current sort direction with icon"
</description>
			</case>
				<case>
				
				<description>"Click icon to sort"
</description>
			</case>
				<case>
				
				<example><![CDATA[tmpl.sort_style as N]]></example>
			</case>
			
			
		</cases>
	</section>	
	</sections>
</group>
<group background="true">
	<sections>
	<section>
		<title></title>
		<description></description>
		<figure><link></link></figure>
	</section>	
	</sections>
</group>			

<group background="true">
	<sections>
	<section>
		<title>Reset page number on sort 
</title>
		<description>Specifies whether to display page 1 when sorting records.</description>
		<example><![CDATA[tmpl.reset_page_number_when_sorting as L ]]></example>
	</section>	
	</sections>
</group>	
<group background="true">
	<sections>
	<section>
		<title>Grid body can scroll 
</title>
		<description>The Grid body can scroll property adds a scroll bar to your grid.  Selecting this option will open two additional properties, Scroll region height and Scroll region width . Scroll region height is the height of the window that displays the scrollbar and your records. If there is more window space then there are records to fill the window, then the scrollbar will not be shown. The Scroll region width property limits the width of the window that displays your grids records. By default this is set to 100%, meaning that the entire width of the window is the same as the grid's width. You can set the Scroll region width to a size that can't display all of the grid's fields at once. If you do this then you should see a horizontal scroll bar appear.  
</description>
		
	</section>	
	<section>
		<description>When using this option also select the Fixed Column Widths property. This is important for instances where you want the title and footer section of a grid to not change in width. This design pattern is used quite frequently in mobile applications (e.g. Gmail on the iPad or iPhone).  On a mobile browser, you can use a gesture to scroll the records in the Grid.  
</description>
		<figure><link>images/01_scrolling3.png</link></figure>
	</section>
	<section>
		
		<description>Scrollbar 
</description>
		<figure><link>images/01_scrolling.png</link></figure>
	</section>	
	<section>
		
		
		<figure><link>images/01_scrolling2.png</link></figure>
	</section>	
	</sections>
</group>		

<group background="true">
	<sections>
	<section>
		<title>Fixed column widths</title>
		<description>Normally, grid column widths are dynamic; meaning that they can adjust to accommodate the data displayed in the column. You can, however, specify a Fixed column widths property. When you select this option, you can set a default width for all columns that are not explicitly set. You can also set explicit widths for any given Grid column. In order to set column widths you must select 'Tabular' in the Grid Layout menu on the Grid Builder's Component Type page. Checking the Fixed column widths box will display two additional properties, Default column width and Column widths. The set the default column size just type in the column size you want next to the Default column width property. To open set custom column widths, click the smart field [dot_img] next to the the 'Column widths' property. This will open the Fixed Column Widths - Definition Dialog.  
</description>
		
	</section>	
	<section>
		<description>Having fixed column widths is only meaningful for read-only grids using [Label] controls. This is because the width of TextBox controls is controlled by the TextBox Size property rather than by the CSS. It is possible to have a read-only fixed-column-width tabular grid with a read-write Detail part. This is particuarly important for scrolling, where you want the title of a field to be the same size as the records contained within it. It should be noted that column widths set using this property will override any width that you may have set in the 'Cell in-line style' for a column. 
</description>
		<figure><link>images/01_fixedcolumn.png</link></figure>
		
	</section>
	</sections>
</group>	
<group>
	<sections>
	<section>
		
		<description>Fixed Column Widths - Definition Dialog  
</description>
		<figure><link>images/01_fixedcolumn2.png</link></figure>
	</section>	
	<section>
<description>The Fixed Column Widths - Definition Dialog allows you to set the widths of your columns and also of the system field columns. Click the Insert field  name hyperlink at the bottom of the dialog to create a column width for the fields in your grid. Similarly, click the Insert system fields hyperlink to change a system field column. System fields are pre-defined fields, like the row selector column, that do not exist in the table your grid is connected to, but that you can add to your grid from the Properties page.</description>		
		<figure><link>images/01_fixedcolumn3.png</link></figure>
	</section>
	</sections>
</group>		

<group background="true">
	<title>Record Navigator/Grid Toolbar</title>
	<sections>
	<section>
		
		<description>The Record Navigator lets you design how users to move through the records shown in your application. It also lets you change the appearance of the navigation part of your grid. If you want your record navigator to take the form of a tree-control there is a section in the properties for this here. Included in the Record Navigator properties is the Help Window property. This will allow you to build Help for your application, check out this page to see more information on building a Help system.  </description>

	</section>	
	</sections>
</group>	
	

<group background="true">
	<sections>
	<section>
		<title>Record navigator style </title>
		<description>The Record navigator style property refers to style in terms of function, not appearance. There are three styles that the Record navigator supports, NavigationButtons , FetchMoreRecordsButton , and PullUpTouchEvent . NavigationButtons are a series of buttons that help users sift through pages of data, usually by clicking forward and back. You can decide the layout of the buttons themselves in the Record Navigator Layout property. The FetchMoreRecordsButton property is designed for use with mobile devices. This is a single button that appears on your grid. Every time the button is pushed additional pages are tacked on to the existing grid page, such that it appears to grow. The actual 'More Records' button can be altered once the FetchMoreRecordsButton property is selected. The PullUpTouchEvent is also used in mobile devices but is designed specifically to work with swipe gestures. There is no button for users to press with the PullUpTouchEvent property.  
</description>
		<figure><link>images/1_recordstyle.png</link></figure>
	</section>	
	<section>
		<example><![CDATA[tmpl.RecNav.Page_Numbering_Style as N ]]></example>
	</section>
	</sections>
</group>	
<group>
	<sections>
	<section>
		
		<description>NavigationButtons 
</description>
		<figure><link>images/1_recordstyle1.png</link></figure>
	</section>	
	<section>
		
		<description>FetchMoreRecordsButton 
</description>
		<figure><link>images/1_recordstyle2.png</link></figure>
	</section>	
	<section>
		
		<description>PullUpTouchEvent 
</description>
		<figure><link>images/1_recordstyle3.png</link></figure>
	</section>	
	</sections>
</group>	


<group background="true">
	<sections>
	<section>
		<title>Record navigator position 
</title>
		<description>The Record navigator position property allows you to place the page navigator in different areas on a grid. The options include Below Grid , Above Grid , and Above and Below Grid . There is also an option for having No navigator bar if you don't want to use a navigator.  
</description>
		<figure><link>images/1_pagenavlist.png</link></figure>
	</section>	
	</sections>
</group>	
<group>
	<sections>
	<section>
		
		<description>Below Grid 
</description>
		<figure><link>images/1_recordNavplace1.png</link></figure>
	</section>	
	<section>
		
		<description>Above Grid 
</description>
		<figure><link>images/1_recordNavplace2.png</link></figure>
	</section>	
	<section>
		
		<description>Above and Below Grid 
</description>
		<figure><link>images/1_recordNavplace3.png</link></figure>
	</section>	
	<section>
		
		<description>No Navigation Bar 
</description>
		<figure><link>images/1_recordNavplace4.png</link></figure>
	</section>	
	<section>
		
		<description></description>
		<figure><link></link></figure>
	</section>	
	</sections>
</group>	

<group background="true">
	<sections>
	<section>
		<title>Suppress record navigator bar/footer if no records 
</title>
		<description></description>
	
	</section>	
	</sections>
</group>	
<group background="true">
	<sections>
	<section>
		<title>Record navigator layout </title>
		<description>Clicking the Record navigator layout property button [dot_img] opens the Record Navigator Designer . This contains a number of pre-defined formats that let you adjust the look and feel of the record navigator. In addition to using the pre-defined designs there is also a custom options that allow you to adjust the record navigator at will.  
</description>

		<figure><link>images/1_recordNavpredef.png</link></figure>
	</section>	
	<section>
		<example><![CDATA[tmpl 
.RecNav.Page_Numbering_Style as N 
.PagesTemplate_wout_PageCount as C 
.Show_Page_Count as L ]]></example>
	</section>
	</sections>
</group>	

<group>
	<sections>
	<section>
		<title>Add a Pre-Defined Page Navigator:  </title>
		<description>Make sure that No Navigation Bar is NOT selected in the Record Navigator position property.  
</description>
		<cases>
			<case>
				<figure><link>images/1_recordNavop1a.png</link></figure>
			</case>
			<case>
				<figure><link>images/1_recordNavop1.png</link></figure>
			</case>
			<case>
				<figure><link>images/1_recordNavop2a.png</link></figure>
			</case>
			<case>
				<figure><link>images/1_recordNavop2.png</link></figure>
			</case>
			<case>
				<figure><link>images/1_recordNavop3a.png</link></figure>
			</case>
			<case>
				<figure><link>images/1_recordNavop3.png</link></figure>
			</case>
			<case>
				<figure><link>images/1_recordNavop4a.png</link></figure>
			</case>
			<case>
				<figure><link>images/1_recordNavop4.png</link></figure>
			</case>
			<case>
				<figure><link>images/1_recordNavop5a.png</link></figure>
			</case>
			<case>
				<figure><link>images/1_recordNavop5.png</link></figure>
			</case>
			<case>
				<figure><link>images/1_recordNavop6a.png</link></figure>
			</case>
			<case>
				<figure><link>images/1_recordNavop6.png</link></figure>
			</case>
			<case>
				<figure><link>images/1_recordNavop7a.png</link></figure>
			</case>
			<case>
				<figure><link>images/1_recordNavop7.png</link></figure>
			</case>
			<case>
				<figure><link>images/1_recordNavop8a.png</link></figure>
			</case>
			<case>
				<figure><link>images/1_recordNavop8.png</link></figure>
			</case>
			<case>
				<figure><link>images/1_recordNavop9a.png</link></figure>
			</case>
			<case>
				<figure><link>images/1_recordNavop9.png</link></figure>
			</case>
			<case>
				<figure><link>images/1_recordNavop10.png</link></figure>
			</case>
			<case>
				<figure><link>images/1_recordNavop10a.png</link></figure>
			</case>
			
		</cases>
	</section>	
	</sections>
</group>	
<group background="true">
	<sections>
	<section>
		
		<description>The 'Use type-in box for page navigation' option lets users select the target page by typing the page number into an edit box and pressing Enter. This method gives users direct access to any page in the Grid (though not with A5V9 and below). To turn on this feature, open check the ' Use type-in box for page navigation ' checkbox in the Record Navigator Designer .  
</description>
		<figure><link>images/1_recordNavigator.png</link></figure>
	</section>	
	</sections>
</group>	

<group>
	<sections>
	<section>
		<title>Create a User Type-in Box for Page Navigation:  </title>
		<steps>
			<step>
				<description>Open the Design tab in the Grid Builder.  </description>
			</step>
			<step>
				<description>Go to the Grid Properties page. Scroll down to the Record Navigator/Grid Toolbar properties  </description>
				<figure><link>images/1_recordNavigator.png</link></figure>
			</step>
			<step>
				<description>View the result in Working Preview. Type-in box for page navigation:</description>
				<figure><link>images/1_recordNav2.png</link></figure>
			</step>
			
		</steps>
			
	</section>	
	</sections>
</group>	
<group background="true">
	<sections>
	<section>
		
		<description>If you check Custom layout design in the Record Navigator Designer then additional tools will be displayed to help you customize your page navigator.  If you want to modify a pre-defined navigator simply click on the Pre-Defined Format radio button that you want and then click Custom layout design. The Customize region will show all links as they would appear in the selected format. Click OK to save your changes or Cancel to discard your changes.  
</description>
		<figure><link>images/1_animate7.png</link></figure>
	</section>	
	</sections>
</group>	

<group>
	<sections>
	<section>
		
		<description>Create a Custom Layout:  

</description>
<steps>
	<step>
		<description>Open the Grid Builder from the Web Projects Control Panel and go to the Design tab.  </description>
	</step>
	<step>
		<description>Under Data Source choose either .dbf or SQL .   </description>
	</step>
	<step>
		<description>Go to the Query(DBF) or Query(AlphaDAO) page and select a table from which to draw data.   </description>
	</step>
	<step>
		<description>Next assign some fields to the grid you are creating. Open the Fields page and use the arrows to fields from the Available Fields: list into the Selected fields list.   </description>
	</step>
	<step>
		<description>Make your way to the Properties page and scroll down the list of properties until you find the Record Navigator/Grid Toolbar section.   </description>
	</step>
	<step>
		<description>Under Record Navigator style select NavigationButtons.   </description>
	</step>
	<step>
		<description>Find the Record Navigator Position property and select Above Grid , Below Grid , or Above and Below Grid. Do not select the No Navigation Bar option.   </description>
	</step>
	<step>
		<description>Click the button [dot_img] next to the Record Navigator layout property to open the Record Navigator Designer .   </description>
	</step>
	<step>
		<description>In the Pre-Defined Format region select Custom layout . The Customize region of the dialog should quickly populate with tools.   

</description>
	</step>
	
	
</steps>
	</section>	
	</sections>
</group>	


<group background="true">
	<sections>
	<section>
		<title>Suppress footer if only one page</title>
		<description>Determines whether to show the navigator if there is only one page.</description>
		<example>tmpl.RecNav.SuppressIfOnlyOnePage as L </example>
	</section>	
	</sections>
</group>	


<group background="true">
	<sections>
	<section>
		<title>Export to Excel/Ascii </title>
		<description></description>
		<figure><link></link></figure>
	</section>	
	</sections>
</group>	


<group background="true">
	<sections>
	<section>
		<title>Help window</title>
		<description></description>
		<figure><link></link></figure>
	</section>	
	</sections>
</group>	


<group background="true">
	<sections>
	<section>
		<title>Toolbar 'Action Buttons' </title>
		<description></description>
		<figure><link></link></figure>
	</section>	
	</sections>
</group>	


<group background="true">
	<sections>
	<section>
		<title>Customize Grid toolbar template </title>
		<description>The Grid has always allowed you to customize the layout of the record navigator, but now, you can customize the entire Grid Toolbar and you can add your own custom buttons to perform actions that you define.
For example, this image shows how we have added 3 custom buttons to the toolbar.
</description>
		<figure><link>images/CustomizedGridToolbar.jpg</link></figure>
	</section>	
	<section>
		<description>To customize the toolbar, click the smart field for the 'Customize Grid toolbar template' property.
</description>
		<figure><link>images/CustomizeGridToolbar_PropSheet.gif</link></figure>
		
	</section>
	<section>
		<description>The Genie lets you customize the toolbar for when the Grid is read-only and when it is editable. You can make modifications to the HTML template. The placeholders in curly brackets are used for the different parts of the toolbar.
To get started, click the hyperlink to insert the default template.
</description>
		<figure><link>images/CustomizeToolbarGenie.jpg</link></figure>
		
	</section>
		<section>
		
		<description>To add a button to the template you would have to do</description>
		<example><![CDATA[click="foo()">ButtonText]]></example>
	</section>	
		<section>
		
		<description>foo() would be a javascript function defined in javascript function declarations.
However, this is a manual technique that is obsolete as of October 2010, because Action Buttons gives you this facility and much more.
</description>
		<videos>
			<video>
				<name>Video 86</name>
				<link>http://news.alphasoftware.com/V10Preview/videos.htm</link>
			</video>
			
		</videos>
	</section>	
	<section>
		
		<description>It is possible to replace the navigation buttons on the detail view. By simply replacing the graphics of an applications with some readily available icons, you can completely change the look and feel of the app.</description>
		<figure><link>http://4.bp.blogspot.com/_ITYu2clc7DE/Srema3anrSI/AAAAAAAAAUs/OfH-pSx9Ut0/s320/Alpha_Buttons.jpg</link></figure>
		
	</section>
	
	
	</sections>
</group>	
<group>
	<sections>
	<section>
		
		<cases>
			<case>
				<title>First Record Label</title>
				<description>Defines the text that appears for the first record label.</description>
				<example><![CDATA[tmpl.RecNav.First_Label as C 
]]></example>
			</case>
			<case>
				<title>Next Record Label</title>
				<description>Defines the text that appears for the next record label.</description>
				<example><![CDATA[tmpl.RecNav.Next_Label as C ]]></example>
			</case>
			<case>
				<title>Previous Record Label</title>
				<description>Defines the text that appears for the previous record label.</description>
				<example><![CDATA[tmpl.RecNav.Prev_Label as C ]]></example>
			</case>
			<case>
				<title>Last Record Label</title>
				<description>Defines the text that appears for the last record label.</description>
				<example><![CDATA[tmpl.RecNav.Last_Label as C ]]></example>
			</case>
			<case>
				<title>Show First Record Image</title>
				<description>Determines whether an image replaces the first record label.</description>
				<example><![CDATA[tmpl.RecNav.Has_First_Button as L ]]></example>
			</case>
			<case>
				<title>Show Next Record Image</title>
				<description>Determines whether an image replaces the next record label.</description>
				<example><![CDATA[tmpl.RecNav.Has_Next_Button as L ]]></example>
			</case>
			<case>
				<title>Show Previous Record Image</title>
				<description>Determines whether an image replaces the previous record label.</description>
				<example><![CDATA[tmpl.RecNav.Has_Previous_Button as  L]]></example>
			</case>
			<case>
				<title>Show Last Record Image</title>
				<description>Determines whether an image replaces the last record label.</description>
				<example><![CDATA[tmpl.RecNav.Has_Last_Button as L ]]></example>
			</case>
			
			
		</cases>
	</section>	
	<section>
		<description>The Webform Style Builder changed the column headings and background colors of the grid's stylesheet. The Webform Button Genie modified the navigation buttons, which are now located both above and below the grid.
</description>
<figure><link>images/WP_Grid_Modified_Navigation_Controls.gif</link></figure>		
	</section>
	</sections>
</group>	

<group background="true">
		<title>Quick Search</title>
	<sections>
	<section>
	
		<description>The Quick Search  feature is an alternative to putting a Search Part  on a Grid. It takes up less real estate than the Search Part, but does not have all of its options. There are some features, however that exceed the capabilities of a Search Part. Quick Search properties are defined in the Grid Part itself. Selecting the Has Quick Search  property adds a single search control to your grid part. If you want to add a control at the top of each field in your grid, check out the Query by Example properties.  If you include a Search Part in addition to a Quick Search, then the Search Part will perform searches within the subset of records selected by the Quick Search. 
</description>
		
	</section>	
	</sections>
</group>	
<group background="true">
	<sections>
	<section>
		<title>Has Quick Search </title>
		<description>Check the Has Quick Search property to enable the Quick Search feature in your grid. 
</description>
<example><![CDATA[tmpl.HasQuickSearch as L ]]></example>
		<figure><link>images/1_qsearch1.png</link></figure>
	</section>	
	</sections>
</group>	

<group background="true">
	<sections>
	<section>
		<title>Position </title>
		<description>The Position property lets you specify where you want the Quick Search control to be placed. " In Grid " will display the Quick Search as part of the Grid part. " Above Grid " will display it as a separate control above the Grid.  
</description>
<example><![CDATA[tmpl.QuickSearch               
.QuickSearchPosition as C ]]></example>
		<figure><link>images/1_qsearch2.png</link></figure>
	</section>	
	</sections>
</group>	
<group>
	<sections>
	<section>
		
		<description>In Grid 
</description>
		<figure><link>images/1_qsearchin.png</link></figure>
	</section>	
	<section>
		
		<description>Above Grid 
</description>
		<figure><link>images/1_qsearchabove.png</link></figure>
	</section>	
	</sections>
</group>	

<group background="true">
	<sections>
	<section>
		<title>Alignment </title>
		<description>'Alignment' specifies if the Quick Search should be " Left ", " Center ", or " Right " aligned within the Grid. This property is available only applies if   Position  is set to " In Grid ".  
</description>
<example><![CDATA[tmpl.QuickSearch            .QuickSearchAlign as C ]]></example>
		<figure><link>images/1_qsearch6.png</link></figure>
	</section>	
	</sections>
</group>	
<group>
	<sections>
	<section>
		
		<description>Align Left 
</description>
		<figure><link>images/1_qsearch3.png</link></figure>
	</section>	
		<section>
		
		<description>Align Center 
</description>
		<figure><link>images/1_qsearch4.png</link></figure>
	</section>	
		<section>
		
		<description>Align Right 
</description>
		<figure><link>images/1_qsearch5.png</link></figure>
	</section>	
	</sections>
</group>	


<group background="true">
	<sections>
	<section>
		<title>Field(s)to search </title>
		<description>As with the Detail or Search Part, the Quick Search needs to be told where to search for data. The Field(s) to search property is where you specify which fields in your grid you want the Quick Search to conduct a search. Clicking the button to the right of the Field(s) to search property will open the Select Field(s) to Search dialog. This dialog gives you the option of to Search a single field or to Search multiple fields .  
</description>
<example><![CDATA[tmpl.QuickSearch               
.FieldToSearch as C ]]></example>
		<figure><link>images/1_norecords4.png</link></figure>
	</section>	
	</sections>
</group>	
<group>
	<sections>
	<section>
	<title>Add Fields to a Quick Search: </title>
	
<steps>
	<step>
		<description>Open the Grid Builder from the Web Projects Control Panel and go to the Design tab.  </description>
	</step>
	<step>
		<description>Under Data Source choose either .dbf or SQL.   </description>
	</step>
	<step>
		<description>Go to the Query(DBF) or Query(AlphaDAO) page and select a table from which to draw data.   </description>
	</step>
	<step>
		<description>Next assign some fields to the grid you are creating. Open the Fields page and use the arrows to move fields from the Available Fields: list into the Selected fields list.</description>
	</step>
	<step>
		<description>In the Properties page, scroll down the list of properties until you find the Quick search section. Check the Has Quick Search checkbox.   

</description>
		<figure><link>images/1_searchfields3.png</link></figure>
	</step>
	<step>
		<description>Find the Field(s) to search property and click the button [dot_img] next to it.   </description>

	</step>
	<step>
		<description>The Select Field(s) to Search dialog will open. If you want to include only one field, click Search in a single field radio button and select the field from the Field to search drop-down.</description>
		<figure><link>images/1_searchfields2.png</link></figure>
	</step>
	<step>
		<description>To include multiple fields in a Quick Search, check the Search multiple fields radio button. Then check off all off the checkboxes next to the fields you want in the Specify which fields to search list.</description>
		<figure><link>images/1_searchfields1.png</link></figure>
	</step>
	<step>
		<description>Click OK to add the fields and close the Select Field(s) dialog.</description>
	
	</step>
	
	
</steps>	
	
	
	</section>	
	</sections>
</group>	

<group background="true">
	<sections>
	<section>
		<title>Allow QBF style</title>
		<description>Enables QBF style. QBF style causes the search argument "A,B,C" to search for A, B, or C. The search argument "A..C" searches for entries between A and C. The search argument "C.." searches for entries greater or equal to C. 'The search argument "..C" searches for entries less than or equal to C. 
</description>
		<example><![CDATA[tmpl.QuickSearch                
.AllowQBFStyleSearch as L]]></example>
	</section>	
	</sections>
</group>	
<group background="true">
	<sections>
	<section>
		<title>Search style</title>
		<description>Specifies how the data should be searched. The options are 'Wildcard', 'Exact', 'Contains', and 'Starts with'.
"Wildcard" - search for an exact match, ignoring case and length (wildcard characters * and ? are allowed).
"Exact" - search for an exact match, ignoring case and length.
"Contains" - search for value anywhere in field. There is no need to use wildcards in the search string.
"Starts with" - search for the value at the beginning of field. There is no need to use wildcards in the search string. 
</description>
		<example><![CDATA[tmpl.QuickSearch                
.SearchStyle as C ]]></example>
	</section>	
	</sections>
</group>	

<group background="true">
	<sections>
	<section>
		<title>Control type</title>
		<description>While most of the examples here have used a simple textbox for the Quick Search  feature, there exist other options. The Control type  property lets you quickly swap out the default ' Textbox ' Quick Search control for a ' Dropdownbox ', ' Radiobutton ', or ' Checkbox ' control and visa versa. It should be noted that for some of these controls it is necessary to define search options. This feature can be advantageous in that you can auto-submit a search when a value in a dropdownbox, radio button or check box control changes. For example, you might have a Quick Search on a State field; that describes all of the states in the United States. You would have a dropdownbox showing every state. When the user makes a selection in this dropdownbox, a new search runs immediately, without the user having to click a Search button. Below are some of the control specific properties:</description>
		<figure><link>images/1_searchcontrol.png</link></figure>
	</section>	
	<section>
		<cases>
			<case>
				<title>Choices </title>
				<example><![CDATA[tmpl.QuickSearch .Check box.Choices as C 
.Dropdownbox.Choices as C 
.Radiobutton.Choices as C]]></example>
				
				<description>The choices property is available if the Control type is "Dropdownbox", "RadioButton", or "Check box".   </description>
			
			</case>
			<case>
				<title>Has ShowAll radio button </title>
				<description>Only applies if the Control type  property is set to "Radiobutton". Specifies if the radio buttons should include a button to show all records. This is necessary to "turn off" the search after you have done a quick search. With other control types, you can turn off the search by doing a search on a blank value. </description>
				<example><![CDATA[Has ShowAll radio button 
tmpl.QuickSearch 
.Radiobutton.HasShowAllButton as L]]></example>
				
			</case>
			<case>
				<title>ShowAll button label </title>
				<description>Only applies if the   Control type  property is set to "Radiobutton". Defines the label for the "ShowAll" radio button. 
</description>
<example><![CDATA[ShowAll button label 
tmpl.QuickSearch 
.Radiobutton.HasShowAllButton as L]]></example>
			</case>
			<case>
				<title>Dropdownbox height </title>
				<description>Only applies if the   Control type  property is set to "DropDownBox". Specifies the height of the dropdownbox. If the height is greater than 1, you can allow the user to select multiple entries. 
</description>
<example><![CDATA[Dropdownbox height 
tmpl.QuickSearch 
.Dropdownbox.Size as N]]></example>
			</case>
			<case>
				<title>Dropdownbox select style </title>
				<description>Only applies if the   Control type  property is set to "DropDownBox". Specifies if the user can select multiple entries, or just a single entry. The choices are: "Single" and "Multiple" 
</description>
<example><![CDATA[Dropdownbox select style 
tmpl.QuickSearch 
.Dropdownbox.SelectStyle as C ]]></example>
			</case>
			<case>
				<title>Orientation</title>
				<description>Only applies if the   Control type  property is set to "Radiobutton" or "Check box". Specifies the orientation of the Quick Search control. The options are:"Horizontal" or "Vertical" 
</description>
<example><![CDATA[Orientation 
tmpl.QuickSearch 
.Check box.Orientation as C 
.RadioButton.Orientation as C]]></example>
			</case>
			<case>
				<title>Auto submit</title>
				<description>Only applies if the   Control type  property is not  set to "TextBox". Specifies whether, when the user makes a selection in the Quick Search, the search be performed immediately or when the user clicks the "Search" button? 
</description>
<example><![CDATA[Auto submit 
tmpl.QuickSearch 
.AutoSubmit as L ]]></example>
			</case>
			<case>
				<title>Freeform layout 
</title>
				<description>Applies only if the   Has freeform layout  property is set to True. Specifies the freeform layout for the Quick Search. You can specify any HTML for the text that surrounds the Quick Search. 
A Quick Search using radio buttons with predefined values.
</description>
<example><![CDATA[Freeform layout 
tmpl.QuickSearch 
.freeFormLayout as C ]]></example>
<figure><link>images/02_QuickSearch.png</link></figure>
			</case>
			
			
		</cases>
		
		
	</section>
	</sections>
</group>	
<group>
	<sections>
	<section>
<title>Add a Static Quick Search Dropdownbox Control: 
</title>
<steps>
	
	<step>
		<description>From the Web Projects Control Panel open the Grid Builder , go to the Design tab, and u  nder Data Source choose either .dbf or SQL .   </description>
	</step>
	<step>
		<description>On the Query(DBF) or Query(AlphaDAO) page and select a table from which to draw data.   </description>
	</step>
	<step>
		<description>Open the Fields page and use the arrows to add fields from the Available Fields: list to the Selected fields list.   </description>
	</step>
	<step>
		<description>In the Properties page, scroll down the list of properties until you find the Quick search section. Check the Has Quick Search checkbox.   </description>
	</step>
	<step>
		<description>Go to the Field(s) to Search property and select some fields for your Quick Search control to search.</description>
	</step>
	<step>
		<description>Find the Control type property and from the dropdown select the ' Dropdownbox ' control.</description>
	</step>
	<step>
		<description>Find the Choices property, directly below the Control type property, and click the [dot_img] button next to 'Choices'.</description>
	<figure><link>images/1_searchcontroldrop3.png</link></figure>
	</step>
	<step>
		<description>The Define Choices for 'QuickSearch' (Dropdownbox) dialog will open. Leave the List Type drop-down set to Static. Click the button next to the Choices option.</description>
	<figure><link>images/1_searchcontroldrop2.png</link></figure>
	</step>
	<step>
		<description>The Specify Choices dialog will open. Enter the list of static choices you want the user to see. You can sort the list alphabetically using the ' Sort Ascending ' or ' Sort Descending ' buttons.

</description>
		<figure><link>images/1_searchcontroldrop.png</link></figure>
	</step>
	<step>
		<description>Click OK to save and close the Specify choices dialog. Click OK again to close the  Define Choices for 'QuickSearch' (Dropdownbox) dialog.</description>
	</step>
	<step>
		<description>Run your grid in Live Preview or Working Preview mode and see how the control looks.</description>
	
<cases>
	<case>
		<description>A Static Drop-down Quick Search control 
</description>
		<figure><link>images/1_searchcontroldrop4.png</link></figure>
	</case>
	<case>
		<description>Result after clicking the Search button 
</description>
		<figure><link>images/1_searchcontroldrop5.png</link></figure>
	</case>
	
	
</cases>	
	</step>
	
	
	
</steps>


	</section>	
	</sections>
</group>	

<group background="true">
	<sections>
	<section>
		<title>Has 'Clear QuickSearch' button </title>
		<description></description>
		<figure><link></link></figure>
	</section>	
	</sections>
</group>	


<group background="true">
	<sections>
	<section>
		<title>Clear QuickSearch' button label</title>
		<description></description>
		<figure><link></link></figure>
	</section>	
	</sections>
</group>	


<group background="true">
	<sections>
	<section>
		<title>Initial selection </title>
		<description>Specifies the initial selection in the Quick Search. Leave this property blank if all records should be shown when the Grid is initially displayed. For example, say that your Quick Search does searches on a   State  field, and when the Grid is displayed initially, you want to show records for "MA".</description>
		<example><![CDATA[tmpl.QuickSearch 
.InitialSelection as C]]></example>
	</section>	
	</sections>
</group>	


<group background="true">
	<sections>
	<section>
		<title>Control inline style </title>
		<description>Overrides the style for the Quick Search control. Click to define the In-line style. Refer to the   Style Editor  for details.
</description>
		<example><![CDATA[tmpl.QuickSearch 
.Check box.InLineStyle as C 
.Dropdownbox.InLineStyle as C 
.Radiobutton.InLineStyle as C 
.Textbox.InLineStyle as C 
]]></example>
	</section>	
	</sections>
</group>	

	
<group background="true">
	<sections>
	<section>
		<title>Textbox size </title>
		<description>Only applies if the Control type  property is set to "TextBox". Sets the width of the textbox control.
</description>
		<example><![CDATA[tmpl.QuickSearch 
.Textbox.Size as N 
]]></example>
	</section>	
	</sections>
</group>	

	
<group background="true">
	<sections>
	<section>
		<title>Textbox maximum length </title>
		<description>Only applies if the   Control type  property is set to "TextBox". Sets the maximum width of the text that can be entered into a textbox control. Set to -1 for no limit.
</description>
	<example><![CDATA[tmpl.QuickSearch 
.Textbox.MaxLength as N 
]]></example>
	</section>	
	</sections>
</group>	

	
<group background="true">
	<sections>
	<section>
		<title>Search button label </title>
		<description>Specifies the label for the Search button. Applies only if the   Auto Submit  property is set to False. This is the button that the user clicks to perform the Quick Search.</description>
	<example><![CDATA[tmpl.QuickSearch 
.SearchButtonLabel as C]]></example>
	</section>	
	</sections>
</group>

	
<group background="true">
	<sections>
	<section>
		<title>Quick Search label </title>
		<description>Specify the label for the Quick Search. This label appears to the left of the Quick Search control.</description>
	<example><![CDATA[tmpl.QuickSearch 
.Label as C ]]></example>
	</section>	
	</sections>
</group>

	
<group background="true">
	<sections>
	<section>
		<title>Quick Search label style </title>
		<description>Overrides the style for the Quick Search lable. Click [dot_img] to define the In-line style. Refer to the   Style Editor  for details.</description>
	<example><![CDATA[tmpl.QuickSearch 
.labelInLineStyle as C ]]></example>
	</section>	
	</sections>
</group>

	
<group background="true">
	<sections>
	<section>
		<title>Has freeform layout </title>
		<description>Specifies if the Quick Search has a freeform layout. This will allow you to specify any HTML for the text that surrounds the Quick Search.</description>
	<example><![CDATA[tmpl.QuickSearch 
.HasfreeFormLayout as L ]]></example>
	</section>	
	</sections>
</group>

	
<group background="true">
	<sections>
	<section>
		<title>Search rules </title>
		<description></description>
	
	</section>	
	</sections>
</group>

	
<group background="true">
	<sections>
	<section>
		<title>Filtering a Grid with Quick Search</title>
		<description>Quick Searchis an option for a grid component that allows you to quickly filter and re-display its contents.
To add Quick Search to a grid:
</description>
<steps>
	<step>
		<description>Create a grid based on the Customertable of the AlphaSports database. Make sure the grid displays the "Bill_State_Region" field.
</description>
	</step>
	<step>
		<description>If the grid is not already open in the Grid Builder, open it now.
</description>
	</step>
	<step>
		<description>Select the Grid > Properties page.
</description>
	</step>
	<step>
		<description>Scroll down to the Quick Search section and change Quick Search > Has Quick Searchto "True".
</description>
	</step>
	<step>
		<description>Click [dot_img] in Quick Search > Field(s) to Searchto display the Select Fields(s) to Searchdialog.
</description>
	</step>
	<step>
		<description>Leave Search in a single fieldselected.
</description>
	</step>
	<step>
		<description>Select "Bill_State_Region" in the Fields to searchlist and click OK.
</description>
	</step>
	<step>
		<description>Select "Dropdownbox" in the Quick Search > Control typelist.
</description>
	</step>
	<step>
		<description>Click [dot_img] in Quick Search > Choicesto display the Define Choices for 'QuickSearch'dialog.
</description>
	</step>
	
	
	
	
</steps>
	</section>	
	</sections>
</group>

	
<group>
	<sections>
	<section>
		<title>Define Quick Search Choices
</title>
<steps>
	<step>
		<description>Select "Dynamic" in the Define Choices > List Typelist.
</description>
	</step>
	<step>
		<description>Select "DBF-Table" in the Data Source > Data source typelist.
</description>
	</step>
	<step>
		<description>Select "customer" in the Data Source > Table namelist.
</description>
	</step>
	<step>
		<description>Enter "Bill_State_Region" in the Data Source > Display value field/ex pressionfield.
</description>
	</step>
	<step>
		<description>Click OKto continue.
</description>
	</step>
	
	
</steps>
	</section>	
	
	<section>
<description>The Previewtab of the Grid Buildershould show something like the following.
</description>		
	<figure><link>Filtering/images/WPT_Quick_Search_Unfiltered.gif</link></figure>	
		
	</section>
	
	<section>
<description>Publish the page with the grid and select "NH" from the drop down list.
</description>		
	<figure><link>Filtering/images/WPT_Quick_Search_filtered.gif</link></figure>	
		
	</section>	
	<section>
		<description>This is what the grid would look like when using a check box control for the Quick Search. In this case the number choices was limited to 5. as you can see, this style has the benefit of making multiple selections easy to apply.
</description>
		<figure><link>Filtering/images/WPT_Quick_Search_checkbox.gif</link></figure>
		
	</section>
	<section>
		<description>See Also: Defining a Quick Search</description>
	</section>
	
	
	</sections>
</group>

	
<group background="true">
	
<title>Defining a Quick Search
</title>	
	
	<sections>
	<section>
		
		<description>The Quick Search feature allows you to make a search control part of a grid. The grid may also have a regular search part. That is, when you create a grid in the Grid Builder, you can check the "Grid contains a 'Search' part?" option on the Component Type page. This will create a search box that is separate from your grid and that has its own fields and properties that you can define. In comparison, a Quick Search actually fits inside or above your grid and is defined inside the grid itself. It can be placed in a grid regardless of whether you checked the "Grid contains a 'Search' part?" box or not. Quick Search comes with a number of design options including multiple field selection. You can see all of these by opening the Grid Builder.  
</description>
	
	</section>	
		<section>
		
		<description>With your workspace loaded, go to the Web Projects Control Panel and click the ' Create a new Grid Component ' button on the left side of the toolbar. The Grid Component Template will load. Click the ' Start with a Blank Grid Component ' radio button and click OK . The Grid Builder will open. You can breeze through the Component Type page and the Data Source page shown in the tree menu on the Grid Builder; what you enter here will not affect if you can use the Quick Search control. Under Query(DBF) or Query(AlphaDAO) you will need to establish a Table to link to, as there needs to be data to search. For more information on how to do this see this Introducing the Grid Builder or Define an AlphaDAO SQL Querypage. Assuming you have a working table in place, it is time to add a Quick Search to your grid:  
</description>
	
	</section>	
	</sections>
</group>

	
<group>
	<sections>
	<section>
		
		<description>A Quick Search control.  
</description>
	<figure><link>images/A_QuickSearch.png</link></figure>
	
	
	
	
	</section>	
	<section>
		<title>Procedure: </title>
<steps>
	<step>
		<description>Display the Grid > Properties page.
</description>
	</step>
	<step>
		<description>Scroll down to the Quick Search heading in the properties menu.
</description>
	</step>
	<step>
		<description>Select the Quick Search > Has Quick Searchcheck box.
</description>
	</step>
	<step>
		<description>Make a selection in the Quick Search > Positionlist. The control may be:
</description>
<cases>
	<case>
		<description>"Above Grid"</description>
	</case>
	<case>
		<description>"In Grid"
</description>
	</case>
	
</cases>
	</step>
	<step>
		<description>If you selected "In Grid" in step 4, select the alignment of the search control in the Quick Search > Alignmentlist. The options are:
</description>
		<cases>
	<case>
		<description>"Left"
</description>
	</case>
	<case>
		<description>"Center"
</description>
	</case>
	<case>
		<description>"Right"
</description>
	</case>
	
</cases>
	</step>
	<step>
		<description>Click [dot_img] in the Quick Search > Field(s) to searchfield to display the Select Fields(s) to Search dialog. If you select more than one field then the program will search in all of the specified fields. For example, if you specify Firstname, Lastname, Company in this property, and then search on 'John', Alpha Anywhere will search for 'John' in all three fields. Records containing 'John' in any of these fields will be returned.
</description>
<cases>
	<case>
		<description>1. Select whether you want to Search in a single fieldor Search multiple fields.</description>
	</case>
	<case>
		<description>2. If you selected to search in a single field, select it from the list and click OK.
</description>
	</case>
	<case>
		<description>3. If you selected to search in multiple fields, place checkmarks next to the selected field names and click OK.
</description>
	</case>
	
	
</cases>



	</step>
	<step>
		<description>Optionally, select Quick Search > Allow QBF styleto indicate whether QBF style searches be allowed. With QBF style searches, "A,B,C" searches for "A", "B", or "C". "A..C" searches for entries between "A" and "C". "C.." searches for entries greater or equal to "C". "..C" searches for entries less than or equal to "C".
</description>
	</step>
	<step>
		<description>Optionally, choose a search style in the Quick Search > Search stylelist. The options are:
</description>
<cases>
	<case>
		<description>"Wildcard" - search for an exact match, ignoring case and length (wildcard characters * and ? are allowed).
</description>
	</case>
	<case>
		<description>"Exact" - search for an exact match, ignoring case and length.
</description>
	</case>
	<case>
		<description>"Contains" - search for value anywhere in field (no need to use wildcards in search string).
</description>
	</case>
	<case>
		<description>"Starts with" - search for value at the beginning of field (no need to use wildcards in search string).
</description>
	</case>
	
	
</cases>
	</step>
	<step>
		<description>Select the control type in the Quick Search > Control typelist. The options are:
</description>
<cases>
	<case>
		<description>"Textbox"
</description>
	</case>
	<case>
		<description>"Dropdownbox"
</description>
	</case>
	<case>
		<description>"RadioButton"
</description>
	</case>
	<case>
		<description>"Check box"
</description>
	</case>
	
	
</cases>
	</step>
	<step>
		<description>If you selected "Dropdownbox", "RadioButton", or "Check box" in step 9:
</description>
<cases>
	<case>
		<description>a. Click [dot_img] in the Quick Search > Choicesfield to specify the choices to show in the control.
</description>
	</case>
	<case>
		<description>b. In the Quick Search > Maximum number of choicesfield specify the maximum number of choices to show. Set to 0 for no limit. This option is only meaningful if the control is populated dynamically from a database and you don't know how many records the query that populates the control will return. For example, a page that showed 50 choices for a check box control would be unwieldy, and you would want to limit the number of choices shown.
</description>
	</case>
	
	
</cases>
	</step>
	<step>
		<description>Optionally, select Quick Search > Has 'ShowAll' radio button. This is only applies if the control type property is set to "Radiobutton". Specify if the radio buttons should include a button to show all records. This is necessary to turn off the search after you have done a quick search. With other control types, you can turn off the search by doing a search on a blank value.
</description>
	</step>
	<step>
		<description>If you enable the Quick Search > Has 'ShowAll' radio button, specify the ShowAll button label.
</description>
	</step>
	<step>
		<description>Optionally, specify the initial selection in the Quick Search > Initial selection field. Leave this field blank if all records should be shown when the Grid is initially displayed. If you specify a value, then when the Grid is initially displayed it will be appropriately filtered (according to the search query). For example, say that your Quick Search does searches on a Statefield, and when the Grid is displayed initially, you want to show records for "MA".
</description>
	</step>
	<step>
		<description>Optionally, click [dot_img] in the Quick Search > Control inline stylefield to specify the inline style for the Quick Search control.
</description>
	</step>
	<step>
		<description>If you selected "Dropdownbox" in step 9, specify the Quick Search > Dropdownbox height. If the height is greater than 1, you can allow the user to select multiple entries.
</description>
	</step>
	<step>
		<description>If you selected a value greater than 1 in step 15, choose the Quick Search > Dropdownbox select style.Specify if the user can select multiple entries, or just a single entry.
</description>
	</step>
	<step>
		<description>If you selected "Textbox" in step 9:
</description>
<cases>
	<case>
		<description>1. Specify the width of control in the Quick Search > Textbox sizefield.
</description>
	</case>
	<case>
		<description>2. Specify the maximum number of characters that the user can enter into the Quick Search > Textbox maximum lengthfield. Set to -1 for no limit.
</description>
	</case>
	
</cases>
	</step>
	<step>
		<description>If you selected "RadioButton" or "Check box" in step 9, specify the orientation of the Quick Search control in the Quick Search > Orientationfield. The options are:
</description>
<cases>
	<case>
		<description>"Horizontal"
</description>
	</case>
	<case>
		<description>"Vertical"
</description>
	</case>
	
</cases>
	</step>
	<step>
		<description>If you selected "Dropdownbox", "RadioButton", or "Check box" in step 9, in the Quick Search > Auto submitfield specify whether the search should be performed immediately, or only when the user clicks the Search button.
</description>
	</step>
	<step>
		<description>If auto submit in step 19 is notselected, specify the label for the Search button in the Quick Search > Search button labelfield. This is This is the button that the user clicks to perform the Quick Search.
</description>
	</step>
	<step>
		<description>Specify the Quick Search > Quick Search label. This is the text that appears to the left of (or above) the search control.
</description>
	</step>
	<step>
		<description>Optionally, click [dot_img] to specify the Quick Search > Quick Search label style.
</description>
	</step>
	<step>
		<description>Optionally, select Quick Search > Has freeform layout. This will allow you to specify any HTML for the text that surrounds the Quick Search. 
Freeform layout.
</description>
	</step>
	<step>
		<description>If you want a freeform layout for the Quick Search, in the Quick Search > freeform layoutfield click to display the Freeform Column Layoutdialog. You can specify any HTML for the text that surrounds the Quick Search.
</description>
	</step>
	
	
	
</steps>		
		
		
		
	</section>
	
	<section>
<title>Examples
</title>		
		<description>The following example shows a text Quick Search field embedded in the grid. In this case the Quick Search field has been defined as a combo box showing unique values from the Sales Rep table field.
</description>
	<figure><link>images/WP_QuickSearch_3.gif</link></figure>	
		
		
	</section>
	<section>
		<description>In the following example the search field shows unique values from the Payment field as radio button selections. The current selection is "MasterCard", which was set to correspond to a value of "MCard" in the table. In this case the Quick Search field is outside the grid component.</description>
	<figure><link>images/WP_QuickSearch_2.gif</link></figure>	
		
		
	</section>	
	<section>
		<description>See Also
Creating a Grid Component, Setting Grid Properties 
</description>
	</section>
	
	
	</sections>
	
</group>

	
<group background="true">
	<title>Linked Grids/Content</title>
	<sections>
	<section>
		
		<description>When you are designing a grid, you can embed a 'Linked Grid' object or objects inside the grid part just as you would any other object (such as Tabs, Images, Frames, etc..). If you specify more than one Grid, the linked grids will display in a tab or accordion control. Linked grids can be linked to one or more fields in the current row. While they might sound mundane, linked grids have some powerful applications. If you are building a business application, for example, it is possible to link one customer on a grid containing customer names to a second grid containing information about everything that a customer has ever ordered from a given company. One could even create a third linked grid to display all of the other customers in the customer grid who happen to live in the same country.   
</description>
	<videos>
		<video>
			<name>Click hereto watch a video on this subject.  </name>
			<link>http://www.ajaxvideotutorials.com/V10Videos/LinkedContentSection.swf</link>
		</video>
		
		
	</videos>
	</section>	
	</sections>
</group>

	
<group>
	<sections>
	<section>
		<title>Has linked Grids or other content </title>
		<description></description>
	<example><![CDATA[ ]]></example>
	</section>	
	</sections>
</group>

<group>
	<sections>
	<section>
		<title>Linked Content Definition 
</title><steps>
	<step>
		<description>You can have as many linked content sections as you want can place them in a freeform edit region anywhere in the grid, it doesn't matter, completely up to your control</description>
	<figure><link>images/1_linked1.png</link></figure>
	</step>	
	<step>
		<description>add arbitrary name - ex PRIMARY can have as many of these as you want</description>
		<figure><link>images/1_linked2.png</link></figure>
	</step>
	<step>
		<description>click define linked content</description>
		<figure><link>images/1_linked3.png</link></figure>
	</step>
	<step>
		<description>click Add Object</description>
		<figure><link>images/1_linked4.png</link></figure>
	</step>
	<step>
		<description>first grid you want to link would be order
</description>
		
	</step>
	<step>
		<description>click OK</description>	
	</step>
	<step>
		<description>Click Parent field and then customer ID field
</description>	
	</step>
	<step>
		<description>Click add grid
</description>	
	</step>
	<step>
		<description>add customersbycountry grid link its parent field to the country field
</description>	
	</step>
	<step>
		<description>Set initial Grid to display to 1. This will be the first grid to appear
</description>	
	</step>
	<step>
		<description>Choose whether you want to display the grid as a tab control or an accordion control.
</description>	
	</step>
	<step>
		<description>Choose your tab location, if you have a tab control - top, bottom, left or right.
</description>	
	</step>
	<step>
		<description>Click edit freeform edit regions button to place the content on the component. Select bottom to put it underneath the grid
add a break 
to put some space between the linked grid and the grid part. then click on the Available placeholder for the linked grid you created.
</description>	
	</step>
	<step>
		<description>Run it</description>	
	</step>
	<step>
		<description>The image below shows a Customer grid. The last cell in the Grid contains an embedded, linked Grid showing the orders for that customer.
The embedded Grids are rendered by making subsequent Ajax callbacks after the parent Grid has rendered. This means that the embedded Grids do not slow down the initial rendering of the parent Grid.
</description>	
<figure><link>images/GridWithEmbeddedGrids.JPG</link></figure>
	</step>
	
	
	
	
	
	
	</steps>	
		
		
	</section>
	
	
	</sections>
</group>






<group background="true">
	<title>Linked Content Sections</title>
	<sections>
	<section>
		
		<description>Linked Content Sections allow you to display linked data in your Grid.
The linked content is displayed in a Tab or Accordion control if the Linked Content Section links more than one object. Linked Content Sections essentially duplicate the functionality of the Tabbed Grid Linker component and the Grid Linker component (from V9 and prior version). But because Linked Content Sections use Ajax, they don't have the performance penalty that Tabbed Grid Linkers and Grid Linkers have. You can place as many Linked Content Sections on your Grid as you want. For example, you might have a Customer Grid with a Linked Content Section below the Grid that displays an Orders Grid (showing orders for the selected Customer) and a Payments Grid (showing payments received from the selected Customer). These two Grids would be displayed in a Tab or Accordion control. Then, you might have another Grid (displayed, say, to the right of the Customer Grid) showing a list of all documents/letters/proposals, etc. that have been sent to the selected customer. NOTE: At present, you can only place Grids in Linked Content Sections. We will add .a5w pages and other web pages in the future.
The image below shows the Customer Grid with a Linked Content Section showing the Orders Grid. This Grid, in-turn, has its own Linked Content Section which shows the Order Details Grid.
</description>
	<figure><link>images/LinkedContentSection.PNG</link></figure>
	</section>	
	</sections>
</group>




<group>
	<sections>
	<section>
		<title>Linked Content Section and Row Expanders</title>
		<description>If there is only a single child grid, the child grid is no longer enclosed in a container with a border. The images below show the impact of the change. 

Grid with Linked Content - Notice that Linked Content Section is no longer wrapped in a container with a border and background fill. </description>
	<figure><link>images/lcs_1.jpg</link></figure>
	</section>	
	</sections>
</group>


<group>
	<sections>
	<section>
		<title>How to Place Linked Content In the Grid</title>
		<description>To place Lined Content into the Grid, check the 'Has linked Grids or other content' checkbox and then click on the smart field. The following dialog is displayed.
You can add add many Linked Content sections as you want.
</description>
<figure><link>images/LinkedContent.jpg</link></figure>
	</section>	
	
	<section>
		
		<description>Click the 'Add Linked Content Section' button and give the section any arbitrary name that you want.
</description>
		<figure><link>images/LinkedContent1.gif</link></figure>
	</section>	
	
	<section>
		
		<description>Then, click the 'Define Linked Content' button to define the linked content.
</description>
		<figure><link>images/LinkedContent2.jpg</link></figure>
	</section>	
		<section>
		
		<description>After you have defined the linked content, you must then specify where on the Grid the linked content should appear. You do this by placing a special placeholder in one of the Grid's freeform edit regions.
To place the linked content, click the 'Edit Freeform Edit Region' button and select which freeform edit region you want to use.
Then, insert the placeholder into the freeform html.
</description>
		<figure><link>images/LinkedContent3.jpg</link></figure>
	</section>	
	
	
	</sections>
</group>

<group>
	<sections>
	<section>
		<title>Linked Content Sections - Master Template</title>
		<description>You can place Linked Content Sections in the Master Template. Previously, Linked Content Sections could only be placed in a Free-form edit region. The benefit of placing Linked Content Sections in the Master Template is that you get smoother repainting of the Linked Content when the parent Grid is navigated, searched, or sorted.</description>
	
	</section>	
	</sections>
</group>

<group>
	<sections>
	<section>
		<title>Linked Content Section - HTML Memo Editor</title>
		<description>If you are displaying a Grid component in a Linked Content Section, and if the child Grid contains a pop-up HTML memo editor, the Linked Content Grid must be placed in the Master Template or a Search Part free-form edit region. The HTML editor will not function correctly if the Linked Content is placed in the Grid part's or Detail View part's free-form edit region.</description>
	
	</section>	
	</sections>
</group>		
	
	
	
<group background="true">
	<sections>
	<section>
		<title>Lock linked content window </title>
		<description></description>
		
	</section>	
	</sections>
</group>	
<group background="true">
	<title>Tree-control Record Navigator </title>
	<sections>
	<section>
		
		<description>The record navigator is how users of your application will move through records. The tree-control Record Navigator properties allow you to design your record navigator to take the form of a tree control.  To build a Record Navigator using numbered pages visit the Record Navigator/Grid Toolbar section of Grid Properties.  
</description>

	
	
	</section>	
	
	
	
	</sections>
</group>		
	
	
	
<group>
	<sections>
	<section>
		<title>Refresh</title>
		<cases>
			<case>
				<title>refreshExternalTreeNavigator Method</title>
				<description>If you have placed a Tree Control Navigator on the Grid, you can now force an Ajax callback to repopulate the Tree. 
The Grid Object now has a new method: .refreshExternalTreeNavigator() 
For example, you could have a button on the Grid with this code: </description>
				<example><![CDATA[{grid.Object}.refreshExternalTreeNavigator()]]></example>
			</case>
			
			<case>
				<title>Refresh Tree Button</title>
				<description>You can now set a property in the builder to add a 'Refresh' button to the Tree Control Navigator 
</description>
				<figure><link>Grid Component/images/treecontrolnavigator.jpg</link></figure>
			</case>
			<case>
				<description>When the tree control renders, it will have a button under the Tree to force a refresh. </description>
			</case>
			
		</cases>
		
	</section>
	
	
	</sections>
</group>	

	
<group background="true">
	<title>Alternate Views (includes Google Map and Chart) </title>
	<sections>
	<section>
		
		<description>The tabular and columnar views of a grid can convey a lot of information, but the human eye is much more sensitive to shapes and colors than it is to variations text. With an alternate view of a grid, you can display the same information in a way that grabs the users attention. If it's geographic information, the best display might be a map. If it's sch eduling information, the best display might be a calendar. Alternate views display the same number of rows as its associated grid. This is in contrast to a Linked component or a component in a Row Expander, both of which display data linked to or contained in the current row. The alternate view and the main view in your grid are given the same data. If your grid has a filter, it will also apply to the alternate view. If your grid is displaying 10 records on a page, the alternate view will display the same 10 records.   
</description>
		
	</section>	
	<section>
		
		<description>This section covers the few Alternate Views properties that are actually defined on the Grid Builder's Properties page. It then examines the Alternate View Builder, looking first at the Main View properties that are the standard settings for all Alternate Views in the Grid Part of a component. Finally, we will look at the actual types of Alternate Views you can create, Charts, Custom, and Google Map.  
</description>
		
	</section>	
	</sections>
</group>	
<group>
	<sections>
	<section>
		
		
		<figure><link>images/01_AlternateViewmap.png</link></figure>
	</section>	
	
	
	
	</sections>
</group>		
	
	
	
<group background="true">
	<sections>
	<section>
		<title>Has Alternate Views</title>
		<description>If checked, the Has Alternate Views property enables you to place alternate views on your grid.  
</description>
		
	</section>	
	</sections>
</group>	
	
<group background="true">
	<sections>
	<section>
		<title>Alternate Views definition </title>
		<description>Clicking the button [dot_img] next to the Alternate Views definition property open the Alternate View Builder . This is where you define what your alternate view is (chart, map, or custom), what it looks like, and what it does. The Alternate View Builder has two tabs, a Main View tab and an Alternate Views tab. The Main View tab contains settings that let you define how an Alternate View fits into your grid part. The Alternate View tab allows you to create new Alternate Views and decide on their individual properties.  </description>
		
	</section>	
	</sections>
</group>	
	
<group background="true">
	<sections>
	<section>
		<title>Main View</title>
		<description>When you open the Alternate View Builder you will see a Main View tab to the left of the Alternate View tab. The Main View is the 'standard view' for your grid. This is where you define how an alternate view fits into the Grid Part of your component.  
</description>
		
	
	<cases>
		<case>
			<figure><link>images/01_AlternateView2.png</link></figure>
		</case>
		<case>
			<title>ID</title>
			<description>The ID Property is always 'MAIN'. You cannot change this properties value.  
</description>
		</case>
		
		<case>
			<title>Mode </title>
			<description>The Mode property comes with two options, Selectable and Visible . Selectable creates a grid part where you have to click on something in order for the Alternate View to be visible. The Visible option simply displays the Alternate view on the same page as the grid. If you do select visible then you will need to create a freeform template to show where your Alternate View and your Grid should be placed in relation to each other. There are two pre-defined templates to help you do this.  
</description>
<cases>
	<case>
		<description>Selectable Mode equals different pages 
</description>
		<figure><link>images/01_AlternateViewmap6.png</link></figure>
	</case>
	<case>
		<description>Visible Mode, everything is on the same page 
</description>
		<figure><link>images/01_AlternateViewmap5.png</link></figure>
	</case>
	
</cases>
		</case>
		<case>
			<title>View selector type</title>
			<description>If you choose Selectable under as the Main View's Mode property, then you have the option of using Tabs, Buttons, or an Accordion to allow users to access the main view.  
</description>
			<cases>
				<case>
					<description>Buttons 
</description>
					<figure><link>images/01_AlternateViewmap3.png</link></figure>
				</case>
				<case>
					<description>Tabs 
</description>
					<figure><link>images/01_AlternateViewmap2.png</link></figure>
				</case>
				<case>
					<description>Accordion 
</description>
					<figure><link>images/01_AlternateViewmap4.png</link></figure>
				</case>
			</cases>
		</case>
		<case>
			<title>Tab position 
</title>
			<description>If you are working with Tabs as your selector type, you have the option of placing them on any side of your grid.  
</description>
<cases>
	<case>
			<description>Tabs on Top 
</description>
			<figure><link>images/01_AlternateViewtabstop.png</link></figure>
		</case>
	<case>
			<description>Tabs on Left 
</description>
			<figure><link>images/01_AlternateViewtabsleft.png</link></figure>
		</case>
	<case>
			<description>Tabs on Right 
</description>
			<figure><link>images/01_AlternateViewtabsright.png</link></figure>
		</case>
	<case>
			<description>Tabs on Bottom 
</description>
			<figure><link>images/01_AlternateViewtabsbottom.png</link></figure>
		</case>
	
	
</cases>
		</case>
		<case>
			<title>Label 
</title>
			<description>This is the label that appears over you grid. You can edit this at will and insert your own HTML directly into the property itself. The default text is 'Grid View'.  
</description>
		</case>
		<case>
			<title>Label in-line style 
</title>
			<description></description>
		</case>
		<case>
			<title>Show Main View 
</title>
			<description></description>
		</case>
		<case>
			<title>Initial view 
</title>
			<description>This is what a user will first see when they run your component. Clicking the button next to this property will reveal a drop-down with a list with your Main View and all of your Alternate Views. Simply, click to select which view you want to be the initial one.  
</description>
		</case>
		<case>
			<title>Has freeform template 
</title>
			<description>A freeform template is code that describes how an Alternate View and a Grid View fit on to the same Grid Part. If your grid is visible then you will need to check the Has freeform template property. When you do this the Freeform template property, where you can define a template, will appear in the Main View list.  
</description>
		</case>
		<case>
			<title>Freeform template 
</title>
			<description>Clicking the button [dot_img] next to the Freeform template property will open an Edit Freeform Layout dialog. Here you can use basic HTML to shape how your page looks. The Grid View and Alternate View(s) that you have created for this project appear in the Available Placeholders: list on the left-side of the dialog. By incorporating these placeholders into your HTML you can add whatever Alternate or Grid View you want to your final grid component. Simply double click on an Available Placeholder and it will be copied into your HTML work area.  
</description>
		</case>
		<case>
			<description>This property comes with two pre-defined templates that are displayed when you click the Pre-defined templates hyperlink at the bottom of the dialog. There are two options here, All Views laid out side-by-side and All views laid out vertically . All Views laid out side-by-side will inject HTML into the Edit Freeform Layout dialog that will make your Grid View and Alternate View appear next to one another horizontally. All Views laid out vertically will stack your Grid and Alternate Views on top of each other. The Grid and Alternate Views will appear from left to right or top to bottom in your final Grid Part in the same line-order that their respective Placeholders are added to your HTML code. If you want an Alternate View to appear to the left of a grid view in your final component, add the Alternate View placeholder to your HTML before you add the Grid placeholder.  
</description>
<cases>
	<case>
		
		<figure><link>images/01_AlternateViewfftemp2.png</link></figure>
		
	</case>
	<case>
		
		<figure><link>images/01_AlternateViewfftempl.png</link></figure>
		
	</case>
	<case>
		
		<figure><link>images/01_AlternateViewfftemp3.png</link></figure>
		
	</case>
	
</cases>
		</case>
		<case>
			<title>Grid part's freeform text </title>
			<description>When you build a grid part you have the option of creating freeform text. This is HTML that is displayed above, below, to the left, or to the right of the grid. It can include images, text, hyperlinks, and so forth. The Grid part's freeform text property lets you define whether you want this HTML to wrap around the Grid Part and the Alternate View (Using the WrapGridAndAlternateViews option) or simply display the freeform HTML  around the Grid Part only (Using the WrapGridPartOnly option).  
</description>
		</case>
		
	</cases>
	
	
	</section>	
	</sections>
</group>	
	
<group background="true">
	<sections>
	<section>
		<title>Alternate View Type </title>
		<description>There are three types of Alternate Views that you can add to your grid; Chart , Custom , and Google Map .  
</description>

	</section>	
	</sections>
</group>	
	
<group>
	<sections>
	<section>
		<title>Selecting an Alternate View:  
</title>
		<steps>
<step>
	<description>From the Web Projects Control Panel open the Grid Builder. On the Design tab open the Data Source page and choose either .dbf or SQL.  </description>
</step>			
<step>
	<description>Under Query(DBF) or Query(AlphaDAO) choose a table to connect to that contains fields that can be applied to an alternate view.  </description>
</step>	
<step>
	<description>On the Fields page move a number of fields from the Available fields: list into the Selected fields list. Select fields that can be used for your alternate view. For example if you are doing a map choose fields that contain records for Addresses, Cities, Latitudes, Longitudes, and/or Countries.  </description>
</step>				
<step>
	<description>On the Properties page find the Alternate View properties and check Has Alternate View property checkbox.  </description>
</step>	
<step>
	<description>Click the button [dot_img] next to the Alternate Views definition property. This will open the Alternate View Builder . At first you will see no properties  </description>
</step>	
<step>
	<description>On the Alternate Views tab click the Add Alternate View button.</description>
	<figure><link>images/01_AlternateView3.png</link></figure>
</step>			
<step>
	<description>The Add New Alternate View dialog will open. Click the Select button next to the Alternate View Type: box.

</description>
	<figure><link>images/01_AlternateView4.png</link></figure>
</step>	
<step>
	<description>This will open the Alternate View Type dialog. Select the Alternate View you want to use and click OK .

</description>
	<figure><link>images/01_AlternateView5.png</link></figure>
</step>				
<step>
	<description>You will see the Alternate View Type you selected appear in the Add New Alternate View dialog. Now type in an ID: and Label: for your Alternate View, these can be any string.</description>
	<figure><link>images/01_AlternateView6.png</link></figure>
</step>	
<step>
	<description>Click OK . Your selected Alternate View should appear in the Alternate View Builder's  Alternate Views: menu. You should also now see an Alternate View Properties list.</description>
		<figure><link>images/01_AlternateView7.png</link></figure>
</step>				
			
		</steps>
	</section>	
	</sections>
</group>	
	
<group background="true">
	<sections>
	<section>
		<title>Chart Alternate View </title>
		<description></description>
		
	</section>	
	</sections>
</group>	
	
<group background="true">
	<sections>
	<section>
		<title>Using The Google Charts API in Your Applications</title>
		<description>The Google Charts api is documented at: http://code.google.com . 
Google Charts is a free Google service that allows you to generate graphs as images by calling a web service. 
The example below shows how a call is made to the Google Charts service. The service returns binary data in the form of a PNG image. We then load the PNG data into an Alpha Five internal image with the ui_bitmap_png_load() function and finally display the image on an Xdialog. </description>
		<example><![CDATA[po = *url_object("http://chart.apis.google.com/chart?cht=p3&chd=t:60,20,20&chs=500x200&chl=Alpha Five|ASP.Net|PHP") ui_bitmap_png_load("tmp",po.content)
ui_dlg_box("Google Charts","{image=tmp}") ]]></example>
	</section>	
	<section>
		
		<description>This code produces this window: 
</description>
		<figure><link>../../../../Reference/Design/View/Chart/images/googlecharts1 (1).jpg</link></figure>
	</section>	
	</sections>
</group>	
	
<group background="true">
	<sections>
	<section>
		<title>Custom Alternate View </title>
		<description>The custom alternate Grid view allows you create expressions that will be processed from the data in the grid display and an Xbasic function to turn the arrays of expression values into an actual view. This is the infrastructure that allowed Alpha Software to turn a Google Map Component into a Google Map alternate view. 
</description>

	</section>	
	<section>
		<description>Before you define an alternate view, you need to know what you're defining. Once you've got your goal in mind, you can list the data you'll need to collect, and figure out how you'll process the data to display the alternate view. In many cases, you will want to use a predefined widget that has a JavaScript API, and you will generate the HTML to house the JavaScript widget as well as the JavaScript to add the collected data to the widget . 

</description>
	</section>
	</sections>
</group>	
	
<group>
	<sections>
	<section>
		<steps>
			<step>
				<description>The first step in defining the alternate view to Alpha Anywhere is to check Has Alternate View in the grid properties. 
</description>
			</step>
			<step>
				<description>In the Alternate View Builder, add an alternate view and select Custom for your Alternate View type .
</description>
<figure><link>images/01_AlternateViewCustom1.png</link></figure>
			</step>
			<step>
				<description>Click on the Xbasic function property 
</description>
			</step>
			<step>
				<description>The alternate view definition is a combination of one or more data expressions for collecting the data and an Xbasic function for processing the collected data.
</description>
<figure><link>images/01_AlternateViewCustom2.png</link></figure>
			</step>
			<step>
				<description>Once you type in the name of the Xbasic function you want to use, the "Show function prototype" link will be enabled. Click on that link and Alpha Anywhere will generate a commented prototype function for you.
</description>
<cases>
	<case>
		<figure><link>images/01_AlternateViewCustom3.png</link></figure>
		
	</case>
	<case>
		<figure><link>images/01_AlternateViewCustom4.png</link></figure>
		<note>It is worthwhile reading the prototype function carefully so that you can understand the flow of data in the alternate view.</note>
	</case>
	
	
</cases>
			</step>
			<step>
				<description>Click on the "Copy to clipboard" button, close the function prototype,
</description>
<figure><link>images/01_AlternateViewCustom5.png</link></figure>
			</step>
			<step>
				<description>click on "Open Xbasic Function Declarations",
</description>
				<figure><link>images/01_AlternateViewCustom6.png</link></figure>
			</step>
			<step>
				<description>and paste your function. You can edit your Xbasic function to generate the required HTML and JavaScript for your view.
</description>
				<figure><link>images/01_AlternateViewCustom7.png</link></figure>
			</step>
			<step>
				<description>It's a good idea to create sample data and a sample function call that you can use to test your function. When your function is working properly, you can comment out the sample data and sample function call.
</description>
			</step>
			<step>
				<description>You'll also have to create one or more data expressions.
</description>
			</step>
			<step>
				<description>The help screen shown below explains what is necessary. You can create data expressions, templates that include data expressions in curly brackets, and/or Xbasic functions to process the data for each row.
</description>
			</step>
			<step>
				<description>Data>Explain more about...
</description>
			</step>
		
		</steps>
	</section>	
	
	
	
	
	</sections>
</group>	
	
<group>
	<sections>
	<section>
		<title>Custom Alternate View Data.</title>
		<description>When the Grid is rendered, Alpha Anywhere performs these steps:
</description>
<steps>
	<step>
		<description>Execute a query to find records that satisfy the search criteria.</description>
	</step>
	<step>
		<description>Navigate to the correct starting record in the query (for example, if the Grid is showing 20 records per page, and you navigate to page 3, the starting record will be record number 41).</description>
	</step>
	<step>
		<description>Loop over the records in query, generating the HTML to show the Grid (This is called the 'Main Loop').</description>
	</step>
	<step>
		<description>The loop continues until you have generated the desired number of rows (based in the 'Rows per page' property), or you reach the last record in the query.</description>
	</step>
	<step>
		<description>While the Main Loop is executing, you can capture additional information from each record in the query.</description>
	</step>
	<step>
		<description>The way in which you specify what additional information you want to capture is by specifying one or more expressions that should be evaluated in the Main Loop.</description>
	</step>
	<step>
		<description>The expressions are evaluated, and the expression results are placed into arrays (called 'value arrays'). There will be one value array for each expression that you specify. Each value array will have one entry for each row that is displayed in the Grid. So, for example, if the Grid is set to display 20 rows per page, each array will have 20 entries.
</description>
	</step>
	<step>
		<description>Once the Main Loop has completed, the Xbasic function that you specified for the Alternate View is called and the value arrays are passed into the Xbasic function. The Xbasic function can then use the data in the value arrays to compute the HTML to display in the Alternate View.</description>
	</step>
	<step>
		<description>When you specify the expressions that you want to evaluate, you can define two types of expressions:</description>
<cases>
	<case>
		<description>Regular Xbasic expressions. Use this syntax to reference a field value in the query: tbl.data("fieldname")</description>
	</case>
	<case>
		<description>Templates. The template is a text string that can include Xbasic expressions. For example: {tbl.data("fieldname")}. The data enclosed in the curly brackets can be any Xbasic expression.</description>
	</case>
	
	
</cases>
	
	</step>
	<step>
		<description>Function. Specify the name of an Xbasic function that will return the value you want to capture. The function prototype will be: YourFunctionName (e)</description>
	</step>
	<step>
		<description>custom alternate view definition > Add expression > Help on how to specify exp.
</description>
	</step>
	
	
	
</steps>
	</section>	
	</sections>
</group>	
	
<group background="true">
	<sections>
	<section>
		<title>Alternate View expressions</title>
		<description>Alternate View expressionsare written in Xbasic. Your expression will typically need to reference field values from the Grid query. To reference a field value in the current Grid query, i.e. data from the row, use this syntax: </description>
<example><![CDATA[tbl.data("fieldname") 
]]></example>
	</section>
	<section>
		<note>The field value that you read using the above syntax is correctly typed. For example, it will be a character, numeric, time, date, etc. value.</note>
	</section>	
	<section>
		<description>Here are some example expressions:</description>
		<example><![CDATA[tbl.data("firstname") + ", " + tbl.data("lastname")
upper(tbl.data("lastname"))
time ("Mon dd yyy", tbl.data("orderDate"))
"User Name:" + upper(tbl.data("lastname"))
]]></example>
		
	</section>
	<section>
		<description>If you decide to create one or more Xbasic functions to process row data, you can generate function prototypes for them. 
</description>
		<figure><link>images/data_collector_function_prototype.png</link></figure>
		
	</section>
	
	</sections>
</group>	
	
<group background="true">
	<sections>
	<section>
		<title>Google Maps (Alternate View) </title>
		<cases>
			<case>
				<title>Expression</title>
				<description>You can enter any valid Xbasic expression. Your expression will typically need to reference field values from the Grid query. To reference a field value in the current Grid query, you use this syntax:</description>
				<example><![CDATA[tbl.data("fieldname") ]]></example>
				<note>The field value that you read using the above syntax is correctly typed. For example, it will be a character, numeric, time, date, etc. </note>
			</case>
			<case>
				
				<description>Here are some example expressions: </description>
				<example><![CDATA[tbl. data("firstname") + "," + tbl.data("lastname")  
upper(tbl.data("lastname"))  
time("MON dd yyy", tbl.data("orderData"))  
"User Name:" + upper(tbl.data("lastname"))  
 ]]></example>
				
			</case>
			</cases>
			
			
			
			
				
			
	</section>	
	</sections>
</group>	
	
<group>
	<sections>
	<section>
		
				<title>Find Marker Icons on Google  </title>
				<description>Google has a large collection of special-purpose, free, marker Icons that you can use on your map.  </description>

<steps>
	<step>
		<description>For example, to use this icon in you map: </description>
		<figure><link>images/01_AlternateView.png</link></figure>	
	</step>
	<step>
		<description>You would simply specify the image as: http://google-maps-icons.googlecode.com/files/tea100.png   
</description>

	</step>
	<step>
		<description>To find the full collection of Google Map Markers, please navigate to this URL:  
http://code.google/p/google-maps-icons/wiki/ 

</description>
	</step>
	<step>
		<description>Once you find an icon that you want to use, simply right click on it and select the 'Copy URL' menu item as it occurs in some Browsers, or the 'Properties' menu item in Internet Explorer and copy the icon URL to the clipboard. 
</description>
	</step>
	<step>
		<description>Then choose the alternate view and edit its properties. Here are the properties for a Map alternate view:  
</description>
	</step>
	<step>
		<description>Add and Address expression
</description>
<figure><link>images/01_AlternateView8.png</link></figure>
	</step>
	<step>
		<description>Add an Info Box expression  </description>
	</step>
	<step>
		<description>In the main view properties, you can choose how the views are organized. The options include tabs and accordions in addition to showing all views.  
</description>
	</step>
	<step>
		<description>If you don't want to limit the alternate view to the typical small size of a tabular grid page, you can set the grid's Rows of data when search active to 0, and then set the maximum number of rows per page to a larger but reasonable number. In this case we have chosen 200 points.  
</description>
<figure><link>http://documentation.alphasoftware.com/help/Server/Guide/Design/View/Grid/Web Grid/images/max_rows_per_page.png</link></figure>
	</step>
	<step>
		<description>With these settings, the map alternate view will only show 10 markers before a search, and will show a maximum of 200 markers after a search. So, for example, after searching for airports in Massachusetts, the alternate map view shows all 67 Massachusetts airports.  </description>
		<figure><link>http://documentation.alphasoftware.com/help/Server/Guide/Design/View/Grid/Web Grid/images/67_airports_in_ma.png</link></figure>
	</step>
	
</steps>


	</section>	
	</sections>
</group>	




<group>
	<sections>
	<section>
		<title>Grid Component - Dynamic Images - Image Sequences</title>
		<description>When you put a dynamic image field in the Grid you can now use 'image sequences'. This is particularly useful when used in conjunction with the Google Map alternate view. 
For example, the screen shot below shows a Google Map that is using image sequences for the markers on the map and the dynamic image in the Grid uses the same image sequence. 
Selecting an image sequence is easy. See the screenshots below. 
</description>
		<figure><link>Grid Component/images/image_sequence.png</link></figure>
	</section>	
	<section>
		<description>The screen below shows a new option in the builder for the Image control on a Grid. To use an image sequence, you simply check the box. 
</description>
		<figure><link>Grid Component/images/imagesequencesinbuilder.jpg</link></figure>
	</section>	
	<section>
		<description>To select an image sequence, click the Select button. The image below shows the built-in image sequences. 
</description>
		<figure><link>Grid Component/images/selectimagesequence.jpg</link></figure>
	</section>	
	</sections>
</group>		
	
	
	
<group background="true">
	<sections>
	<section>
		<title>Alternate Views - Introduction</title>
		<description>Grids have a property called 'Alternate Views'. An Alternate View is simply another way of displaying the data in the Grid. You can define custom Alternate View (using Xbasic), or you can use one of the built-in Alternate Views. The most commonly used built-in Alternate View is a Google Map. This is used to plot the data displayed in the Grid as markers on a Google Map. The following videos show how you can use the Google Map Alternate View in a Grid.  
This video show:  
</description>
<steps>
	<step>
		<description>Defining an Alternate View with a Google Map and showing a marker on the map for each record in the Grid. </description>
	</step>
	<step>
		<description>Defining the bubble help for each marker on the Grid so that it shows data from the corresponding record in the Grid.  </description>
	</step>
	
</steps>
	</section>	
	<section>
		<videos>
			<video>
				<name>Watch Video GM1</name>
				<description>http://www.ajaxvideotutorials.com/V11Videos/GoogleMapping_1.swf</description>
			</video>
			
		</videos>
		
	</section>
	<section>
		<description>http://downloads.alphasoftware.com/a5v11download/airport.zip  
</description>
	</section>
	</sections>
</group>	
<group>
	<sections>
	<section>
		
		<description>New mapping features . grid based on table that has all of the airports in the United States. Have latitude and longitude of the airport. Map of US with a marker on the grid for each airport
Can do a search on California, look at the map, see all the airports listed on the first page of the grid.
</description>
	
	</section>	
	<section>
		<description>Grid with a detail view that pops up in a popup modal window. In order to turn on the map, we will go to Alternate Views. Turn on Has Alternate Views, bring up Alternate View Builder. Select Google Map Alternate View. Give it ID and A Label. Can define properties of this map. Define type, can be address or location (if you have lat and long) If you have address for some lat and long for others you can use the auto feature. Google places no limits on pw many callbacks you can make for latitude and longitude but you can't do this with addresses. Choose location, then specify which field in the table contains latitude and which field contains the longitude and place these next to the latitude and longitude expression properties, Then define the title expression</description>
	</section>
	</sections>
</group>		
	
	
<group background="true">
	<sections>
	<section>
		<title>Customizing the Marker Title and Info Box GM2 </title>
		<description>This video continues from video GM1. The video shows how you can customize the 'info box' for each marker on the map. The 'info box' is a small window that pops up when the user clicks on a marker.  
The video shows how you can put any HTML that you want in the info box and how the html can include placeholders to include data from the corresponding row in the Grid. The HTML can also include Javascript commands. In the video we show how you can insert the Javascript to open the corresponding Detail View part for the current record.  
</description>
<videos>
	<video>
		<name>Watch Video</name>
		<link>http://www.ajaxvideotutorials.com/V11Videos/GoogleMapping_2.swf</link>
	</video>
	
	
</videos>
	</section>	
	</sections>
</group>	
<group>
	<sections>
	<section>
<steps>
	<step>
		<description>Define the titles. Smart field = name of airport the city and then the state</description>
	<example><![CDATA[tbl.data("NAME") + " (" + tbl.data("CITY") + ", " + tbl.data("STATE") + ")"]]></example>
	</step>
	<step>
		<description>Can now see the name of the airport and the city and state in parens. Now when I click on the icon I want bubble help to open up.
</description>
	</step>
	<step>
		<description>Can define an expression that returns the text we would like to appear. We can also do a template. A template is any HTML text that you want to put into the info box. And the template can include placeholders for field values in the current row.
</description>
<example><![CDATA[Airport location: {}]]></example>
	</step>
	<step>
		<description>want to add fields, any thing placed inside the placeholder will be an expression
</description>
<example><![CDATA[Airport location: {tbl.data("NAME") + "in" + tbl.data("CITY") + ", " +tbl.data("STATE") }.
]]></example>
	</step>
	<step>
		<description>add Hyperlink that allows us to open a detail view for this record.
</description>
<example><![CDATA[Airport location: {tbl.data("NAME") + "in" + tbl.data("CITY") + ", " +tbl.data("STATE") }.
]]></example>
	</step>
	
	<step>
		<description>Copy this to clipboard and switch to template. Paste in template and add some javascript
</description>
<example><![CDATA[Airport location: {tbl.data("NAME") + "in" + tbl.data("CITY") + ", " +tbl.data("STATE") }.
]]></example>
	</step>
	<step>
		<description>Click Insert Method. search for {grid.Object}detailview(rowNumber).
</description>
<example><![CDATA[Airport location: {tbl.data("NAME") + "in" + tbl.data("CITY") + ", " +tbl.data("STATE") }.
]]></example>
	</step>
	<step>
		<description>Replace Rownumber with rownumber placeholder
</description>
<example><![CDATA[{tbl.data("NAME") + "in" + tbl.data("CITY") + ", " +tbl.data("STATE") }.
]]></example>
	</step>
	<step>
		<description>Save and run. Put mouse over marker, see pop-up bubble help, click on icon, see bubble text. Click on hyperlink, see detail view.
</description>
	</step>
	
	
	
</steps>
	</section>	
	</sections>
</group>		
	
	
<group background="true">
	<sections>
	<section>
		<title>Alternate View - Dynamic Marker Icons-Alternate View Layout Options GM3 
</title>
		<description>This video continues from GM2. The video shows how the icon for each marker that is placed on the map can be dynamically specified. So, for example, if record 1 in the Grid was for a customer with a low credit rating, the corresponding icon on the map might be red. If record 2 was for a customer with a high credit rating, the corresponding icon on the map might be green.  
In the video we have a Grid based on our sample Airports table and we show how a different map icon is used depending on the elevation of each airport shown in the Grid.  
The video also discusses the different ways in which the Alternate Views can be shown on the Grid. Alternate Views can be shown in Tabs, or they can be shown on the main page, alongside the main Grid.  
</description>
<videos>
	<video>
		<name>Watch Video</name>
		<link>http://www.ajaxvideotutorials.com/V11Videos/GoogleMapping_3.swf</link>
	</video>
	
	
</videos>
	</section>	
	</sections>
</group>	
<group>
	<sections>
	<section>
		
		<description>Mapping features. Dynamically changing the icon used for each point on the map. If you look at the data. Have elevation for each airport. Want one color icon for airports below 1000 feet and then another icon for airports between 1000-3000 feet. And another colored icon for airports that are above 5000 feet. This is not particularly practical. Can use this however, show expense of houses for sale. Show customers who have spent more than a certain amount, one color marker.
Marker icons property. Dynamic Map Marker Images. Here is code, imports
imported image.
</description>
		<example><![CDATA[tbl.data("ELEVATION") < 1000| http://googlecode.com/files/tea100.png 
tbl.data("ELEVATION") >= 1000 .and. tbl.data("ELEVATION") < 3000| http://googlecode.com/files/yellow01.png 
tbl.data("ELEVATION") >= 3000| http://googlecode.com/files/green02.png ]]></example>
	</section>	
	<section>
		<description>Save. Click OK. Now have color coded map locations layout of  alternate views. Can be displayed any way you want. Change mode from Selectable to All Visible. Can specify how the grid and the alternate view are laid out. Lay all views  side-by-side
</description>
		
	</section>
	
	
	</sections>
</group>		
	
	
<group background="true">
	<sections>
	<section>
		<title>More Alternate View Layout Options GM4</title>
		<description>This video continues from GM3. The video shows more options for how the Alternate Views and the main Grid can be displayed on the page. It shows how you can display the Alternate Views in accordions, tabs or on the main page.  
The video shows how you can even suppress the display of the main Grid part and only show the Alternate view.  
In the video, we show the map, with a marker for each row in the Grid. The Grid itself is hidden. However, when the user clicks on a marker, the Detail View for the current row in the (hidden) Grid is shown.  
</description>
<videos>
	<video>
		<name>Watch Video  </name>
		<link>http://www.ajaxvideotutorials.com/V11Videos/GoogleMapping_4.swf</link>
	</video>
	
	
</videos>
	</section>	
	</sections>
</group>	
<group>
	<sections>
	<section>
		
		<description>Mapping features. Working preview. Grid part and Alternate View on the same page, all visible. Add a Search Part. Add a state field. Can see what elevation airports are on in different states. If you want, when you design your alternate views you could even turn off the grid part itself so that you only have the map and the detail view that you get to by clicking on the info box.

If you don't want the Main view to be shown simply pull it out of the freeform template.
Set accordion view in Main
</description>
	
	</section>	
	</sections>
</group>		
	
	
<group background="true">
	<sections>
	<section>
		<title>Dynamic Marker Circles GM5 </title>
		<description>When you place a marker on a map you have control over the marker icon, bubble help and info box text. You can also draw a circle around the marker and you can control the color of the circle and the shading of the interior of the circle. The circle and its color can be used to convey information about the corresponding record in the Grid. The ability to draw a circle around the marker could be used to indicate the service area of a branch location. Or it might be used to represent the relative price of a house in a real estate application. For example,for more expensive houses you might draw a larger circle around the marker on the map. In this video, which shows a Grid based on the sample Airports database, we draw a circle around each marker on the map. The radius of the circle is proportional to the airport's elevation.  
</description>
		<videos>
			<video>
				<name>Watch Video  
</name>
				<link>http://www.ajaxvideotutorials.com/V11Videos/GoogleMapping_DrawingDynamicCirclesAroundMarkers.swf</link>
				
			</video>
			
			
		</videos>
	</section>	
	</sections>
</group>	
<group>
	<sections>
	<section>
		
		<description>Alternate Views can put a circle around markers that you place on a map and control the radius, fill color, and opacity of the circle dynamically. 
Map showing the location of airports in Massachusetts. Have circle showing elevation of the airport. A more useful example might be branch location of offices with a circle around each marker indicating the service radius of the branch.
 Such that all the points within the circle would be within the service area of that branch office. Go to alternate view definition. Open builder. Draw circle around marker.
Take elevation in meters divide that by 50 and convert that into miles -
</description>
		<example><![CDATA["" + (tbl.data("Elevation")/50) + "mi"
]]></example>
	</section>	
	<section>
		<description>Radius expression. In addition you can set stroke color of line around the circle. Most powerful option is to be able to call into an xbasic function where you can write code that is very elaborate to actually determine what the value of the opacity or color should be for the marker on the current map.

</description>
	</section>
	</sections>
</group>		
	
	
<group background="true">
	<sections>
	<section>
		<title>Dynamic Images and Image Sequences GM6 </title>
		<description>When you place a marker on a Google Map, you have full control over the icon that is used. You can specify an expression that evaluates to the icon name to use for the marker. Or, you can specify an Xbasic function that will get called for each row in the Grid. The function can compute the marker icon based on the data in the current Grid row.  
You can also use built in image sequences. An image sequence is a set of numbered icons.  
In this video we show how you can use an image sequence in the map and also use the same sequence in the Grid itself. This makes it very easy for the user to see a record in the Grid and immediately locate the corresponding marker on the map.  
</description>
		<videos>
			<video>
				<name>Watch Video  </name>
				<link>http://www.ajaxvideotutorials.com/V11Videos/GoogleMapping_MapMarkerIcons.swf</link>
			</video>
			
			
		</videos>
	</section>	
	</sections>
</group>	
<group>
	<sections>
	<section>
		
		<description>Use image sequences for the markers on your map. Here we have a google map and we are showing markers for all of the airports. using default for each marker.
Dynamic Map Marker Image dialog. Click on Built-in Image Sequence.
Image sequences dialog appears. Select one
Alternatively we could write an xbasic expression. could compute which icon to use. could be an image for a hospital or a library, ect...
Look at map, should now see numbered icons.
Make this easy to reference from grid. Insert image control into Fields in grid. Under image definition property in Fields. specify image sequence, use same image sequence as the map itself. Can now see where things are located very easily since they have corresponding numbers.
</description>

	</section>	
	</sections>
</group>		
	
	
<group background="true">
	<sections>
	<section>
		<title>Google Maps - Layers GM7 </title>
		<description>When you place a marker on a Google Map you can assign the marker a logical 'layer' name. For example the layer name for a marker could be 'High Risk', or 'Medium Risk', etc. Then using the automation features on the map that Alpha exposes, you can hide and show different layers on the map. For example, you might put a checkbox control on your Grid with these entries: High risk, Medium risk and Low risk. Then when the user checked or unchecked an entry, your Javascript automation code could hide or show the markers in the corresponding map layer.  

In this video we show how we have defined a map with 3 logical layers= - 'layer1', 'layer2' and 'layer3'. When each marker is placed on the map is is assigned to one of these layers. In the example, the rule for assigning a marker to a particular layer is contrived - if the marker is for a record in the first 3 rows of the Grid, it is in 'level1', and so on. Obviously, in a real application you would have more realistic rules for assigning markers to different map layers. Then, we put a checkbox control in a free-form region of the grid to control which layers as shown. We also show how the markers in a particular layer can be animated to draw attention to them.  
</description>
		<videos>
			<video>
				<name>Watch Video 1  
</name>
				<link>http://www.ajaxvideotutorials.com/V11Videos/GoogleMapping_MapLayers1</link>
			</video>
			<video>
				<name>Watch Video 2  
</name>
				<link>http://www.ajaxvideotutorials.com/V11Videos/GoogleMapping_MapLayers2</link>
			</video>
			<video>
				<name>Watch Video 3  
</name>
				<link>http://www.ajaxvideotutorials.com/V11Videos/GoogleMapping_MapLayers3</link>
			</video>
			
			
		</videos>
	</section>	
	</sections>
</group>	
<group>
	<sections>
	<section>
		
		<description>Layering functionality. common feature in mapping applications, assigning layer name to a marker on a map. Ex. Icons in first three rows, layer number 1, next three rows layer number 2. Last four layer number 3. Turn on and off layers using checkboxes. Assign layers to different catagories, good customers/bad customers. Alternate view definition. Defined in Edit Expression dialog. build xbasic function.
</description>
		<example><![CDATA[function layerName as c (e as p)

if e.rowNumber <= 3 then
    layerName = "layer1"
else if e.rowNumber > 3 .and. e.rowNumber <=6 then
    layerName = "layer2"
else
    layerName = "layer3"
end if

end function
]]></example>

	</section>	
<section>
<description>Adding Javascript, video 2.

How you can show or hide Icons on a layer map? Google map method Map Id Alternate View:MAP
view Xbasic. Javascript function that calls another javascript function
</description>	
	<example><![CDATA[window['{grid.componentName}_G_UNBOUND_BUTTON_1_1'] = function(rowNum,rowId,objEle) {
{grid.object}.googleMap_MAP.hideLayer('layer1');
}
]]></example>
	
</section>	

<section>
	<steps>
		<step>
			<description>Copy this to clipboard</description>
			<example><![CDATA[{grid.object}.googleMap_MAP.hideLayer('layer1');]]></example>
		</step>
		<step>
			<description>Go to Freeform edit region
</description>
			<example><![CDATA[Available Placeholders {ActionButton:BOUNCE1} {ActionButton:BOUNCE2} {ActionButton:BOUNCE3}
]]></example>
		</step>
		<step>
			<description>Select map layers to show:</description>
			<cases>
				<case>
					<title>Layer1</title>
					
				</case>
				<case>
					<title>Layer2</title>
					
				</case>
				<case>
					<title>Layer3</title>
					
				</case>
				<case>
					<example><![CDATA[{ActionButton:BOUNCE1}{ActionButton:BOUNCE2}{ActionButton:BOUNCE3}]]></example>
				</case>
				
			</cases>
		</step>
		<step>
			<description>Javascript Function</description>
			<example><![CDATA[function showLayers(names) {
    {grid.object}.googleMap_MAP.hideLayer('layer1');
    {grid.object}.googleMap_MAP.hideLayer('layer2');
    {grid.object}.googleMap_MAP.hideLayer('layer3');

    for(var i=0;i < names.length; i++) {
        {grid.object}.googleMap_MAP.showLayer(names[i].toLowerCase());
    }
}]]></example>
		</step>
		<step>
			<description>Can cause icons to bounce

Properties, freeform area
Video 3.

Button Action: Javascript click button...Google Map Method
Action: Bounce markers on a layer method
Bounce numbers on Layer Number 1. For duration of 2 seconds.

All that is required. Assigning layers to the markers that you place on icons can be very powerful.
</description>
		</step>
		
		
	</steps>
	
	
</section>
	
	
	</sections>
</group>		
	
	
<group background="true">
	<sections>
	<section>
		<title>Google Maps, Animating Markers GM8 
</title>
		<description>When markers are placed on a Google Map, you can specify that the markers should be animated as they are placed on the map. Two animation modes are supported: Drop and Bounce. The video shows how to use the animation effects.  
You can also use the Action Javascript to animate a marker after it has been placed on a map to draw attention to it. For example, you could click on a Grid row and cause the corresponding marker on the map to bounce.  
</description>
		<videos>
			<video>
				<name>Watch Video 1  
</name>
				<link>http://www.ajaxvideotutorials.com/V11Videos/GoogleMapping_AnimatingMarkers.swf</link>
			</video>
					<video>
				<name>Watch Video 2  
</name>
				<link>http://www.ajaxvideotutorials.com/V11Videos/GoogleMapping_DrawingAttentionToAMarker.swf</link>
			</video>
			
			
			
		</videos>
	</section>	
	</sections>
</group>	
<group>
	<sections>
	<section>
		
		<description>Animation effects when the markers are placed on google maps. Design view. Alternate view Builder . Animation...Bounce, Drop gives the map a nice visual effect.
Video 2. Use the automation features to automate aspects of the map. Here we have a grid that is showing markers for all of the rows in the grid. Also have a button in the grid called show on map. When you click this button the corresponding marker on the map starts to bounce.
Edit Google Map method. Set Map ID. Action. Bounce a Marker for 2 seconds. Marker Index: Current Row. Animation method bounce as opposed to drop.
</description>
	
	</section>	
	</sections>
</group>		
	
	
<group background="true">
	<sections>
	<section>
		<title>Treating the Map as a Blank Canvas so that Markers on the Map can be Added Programmatically GM9 </title>
		<description>In the previous videos, the markers on the map have been added automatically. For each record in the Grid, a corresponding marker has been placed on the Map. However, you can specify that there should be no markers on the map initially. You would do this if you want to add the marker to the map with your own code. This video shows how you can turn off the automatic placement of markers on the map and then use Action Javascript to add markers to the map programmatically.  
The video shows a Grid with a list of states. Each row in the Grid has a button to populate the map with the 10 airports in the state with the highest elevation. When you click a button in the Grid row, an Ajax callback is made to place the markers on the map.  
</description>
<videos>
	<video>
		<name>Watch Video 1  
</name>
		<link>http://www.ajaxvideotutorials.com/V11Videos/GoogleMapping_AddingMarkersUsingAjax_1.swf</link>
	</video>
	<video>
		<name>Watch Video 2  
</name>
		<link>http://www.ajaxvideotutorials.com/V11Videos/GoogleMapping_AddingMarkersUsingAjax_2.swf</link>
	</video>
	<video>
		<name>Watch Video 3  
</name>
		<link>http://www.ajaxvideotutorials.com/V11Videos/GoogleMapping_AddingMarkersUsingAjax_3.swf</link>
	</video>
	
	
	
</videos>
	</section>	
	</sections>
</group>	



<group>
	<sections>
		
	<section>
		
		<description><![CDATA[How you can treat the google map in the alternate view as a blank canvas. A marker has been placed on the row automatically for each row on the grid. Show top 10 highest airports.
Alternate View. PLace Markers on map property has been turned off. Do that so you can place all of the markers on the map yourself programatically.

No icons on the map. When you press button, ajax callback. Go to fields, place new button. do onclick event under Javascript. Add a google Map method from list of actions

Choose Map Id of Map you want to talk to, alternate view map
Action. Action Javascript. Clear all markers, Add markers to the map, close all infoboxes. Add markers to map is the most powerful of actions because it lets you add markers to the map using an Ajax Callback, or add local data to the map using local data that is already on the grid via Javascript.

Video2 How to write the Ajax Callback Function------------
Definition of button...Edit Action...Show Function Prototype. Callback needs to set properties in an array. Calls placeMarkers. What happens inside this placeMarkers? Go to working preview click on button for Co.

Xbasic function placeMarkers. Comment describes what your ajax callback needs to do.
Xbasic Functions]]></description>
		
	</section>	
	
	<section>
	<title>Examples</title>
	<description>Getting a SQL Connection object.  </description>
	<example><![CDATA[function placeMarkers as c(e as p) 
dim cn as sql::Connection 
]]></example>
	
</section>	

<section>
	<description></description>
	<example><![CDATA[dim cs as c 
cs=="::Name::Airports" 
 ]]></example>
</section>	


<section>
	<description>State value. Colorado. </description>
	<example><![CDATA[dim state as c 
state = e._currentRowDataNew.STATE 
]]></example>
</section>	

<section>
	<description>Select all fields from airports where state equals x.</description>
	<example><![CDATA[dim sql as c 
sql = "select* from us_airports where state = :state order by elevation desc" 
dim args as sql::arguments 
args.add("state",state) 
 ]]></example>
</section>	

<section>
	<description>Resulting set from Query</description>
	<example><![CDATA[dim flag as c 
flag = cn.open(cs) 
if flag = .f then 
placeMarkers = "alert('could not open connection to database');" 
exit function 
end if 
dim rs as sql::ResultSet  ]]></example>
</section>	

<section>
	<description>If there are no records in the query...</description>
	<example><![CDATA[dim rs as sql::ResultSet 

rs = cn.ResultSet 
flag = rs.nextRow() 
if flag = .f. then 
placeMarkers = "alert('no records in query');" 
exit function 
end if 
]]></example></section>	

<section>
	<description>Set this array and set these properties in the array. All of these are defined in the prototype. 
</description>
	<example><![CDATA[dim count as n = 1 
while flag 
e.markers[].type = "coord" 
e.markers[].lat = rs.data("latitude") 
e.markers[].lon = rs.data("longitude") 
e.markers[].title = rs.data("name") 
e.markers[].infotext = "Airport Information
Name:" + rs.data("name") + "
Elevation:" + rs.data("elevation") 
e.markers[].icon = "http://maps.google.com/mapfiles/marker_green.png" 
e.markers[].animation = 1 
e.markers[].duration = 3 
flag = rs.NextRow() 
count = count + 1                                                                          
if count > 10 then 
exit while 
end if 
 ]]></example>
</section>	

<section>
<description>Animation is bounce</description>
<example><![CDATA[e.markers[].animation = 1  ]]></example>
</section>	

<section>
<description>Move to the next row in the result set. 
Increment counter by 1, if the counter is above ten then bail out of the loop. </description>
<example><![CDATA[flag = rs.NextRow() 
count = count + 1                                                                          
if count > 10 then 
exit while  ]]></example>
</section>	

<section>
	<description>Clear out existing markers. Recenter map on new markers. </description>
	<example><![CDATA[e.flagClearOldMarkers = .t. 
e.flagRecentMapNew = .t. 
e.flagRecentMap ]]></example>
</section>	

<section>
	<description>Free the connection result set. Close the connection down. </description>
	<example><![CDATA[cn.FreeResult() 
delete rs 
cn.close()]]></example>
</section>	
	
	<section>
<title>Complete Example</title>
<example><![CDATA[function placeMarkers as c(e as p) 
dim cn as sql::Connection 
dim cs as c 
cs=="::Name::Airports" 
dim state as c 
state = e._currentRowDataNew.STATE 
dim sql as c 
sql = "select* from us_airports where state = :state order by elevation desc" 
dim args as sql::arguments 
args.add("state",state) 
dim flag as c 
flag = cn.open(cs) 
if flag = .f then 
placeMarkers = "alert('could not open connection to database');" 
exit function 
end if 
dim rs as sql::ResultSet 

rs = cn.ResultSet 
flag = rs.nextRow() 
if flag = .f. then 
placeMarkers = "alert('no records in query');" 
exit function 
end if 
dim count as n = 1 
while flag 
e.markers[].type = "coord" 
e.markers[].lat = rs.data("latitude") 
e.markers[].lon = rs.data("longitude") 
e.markers[].title = rs.data("name") 
e.markers[].infotext = "Airport Information
Name:" + rs.data("name") + "
Elevation:" + rs.data("elevation") 
e.markers[].icon = "http://maps.google.com/mapfiles/marker_green.png" 
e.markers[].animation = 1 
e.markers[].duration = 3 
flag = rs.NextRow() 
count = count + 1                                                                          
if count > 10 then 
exit while 
end if 
end while 
e.flagClearOldMarkers = .t. 
e.flagRecentMapNew = .t. 
e.flagRecentMap 
cn.FreeResult() 
delete rs 
cn.close()    
]]></example>
</section>
</sections>
</group>		

<group background="true">
	<sections>
	<section>
<title>Search Part, Geography Searches, Google Maps GM10 </title>
<description>Certain SQL databases (such as SQL Server, Oracle, DB2, MySQL, Postgres) support a special data type called 'Location'. If a table has a location field (which contains information about a record's position - latitude and longitude), then you can perform 'geography' searches. For example, you can find all records that are within x miles of a certain location, or all records that fall within an area marked by the latitude and longitude of 3 or more points.  

You can put a Google Map in the Search part of the Grid to make specifying geography searches easy.  
This video shows how you can put a Google Map into the Search Part and how Alpha Anywhere automatically generates the Portable SQL to query the database. The video demonstrates both 'location' and 'radius' searches.  
</description>
<videos>
	<video>
		<name>Watch Video - Part 1  </name>
		<link>http://www.ajaxvideotutorials.com/V11Videos/GeographySearches_Part1.swf</link>
	</video>
</videos>
	</section>	
	</sections>
</group>	



	
<group>
	<sections>
	<section>
		
		<description>Geography Search features. Location is a special SQL server type. Latitude and Longitude derived from Location field. Search Part on grid. Location field is configured as a map. Location field on the search part. Field properties> Control type set to map. When smart field is brought up can change map properties. User can do two types of searched. Polygon, Radius, Polygon and Radius searches. Map center Address. Bunch of other formatting options
Pull out polygon and click Search button. Creates polygon using markers. Can also use radius. can tell you how many airports fall within the radius of your marker.
</description>
		
	</section>	
	</sections>
</group>		

<group background="true">
	<sections>
	<section>
		<title>Search Part, Google Maps, Show Search Results on Screen - GM11 
</title>
		<description>This video continues from GM10. When you have a Google Map in the Search Part of a Grid you can use the Map to mark a search polygon or radius, as shown in the previous video. However, you can also display markers on the map to show the location of the records found by the search. In this video we show how the search results can be plotted on the map. A marker is placed on the map for each record found by the search.  

The video shows how you can customize the bubble help, title and info box for each marker that is placed on the map.  
The video also shows how the click action for each marker can be customized - you can use a built-in action, such as 'open Detail View', or you can define your own Javascript.  
</description>
<videos>
<video>
	<name>Watch Video - Part 2  
</name>
	<link>http://www.ajaxvideotutorials.com/V11Videos/GeographySearches_Part2.swf</link>
</video>	
<video>
	<name>Watch Video - Part 3  
</name>
	<link>http://www.ajaxvideotutorials.com/V11Videos/GeographySearches_Part3.swf</link>
</video>	
</videos>	
	
	
	
	</section>	
	</sections>
</group>		
<group>
	<sections>
	<section>
		
		<description>Can type in any address that you want to center a map on.
Map properties. Click on Show search results on map. Can use any icon you want Marker icons. Can be dynamic, in which case you'll specify an expression to use the marker icon.
Here using a sequence

How the bubble help will be populated
Marker info

Edit Expression click template.

This is important
</description>
		<example><![CDATA[This is the airport for {tbl.data("Name") + " " + tbl.data("City")}
]]></example>
	</section>	
	
		<section>
		
		<description>Latitude and Longitude of marker
Go to preview. Mark a polygon on the screen. Click search. 13 records found. Each airport shows up as a marker on the map itself.
Here defined bubble help. Ability to display search results on map. Alternative to using the Alternate View
</description>
		
	</section>	
	
		<section>
		
		<description>In the map properties, changed the action for what happens when you click on the marker from the default info box to a detail view. Mark a polygon you want to search. Click search. click on an icon. will see the detail view for that marker
</description>
		
	</section>	
	
	
		<section>
		
		<description>Resize polygon. Only see 10 markers on first page of grid. Turn Rows of data when search active from -1 to 0. Should now be able to see more than 10 records. Can now see all records, still open detail view.
</description>
		
	</section>	
	
		<section>
		
		<description>Map definition > Map properties. Can custom action, arbitrary javascript. Have access to all of the system variables still.
Can see Javascript pop-up when you click on a marker.
</description>
		
	</section>	
	<section>
		<description>dynamic images in the actual grid row.
image control in fields in Image definition choose an image sequence.
</description>
	</section>
	</sections>
</group>		


<group background="true">
	<sections>
	<section>
		<title>Search Part - Radius Search - Sorting result by distance from the map center point. GM12</title>
		<description>When you do a radius search (i.e. find all records with a certain distance of a map center point), it can be useful to order the records by distance from the map center point. This video shows how this is easily done.  
</description>
		<videos>
			<video>
				<name>Watch Video  </name>
				<link>http://www.ajaxvideotutorials.com/V11Videos/GeographySearch_OrderByDistanceFromCenterPoint.swf</link>
			</video>
			
			
		</videos>
	</section>	
	</sections>
</group>		
<group>
	<sections>
	<section>
		
		<description>How the google maps can do radius search and automatically order data. 20 mile radius search. Nice if the results were ordered in ascending or descending order by distance from the center point.
Search properties sort radius search by distance from center point.

In the SQL Query, added new virtual field. in Query(AlphaDAO) SQL Statement
</description>
	<example><![CDATA[SELECT* ,'*distanceFromCenterPoint' as distance
FROM US_Airports
]]></example>
	</section>	
	<section>
		<description>Now when you click search Distance field to set distance from marker, goes from blank to filled
Just simple click in property sheet.
</description>
	</section>
	</sections>
</group>		


<group background="true">
	<sections>
	<section>
		<title>How to use a Grid to implement a typical 'Store Finder' application. GM13 
</title>
		<description>A typical pattern often seen in web applications is a 'store finder' The user enters his location and clicks a button and a list of store branches that are closest to his location is retrieved.  In this video we show how this type of application is easily built using a Grid component with a Search Part.  
</description>
		<note>To get a complete summary of how the Grid was configured for this example, see below.  </note>
	</section>	
<section>
	<videos>
		<video>
			<name>Watch Video - Part 1  
</name>
			<link>http://www.ajaxvideotutorials.com/V11Videos/StoreFinderGrid_Part1.swf</link>
		</video>
		<video>
			<name>Watch Video - Part 2  
</name>
			<link>http://www.ajaxvideotutorials.com/V11Videos/StoreFinderGrid_Part2.swf</link>
		</video>
		<video>
			<name>Watch Video - Part 3  
</name>
			<link>http://www.ajaxvideotutorials.com/V11Videos/StoreFinderGrid_Part3.swf</link>
		</video>
		<video>
			<name>Watch Video - Part 4  
</name>
			<link>http://www.ajaxvideotutorials.com/V11Videos/StoreFinderGrid_Part4.swf</link>
		</video>
		
		
	</videos>
	
	
</section>	
	
	
	</sections>
</group>		
<group>
	<sections>
	<section>
		<title>How the Grid Was Configured in Video GM13 </title>
		<steps>
			<step>
				<title>Grid Properties</title>
				<description>To place the Search Part to the Left of the Grid part, check the 'Use a master layout template' property and set the 'Master layout template style' to 'Table - Horizontal Layout'. </description>
			</step>
			<step>
				<title>Search Properties</title>
				<description>To turn off the Search Part toolbar, in 'Search Options' set the 'Toolbar position' to 'none'. </description>
			</step>
			<step>
				<title>Search Field Property</title>
				<description>To turn off the label that appears to the left of the map, select the map field and set the 'Row label' to blank. </description>
			</step>
			<step>
				<title>Map Properties</title>
				<description>These are the properties that were set for the Map field in the Search Part</description>
	<cases>
		<case>
			<title>'Search type'  </title>
			<description>Set to 'Radius'  </description>
		</case>
		<case>
			<title>'Sort radius search by distance from center point'  </title>
			<description>Checked  </description>
		</case>
		<case>
			<title>'Show search results on map'  </title>
			<description>Checked, then fill in the 'Latitude expression' and 'Longitude expression'  </description>
		</case>
		<case>
			<title>'Marker icons'  </title>
			<description>Select 'Built-in image sequence' and then 'Green:1-20'  </description>
		</case>
		<case>
			<title>'Center Map' prompt instructions</title>
			<description>Set to 'Enter a city name or zip code'  </description>
		</case>
		<case>
			<title>'Center Map' button bubble help</title>
			<description>Set to 'Center the map on an address'  </description>
		</case>
		<case>
			<title>'Center Map' execute button text</title>
			<description>'Find the closest airports'  </description>
		</case>
		<case>
			<title>'Center Map' prompt initial state  </title>
			<description>Set to 'Open'  </description>
		</case>
		<case>
			<title>'Hide 'Center Map' prompt after execute'  </title>
			<description>Uncheck this. This will leave the 'Center Map' prompt open after the user has centered a map on a new point. By default, the prompt is hidden when the user executes the action, and then the user must click the 'Center' button to re-display the prompt.  </description>
		</case>
		<case>
			<title>'onSetMapCenterPoint event'  </title>
			<description>Set to 'userSetRadius' - (note: in the video this prompt is called 'onSet event') this is the name of a Javascript function to call when the user clicks the button to set a new center point for the map. When the user clicks this button we want two things to happen: a) the map should be centered on the new address, and b) the search should actually be executed. We do not want the user to have to click the Search Part's 'Search' button (which has been hidden). The name of the function you specify here is completely arbitrary. If could just as well be 'foo'. You will then need do go the the 'Javascript Functions' section in the Grid to define this function.  </description>
		</case>
		<case>
			<title>'Initial map radius'  </title>
			<description>Set to 10 miles. </description>
		</case>
		<case>
			<title>'Map circle color'  </title>
			<description>Set to #d9e2d9 - this makes the map circle that is drawn around the map center point invisible. In this particular application, we don't want to actually see the circle drawn around the map center point.  </description>
		</case>
		<case>
			<title>'Toolbar position'  </title>
			<description>Set to 'Above' </description>
		</case>
		<case>
			<title>'Customize map toolbar template' </title>
			<description>Set to:</description>
			<example><![CDATA[{toolbarParts.setRadius} {toolbarParts.centerMapPrompt}  ]]></example>
			<cases>
				<case>
					<title>{toolbarParts.centerMapPrompt}</title>
		<description>The {toolbarParts.centerMapPrompt}placeholder represents the textbox where the user types in the address on which the map should be centered. This placeholder also includes the button that the user clicks to do the action. 
</description>
				</case>
				<case>
					<title>{toolbarParts.setRadius}</title>
		<description>The {toolbarParts.setRadius}placeholder represents the prompt where the user enters the search radius and the button that the user clicks to set a new radius on the map. In this application, we don't want to display this prompt or show the 'Set' button because we have hard-coded the search to use a 10 mile radius. However, we can't simply leave the prompt out of the toolbar because then the search will fail. That's because when the search is executed the radius of the search area needs to be submitted to the server and if the radius field is not in the Search Part, no radius value is submitted. Therefore we MUST include the {toolbar.setRadius}placeholder, but we can hide it, which we do by wrapping it in tags and setting the style on the to display:none. </description>
				</case>
				
			</cases>
		</case>
		
	</cases>
			</step>
			<step>
				<title>Javascript</title>
				<description>In the Javascript Functions section, define this event: </description>
				<example><![CDATA[function userSetRadius() { {grid.Object{.submitSearchForm() }}}]]></example>
			</step>
			<step>
				<title>Icons in the Grid</title>
				<description>To place icons in the Grid so that there is matching icon in each Grid row to the icons shown in the Search Part, go to the Grid, Fields section and click the 'Insert...' hyperlink. Insert a new 'Image' control and set the image to use the same built-in image sequence as the Search Part. </description>
			</step>
			
			
			
		</steps>
	</section>	
	
	</sections>
</group>		


<group background="true">
	<sections>
	<section>
		<title>Update the Latitude and Longitude in the current Grid GM14</title>
		<description>Shows how to Update the Latitude and Longitude in the current Grid row when a Marker in the Map is dragged to a new Location. In this video we show how the latitude and longitude value in the current Grid row can be updated when the user drags the marker to a new position on the map. </description>
		<videos>
			<video>
				<name>Watch Video </name>
				<link>http://www.ajaxvideotutorials.com/V11Videos/GoogleMap_UpdatingTheGridWhenMarkerIsMoved.swf</link>
			</video>
			
		</videos>
	</section>	
	</sections>
</group>		


<group background="true">
	<sections>
	<section>
		<title>Updating a Geography data type Field GM15</title>
		<description>Updating a Geography data type field automatically when a Longitude or Latitude Field is Changed. In order to perform a Geography search on a table, the table must have a special 'Geography' field (supported in certain SQL databases, such as SQL Server, MySQL, Oracle, Postgress, DB2, etc.). The Geography field is a special type of field that contains binary data, so you can't update its value as easily in your SQL INSERT or UPDATE statement as you can for regular fields. However, it is highly desirable to automatically update the value in the Geography fields in a record whenever a longitude or latitude value is changed. 

This video shows how this is easily accomplished in a Grid component. Alpha Five automatically generates the appropriate Portable SQL statement to update the Geography field whenever there are changes to the longitude or latitude field on which the Geography field is based.
</description>
		<videos>
			<video>
				<name>Watch Video - Part 1 </name>
				<link>http://www.ajaxvideotutorials.com/V11Videos/GreographyDataType_Part1.swf</link>
			</video>
			<video>
				<name>Watch Video - Part 2 </name>
				<link>http://www.ajaxvideotutorials.com/V11Videos/GreographyDataType_Part2.swf</link>
			</video>
		</videos>
	</section>	
	</sections>
</group>


<group background="true">
	<sections>
	<section>
		<title>Adding New Markers to Map GM16</title>
		<description>Shows how a New Marker Can be Added to a Map When  Entering New Records to a Grid. When you add a new record to a Grid, instead of asking the user to  manually enter a value into the latitude and longitude fields in the new  record, it might be desirable to allow the user to right click on the  map at a specific location and then automatically set the value of the  longitude and latitude field in the row with the position of the marker  that was added to the map. 

Also, once the marker has been added, the user can drag the marker to  a new location and the latitude and longitude fields in the new record  will be updated.

</description>
		<videos>
			
			<video>
				<name>Watch Video (Requires build 3838 or above)</name>
				<link>http://www.ajaxvideotutorials.com/V11Videos/GoogleMap_AddingANewMarkerForNewRecord.swf</link>
			</video>
		</videos>
	</section>	
	</sections>
</group>



<group>
	<sections>
	<section>
		
		<description>The videos on using the Google Maps and Geography search features in V11 are all built using a database of airports in the United States. In case you would like to create your own components that use the Airports database, you can download it at this link. The file is a zipped .bak file. To use the file, you must unzip it, open SQL Server Management Studio, right click on 'Databases', select the 'Restore Database' command, and choose the airports.bak file you just unzipped. 

http://downloads.alphasoftware.com/a5v11download/airport.zip  </description>

	</section>	
	<section>
		<description>See Also:</description>
		<cases>
			<case>
				<description>Google Map Component </description>
			</case>
			<case>
				<description>Web Grid Geographical Search </description>
			</case>
			<case>
				<description>Web Grid Videos </description>
			</case>
			<case>
				<description>Web Grid Alternate Views </description>
			</case>
			<case>
				<description>Google Map Alternate View 
</description>
			</case>
			<case>
				<description>Chart Alternate View 
</description>
			</case>
			<case>
				<description>Custom Alternate View </description>
			</case>
			
			
		</cases>
		
		
	</section>
	</sections>
</group>		


<group background="true">
	<title>Group Breaks </title>
	<sections>
	<section>
		
		<description>When a Grid is rendered it can be useful to break the Grid up into logical sections by inserting Group Breaks with group headers and/or footers into the Grid. If you had a number of customers across the US that you wanted to visually group by state, for example, a group break could help you create state headers within your grid. This section contains all the properties that allow you to define group breaks for different grids.  
</description>
		
	</section>	
	</sections>
</group>		
<group>
	<sections>
	<section>
	
<figure><link>images/1_groupbreaks13.png</link></figure>
	</section>	
	</sections>
</group>		


<group background="true">
	<sections>
	<section>
		<title>Has group breaks </title>
		<description>Do you want to add group breaks to your grid?   
</description>
		<figure><link>images/1_groupbreaks1.png</link></figure>
	</section>	
	</sections>
</group>		

<group background="true">
	<sections>
	<section>
		<title>Define group breaks 
</title>
		<description>Clicking the button next to the Define group breaks property will open a Define Group Breaks dialog box. This dialog will ask you to select the field that you want your group breaks to be based on; for example state, country, zip code, an so on. It will also ask you if you want to add a header and if you want the groups to be collapsible, or not. In this way, the Define Group Breaks dialog gives you the ability to toggle the visibility of groups with a single click. You can also use it to set either default or customized icons to indicate whether a group is open or closed. You can also add a counter, so you can see how many entries are in a closed group. If you have defined groups you can also alter the type of cursor used when a user hovers over a group. For more information check out this videoor view some of the text guides below.  
</description>
		<figure><link>images/1_groupbreaks2.png</link></figure>
	</section>	
	</sections>
</group>		
<group>
	<sections>
	<section>
<title>Add a Group Break:</title>
<steps>
	<step>
		<description>Open the Grid Builder and go to the Design page.</description>
	</step>
	
	<step>
		<description>Under Data source select either a .dbf or a SQL grid.</description>
	</step>
	<step>
		<description>Under Query(DBF) or Query(AlphaDAO) create a connection to a table that contains a countryor bill_state_regionfield; like the AlphaSports' Customer table.</description>
	</step>
	<step>
		<description>Go to Fields and assign a number of fields to your grid using the arrow buttons to move Included a country field or a state field. </description>
	<figure><link>images/1_groupbreaks3.png</link></figure>
	</step>
	<step>
		<description>Go to the Properties page on the Design page and scroll down until you come to the Group break properties. Check the checkbox next to the Has group breaks property.</description>
	</step>
	<step>
		<description>The Define group breaks property will become visible. Click on the button to the right of the Define group breaks property. This will open the Define Group Breaks dialog.

</description>
<figure><link>images/1_groupbreaks2.png</link></figure>
	</step>
	<step>
		<description>In the Define Group Breaks dialog, click the Select... button. From the dropdown choose the field you want to use to define groups, something like the Bill_state_regionfield.</description>
	<figure><link>images/1_groupbreaks5.png</link></figure>
	
	</step>
	
	<step>
		<description>Check the Has Group Header? checkbox to place a header at the top of each group. This will open a work area where you can write the code for your header. 
</description>
<figure><link>images/1_groupbreaks6.png</link></figure>
	</step>
	<step>
		<description>You now need to alter the header so that it can make dynamic headings that apply to a given group. Strip out the second line in the Break Header: code and remove the filler text in the third line.

</description>
		<figure><link>images/1_groupbreaks7.png</link></figure>
	</step>
	<step>
		<description>Type in State:between the tags.</description>
		<figure><link>images/1_groupbreaks8.png</link></figure>
		<note>In the Break header code class="[class.gridDataHeader]"uses a substitute class name that will be replaced with a real class name at runtime. In this example you deleted colspan="{systemcolumnCount}"this is the row selector and any columns that appear to the left of the real data in your grid. Eliminating this code causes the group headings that you are creating to appear flush-left on your grid.  </note>
	</step>
	<step>
		<description>Click the Insert special commands  link at the bottom of the Define Group Breaks dialog.
</description>
		<figure><link>images/1_groupbreaks11.png</link></figure>
	</step>
	<step>
		<description>The Select Command dialog will open. Click the Select  button next to the {group.breakfield} option, this option represents the value of the break for the current row in your grid.</description>
		<figure><link>images/1_groupbreaks9.png</link></figure>
	</step>
	<step>
		<description>If your Break header: looks something like this then click OK in the Define Group Breaks dialog to exit it.</description>
		<figure><link>images/1_groupbreaks10.png</link></figure>
		<note>If you wanted to make the {group.breakfield}placeholder to standout, simply add some 'bold' tags around it, like so {group.breakfield}   </note>
	</step>
	<step>
		<description>Click on the Working Preview tab in the Grid Builder. You should now see groups based by state, each with its own header.

</description>
		<figure><link>images/1_groupbreaks12.png</link></figure>
		<note>You might notice that in the grid above the Bill State Region data is repeated in both the Group heading and in its own individual column. There is an easy way to eliminate this repetition so that only the group heading appears on the grid. This video, Part 1shows how to do this and more, or you could also follow the guide below.</note>
	</step>
	<step>
		<title>Hide a Field that defines a Group : </title>
		<description>Go back to the Fields page and, in the Selected fields, click on the field that defines your groups; in this case the Bill_state_regionfield. </description>
		<figure><link>images/1_groupbreaks14.png</link></figure>
	</step>
	<step>
		<description>Scroll down the Field Properties list, on the right side of the Fields page, until you come to the  Column Properties . Check the Hide column checkbox.</description>
		<figure><link>images/1_groupbreaks15.png</link></figure>
	</step>
	<step>
		<description>Go to Working Preview , you should no longer see the column for the field that defines your groups.
The Bill_State_Regioncolumn remains hidden. </description>
		
		<cases>
			<case>
				<figure><link>images/1_groupbreaks16.png</link></figure>
			</case>
			
				
		</cases>
	</step>
	
	
</steps>



	</section>	
	</sections>
</group>		


<group background="true">
	<sections>
	<section>
	
		<description>You can give a group header or footer some smarts that will allow it to create a summary of the data contained within a given group. This can be used in a number of ways. For instance, it could serve to create a total on all of the goods sold in a specific region or to count the number of members inside a group. For more detail watch this videoor read on.</description>
			
				<note>Contrary to what the video states, this feature is supported in both .dbf tables and SQL.  </note>
			
	</section>	
	</sections>
</group>		
<group>
	<sections>
	<section>
		<title>Add Summary Information in a Group header/footer: </title>
		<steps>
			<step>
				<description>Using the Alphasports workspace open Grid Builder and go to the Design tab. Go to Data Source and add a .dbf or SQL table.</description>
			</step>
			<step>
				<description>Open the Query(DBF) or Query(AlphaDAO) page. Under Table name: select a table relating to invoices, like the Invoice_itemstable</description>
			</step>
			<step>
				<description>Go to Fields and move all of the fields for your table from Available fields to Selected.</description>
				<figure><link>images/1_groupbreakB1.png</link></figure>
			</step>
			<step>
				<description>Go to the Properties page in the Design menu. Scroll down the Properties list to the Group Breaks properties section</description>
				<figure><link>images/1_groupbreakB2.png</link></figure>
			</step>
			<step>
				<description>Check the Has group breaks property checkbox. Then click the [dot_img] button to the right of the Define group breaks property.</description>
				
			</step>
				<step>
				<description>The Define Group Breaks dialog will open. Select the field you want to group by, in this case the Invoice_Numberfield. 
</description>
				<figure><link>images/1_groupbreakB3.png</link></figure>
			</step>
			<step>
				<description>Check the Has group header? checkbox. This will open a work area where you can adjust the header code.</description>
				<figure><link>images/1_groupbreakB4.png</link></figure>
			</step>
			<step>
				<description>Erase second row in code, this will left justify your group headers. Also replace the "Enter group break HEADER text here"filler with Invoice: </description>
				<figure><link>images/1_groupbreakB5.png</link></figure>
			</step>
				<step>
				<description>Click Insert field  button. Select Invoice_Numberand click OK .</description>
				<figure><link>images/1_groupbreakB6.png</link></figure>
			</step>
			<step>
				<description>The inserted field placeholder should appear in the Define Group Breaks dialog. After the placeholder write ' Total for Invoice:'.</description>
				<figure><link>images/1_groupbreakB7.png</link></figure>
			</step>
			<step>
				<description>Click the Insert summary field  button at the bottom of the Define Group Breaks dialog. The Insert Summary Field dialog will open.</description>
				<figure><link>images/1_groupbreakB8.png</link></figure>
			</step>
				<step>
				<description>If using the Invoice_items table choose the Extensionfield. Set Summary type to 'total', then click on the Build button.</description>
				<figure><link>images/1_groupbreakB9.png</link></figure>
			</step>
			<step>
				<description>The Display Format dialog will open. Click on the Select Pre-defined Format button and then select an appropriate format, in this case one with 2 decimals and a dollar sign.</description>
				<figure><link>images/1_groupbreakB10.png</link></figure>
			</step>
			<step>
				<description>Click OK to enter the Pre-Defined Format and OK again to close the Displat Format dialog. Click OK a third time to add the expression to  enter the format into your Break header: code. You should end up with something like this...</description>
				<example><![CDATA[Invoice:{Invoice_number} Total for Invoice:{alltrim(str( convert_type([[groupSummary.Extension.total]],"N") ,250,2,"$("))}]]></example>
			</step>
				<step>
				<description>No Save and go to Working Preview. A Group Header showing the sum of Extension entries for each group. 
</description>
				<figure><link>images/1_groupbreakB11.png</link></figure>
				
			
			</step>
			
		</steps>
	</section>	
	<section>
		<note>These videos can show you how to form groups for snaking columnar Grids.  Watch Video - Part 1  or Video - Part 2.  </note>
			
		
	</section>
	<section>
		<videos>
			<video>
				<name>Watch Video - Part 1</name>
				<link>http://www.ajaxvideotutorials.com/V11Videos/GroupBreaks_Part2.swf</link>
			</video>
			<video>
				<name>Video - Part 2</name>
				<link>http://www.ajaxvideotutorials.com/V11Videos/GroupBreaks_Part3.swf</link>
			</video>
		</videos>
	</section>
	</sections>
</group>		


<group background="true">
	<sections>
	<section>

		<description>When you build a Grid there are two system fields,  and  , that you can place on your Grid. These two fields appear at the end of the available fields list on the Fields page of the Grid Builder. The  starts at 1 and increments by 1 for each row on the Grid. However, when you have  Group breaks  turned on, you might like to display a value that starts at 1 after each Group Break. This can be easily done using a ' Custom ' control type. Here is how to do it.  
</description>
		
	</section>	
	</sections>
</group>		
<group>
	<sections>
	<section>
		<title>Add Logical Record Numbers to a Group:
</title>
		<steps>
<step>
	<description>First create a grid with a Group break using the instructions above. </description>
</step>		
<step>
	<description>Go to the fields page and a dd an expendable field to the Selected Fields   list. Use the arrow buttons to position the field at the end of the list. </description>
</step>		
<step>
	<description>In Field Properties   list, on the Fields   page, find the Display Settings   properties. Under Display Settings find the Control type   property.   </description>
<figure><link>images/1_groupbreaklogical5.png</link></figure>
</step>	
<step>
	<description>Click the button [dot_img] next to Control type. The Select Control Type dialog will load. Select the ' Custom   ' control type and click OK   .   </description>
	<figure><link>images/1_groupbreaklogical2.png</link></figure>
</step>		
<step>
	<description>Still on the Fields page, scroll down the Field Properties list until you find Custom Control Properties. Click the button [dot_img] next to the Definition property.   </description>
	<figure><link>images/1_groupbreaklogical3.png</link></figure>
</step>		
<step>
	<description>The Define Xbasic for Custom Control   dialog will appear. Add the following Xbasic to the existing code...   </description>
	
<cases>
	<case>
		<example><![CDATA[if eval_valid("args.rtc.group1LogicalRowNumber") then 
    YourField_render = "" + args.rtc.group1LogicalRowNumber 
else 
    YourField_render = "?" 
end if    ]]></example>
	</case>
	<case>
		<description>Example of inserted code. Here the Fieldname used was called 'YourField', 
</description>
		<figure><link>images/1_groupbreaklogical4.png</link></figure>
	</case>
	
	
</cases>
</step>	
<step>
	<description>In the Field Properties under Column Properties   write 'Record Number' next to the Column heading   property.   </description>
	<figure><link>images/1_groupbreaklogical7.png</link></figure>
</step>		
<step>
	<description>Still in Column Properties, click on the Cell inline-style property. The Style Editor will open.   </description>
	<figure><link>images/1_groupbreaklogical8.png</link></figure>
</step>		
<step>
	<description>In the Text properties section of the Style Editor, find the Alignment property. From the drop-down select right. Click OK to close the Style Editor.   </description>
	<figure><link>images/1_groupbreaklogical6.png</link></figure>
</step>	
<step>
	<description>Now go to Working Preview . Your grid should appear something like this.  Notice the 'Record Number' column at the right starts at 1 every time a new Group is started. Add a Record Number Column for each Group 
</description>
	<figure><link>images/1_groupbreaklogical1.png</link></figure>
</step>	

			
		</steps>
	</section>	
	</sections>
</group>		


<group background="true">
		<title>Row Expander</title>
	<sections>
	<section>
	
		<description>Once your grid separated into different groups, you might want to add the ability to expand and contract those groups. This might allow users to move through the records in your grid in your more quickly and can free up space on the screen. This section allows you to design the Row Expander in your grid and how you want it to look and operate.   
</description>
		
	</section>	
	</sections>
</group>		


<group background="true">
	<sections>
	<section>
		<title>Has row expander 
</title>
		<description>The row expander is another method to show information related to a record on a row. A column is added with a 'plus'   icon that can be selected to 'expand the row'. A minus  icon will be shown after the row is expanded that can be selected to close the expanded row. There are 2 row expander types.  
</description>
		<figure><link>images/1_rowexpander.png</link></figure>
	</section>	
	</sections>
</group>		
<group>
	<sections>
	<section>
		
		<description>Selecting the row expander icon will expand a row. 
</description>
		<figure><link>images/1_rowexpander1.png</link></figure>
	</section>	
	<section>
		
		<description>Components, like this Date Picker, are easy to link to expanded rows 
</description>
		<figure><link>images/1_rowexpander2.png</link></figure>
	</section>	
	<section>
		
		<description>Expanded row with 2 grids in a tabbed control with tabs on top. 
</description>
		<figure><link>images/1_rowexpander7.png</link></figure>
	</section>	
	</sections>
</group>		


<group background="true">
	<sections>
	<section>
		<title>Mode </title>
		<description>The Mode property determines how the action expanding one row affects the other rows in a grid. If the 'Mode' property is set to 'Single', then only one row can be expanded at a time. If a row is expanded and you expand another row, the currently expanded row will be collapsed. Multiple records can have their row expanded, allowing the user to view additional information about multiple records. 
</description>
		
	</section>	
	</sections>
</group>		



<group background="true">
	<sections>
	<section>
		<title>Auto-expand first row</title>
		<description></description>
		
	</section>	
	</sections>
</group>		


<group background="true">
	<sections>
	<section>
		<title>Row expander type</title>
		<description>The ' LinkedGrids ' option allows selecting one or more grid components that can be linked to the current record in the row. The linked grids can be shown in tabs, or an accordion control. The ' CustomEvent ' will cause the grid event 'OnExpandRow' to fire. This event sets a number of properties such as e.html and e.javascript. The contents of the expanded row will be set to e.html. If the e.javascript is not null, the javascript contained in this property will be executed. There are other optional properties available to allow a developer to create a custom display that can be linked to the current record. Note that if a child grid in an Row Expander is updateable, the linking fields must also be updateable.  
</description>
		<figure><link>images/1_rowexpander8.png</link></figure>
	</section>	
	</sections>
</group>		
<group>
	<sections>
	<section>
		
		<description>CustomEvent selected using the example code in the ' OnExpandRow' event, run in Chrome 
</description>
		<figure><link>images/1_rowexpander3.png</link></figure>
	</section>	
<section>
<title></title>	
<steps>
	<step>
		<description>Open the Grid Builder, under Data Source on the Design page select either .dbf or SQL.</description>
	</step>
	<step>
		<description>On the Query(AlphaDAO) or Query(DBF) page designate which table you will use for your grid.</description>
	</step>
	<step>
		<description>Go to the Fields page from the Design menu and move some number of fields from the Available Fields: list to the Selected: fields list.</description>
	</step>
	<step>
		<description>Go to the Properties page. Under the Row expander section check the Has row expander checkbox.</description>
	</step>
	<step>
		<description>Under the Row expander type property select ' CustomEvent ' from the dropdown. </description>
	<figure><link>images/1_rowexpander5.png</link></figure>
	</step>
	<step>
		<description>On the Design page menu open the Server-side events page.</description>
		<figure><link>images/1_rowexpander6.png</link></figure>
	</step>
	<step>
		<description>From the list of events on the left side of the page select the ' OnExpandRow ' event. Remove the apostrophe '  from in front of the e.htmlparameter and the e.javascriptparameter. Allowing e.html and e.javascript parameters to be passed in:</description>
		<figure><link>images/1_rowexpander4.png</link></figure>
	</step>
	<step>
		<description>Now go to Live Preview and run your grid in the browser of you choice.</description>
	</step>
	
	
	
</steps>	
	
	
</section>	
	
	</sections>
</group>



<group background="true">
	<sections>
	<section>
		<title>Row expander linked Content </title>
		<description>If you selected the 'LinkedContent' option under the Row expander type property then this is where you define what the row links to.  
</description>
		<figure><link>images/1_rowexpander9.png</link></figure>
	</section>	
	</sections>
</group>		


<group background="true">
	<sections>
	<section>
		<title></title>
		<description></description>
		<figure><link></link></figure>
	</section>	
	</sections>
</group>		
<group background="true">
	<sections>
	<section>
		<title>Content Working message 
</title>
		<description></description>
		
	</section>	
	</sections>
</group>
<group background="true">
	<sections>
	<section>
		<title>Auto-refresh on expand </title>
		<description></description>
		
	</section>	
	</sections>
</group>
<group background="true">
	<sections>
	<section>
		<title>Row expand method </title>
		<description>Making the Grid Behave Like an Accordion. Using the 'Row expand method' property, you can make a Grid component behave like a data driven Accordion Control. 
</description>
<videos>
	<video>
		<name>Watch Video</name>
		<link>http://www.ajaxvideotutorials.com/V11Videos/GridBehavesAsAnAccordionControl.swf</link>
		
	</video>
	
	
</videos>
		
	</section>	
	</sections>
</group>



<group background="true">
	<sections>
	<section>
		<title>Icon bubble help</title>
		<description>Icon bubble help lets you add help bubbles that appear whenever a user hovers over the row expander's expand/contract icon. The default setting is no help bubble.  
</description>
		<figure><link>images/1_rowexpander11.png</link></figure>
	</section>	
	</sections>
</group>		
<group>
	<sections>
	<section>
		

		<figure><link>images/1_rowexpander10.png</link></figure>
	</section>	
	</sections>
</group>


<group background="true">
	<sections>
	<section>
		<title>Animate </title>
		<description>The Animate property in the Row Expander section of the Grid Builder allows you to set animation options for a row expander when it opens and closes. Simply check the 'Animate' property checkbox to turn on Animation. When you do this an Animation options property will open. This will allow you to choose how you want the row expander animation to appear to the user. 
</description>
		<figure><link>images/1_animate.png</link></figure>
	</section>	
	</sections>
</group>		



<group background="true">
	<sections>
	<section>
		<title>Animation Options 
</title>
		<description>Clicking the button [dot_img] to the right of the Animation Options property will open the Animation Options dialog. Animation options include a Method variable which can be set to either Slide or Fade . The 'slide' method slides content into view, whereas the 'fade' method fades content into view. You can also adjust the speed of animations, which can be Slow , Fast or an Explicit value (expressed in milliseconds). For more  
watch this Video or read on  
</description>
		<figure><link>images/1_animate2.png</link></figure>
	</section>	
	<section>
		<videos>
			<video>
				<name>watch this Video</name>
				<link>http://www.ajaxvideotutorials.com/V11Videos/RowExpanderAnimation.swf</link>
			</video>
			
		</videos>
		
	</section>
	</sections>
</group>		
<group>
	<sections>
	<section>
		<title>Add animation to a Row Expander: </title>
		
		<cases>
			<case>
				<figure><link>images/1_animate3.png</link></figure>
			</case>
			<case>
				<figure><link>images/1_animate6.png</link></figure>
			</case>
			<case>
				<figure><link>images/1_animate4.png</link></figure>
			</case>
			<case>
				<description>Method Slide, Speed Slow </description>
				<figure><link>images/1_animate5.png</link></figure>
			</case>
			<case>
				<note>The animation options use jQuery. By default, jQuery is automatically loaded. See the 'Project Properties' dialog on the Web Control Panel. If you are using animation, you should not turn off jQuery from this dialog. See also JQuery Support      </note>
			</case>
			
		</cases>
	</section>	
	<section>
		<description>The row expander in Alpha Anywhere turns on a small icon next to each row in the grid. When you click this icon, the row expands to show additional information related to the current row. The  video will show you how to use the row expander in a number of ways, including:
</description>
		<cases>
			<case>
				<description>with a single grid
</description>
			</case>
			<case>
				<description>with multiple grids in a tab control
</description>
			</case>
			<case>
				<description>with multiple grids in an accordion control
</description>
			</case>
			<case>
				<description>setting the row expander to only allow one row to be expanded at a time
</description>
			</case>
			<case>
				<description>and defining a custom row expander event to show any arbitrary content generated by the server.
</description>
			</case>
			
			
		</cases>
		
	</section>
	<section>
		<videos>
			<video>
				<name>video</name>
				<link>http://www.screencast.com/users/AlphaSoftware/folders/Jing/media/4c82cecf-6ce1-4438-8e80-59c88a55dfa3</link>
			</video>
			
		</videos>
	</section>
	</sections>
</group>



<group background="true">
	<title>Query by-Example Row</title>
	<sections>
	<section>
		
		<description>Query-by-Example Row is a search feature that lets you search individual columns. It effectively opens up a single row of text control boxes above your grid, allowing users to search individual fields. After entering text in the control the user then clicks on an icon to the right of the textbox and a list of possible search criteria opens. The user can clear all filters on all columns, remove the filter on the current column with 'No filter'., or select specific criteria for the current row. The query runs as soon as the criteria is clicked. Additional queries can be run on other rows to further filter the data. A show or hide a query row button on your grid's record navigation bar can be used to turn Query-by-Example on and off. You can also decide whether you want the initial display of the Query-by-Example row to be shown or hidden using the Query-by-Example Row initial display property. In addition to Query-by-Example row, the Quick Search property also lets you create search features inside of your grid.   </description>
		<videos>
			<video>
				<name>here</name>
				<link></link>
			</video>
			
			
		</videos>
	</section>	
	</sections>
</group>		
<group>
	<sections>
	<section>
		
		<description>Grid with Query by-Example feature 
</description>
		<figure><link>images/1_queryby.png</link></figure>
	</section>	
	<section>
		
		<description>Search Criteria available to user from grid 
</description>
		<figure><link>images/1_queryby3.png</link></figure>
	</section>	
	<section>
		
		<description>Grid Filtered on 2 columns using the ' Starts with (x..)' filter 
</description>
		<figure><link>images/1_queryby4.png</link></figure>
	</section>	
	</sections>
</group>


<group background="true">
	<sections>
	<section>
		<title>Query-by-Example row </title>
		<description>Check the Query-by-Example row property if you want to add this feature to your grid.  
</description>
		<figure><link>images/1_queryby1.png</link></figure>
	</section>	
	</sections>
</group>		


<group background="true">
	<sections>
	<section>
		<title>Query-by-Example menu internationalization </title>
		<description></description>
		<figure><link></link></figure>
	</section>	
	</sections>
</group>		

<group background="true">
	<sections>
	<section>
		<title>Query-by-Example row initial display </title>
		<description>The Query-by-Example row initial display property allows you to decide how you want a Query-by-Example row to appear when a user opens your application. The ' Hidden ' option will keep the QBE controls concealed from the user until they click the 'Show/Hide QBE Row' hyperlink on the grid's Record Navigation Bar. Setting the Query-by-Example row initial display property to ' Shown ' will load a grid with the QBE controls fully visible; while allowing the user to close this row using the Show/Hide QBE Row link. The third option, 'Shown-Cannot Be Hidden' , displays the QBE controls in the grid but does not give users the ability to hide the controls. There is no hyperlink with this option.  
</description>
		
	</section>	
	</sections>
</group>		
<group>
	<sections>
	<section>
		
		<description>Initial Display 'Hidden' 
</description>
		<figure><link>images/1_queryby8.png</link></figure>
	</section>	
	<section>
		
		<description>Initial Display 'Shown' 
</description>
		<figure><link>images/1_queryby9.png</link></figure>
	</section>	
	<section>
		
		<description>Initial Display 'Shown-Cannot Be Hidden' 
</description>
		<figure><link>images/1_queryby10.png</link></figure>
	</section>	
	</sections>
</group>


<group background="true">
	<sections>
	<section>
		<title>Query-by-Example hyperlink text 
</title>
		<description>You can customize the label for the 'Show/hide Query-by-Example' row hyperlink. This link appears in the Record Navigation bar on your grid and turns the Query by Example row on and off. By default the hyperlink is labeled 'Show/Hide QBE Row'. To add your own label simply erase the existing text next to the Query-by-Example hyperlink text control and add the text you want. Like other label properties in Alpha Anywhere you can insert HTML around your text. There is no direct link to the HTML  Editor from within the property itself, but you can always access the general HTML Editor by going the View and HTML Editor from Alpha Anywhere's main menu. After refining your text in the editor you can cut and paste it from the Source tab directly into your label.   
Default Label:</description>
		<figure><link>images/1_queryby6.png</link></figure>
	</section>	
	<section>
		<description>Modified Label  
</description>
		<figure><link>images/1_queryby7.png</link></figure>
	</section>
	</sections>
</group>		
<group>
	<sections>
	<section>
		
		<description>Link to show/hide Query-by-Example 
</description>
		<figure><link>images/1_queryby2.png</link></figure>
	</section>	
	<section>
		
		<description>Modified show/hide QBE link 
</description>
		<figure><link>images/1_queryby5.png</link></figure>
	</section>
	</sections>
</group>


<group background="true">
	<sections>
	<section>
		<title>Search rules </title>
		<description></description>
	
	</section>	
	</sections>
</group>		


<group background="true">
	<title>'Alphabet Buttons/Custom Buttons' Search </title>
	<sections>
	<section>
		
		<description>The 'Alphabet Buttons/Custom Buttons' Search feature creates an alphabet that users can utilize in searching for records alphabetically within a given field. For example, if you specify that your Alphabet buttons should search on the lastname field, when you click on the 'B' button, all records with lastnames that start with 'B' are shown. This section contains all of the properties that can be used to shape this search feature.  </description>
		<figure><link></link></figure>
	</section>	
	</sections>
</group>		

<group background="true">
	<sections>
	<section>
		<title>Has 'Alphabet/Custom Buttons' search 
</title>
		<description></description>
		
	</section>	
	</sections>
</group>	

<group background="true">
	<sections>
	<section>
		<title>Search Bar Type</title>
		<description>You are not limited to a pre-defined list of buttons showing A through Z when you turn on the Alphabet buttons feature. You can completely customize the buttons that are shown in the button bar and the corresponding search that is performed when you click a button. To customize the buttons, select 'Custom Buttons' in the 'Search bar type' prompt. Then click the smart field in the 'Custom search definition' property. The following dialog will appear:  
</description>
		
	</section>	
	<section>
		
		<description>The button definition is to the left of the equal sign and the corresponding filter expression is to the right of the equal sign.  
You can display arbitrary HTML as the button definition (as long as you set the button style to be button or hyperlink - not dropdown). This means (for example) that you can include images in the buttons.  
</description>
	
	</section>	
	</sections>
</group>		
<group>
	<sections>
	<section>
		
		<description>The Custom Search Bar Dialog lets you customize an Alphabet 
</description>
		<figure><link>images/1_alphabet5.png</link></figure>
	</section>	
	<section>
		
		<description>Result for Example Definition 
</description>
		<figure><link>images/1_alphabet6.png</link></figure>
	</section>	
	</sections>
</group>


<group background="true">
	<sections>
	<section>
		
		<description>If you plan to add use arguments in the filter expression and/or use international characters, be aware that .dbf files do not support unicode; they only support acp. You can use arguments in the filter expression using this syntax  
</description>
		<example><![CDATA[Button text = search expression && argumentValue|||argumentType|argumentName  
]]></example>
	</section>	
	<section>
		
		<description>For example:  
</description>
		<example><![CDATA[A..C = left({searchfield},1) >= :arg1 AND left ({searchfield},1) <= :arg1 && a|||c|arg1  
]]></example>
	</section>	
	<section>
		
		<description>The argument value can be an expression if you prefix it with an = sign. For example:  
</description>
		<example><![CDATA[A..C = left({searchfield},1) >= :arg1 AND left({searchfield}, 1) <= :arg1 && ="a"|||c|arg1  
]]></example>
	</section>	
	<section>
		
		<description><![CDATA[argument value. However, if you are using international chanracters, you will need to use the expression syntax to set the argument value to an international character.  
For example, say you want to have a button that uses the an acute accent ( ). You can not enter the character directly for either the button label, or the argument value. Instead, you have to use the HTML encoded character (&aacute;) as an argument in the *html_to_text function  
For example:  ]]>
</description>
		<example><![CDATA[&aacute;= left((searchfield),1) = :arg1 && =*html_to_text("&aacute;")|||c|arg1  
]]></example>
	</section>	
	</sections>
</group>		
<group background="true">
	<sections>
	<section>
		<title>Add an Alphabet Search with International Characters: </title>
		<steps>
			<step>
				<description>Open the Grid Builder from the Web Projects control panel. Under Data Source select SQL Database accessed via AlphaDAO .</description>
			</step>
			<step>
				<description>Open the Query (AlphaDAO) page. Add a connection string and connect to a table that you want to be able to retrieve data from.</description>
			</step>
			
		</steps>
	</section>	
	</sections>
</group>
<group>
	<sections>
	<section>
		<title>Hiragana Unicode: </title>
		
		<figure><link>images/1_alphabet8.png</link></figure>
		<example><![CDATA[&#12354; = left({searchfield},1) = :arg1 && =*html_to_text("&#12354;")|||c|arg1 
&#12356; = left({searchfield},1) = :arg2 && =*html_to_text("&#12356;")|||c|arg2 
&#12358; = left({searchfield},1) = :arg3 && =*html_to_text("&#12358;")|||c|arg3 
&#12360; = left({searchfield},1) = :arg4 && =*html_to_text("&#12360;")|||c|arg4 
&#12362; = left({searchfield},1) = :arg5 && =*html_to_text("&#12362;")|||c|arg5 
&#12363; = left({searchfield},1) = :arg6 && =*html_to_text("&#12363;")|||c|arg6 
&#12365; = left({searchfield},1) = :arg7 && =*html_to_text("&#12365;")|||c|arg7 
&#12367; = left({searchfield},1) = :arg8 && =*html_to_text("&#12367;")|||c|arg8 
&#12369; = left({searchfield},1) = :arg9 && =*html_to_text("&#12369;")|||c|arg9 
&#12371; = left({searchfield},1) = :arg10 && =*html_to_text("&#12371;")|||c|arg10 
&#12373; = left({searchfield},1) = :arg11 && =*html_to_text("&#12373;")|||c|arg11 
&#12375; = left({searchfield},1) = :arg12 && =*html_to_text("&#12375;")|||c|arg12 
&#12377; = left({searchfield},1) = :arg13 && =*html_to_text("&#12377;")|||c|arg13 
&#12379; = left({searchfield},1) = :arg14 && =*html_to_text("&#12379;")|||c|arg14 
&#12381; = left({searchfield},1) = :arg15 && =*html_to_text("&#12381;")|||c|arg15 
&#12383; = left({searchfield},1) = :arg16 && =*html_to_text("&#12383;")|||c|arg16 
&#12385; = left({searchfield},1) = :arg17 && =*html_to_text("&#12385;")|||c|arg17 
&#12388; = left({searchfield},1) = :arg18 && =*html_to_text("&#12388;")|||c|arg18 
&#12390; = left({searchfield},1) = :arg19 && =*html_to_text("&#12390;")|||c|arg19 
&#12392; = left({searchfield},1) = :arg20 && =*html_to_text("&#12392;")|||c|arg20 
&#12394; = left({searchfield},1) = :arg21 && =*html_to_text("&#12394;")|||c|arg21 
&#12395; = left({searchfield},1) = :arg22 && =*html_to_text("&#12395;")|||c|arg22 
&#12396; = left({searchfield},1) = :arg23 && =*html_to_text("&#12396;")|||c|arg23 
&#12397; = left({searchfield},1) = :arg24 && =*html_to_text("&#12397;")|||c|arg24 
&#12398; = left({searchfield},1) = :arg25 && =*html_to_text("&#12398;")|||c|arg25 
&#12399; = left({searchfield},1) = :arg26 && =*html_to_text("&#12399;")|||c|arg26 
&#12402; = left({searchfield},1) = :arg27 && =*html_to_text("&#12402;")|||c|arg27 
&#12405; = left({searchfield},1) = :arg28 && =*html_to_text("&#12405;")|||c|arg28 
&#12408; = left({searchfield},1) = :arg29 && =*html_to_text("&#12408;")|||c|arg29 
&#12411; = left({searchfield},1) = :arg30 && =*html_to_text("&#12411;")|||c|arg30 
&#12414; = left({searchfield},1) = :arg31 && =*html_to_text("&#12414;")|||c|arg31 
&#12415; = left({searchfield},1) = :arg32 && =*html_to_text("&#12415;")|||c|arg32 
&#12416; = left({searchfield},1) = :arg33 && =*html_to_text("&#12416;")|||c|arg33 
&#12417; = left({searchfield},1) = :arg34 && =*html_to_text("&#12417;")|||c|arg34 
&#12418; = left({searchfield},1) = :arg35 && =*html_to_text("&#12418;")|||c|arg35 
&#12420; = left({searchfield},1) = :arg36 && =*html_to_text("&#12420;")|||c|arg36 
&#12422; = left({searchfield},1) = :arg37 && =*html_to_text("&#12422;")|||c|arg37 
&#12424; = left({searchfield},1) = :arg38 && =*html_to_text("&#12424;")|||c|arg38 
&#12425; = left({searchfield},1) = :arg39 && =*html_to_text("&#12425;")|||c|arg39 
&#12426; = left({searchfield},1) = :arg40 && =*html_to_text("&#12426;")|||c|arg40 
&#12427; = left({searchfield},1) = :arg41 && =*html_to_text("&#12427;")|||c|arg41 
&#12428; = left({searchfield},1) = :arg42 && =*html_to_text("&#12428;")|||c|arg42 
&#12429; = left({searchfield},1) = :arg43 && =*html_to_text("&#12429;")|||c|arg43 
&#12431; = left({searchfield},1) = :arg44 && =*html_to_text("&#12431;")|||c|arg44 
&#12434; = left({searchfield},1) = :arg45 && =*html_to_text("&#12434;")|||c|arg45 
&#12435; = left({searchfield},1) = :arg46 && =*html_to_text("&#12435;")|||c|arg46    
 ]]></example>
	</section>	
	</sections>
</group>

<group background="true">
	<sections>
	<section>
		<title>Search Field </title>
		<description></description>
		
	</section>	
	</sections>
</group>



<group background="true">
	<sections>
	<section>
		<title>'Buttons' Control Style </title>
		<description>You can configure your 'Alphabet' buttons to show as choices in a dropdown box rather than as a list of buttons or hyperlinks by setting the button style to 'Dropdown'.  
</description>
		
	</section>	
	</sections>
</group>
<group>
	<sections>
	<section>
		
		<description>' Hyperlink' Style 
</description>
		<figure><link>images/1_alphabet.png</link></figure>
	</section>	
	<section>
		
		<description>' Button' Style 
</description>
		<figure><link>images/1_alphabet2.png</link></figure>
	</section>	
	<section>
		
		<description>'Dropdown box' Style 
</description>
		<figure><link>images/1_alphabet3.png</link></figure>
	</section>	
	</sections>
</group>

<group background="true">
	<sections>
	<section>
		<title>Include numeric buttons 
</title>
		<description>You can configure your 'Alphabet' buttons to also show buttons for 0 through 9 by checking the 'Include numeric buttons' property.  
</description>
		<figure><link></link></figure>
	</section>	
	</sections>
</group>
<group>
	<sections>
	<section>
		
		<description>Alphabetic and Numeric Search Buttons 
</description>
		<figure><link>images/1_alphabet7.png</link></figure>
	</section>	
	</sections>
</group>

<group background="true">
	<sections>
	<section>
		<title>Position</title>
		<description>You can position the 'Alphabet' buttons inside the Grid, as shown in the above two images, or outside the Grid, as shown below.  
</description>
		<figure><link></link></figure>
	</section>	
	</sections>
</group>
<group>
	<sections>
	<section>
		
		<description>' Alphabet' Buttons positioned outside of the grid. 
</description>
		<figure><link>images/1_alphabet4.png</link></figure>
	</section>	
	</sections>
</group>

<group background="true">
	<sections>
	<section>
		<title>Alignment </title>
		<description></description>
		
	</section>	
	</sections>
</group>


<group background="true">
	<sections>
	<section>
		<title>Has 'All' option </title>
		<description>The Has 'All' option places an 'All' button at the end of your alphabet. Users can click this button to bring them back to a main grid that displays everything listed under the different letters in one long list. The list can have multiple pages to it. You can change the text on the All button using the 'All' option label property. If you do not want an 'All' button simply uncheck the checkbox next to the Has 'All' option property.  
</description>
		<figure><link>images/1_alphabet12.png</link></figure>
	</section>	
	</sections>
</group>
<group>
	<sections>
	<section>
		
		<description>The All option 
</description>
		<figure><link>images/1_alphabet9.png</link></figure>
	</section>	
	</sections>
</group>

<group background="true">
	<sections>
	<section>
		<title>'All' option label 
</title>
		<description>The 'All' option label property allows you to place a different label on the 'All' button. This is a useful feature for creating alphabets using international characters. Like other labels in Alpha Anywhere it is possible to insert HTML directly into the property textbox. To create HTML using a WYSIWYG (What you see is what you get), you can go to View at the top of the screen and open the HTML editor from the dropdown.  
Default label:</description>
		<figure><link>images/1_alphabet13.png</link></figure>
	</section>	
	<section>
		
		<description>Modified label  
</description>
		<figure><link>images/1_alphabet14.png</link></figure>
	</section>	
	</sections>
</group>
<group>
	<sections>
	<section>
		
		<description>Modified 'All' option 
</description>
		<figure><link>images/1_alphabet11.png</link></figure>
	</section>	
	</sections>
</group>

<group background="true">
	<sections>
	<section>
		<title>Search rules </title>
		<description>Alpha Anywhere contains a number of different options for creating search features. There is a Search Part, a Quick Search, a Query by Example Search, and an Alphabet button search. The Search rules property specifies which search rules should be applied when performing different types of searches.  For example, if a grid allows a Quick Search and an Alphabet button search, if the user does an Alphabet Button search, and then does a Quick Search, should the Alphabet Button search be cleared before the Quick Search is Applied? If not, then the Quick Search will be in addition to the Alphabet Button criteria. While this might sound a bit convoluted it does have some useful applications. For instance, it allows users to search through data that has already been filtered using a separate search feature.  
</description>

	</section>	
	<section>
		
		<description>To create new search rules simply click the button [dot_img] to the right of the property. This will open the Search Rules dialog.  
</description>
		<figure><link>images/1_alphabet15.png</link></figure>
	</section>	
	</sections>
</group>
<group>
	<sections>
	<section>
		
		<description>Defining Search Rules
</description>
		<figure><link>images/1_alphabet16.png</link></figure>
	</section>	
	<section>
		<title>Search Rules Explained: </title>
		<steps>
			
			<step>
				<description>Next to the Query by example search: option the Alphabet button search checkbox is checked.</description>
				<figure><link>images/1_alphabet17.png</link></figure>
			</step>
			<step>
				<description>When a user does an actual Query by example search on a field using the Starts with (x..) filter, where x equals b, then they will get a list of everything in that field starting with b.   </description>
				<figure><link>images/1_alphabet18.png</link></figure>
			</step>
			<step>
				<description>Now say that the user also has an Alphabet button Search. They click the 'A' button to list everything starting with 'a' after doing the Query by Example search shown above. The user will receive a ' No records in query ' message. Because the Alphabet button search is checked, the Alphabet button search is now only looking at the part of the field that the Query by example search filteres, i.e. the part of the field containing records starting with 'b'. It will therefore not find anything starting with 'a'.</description>
				<figure><link>images/1_alphabet19.png</link></figure>
			</step>
			
			
			
		</steps>
		
	</section>
	</sections>
</group>

<group background="true">
	<sections>
	<section>
		<title>How to Dynamically Show/Hide the Alphabet Buttons Search Bar</title>
		<description>The Alphabet Buttons search bar is a useful addition to your Grid if your Grid is displaying a large number of records, but if there are only a few records in the Grid (perhaps because the last search that was run only returned a few records), you might want to hide the Alphabet Buttons search bar.
The following Javascript can be used to dynamically show/hide the Alphabet Buttons Search Bar:
If there are fewer than 5 records in the Grid, the Alphabet Buttons Search Bar will be  hidden.
</description>
		<example><![CDATA[records = {Grid.object}._totalRecordsInGrid; 
ele = $('{Grid.ComponentName}.ALPHABETBUTTONS');
minRecords = 5; 
if(ele) { 
    if(records < minRecords ) ele.style.display='none' ;
    else ele.style.display = ''; 
}]]></example>
	</section>	
	<section>
		
		<description>This code should be added to the 'afterAjaxCallbackComplete' event in the Javascript - System Events category. 
Watch Video </description>
		<videos>
<video>
	<name>Watch Video</name>
	<link>http://www.ajaxvideotutorials.com/V10Videos/HideShowAlphabetButtons.swf</link>
	
</video>			
			
			
		</videos>
	</section>	
	</sections>
</group>


<group background="true">
	<title>Freeform Edit Regions</title>
	<sections>
	<section>
		
		<description>Freeform Edit Regions give you the ability to place arbitrary HTML above, below, to the left, or to the right of your grid.  
</description>

	</section>	
	</sections>
</group>


<group background="true">
	<sections>
	<section>
		<title>Above Grid</title>
		<description>To add HTML above your grid simply click the button [dot_img] next to the Above grid property. The Freeform Edit Region dialog will open.  Insert the desired HTML into the work area of the dialog. If you are not sure how you want the HTML to look, click the HTML Editor button at the bottom of the dialog to open the HTML editor . The editor contains a number of features, including a WYSIWYG (What you see is what you get) page, that help make editing HTML much easier. Here you will find most of the standard tools used in word processing. This includes means of setting the font type, size, and color; creating underlined, bold, or italic text; tools for adding images, tables, and hyperlinks; right, center, and left justification; spell-checking, copy and paste tools, and more. Once you have created some HTML click the Save [save_img]  button and it will be added to the Freeform Edit Region dialog.  
</description>
		<cases>
			<case>
				<description>HTML Editor toolset  
</description>
				<figure><link>images/1_freeform3.png</link></figure>
			</case>
			<case>
				<description>HTML in Freeform Edit Region dialog  
</description>
				<figure><link>images/1_freeform.png</link></figure>
			</case>
			
		</cases>
	</section>	
	</sections>
</group>
<group>
	<sections>
	<section>
		
		
		<figure><link>images/1_alphabet20.png</link></figure>
	</section>	
	<section>
		
		<description>You can insert placeholders for the controls in your grid (e.g. {lastname}) or for the data that is in the control (e.g. {data.lastname}). 
If you have used a freeform edit region in a Grid created in V9 or earlier, you might need to change some of your placeholders to use the 'data.' prefix. After V10, labels are automatically wrapped in a span tag. In V9 and earlier, a label control was not wrapped in a span, and so the {lastname} placeholder, for example, would have been replaced with 'Smith'. But in V10, this placeholder will be replaced with 'Smith 
If your component was not expecting the to be in the replacement value, it might break your component. Changing the placeholder to use the 'data.' prefix will get you back to the V9 behavior. 
In the example shown below, if the {lastname} placeholder had been used, the image name would not have resolved correctly.</description>
		<figure><link>images/GridCo3.jpg</link></figure>
	</section>	
<section>
	<cases>
		<case>
			<title>Above grid</title>
			<description>Defines HTML that appears above the grid.</description>
			<example><![CDATA[tmpl.EditRegion.Grid.Top as C 
]]></example>
		</case>
		<case>
			<title>Below grid</title>
			<description>Defines HTML that appears below the grid.</description>
			<example><![CDATA[tmpl.EditRegion.Grid.Bottom as C ]]></example>
		</case>
		<case>
			<title>Left of grid</title>
			<description>Defines HTML that appears to the left of the grid.</description>
			<example><![CDATA[tmpl.EditRegion.Grid.Left as C ]]></example>
		</case>
		<case>
			<title>Right of grid</title>
			<description>Defines HTML that appears to the right of the grid.</description>
			<example><![CDATA[tmpl.EditRegion.Grid.Right as C ]]></example>
		</case>
		
		
	</cases>
	
	
</section>	
	
	</sections>
</group>

<group background="true">
		<title>Miscellaneous</title>
	<sections>
	<section>
	
		<description>This section contains a variety of useful features that you might want to add to your grid. Some of these features, like Search highlighting, are included here because they can be used in conjunction with multiple things in properties. The Miscellaneous section contains a number of time and date properties that you can add to your grid. It also has some language features. 
</description>
		
	</section>	
	</sections>
</group>
<group>
	<sections>
	<section>
		<title>Date Formats - Internationalization Issues</title>
		<description>You can more easily deal with situations where the date format that a user wants to use is different than Regional Settings date format for your server. For example, assume that your server is on a machine in the US where the date format is 'MM/dd/yy'. Your users in the US who want to see and enter dates using the 'MM/dd/yy' format. However, your users in the rest of the world want to use the 'dd/MM/yy' format to display and enter date values.</description>
		<steps>
			<step>
				<description>There is a new property called 'Date Format' in the 'Miscellaneous' section on the 'Grid Properties' pane. The default for this property is 'MM/dd/yy', but you can select a different value. You can override this property at runtime in Override Settings by setting the clientSideDateFormat property. For example</description>
				<cases>
					<case>
						<example><![CDATA[tmpl.clientSideDateFormat = "dd/MM/yy"]]></example>
					</case>
					<case>
						<description>You can also override this property at runtime by setting the special session. protectedclientSideDateFormat variable. This is the more likely scenario as you can set this variable for each user when they log into your application.</description>
					</case>
				</cases>
				
			</step>
			<step>
				<description>When you configure the date picker for date and time fields, you will notice that the default value for the 'Format' property has been changed from "mm/dd/yy" to " ". This indicates that the date picker format will be inherited from the global date format (set by the clientSideDateFormat property discussed above).</description>
			</step>
			<step>
				<description>When you select a date or time field in the Grid or Detail View part, a default format is defined. The format is:</description>
				<example><![CDATA[time("{grid.clientSideDateFormat}", )]]></example>
			</step>
			
			
		</steps>
	</section>	
	<section>
		<title>{grid.clientSideDateFormat}</title>
		<description>{grid.clientSideDateFormat} is a special placeholder that gets replaced at runtime with the value of the Grid's clientSideDateFormat property.
Assume that User1 logs on from New York. When User1 logs on, you set the special session. protectedclientSideDateFormat variable to "MM/dd/yy". All dates in the Grid will appear in the MM/dd/yy format. When the user makes a selection from the Date Picker, the date will be entered in the MM/dd/yy format. Assume that User2 logs on from London. When User2 logs on, you set the special session. protectedclientSideDateFormat variable to "dd/MM/yy". All dates in the Grid will appear in the dd/MM/yy format. When the user makes a selection from the Date Picker, the date will be entered in the dd/MM/yy format. When User1 or User2 submits data to the server, the date values are automatically converted to the format required by the Regional Settings of the machine on which the server is running.
</description>
	</section>
	<section>
		<description>This will all happen seamlessly, without requiring you to make any modifications to your Grid component.
As a result of this change, the old 'Date format on server does not match client' property in the Grid has been removed.
Month and Day Names- You can customize the strings used for the month and day names in the date picker.  Watch Video 
Note: If you are outside the US, you will probably want to change the default value for the Date Format to 'dd/MM/yy' for each new Grid that you build.
</description>
	</section>
	</sections>
</group>

<group background="true">
	<title>Date Picker for UX and Grid Components</title>
	<sections>
	<section>
		
		<description>In both the UX Builder and the Grid Builder it is possible to add a Date Picker to your application. The Date Picker includes, among other things, the following features.  
</description>
		<cases>
			<case>
				<description>It can be configured as a date, date/time, or time picker by setting the Date format string.  
</description>
			</case>
			<case>
				<description>Client-side Event mode allows the first and last date shown in the Date Picker to be dynamically computed using Javascript functions  
</description>
			</case>
			<case>
				<description>It can be configured to disable certain days of the week. For example, can disable dates on Saturdays and Sundays  
</description>
			</case>
			
			
		</cases>
	</section>	
	<section>
		<description>To select the new Date Picker in the Grid Builder, make sure that the ' Use Legacy Date Picker property ' in the Properties > Miscellaneous section is unchecked. The UX Builder will always use the new Date/Time Picker . To turn a date picker into a date/time picker, simply define a Date Format that includes a time portion.  
</description>
	</section>
	</sections>
</group>
<group>
	<sections>
	<section>
		
		<description>Date/Time Picker properties grid in the UX Builder 
</description>
		<figure><link>Grid and Dialog Component/images/date_time_picker_properties2.png</link></figure>
	</section>	
	<section>
		
		<description>Additional settings, including localization properties, are found in the Properties > Other   for the UX builder . In the Grid builder these same properties can be found under the Properties page under Miscellaneous . 
Date Picker settings in the Other Properties section of the UX Builder:
</description>
		<figure><link>Grid and Dialog Component/images/dialog_other_date_picker_properties2.png</link></figure>
	</section>	
	<section>
		
		<description>Date Picker settings in the Other Properties section of the Grid Builder 
</description>
		<figure><link>Grid and Dialog Component/images/dialog_other_date_picker_properties_grid.png</link></figure>
	</section>	
	
	
	
	</sections>
</group>

<group background="true">
	<sections>
	<section>
	
		<description>To create a Date Picker in the UX Builder , click on the Controls button under the design menu. Next go to the Data Controls drop-down under the same menu and select the [Textbox] control. The New Control Dialog will appear. Give your control a name and a label, like 'Length of Stay' or 'Date of Arrival' and select a data type for your control. You can choose Character, Date, Time, or Short-time as a data type, though if you choose Character this will limit you to the Time Picker properties. Click OK, the new control will be added to your list of controls. As noted in the intro, in order to turn a Date Picker into a Date/Time Picker it is necessary to change the Date Format setting. While still on the Control page, click on the control that you created. You will notice that the Date Format property is set to   
</description>
		<figure><link>Grid and Dialog Component/images/Date format option.png</link></figure>
	</section>	
		<section>
		
		<description>This  property refers to whatever you set as the Date Format under the Properties Menu in the UX builder. Put another way, is nota generic Alpha Anywhere setting but rather whatever you would like the default setting for your project to be. If you would like your application to contain both a date and time picker you need to make both of these format strings appear in the.  
</description>
		
	</section>	
	</sections>
</group>
<group>
	<sections>
	<section>
		<title>Set to include a Date and Time Picker </title>
		<steps>
			<step>
				<description>With a [Textbox] control with a Time type added to the UX Builder, go to Properties .</description>

			</step>
				<step>
				<description>Go to Other and select the Date Format property row. Click the button [dot_img] to the right of the row.</description>
		<figure><link>Grid and Dialog Component/images/Date format properties.png</link></figure>
			</step>
				<step>
				<description>The Date Format Dialog will load. Select the Date Format you wish to use from the drop-down and click the Build button next to the Time Format : box.</description>

			</step>
				<step>
				<description>The Time Format Codes Dialog will appear. Here you can either format your own string using the Format String box and the Format Code list that appears above it. Alternatively, if you want a format string that has already been created simply click the text button labeled Insert pre-defined format strings . This will determine how the Time picker appears in your control. This example creates a Time Picker showing the hours, minutes, and seconds with either an AM or PM displayed and a 0 when empty. Pre-defined format strings </description>
		<figure><link>Grid and Dialog Component/images/timeformat.png</link></figure>
			</step>
				<step>
				<description>Click OK to close the Time Format Codes dialog. You will see your new Time Format displayed in the Date Format dialog.</description>

			</step>
				<step>
				<description>Click OK to close the Date Format dialog. Your change should be visible in the Date Format definition on the Properties page.</description>
		<figure><link>Grid and Dialog Component/images/date format change.png</link></figure>
			</step>
				<step>
				<description>In the Grid Builder go to the Working Preview tab. You should see something like this when you click the Date/Time Picker drop-down button.
Date and Time Picker:
</description>
		<figure><link>Grid and Dialog Component/images/date and time.png</link></figure>
			</step>
			
		</steps>
	</section>	
	</sections>
</group>

<group background="true">
	<sections>
	<section>

		<description>If you have a Date Picker control with both a date and time portion, you will see an OK and Cancel button at the bottom of the Date Picker. Users can click on these to confirm changes when there is more than one format string. If there is only one format string these buttons will disappear completely. You can set the label on the OK and Cancel buttons by going to Controls in the UX Builder design menu, scrolling down to the Date/Time Picker Properties list, and changing the text under the 'OK button label' and/or 'Cancel button label' properties.  </description>
		<figure><link>Grid and Dialog Component/images/OK button label.png</link></figure>
	</section>	
	<section>
		
		<description>OK Button label setting and resulting control  
</description>
		<figure><link>Grid and Dialog Component/images/Confirm.png</link></figure>
	</section>	
	</sections>
</group>
<group>
	<sections>
	<section>
		<title>Creating Multiple Controls with Different Portions.</title>
		<steps>
<step>
	<description>If you want one of your controls to have a date and time format while limiting the format of some other controls there is an easy way to do this. First go to the Controls page under the UX Builder Design menu.

</description>
</step>			
<step>
	<description>Click on the control you wish to modify and on the right scroll down to the Date/Time Picker Properties list.  </description>
</step>		
<step>
	<description>On the Date Format property row click the button [dot_img] at the end of the row.

</description>
</step>					
<step>
	<description>The Date, Date/Time, Time Format Dialog will open. If you have not set the to include a Time and Date Picker format string see the instructions above on how to do this. If your setting does include both of these, then this dialog is where you can override the setting. Click on the drop-down to select the override setting you wish to use.  will make the control only displays the date format string from your .  will alter a control to only include the time format string from your .  lets you create a control with its own separate date and time format strings. Selecting is the same as seleting. Override the Setting for Date/Time Format 
</description>
	<figure><link>Grid and Dialog Component/images/Override.png</link></figure>
</step>		
<step>
	<description>If the 'Date of Arrival' control shown at the beginning of the guide is overridden with the  then it will look something like this...</description>
<figure><link>Grid and Dialog Component/images/date of arrival 2.png</link></figure>
</step>		
			
			
		</steps>
	</section>	
	</sections>
</group>



<group background="true">
	<sections>
		
		<section>
		
			<description>There are a number of additional properties that you can set in the date picker. Show weeks of the year numbers the weeks in a year and displays them vertically next to the calendar. In this example, checking ' Show weeks of the year ' displays August containing weeks 31 through 36 of the year 2015...  
</description>
			<figure><link>Grid and Dialog Component/images/show weeks of the year.png</link></figure>
		</section>
		<section>
		
			<figure><link>Grid and Dialog Component/images/weeks of the year.png</link></figure>
		</section>
		
	</sections>
	
</group>
<group>
	<sections>
		
		<section>

			<description>The ' Show days of the week ' Setting toggles on and off the days of the week. Out of the box these settings are in English. However, if you are in a non-English speaking country you can control the month and day names. To access the language strings go to the UX Builder Properties on the design menu and scroll down to the Other properties. Change the text for the " Date picker - 'Today' button text ", the " Date picker - day names " text, and the " Date picker - month names " text to your liking. To see the changes simply click on Working Preview and open your Date Picker control. Setting international text   
</description>
			<figure><link>Grid and Dialog Component/images/French.png</link></figure>
		</section>
		<section>
			<title></title>
			<description>The Has mask property on the Controls page under Date/Time Picker properties allows you to restrict what a user can enter into a Date Picker. In cases where the user is doing their own typing into a field, a mask can prevent them from entering characters and only allow them to enter numbers, or visa versa. Alpha Anywhere also has an Allow date ranges property. A date range is where you use a single date field to enter two date values. The Multiple separator property lets you decide which character(s) you want to use to distinguish the two ranges. Before you change it the separator is usually '..',  Here is a date range with .. as a separator  

</description>
			<figure><link>Grid and Dialog Component/images/date range.png</link></figure>
		</section>
		<section>
		
			<description>The Low date property sets the lowest date that a user can select on the Date Picker. Similarly the High date property sets the highest date that a user can select. Both of these properties are listed on the Controls page under Date/Time Picker properties. When you click the button next to either of the two, the ' Property Value ' dialog will open. Here you can choose either an Explicit value or a Javascript function for the low and or high date. If you want an explicit value, which a user can not go beyond, simply enter it in the Property value: text box. Alternatively you could also copy and paste into this box from your working preview. A low date set at August 11th: 
</description>
			<figure><link>Grid and Dialog Component/images/low date.png</link></figure>
		</section>
		<section>
	
			<description>If you click the Javascript function radio button in the Property value dialog, then you can use a function for the Low date or High date property instead of an absolute value. Using this feature you can prevent users from entering an end date that occurs before the start date that enter.  
</description>
			
		</section>
	</sections>
	
</group>
<group>
	<sections>
		
		<section>
			<title>Adding a Javascript Function to a Low date Property 

</title>
			<steps>
<step>
	<description>Go to the UX Controls page.</description>
</step>	
<step>
	<description>Click on [Textbox] under Data Controls and when the New Control Dialog opens create a control with the Name: start_date and the Label: Start Date. Under Data Type: select 'Date'.</description>
</step>					
<step>
	<description>Click OK .</description>
</step>		
<step>
	<description>Create a second [Textbox] control. Give it the Name: end_date, Label: End Date, and select Data type: 'Date'.</description>
</step>		
<step>
	<description>Click on the [end_date] control in your control list. Scroll down the Properties list on the Controls page until you get to Date/ Time Picker Properties .</description>
</step>		
<step>
	<description>Click on the button [dot_img] next to the Low date property to open the Property Value dialog.</description>
</step>	
<step>
	<description>In the Property Value dialog click the Javascript function radio button. In the Javascript function name: textbox type getLowDate.</description>
</step>					
<step>
	<description>Go over the the Design menu on the left and click on the Code section drop-down to open it. Select Javascript functions  </description>
</step>		
<step>
	<description>Enter the following Javascript code into the Javascript code editor.</description>
	<example><![CDATA[function getLowDate(){ 
var startDate = {dialog.object}.getValue('START_DATE'); 
if(startDate != '') return startDate; 
else return ''; 
}  ]]></example>
</step>		
<step>
	<description>Go to your Working Preview window. You should now not be able to enter a end date earlier than the start date you entered.</description>
</step>					
				
			</steps>
		</section>
		<section>
			<note>Concerning this Function: The first thing this function does is get a variable called startDate. It reads the value that the user typed into your start_date field, and if the start_date field is not equal to Null than it returns the startDatevariable. As a result, whatever value the user typed into the StartDate field has now been set as the Low date for the end_date field. Otherwise the value is left blank. This makes it easy to dynamically control the start_date and end_date of your control.

</note>
		</section>
	</sections>
	
</group>

<group background="true">
	<sections>
		
		<section>
			
			<description>The Disabled days property in Date/Time Picker Properties under UX Controls prevents users from entering data for certain days of the week. The disable a day first click the button [dot_img] next to the Disabled days property to load the Property Value Dialog. Enter the code for the day you want to disable into the Property value: textbox. Days are coded based on numbers... 0 (Sunday), 1 (Monday), 2 (Tuesday), 3(Wednesday), 4(Thursday), 5(Friday), and 6(Saturday). So, entering 0,6 as a property value will stop people from entering data on a weekend.  
Disabled Days  </description>
			<figure><link>Grid and Dialog Component/images/disabled days.png</link></figure>
		</section>
			<section>
	
			<description>One last property that you might have noticed listed under the Date/Time Picker Properties are Has events . Has events allow you to define your own Javascript for events like on Click, onNavigate, and onSelect. 'Has events' also contains onItemDraw which is a very powerful javascript event handler that lets you to customize the html layout of your date picker.  
</description>
	
		</section>
	</sections>
	
</group>
<group>
	<sections>
		
		<section>

			<description>These videos give a tour of the Date Picker features and show how the Date picker appears with various settings: 
</description>
			<videos>
				<video>
					<name>Watch Video - Part 1 </name>
					<link>http://www.ajaxvideotutorials.com/V11Videos/DateTimePicker_part1.swf</link>
				</video>
				<video>
					<name>Watch Video - Part 2</name>
					<link>http://www.ajaxvideotutorials.com/V11Videos/DateTimePicker_part2.swf</link>
				</video>
				<video>
					<name>Watch Video - Part 3  </name>
					<link>http://www.ajaxvideotutorials.com/V11Videos/DateTimePicker_part3.swf</link>
				</video>
				
				
			</videos>
		</section>
		
	</sections>
	
</group>



<group>
	<sections>
		
		<section>
			<title>Date Picker</title>
			<description>In previous updates support was added for customizing the day and month names in the calendar. Now, you can customize the day that the week starts on. In the Grid Properties there is a new property for 'First day of week'. By default this is set to 1 ( for Sunday). If you want the week to start on Monday, set this property to 2. The screen below shows how the calendar looks when the first day of the week is set to 3 (Tuesday). 
</description>
			<figure><link>images/firstdayofweek.gif</link></figure>
		</section>
		
	</sections>
	
</group>
<group>
	<sections>
		
		<section>
			<title>Keeping a Calendar Control Current</title>
			<description>When you place a Date Picker (popup calendar) control on a grid or dialog component, there are several properties that you can set.
</description>
			<cases>
				<case>
					<description>Date format
</description>
				</case>
				<case>
					<description>Low year
</description>
				</case>
				<case>
					<description>High year
</description>
				</case>
				
				
			</cases>
		</section>
		<section>
			<description>There are applications where you would want to limit the range of years shown on the control. You might also want to dynamically change the date format, depending on the preferences of the web user.
This example shows the override section of the dlg_hdatedialog component after the designer placed it on an A5W page. The date picker was the first control on the page (hence with Variable_Info[1]).
</description>
			<example><![CDATA[with tmpl_dlg_hdate
with Variable_Info[1]
.DatePicker.DateFormat = "mm/dd/yyyy"
.DatePicker.HighYear = cyear(date())
end with
componentName = "dlg_hdate"
end with ]]></example>
		</section>
		<section>
			
			<description>Note how the .DatePicker.HighYearproperty will always be set to the current year (in this case, 2006). There will be no need for future maintenance.
</description>
			<figure><link>images/WP_Override_calendar_properties.gif</link></figure>
		</section>
		
	</sections>
	
</group>


<group background="true">
	<sections>
		
		<section>
			<title>Local CSS Definitions</title>
			<description>Web Application - Grid Component - Enable/Disable Buttons
 The Grid allows you to define a client-side expression that controls whether a button in the Grid is enabled or disabled. In IE, when the button is disabled, it is rendered by IE in a manner this clearly looks disabled. However, in Firefox, Chrome and Safari, disabled buttons do not appear to be disabled (even though they are not clickable). The following technique can be used to address this issue:
In the Grid, define some local CSS (in the Local CSS property)
</description>
<example><![CDATA[button:disabled{ 
opacity: .5; 
}]]></example>
			
		</section>
<section>
			
			<description>Now, when your buttons are rendered in Firefox, they will look like this:
</description>
			<figure><link>images/firefoxdisabled.jpg</link></figure>
		</section>
				
	</sections>
	
</group>



<group background="true">
	<title>Javascript - Row Events</title>
	<sections>
		
		<section>
			
			<description>You can set JavaScript events in the JavaScript - Row Events properties section on the Grid Properties page. You can also set events using the JavaScript section of the Field Properties list on the Fields page. This allows you to define JavaScript event handlers at both the control level and at the row level. The JavaScript can make an arbitrary Ajax callback to validate data, obtain new data, populate a select box, etc. This provides the capability to create cascading lookups. Some common uses for JavaScript Row Events include:  
</description>
		<cases>
			<case>
				<description>Defining an ' onchange' event for a textbox control. </description>
			</case>
			<case>
				<description>Specifying an ' ondblclick' event for when a user double clicks on a row in the grid. </description>
			</case>
			<case>
				<description>Creating an ' onselect' event for a dropdown control to execute an Ajax callback to populate another control such as another dropdown. </description>
			</case>
			<case>
				<description>Delineating client side validation to execute when the user leaves a control by using the ' onblur' event. </description>
			</case>
			<case>
				<description>Laying out an event to make an Ajax callback to populate other fields based on an entered field value, such as filling in City and State after a zip code has been entered and the user leaves the field. </description>
			</case>
			
		</cases>
		</section>
		
	</sections>
	
</group>
<group>
	<sections>
		
		<section>
			
			<description>JavaScript - Row Events in Properties 
</description>
			<figure><link>images/01_JSrows.png</link></figure>
		</section>
		<section>
		
			<description>JavaScript Event Handlers on the Fields Page 
</description>
			<figure><link>images/01_JSrows2.png</link></figure>
		</section>
	</sections>
	
</group>



<group background="true">
	<title>Javascript - System Events 
</title>
	<sections>
		
		<section>
			
			<description>The Grid Object contains a very rich system of client-side events that you can use to customize the Grid behavior. These events are accessible through the System Events property under the JavaScript - System Events section of the Properties page. Clicking the button next to this property opens the Client-side Grid System Events dialog. This dialog shows all of the client-side events you can use and gives a short description of each event. Event handlers for client-side system events are coded using Javascript. If the event makes any data available to the executing Javascript code, then the names of any parameters used will show up in the 'Parameters' section. You can use the 'Filter' box to filter the list of events and locate a given event quickly. You can also use the 'Defined events only' checkbox to quickly find the events for which you have defined code.  
</description>
			<figure><link>images/01_JSsyseve.png</link></figure>
		</section>
		
	</sections>
	
</group>
<group>
	<sections>
		
		<section>
			
			<figure><link>images/01_JSsyseve2.png</link></figure>
		</section>
				<section>
			<title>Inserting Placeholders and Grid Methods:   
</title>
			<description>When you write the Javascript event handlers, you might want to use certain placeholders in your Javascript. These placeholders get replaced by actual values when the Grid is rendered. 
For example, the {Grid.componentName} placeholder gets replaced with the actual Grid alias at run-time. 
To insert a placeholder in your code, click the 'Insert placeholder...' hyperlink. 
Your Javascript code can call any of the methods that the Grid object exposes. To see a list of the methods, click the 'Insert Grid method...' placeholder.  
</description>
		
		</section>
				<section>
			<title>Example of How to Use Client-Side Events: 
</title>
			<description>Say you wanted to put up a dialog that said 'Searching. Please wait..' while your Grid component was performing a search. As soon as the search completed, you want to remove the message. 
To do this you would add code to the 'canSearchSubmit' event to show the message. 
A5.msgBox.show('Searching...',' 
Please wait while we search for the records.  
</description>
			<example><![CDATA[','none',function() {}); ]]></example>
		</section>
		<section>
			
			<description>Then in the 'afterSearchSubmit' event, you would clear the message.  </description>
			<example><![CDATA[A5.msgBox.hide();  ]]></example>
		</section>
		
		
	</sections>
	
</group>


<group background="true">
	<sections>
		
		<section>
			<title>Client-side events that are exposed to the developer:  
</title>
<cases>
	<case>
		<title>beforeAjaxCallback  </title>
		<description>Fires before any Ajax callback is made to the server. The e.ajaxEvent property contains the name of the action that triggered the callback. This event can be used to put up a working message while the callback is executing.  
</description>
	</case>
	<case>
		<title>afterAjaxCallbackComplete</title>
		<description>Fires after any Ajax callback has been completed and the Browser has received a response from the server. The e.ajaxEvent property contains the name of the action that triggered the callback.  
</description>
	</case>
	<case>
		<title>afterAlphabetButtonSearch  </title>
		<description>Fires after the user has executed an Alphabet button search in the Grid part.  
</description>
	</case>
	<case>
		<title>afterDetailViewCancelEdits</title>
		<description>Fires after user has cancelled edits in the Detail View part.  
</description>
	</case>
	<case>
		<title>afterDetailViewClose  </title>
		<description>Fires after the Detail View has been closed.  
</description>
	</case>
	<case>
		<title>afterDetailViewDeleteRecord</title>
		<description>Fires after the user has deleted a record in the Detail View.  
</description>
	</case>
	<case>
		<title>afterDetailViewNewRecord</title>
		<description>Fires after the user has clicked a hyperlink or button to enter a new row in the Detail View.  
</description>
	</case>
	<case>
		<title>afterDetailViewOpen  </title>
		<description>Fires after the detail view for a particular record is shown.  
</description>
	</case>
	<case>
		<title>afterDetailViewSubmit  </title>
		<description>Fires after the user has submitted edits made to a record in the Detail View. The 'hasErrors' parameter is true if there were any errors when committing the data.  
</description>
	</case>
	<case>
		<title>afterDetailViewSwitchFromEditable</title>
		<description>Fires when the user has switched the current record in the Detail View from editable to not editable. Only fires if Detail View is set to edit on demand.  
</description>
	</case>
	<case>
		<title>afterDetailViewSwitchToEditable</title>
		<description>Fires when the user has switched the current record in the Detail View to be editable. Only fires if Detail View is set to edit on demand.  
</description>
	</case>
	<case>
		<title>afterGridCancelEdits  </title>
		<description>Fires after the user has cancelled edits in the Grid part by clicking on the Cancel button. Contrast with afterRowCancelEdits.  
</description>
	</case>
	<case>
		<title>afterGridSubmit  </title>
		<description>Fires after the user has submitted edits to the Grid part and the server has processed the edits. The 'hasErrors' parameter is true if there were any errors when committing the data.  
</description>
	</case>
	<case>
		<title>afterOpenLookup  </title>
		<description>Fires after the user has opened a Lookup Grid window.  
</description>
	</case>
	<case>
		<title>afterPageNavigate</title>
		<description>Fires after the user has navigated to a new page of records.  
</description>
	</case>
	<case>
		<title>afterQBEHide</title>
		<description>Fires after the user has hidden the QBE (Query by Example) row.  
</description>
	</case>
	<case>
		<title>afterQBESearch</title>
		<description>Fires after the user has performed a QBE (Query by Example) search. The 'qbeType' parameter specifies the name of the option from the QBE menu that was selected.  
</description>
	</case>
	<case>
		<title>afterQBEShow</title>
		<description>Fires after the user has shown the QBE (Query by Example) row.  
</description>
	</case>
	<case>
		<title>afterQuickSearch  </title>
		<description>Fires after the user has performed a Quick Search  
</description>
	</case>
	<case>
		<title>afterRowCancelEdits  </title>
		<description>Fires after the user can cancelled edits on a Grid row.  
</description>
	</case>
	<case>
		<title>afterRowCollapse</title>
		<description>Fires after the user has collapsed a previously expanded row expander.  
</description>
	</case>
	<case>
		<title>afterRowDelete</title>
		<description>Fires after the user has deleted a record in a Grid by clicking the 'Delete Record' button in a Grid row.  
</description>
	</case>
	<case>
		<title>afterRowExpand</title>
		<description>Fires after the user has expanded a row expander.  
</description>
	</case>
	<case>
		<title>afterRowPopulate</title>
		<description>This event fires when a Grid row has been populated with data using the Grid's .populateRow() method. It can be used to set default values in new record rows in the Grid part. To see how this event can be used watch this video.  
</description>
<videos>
	<video>
		<name>watch this video</name>
		<link>http://www.ajaxvideotutorials.com/V11Videos/SettingDefaultValuesInNewRecordsInGridPart.swf</link>
	</video>
	
</videos>
	</case>
	<case>
		<title>afterRowSubmit  </title>
		<description>Fires after the user has clicked the submit row button in a Grid row and the server has processed the request. The 'hasErrors' parameter is true if there were any errors when committing the data.  </description>
	</case>
	<case>
		<title>afterRowSwitchFromEditable</title>
		<description>Fires if the Grid is set to 'Edit on Demand' and the user has switched from editable to not-editable mode.</description>
	</case>
	<case>
		<title>afterRowSwitchToEditable  </title>
		<description>Fires if the Grid is set to 'Edit on Demand' and the user has switched to editable mode.  
</description>
	</case>
	<case>
		<title>afterSearchClear  </title>
		<description>Fires after the user has cleared the Search part  
</description>
	</case>
	<case>
		<title>afterSearchSubmit  </title>
		<description>Fires after the user has clicked the submit button on the Search part and the server has processed the request.  
</description>
	</case>
	<case>
		<title>afterSearchSaved  </title>
		<description>Fires after the user saves the Search Part criteria.  
</description>
	</case>
	<case>
		<title>afterSavedSearchLoaded  </title>
		<description>Fires after the user loads Search Part criteria that were previously saved.  
</description>
	</case>
	<case>
		<title>afterSetRowsPerPage  </title>
		<description>Fires after the user has changed the number of records per page that the Grid shows.  
</description>
	</case>
	<case>
		<title>afterSort  </title>
		<description>Fires after the user has sorted the records in the Grid by clicking on a Grid column title.  
</description>
	</case>
	<case>
		<title>canAlphabetButtonSearch</title>
		<description>Fires when the user tries to perform a Alphabet button search. If the event handler contains 'return false;', the event will be cancelled.  
</description>
	</case>
	<case>
		<title>canDetailViewCancelEdits</title>
		<description>Fires when the user tries to cancel edits in the Detail View. If the event handler contains 'return false;', the event will be cancelled.  
</description>
	</case>
	<case>
		<title>canDetailViewClose</title>
		<description>Fires when the user tries to close the Detail view. If the event handler contains 'return false;', the event will be cancelled.  
</description>
	</case>
	<case>
		<title>canDetailViewDeleteRecord  </title>
		<description>Fires when the user tries to delete a record in the Detail View. If the event handler contains 'return false;', the event will be cancelled.  
</description>
	</case>
	<case>
		<title>canDetailViewNewRecord  </title>
		<description>Fires when the user tries to enter a new record in the Detail View by clicking the 'Enter new record' icon or hyperlink. If the event handler contains 'return false;', the event will be cancelled (i.e. the new record row will not be shown).  </description>
	</case>
	<case>
		<title>canDetailViewOpen  </title>
		<description>Fires when the user tries to display the Detail View for a row in the Grid part. If the event handler contains 'return false;', the event will be cancelled.  
</description>
	</case>
	<case>
		<title>canDetailViewSubmit  </title>
		<description>Fires when the user tries to submit edits made to a record in the Detail View. If the event handler contains 'return false;', the event will be cancelled.  
</description>
	</case>
	<case>
		<title>canDetailViewSwitchFromEditable</title>
		<description>Fires if the Detail View is set to 'edit on demand' and the user tries two switch from editable mode to non-editable mode. If the event handler contains 'return false;', the event will be cancelled.  
</description>
	</case>
	<case>
		<title>canDetailViewSwitchToEditable  </title>
		<description>Fires if the Detail View is set to 'edit on demand' and the user tries two switch to editable mode. If the event handler contains 'return false;', the event will be cancelled.  
</description>
	</case>
	<case>
		<title>canGridCancelEdits</title>
		<description>Fires when the user tries to cancel edit made to the Detail View record.  
</description>
	</case>
	<case>
		<title>canGridSubmit  </title>
		<description>Fires when the user tries to submit changes made to records in the Grid part by clicking the 'Submit' button for the entire Grid (not the submit button on individual Grid rows). If the event handler contains 'return false;', the event will be cancelled.  
</description>
	</case>
	<case>
		<title>canOpenLookup  </title>
		<description>Fires when the user tries to open the Lookup Grid window. If the event handler contains 'return false;', the event will be cancelled.  
</description>
	</case>
	<case>
		<title>canPageNavigate</title>
		<description>Fires when the user tries to navigate to another page of records. If the event handler contains 'return false;', the event will be cancelled.  
</description>
	</case>
	<case>
		<title>canQBEHide</title>
		<description>Fires when the user tries to close the QBE row. If the event handler contains 'return false;', the event will be cancelled.  
</description>
	</case>
	<case>
		<title>canQBESearch  </title>
		<description>Fires when the user tries to do a QBE search. If the event handler contains 'return false;', the event will be cancelled. The 'qbeType' parameter specifies the name of the option from the QBE menu that was selected.  
</description>
	</case>
	<case>
		<title>canQBEShow</title>
		<description>Fires when the user tries to show the QBE row (if it was previously hidden). If the event handler contains 'return false;', the event will be cancelled.  
</description>
	</case>
	<case>
		<title>canQuickSearch</title>
		<description>Fires when the user tries to perform a Quick Search. If the event handler contains 'return false;', the event will be cancelled.  
</description>
	</case>
	<case>
		<title>canRowCancelEdits  </title>
		<description>Fires when the user tries to cancel edits made to an individual row in the Grid part. If the event handler contains 'return false;', the event will be cancelled.  
</description>
	</case>
	<case>
		<title>canRowCollapse  </title>
		<description>Fires when the user tries to collapse a row that was previously expanded. If the event handler contains 'return false;', the event will be cancelled.  
</description>
	</case>
	<case>
		<title>canRowDelete  </title>
		<description>Fires when the user tries to delete a row in the Grid part.  
</description>
	</case>
	<case>
		<title>canRowExpand  </title>
		<description>Fires when the user tries to expand a row with a Row Expander icon. If the event handler contains 'return false;', the event will be cancelled.  
</description>
	</case>
	<case>
		<title>canRowSubmit  </title>
		<description>Fires when the user tries to submit changes to an individual row in the Grid part. If the event handler contains 'return false;', the event will be cancelled.  
</description>
	</case>
	<case>
		<title>canRowSwitchFromEditable</title>
		<description>Fires if the Grid is set to 'edit on demand' and the user tries to swtich back to non-editable mode. If the event handler contains 'return false;', the event will be cancelled.  
</description>
	</case>
	<case>
		<title>canRowSwitchToEditable</title>
		<description>Fires if the Grid is set to 'edit on demand' and the user tries to editable mode. If the event handler contains 'return false;', the event will be cancelled. 'newRecordRowsVisible' - true/false depending on whether the new record rows are being shown.  
</description>
	</case>
	<case>
		<title>canSearchClear  </title>
		<description>Fires when the user tries to clear the search criteria in the Search part. If the event handler contains 'return false;', the event will be cancelled.  
</description>
	</case>
	<case>
		<title>canSearchSubmit  </title>
		<description>Fires when the user tries to perform a search by clicking the Search button in the Search part. Also fires if any control in the Search part is set to auto-submit (cascading dropdown controls can auto-submit). If the event handler contains 'return false;', the event will be cancelled.  
</description>
	</case>
	<case>
		<title>canSetRowsPerPage  </title>
		<description>If the event handler contains 'return false;', the event will be cancelled.  
</description>
	</case>
	<case>
		<title>canSort  </title>
		<description>Fires when the user tries to sort the Grid by clicking on a column title. If the event handler contains 'return false;', the event will be cancelled.  
</description>
	</case>
	<case>
		<title>onDetailViewRender  </title>
		<description>Fires after the Detail View has been rendered.  
</description>
	</case>
	<case>
		<title>onDetailViewStateChange</title>
		<description>Fires when the Detail View state has changed. Possible states are 'view', 'change' and 'enter'.  
</description>
	</case>
	<case>
		<title>onGridRefresh  </title>
		<description>Fires when a Grid has been refreshed.  
</description>
	</case>
	<case>
		<title>onGridRender  </title>
		<description>Fires after all of the records in the Grid part have been rendered.  
</description>
	</case>
	<case>
		<title>onNewRowsHide</title>
		<description>Fires when the user has hidden the new records rows in the Grid part. (The Grid must have been set to only show new record rows on request).  
</description>
	</case>
	<case>
		<title>onNewRowsShow  </title>
		<description>Fires when the user has shown the new records rows in the Grid part. (The Grid must have been set to only show new record rows on request).  
</description>
	</case>
	<case>
		<title>canNewRowsShow  </title>
		<description>Fires when the user tries to shown the new records rows in the Grid part. (The Grid must have been set to only show new record rows on request). Function must return either true or false. If false, action is aborted. e.rowsInEditMode is the number of existing Grid rows that are currently in edit mode.  
</description>
	</case>
	<case>
		<title>onObjectInitialize  </title>
		<description>Fires after the Grid object has been initialized. You use this event to override settings that are defined in the Grid object.  
</description>
	</case>
	<case>
		<title>onRowBlur</title>
		<description>Fires when a Grid row loses focus.  
</description>
	</case>
	<case>
		<title>onRowFocus</title>
		<description>Fires when a Grid row gets focus. Only fires if Grid is editable. See onRowSelect.  
</description>
	</case>
	<case>
		<title>onRowSelect</title>
		<description>Fires when a Grid row is selected. Fires when a row is selected for both read only and editable Grids.  
</description>
	</case>
	<case>
		<title>onRowRefresh </title>
		<description>Fires when a Grid row is refreshed.  
</description>
	</case>
	<case>
		<title>onRowRender</title>
		<description>Fires when a Grid row is rendered.  
</description>
	</case>
	<case>
		<title>onRowStateChange</title>
		<description>Fires when the state of a Grid Row has changed. Possible states are 'view', 'change' and 'enter'.  
</description>
	</case>
	<case>
		<title>onGridStateChange</title>
		<description>Fires when the state of the Grid Row has changed. 'isDirty' can be either true (if at least one row in the Grid is dirty), or false.  
</description>
	</case>
	<case>
		<title>onSearchRender</title>
		<description>Fires after the Search part has been rendered.  
</description>
	</case>
	<case>
		<title>canLookupGridSelectRow</title>
		<description>Fires before the user selects a row in a Lookup Grid. If the event handler contains 'return false;', the event will be cancelled.  
</description>
	</case>
	<case>
		<title>afterLookupGridFillinValues</title>
		<description>Fires after a record has been selected from a Lookup Grid and the values from the Lookup Grid have been filled into the Parent Grid.  
</description>
	</case>
	<case>
		<title>onGridRowCheck</title>
		<description>If the checkbox column for the Grid has been turned on, fires when the checkbox is checked, or unchecked.  </description>
	</case>
	<case>
		<title>onGridInitializeComplete</title>
		<description>Fires after the Grid has been completely initialized and all HTML has been rendered. Does not fire on subsequent Ajax callbacks.  
</description>
	</case>
	<case>
		<title>canNamedLayoutSelect</title>
		<description>Fires when the user tries to change the named Layout (if multiple layout designs are enabled). If the event handler contains 'return false' the event will be cancelled and the layout will not be changed.  
</description>
	</case>
	<case>
		<title>afterNamedLayoutSelect</title>
		<description>Fires after the user has changed the current named Layout.  
</description>
	</case>
	<case>
		<title>beforeAutoRefresh  </title>
		<description>Fires when an auto-refresh of the Grid occurs.  
</description>
	</case>
	<case>
		<title>onGridRenderComplete</title>
		<description>Very last event to fire after the Grid has been completely rendered and all system Javascript methods to initialize the Grid have fired. Contrast with onGridRender which fires before all system Javascript events have fired.  
</description>
	</case>
	<case>
		<title>onImageError</title>
		<description>Fires when an image in an  element was not found. The e object passed in has an 'element' property. To get the id of the image tag refer to 'e.element.id'. To set the src of the image tag, set the 'e.element.src' property.  
</description>
	</case>
	<case>
		<title>beforeHTMLReportExport  </title>
		<description>Fires when a user clicks on a toolbar button to export an HTML report to PDF, Excel, Word or text. You can use this event to put up a custom 'working...' message. To dismiss the custom message you can add code to the 'afterAjaxCallbackComplete' event.  
</description>
	</case>
	<case>
		<title>webSocketOnMessage</title>
		<description>Fires when a web-socket server message is received. The message contents is in the e.message parameter.  
</description>
	</case>
	<case>
		<title>webSocketServerClose</title>
		<description>Fires when the web-socket server is closed.  
</description>
	</case>
	
	
</cases>
		</section>
		
	</sections>
	
</group>
<group>
	<title>Javascript - Other </title>
	<sections>
		
		<section>
		
		</section>
		
	</sections>
	
</group>


<group background="true">
	<sections>
		
		<section>
			<title>Javascript Function Declarations 
</title>
			<description>The Javascript Function Declarations property allows allow you to define Javascript functions that can be called from Javascript events. These functions will be added to the page header and must contain valid Javascript syntax.  
</description>
			<figure><link>images/01_JSfunc2.png</link></figure>
		</section>
		
	</sections>
	
</group>
<group>
	<sections>
		
		<section>
			
			<description>An example of a Javascript Function Declaration 
</description>
			<figure><link>images/01_JSfunc.png</link></figure>
		</section>
		
	</sections>
	
</group>


<group background="true">
	<sections>
		
		<section>
			<title>JavaScript Linked files </title>
			<description></description>
			<figure><link></link></figure>
		</section>
		
	</sections>
	
</group>


<group background="true">
	<sections>
		
		<section>
			<title>Watch Events </title>
			<description>The client-side Calculated fields, Show/hide fields, Enable expressions and Conditional styles are all implemented using 'watch' events. For example, if you examine the source in the Browser for a page the defines a calculated field for 'extendedtotal' using the expression 'round(price * quantity,2)', you will see the following Watch event has been defined automatically:
</description>
		<example><![CDATA[GRID1_GridObj._gridRowWatches
'CALC_G_EXTENSION'= { watch:
'PRICE','QUANTITY', on
change: function(data) { var PRICE = $u.s.toNum($gvs('GRID1.V.R' + data.rowNumber + '.PRICE')); var QUANTITY = $u.s.toNum($gvs('GRID1.V.R'
+ data.rowNumber + '.QUANTITY')); GRID1_GridObj._setValue('G','EXTENSION',data.rowNumber,'' + $u.n.roundPRICE*QUANTITY),2
?; } }]]></example>
		</section>
<section>
			
			<description>The above Javascript adds a new watch event (called 'CALC_G_EXTENSION'). It watches the PRICE and QUANTITY fields. The on change event gets passed an object called 'data' that has the rowNumber of the row in which the change takes place. It then gets to local variables, PRICE and QUANTITY which are the values in the corresponding controls in the Grid part. Finally, it uses the ._setValue() method to set the value of the EXTENSION field to the result of the expression.
You can define your own custom Watch events if the automatically generated watch events (defined when you create a client-side calculated field, etc.) do not do exactly what you want. In most cases you should not need to use custom Watch events, but for power users, its nice to have this capability. You can define Custom Watch events for the Search part, Grid part and Detail View part. Go to the 'Javascript- Other' section in the appropriate properties page and click the builder for 'Watch events'.
You can create as many watch events as you want. For each watch event, you specify a unique (arbitrary) name to identify the event, the names of the fields you want to watch and the javascript to execute when the value in any of the watched fields is changed.
When you define the watch event, you can (optionally) use special 'helper' functions to simplify your javascript. For example the helper function *$('quantity') expands to:
$gvs('GRID1.V.R' + data.rowNumber + '.QUANTITY').
The above example Watch event could be written using 'helper' functions as follows:
</description>
		<example><![CDATA[GRID1_GridObj._gridRowWatches 'CALC_G_EXTENSION'= { 
        watch: 'PRICE','QUANTITY',
        on change: function(data) {
        var PRICE = *gvn('PRICE'); 
        var QUANTITY = *gvn('QUANTITY'); 
        *svs('Extension',$u.n.roundPRICE*QUANTITY),2 ?;
        }
}
]]></example>
<note>'Helper' functions can only be used when you create custom watch events. The 'helper' functions all start with * and are documented in the Watch Event builder.)</note>
		</section>
				<section>
			<title>Example - How to Dynamically Set a Field Label</title>
			<description>The generic Javascript Watch events make it very easy to dynamically set a control's label at run-time.
For example, say that your Grid has a field called 'COUNTRY'. If the value in COUNTRY is 'USA', you want to set the label on the ZIP field to 'Zip code', otherwise you want to set it to 'Postal Code'.
</description>
<note>This example assumes that the Grid is set to display data in Form mode.

</note>
		</section>
		
		
		<section>
			
			<description>Here is how you would do it:</description>
			<steps>
				<step>
					<description>Create a new Javascript Watch event (Properties pane, Javascript section, Watch event) and give it a name (any name will do).
</description>
				</step>
					<step>
					<description>Set the type to 'Other'.
</description>
				</step>
					<step>
					<description>Specify that the field you want to watch is COMPANY (this means that whenever the value in the COMPANY field changes, the Javascript that sets the label value will execute).
</description>
				</step>
					<step>
					<description>Enter this code for the Watch event:
</description>
<example><![CDATA[var COMPANY = *gv('COMPANY'); 
var labelValue = 'Zip code'; 
if( COMPANY != 'USA') labelValue = 'Postal Code'; 
$('{grid.componentname}.LBL.R' + data.rowNumber + '.'+'ZIP'+'').innerHTML = labelValue;]]></example>
				</step>
				
				
			</steps>
		</section>
	</sections>
	
</group>



<group background="true">
	<sections>
		
		<section>
			<title>Javascript Actions </title>
			<description></description>
		
		</section>
		
	</sections>
	
</group>


<group background="true">
	<sections>
		
		<section>
			<title>Ajax Windows </title>
			<description>Animation effects have been added for pop-up Ajax windows. 
Ajax windows that contain IFrames, which in turn contain display PDF files, cannot be animated. As a result, the Animation property has not been made available for Ajax windows that host .a5w pages, since .a5w pages are hosted in an IFrame. 

There are several animation methods that have been exposed. The 'slide' and 'fade' methods are based on methods in the jQuery core library. All of the other methods are based on method in the jQueryUI library. By default, both of these libraries are loaded. The Web Project Properties dialog contains settings which control if these libraries are loaded, and from where they should be loaded. 

You can control the animation effect for the window display and the window close. You can also control the animation speed. If you use the smart field to choose an animation, the animation builder will pop up.   
</description>
			<figure><link>http://documentation.alphasoftware.com/help/Client/Guide/Design/View/Component/images/animation_builder.png</link></figure>
		</section>
		<section>
			<description>Certain animation styles will mess up the positioning of windows. If you find this to be the case, you should stick with the 'Fade' style for the 'show' animation. 
</description>
			<videos>
				<video>
					<name>Watch Video 
</name>
					<link>http://www.ajaxvideotutorials.com/V11Videos/AnimatingAjaxWindows.swf</link>
				</video>
				
				
			</videos>
		</section>
	</sections>
	
</group>


<group background="true">
	<sections>
		
		<section>
			<title>Background Style Property
</title>
			<description>You can now set a background style property for pop-up Ajax windows. This will allow you, for example, to set a background color, or background image for the window. 
</description>
		
		</section>
		
	</sections>
	
</group>
<group>
	<sections>
		
		<section>
			<title>Centering Content</title>
			<description>Ajax Windows that display Grids, Dialogs, or Custom Components can now automatically center the content in the window. You can specify if you want vertical, horizontal or both vertical and horizontal centering. 
The image below shows a pop-up Ajax window where a background color has been set, and the window contents has been centered on both the vertical and horizontal dimension. 
</description>
<videos>
	<video>
		<name>video on Ajax Windows</name>
		<link>http://www.ajaxvideotutorials.com/V10Videos/PopWindowPosition_Part1.swf</link>
	</video>
	
</videos>
		</section>
		<section>
			<steps>
				<step>
					<description>Create a Window linked to a button
</description>
				</step>
				<step>
					<description>add a button to fields list
</description>
				</step>
				<step>
					<description>make an onClick Event for it
</description>
				</step>
				<step>
					<description>Add Action - Ajax Pop-up window
</description>
				</step>
				<step>
					<description>Centering a Window - one of the options in the Ajax pop-up definition
</description>
				</step>
				
				
			</steps>
			
		</section>
		<section>
			
			<description>See Also: JQuery Support  
</description>
		</section>
		
	</sections>
	
</group>


<group background="true">
	<title>Advanced </title>
	<sections>
		
		<section>
			
			<description></description>
			<figure><link></link></figure>
		</section>
		
	</sections>
	
</group>

<group background="true">
	<title>Grid Update Settings</title>
	<sections>
		
		<section>
			
			<description>The Grid Update Settings page only appears if the grid is editable (updateable).
</description>
			
		</section>
		
	</sections>
	
</group>
<group background="true">
	<sections>
		
		<section>
			<title>Permissions</title>
			<description><p>When you create or edit a web component you might want to give some users the ability to delete, modify, and or insert records. At the same time, you might want to deny this ability to other users. In order to achieve this in Alpha Anywhere you will first have to define what groups you wish to create by setting up your web security. Once you have some groups and users defined   setting what permission each group has over a component is relatively easy.  
</p><p>
Below you can see how adding permissions to a grid alters their final look. This is the same grid that was created in the 'Creating a Grid for Microsoft Access Using the SQL Builder' Guide. The user on the left can enter information into open fields, delete it, save entered information, undo changes using the undo button, and ultimately Submit everything. The grid on the right has had security added to it such that only one group has access to it. Users without access can see records in this grid but they can not alter those records or add new ones. See also:  Web Application Security Guide</p>
</description>
		
		</section>
		
	</sections>
	
</group>

<group>
	<sections>
		
		<section>
		
			<figure><link>file:///C:/dev/AlphaHelp/helpfiles/Server/Guide/Design/View/Grid/images/B_WithoutSecurity.png</link></figure>
		</section>
		<section>
			<title>Controlling Record Updates: </title>
<steps>
	<step>
		<description>If you have set up Web Security already, Go to the Web Projects Control Panel and click [page_img] to open the Select Grid Component Dialog.</description>
		<cases>
			<case>
				<description>1. Alternatively, click New on the Web Projects Control Panel toolbar.</description>
			</case>
			<case>
				<description><![CDATA[2. In the New File Dialog select Web Component and click Next > .]]></description>
			</case>
			<case>
				<description><![CDATA[3. When asked what type file you want to create, click Grid and Next > .]]></description>
			</case>
			
		</cases>
	</step>
	<step>
		<description>The Select Grid Component Dialog will load. Leave the 'Start with a blank Grid Component' radio button checked and click OK .</description>
	</step>
	<step>
		<description>The Grid Builder Dialog will load. On the Component Type page at the top of the Component Type tree menu select the Grid is: Updateable radio button. The Update Settings option will not appear in the Component Type tree if you do not select Updateable.
</description>
<figure><link>file:///C:/dev/AlphaHelp/helpfiles/Server/Guide/Design/View/Grid/images/B_addrecords.png</link></figure>
	</step>
	<step>
		<description>Go to Grid > Update Settings .</description>
	</step>
	<step>
		<description>Under the Update Settings Permissions options you can adjust a groups ability to delete, update, or insert records into a component. The permission property for a grid is compared to a protected session variable named session.protectedSecurityLevel. Your application code should set this variable to reflect the permissions of the current user</description>
	</step>
	
	
</steps>			
			
		</section>
	</sections>
	
</group>


<group background="true">
	<sections>
		
		<section>
			<title>Allow delete </title>
			<example><![CDATA[tmpl.edit.allow_delete as L ]]></example>
			
		</section>
		
	</sections>
	
</group>

<group background="true">
	<sections>
		
		<section>
			<title>Delete Security Groups </title>
			<description>If you want to allow the user to delete records, optionally change the Permissions > Delete Security Groups. The groups of users you select from the Select Groups Allowedmenu on the Delete Allowed Security Groups Dialog will be allowed to delete records. If a user does not belong to one of these allowed groups then delete check boxes in the grid and delete buttons in the detail view will not be displayed.  
</description>
			<figure><link>file:///C:/dev/AlphaHelp/helpfiles/Server/Guide/Design/View/Grid/images/B_Deleterecords.png</link></figure>
		</section>
		<section>
			<title>Deleting Records:</title>
			<description></description>
			<figure><link></link></figure>
		</section>
	</sections>
	
</group>



<group background="true">
	<sections>
		
		<section>
			<title>Allow Update </title>
			<description></description>
			<example><![CDATA[tmpl.edit.allow_update as L]]></example>
		</section>
		
	</sections>
	
</group>


<group background="true">
	<sections>
		
		<section>
			<title>Update Security Settings </title>
			<description>Similarly, if you want to allow the user to update records, optionally change the Permissions > Update Security Groupssettings by clicking the text next to the option. The groups you select will be allowed to edit records. If the user is logged on with insufficient security for update, delete and insert, then the 'Submit' button on the Grid will not be displayed. Insert security level: 
</description>
			<example><![CDATA[tmpl.edit.InsertSecurityLevel as N ]]></example>
		</section>
		<section>
			<description>Delete security level  </description>
			<example><![CDATA[tmpl.edit.DeleteSecurityLevel as N 
]]></example>
			
		</section>
			<section>
			<description>Update security level  </description>
			<example><![CDATA[tmpl.edit.UpdateSecurityLevel as N ]]></example>
			
		</section>
		<section>
			<title>Modifying Records:</title>
			<description></description>
			
		</section>
	</sections>
	
</group>
<group background="true">
	<sections>
		
		<section>
			<title>Allow insert </title>
			<description></description>
			<example><![CDATA[tmpl.edit.allow_insert as L ]]></example>
		</section>
		
	</sections>
	
</group>


<group background="true">
	<sections>
		
		<section>
			<title>Insert Security Groups </title>
			<description>If you want to allow the user to insert records change the Permissions > Insert Security Groups setting  . Users with an insert security permission will be allowed to insert records. If the user is logged on with an insufficient Security Level then the 'Add' button is in the Detail View will not be displayed.  
</description>
			
		</section>
		<section>
			<title>Inserting Records: </title>
			<description></description>
		
		</section>
	</sections>
	
</group>
<group background="true">
	<sections>
		
		<section>
			<title>Number of new record rows </title>
			<description>The Number of new record rows property changes the number of empty new record rows at the bottom of an updateable grid. The default number of empty rows is 3.  
</description>
	<example><![CDATA[tmpl.edit.number_of_insert_rows as N ]]></example>
		</section>
		
	</sections>
	
</group>


<group background="true">
	<sections>
		
		<section>
			<title>New record rows position</title>
			<description>You can specify where the empty rows that are used to add new records to an editable grid should be positioned. Empty rows can be placed above, or below the existing records by choosing either Top or Below from the dropdown. Below is the default.  
</description>
			
		</section>
		
	</sections>
	
</group>
<group>
	<sections>
		<section>
	
			<description>New record rows position set to Below.
</description>
			<figure><link>images/01_emptybelow.png</link></figure>
		</section>
		<section>
			
			<description>New record rows position set to Top
</description>
			<figure><link>images/01_emptybelow2.png</link></figure>
		</section>
		
	</sections>
	
</group>

<group background="true">
	<sections>
		
		<section>
			<title>Customization </title>
			<description></description>
			<cases>
				<case>
					<title>Submit button label
</title>
					<description>Specifies the label of the submit button. 
</description>
<example><![CDATA[tmpl.edit.submit_button_text as C]]></example>
				</case>
				<case>
					<title>Submit button in-line style</title>
					<description></description>
				</case>
				<case>
					<title>Delete check box label</title>
					<description>Specifies the label of the delete check box. 
</description>
<example><![CDATA[tmpl.edit.delete_check box_label as C]]></example>
				</case>
				<case>
					<title>Has Cancel button</title>
					<description>Specifies whether the grid has a cancel button. </description>
					<example><![CDATA[tmpl.edit.has_Cancel_button as L]]></example>
				</case>
				<case>
					<title>Cancel button label</title>
					<description>Appears is Has Cancel button is selected. Specifies the label of the cancel button. 
</description>
<example><![CDATA[tmpl.edit.cancel_button_text as C]]></example>
				</case>
				<case>
					<title>Confirm before submit</title>
					<description>Specifies whether the user must confirm changes before they are submitted. </description>
<example><![CDATA[tmpl.edit.confirm_before_submit as L]]></example>
				</case>
				<case>
					<title>Confirm message</title>
					<description>The message displayed in the confirm message box. 
</description>
<example><![CDATA[tmpl.edit.confirm_before_submit_message as C]]></example>
				</case>
				<case>
					<title>Target page</title>
					<description>The next page to display if the update is successful. Clicking the button next to the Target page  property will display the Specify Target Page  dialog. The Target page can be a specified full URL, return to 'this' page, or a .A5W or .HTML page from your project. Make a selection and click OK . The target page will appear if the update is successful.  
</description>
<example><![CDATA[tmpl.edit.TargetPage as C]]></example>
				</case>
				<case>
					<title>Auto-increment field label</title>
					<description></description>
				</case>
				
			</cases>
		</section>
		
	</sections>
	
</group>
<group background="true">
	<sections>
		
		<section>
			<title>Editing Properties </title>
			<description></description>
			<figure><link></link></figure>
		</section>
		
	</sections>
	
</group>
<group>
	<sections>
		
		<section>
			<title>Validation </title>
			<steps>
				<step>
					<description>Optionally, uncheck Validation > Only validate edited fields. Unchecking this field will speed the process of your page.
</description>
				</step>
					<step>
					<description>Optionally, change the way errors will be reported in the Validation > Template for reporting errorsfield. The following placeholders are available.
</description>
<cases>
	<case>
		<description>{Field} - the name of the field that had the error
</description>
	</case>
	<case>
		<description>{Value} - the value that was placed into the field
</description>
	</case>
	<case>
		<description>{Error} - the error message returned by the Application Server.
</description>
	</case>
	
</cases>
				</step>
					<step>
					<description>Optionally, change the instruction message that appears in the Validation > Instruction messagefield when an error occurs.
</description>
				</step>
					<step>
					<description>Optionally, change the error page row heading in the Validation > Error page 'Row' headingfield.
</description>
				</step>
					<step>
					<description>Optionally, change the error page error heading in the Validation > Error page 'Error' headingfield.
</description>
				</step>
				
				
			</steps>
		</section>
		<section>
			<cases>
				<case>
					<title>Only validate edited fields</title>
					<description>When checked, you avoid validating fields that have not been edited, which speeds the processing of the page.</description>
					<example><![CDATA[tmpl.OnlyValidateEditedFields as L ]]></example>
				</case>
				<case>
					<title>Template for reporting errors</title>
					<description>Specifies the format of error messages.</description>
					<example><![CDATA[tmpl.ValidationSettingsErrorTemplate as C ]]></example>
				</case>
				<case>
					<title>Instruction message</title>
					<description>Appears when a validation error occurs and tells the user what to do next.</description>
					<example><![CDATA[tmpl.ValidationSettingsMessage as C ]]></example>
				</case>
				<case>
					<title>Error page 'Row' heading</title>
					<description>Specifies the label that appears above the row or column number when a validation error message appears.</description>
					<example><![CDATA[tmpl.ValidationErrorsRowColumnTitle as C ]]></example>
				</case>
				<case>
					<title>Error page 'Error' heading</title>
					<description>Specifies the label that appears above the error message when a validation error message appears.</description>
					<example><![CDATA[tmpl.ValidationErrorsErrorColumnTitle as C ]]></example>
				</case>
				
			</cases>
			
			
		</section>
	</sections>
	
</group>
<group background="true">
	<sections>
		
		<section>
			<title>New Records Edit Style</title>
			<description>The New records edit style property has two options. The first, AlwaysShown, always shows a row for entering a new record in an updateable grid. The second, ShowOnDemand, creates a link that replaces the edit row. Clicking the link will reveal or hide the new record row on demand. 
</description>
			
		</section>
		
	</sections>
	
</group>
<group>
	<sections>
		
		<section>
			
			<description>AlwaysShown setting
</description>
			<figure><link>images/01_Alwaysshow.png</link></figure>
		</section>
		<section>
			
			<description>ShowOnDemand creates a New Records link
</description>
			<figure><link>images/01_Alwaysshow2.png</link></figure>
		</section>
		
	</sections>
	
</group>

<group background="true">
	<sections>
		
		<section>
			<title>Row Edit Style</title>
			<description>The Row edit style  property comes with two options, AllRows  and RowOnDemand . Selecting the 'AllRows' option will cause an updateable grid to open with all rows in edit mode. Selecting the 'RowOnDemand' option will open the grid in view mode. A row can then be placed into edit mode either by clicking the 'Edit row' icon, or by double clicking on a field. If you double click on a field, initial focus will be on the field.  
</description>
			
		</section>
		
	</sections>
	
</group>
<group>
	<sections>
		
		<section>
		
			<description>AllRows in Edit Mode
</description>
			<figure><link>images/01_aupdate.png</link></figure>
		</section>
			<section>
	
			<description>RowOnDemand in View Mode
</description>
			<figure><link>images/01_aupdate2.png</link></figure>
		</section>
		
	</sections>
	
</group>

<group background="true">
	<sections>
		
		<section>
			<title>One edit row at a time</title>
			<description>The One edit row at a time  property appears when the Row Edit Style  property is set to RowOnDemand . If this is checked, it will allow only one row at a time to be in edit mode. Multiple rows can be placed in edit mode if this is not selected. 
</description>
			
		</section>
		
	</sections>
	
</group>
<group>
	<sections>
		
		<section>
	
			<description>RowOnDemand. Only one row can be edited at a time.
</description>
			<figure><link>images/01_aupdate3.png</link></figure>
		</section>
		
	</sections>
	
</group>

<group background="true">
	<sections>
		
		<section>
			<title>Conflict Checking </title>
			<steps>
				<step>
					<description>Optionally, select "True" (clear the check box) in the Conflict Checking > Check for write conflictslist. When selected, before the record changes are applied the Application Servermakes sure that no other user has saved changes to this record.</description>
				</step>
					<step>
					<description>If you are checking for write conflicts, specify the type of checking to perform in the Conflict Checking > Write conflict check typefield.
</description>
				</step>
				
				
			</steps>
		</section>
		<section>
			<cases>
				<case>
					<title>Check for write conflicts</title>
					<description>Make sure that no other user has saved changes to this record.</description>
					<example><![CDATA[tmpl.edit.check_for_write_conflicts as L ]]></example>
				</case>
				<case>
					<title>Write conflict check type</title>
					<description>Specifies the write conflict checking mode. The options are:</description>
			<cases>
				<case>
					<description>1 = Check all fields on the form.</description>
				</case>
				<case>
					<description>2 = Check only changed fields.</description>
				</case>
				<case>
					<example><![CDATA[tmpl.edit.write_conflict_check_type as N ]]></example>
				</case>
				
			</cases>
			
			
					
				</case>
				
			</cases>
			
			
		</section>
		
	</sections>
	
</group>


<group background="true">
	<sections>
		
		<section>
			<title>Debugging</title>
			<description></description>
			
		</section>
		
	</sections>
	
</group>
<group>
	<sections>
		
		<section>
			<steps>
				<step>
					<description>Optionally, select the Debugging > Show update commandsfield.
</description>
				</step>
				<step>
					<description>If the prior option was selected, optionally select the Debugging > Execute update commandsfield.
</description>
				</step>
				
				
			</steps>
		</section>
		<section>
			<cases>
				<case>
					<title>Show update commands</title>
					<description>Used when debugging.</description>
					<example><![CDATA[tmpl.edit.Show_Update_Commands as  L 
]]></example>
				</case>
				<case>
					<title>Execute update commands</title>
					<description>Used when debugging.</description>
					<example><![CDATA[tmpl.edit.Execute_Update_Commands as L ]]></example>
				</case>
				
				
			</cases>
			
			
		</section>
		<section>
			<description>In the example below, the user changed the companyname to "General Electric". The picture shows the Xbasic executed in the update displayed at the top of the page.
</description>
			<figure><link>file:///C:/dev/AlphaHelp/helpfiles/Server/Guide/Design/View/Grid/images/WP_Show_Update_Commands.gif</link></figure>
			
		</section>
		<section>
			<description>
				See also: Customizing the Search Part 
			</description>
		</section>
	</sections>
	
</group>

<group background="true">
	<sections>
		
		<section>
			<title>Updateable Grids - Edit On Demand</title>
			<description>Property name: 'Row edit style' ('Update Properties' pane)
Previously, if a Grid was updateable, then all of the rows in the Grid would be displayed using edit controls for each field (i.e. TextBoxes, TextAreas, etc.).
Now, there is a new option called 'Edit On Demand'. When you select this option, the Grid is shown as using labels for each control. You can then double click on a field, or click the Edit icon, to turn that row into edit mode. You can specify if more than one row at a time can be in edit mode. If only one row is allowed in edit mode at a time, then when you put another row into edit mode, the row that is currently in edit mode is turned back into view mode.
</description>
			
		</section>
		
	</sections>
	
</group>
<group>
	<sections>
		
		<section>
			
			<description>All rows are editable</description>
			<figure><link>images/allrowseditable.jpg</link></figure>
		</section>
		<section>
			
			<description>Grid rows are editable on demand</description>
			<figure><link>images/EditonDemand.jpg</link></figure>
		</section>
		<section>
			
			<description>Row 1 of the Grid has been put into edit mode</description>
			<figure><link>images/OneRowInEditMode.jpg</link></figure>
		</section>
		
	</sections>
	
</group>

<group background="true">
	<sections>
		
		<section>
			<title>Editing Properties, Field Validation</title>
			<description>The  video demonstrates Alpha Anywhere's agile development process in action. 
</description>
			<videos>
				<video>
					<name>video</name>
					<link>http://www.screencast.com/users/remoorejr/folders/Jing/media/22a28346-f685-4c7e-a3d3-212c9c1b0ca9</link>
				</video>
				
			</videos>
		</section>
		
	</sections>
	
</group>


<group background="true">
	<sections>
		
		<section>
			<title>Show Row Errors in a Pop-up Window </title>
			<description>By default, when you submit a Grid and the server determines that there are errors in the data, the errors are either shown next to the field(s) that have errors, or in the case of 'row-level' errors, the errors are shown by turning on an error icon in the row selector, which the user can then hover over with the mouse to see the actual error text. 

This works well if the Grid has a tabular display. But in the case where the Grid is formatted as a Form, if the form has a large number of fields, the error icon can be too subtle and is easily overlooked. A new option allows you to display 'row-level' errors in a pop-up window.

</description>
			<videos>
				<video>
					<name>Watch Video  </name>
					<link>http://www.ajaxvideotutorials.com/V10Videos/RowLevelErrorsInPopupWindow.swf</link>
				</video>
				
				
			</videos>
		</section>
		
	</sections>
	
</group>


<group background="true">
		<title>The Search Part</title>
	<sections>
		
		<section>
		
			<description>The Searchform allows you to find records using complete or partial values in one or more fields. The result of a search displays only the matching records in your grid. You can sort the results on any field in the grid.</description>

		</section>
		
	</sections>
	
</group>
<group>
	<sections>
		
		<section>
			<title>Adding a Search Form
</title>
			<steps>
				<step>
					<description>Display the Component Typepage.
</description>
				</step>
				<step>
					<description>Check Grid contains a 'Search' part.
</description>
				</step>
				
			</steps>
		</section>
			
		<section>
			<title>Selecting Search Fields </title>
			<description>The search form may contain any set of fields from the source table or view. They may be the same or completely different from the fields displayed on the grid.
</description>
				<steps>
				<step>
					<description>Display the Search > Fields page.</description>
				</step>
				<step>
					<description>While holding down the CTRL key, select the "Firstname", "Lastname", Company", "Phone", and "Email" fields and click .
</description>
				</step>
				
			</steps>
		</section>
		<section>
			<title>Choosing Search Options</title>
			
				<steps>
				<step>
					<description>Display the Search > Propertiespage.
</description>
				</step>
				<step>
					<description>Check the Hide Grid Part Options > Hide Grid when no search activecheck box. This makes your screen display smaller, because the grid will be hidden until you search for records.
</description>
				</step>
				<step>
					<description>Clear the Search Options > Show titlecheck box.
</description>
				</step>
				<step>
					<description>Clear the Records per Page Listbox Options > Include 'Records per Page' listboxcheck box. This option allows the user to specify how many records to return per page.
</description>
				</step>
				
			</steps>
		</section>
	</sections>
	
</group>

<group>
	<sections>		
		<section>
			<title>Related Properties</title>
			
			<cases>
				<case>
					<description>Hide Grid Part Options</description>
				</case>
				<case>
					<description>Hide Grid when no search active
</description>
				</case>
				<case>
					<description>Search Options
</description>
				</case>
				<case>
					<description>Show title</description>
				</case>
				<case>
					<description>Title</description>
				</case>
				<case>
					<description>Enable show/hide of Search part
</description>
				</case>
				<case>
					<description>Search button label</description>
				</case>
				<case>
					<description>Use icon for search button
</description>
				</case>
				<case>
					<description>Orientation</description>
				</case>
				<case>
					<description>Has 'Clear Search' link</description>
				</case>
				<case>
					<description>'Clear Search' label
</description>
				</case>
				<case>
					<description>'Clear Search' bubble help
</description>
				</case>
				<case>
					<description>Use icon for clear search link
</description>
				</case>
				<case>
					<description>Search style</description>
				</case>
				<case>
					<description>Search rules</description>
				</case>
				<case>
					<description>Show single "Keyword" search field</description>
				</case>
				<case>
					<description>Allow 'Query by Form' syntax</description>
				</case>
				<case>
					<description>QBF Operator Exceptions</description>
				</case>
				<case>
					<description>Combine search criteria using</description>
				</case>
				<case>
					<description>Disable browser auto-complete feature</description>
				</case>
				<case>
					<description>Toolbar position
</description>
				</case>
				<case>
					<description>Help window
</description>
				</case>
				<case>
					<description>Search highlighting</description>
				</case>
				<case>
					<description>Embed search in Grid part
</description>
				</case>
				<case>
					<description>Allow user to save search criteria</description>
				</case>
				<case>
					<description>Allow user to load search criteria</description>
				</case>
				<case>
					<description>Sort Options
</description>
				</case>
				<case>
					<description>Include 'Sorting' listbox
</description>
				</case>
				<case>
					<description>Label for 'Sorting' listbox
</description>
				</case>
				<case>
					<description>Label position
</description>
				</case>
				<case>
					<description>Inline style for 'Sorting' label
</description>
				</case>
				<case>
					<description>'Sort' listbox default
</description>
				</case>
				<case>
					<description>Use column headings in sort listbox
</description>
				</case>
				<case>
					<description>Custom sort expressions
</description>
				</case>
				<case>
					<description>'Order' listbox options
</description>
				</case>
				<case>
					<description>'Order' listbox default
</description>
				</case>
				<case>
					<description>Records per Page Listbox Options
</description>
				</case>
				<case>
					<description>Include 'Records per Page' listbox
</description>
				</case>
				<case>
					<description>Label for 'Records per Page' listbox
</description>
				</case>
				<case>
					<description>Label position
</description>
				</case>
				<case>
					<description>Inline style for 'Records per Page' label
</description>
				</case>
				<case>
					<description>'Records per Page' listbox choices
</description>
				</case>
				<case>
					<description>'Records per Page' listbox default
</description>
				</case>
				<case>
					<description>Freeform Edit Regions
</description>
				</case>
				<case>
					<description>Customization
</description>
				</case>
				<case>
					<description>Javascript
</description>
				</case>
				
				
			</cases>
			
			
			
		</section>	
	</sections>
</group>






<group background="true">
	<sections>
		
		<section>
			<title>Filtering a Grid with Range Search</title>
			<description>Alpha Anywhere has a  Range Search, an option that allows you to quickly filter a field by low and high values and redisplay the grid.
</description>
			
		</section>
		
	</sections>
	
</group>
<group>
	<sections>
		
		<section>
			<title>To add Quick Search to a grid:
</title>
			<steps>
				<step>
					<description>Create a grid based on the Customertable of the AlphaSports database. Make sure the grid displays the "Lastname" field.
</description>
				</step>
					<step>
					<description>If the grid is not already open in the Grid Builder, open it now.
</description>
				</step>
					<step>
					<description>Display the Component Typepage.
</description>
				</step>
					<step>
					<description>Make sure that Grid contains a search partis selected.
</description>
				</step>
					<step>
					<description>Display the Search > Fieldspage.
</description>
				</step>
					<step>
					<description>Select the "Lastname" field in the Fields to Search Inlist.
</description>
				</step>
					<step>
					<description>Select "True" in the Display Settings > Range searchlist.
</description>
				</step>
					<step>
					<description>Display the Search > Propertiespage.
</description>
				</step>
					<step>
					<description>Select "False" in the Search Options > Show titlelist.
</description>
				</step>
					<step>
					<description>Select "False" in the Sort Options > Include 'Sorting' listboxlist.
</description>
				</step>
					<step>
					<description>Select "False" in the Records per Page Listbox Options > Include 'Records per Page' listboxlist.
</description>
				</step>
				<step>
					<title>Define Quick Search Choices
</title>
			<description>The Previewtab of the Grid Buildershould show something like the following.
</description>
			<figure><link>Filtering/images/WPT_Range_Search_Unfiltered.gif</link></figure>
				</step>
				<step>
					<description>Publish the page with the grid and enter "h" and "k" in the Fromand Tofields.
</description>
				</step>
						<step>
					<description>Click Search.
</description>
				</step>
						<step>
					<description>Click the Last Namecolumn title to sort the grid.
</description>
					<figure><link>Filtering/images/WPT_Range_Search_Filtered.gif</link></figure>
				</step>
				
			</steps>
			
		</section>
		<section>
			<note>The Tofield defines a value that is greater than or equal toall the field values that will be displayed. If you typed "j" into this field, you would not see any entries beginning with "j". The value "jzzzz" would work as well as "k" in the Tofield.</note>
		</section>
		
	</sections>
	
</group>

<group background="true">
	<sections>
		
		<section>
			<title>Properties</title>
<cases>
	<case>
		<description>Hide Grid Part Options</description>
	</case>
	<case>
		<description>Hide Grid when no search active</description>
	</case>
	<case>
		<description>Search Options
</description>
	</case>
	<case>
		<description>Show title
</description>
	</case>
	<case>
		<description>Title
</description>
	</case>
	<case>
		<description>Enable show/hide of Search part
</description>
	</case>
	<case>
		<description>Search button label</description>
	</case>
	<case>
		<description>Use icon for search button
</description>
	</case>
	<case>
		<description>Orientation</description>
	</case>
	<case>
		<description>Has 'Clear Search' link</description>
	</case>
	<case>
		<description>'Clear Search' label</description>
	</case>
	<case>
		<description>'Clear Search' bubble help</description>
	</case>
	<case>
		<description>Use icon for clear search link</description>
	</case>
	<case>
		<description>Search style</description>
	</case>
	<case>
		<description>Search rules</description>
	</case>
	<case>
		<description>Show single "Keyword" search field</description>
	</case>
	<case>
		<description>Allow 'Query by Form' syntax</description>
	</case>
	<case>
		<description>QBF Operator Exceptions</description>
	</case>
	<case>
		<description>Combine search criteria using</description>
	</case>
	<case>
		<description>Disable browser auto-complete feature
</description>
	</case>
	<case>
		<description>Toolbar position</description>
	</case>
	<case>
		<description>Help window</description>
	</case>
	<case>
		<description>Search highlighting</description>
	</case>
	<case>
		<description>Embed search in Grid part</description>
	</case>
	
</cases>
		</section>
		
	</sections>
	
</group>

<group background="true">
	<sections>
		
		<section>
			<title>Save and Load Searches</title>
			<description>Allow user to save search criteria. 
Allow user to load search criteria.
You can use the Repository feature to save search criteria to the repository and load searches from the repository. 
</description>
<videos>
	<video>
		<name>Watch Video - Part 1</name>
		<link>http://www.ajaxvideotutorials.com/V11Videos/SearchComponent_SavedSearches_Part1.swf</link>
		
	</video>
	<video>
		<name>Watch Video - Part 2 </name>
		<link>http://www.ajaxvideotutorials.com/V11Videos/SearchComponent_SavedSearches_Part2.swf</link>
		
	</video>
	
	
</videos>
		</section>
		<section>
			<description>To turn on the feature, set the 'Allows user to save search criteria' and 'Allow user to load search criteria' properties. 
Before using this feature, you must first configure the Repository by going to the Project Properties dialog on the Web Projects Control Panel. 

</description>
		</section>
	</sections>
	
</group>
<group>
	<sections>
		
		<section>
			<figure><link>images/01_asearch.png</link></figure>
		</section>
		
	</sections>
	
</group>

<group>
	<sections>
		
		<section>
			<title>Properties</title>
			<cases>
				<case>
					<description>Sort Options
</description>
				</case>
				<case>
					<description>Include 'Sorting' listbox</description>
				</case>
				<case>
					<description>Label for 'Sorting' listbox</description>
				</case>
				<case>
					<description>Label position
</description>
				</case>
				<case>
					<description>Inline style for 'Sorting' label
</description>
				</case>
				<case>
					<description>'Sort' listbox default</description>
				</case>
				<case>
					<description>Use column headings in sort listbox</description>
				</case>
				<case>
					<description>Custom sort expressions</description>
				</case>
				<case>
					<description>'Order' listbox options</description>
				</case>
				<case>
					<description>'Order' listbox default</description>
				</case>
				<case>
					<description>Records per Page Listbox Options</description>
				</case>
				<case>
					<description>Include 'Records per Page' listbox
</description>
				</case>
				<case>
					<description>Label for 'Records per Page' listbox</description>
				</case>
				<case>
					<description>Label position</description>
				</case>
				<case>
					<description>Inline style for 'Records per Page' label</description>
				</case>
				<case>
					<description>'Records per Page' listbox choices</description>
				</case>
				<case>
					<description>'Records per Page' listbox default
</description>
				</case>
				<case>
					<description>Freeform Edit Regions
</description>
				</case>
				<case>
					<description>Customization</description>
				</case>
				<case>
					<description>Javascript</description>
				</case>
			
			</cases>
		</section>
		
	</sections>
	
</group>

<group background="true">
	<sections>
		
		<section>
			<title>Search Highlighting
</title>
			<description>When you search the Grid (using a Search part, a Quick Search, or a QBE search), you can highlight the search terms in the Grid and Detail View to make it clear why a record was included in the found set. 
In the screenshot below, the user has done a Quick Search for all records where the Firstname, Lastname, or Bill_City contain the letter 'a'. The 'a's in these fields in the selected records as shown in bold. 
The CSS style sheet files have new class called SearchHighlight (e.g. GlassBlueSearchHighlight) that is used to highlight the search text. If you are using a modified CSS style sheet, be sure to add this new class to your stylesheet. 
</description>
			<figure><link>images/searchHighlight.jpg</link></figure>
		</section>
				
		<section>
	
			<description>In the following image, the definition for the SearchHightlight class has been changed to show the search terms in red, making the effect a little easier to see. 
</description>
			<figure><link>images/SearchHighlightRed.jpg</link></figure>
		</section>
		<section>
			
			<description>Wildcard searches are supported. If you have search highlighting turned on and you perform a wildcard search (for example, you enter "alpha*ware", the search will find records that contain "Alpha Software" and "Alpha Hardware". The search highlighting will highlight both the 'Alpha' and the 'ware' in the found records. </description>
			<videos>
				<video>
					<name>Watch Video</name>
					<link>http://www.ajaxvideotutorials.com/V11Videos/V11_SearchHighlight.swf</link>
				</video>
				
				
			</videos>
		</section>
		
	</sections>
	
</group>

<group background="true">
	<title>The Detail View</title>
	<sections>
		
		<section>
			<title>Open the Detail View </title>
			<description>The D etail View form provides a single record view that allows you to read, edit, delete, and insert records. The display format will show any selection of fields, even if they are not in the grid.  </description>
			
		</section>
		<section>
		
			<description>To create a Detail View you will first need to open a grid in the Grid Builder . From the Web Projects Control Panel click on the Create a new grid component  button. The Select Grid Component Template dialog will open. Click the Start with a blank Grid Component radio button [page_img] and click OK . This will open the Grid Builder dialog. Alternatively, you can also get to the Grid Builder from the Web Projects Control Panel by clicking on the New component or file  button. The New File dialog will open, select the Web Component option and click Next> then Grid and then Next > again. This will bring you to the Select Grid Component Template and then the Grid Builder .  
A Detail View with two fields  </description>
			<figure><link>../../Data/FieldRules/images/A_Detail.png</link></figure>
		</section>
		<section>
			
			<description>Once you open the Grid Builder , go to the Design page and click on Component Type at the top of the Design page menu. Under the Grid Layout Menu select Grid is: Read Only . Then go down to the b ottom of the page and check the Grid contains a Detail View checkbox. If you checked 'Grid is: Updateable', then the 'Grid contains a Detail View box' will remain inactive. Making the grid 'Updateable' gives users the ability to update information directly within the fields of a grid, making the Detail View somewhat redundant. You might notice that the Detail View also has a ' Read Only ' and ' Updateable ' option.  
</description>
			
		</section>
		
	</sections>
	
</group>
<group>
	<sections>
		
		<section>
			<title>Opening a Grid Component from the HTML Editor</title>
<steps>
	<step>
			<description>In the Web Projects Control Panel select an A5W page that contains a grid component.
</description>
			
	</step>
	<step>
			<description>Click Editto display the HTML Editor.
</description>
			
	</step>
	<step>
			<description>Double click the grid component that is on the page. 
</description>
			<figure><link>../../Data/FieldRules/images/A_Detailgrid.png</link></figure>
	</step>
	<step>
			<description>Click Yes to agree that you want to edit the component.
</description>
		
	</step>
	<step>
			<description>Display the Component Type page. 
</description>
			<figure><link>../../Data/FieldRules/images/A_Component Type.png</link></figure>
	</step>
	<step>
			<description>Select the Read onlyradio button. 
</description>
			<figure><link>../../Data/FieldRules/images/A_ReadOnly.png</link></figure>
	</step>
	<step>
			<description>Check the Grid contains a 'Detail View' partcheck box. The Detail View is the form used to add, delete, and edit records. 
</description>
			<figure><link>../../Data/FieldRules/images/A_DetailView part.png</link></figure>
	</step>
	
</steps>
		</section>
		
	</sections>
	
</group>
<group background="true">
	<sections>
		
		<section>
			<title>Defining the Detail View</title>
			<description>The Detail View has most of the functionality and properties characteristic of a regular grid. You therefore have many options in shaping both the appearance of the Detail View and what it is capable of doing. You can define your Detail View's fields and properties on the Detail View > Fields and Detail View > Properties pages. These pages open automatically when you select the Grid contains a Detail View checkbox on the Component Type page.  
</description>
			
		</section>
		
	</sections>
	
</group>

<group>
	<sections>
		
		<section>
			<title>Detail View Fields and Field Properties: 
</title>
<steps>
	<step>
			<description>Open the Grid Builder .
</description>
			
	</step>
		<step>
			<description>Open the Component Type Page, click Grid is:Read Only , and check the Grid contains a 'Detail View' partcheck box.
</description>
		
	</step>
		<step>
			<description>As with a grid, you must define the type of data you will use and the table from which the data will be drawn. Open to the  Data Source page and choose .dbf or SQL for your data type.
</description>
		
	</step>
		<step>
			<description>Go to Grid > Query (DBF) or Grid > Query (AlphaDAO) and establish which .dbfor SQLtables you will use..
</description>
	
	</step>
		<step>
			<description>Display the Detail View > Fields page. 
</description>
			<figure><link>../../Data/FieldRules/images/A_DetailView.png</link></figure>
	</step>
	<step>
			<description><![CDATA[Select fields in the Available Fields list and move them to the Selected list, as you would with any grid. Use the arrow key to move them. If you are using AlphaSports Customergrid, for example, select the " Customer_Id", " Firstname", " Lastname", Company", and " Phone" fields and then click '>' .]]>
</description>
			<figure><link>../../Data/FieldRules/images/A_Available.png</link></figure>
	</step>
		<step>
			<description>Check the Detail view is editablecheck box. 
</description>
			
	</step>
		<step>
			<description>Click OK to change all the fields on the Detail View to editable TextBox controls. 
</description>
			<figure><link>../../Data/FieldRules/images/A_Controls.png</link></figure>
	</step>
		<step>
			<description>On the Grid Builder Design page under Grid open the Properties page .
</description>
		
	</step>
		<step>
			<description>On the Properties list that opens find Detail View Display properties. The Hyperlink field property will be displayed here. Click the dropdown button next to Hyperlink field.
</description>
			
	</step>
	<step>
			<description>Select a field, like the "Customer_Id" field, in the Hyperlink field list and click OK. This is the field that will connect the record in the Detail View form with the record in the grid. Both the grid and the detail view forms must have a unique key value that links them together. The Hyperlink field set to Customer_Id. 
</description>
			<figure><link>../../Data/FieldRules/images/A_Hyperlink.png</link></figure>
			<note><![CDATA[The grid must also contain, but not necessary display, the hyperlink field. Also, when you add fields to the grid, you can set the control type. As you will see below, the list of control types for a data bound field can be seen by clicking on the 'control type' in the Detail View > Fields > Field Properties > Display settings . You might also notice the Insert.. button at the bottom of the Available Fields list on the Detail View > Fields page. This is for inserting a Detail View control that is NOTdata bound to one of the fields in the Grid. For example, this is how you would put a button in a grid row. The list of controls that the Insert.... button shows includes hyperlink, which is really just another way of showing a button. For both buttons and hyperlinks, you can define javascript events, such as onclick.  ]]></note>
	</step>
		<step>
			<description>Display the Grid > Fields page.</description>
			
	</step>
		<step>
			<description>Select a field in the Selected Fields list, like Customer_ID, and look at the Field Properties list on the right side of the Fields page.
</description>
			<cases>
				<case>
					<description>1. Under Display Settings find Control type. Click the button next to the property.
</description>
				</case>
				<case>
					<description>2. The Select Control Type dialog will open. Change the Control from 'Textbox' to  ' Link '. The Customer_Idfield will uniquely connect each record in the grid to its detail view.
</description>
				</case>
				<case>
					<description>3. Below the Display Settings section you should now see a Link Properties section open. 
</description>
<figure><link>../../Data/FieldRules/images/A_linkproperties.png</link></figure>
				</case>
				<case>
					<description>4. Under the Link Properties find the Link addresstype property. Click the dropdown and select " DetailView link ".</description>
				</case>
				
				
			</cases>
	</step>
		<step>
			<description>Change the labels used for the Firstnameand Lastnamefields.
</description>
			
	</step>
		<step>
			<description>Click Save and close the Grid Builder. This returns you to the HTML Editor.
</description>
			
	</step>
	
	
</steps>
		</section>
		
	</sections>
	
</group>

<group background="true">
	<sections>
		
		<section>
			<title>Detail View Properties</title>
			<description>The Detail View Properties page in the Design tab contains many of the same properties found on the Grid Properties page. Here you can set the title of the Detail View, add Help windows for any field you like, add action buttons that link to action Javascript, implement security options for your Detail View, shape the appearance of your Detail View, and much more.  
</description>
			
		</section>
		
	</sections>
	
</group>

<group>
	<sections>
		
		<section>
			<title>Previewing a Detail View</title>
<steps>
	<step>
		<description>From the Web Projects Control Panel, right click on the Component you would like to view. Click [lightning_img] on the dropdown toolbar to preview the page in the Working Preview mode. You can also open your component and view it in Working Preview by clicking the Working Preview tab. To see your Detail View in Live Preview , click the Live Preview tab and, from the dropdown list that appears, select Full Preview . You can then select a browser from which to view your component from the bottom of the Live Preview page. Of course, you could also open a new A5W page, save your component inside of that A5W page, and then publish it by clicking publish or publish to local webroot. You could then open the A5W file to see your component. The important difference from previewing in your local webroot is that files previewed to the Live Preview directory can notbe seen by web users.
</description>
	</step>
	<step>
		<description>In your browser a Detail View might look like this...
</description>
		<figure><link>../../Data/FieldRules/images/WPT_ACG3_Grid.png</link></figure>
	</step>
	
	
</steps>
		</section>
			<section>
			<title>Experimenting with the Detail View
</title>
	<steps>
		<step>
			<description>Click New Record.
</description>
		</step>
		<step>
			<description>Enter values into the Detail View fields.
</description>
		</step>
		<step>
			<description>Click Add.
</description>
		</step>
		<step>
			<description>Select a record in the grid.
</description>
		</step>
		<step>
			<description>Click Delete.
</description>
		</step>
		
		
	</steps>		
			
		</section>
	</sections>
	
</group>

<group background="true">
	<title>Display Options</title>
	<sections>
		
		<section>
			
			<description></description>
			
		</section>
		
	</sections>
	
</group>


<group background="true">
	<sections>
		
		<section>
			<title>Detail View window position</title>
			<description>There are several options that let you adjust where the Detail View is shown. It can be shown in page (the same as previously), in the grid, in a popup modal window, or in a popup modeless window. If modal popup window  is selectedwill gray out the underlying grid and nothing on the grid can be selected. The modeless popup  allows selecting records on the grid with the popup open. The popup windows have a 'drag' capability to allow them to be moved around on the page. The Detail View includes a toolbar that allows you to navigate from record to record. When in enter mode, has a 'Save and Enter' button (Ctrl-F9). Detail views can now be defined for 'Form' and 'Stacked' layouts. (Previously Detail View was only available for 'Grid' layout) 
</description>
	
		</section>
		
	</sections>
	
</group>

<group>
	<sections>
		
		<section>
			
			<description>Detail View on Page
</description>
			<figure><link>images/02_DetailViewtype.png</link></figure>
		</section>
		<section>
			
			<description>Detail View in modal popup window.
</description>
			<figure><link>images/02_DetailViewtype2.png</link></figure>
		</section>
		<section>
			
			<description>Detail View in grid
</description>
			<figure><link>images/02_DetailViewtype3.png</link></figure>
		</section>
		<section>
			<description>Detail View in modeless popup window</description>
			<figure><link>images/02_DetailViewtype4.png</link></figure>
		</section>
		
	</sections>
	
</group>

<group background="true">
	<sections>
		
		<section>
			<title>Pop-up window position</title>
			<description>When you define a Detail View that appears in a pop-up window you can specify the position where the window should appear. Clicking the button next to the Pop-up window position property opens the Window Position dialog.  
</description>
			
		</section>
		
	</sections>
	
</group>

<group>
	<sections>
		
		<section>
	
			<figure><link>images/02_WindowPosition.png</link></figure>
		</section>
		
	</sections>
	
</group>

<group background="true">
	<sections>
		
		<section>
			<title>Customize the toolbar icons</title>
			<description>You can customize the icons and bubble help that are displayed in the Detail View toolbar. To bring up the customization dialog, click the smart field in the 'Customize the toolbar icons' property. For some of the icons, you can specify the disabled icon as well. 
</description>
			
		</section>
		
	</sections>
	
</group>

<group>
	<sections>
		
		<section>
			
			
			<figure><link>images/02_DetailViewcust.png</link></figure>
		</section>
<section>
			<title>How to Set Default Value for a New Record to The Values of the Previously Entered Record</title>
			<note>This example applies only in the case where data entry is being done using the Detail View.</note>
		</section>
<section>
		
			<description>In some applications, you might want to set the default value for a field in a new record to be the same as the value in the previously entered field. Here is how you can to this:
This example shows how you can make the lastname field in a new record use the previously entered lastname as a default. Obviously, when you adapt this for your own use, you could define defaults for as many fields as you wanted.
In the AfterInsertRecord event in the Grid builder, define this code:
</description>
<example><![CDATA[function AfterInsertRecord as v (e as p)
e.rtc.mydata.lastname = e.datasubmitted.lastname
end function
]]></example>
		</section>
<section>
	
			<description>In the OnIntialValueCalculate event, define this code:
</description>
	
			<example><![CDATA[function onInitialValueCalculate as v (e as p)
dim e.rtc.mydata.lastname as c = default ""
if e.rtc.mydata.lastname <> "" then 
    e.newvalues.lastname = e.rtc.mydata.lastname 
end if 
end function
]]></example>
<note>This technique does not work in V11. See the reference below.</note>
		</section>			
		<section>
			<description>See Also: Grid, Dialog and Custom Components Storing state information</description>
		</section>			
	</sections>
	
</group>

<group background="true">
	<title>Code </title>
	<sections>
		
		<section>
			<title>Server-Side Events</title>
	
		</section>
		<section>
<title>onSQLExecuteError Event</title>
<description>In a Grid component against a SQL database, when you do an Insert, Update, or Delete, the SQL Database might send back an error. Typically the error message is not very friendly. The new onSQLExecuteError event allows you to intercept the error and show a friendlier error to the user.</description>
			
		</section>
	<section>
			<title>onBeforeSQLCommandExecute and onAfterSQLCommandExecute Events
</title>
			<description>In a Grid component that is based on a SQL database, the Insert, Update and Delete SQL statements that are executed when a user inserts, updates or deletes a record are automatically computed by Alpha Anywhere. 

In some cases, a user might want more control over how these SQL statements are executed, or might want to use stored procedures to insert, update or delete records. The onBeforerSQLCommandExecuteand onAfterSQLCommandExecuteserver side events allow you fully customize the SQL statements that the Grid executes in order to insert, update or delete records. 

In addition, another common use for these events is to update some other table at the same time as the update is being performed in the tables the Grid is based on. For example, you might want to add a record to a log table. 

When you perform updates against some other table as part of our update, insert or delete, you might want to wrap the entire operation into a single transaction. This is easily done by starting a transaction in the onBeforeSQLCommandExecuteevent and then either committing or rolling back the transaction in the onAfterSQLCommandExecuteevent. 

In the onBeforeSQLCommandExecuteevent you can execute any SQL that you want. If you choose to handle the update, delete or insert operation yourself, you can set the .SQLCommandWasHandled event to .t. and then Alpha Anywhere will not execute the SQL that it computed. 

On the other hand you might use the onBeforeSQLCommandExecuteevent to modify in some way the SQL that Alpha Anywhere generated, but not actually execute the SQL . In this case you will set the .SQLCommandWasHandled event to .f. 
</description>		
<videos>
<video>
	<name>Watch Video - Part 1  
</name>
	<link>http://www.ajaxvideotutorials.com/V10Videos/OnBeforeSQLExecute_1.swf</link>
</video>	
<video>
	<name>Watch Video - Part 2  
</name>
	<link>http://www.ajaxvideotutorials.com/V10Videos/OnBeforeSQLExecute_2.swf</link>
</video>		
<video>
	<name>Watch Video - Part 3  
</name>
	<link>http://www.ajaxvideotutorials.com/V10Videos/OnBeforeSQLExecute_3.swf</link>
</video>	
<video>
	<name>Watch Video - Part 4  
</name>
	<link>http://www.ajaxvideotutorials.com/V10Videos/OnBeforeSQLExecute_4.swf</link>
</video>	
<video>
	<name>Watch Video - Part 5  
</name>
	<link>http://www.ajaxvideotutorials.com/V10Videos/OnBeforeSQL_Arguments1.swf</link>
</video>	
<video>
	<name>Watch Video - Part 6  
</name>
	<link>http://www.ajaxvideotutorials.com/V10Videos/OnBeforeSQL_Arguments2.swf</link>
</video>	
	
</videos>
		
	</section>	
		
		
		
		
	</sections>
	
</group>


<group background="true">
	<sections>
		
		<section>
			<title>Client Side Events</title>
			<description>Two videos show how you can use client-side events to put up a simple "sorting ..." message while the Ajax callback is taking place after the user has clicked on a column heading to sort the grid.</description>
<videos>
	<video>
		<name>Video 1</name>
		<link>http://www.ajaxvideotutorials.com/V10Videos/H_ClientSideJavascriptEvents_1.mp4</link>
	</video>
	<video>
		<name>Video 2</name>
		<link>http://www.ajaxvideotutorials.com/V10Videos/H_ClientSideEvents_2.mp4</link>
	</video>
	
	
</videos>
		</section>
		
	</sections>
	
</group>


<group background="true">
	<sections>
		
		<section>
			<title>XBasic </title>
			<description></description>
			<figure><link></link></figure>
		</section>
		
	</sections>
	
</group>

<group>
	<sections>
		
		<section>
			<title>Desktop Applications and Working Preview - Client-
side Xbasic
</title>
			<description>HTML events in a Grid (e.g. a control's onClick, onChange, onBlur, etc.) events are typically handled using Javascript functions. Now, in the case where you are using a Grid on the Desktop (which includes Working Preview mode), the function that is called to handle the event can either be defined using Javascript or Xbasic. </description>
<videos>
	<video>
		<name>Watch Video - Part 1</name>
		<link>http://www.ajaxvideotutorials.com/V10Videos/ClientSideXB1.swf</link>
	</video>
	<video>
		<name>Watch Video - Part 2</name>
		<link>http://www.ajaxvideotutorials.com/V10Videos/ClientSideXB2.swf</link>
	</video>
	
	
</videos>
		</section>
		<section>
			
			<description>If you define the function using Javascript, then the Javascript can in turn call Xbasic. 
The Xbasic functions that are defined to handle these HTML events are referred to as 'client-side Xbasic' to differentiate this Xbasic from the server-side Xbasic functions that you define to handle Ajax callbacks and server-side events. 

The ability to use client-side Xbasic in a Grid is an extremely powerful feature that greatly extends the utility of the Grid component when used in a Desktop application. For example, assume you have a button on a Grid and you want to use Xbasic to handle the button's onClick event. You might define the following code in the 'Javascript - Attribute' pane, added to the onClick attribute for the button. when the Grid is rendered: 
</description>
			<figure><link>../../../../../Client/Guide/Design/View/Grid/images/clientsidexb1.jpg</link></figure>
		</section>
		<section>
			
			<description>Next, you need to define myfunction(). You can use either Javascript or Xbasic to define the function. </description>
			<note>Your event handler cannot call a system Xbasic function, or a UDF directly. You have to define a local client-side Xbasic function which in turn can call a system Xbasic function or a UDF. </note>
		</section>
		<section>
			
			<description>To define myfunction() using Javascript, you would typically go to the 'Declarations - Global' tab in the above screen shot. Or, you could also go to the 'Javascript function declarations' property. 

To define myfunction() using Xbasic, you would typically go to the new 'Client-Side Xbasic Functions' tab, as shown in the following screen shot: </description>
			<figure><link>../../../../../Client/Guide/Design/View/Grid/images/csxbasic2.jpg</link></figure>
		</section>
		<section>
			
			<description>You could also go to the 'Client-side Xbasic function declarations' property to define the client-side Xbasic function. 
</description>
			<note>You could define both an Xbasic and a Javascript version of 'myfunction()' (by defining code in both the 'Declarations - Global' tab and the 'Client-Side Xbasic Functions' tab). However this is not recommended because when the Grid is running on the Desktop you will have no control over which function (i.e. the Javascript version or the Xbasic version) gets executed. 
</note>
		</section>
	</sections>
	
</group>

<group background="true">
	<sections>
		
		<section>
			<title>Using Xbasic to Read and Write to a Table</title>
			<description>The new Alpha Anywhere developer eventually comes to the point where he or she would like to write a script that directly reads from and writes to a table. This topic provides a couple of simple examples that you can elaborate upon. The are based on the Customer table in the AlphaSports sample database.</description>
		
		</section>
		
	</sections>
	
</group>

<group>
	<sections>
		
		<section>
			<title>Script or Function? </title>
			<description>Perhaps the first question you will ask is: "Should this be a script or a function?". There is little difference in the Xbasic coding between the two alternatives. The determining issue is whether you want to return a value. Functions can return values. Scripts cannot return values, except by setting the value(s) of global variable(s), and this is often considered a sloppy and potentially troublesome programming practice.</description>
	
		</section>
		
	</sections>
	
</group>

<group>
	<sections>
		
		<section>
			<title>How Do I Call a Script or Function? </title>
			<description>Calling a function is as easy as naming it and catching the return value, if any. This example returns a value from the find_last_name()function:
</description>
		<example><![CDATA[dim return_value as C
... some code
return_value = find_last_name()
... some code]]></example>
		</section>
		<section>
			
			<description>Or, if the find_last_name()function required a parameter, you might write something like this:
</description>
			<example><![CDATA[dim return_value as C
... some code
return_value = find_last_name("Michael")
... some code]]></example>
		</section>
		<section>
			
			<description>If the find_last_name()function did not return a value, the syntax would simply be:
</description>
			<example><![CDATA[... some code
find_last_name()
... some code]]></example>
		</section>
		<section>
			
			<description>Calling a script named find_first_nameis just as easy:
</description>
			<example><![CDATA[... some code
script_play("find_first_name")
... some code]]></example>
<note>Function names always have parentheses in their names. Scripts do not.</note>
		</section>
	</sections>
	
</group>

<group>
	<sections>
		
		<section>
			<title>Sequencing Through the Records of a Table 
</title>
			<description>The following is the beginning of a scriptthat reads and writes to the customertable. This script does not require that the customertable be open in a layout. First, create a table object named tbl(any variable namethat is not a reserved wordwill do).</description>
			<example><![CDATA[dim tbl as P
tbl = table.open("customer")
]]></example>
		</section>
			<section>
			
			<description>Now read the first record.
</description>
			<example><![CDATA[tbl.fetch_first()
while .not. table.fetch_eof()
    ' ... do something
    tbl.fetch_next()
end while
tbl.close()
]]></example>
		</section>
		<section>
			
			<description>Keep reading until you reach the end of the file.
</description>
			<example><![CDATA[tbl.fetch_first()
while .not. table.fetch_eof()
    ' ... do something
    tbl.fetch_next()
end while
]]></example>
		</section>
		<section>
			
			<description>Now, close the table.
</description>
			<example><![CDATA[tbl.close()]]></example>
		</section>
		<section>
			<title>Reading a Field Value </title>
			<description>Reading a field value is as simple as referencing table_object.field_name. In the following script the variable lnalways contains the value of the lastnamefield in the current record:</description>
			<example><![CDATA[dim tbl as P
dim ln as C
tbl = table.open("customer")
tbl.fetch_first()
while .not. table.fetch_eof()
    ln = tbl.lastname
    tbl.fetch_next()
end while
tbl.close()
]]></example>
		</section>
			<section>
			<title>Writing a Field Value</title>
			<description>Writing a changed field value in a record requires two more statements. Suppose you wanted to make sure that the lastnamefield had an initial capital letter.</description>
			<example><![CDATA[dim tbl as P
dim ln as C
tbl = table.open("customer")
tbl.fetch_first()
while .not. table.fetch_eof()
]]></example>
		</section>
		<section>
			
			<description>The tbl.change_begin(.t.)statement says that you are changing an existing field and that you want to honor any existing field rules.
</description>
			<example><![CDATA[tbl.change_begin(.t.)
    tbl.lastname = f_upper(tbl.lastname)
 ]]></example>
		</section>
		<section>
			
			<description>The tbl.change_end(.t.)statement says that you are finished changing an existing field and want to save the changes.
</description>
			<example><![CDATA[tbl.change_end(.t.)
tbl.fetch_next()
end while
tbl.close()
 ]]></example>
		</section>
		<section>
			<title>Deleting a Record </title>
			<description>The process of deleting a record is similar to changing a record. First, you need to use one of many techniques for finding the record you are going to delete.</description>
			<example><![CDATA[dim tbl as P
dim ln as C
tbl = table.open("customer")
tbl.fetch_first()
while .not. table.fetch_eof() ]]></example>
		</section>
		<section>
			
			<description>This script tests the values of the firstnameand lastnamefields, and only deletes specific records.
</description>
			<example><![CDATA[if (tbl.lastname = "Smith") .and. (tbl.firstname = "John") then
        tbl.change_begin(.t.)
        tbl.delete()
]]></example>
		</section>
		<section>
			
			<description>The tbl.change_end(.t.)statement says that you are want to delete the record.
</description>
			<example><![CDATA[tbl.change_end(.t.)
    end if
    tbl.fetch_next()
end while
tbl.close()
 ]]></example>
		</section>
		<section>
			<title>Adding a Record </title>
			<description>Adding a record is simple. You bracket your field updates with the tbl.enter_begin()and tbl.enter_end()statements.
</description>
			<example><![CDATA[dim tbl as P
tbl = table.open("customer")
tbl.enter_begin()
]]></example>
		</section>
		
		<section>
			
			<description>The tbl.enter_begin(.t.)statement says that you are adding a existing field to the end of the table and that you want to honor any existing field rules.
</description>
			<example><![CDATA[tbl.firstname = "George"
tbl.lastname = "Washington" ]]></example>
		</section><section>
			
			<description>The tbl.enter_end(.t.)statement says that you are finished adding a record and want to save the changes.
</description>
			<example><![CDATA[tbl.enter_end(.t.)
tbl.close() ]]></example>
		</section>
		
		<section>
			<title>Selecting a Subset of Records with a Query </title>
			<description>In each of the examples above, the code opened the customer table and sequenced through all of its records. Suppose you wanted only to sequence through the records when the bill_state_regionfield contained the value "MA". Instead of writing this code at the beginning of the script:
</description>
			<example><![CDATA[dim tbl as P
tbl = table.open("customer") ]]></example>
		</section>
		
		<section>
			
			<description>you would write:
</description>
			<example><![CDATA[dim tbl as P
dim qry as P
tbl = table.open("customer")
query.filter = "bill_state_region = 'MA'"
qry = tbl.query_create()
... add, change, or delete ...]]></example>
		</section>
		
		<section>
			
			<description>Finish the script or function by detaching the query and closing the table.
</description>
			<example><![CDATA[tbl.query_detach()
tbl.close() ]]></example>
		</section>
		
		<section>
			
			<description>Now, you will sequence through only those customers in the state of Massachusetts.
See Also: Table Functions and Methods, Overview: Functions and Expressions 

</description>
			
		</section>
		
		
	</sections>
	
</group>

<group background="true">
	<sections>
		
		<section>
			<title>Validating User Input with Xbasic</title>
			<description>Frequently you will wish to force a user's input to a form field to be non-blank, within a range, or one of several values. You can achieve these effects with Field Rules, but you can also code them with Xbasic.</description>
			
		</section>
		
		</sections>
	
</group>

<group>
	<sections>
		
		<section>
			<title>Example:</title>
			<description>The following code attached to the CanDepartevent of the Emailtext field reminds the user to enter a non-blank value.
</description>
			<example><![CDATA[if (alltrim(Email.text) = "") then
    ui_beep()
    cancel()
end if]]></example>
		</section>
		<section>
			
			<description>This code attached to the CanDepartevent of the quantityfield checks that the value is within the range 1 to 100.
</description>
			<example><![CDATA[if alltrim( quantity.text ? < 1) .or. alltrim( quantity.text ?> 100) then
    ui_msg_box("Invalid Value", "The value entered must be between 1 and 100")
    cancel()
end if ]]></example>
		</section>
		
		<section>
			
			<description>This code attached to the CanDepartevent of the namefield checks that the value is contained within a pre-determined list. This technique might be used as a low-level security mechanism. Most users would find a list boxmore friendly.</description>
			<example><![CDATA[dim list as C
list= <  ]]></example>
		</section>
	
		
	</sections>
	
</group>


<group>
	
	<sections>
		<section>
			<title>OTHER</title>
			
			
		</section>
		
		
	</sections>
	
	
</group>



<group background="true">
	
	<sections>
		<section>
			<title>HTML Editor - Toolbar Buttons</title>
			<description>The HTML editor now has two new buttons. The 'Toggle Source View' button toggles between a view showing HTML tags and the formatted view. The 'Insert Link' button allows you to insert a hyperlink into the text.</description>
			<figure><link>Grid Component/images/htmleditorButtons.jpg</link></figure>
		</section>
		
		
	</sections>
	
	
</group>

<group background="true">
	
	<sections>
		<section>
			<title>HTML Editor - Tab Key</title>
			<description>The tab key now inserts 4 spaces into the text. Previously it tabbed out of the editor to the next control.</description>
			
		</section>
		
		
	</sections>
	
	
</group>
<group background="true">
	
	<sections>
		<section>
			<title>Action Javascript - Comments</title>
			<description>When you add a new action, you can now turn off the prompt for the action comment. This is useful if you rarely give a comment to each action you add. You can still add a comment later on by clicking the edit icon at the lower left of the dialog.</description>
			
		</section>
		
		
	</sections>
	
	
</group>
<group background="true">
	
	<sections>
		<section>
			<title>Xdialog</title>
			<description>When running a Grid component in an Xdialog, the genie that creates the Xdialog code now has new options:</description>
<cases>
	<case>
		<description>Refresh parent window - if set to true does a topparent.resynch() to refresh the data in the parent form (if the Xdialog was launched from a button on a Form Layout). This is useful if the Grid component has edited the same record that the form is currently displaying. </description>
	</case>
<case>
		<description>Prevent window close if Grid is dirty - prevent user from closing the Xdialog and losing unsaved Grid edits. </description>
	</case>
	<case>
		<description>Dirty Grid warning message - message to display if user tries to close the Xdialog window and the Grid has unsaved changes. </description>
	</case>
	<case>
		<description>OnWindowClose event - code to execute when the user closes the Xdialog window that contains the Grid component. 
</description>
	</case>
	<case>
		<description>CanWindowClose event - code to execute before the user closes the Xdialog window. If the function returns .f., then window will not be closed. 
</description>
<figure><link>Grid Component/images/gridinxdialoggenie2.jpg</link></figure>
	</case>
	
</cases>
		</section>
		
		
	</sections>
	
	
</group>


<group background="true">
	
	<sections>
		<section>
			<title>DropdownBox Control - Edit On Demand</title>
			<description>Previously, in an editable Grid where the row editing mode was set to 'EditOnDemand' DropDownBox controls would render as Label controls when the row was NOT it edit mode. When you switched to edit mode, of course, the control would then render as a DropDownBox. Now, when you are NOT in edit mode the control renders as a disabled DropDownBox (as shown below). This is particular useful in the case where the DropDownBox stores a different value from the displayed value.
</description>
		<figure><link>Grid Component/images/disabledDropdownBox.jpg</link></figure>	
		</section>
		
		
	</sections>
	
	
</group>







																
</groups>	
<links>
	<link href="images/A_expandchoices.png">dot_img</link>
	<link href="images/1_freeform2.png">save_img</link>
	<link href="file:///C:/dev/AlphaHelp/helpfiles/Server/Guide/Design/View/Grid/images/B_Gridbuilder.png">page_img</link>
<link href="../../Data/FieldRules/images/Run_button.gif">lightning_img</link>
</links>
	
	
</page>