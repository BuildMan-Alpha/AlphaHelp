<page>
	<topic>Grid, Dialog and Custom Components - Storing state information</topic>
<sections>
<section>
	<description>The Grid , Dialog and Custom Components have two new methods, .setStateInfo() and .getStateInfo(), which allow you to store arbitrary information in the Grid object. Any information stored in the state object will be automatically submitted to the server on every Ajax callback. The Dialog and Custom component also have the same two methods.

 The .setStateInfo() method is very useful when you need to set a value and then be able to read that value on all subsequent Ajax callbacks.</description>
	<note>
In V10, in an Xbasic function that handled an Ajax callback, you could typically set a value in the rtc object that was passed into the event handler. This value would then be available on subsequent callbacks. This technique will no longer work in V11, and the technique described below should be used.</note>
</section>	
<section>
	<description>To explain the use of the .setStateInfo() method using a practical example, consider the case of a Grid with an updateable Detail View. When the user enters a new record, and sets the value of (say) the lastname field, you would like to use the value that the user entered for 'lastname' as the default value for the subsequent new record that the user might enter.

 Here is how this could be done.</description>
	
</section>	
	
	
<section>
	<title>Step 1.</title>
	<description>In the AfterInsertRecord event in the Grid builder, define this code:</description>
	<example><![CDATA[dim js as c 
dim ar as p
ar.defaultValue_LastName = e.dataSubmitted.lastname
dim json as c 
json = vartojson(ar,.f.,.t.)
 
'Construct the javascript command that sets the 
'defaultValue_Lastname' variable in the 'state' info object
js = "{grid.object}.setStateInfo(" + json + ");"
e.rtc.A_AjaxResponses[].text = js
 
'This defines the order in which the Javascript responses are emitted. 
'In this case the order is not important, so we just set a value of 1
e.rtc.A_AjaxResponses[..].id = 1 ]]></example>
</section>	

<section>
	<title>Step 2.</title>
	<description>In the onInitialValueCalculate event, define this code:</description>
	<example><![CDATA[dim defaultValue as c = ""

'Any data that was stored in the stateInfo object is submitted in the __si2 object.
if eval_valid("Request.Variables.__si2.defaultValue_LastName") then 
    defaultValue = Request.Variables.__si2.defaultValue_LastName
end if 

if defaultValue <> ""
    e.newvalues.lastname = defaultValue
end if ]]></example>
	<note>Every time the user clicks the New Record hyperlink to enter a new record in the Detail View, this event is fired</note>
</section>	

<section>
	
	<description>The .getStateInfo() method can be used in your Javascript code to read the values in the State info object. The data is returned as a text string of name value pairs, delimited with '&' characters. For example:</description>
	<example><![CDATA[myvar1=Value of myvar1&myvar2=Value of myvar2&myvar3=Value of myvar3 ]]></example>
</section>	

<section>
	
	<description>Your Javascript code can read the stateInfo object directly, For example:
</description>
	<example><![CDATA[var si = this.stateInfo;
alert(si.myvar1) ]]></example>
</section>	

<section>
	
	<description>Your Javascript code and also set the value of variables in the stateInfo object directly. For example:
</description>
	<example><![CDATA[var si = this.stateInfo;
si.myvar1 = 'new value for myvar1'; ]]></example>
</section>	

<section>
	<title>A shortcut for Dialog Server-side events</title>
	<description>In a Dialog you can also store state in a server-side event handler simply by setting values in e._state.

 For example, writing</description>
	<example><![CDATA[e._state.myvar = "alpha" ]]></example>
</section>	
	<section>
		<description>This is much easier than writing the Xbasic code to generate the Javascript to send back as part of the response generated by the server side event.</description>
	</section>
	
	
</sections>	
	<see>
		<ref>How to Set Default Value for a New Record to The Values of the Previously Entered Grid Record</ref>
	</see>
	
</page>