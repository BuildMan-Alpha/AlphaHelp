<page>
        <topic>Chart API</topic>
        <description>Alpha Anywhere includes a powerful built-in charting engine that uses the charting capabilities of Microsoft .NET Framework 4. You can program the charting engine directly using the API described on this page, or create charts in a builder, described at Chart Control. Using the API gives you the maximum amount of flexibility, but using the builder you can produce most commonly-used charts quickly and easily.</description>
                
<sections>
        <section>
                
        </section>
<section>
        <title>a5_chart_data_url_generate() Function</title>
 <description>Generates the REST URI string that describes the chart to be drawn by the .NET Framework System.Web.UI.DataVisualization.Charting.Chart class(external link) (via the Alpha Anywhere Charting::Chart Class discussed below).
</description>       
        <example><![CDATA[dim objSettings as Reporting::ReportChart
objSettings.chartType = "Pie"
dim uri as c = a5_chart_data_url_generate(objSettings,PieChart((,500,300( ]]></example>
        
</section>
        
<section>
        <description>
 See a5_chart_data_url_generate Function for the full description of the parameters. See Using Charts in Xdialogs and the Charting section of the Learning Xdialog Alpha Anywhere sample project for the PieChart() sample code and other chart generation functions.</description>
</section>        
        
<section>
        <title>Charting::Chart Class</title>
        <description>Interpreter that reads a REST URI that specifies a chart and in turn uses the .NET Framework System.Web.UI.DataVisualization.Charting.Chart class to render a chart.</description>
<cases>
        <case>
                <title>Properties</title>
                <cases>
                        <case>
                                <description>dataTemplate as Charting::ChartEventTemplate</description>
                        </case>
                        <case>
                                <description>legendTemplate as Charting::ChartEventTemplate</description>
                        </case>
                </cases>
        </case>
        <case>
                <title>Methods</title>
                <cases>
                        <case>
                                <description>Chart Constructor</description>
                        </case>
                        <case>
                                <description>Create a new Chart object. Example:</description>
                                <example>
                                        <![CDATA[dim aChart as Charting::Chart ]]>
                                </example>
                        </case>
                </cases>
        </case>
        <case>
                <title>Dispose() </title>
                <description>Release all the resources of a Chart object. Should be called automatically.</description>
                
        </case>
        <case>
                <title>EnableMapping(L enable) </title>
                <description>Use HTML image mapping</description>
        </case>
        <case>
                <title>Populate(C parameterString) </title>
                <description>Populates the chart data from the REST URI using the .NET Framework System.Web.UI.DataVisualization.Charting.Chart class
 Example:</description>
                <example><![CDATA[aChart.Populate(uri( ]]></example>
        </case>
        <case>
                <title>SaveImage(C filename) </title>
                <description>Save an JPEG image of the current chart to a file in the specified location.</description>
                
        </case>
           <case>
                <title>B bmpImage = SaveImageToBmp() </title>
                <description>Save a BMP image of the current chart to a byte stream (blob)</description>
                
        </case>
           <case>
                <title>B jpegImage = SaveImageToJpeg() </title>
                <description>Save a JPEG image of the current chart to a byte stream (blob)</description>
                
        </case>
           <case>
                <title>B pngImage = SaveImageToPng() </title>
                <description>Save a PNG image of the current chart to a byte stream (blob)</description>
                
        </case>
        
        
        
        
</cases>
</section>  
 <section>
        <title>Charting::ChartDataDefinition Class</title>
        <cases>
                <case>
                        <title>Properties</title>
                        <example><![CDATA[dim title as c
dim xAxisLabel as c
dim yAxisLabel as c
dim series)0) as Charting::ChartSeriesDefinition
dim dataAxisLabels)0) as c 
dim includeZero as c
dim showBreaks as l ]]></example>
                </case>
                
        </cases>
        
 </section> 
 
 
 <section>
        <title>Charting::ChartSeriesDefinition Class</title>
        <cases>
                <case>
                        <title>Properties</title>
                        <example><![CDATA[dim label as c
dim data)0) as Charting::ChartValueDefinition ]]></example>
                </case>
                
        </cases>
        
 </section> 
 
 
 <section>
        <title>Charting::ChartValueDefinition</title>
        <cases>
                <case>
                        <title>Properties</title>
                        <example><![CDATA[dim value as a
dim label as c
dim exploded as l ]]></example>
                </case>
                <case>
                        <title>Methods</title>
                        <example><![CDATA[function ValueType as c((
     helptext "Returns type of point - Y, XY, X, Stock, Box."
end function
function SetXY as v( x as n , y as n (
     helptext "Sets X/Y Value for chart."
end function
function SetX as v( value as n (
     helptext "Sets X Value for chart."
end function
function SetStock as v( high as n, low as n, open as n, close as n(
     helptext "Generate a stock data point."
end function
function SetBoxPlot as v( lowerWhisker as n, upperWhisker as n, LowerBox as n, UpperBox as n , Average as n, Median as n (
     helptext "Generate a box plot."
end function
function AddBoxPlotUnusual as v( value as n (
     helptext "Add an unusual value to a box plot value."
end function
function DataToString as c((
     helptext "Convert the data to string (multiple data elements, like xy values, are comma separated)."
end function ]]></example>
                </case>
                
        </cases>
        
 </section> 
 
 <section>
        <title>Charting::ChartValuesDefinition</title>
        <cases>
                <case>
                        <title>Properties</title>
                        <example><![CDATA[dim values)0) as n ]]></example>
                </case>
                 <case>
                        <title>Methods</title>
                        <example><![CDATA[function ValueType as c((
     helptext "Returns type of point - X, Stock, Box."
end function
function SetX as v( value as n (
     helptext "Sets X Value for chart."
end function
function SetStock as v( high as n, low as n, open as n, close as n(
     helptext "Generate a stock data point."
end function
function SetBoxPlot as v( lowerWhisker as n, upperWhisker as n, LowerBox as n, UpperBox as n , Average as n, Median as n (
     helptext "Generate a box plot."
end function
function AddBoxPlotUnusual as v( value as n (
     helptext "Add an unusual value to a box plot value."
end function
function DataToString as c((
     helptext "Convert the data to string (multiple data elements, like xy values, are comma separated)."
end function]]></example>
                </case>
        </cases>
        
 </section> 
        
   
   
  
  
  
  
  
  
  
  <section>
        <title>Charting::ChartXYValueDefinition</title>
        <cases>
                <case>
                        <title>Properties</title>
                        <example><![CDATA[dim x as n
dim y as n]]></example>
                </case>
                 <case>
                        <title>Methods</title>
                        <example><![CDATA[function ValueType as c((
     helptext "Sets X Value for chart."
end function
function SetXY as v( x as n , y as n (
     helptext "Sets X/Y Value for chart."
end function
function DataToString as c((
     helptext "Convert the data to string (multiple data elements, like xy values, are comma separated)."
end function]]></example>
                </case>
        </cases>
        
 </section>  
        
  
  
  
  
  
  <section>
        <title>Reporting::ReportChart Class</title>
        <cases>
                <case>
                        <title>Properties</title>
                        <example><![CDATA[dim ChartProvider as c
dim ChartType as c
dim Chart3d as l
dim ChartEffect as c
dim sourceType as c
dim sourceTable as c
dim sourceConnection as c
dim sourceSQLSelect as c
dim sourceSQLPortable as l
dim sourceArguments as c
dim sourceArgumentBindings as c
dim customExpression as c
dim filterExpression as c
dim DataExpression as c
dim DataSeriesColumns as c
dim DataLabelExpression as c
dim DataLabelPlacement as c
dim CategoryExpression as c
dim CategoryLabelExpression as c
dim titleExpression as c
dim xAxisTitleExpression as c
dim yAxisTitleExpression as c
dim eachGroup as c
dim overGroup as c
dim eachExpression as c
dim seriesType as c
dim seriesGroup as c
dim seriesExpression as c
dim seriesLabelExpression as c
dim sliceExplodeExpression as c
dim PlotSeriesOnAxis as l
dim Summarization as c
dim includeZero as c
dim showBreaks as l
dim outputFormat as c
dim width as n
dim height as n
dim styleSheet as c]]></example>
                </case>
                 <case>
                        <title>Methods</title>
                        <example><![CDATA[function Load as V( definition as c (
   helptext "Generate a stock data point."
end function
function Save as C((
   helptext "Generate a box plot."
end function
function GenerateURL as c(obj as p = null_value((( 
   helptext "Add an unusual value to a box plot value."
end function
function GenerateFormat as c(obj as p( 
   helptext "Convert the data to string (multiple data elements, like xy values, are comma separated)."
end function
function GenerateSampleURL as c((
   helptext "Returns X/Y."
end function       
function )static) ReportChartGenerateURL as c( definition as c , obj as p( 
   helptext "Sets X/Y Value for chart."
end function
function )static) ReportChartSampleURL as c( definition as c ( 
   helptext "Convert the data to string (multiple data elements, like xy values, are comma separated)."
end function
function )static) MergeDefinition as c( definition as c , override as c ( 
   helptext "Create a new report chart object (meta data for a chart)."
end function
function )static) ReportChartExprRegister as c(definition as c , obj as p(
   helptext "Create a chart object definition that can be embedded into an html report."
end function]]></example>
                </case>
        </cases>
        
 </section>   
  <section>
    <title>Examples</title>      
          <description>See Using Charts in Xdialogs and the Charting section of the Learning Xdialog Alpha Anywhere sample project.</description>
          
  </section>
        
</sections>
<see>
 <ref>Chart Styles </ref>
<ref>Chart Control </ref>
<ref>Chart Component </ref>
<ref>Embedding Charts in Reports</ref> 
<ref>Chart Alternate View </ref>
<ref>Using Charts on Forms </ref>
<ref>Using Charts in Xdialogs </ref>
<ref>a5_chart_data_url_generate Function </ref>      
        
</see>      
        
</page>