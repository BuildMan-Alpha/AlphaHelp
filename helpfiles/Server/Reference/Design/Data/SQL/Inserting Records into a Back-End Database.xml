<page>
	<shortlink>server ref sql Inserting Records into a Back-End Database</shortlink>
	<topic>Inserting Records into a Back-End Database</topic>
	<description>To insert records into a back-end database, you use the SQL INSERT command. The general syntax of the INSERT command is:
</description>
<sections>
	<section>
		
		<example><![CDATA[INSERT INTO tablename (field1, field2, field3....) VALUES (value1, value2, value3....)
 ]]></example>
		
	</section>
	<section>
		<description>Let us insert a new record into the customer table. First, we will get a count of the number of records in the table. In the Interactive window execute a query to get the number of records in the customer table.
The count(*) function is one of the AlphaDAO Portability Functions. It returns the table's record count. The result set contains one row with one field, which contains the answer. The first field is data(1).
</description>
		<example><![CDATA[dim conn as SQL::Connection
dim rs as SQL::ResultSet
dim qry as C
? conn.open("{A5API=Access,FileName='C:\Program Files\a5v8\MDBFiles\Alphasports.mdb',UserName='Admin'}")
= .T.
qry = "select count(*) from customer"
conn.Execute(qry)
? conn.ResultSet.data(1)
= 62
conn.close() ]]></example>
		
	</section>
	<section>
		<description>The following script inserts a new record and then displays the result set. First, dim variables.
</description>
		<example><![CDATA[dim conn as SQL::Connection
dim sql_insert as C
dim qry as C
dim rs as SQL::ResultSet
 ]]></example>
		
	</section>
	<section>
		<description>Next, open the connection and define the SQL INSERT command. Note the syntax of the command. The fields that will receive data and the corresponding values are in two comma delimited sets.
</description>
		<example><![CDATA[conn.open("{A5API=Access,FileName='C:\Program Files\a5v8\MDBFiles\Alphasports.mdb',UserName='Admin'}")
sql_insert = "insert into customer (firstname, lastname, bill_city, bill_postal_code, bill_state_region) values ('George', 'Jones', 'Arlington', '02000', 'VA')"
 ]]></example>
		
	</section>
	<section>
		<description>Insert the new record into the table with the .Execute() method.
</description>
		<example><![CDATA[? conn.execute(sql_insert)
= .T. ]]></example>
		
	</section>
	<section>
		<description>To view the results, execute a new query and preview the ResultSet. 
</description>
		<example><![CDATA[qry = "select * from customer WHERE firstname = 'George'"
? conn.execute(qry)
= .T.
rs = conn.resultset
SQL_ResultSet_Preview(rs)
 ]]></example>
		<figure><link>images/CST_After_Insert.gif</link></figure>
	</section>
	
	<section>
		<description>Close the connection.
</description>
		<example><![CDATA[conn.close() ]]></example>
		
	</section>
	<section>
		<description>Things of note about this code are:
</description>
		<cases>
			<case>
				<description>Note that we did not insert a value into the customer_id field. The reason is that this field was defined as an auto-increment field, which means you cannot assign it a value. Its value is automatically assigned by the back-end database engine.
</description>
			</case>
			<case>
				<description>We did not assign values to all of the fields in the table. In this case, this worked because the fields were not defined as required fields. Had any of the omitted fields been required, the insert would have failed.</description>
			</case>
		</cases>
		
	</section>
	<see>
		<ref link="Working with SQL">Working with SQL</ref>
		<ref>SQL::Connection::Execute()</ref>
	</see>
</sections>	
	<limitations>Desktop applications only. </limitations>
	
</page>