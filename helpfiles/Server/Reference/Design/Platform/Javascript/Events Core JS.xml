<page>
	<topic>Events Core JS</topic>
	
	<description>The core Javascript library provides several functions for adding and removing events from objects. Many developers like to create 'clean' HTML that does not have any Javascript events embedded in the HTML. This provides a nice separation between the HTML layout and the behavior of the HTML page.

The functions in this section describe how you can use Javascript to attach (i.e. bind) Javascript code to the various element events in your HTML page.
This methodology is often referred to as 'unobtrusive' Javascript because the Javascript which controls the HTML does not clutter up the HTML markup and is kept separate from the HTML.
</description>
	

<sections>
	<section>
		<title>$e.add(ELEMENT as element/string/array of ELEMENTs, TYPE as string, FUNCTION as function [, SCOPE as object, SCOPEOVERRIDE as logical, GROUPNAME as string])</title>
		<description>The $e.add() function allows you to add an event to a single or multiple HTML elements.
The first parameter is an HTML element, and ID or NAME, or an array of HTML elements, IDs, and/or NAMEs.
The TYPE parameter (2nd parameter) is the type of event. These events are standard DOM events (minus the "on"), like 'click', 'mousedown', 'mouseup', 'keydown', 'blur' etc. The table below show a complete list of event names.
</description>

	</section>
	<section>
		<list>
			<item>
				<name>click</name>
				<description>When the user clicks on an element.</description>
			</item>
			<item>
				<name>dblclick</name>
				<description>When the user double clicks on an element.</description>
			</item>
			<item>
				<name>mousedown</name>
				<description>When the user presses the mouse down on an element.</description>
			</item>
			<item>
				<name>mouseup</name>
				<description>When the user releases the mouse button after pressing mouse down on an element.</description>
			</item>
			<item>
				<name>mouseover</name>
				<description>When the mouse cursor moves over an element.</description>
			</item>
			<item>
				<name>mousemove</name>
				<description>When the mouse cursor is being moved over an element.</description>
			</item>
			<item>
				<name>mouseout</name>
				<description>When the mouse cursor leaves an element.</description>
			</item>
			<item>
				<name>keypress</name>
				<description>When the user presses a key. Will fire repeatedly while the key is being pressed.</description>
			</item>
			<item>
				<name>keydown</name>
				<description>When the user presses a key. Fires on the key down.</description>
			</item>
			<item>
				<name>keyup</name>
				<description>When the user presses a key and then releases it.</description>
			</item>
			<item>
				<name>focus</name>
				<description>When the user gives focus to an element.</description>
			</item>
			<item>
				<name>blur</name>
				<description>When a user 'blurs' an element. I.e. when an element looses focus.</description>
			</item>
			<item>
				<name>change</name>
				<description>When the user makes a change in a form element.</description>
			</item>
			<item>
				<name>reset</name>
				<description>When the user resets the data in a form using a 'Reset' button.</description>
			</item>
			<item>
				<name>submit</name>
				<description>When the user clicks a form's 'Submit' button.</description>
			</item>
			<item>
				<name>scroll</name>
				<description>When the user scrolls a scrollable element. This could be the page itself, of a DIV that has scroll bars.</description>
			</item>
			<item>
				<name>resize</name>
				<description>When the user resizes the browser window.</description>
			</item>
			<item>
				<name>load</name>
				<description>When the page is loaded.</description>
			</item>
			<item>
				<name>unload</name>
				<description>When the page is unloaded (i.e. when you navigate to another page, or the browser is closed).</description>
			</item>
			
			
			
		</list>
		
		
	</section>
	
	
	<section>
		<description>The FUNCTION parameter (3rd parameter) is the Javascript function you would liked to have called when the event occurs.
You can call the $e.add() function multiple times for a given element and event, allowing you to add multiple event handlers for the same event. For example:
</description>
		
		<example><![CDATA[$e.add('firstname','blur',validate1);
$e.add('firstname','blur',validate2);]]></example>
	</section>
	
	<section>
		<description>When the 'firstname' element loses focus, the validate2() function will be called first (since it was the most recent event handler to be added), and then the validate1() function will be called next.</description>
		<note>When you add an event to an element that already has an event defined in the HTML, the event defined in the HTML will still execute, and will be executed before any events that are added using the $e.add() function.</note>
	</section>
	<section>
		<cases>
			<case>
				<title>The DOM 'Event' Object</title>
				<description><p>When a DOM event (such as 'blur', 'keypress' etc.) occurs, the browser automatically stores relevant information about the event (such as what key was pressed, what is the mouse position, etc.) in the DOM event object. This object is automatically passed in as the first parameter to the Javascript function that is handling the event.</p>
<p>The DOM event object can also be used to stop an event from 'bubbling' (i.e. a 'click' event on a button that was contained in a DIV will first cause the button's onclick event to fire, then will cause the DIVs onclick event to fire and the will cause the page's onclick event to fire). You might want to prevent the event from bubbling up to the DIV and the page. You can do this by using the $e.stopEvent() function, passing in the DOM event object to this function.
</p></description>
			</case>
			
		</cases>
		
	</section>
	<section>
		<description>The SCOPE parameter (4th parameter - optional) is an object scope to be passed into the function that handles the event. The scope object is passed in as the second parameter to the event handler function (the DOM event object is passed in as the first parameter). This is an advanced parameter.

</description>
		
	</section>
	<section>
		<description>The SCOPEOVERRIDE parameter (5th parameter - optional) is a true/false value for whether or not you would like the passed in scope to take the place of the HTML element in the "this." namespace.
</description>
		<note>SCOPE and SCOPEOVERRIDE are advanced parameters that will rarely be needed.</note>
	</section>
	<section>
		<description>The GROUPNAME parameter (6th parameter - optional)  is a group name for the event. This is a 'convenience' feature. It can be used with the $e.removeGroup() function to remove multiple events from multiple objects. (Note: Your page might contain elements that have had events bound to them using the $e.add() function. If any of these elements are subsequently removed from the page (through setting innerHTML of a parent element, or through DOM manipulation), it is important to remove the events from these elements, or else a memory leak might occur.)</description>
		
	</section>
	</sections>

	<sections>
	<section>
		<title>Example 1</title>
		
	</section>
	<section>
		<description>Assume you have the following HTML page. Notice that the HTML has two input controls ('id_fn' and 'id_ln') and that there are no Javascript events defined in the HTML.</description>
		
	</section>
	<section>
		<description>We want to add a handler for the 'onblur' event for both of these controls. When either of the controls looses focus, we want to call the blurred() function.</description>
		
	</section>
	<section>
		<description>Notice that in the definition of the blurred() function, we show a parameter that is passed in (function blurred(e)). The argument is the DOM Event object that is automatically passed in to the event handler. The DOM Event object has information about the event that triggered the function call.</description>
		<example><![CDATA[<html>
    <head>
    </head>
    <body>
        <input id="id_fn" name="firstname"/>
        <input id="id_ln" name="lastname"/>
    </body>
</html>]]></example>
	</section>
	<section>
		<example><![CDATA[<script type="text/Javascript"  src="Javascript/core.js"></script>
 
<script type="text/Javascript">
function blurred(e) {
alert('ID:' + this.id + '\n Event type: ' +e.type + '\n Value in control: ' + this.value);
}

/*Add the event handler for the 'blur' event to the 'id_fn' and 'id_ln' elements.*/
$e.add(['id_fn','id_ln'],'blur',blurred);
</script>
]]></example>
		
	</section>
	<section>
		<title>Example 2</title>
		<description>This example demonstrates how you can bind multiple event handlers to an event, and shows the order in which the event handlers are executed.</description>
	</section>
	<section>
		<description>In this example, the HTML contains a definition for the onblur event for the 'id_fn' element. In addition to the event handler defined in the HTML, the Javascript code binds the msg2() function and then the msg3() function to the blur event for 'id_fn'.
If you load this page in a browser, when focus leaves the 'id_fn' element  you will notice the following:
</description>
		
	</section>
	<section>
		<cases>
			<case>
				<description>First, a dialog showing 'msg1' is shown, indicating that the event handler defined in the HTML executes first </description>
			</case>
			<case>
				<description>Next, a dialog showing 'msg3' is shown, indicating that the most recent event handler added using $e.add() is executed next. </description>
			</case>
			<case>
				<description>Finally, a dialog showing the control ID is shown, indicating that t he events added by $e.add() are executed in a 'last in - first out' order. </description>
			</case>
			
		</cases>
		
	</section>
	<section>
		<description>Notice that in the definition of the msg2() function we pass in the DOM event object and so the message box can display e.type (the type of the event that caused the event handler to be invoked). Also notice that the 'this' alias is implicitly passed in and can be used to get information about the control (such as it's ID - 'this.id', or current value - 'this.value')</description>
		<example><![CDATA[<html>
    <head>
    </head>
    <body>
        <input id="id_fn" name="firstname"  onblur="alert('msg1'); return false;" />
        <input id="id_ln"  name="lastname"/>
    </body>
</html>
<script type="text/Javascript" src="Javascript/core.js"></script>

<script type="text/Javascript">
function msg2(e) {
alert('ID:' + this.id + '\n Event type: ' +e.type + '\n Value in control: ' + this.value);
}

function msg3(e) {
alert('msg3');
}

/*Bind the msg2() function call to the 'blur' event on the 'id_fn' and 'id_ln' elements.*/
$e.add(['id_fn','id_ln'],'blur',msg2);
$e.add('id_fn','blur',msg3);
</script>
]]></example>
	</section>
	<section>
		<title>$e.remove(ELEMENT as element/string/array of ELEMENTs, TYPE as string, FUNCTION as function)</title>
		<description><p>The $e.remove() function allows you to remove an event on a single or multiple HTML elements.
The ELEMENT parameter is an HTML element, an ID or NAME, or an array of HTML elements, IDs, and/or NAMEs.
The TYPE parameter is the type of event. This can be standard DOM events (minus the "on"), like "click", "mousedown", "mouseup", "keydown", etc.
</p>
<p>The FUNCTION parameter is the Javascript function you was linked to the event.</p>
</description>
<note>This function only removes event handlers that were added using the $e.add() function. It cannot remove event handlers that are specified in the HTML markup.
</note>
	</section>
	<section>
		<description>Examples:</description>
		<example><![CDATA[//Assume that the $e.add() function had been previously called to add the 'validate1()' function to the 'on blur' event for the 'firstname' control.</x>
$e.remove('firstname','blur',validate1);
 
//Assume that the 'validate1()' function had been bound to multiple controls.
$e.remove(['firstname','lastname'],'blur',validate1);]]></example>
	</section>
	<section>
		<title>$e.removeGroup(GROUPNAME as string)</title>
		<note>When you use the $e.add() command to add events, you can specify an optional 'group' name. This group name is used in the $e.removeGroup() function.</note>
	</section>
	<section>
		<description>The $e.removeGroup() function allows you to remove events from elements that were initially set up with a 'group' name. This command is useful if you want to remove a large number of events from elements using  a single function call.</description>
		<note>It is important to remove any events that were added to elements before destroying the HTML elements (either through direct DOM manipulation, or by setting the innerHTML of some containing element). For example, assume that your page has a large number of input controls. You use the $e.add() function to bind a validation event handler to the 'onblur' event on all of these controls and you assign a group name.</note>
	</section>
	
	<section>
		<description>Examples:</description>
		<example><![CDATA[//Add some validation events to several form controls and assign an arbitrary group name of 'myForm'.
$e.add(['firstname','lastname','address','city','state','zip'],'blur',validateInput,null,false,'myForm');
 
$e.add('zip','blur',validateZip,null,false,'myForm');
//Now, 'zip' has two event handlers for its 'onblur' event.</x>
 
$e.add('zip','blur',lookupCity);
//Now, 'zip' has three event handlers for its 'onblur' event. However, this last event 
// handler is not part of the 'myForm' group.</x>
$e.removeGroup('myForm');
//Now all control have no event handlers attached to the 'onBlue' event, except 'zip' 
//which still has 'lookupCity()' as the event handler for the 'onblur' event.</x> ]]></example>
	</section>
	<section>
		<title>$e.stopEvent(EVENT as event)</title>
		<description>The $e.stopEvent() function allows you to stop an event from bubbling up through the hierarchy of elements on a page.
You pass in the event object variable that was passed into the function that is handling the event.
</description>
	</section>
	<section>
		<description>Example:</description>
		<example><![CDATA[/*This adds an event handler for the 'onkeyup' event to both the document body, and an input called 'input1'.</x>
If the user types a key in the input, the keypressInput()  function will handle the event, and then the keypressBody() function
will ALSO handle the event (because the event 'bubbles' up through the hierarchy of element on the page. */
 
$e.add(document.body,'keyup',keypressBody);
$e.add('input1','keyup',keypressInput);
   
/*Now, assume that when the user types a key into the input, you want the keypressInput() function to be called, but NOT the keypressBody()  function.
To do this, you must stop the 'onkeyup' event from 'bubbling up'.</x>
 
This is done by calling the $e.stopEvent() function inside the keypressInput() function. For example:
*/      
function keypressInput(evnt) {
    $e.stopEvent(evnt);
    //Actual code you want to handle the keypress goes here.
    //Note: the 'evnt' variable is always passed into a function that was bound using the $e.add() function.
    //The 'evnt' variable contains information about the event that happened, such as mouse position, or key pressed.
 }]]></example>
	</section>
	
	<section>
		<title>$e.onloaded</title>
		<description><p>$e.onloaded is an optionally defined function that will be called after the page has been fully loaded, and the "$e" object has been fully initialized. This function can only be used once on a page. This function is useful if you want to execute some Javascript when a page is loaded, if that Javascript is dependent on the "$e" object being fully initialized.</p>

<p>For example, assume that you have a page with an auto-suggest input control. The auto-suggest control is instantiated using the "A5.AutoSuggest()" function. Assume that when the page is loaded, you want initial focus to go to this control. Assume that the control has an ID of "SUGGEST1". You might be tempted to put the following code in the BODY tag's "onload" attribute. For example:</p>
</description>
		<example><![CDATA[$('SUGGEST1').focus();  
 ]]></example>
	</section>
	<section>
		<description>However, this will not work because the "A5.AutoSuggest()" function which initializes the auto-suggest control has not yet executed. The auto-suggest control utilizes the "$e" object. We need to wait till the "$e" object has been fully initialized before we can set focus to "SUGGEST1". The "$e.onloaded" function is how we solve the problem.</description>
		<example><![CDATA[$e.onloaded = function(){
      $('SUGGEST1').focus();
   }]]></example>
	</section>
</sections>

	
	
	
</page>