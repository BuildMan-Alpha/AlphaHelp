<page>
	<topic>Operators in Xbasic</topic>
	<description>Operators are used to write logical, arithmetic, character, date, time, and comparison expressions in xbasic.</description>
	<sections>
		<section>
			<title>Operator Precedence</title>
			<description>A logical expression can include multiple comparison operations that are connected logically through the .AND. and .OR. operators. To control the order in which the expression is evaluated, use parentheses. Alpha Anywhere uses the following order of precedence when evaluating comparisons in logical expressions:</description>
			<steps>
				<step>
					<description>All arithmetic operations</description>
				</step>
				<step>
					<description>Operations enclosed in parentheses</description>
				</step>
				<step>
					<description>.NOT.</description>
				</step>
				<step>
					<description>Substring inclusion ($)</description>
				</step>
				<step>
					<description>Relative and relative or equal (&lt;=, &gt;=, &lt;, &gt;)</description>
				</step>
				<step>
					<description>Equal, Exactly Equal, Not Equal, and Not Exactly Equal (=, = =, &lt;&gt;, !=)</description>
				</step>
				<step>
					<description>.AND.</description>
				</step>
				<step>
					<description>.OR.</description>
				</step>
			</steps>
		</section>
		<section>
			<description>Including operators in order according to their precedence allows parenthesis to be implied when combining operations. For example, the expression:</description>
			<example><![CDATA[A >= 5 .AND. B = 10 .OR. A >= 50]]></example>
		</section>
		<section>
			<description>is equivalent to:</description>
			<example><![CDATA[(A >= 5 .AND. B = 10) .OR. A >= 50]]></example>
		</section>
		<section>
			<description>since the .AND. operator has precedence over the .OR. operator.When multiple operations have the same precedence, they are evaluated from left to right. For example:</description>
			<example><![CDATA[.6 < 10 .AND. "Apple"="Apple" .AND. "Alpha" < "Beta"  ?span>  TRUE]]></example>
		</section>
		<section>
			<title>Using Operators</title>
			<description>An operator is a symbol used to represent a mathematical, relational, logical, or string operation. For example, the asterisk (*) represents the mathematical operation of multiplication. Functions, field names, and constants can be combined with operators to form complex expressions. Most operators use the following syntax:</description>
			<example><![CDATA[expression operator expression]]></example>
		</section>
		<section>
			<description>Each data type (Character, Date, Logical, And Numeric) has a corresponding list of operators for combining multiple values of the same type together into a single value. The resulting data type is determined by the operator and the data type of its operands. There are several types of operators:</description>
		</section>
		<section>
			<list>
				<item>
					<name-title>Operator Type</name-title>
					<description-title>Resulting Data Type</description-title>
				</item>
				<item>
					<name>Arithmetic</name>
					<description>Numeric</description>
				</item>
				<item>
					<name>Character</name>
					<description>Character</description>
				</item>
				<item>
					<name>Date</name>
					<description>Date</description>
				</item>
				<item>
					<name>Logical</name>
					<description>All types</description>
				</item>
				<item>
					<name>Comparison</name>
					<description>All types</description>
				</item>
			</list>
		</section>
		<section>
			<title>Operators</title>
		</section>
		<section>
<!--order:
Arithmetic Operators
Character Operators
Date Operators
Logical Operators
Comparison Operators
Backslash
Argument Designator
Namespace Designator
Assignment Operator
-->
			<!--list:.-->
		</section>
	</sections>
</page>