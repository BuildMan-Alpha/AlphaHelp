<page>
	<topic>Grid Component</topic>
	<description>A list of various properties and methods from the Grid Component</description>
<properties>
 <property>
 <name>{Grid.ChildComponentName}</name>

 <description>For use in the case when you are opening a child Grid in a pop-up Ajax window.
 Gets replaced with the alias of the child Grid Component.</description>
 </property>
 
  <property>
 <name>{Grid.ChildObject}</name>

 <description>For use in the case when you are opening a child Grid in a pop-up Ajax window.
 Gets replaced with the name of the Javascript Grid Component Object for the child Grid that is opened in a pop-up Ajax window. Use this placeholder when you want to call a method of the child Grid Object. e.g. {Grid.ChildObject}.sort(2), to sort the Grid on column 2.</description>
 </property>
 
  <property>
 <name>{Grid.ComponentName}</name>

 <description>Gets replaced with the alias of the Grid Component. For example, if the Grid alias is 'GRID1', then is replaced with 'GRID1'.</description>
 </property>
 
  <property>
 <name>{Grid.ControlIdEscaped}</name>

 <description>The control Id of the control. Special characters in the id are Javascript escaped. You must use this placeholder (and not {Grid.ControlId}) if you want to use this placeholder in a selector (such as JQuery - jQuery('#{Grid.controlIDEscaped}') )</description>
 </property>
  <property>
 <name>{Grid.ControlId}</name>

 <description>The control Id of the control. Note: See comment on {Grid.ControlIDEscaped}.</description>
 </property>
  <property>
 <name>{grid.Object}.isDirty;</name>

 <description>Returns true if the Grid (either Grid part or Detail View part) is dirty (i.e. record has been edited, but not yet saved).</description>
 </property>
  <property>
 <name>{Grid.object}</name>

 <description>Gets replaced with the name of the Javascript Grid Component Object. For example, if the Grid alias is 'GRID1', then is replaced with 'GRID1_GridObj'. Use this placeholder when you want to call a method of the Grid Object. e.g. {Grid.Object}.sort(2), to sort the Grid on column 2.</description>
 </property>
  <property>
 <name>{Grid.RowID}</name>

 <description>Gets replaced with the row number of the Grid in which the Javascript is inserted. For new record rows, the 'NEWROW' prefix is used (e.g. for the first new record row - 'NEWROW1'). Used in constructing Javascript object names where the use of a - sign would result in an invalid object name.</description>
 </property>
  <property>
 <name>{Grid.RowNumber}</name>

 <description>Gets replaced with the row number of the Grid in which the Javascript is inserted. For new record rows, negative numbers are used. For example, the 2nd new record row is -2. </description>
 </property>
  <property>
 <name>{Grid.Style}</name>

 <description>Gets replaced with the style name of the Grid. For example, if the style is 'GlassOlive', then gets replaced with 'GlassOlive'.</description>
 </property>
 </properties>
	
<methods>
 <method>

 <syntax>_getGridVariables(grid,detailView)</syntax>
 <description>Sets the value of special system fields that give information about the state of the Grid. See example for more information.
</description>

 </method>
 
  <method>

 <syntax>_resetRow(rowNumber)</syntax>
 <description>Undoes any edits made to a row in the Grid and returns the row to its unedited state.
</description>

 </method>
 
  <method>

 <syntax>_selectAllRowCheckboxes(flag)</syntax>
 <description>If a Grid has a checkbox column, sets the state of the checkbox in all rows of the Grid.
</description>

 </method>
  <method>

 <syntax>activateControlContainer(colName,part,rowNum)</syntax>
 <description>If a control is inside a Tab or Accordion container, activates the pane in which the control in contained. Only applies to input controls.
</description>

 </method>
 
  <method>

 <syntax>ajaxCallback(part,rowNum,xbasicFunction [[,callbackURL [[,additionalData]])</syntax>
 <description>Does an Ajax callback to a server. Data from the current row is submitted to the server. It is recommended that you use Action Javascript to write the code for you.
</description>

 </method>
 
  <method>

 <syntax>alphabetSearch(searchId)</syntax>
 <description>Executes an Alphabet Button search. searchId is the numeric index of the Alphabet Button.
</description>

 </method>
  <method>

 <syntax>animateHide(ele ,animationObject )</syntax>
 <description>Allows you to hide an element on the page using animation. See {grid.object}.animateToggle() for more information.
</description>

 </method>
  <method>

 <syntax>animateShow(ele ,animationObject  )</syntax>
 <description>Allows you to show an element on the page using animation. See {grid.object}.animateToggle() for more information.
</description>

 </method>
  <method>

 <syntax>animateToggle(ele ,animationObject )</syntax>
 <description>Allows you to show/hide an element on the page. If the element is currently hidden, it is shown, and vice versa. When the element is shown/hidden, it is animated. If the second argument is blank, the default animation style is slide and the duration is 200 milliseconds. The animationObject can have an optional property called onComplete which is a callback function to execute when the animation is complete.
</description>

 </method>
  <method>

 <syntax>argumentValue(argumentName)</syntax>
 <description>Get the value of an argument that was passed into the Grid.
</description>

 </method>
 
  <method>

 <syntax>autoRefreshStart(interval)</syntax>
 <description>Automatically refreshes the Grid (if it is not currently dirty) on the specified interval (in milliseconds)
</description>

 </method>
 
  <method>

 <syntax>autoRefreshStop()</syntax>
 <description>Turns off auto-refresh
</description>

 </method>
  <method>

 <syntax>cancelEditDetailViewRecord()</syntax>
 <description>If the Detail View RowEditStyle is set to OnDemand, and the Detail View is in edit mode, returns the Detail View to the non-editable state.
</description>

 </method>
  <method>

 <syntax>cancelEditRow(rowNumber)</syntax>
 <description>If the Grids Row edit style is set to RowOnDemand, and the row is in edit mode, returns the row to the non-editable state.
</description>

 </method>
 
  <method>

 <syntax>clearDetailViewGlobalError()</syntax>
 <description>Clears any errors set previously by the .setDetailViewGlobalError() method.
</description>

 </method>
  <method>

 <syntax>clearErrors(rows)</syntax>
 <description>Clears errors in the specified rows. rows is a Javascript array of row numbers.
</description>

 </method>
 
  <method>

 <syntax>clearRowErrors()</syntax>
 <description>Clears all row errors. See .setRowErrors() for more information.
</description>

 </method>
  <method>

 <syntax>clearSearchForm()</syntax>
 <description>Clears the Search part form and removes the filter that was applied by the Search part. This method is equivalent to clicking the Clear Search Criteria hyperlink in the Search part.
</description>

 </method>
  <method>

 <syntax>closeContainerWindow()</syntax>
 <description>If the Grid is opened inside a pop-up Javascript window, closes the window in which the Grid is contained. Need to pass in a pointer to any element on the Grid.
</description>

 </method>
 
  <method>

 <syntax>closeCurrentTabbedUIPane()</syntax>
 <description>If the Grid was opened in a Tabbed UI Pane, closes the current pane in the Tabbed UI.
</description>

 </method>
 
  <method>

 <syntax>closeDetailView()</syntax>
 <description>Close the Detail View.
</description>

 </method>
 
  <method>

 <syntax>closeParentContainer()</syntax>
 <description>If a Grid is displayed in a pop-up Ajax window, or a Tabbed UI pane, closes the parent window or Tabbed UI pane.
</description>

 </method>
  <method>

 <syntax>deleteDetailViewRecord()</syntax>
 <description>Delete the record shown in the Detail View.
</description>

 </method>
  <method>

 <syntax>deleteRow(rowNumber)</syntax>
 <description>Delete the record in the specified row of the Grid part.
</description>

 </method>
 
  <method>

 <syntax>detailViewFirstRecord()</syntax>
 <description>Navigate the record shown in the Detail View to the first record in the Grid.
</description>

 </method>
 
  <method>

 <syntax>detailViewLastRecord()</syntax>
 <description>Navigate the record shown in the Detail View to the last record in the Grid.
</description>

 </method>
  <method>

 <syntax>detailViewNewRecord()</syntax>
 <description>Put the Detail View into enter record mode so that a new record can be added.
</description>

 </method>
 
  <method>

 <syntax>detailViewNextRecord()</syntax>
 <description>Navigate the record shown in the Detail View to the next record in the Grid.
</description>

 </method>
 
  <method>

 <syntax>detailViewPreviousRecord()</syntax>
 <description>Navigate the record shown in the Detail View to the previous record in the Grid.
</description>

 </method>
 
  <method>

 <syntax>detailViewRefresh()</syntax>
 <description>Refresh the data shown in the Detail View by making an Ajax callback to get the current data in the database.
</description>

 </method>
   <method>

 <syntax>detailViewToggle(rowNumber)</syntax>
 <description>Toggle the state of the Detail View. If it is not current open, show it. If it is currently open, then close it.
</description>

 </method>
   <method>

 <syntax>detailView(rowNumber)</syntax>
 <description>Display the Detail View for the specified row in the Grid part.
</description>

 </method>
 
   <method>

 <syntax>editDetailViewRecord()</syntax>
 <description>If the Detail View RowEditStyle is set to OnDemand, and the Detail View, puts the Detail View into edit mode.
</description>

 </method>
 
   <method>

 <syntax>editFieldDV(field)</syntax>
 <description>If the Detail Views RowEditStyle is set to RowOnDemand, puts the Detail View into edit mode. Focus is set to the specified field (field must be uppercase, with spaces in the fieldname replaced with underbar). This method is equivalent to double clicking on a particular field in the Detail View to edit that field.
</description>

 </method>
 
   <method>

 <syntax>editField(rowNumber, field)</syntax>
 <description>If the Grids RowEditStyle is set to RowOnDemand, puts the specified row into edit mode. Focus is set to the specified field (field must be uppercase, with spaces in the fieldname replaced with underbar). This method is equivalent to double clicking on a particular field in a Grid row to edit that field.
</description>

 </method>
 
   <method>

 <syntax>editRow(rowNumber)</syntax>
 <description>If the Grids RowEditStyle is set to RowOnDemand, puts the specified row into edit mode.
</description>

 </method>
 
   <method>

 <syntax>fetchExplicitRecord(primaryKeyValue)</syntax>
 <description>Makes an AJAX callback and retrieves the record identified by the primaryKeyValue and then adds that record to the Grid as the last record on the page. Typically used with read-only Grids. If the primary key for the table the Grid is based on is composed of multiple fields, primarykeyValue should be a ||| (3 pipes) delimited list of values.
</description>

 </method>
 
   <method>

 <syntax>filterCheckedRows()</syntax>
 <description>If the checkbox column in the Grid has been turned on, executes a search on the Grid that returns the checked records. This is useful if you want to perform some subsequent action on just the checked records, such as printing a report, or exporting data to Excel. Once you have performed a filter on the checked rows, you can export the curently selected records, or print the currently selected records.
</description>

 </method>
 
   <method>

 <syntax>getMapDataFromSearchPart()</syntax>
 <description><![CDATA[If the Search Part has a map control, allows you to read the data from search part. For example, the map center point, the position of the polygon points, etc. The data is returned in the form of name/value pairs that are separated with & characters.]]>
</description>

 </method>
 
   <method>

 <syntax>getParentObject()</syntax>
 <description>If this component was opened from a parent Grid or Dialog component, returns a pointer to the parent object so you can execute methods on the parent object.
</description>

 </method>
 
   <method>

 <syntax>getSessionVariable(variableName)</syntax>
 <description>Get the value of a session variable. The session variable must explicitly published - see Published session variables property in the Grid builder.
</description>

 </method>
   <method>

 <syntax>getStateInfo()</syntax>
 <description><![CDATA[Gets the data from the Grid Components state object in the form of a text string of name value pairs, delimited with &characters.]]>
</description>

 </method>
 
   <method>

 <syntax>getValue(part,name,row - omit for Search and Detail View part)</syntax>
 <description>Get the value of a control in the Grid, Search or Detail View part. Part is G , D or S (Grid, Detail View or Search part). Row is only needed for Grid part. For new record rows, row is negative. IMPORTANT:The name and part parameters MUST be all UPPERCASE.
</description>

 </method>
 
   <method>

 <syntax>gridBaseFilterSet(filterExpression, orderExpression, filterParameters)</syntax>
 <description>Set the Grid base filter. Contrast with the .gridFilterSet() method. The base filter cannot be removed by the user. See .gridFilterSet() method for more information.
</description>

 </method>
 
   <method>

 <syntax>gridFilterSet(filterExpression [[, orderExpression [[, filterParameters]])</syntax>
 <description>Set an explicit filter and/or order expression for the Grid. If the Grid is based on .dbf files, use Xbasic syntax for the filter and order. If the Grid is based on SQL tables, use SQL syntax for the filter.
</description>

 </method>
 
   <method>

 <syntax>gridLink(linkDefinition)</syntax>
 <description>Linking a Grid is similar to filtering a Grid, except that when the linked Grid is edited, or new rows are entered, the linking field values are automatically set to the linking values. For example if a Grid is linked using the link definition of Customer_Id=00023 then the Grid will only show records in which the Customer_id is equal to 00023 and any new records that are added will automatically set the Customer_id to 00023. The link definition is specified using a special syntax. You can also specify an optional filter expression and order expression. The filter is applied in addition to the filter implied by the link definiton.
</description>

 </method>
 
   <method>

 <syntax>gridQBERowToggle()</syntax>
 <description>Toggles the state of the Grid QBE row.
</description>

 </method>
   <method>

 <syntax>gridQBERowVisible(isVisible)</syntax>
 <description>Opens or closes the Grid QBE row. If isVisible is true, then the QBE row is show. If isVisible is false, the QBE row is hidden.
</description>

 </method>
 
   <method>

 <syntax>gridUnlink()</syntax>
 <description>Unlink a Grid that was previouly linked using the .gridLink() method.
</description>

 </method>
 
   <method>

 <syntax>harvestColumn(fieldname , delimiter)</syntax>
 <description>Gets the value for a field in every row of the Grid and returns a delimited string. Default value for delimiter is a comma.
</description>

 </method>
 
   <method>

 <syntax>loadCSSFile(CSSFilename , flagForceLoad)</syntax>
 <description>Loads CSS from a file. If the flagForeLoad argument is true then the CSS file is loaded even if it has been previously loaded. The default value for flagForceLoad is false.
</description>

 </method>
 
   <method>

 <syntax>loadJavascriptFile(javascriptFilename)</syntax>
 <description>Loads Javascript from a file.
</description>

 </method>
 
   <method>

 <syntax>loadJavascript(javascript)</syntax>
 <description>Loads a string of Javascript code (typically function definitions). Important: The javascript code that is supplied as the function argument must be prepared by removing removing all CRLF characters and by escaping any special characters.
</description>

 </method>
 
   <method>

 <syntax>loadSavedSearch(name,flagExecuteSearch)</syntax>
 <description>Loads a previously saved search from the repository and populates the Search Part in the Grid. If flagExecuteSearch is true, the search will be executed.
</description>

 </method>
 
   <method>

 <syntax>loadXbasic(xbasicCode)</syntax>
 <description>Loads Xbasic function definitions. For use when Grid is running in Working Preview mode and you want to load client-side Xbasic function definitions to handle HTML events. Important: The Xbasic code that is supplied as the function argument must be prepared by replacing all CRLF chracters with semi-colons. You can pass in an optional second argument of V10, V11 etc. to indicate what version of Alpha Five you are using.
</description>

 </method>
 
  <method>

 <syntax>openLookup(part,rowNum,fieldName)</syntax>
 <description>Opens the lookup Grid for a particular field. part is G - for a field in the Grid part, or D - for a field in the Detail View part. fieldName is the field for which the Lookup was defined. fieldName must be uppercase.
</description>

 </method>
 
  <method>

 <syntax>pageNavigate(target)</syntax>
 <description>Navigates to the specified page. Target can be an absolute page number (e.g. 23), or first, prev, next or last.
</description>

 </method>
 
  <method>

 <syntax>populateDropdownBox(part,columnName,rowNumber,data,clearExistingData)</syntax>
 <description>Populates the choices in a Dropdownbox control in the Grid or Detail View part.
</description>

 </method>
  <method>

 <syntax>quickSearchClear()</syntax>
 <description>Clears the current Quick Search filter.
</description>

 </method>
 
  <method>

 <syntax>quickSearch(searchFor)</syntax>
 <description>Peforms a Quick Search for the specified value.
</description>

 </method>
 
  <method>

 <syntax>refreshExternalTreeNavigator()</syntax>
 <description>Applies to a Tree Control Navigator. Causes the data in the tree control navigator to be refreshed.
</description>

 </method>
  <method>

 <syntax>refreshLinkedContent()</syntax>
 <description>Causes the Grid(s) displayed in the Linked Content Sections to refresh. This method is automatically called whenever the row with focus changes.
</description>

 </method>
  <method>

 <syntax>refreshRow(rowNum)</syntax>
 <description>Refreshes the data in the specified Grid row. An Ajax callback is made to get the current data stored in the Database. Contrast with the .refresh() method which refreshes all Grid rows.
</description>

 </method>
 
  <method>

 <syntax>refresh()</syntax>
 <description>Refreshes the data shown in the Grid. Does an Ajax callback to get up-to-date data from the database. Contrast with the .refreshRow() method which refreshes a single row. Summary values will be recalculated. Any records that have been added since the last refresh, that do not satisfy the current filter condition will not be redisplayed.
</description>

 </method>
 
  <method>

 <syntax>resetDetailView()</syntax>
 <description>Undoes all edits to the Detail View record and returns the record to is state before any edits were made.
</description>

 </method>
  <method>

 <syntax>resetGridPart()</syntax>
 <description>Undoes all edits to all records in the Grid part and returns the records to the state before any edits were made. Equivalent to the user clicking the Cancel button in the Grid toobar.
</description>

 </method>
 
  <method>

 <syntax>rowCollapse(rowNum)</syntax>
 <description>Close the row expander for the specified row.
</description>

 </method>
  <method>

 <syntax>rowExpandToggle(rowNum)</syntax>
 <description>Toggles the row expander for the specified row. If the row expander was closed, it is opened, and vice versa.
</description>

 </method>
  <method>

 <syntax>rowExpand(rowNum)</syntax>
 <description>Opens the row expander for the specified row.
</description>

 </method>
 
  <method>

 <syntax>saveSearchCriteria(name)</syntax>
 <description>Saves the values that have been entered into the Search Part as a saved search in the repository using the passed in name.
</description>

 </method>
 
  <method>

 <syntax>setDetailViewGlobalError(txt)</syntax>
 <description>Sets the error text for the Detail View Global Errors section. The argument to the function is the html text. Global errors appear above the Detail View section. Contrast Global Errors with Field Errors, which appear right next to the field.
</description>

 </method>
  <method>

 <syntax>setErrors(errors)</syntax>
 <description>Display error messages for fields in the Grid part. errors is a Javascript array of JSON objects. The JSON object has two properties: id - the id of the object for which the error occurred, and message - the error message.
</description>

 </method>
 
  <method>

 <syntax>setFocus(rowNum)</syntax>
 <description>Sets focus to the specified row number. To set focus to a new record use, use negative numbers. e.g. First new record row is -1, second new record row is -2, etc.
</description>

 </method>
 
  <method>

 <syntax>setRowErrors(errors)</syntax>
 <description>Sets the row error for the specified row. A row error appears as an icon to the left of the row. Row errors are used when the error does not apply to a specific field. The method takes an array of JSON objects. The JSON objects have a row and message property.
</description>

 </method>
 
  <method>

 <syntax>setRowsPerPage(rows)</syntax>
 <description>Sets the number of records per page to show in the Grid part.
</description>

 </method>
 
  <method>

 <syntax>setSelectedRow(rowNum)</syntax>
 <description>Sets focus to the specified row number.
</description>

 </method>
 
  <method>

 <syntax>setStateInfo(obj)</syntax>
 <description>Allows you to store arbitrary data in the Grid Components state object. The data in the state object is submitted along with the data in the Grid controls every time you submit the Grid, or make an Ajax callback. The data will be in the __si2 variable.
</description>

 </method>
 
 
  <method>

 <syntax>setValue(part,name,row - omit for Search and Detail View,value ,honorChangeEvent)</syntax>
 <description>Set the value of a control in the Grid, Search or Detail View part. Part is G , D or S (Grid, Detail View or Search part). Row is only needed for Grid part. For new record rows, row is negative. By default honorChangeEvent is true. This causes the onchange event for the control to fire when the value is set.
</description>

 </method>
 
  <method>

 <syntax>showAll()</syntax>
 <description>Removes all filters added by the user and shows all records in the Grid. The base filter (specified in the Grid definition) is NOT removed.
</description>

 </method>
   <method>

 <syntax>showGridColumn(columnName, showHide)</syntax>
 <description>Shows or hides a Grid column. If showHide is true, the column is shown (if it was hidden by a previous command that called this method to hide the column).
</description>

 </method>
 <method>

 <syntax>showRowExpandGrid(gridNum,rowNum)</syntax>
 <description>If the Row Expander contains multiple Grids, the Grids are shown in a Tab or Accordion control. This method shows the specified Grid for the specified row.
</description>

 </method>
 <method>

 <syntax>sort(column)</syntax>
 <description>Sort the Grid on the specified column number. Equivalent to clicking on the column title to sort the Grid on that column. If the Grid is already sorted on the specified column, sorts in the opposite direction.
</description>

 </method>
 <method>

 <syntax>submitDetailView()</syntax>
 <description>Submit the Detail View part to commit any edits that were made to the record shown in the Detail View. If you supply an optional argument of true, then the record is saved and a new record is shown. This allows you to do continuous data entry.
</description>

 </method>
 <method>

 <syntax>submitGridPartRow(rowNum)</syntax>
 <description>Submits any edits that the user made to a particular row in the Grid.
</description>

 </method>
 <method>

 <syntax>submitGridPart()</syntax>
 <description>Submit the Grid part to commit any edits that were made to the records shown in the Grid part. Contrast with the .submitGridPartRow() method which submits an individual Grid row.
</description>

 </method>
 <method>

 <syntax>submitSearchForm()</syntax>
 <description>Submits the Search form and performs a search using the criteria that the user entered into the Search part form.
</description>

 </method>
 
 
 </methods>
 
 
 	
</page>