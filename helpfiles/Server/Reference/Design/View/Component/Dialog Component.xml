<page>
	<topic>Dialog Component</topic>
<description>Dialog component javascript interface.</description>	
<sections>
<section>
	<title>Properties</title>
<cases>
	<case>
		<title>{dialog.ComponentName}</title>
		<description><![CDATA[Gets replaced with the alias of the Dialog Component. For example, if the Dialog alias is 'DLG1', then is replaced with 'DLG1'.]]></description>
	</case>
	<case>
		<title>{dialog.ControlIdEscaped}</title>
		<description><![CDATA[The control Id of the control. Special characters in the id are Javascript escaped. You must use this placeholder (and not {dialog.ControlId}) if you want to use this placeholder in a selector (such as JQuery - jQuery('#{dialog.controlIDEscaped}') )]]></description>
	</case>
	<case>
		<title>{dialog.ControlId}</title>
		<description><![CDATA[The control Id of the control. Note: See comment on {dialog.ControlIDEscaped}.]]></description>
	</case>
	<case>
		<title>{dialog.EmbeddedCustomComponent_[Alias]}</title>
		<description><![CDATA[Used to get the Object name of an embedded Custom Component. Replace [Alias] with the alias you specified for the embedded Custom Component object.
 You can use this placeholder to execute methods on the embedded Custom Component.]]></description>
	</case>
	<case>
		<title>{dialog.EmbeddedDialog_[DialogAlias]}</title>
		<description><![CDATA[Used to get the Object name of an embedded Dialog Component. Replace [DialogAlias] with the alias you specified for the embedded Dialog object.
 You can use this placeholder to execute methods on the embedded Dialog.]]></description>
	</case>
	<case>
		<title>{dialog.EmbeddedGrid_[GridAlias]}</title>
		<description><![CDATA[Used to get the Object name of an embedded Grid Component. Replace [GridAlias] with the alias you specified for the embedded Grid object.
 You can use this placeholder to execute methods on the embedded Grid.]]></description>
	</case>
	<case>
		<title>{dialog.listId}</title>
		<description>For use with the List control. Gets replaced with the ID of the current List control.</description>
	</case>
	<case>
		<title>{dialog.object}</title>
		<description>Gets replaced with the name of the Javascript Dialog Component Object. For example, if the Dialog alias is 'DLG1', then is replaced with 'DLG1_DlgObj'. Use this placeholder when you want to call a method of the Dialog Object. e.g. {Dialog.Object}.submit(), to submit the Dialog to the server.</description>
	</case>
	<case>
		<title>{dialog.Style}</title>
		<description><![CDATA[Gets replaced with the style name of the Dialog. For example, if the style is 'GlassOlive', then gets replaced with 'GlassOlive'.]]></description>
	</case>
	
	
	
	
</cases>	
	
	
</section>	
<section>
	<title>Methods</title>
<cases>
	<case>
		<title>_findRepeatingSection(controlName)</title>
		<description>Returns the name of the Repeating Section container in which a particular control is to be found.</description>
	</case>
	<case>
		<title><![CDATA[_listFetchMore(listId)]]></title>
		<description><![CDATA[Gets the next page of data in a List that has been configured to use Fetch More pagination.]]></description>
	</case>
	<case>
		<title>_listFetchRecordsByKey(listId,keys)</title>
		<description>Appends records to the end of the list. The records to append are specified by their primary key values. You can fetch one or more records. In the case where the List is based on a SQL datasource, the list must be configured to return the Primary Key of the table.
</description>
	</case>
	<case>
		<title>_listNavigateToPage(listId,pageNumber)</title>
		<description>Navigates to an explicit page number. (List must be configured as paginated.)
</description>
	</case>
	<case>
		<title>_listNavigate(listId,direction)</title>
		<description>Navigates to the next/previous page of data in a List that has been configured to use pagination. direction can be first, prev, next, last. (List must be configured as paginated.)
</description>
	</case>
	<case>
		<title>_listRefreshCascadingLists(listId)</title>
		<description>Refreshes the data in child List controls that are dependent on the data in this List control.
</description>
	</case>
	<case>
		<title>_listRefreshRecordsByKey(listId,keys [,options])</title>
		<description>Refreshes the data in the List for the specified records. The records to refresh are specified by their primary key values. You can refresh one or more records. In the case where the List is based on a SQL datasource, the list must be configured to return the Primary Key of the table. If the list of keys to refresh contains keys that are not currently displayed in the List control, these records can be optionally appended to the List
</description>
	</case>
	<case>
		<title>_listRefreshRow(listId)</title>
		<description>Refreshes the data in the current row of a List control.
</description>
	</case>
	<case>
		<title>_populateSourceComponent()</title>
		<description>Set the value of controls in the calling Grid or Dialog component to the value of the mapped controls in the current Dialog. Used exclusively in the special case where the Dialog was opened using the Open Dialog as an alternate editing view for current record action in Action Javascript.
</description>
	</case>
	<case>
		<title>_prepareRepeatingSection(containerName)</title>
		<description>Generally, this should not be necessary as the Dialog will automatically prepare the Repeating Section. However if the Repeating Section is initially hidden and is then only shown using a Javascript command, the titles on the columns will not be property aligned. This command will fix the column titles.
</description>
	</case>
	<case>
		<title>_refreshListData(listId)</title>
		<description>Refreshes the data in a List control. For example, if the list is based on a SQL query, a callback is made to re-execute the query. Contrast this method with the .refresh() method which simply redraws the List using the existing List data.</description>
	</case>
	<case>
		<title>_repeatingSectionLogicalToPhysicalRow(sectionName,logicalRow)</title>
		<description>Returns the physical row number for given logical row number in a specified Repeating Section. If no rows in the Repeating Section have been deleted, the logical and physical row number for a given row are the same. The Ids of the element in a row of a Repeating Section are based on the rows physical row number. e.g. {dialog.componentname}.V.R1.QUANTITY_A5INSTANCE  - the   is a reference to the physical row number.
</description>
	</case>
	<case>
		<title>_setRepeatingSectionRowCount(sectionName,rows,flagSetFocusToFirstRow,flagSetRowDataToNull)</title>
		<description>Sets the number of rows in a repeating section.
</description>
	</case>
	<case>
		<title>_tabInfo(tabId)</title>
		<description>Returns a Javascript object with information about the tab control. Object has these properties paneCount - number of panes in the tab control, currentPane - current pane number, nextPane - the next pane number, previousPane - the previous pane number, status - (false,on or off) - indicates if the tab in set to auto-advance on a timer and if auto-advance is turned on, interval - if tab advances on a time, indicates the timer interval in seconds.
</description>
	</case>
	<case>
		<title>accordionControl(id,action)</title>
		<description>Either opens or closes all panes in an accordion object. action is either open or close. id is the Id of the accordion (i.e. Tab) object.
</description>
	</case>
	<case>
		<title>activateControlContainer()</title>
		<description>If a control is inside a Tab or Accordion container, activates the pane in which the control in contained. Only applies to input controls.
</description>
	</case>
	<case>
		<title>addRepeatingSectionRow(sectionName)</title>
		<description>Adds a new row to the specified Repeating Section.
</description>
	</case>
	<case>
		<title>ajaxCallback(,,xbasicFunction,'',additionalData)</title>
		<description>Does an Ajax callback to a server. Data from the Dialog is submitted to the server. It is recommended that you use Action Javascript to write the code for you.
</description>
	</case>
	<case>
		<title>buttonclick(buttonId)</title>
		<description>Executes the click event for a button.
</description>
	</case>
	<case>
		<title>closeContainerWindow(ele)</title>
		<description>If the Dialog is opened inside a pop-up Javascript window, closes the window in which the Dialog is contained. Need to pass in a pointer to any element on the Dialog.
</description>
	</case>
	<case>
		<title>closeCurrentTabbedUIPane()</title>
		<description>If the Dialog was opened in a Tabbed UI Pane, closes the current pane in the Tabbed UI.
</description>
	</case>
	<case>
		<title>copyRepeatingSectionRow(repeatingSectionID, sourceRow, targetRow [, flagPromptIfTargetRowDirty])</title>
		<description>Copies the values from one row in a Repeating Section to another. If targetRow = -1, then the current row with focus is the targetRow. If the target row is dirty, a confirmation prompt is displayed, unless flagPromptIfTargetRowDirty is false.;
</description>
	</case>
	<case>
		<title>deleteRecord()</title>
		<description>Applies only to a component that has been bound to one or more tables. Deletes the current record in the primary table. (If the component is bound to a single table, the primary table is the table to which the component is bound. However, if the component is bound to multiple (linked) tables, the primary table is the top-most parent table of the linked tables.)
</description>
	</case>
	<case>
		<title>deleteRepeatingSectionRow(sectionName)</title>
		<description>Removes the current row from the specified Repeating Section.
</description>
	</case>
	<case>
		<title>duplicateRepeatingSectionRow(repeatingSectionID)</title>
		<description>Copies the values in the current Repeating Section row to a new row. The first non-dirty Repeating Section row is used as the target row. If there are no non-dirty Repeating Section rows, a new row is added to the Repeating Section.
</description>
	</case>
	<case>
		<title>exportChart(settingsObject)</title>
		<description>Exports one or more charts to a PDF or RTF file and then downloads the file to the client computer.
</description>
	</case>
	<case>
		<title>getControl(variableName)</title>
		<description>Get a pointer to a control, such as a slider, date picker, map, etc. so that you can call methods of the object, or set properties of the object.
</description>
	</case>
	<case>
		<title>getData()</title>
		<description>Gets the value of all of the controls in the Dialog in the form of a query string (name/value pairs).
</description>
	</case>
	<case>
		<title>getInstanceNumber(controlName)</title>
		<description>If a control is in a Repeating Section, returns the row number (i.e. instance number) of the active row in the Repeating Section. Otherwise returns a blank value.
</description>
	</case>
	<case>
		<title>getKey(alias [, row])</title>
		<description>If the Dialog has been bound to tables, gets the primary key value for the specified table alias. If row is not specified, the alias is a top level alias. Otherwise, row indicates the row in a Repeating Section.
</description>
	</case>
	<case>
		<title>getParentObject()</title>
		<description>If this component was opened from a parent Grid or Dialog component, returns a pointer to the parent object so you can execute methods on the parent object.
</description>
	</case>
	<case>
		<title>getRepeatingSectionActiveRow(sectionName [,flagLogicalRowNumber])</title>
		<description>Gets the active row in the specified Repeating Section. By default, the physical row number is returned. Deleted rows (which are hidden) are counted. To get the logical row number (which ignores deleted rows), specify true for the optional second argument.
</description>
	</case>
	<case>
		<title>getSessionVariable(variableName)</title>
		<description>Get the value of a session variable. The session variable must be explicitly published - see Published session variables property in the Dialog builder.
</description>
	</case>
	<case>
		<title>getStateInfo()</title>
		<description><![CDATA[Gets the data from the Dialog Components state object in the form of a text string of name value pairs, delimited with &characters.]]></description>
	</case>
	<case>
		<title>getValue(name)</title>
		<description>Get the value of a control in the Dialog. If you are reading the value in a control that is in a Repeating Section, use name:rownumber for the field name.
</description>
	</case>
	<case>
		<title>harvestRepeatingSectionColumn(controlName [,delimiter])</title>
		<description>Retrieves the data from a column in a Repeating Section and return a delimited string of values. The default for delimiter is comma.
</description>
	</case>
	<case>
		<title>hideRepeatingSectionColumn(columnName [,mode])</title>
		<description>Hide/show a column in a Repeating Section. You can also set the visibility of a column to hidden or shown, rather than hide/showing it. By default, mode is hide. Options for mode are hide,show,visibility_hide,visibility_show.
</description>
	</case>
	<case>
		<title>loadCSSFile(CSSFilename [, flagForceLoad])</title>
		<description>Loads CSS from a file. If the flagForeLoad argument is true then the CSS file is loaded even if it has been previously loaded. The default value for flagForceLoad is false.
</description>
	</case>
	<case>
		<title>loadDataFromRepository(key [,flagDelete])</title>
		<description>Loads data that was previously saved to the Repository. The component is populated with the data that was saved to the Repository. The afterLoadFromRepository client-side event fires after the event has completed.
</description>
	</case>
	<case>
		<title>moveDownRepeatingSectionRow(id)</title>
		<description>Moves the data in the current Repeating Section row down one row.
</description>
	</case>
	<case>
		<title>moveUpRepeatingSectionRow(id)</title>
		<description>Moves the data in the current Repeating Section row up one row.
</description>
	</case>
	<case>
		<title>newRecord()</title>
		<description>Typically used if the component has been bound to one or more tables. Changes the current mode from editing an existing record to entering a new record.
</description>
	</case>
	<case>
		<title>panelGetActive()</title>
		<description>Gets the name of the active Panel.
</description>
	</case>
	<case>
		<title>panelGetId(panelName,panelPart)</title>
		<description>Gets the ID of the specified part of a Panel. The part can be header, body, or footer. Getting the ID of a Panel part is useful if you want to set properties (such as the Inner HTML) of the Panel.
</description>
	</case>
	<case>
		<title>panelNavigate(panelNavigatorName,direction)</title>
		<description>Navigates to the next or previous Panel in a Panel Navigator
</description>
	</case>
	<case>
		<title>panelSetActive(panelName)</title>
		<description>Sets focus to a particular Panel.
</description>
	</case>
	<case>
		<title>populateControlsFromTable(primaryKey [,flagShowDebuggingInfo [, onCallbackCompleteCode [,debugInfoLocation]]])</title>
		<description>Populates the controls in a Dialog with data from a table. If the primary key has multiple columns, use ||| (three pipes) to delimit the key values.
</description>
	</case>
	<case>
		<title>populateDropdownBoxRepeatingSection(controlName,data,clearExistingData)</title>
		<description>Same as the .populateDropdownBox() method, but operates on a control that is in a Repeating Section. The choices in the DropdownBoxes in every row in the Repeating Section are updated.
</description>
	</case>
	<case>
		<title>populateDropdownBox(controlName,data,clearExistingData)</title>
		<description>Populates the choices in a Dropdownbox control.
</description>
	</case>
	<case>
		<title>refreshCaptcha(name)</title>
		<description>Refreshes the CAPTHA image for the specied control.
</description>
	</case>
	<case>
		<title>refreshClientSideComputations()</title>
		<description>Force all client-side computations (calculated fields, show/hide expression, enable expression, etc). to be recomputed. Client-side calculations are also known as watch events. In effect, this method forces all watch events to fire. Generally, this should not be necessary as the Dialog will automatically be recalculated when necessary. However, there may be situations where a watch event would not normally fire, but you want to force it to fire.
</description>
	</case>
	<case>
		<title>refreshDataSeries(seriesNames)</title>
		<description>Refreshes one or more data series. seriesName can be the name of a single data series, or an array of data series names.
</description>
	</case>
	<case>
		<title>refreshDropdownBoxChoices(controlName [,dynamicFilter [,dynamicFilterArguments [,selectedValue [,currentRowOnly]]]])</title>
		<description>Does an Ajax callback to recompute the choices in a DropdownBox and repopulates the choices in the DropbownBox for the specified controlName. Applies only if the choices in the Dropdownbox are based on a SQL or .dbf query.
</description>
	</case>
	<case>
		<title>refreshPrimaryKeyList()</title>
		<description>Refreshes the list of primary keys that the Dialog has retreived from the server.
</description>
	</case>
	<case>
		<title>resetForm()</title>
		<description>Resets all controls in the Dialog to their original value. Displays a confirmation prompt before resetting the Dialog. Pass in an optional parameter of false to suppress the prompt.
</description>
	</case>
	<case>
		<title>runAction(actionName)</title>
		<description>Runs an action that was defined using the Action Script builder.
</description>
	</case>
	<case>
		<title>saveDataInRepository(key)</title>
		<description>Saves the data that the user has entered into the component into the Repository using the specified key value. (The Repository settings are configured in Web Project Properties). The afterSaveToRepository client-side event fires after the event has completed.
</description>
	</case>
	<case>
		<title>selectTabPane(tabId,paneNumberOrId)</title>
		<description>Activates the specified pane number on a tab object. In certain cases tab panes can be assigned explicit ids. If the tab pane has an id, you can also specify the pane id.
</description>
	</case>
	<case>
		<title>setFocus(controlName [, repeatingSectionRowNumber])</title>
		<description>Sets focus to a specified control on the dialog. If the control is inside a tab or accordion, gives focus to the appropriate tab/accordion pane. If the control is in a Repeating Section, you must also specify the logical row number.
</description>
	</case>
	<case>
		<title>setKey(alias, value [, row])</title>
		<description>If the Dialog has been bound to tables, sets the primary key value for the specified table alias. If row is not specified, the alias is a top level alias. Otherwise, row indicates the row in a Repeating Section.
</description>
	</case>
	<case>
		<title>setRepeatingSectionActiveRow(sectionName,instNumber)</title>
		<description>Sets the active row in the specified Repeating Section.
</description>
	</case>
	<case>
		<title>setStateInfo(obj)</title>
		<description>Allows you to store arbitrary data in the Dialog Components state object. The data in the state object is submitted along with the data in the Dialog controls every time you submit the Dialog, or make an Ajax callback.
</description>
	</case>
	<case>
		<title>setValueFrom(target,source)</title>
		<description>Combines the .getValue() and .setValue() methods into a single method. Sets the value in a control with the value from another control. If the field you want to set is in a Repeating Section, use name:rownumber for the field name, otherwise the row with focus will be updated.
</description>
	</case>
	<case>
		<title>setValue(name,value [,honorChangeEvent] )</title>
		<description>Set the value of a control in the Dialog. If the field you want to set is in a Repeating Section, use name:rownumber for the field name, otherwise the row with focus will be updated.
</description>
	</case>
	<case>
		<title>sortPrimaryKeyList()</title>
		<description>In a data bound dialog for which a List View navigator has been defined, allows you to sort the entries in the List View after the user has edited a field that is displayed in the primary column of the List View.
</description>
	</case>
	<case>
		<title>sortRepeatingSection(id,column,direction)</title>
		<description>Sorts the data in a Repeating Section. id - Id of the Repeating Section. column - name of column in Repeating Section to sort. direction - sort direction - can be A, or D.
</description>
	</case>
	<case>
		<title>submit([submitType [,additionalData]])</title>
		<description>Submits the Dialog to the server.
</description>
	</case>
	<case>
		<title>swapRepeatingSectionRows(id,row1,row2)</title>
		<description>Swaps the data in two rows in a Repeating Section. Id is the id of the Repeating Section.
</description>
	</case>
	<case>
		<title>tabTimerGoto(tabId,target)</title>
		<description>Advances to the target tab pane. target can be first, previous, next or last. Target can also be an explicit tab pane number.
</description>
	</case>
	<case>
		<title>tabTimerStart(tabId)</title>
		<description>Starts the tab to automatically advance on the timer interval.
</description>
	</case>
	<case>
		<title>tabTimerStop(tabId)</title>
		<description>Stops the tab from automatically advancing on the timer interval.
</description>
	</case>
	<case>
		<title>validate()</title>
		<description>Submits the Dialog to the server in order to validate the fields on the Dialog. Differs from the .submit() method in that it does not fire the AfterDialogValidate server-side event if there are no validation errors. Takes   optional arguments:
</description>
	</case>
</cases>	
	
</section>
	
	
</sections>	
	
	
	
</page>