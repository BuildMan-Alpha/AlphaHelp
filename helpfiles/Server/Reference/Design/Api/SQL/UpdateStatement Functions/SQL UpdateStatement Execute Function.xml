<page>
   <topic>SQL::UpdateStatement Execute Function Function</topic>
   <syntax>L Execute([SQLConnection as SQL::Connection | SQLConnectionString as C] [, Arguments as SQL::Arguments | Arguments as C])</syntax>
   <arguments>
     <argument>
         <name>SQLConnection</name>
         <description>SQL::Connection | SQLConnectionString</description>
     </argument>
     <argument>
         <name> Arguments</name>
         <description>SQL::Arguments | Arguments</description>
     </argument>
   </arguments>
   <description>Execute the current statement using the current or passed connection.
Optionally providing argument values as an object or as XML.
Note: Argument values are merged with those already set on the query.</description>
   <discussion>
      ...put discussion here....
   </discussion>
   <example><![CDATA[
...put example code here....
]]></example>
   <sections>
       <section>
            <description>put description here</description>
            <example><![CDATA[
      ...put example here....
]]></example>
       </section>
   </sections>
   <see>
      <ref>SQL::UpdateStatement Object</ref>
      <ref>Limitations</ref>
   </see>
   <original> SQL::UpdateStatement::Execute()
Syntax
 Result_Flag as L = .Execute(  as SQL::Connection | ConnectString as C )
 Argument Description
 Result_Flag TRUE (.T.) if the operation was successful; otherwise FALSE (.F.).
 A SQL::UpdateStatement object.
 Optional. A SQL::Connection object created with a DIM statement and with a defined .ConnectionString property.
 ConnectString Optional. A connection string.

 Description
The .Execute() method retrieves data and populates a SQL::ResultSet object. It connects to the back-end database using the information in the SQL::Connection::ConnectionString property or in the ConnectString string, then executes the SQL statement in the SQL::UpdateStatement.SQLStatement property.
Example
 dim conn as SQL::Connection
dim connString as C
dim upd as SQL::UpdateStatement
dim sql_update as C
connString = "{A5API='Access', FileName='c:\program files\a5v7\mdbfiles\alphasports.mdb'}"
sql_update = "update customer set bill_city = 'Phoenix', bill_postal_code = '08000', bill_state_region = 'AZ' where customer_id = 1"
if .not. conn.open(connString) then
    end
end if
if .not. upd.parse(sql_update) then
    ui_msg_box("Error", upd.callresult.text)
    end
end if
if .not. upd.execute(conn) then
    end
end if

 See Also
 SQL::UpdateStatement Object
Limitations</original>
</page>