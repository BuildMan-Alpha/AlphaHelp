<page>
   <topic>SQL::ResultSet FetchPage Function Function</topic>
   <syntax>L FetchPage(Table as P, StartRow as N [, Rows as N [, RemapOffset as N [, NotificationInterval as N [, EventScript as C]]]])</syntax>
   <arguments>
     <argument>
         <name>Table</name>
         <description>Pointer</description>
     </argument>
     <argument>
         <name> StartRow</name>
         <description>Numeric</description>
     </argument>
     <argument>
         <name> Rows</name>
         <description>Numeric</description>
     </argument>
     <argument>
         <name> RemapOffset</name>
         <description>Numeric</description>
     </argument>
     <argument>
         <name> NotificationInterval</name>
         <description>Numeric</description>
     </argument>
     <argument>
         <name> EventScript</name>
         <description>Character</description>
     </argument>
   </arguments>
   <description>Fetch a block of one or more rows into a local cache table.

Note: This function is an advanced user feature and requires some understanding of cacheing for SQL.</description>
   <discussion>
      ...put discussion here....
   </discussion>
   <example><![CDATA[
...put example code here....
]]></example>
   <sections>
       <section>
            <description>put description here</description>
            <example><![CDATA[
      ...put example here....
]]></example>
       </section>
   </sections>
   <see>
      <ref>SQL::ResultSet Object</ref>
      <ref>Limitations</ref>
   </see>
   <original> SQL::ResultSet::FetchPage()
Syntax
Result_Flag as L = .FetchPage(  Table as P, StartRow as N  [, Rows as N [, RemapOffset as N ]] )
ArgumentDescription
Result_FlagTRUE (.T.) if the operation was successful; otherwise  FALSE (.F.).
A SQL::ResultSet object created with a DIM statement.
Table A pointer to an open table.
StartRowThe first row to return.
RowsOptional. Default = -1 (all). The number of rows to  return.
RemapOffsetOptional.

Description
The FetchPage() method returns a block of one or more rows in a SQL::ResultSet into a local cache table.
Note. This function  is an advanced user feature and requires some understanding of caching  for SQL.
Example
dim conn as SQL::Connection
dim rs as SQL::ResultSet
dim cr as SQL::Row
dim dti as SQL::DataTypeInfo
dim connString as C
dim select_exp as C
dim tbl as P
connString = "{A5API='Access', FileName='c:\program  files\a5v8\mdbfiles\alphasports.mdb'}"
select_exp = "select Lastname from customer where bill_state_region  = 'ma'"
tbl = table.open("customer")
if .not. conn.open(connString)
    ui_msg_box("Error",  conn.CallResult.text)
    end
end if
if .not. conn.execute(select_exp)
    ui_msg_box("Error",  conn.CallResult.text)
    end
end if
rs = conn.ResultSet
if .not. rs.fetchpage(tbl,1) then
    ui_msg_box("Error",  rs.callresult.text)
    end
end if
conn.close()
tbl.close()

See Also
SQL::ResultSet Object
Limitations</original>
</page>