<page>
   <topic>SQL::ResultSet ToTableInfo Function Function</topic>
   <syntax>SQL::TableInfo ToTableInfo()</syntax>
   <description>Return the column definitions as a single SQL::TableInfo.</description>
   <discussion>
      ...put discussion here....
   </discussion>
   <example><![CDATA[
...put example code here....
]]></example>
   <sections>
       <section>
            <description>put description here</description>
            <example><![CDATA[
      ...put example here....
]]></example>
       </section>
   </sections>
   <see>
      <ref>SQL::ResultSet Object</ref>
      <ref>Limitations</ref>
   </see>
   <original><![CDATA[ SQL::ResultSet::ToTableInfo()
Syntax
&ltData> as SQL::TableInfo  = &ltSQL::ResultSet>.ToTableInfo()
ArgumentDescription
&ltData>A SQL::TableInfo object with information about a result set.
&ltSQL::ResultSet>A SQL::ResultSet object created with a DIM statement.

Description
The ToTableInfo() method copies the column definitions of the SQL::ResultSet into an unnamed SQL::TableInfo and returns it.  This is used to manipulate properties of columns which are then used to  create a local table using the DBFRowSyntax property.
Example
dim conn as SQL::Connection
dim rs as SQL::ResultSet
dim connString as C
dim select_exp as C
dim ti as SQL::TableInfo
connString = "{A5API='Access', FileName='c:\program  files\a5v8\mdbfiles\alphasports.mdb'}"
select_exp = "select * from customer where bill_state_region  = 'ny'"
if .not. conn.open(connString)
    ui_msg_box("Error",  conn.CallResult.text)
    end
end if
if .not. conn.execute(select_exp)
    ui_msg_box("Error",  conn.CallResult.text)
    conn.close()
    end
end if
rs = conn.ResultSet
ti = rs.ToTableInfo()
ui_msg_box("Results", ti.xml)
conn.close()

The script above produces an XML file similar to the following.
&ltSQLTableInfo>
    &ltOwner>&lt/Owner>
    &ltName>&lt/Name>
    &ltComment>&lt/Comment>
    &ltNativeAPI>&lt/NativeAPI>
    &ltNativeSyntax>&lt/NativeSyntax>
    &ltLastKnownRowCount>-1&lt/LastKnownRowCount>
    &ltUpdateable>1&lt/Updateable>
    &ltCanUpdateInTransaction>1&lt/CanUpdateInTransaction>
    &ltSelectRowLimit>-1&lt/SelectRowLimit>
    &ltSizeToFit>0&lt/SizeToFit>
    &ltTableType>Invalid&lt/TableType>
    &ltAlias>&lt/Alias>
    &ltSQLDataTypeInfo>
        &ltName>Firstname&lt/Name>
        &ltComment>&lt/Comment>
        &ltNativeAPI>&lt/NativeAPI>
        &ltNativeSyntax>&lt/NativeSyntax>
        &ltAlphaType>67&lt/AlphaType>
        &ltNativeType>0&lt/NativeType>
        &ltNativeTypeName>&lt/NativeTypeName>
...

See Also
SQL::ResultSet Object
Limitations]]></original>
</page>