<page>
   <topic>SQL::ResultSet ToDBF Function Function</topic>
   <syntax>L ToDBF(FileName as C [, EventScript =  as C [, Rows = -1 as N [, StartRow = -1 as N [, Append = .t. as L [, DictionaryName =  as C [, MapByPosition = .f. as L [, TableInfo as SQL::TableInfo]]]]]]])</syntax>
   <arguments>
     <argument>
         <name>FileName</name>
         <description>Character</description>
     </argument>
     <argument>
         <name> EventScript = </name>
         <description>Character</description>
     </argument>
     <argument>
         <name> Rows = -1</name>
         <description>Numeric</description>
     </argument>
     <argument>
         <name> StartRow = -1</name>
         <description>Numeric</description>
     </argument>
     <argument>
         <name> Append = .t.</name>
         <description>Logical</description>
     </argument>
     <argument>
         <name> DictionaryName = </name>
         <description>Character</description>
     </argument>
     <argument>
         <name> MapByPosition = .f.</name>
         <description>Logical</description>
     </argument>
     <argument>
         <name> TableInfo</name>
         <description>SQL::TableInfo</description>
     </argument>
   </arguments>
   <description>Create a local copy of the result set in a .DBF table</description>
   <discussion>
      ...put discussion here....
   </discussion>
   <example><![CDATA[
...put example code here....
]]></example>
   <sections>
       <section>
            <description>put description here</description>
            <example><![CDATA[
      ...put example here....
]]></example>
       </section>
   </sections>
   <see>
      <ref>SQL::ResultSet Object</ref>
   </see>
   <original><![CDATA[ SQL::ResultSet::ToDBF()
Syntax
Formatted_Data as C = &ltSQL::ResultSet>.ToDBF(  FileName as C [, EventScript as C  [, RowsToCopy as N [, StartRow as N [, OverWrite as L  [, DictionaryName as C [, &ltTableInfo> as SQL::TableInfo ]]]]]]  )
ArgumentDescription
Formatted_Data 
&ltSQL::ResultSet>A SQL::ResultSet object.
FileNameThe path and filename of the Alpha Anywhere table.
EventScriptOptional. Default = "". An Xbasic Script implementing  any of the following functions:

UpdateBegin()

UpdateProgress()

UpdateEnd() 
In each case, the Context argument is the connection itself.
RowsToCopyOptional. Default = -1 (all). The number of rows to  copy.
StartRowOptional. Default = -1 (current). The first row to copy.
OverWriteOptional. Whether to overwrite the existing data.
DictionaryNameOptional. An advanced option for internal use at Alpha.
&ltTableInfo>Optional. A SQL::TableInfo object.

Description
The SQL::ResultSet.ToDBF() method fetches rows to a new or overwritten  local table .
Limitations
Example
dim conn as SQL::Connection
dim sql as C
dim vCity as C
dim args as SQL::Arguments
dim cs as C
dim rs as SQL::ResultSet
cs = "{A5API=Access,FileName='C:\Program Files\a5v8\MDBFiles\Alphasports.mdb',  UserName='Admin'}"
vCity = ui_get_text("City", "Show Companies  in what city?")
sql = "select lastname, firstname from customer where  bill_city = :city Order By Company"
if .not. conn.open(cs)
    ui_msg_box("Error",  conn.CallResult.text)
    end
end if
if .not. args.Set("city", vCity)
    conn.close()
    end
end if
if .not. conn.execute(sql, args)
    ui_msg_box("Error",  conn.CallResult.text)
    conn.close()
    end
end if
rs = conn.ResultSet
if .not. rs.ToDBF("c:\program files\a5v8\samples\alphasports\newtable.dbf",  "", 3, 1 )
    ui_msg_box("Error",  rs.CallResult.text)
end if
conn.close()

See Also
SQL::ResultSet Object]]></original>
</page>