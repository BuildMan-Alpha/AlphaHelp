<page>
   <topic>SQL::InsertStatement Validate Function Function</topic>
   <syntax>L Validate([SQLConnection as SQL::Connection | SQLConnectionString as C] [UpdateStatistics as L])</syntax>
   <arguments>
     <argument>
         <name>SQLConnection</name>
         <description>SQL::Connection | SQLConnectionString</description>
     </argument>
   </arguments>
   <description>Execute the current statement using the current or passed connection.</description>
   <discussion>
      ...put discussion here....
   </discussion>
   <example><![CDATA[
...put example code here....
]]></example>
   <sections>
       <section>
            <description>put description here</description>
            <example><![CDATA[
      ...put example here....
]]></example>
       </section>
   </sections>
   <see>
      <ref>SQL::InsertStatement Object</ref>
      <ref>About Validation</ref>
      <ref>Limitations</ref>
   </see>
   <original> SQL::InsertStatement::Validate()
Syntax
 Result_Flag as L = .Validate(  as SQL::Connection | ConnectString as C )
 Argument Description
 Result_Flag TRUE (.T.) if the operation was successful; otherwise FALSE (.F.).
 A SQL::InsertStatement object.
 Optional. A SQL::Connection object with a defined .ConnectionString property.
 ConnectString Optional. A connection string.

 Description
The .Validate() method prepares the query and validates it, but does not execute it. (In some implementations the query is executed with a limit on rows set to 1). The intent is to force the query through a server side parse and report problems.
The method connects to the back-end database using the information in the SQL::Connection::ConnectionString property or in the ConnectString string, then executes the current SQL statement stored in the SQL::InsertStatement.SQLStatement property.
 Note: Not every database is thorough about validation.
Examples
 

 See Also
 SQL::InsertStatement Object, About Validation
Limitations</original>
</page>