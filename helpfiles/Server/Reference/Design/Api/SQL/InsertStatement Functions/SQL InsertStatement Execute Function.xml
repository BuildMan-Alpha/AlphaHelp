<page>
   <topic>SQL::InsertStatement Execute Function Function</topic>
   <syntax>L Execute([SQLConnection as SQL::Connection | SQLConnectionString as C] [, Arguments as SQL::Arguments | Arguments as C])</syntax>
   <arguments>
     <argument>
         <name>SQLConnection</name>
         <description>SQL::Connection | SQLConnectionString</description>
     </argument>
     <argument>
         <name> Arguments</name>
         <description>SQL::Arguments | Arguments</description>
     </argument>
   </arguments>
   <description>Execute the current statement using the current or passed connection.
Optionally providing argument values as an object or as XML.
Note: Argument values are merged with those already set on the query.</description>
   <discussion>
      ...put discussion here....
   </discussion>
   <example><![CDATA[
...put example code here....
]]></example>
   <sections>
       <section>
            <description>put description here</description>
            <example><![CDATA[
      ...put example here....
]]></example>
       </section>
   </sections>
   <see>
      <ref>SQL::InsertStatement Object</ref>
      <ref>Limitations</ref>
   </see>
   <original><![CDATA[ SQL::InsertStatement::Execute()
Syntax
 Result_Flag as L = &ltSQL::InsertStatement>.Execute( &ltSQLConnection> as SQL::Connection  | ConnectString as C )
 Argument Description
 Result_Flag TRUE (.T.) if the operation was successful; otherwise FALSE (.F.).
 &ltSQL::InsertStatement> A SQL::InsertStatement object.
 &ltSQLConnection> Optional. A SQL::Connection object with a defined .ConnectionString property.
 ConnectString Optional. A connection string.

 Description
The .Execute() method insert data and populates a SQL::ResultSet object. It connects to the back-end database using the information in the SQL::Connection::ConnectionString property or in the ConnectString string, then executes the SQL statement in the SQL::InsertStatement.SQLStatement property.
Example
 dim conn as SQL::Connection
dim connString as C
dim ins as SQL::InsertStatement
dim sql_insert as C
connString = "{A5API='Access', FileName='c:\program files\a5v7\mdbfiles\alphasports.mdb'}"
sql_insert = "insert into customer (firstname, lastname, bill_city, bill_postal_code,bill_state_region) values ('George', 'Jones', 'Arlington', '02000', 'VA')"
? conn.open(connString)
= .T.
? ins.parse(sql_insert)
= .T.
? ins.execute(conn)
= .T.

 See Also
 SQL::InsertStatement Object
Limitations]]></original>
</page>