<page>
   <topic>SQL::InsertStatement Parse Function Function</topic>
   <syntax>L Parse([SQLStatement as C])</syntax>
   <arguments>
     <argument>
         <name>SQLStatement</name>
         <description>Character</description>
     </argument>
   </arguments>
   <description>Parse the SQLStatement passed (or the value previously set into the SQLStatement property).</description>
   <discussion>
      ...put discussion here....
   </discussion>
   <example><![CDATA[
...put example code here....
]]></example>
   <sections>
       <section>
            <description>put description here</description>
            <example><![CDATA[
      ...put example here....
]]></example>
       </section>
   </sections>
   <see>
      <ref>SQL::InsertStatement Object</ref>
      <ref>Limitations</ref>
   </see>
   <original> SQL::InsertStatement::Parse()
Syntax
 Result_Flag as L = .Parse( [ SQL_Statement as C ] )
 Argument Description
 Result_Flag TRUE (.T.) if the operation was successful; otherwise FALSE (.F.).
 A SQL::InsertStatement object.
 SQL_Statement Optional. A Portable SQL statement.

 Description
The .Parse() method parses the SQL_Statement string (or the value previously set into the SQL::InsertStatement.SQLStatement property).
Example
 dim conn as SQL::Connection
dim connString as C
dim ins as SQL::InsertStatement
dim sql_insert as C
connString = "{A5API='Access', FileName='c:\program files\a5v7\mdbfiles\alphasports.mdb'}"
sql_insert = "insert into customer (firstname, lastname, bill_city, bill_postal_code,bill_state_region) values ('George', 'Jones', 'Arlington', '02000', 'VA')"
? conn.open(connString)
= .T.
? ins.parse(sql_insert)
= .T.
? ins.execute(conn)
= .T.

 See Also
 SQL::InsertStatement Object
Limitations</original>
</page>