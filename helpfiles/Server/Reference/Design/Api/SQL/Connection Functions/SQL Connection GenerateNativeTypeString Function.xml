<page>
   <topic>SQL::Connection GenerateNativeTypeString Function Function</topic>
   <syntax>GenerateNativeTypeString as C (TypeInfo as SQL::DataTypeInfo [,TableInfo as SQL::TableInfo])</syntax>
   <arguments>
     <argument>
         <name>TypeInfo</name>
         <description>SQL::DataTypeInfo</description>
     </argument>
     <argument>
         <name>TableInfo</name>
         <description>SQL::TableInfo</description>
     </argument>
   </arguments>
   <description>Generate a SQL type string for type passed in using the current syntax.
TableInfo is optional, but provides additional information that is useful.</description>
   <discussion>
      ...put discussion here....
   </discussion>
   <example><![CDATA[
...put example code here....
]]></example>
   <sections>
       <section>
            <description>put description here</description>
            <example><![CDATA[
      ...put example here....
]]></example>
       </section>
   </sections>
   <see>
      <ref>SQL::Connection Object</ref>
   </see>
   <original> SQL::Connection::GenerateNativeTypeString()
Syntax
Type_String as C = .GenerateNativeTypeString(   as  SQL::DataTypeInfo  )
ArgumentDescription
Type_StringThe data type used for the field on the back-end database.
A SQL::Connection object.
A SQL::DataTypeInfo object.

Description
The GenerateNativeTypeString method generates a SQL type string  for type passed in using the current syntax.
Limitations
Example
dim conn as SQL::Connection
dim rs as SQL::ResultSet
dim cr as SQL::Row
dim dti as SQL::DataTypeInfo
dim connString as C
dim select_exp as C
connString = "{A5API='Access', FileName='c:\program  files\a5v8\mdbfiles\alphasports.mdb'}"
select_exp = "select Lastname from customer where bill_state_region  = 'ma'"
if .not. conn.open(connString)
    ui_msg_box("Error", conn.CallResult.text)
    end
end if
if .not. conn.execute(select_exp)
    ui_msg_box("Error", conn.CallResult.text)
    end
end if
rs = conn.ResultSet
rs.NextRow()
cr = rs.CurrentRow
dti = cr.ColumnInfo1
ui_msg_box("Native Type String", conn.GenerateNativeTypeString(dti))
conn.close()

See Also
SQL::Connection Object</original>
</page>