<page>
   <topic>SQL::Connection ToDBF Function Function</topic>
   <syntax>L ToDBF(SQLStatement as C, [Arguments as SQL::Arguments, ] FileName as C [, Append = .t. as L [, EventScript =  as C [, MapByPosition = .f. as L [, LocalTableDefinition as SQL::TableInfo]]]])</syntax>
   <arguments>
     <argument>
         <name>SQLStatement</name>
         <description>Character</description>
     </argument>
     <argument>
         <name> Arguments</name>
         <description>SQL::Arguments</description>
     </argument>
     <argument>
         <name>  FileName</name>
         <description>Character</description>
     </argument>
     <argument>
         <name> Append = .t.</name>
         <description>Logical</description>
     </argument>
     <argument>
         <name> EventScript = </name>
         <description>Character</description>
     </argument>
     <argument>
         <name> MapByPosition = .f.</name>
         <description>Logical</description>
     </argument>
     <argument>
         <name> LocalTableDefinition</name>
         <description>SQL::TableInfo</description>
     </argument>
   </arguments>
   <description>Fetch data to a local .DBF table using a SQL query</description>
   <discussion>
      ...put discussion here....
   </discussion>
   <example><![CDATA[
...put example code here....
]]></example>
   <sections>
       <section>
            <description>put description here</description>
            <example><![CDATA[
      ...put example here....
]]></example>
       </section>
   </sections>
   <see>
      <ref>SQL::Connection Object</ref>
   </see>
   <original> SQL::Connection::ToDBF()
Syntax
Result_Flag as L = .ToDBF(  Query as C [,  as SQL::Arguments  ], Filename as C [, Append as L  [, EventScript as C [, MapByPosition as L [,  as SQL::TableInfo  ]]]] )
ArgumentDescription
Result_FlagTRUE (.T.) if the operation was successful; otherwise  FALSE (.F.).
A SQL::Connection object.
QueryA SQL SELECT statement.
Optional. A SQL::Arguments object.  One or more arguments to be resolved when the SELECT statement is executed.
FilenameThe path and name of the Alpha Anywhere .DBF table to be  created.
AppendOptional.

.T. = If the file  exists, AlphaDAO will add or replace records.

.F. = AlphaDAO  will overwrite an existing file. 
EventScriptOptional. Default = "". EventScript is an  Xbasic Script implementing any of the following functions:

UpdateBegin()

UpdateProgress()

UpdateEnd() 
In each case, the Context argument is the connection itself.
MapByPositionOptional. Default = .F. If the query has named columns  differently than in an existing table, you will want to map by position.

.T. = Columns will  be mapped by position.

.F. = Columns will  be mapped by name. 
Optional. A SQL::TableInfo object.  The definition for the new table will be taken from the result set unless  an (optional) SQL::TableInfo object is passed in. In this case, overrides  will be honored. The columns in TableInfo must match the columns in the result set by type, but need not match by  length, precision, or name (if MapByPosition is true).

Description
The ToDBF() method fetches rows to a new or existing .DBF table using  a SQL query. The function supports options for specifying a unique key  to update local table against. If ReturnRow is passed, the rows are returned into this variable.
Limitations
Example
dim conn as SQL::Connection
dim sql as C
dim vCity as C
dim args as SQL::Arguments
dim cs as C
dim rs as SQL::ResultSet
cs = "{A5API=Access,FileName='C:\Program Files\a5v8\MDBFiles\Alphasports.mdb',  UserName='Admin'}"
vCity = ui_get_text("City", "Show Companies  in what city?")
sql = "select lastname, firstname from customer where  bill_city = :city Order By Company"
if .not. conn.open(cs)
    ui_msg_box("Error",  conn.CallResult.text)
    end
end if
if .not. args.Set("city", vCity)
    conn.close()
    end
end if
if .not. conn.execute(sql, args)
    ui_msg_box("Error",  conn.CallResult.text)
    conn.close()
    end
end if
rs = conn.ResultSet
if .not. rs.ToDBF("c:\program files\a5v8\samples\alphasports\newtable2.dbf",  "", 3, 1 )
    ui_msg_box("Error",  conn.CallResult.text)
end if
conn.close()

See Also
SQL::Connection Object</original>
</page>