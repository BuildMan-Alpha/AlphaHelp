<page>
   <topic>SQL::Connection GenerateWhereClause Function Function</topic>
   <syntax>GenerateWhereClause as C (TableInfo as SQL::TableInfo, Criteria as SQL::UpdateWhereCriteria [, UseBatchQualifiers = .t. as L [, UseOldNewPrefix = .f. as L ][, SourceTableInfo as SQL::TableInfo]])</syntax>
   <arguments>
     <argument>
         <name>TableInfo</name>
         <description>SQL::TableInfo</description>
     </argument>
     <argument>
         <name> Criteria</name>
         <description>SQL::UpdateWhereCriteria</description>
     </argument>
     <argument>
         <name> UseBatchQualifiers = .t.</name>
         <description>Logical</description>
     </argument>
     <argument>
         <name> UseOldNewPrefix = .f.</name>
         <description>Logical</description>
     </argument>
     <argument>
         <name> SourceTableInfo</name>
         <description>SQL::TableInfo</description>
     </argument>
   </arguments>
   <description>Generate a SQL WHERE clause for a table, based on the update criteria specified.
Note: If UseBatchQualifiers is true then fields will be prefaced with ':old.' 
so a result set can be the source of the data.</description>
   <discussion>
      ...put discussion here....
   </discussion>
   <example><![CDATA[
...put example code here....
]]></example>
   <sections>
       <section>
            <description>put description here</description>
            <example><![CDATA[
      ...put example here....
]]></example>
       </section>
   </sections>
   <see>
      <ref>SQL::Connection Object</ref>
   </see>
   <original> SQL::Connection::GenerateWhereClause()
Syntax
Select_Clause as C = .GenerateWhereClause(   as SQL::TableInfo,   as SQL::UpdateWhereCriteria  [, UseBatchQualifiers as L ] )
ArgumentDescription
Select_ClauseA SQL WHERE clause.
A SQL::Connection object.
A SQL::TableInfo object for the table created with the DIM statement.
A SQL::UpdateWhereCriteria object for the table created with the DIM statement.
UseBatchQualifiersOptional. Default = .T. Changes the syntax of SQL INSERT,  DELETE, and UPDATE statements.

Description
The GenerateWhereClause() method generates a SQL WHERE clause based on  the value of  (see the values  for the type SQL::UpdateWhereCriteria ) that can be attached to an update statement. The WHERE clause will uniquely  identify a row to be updated based on the primary key, the primary key  and all updateable columns or all columns that are valid for a where clause  (for example IMAGE types can not be used in a where clause when using  the SQLServer database).
When UseBatchQualifiers is explicitly set  to .T., the appropriate column values are generated in the format :old. or :new. (All :old. for DELETE or WHERE clauses, All  :new. for INSERT and a mixture for UPDATE  statements).
Limitations
Examples
INSERT INTO tablename (column1, column2) VALUES (:new.value1,  :new.value2)
DELETE FROM tablename WHERE column1 = :old.value1

If UseBatchQualifiers is set to .F., these  function will generate the value entries as simple arguments  (with one exception) so you can build an arguments collection up and execute  the statement.
INSERT INTO tablename (column1, column2) VALUES (:value1,  :value2)

The exception is that UPDATE statements need to differentiate between  new and old values (note the prefix of "new__").
UPDATE tablename SET column1 = :new__value1 WHERE column2  = :value2

See Also
SQL::Connection Object</original>
</page>