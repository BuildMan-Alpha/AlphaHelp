<page>
   <topic>SQL::Connection ApplyData Function Function</topic>
   <syntax>L ApplyData(SQLStatement as C, ResultSet as SQL::ResultSet [, EventScript as C [,SQL::TableInfo TableInfo [, MapTableInfoUsingColumnIndex = .t. as L]])</syntax>
   <arguments>
     <argument>
         <name>SQLStatement</name>
         <description>Character</description>
     </argument>
     <argument>
         <name> ResultSet</name>
         <description>SQL::ResultSet</description>
     </argument>
     <argument>
         <name> EventScript</name>
         <description>Character</description>
     </argument>
     <argument>
         <name>TableInfo</name>
         <description>SQL</description>
     </argument>
     <argument>
         <name> MapTableInfoUsingColumnIndex = .t.</name>
         <description>Logical</description>
     </argument>
   </arguments>
   <description>Apply the query to a table in the currently connected database using the result set provided.</description>
   <discussion>
      ...put discussion here....
   </discussion>
   <example><![CDATA[
...put example code here....
]]></example>
   <sections>
       <section>
            <description>put description here</description>
            <example><![CDATA[
      ...put example here....
]]></example>
       </section>
   </sections>
   <see>
      <ref>SQL::Connection Object</ref>
   </see>
   <original> SQL::Connection::ApplyData()
Syntax
Result_Flag as L = .ApplyData(  Query as C,  as SQL::ResultSet  [, EventScript as C [,  as SQL::TableInfo ]] )
ArgumentDescription
Result_FlagTRUE (.T.) if the operation was successful; otherwise  FALSE (.F.).
A SQL::Connection object.
QueryAn SQL INSERT, DELETE, or UPDATE statement.
A SQL::ResultSet object that contains transactions to apply.
EventScriptOptional. Default = "". An Xbasic Script implementing  any of the following functions:

UpdateBegin()

UpdateProgress()

UpdateEnd() 
In each case, the Context argument is the connection itself.
Optional. A SQL::TableInfo object.

Description
The ApplyData() method applies inserts, updates, and deletes to a table  in the currently connected database. The result set contains the transactions  to apply. See SQL Events for a description of the events that can be scripted.
Limitations
Examples
This script creates a new table and inserts the contents of a SQL::ResultSet  into the table.
dim conn as SQL::Connection
dim ti as SQL::TableInfo
dim rs as SQL::ResultSet
dim connstring as C
dim tbl as P
dim insert as C
connstring = "{A5API=Access,FileName='C:\Program Files\A5V8\MDBFiles\Alphasports.mdb',  UserName='Admin'}"
if .not. conn.Open(connstring) then
    ui_msg_box("Error",  conn.CallResult.text)
    end
end if
if .not. SQL_TableInfoOfDBF("c:\program files\a5v8\samples\alphasports\Customer.dbf",  ti) then
    ui_msg_box("Error",  "Cannot populate SQL::TableInfo")
    end
end if
ti.Name = "AlphaSportsCustomer"
if .not. conn.CreateTable(ti) then
    ui_msg_box("Error",  conn.CallResult.text)
    end
end if
insert = conn.GenerateInsertStatement(ti)
tbl = table.open("c:\program files\a5v8\samples\alphasports\Customer.dbf")
rs = conn.ResultSetFromDBF(tbl)
if .not. conn.ApplyData(insert, rs)
    ui_msg_box("Error",  conn.CallResult.text)
    end
end if
tbl.close()
conn.close()

See Also
SQL::Connection Object</original>
</page>