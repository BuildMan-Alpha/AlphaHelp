<page>
   <topic>SQL::Connection AffectedRows Function Function</topic>
   <syntax>N AffectedRows()</syntax>
   <description>Return affected rows.</description>
   <discussion>
      ...put discussion here....
   </discussion>
   <example><![CDATA[
...put example code here....
]]></example>
   <sections>
       <section>
            <description>put description here</description>
            <example><![CDATA[
      ...put example here....
]]></example>
       </section>
   </sections>
   <see>
      <ref>SQL::Connection Object</ref>
   </see>
   <original> SQL::Connection::AffectedRows()
Syntax
RowCount as N = .AffectedRows()
ArgumentDescription
RowCountThe number of affected rows.
A SQL::Connection object.

Description
The AffectedRows() method returns the number of rows affected by the  last SQL INSERT, DELETE, or UPDATE statement.
IMPORTANT: In Version 10.5 and above, if there are no records that match the WHERE clause in the UPDATE or DELETE statement, the call result is set to .F.. across all database types.  Previously, the call result was set inconsistently (.t. for MySQL and .f. for other database types).
Limitations
Example
dim conn as SQL::Connection
dim del as SQL::DeleteStatement
dim sql_delete as C
sql_delete = "DELETE FROM CustomerX WHERE substring(lastname,1,1)  = 'J'"
if .not. conn.open("{A5API=Access, FileName='C:\Program  Files\A5V8\MDBFiles\Alphasports.mdb', UserName='Admin'}") then
    ui_msg_box("Error",  conn.callresult.text)
    end
end if
conn.PortableSQLEnabled = .t.
dim flag as l 
flag = conn.execute(sql_delete) then
if flag = .f. then 
    if "Database API" $ conn.callResult then 
        'a critical database error
        ui_msg_box("Critical Database Error",conn.callresult.text)
    else
        'No matching record was found
        ui_msg_box("Error","No record satisfied the WHERE clause")
    end if 
else
    ui_msg_box("Affected Rows",  str(conn.AffectedRows()))
end if
conn.close()
 

See Also
SQL::Connection Object</original>
</page>