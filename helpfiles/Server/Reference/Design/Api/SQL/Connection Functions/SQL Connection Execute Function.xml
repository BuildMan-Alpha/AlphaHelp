<page>
   <topic>SQL::Connection Execute Function Function</topic>
   <syntax>L Execute(SQLStatement as C [Arguments as SQL::Arguments] [, EventScript as C ] [, ReferenceTableInfo as SQL::TableInfo] [, GetRowCount as L)</syntax>
   <arguments>
     <argument>
         <name>SQLStatement</name>
         <description>C Arguments</description>
     </argument>
     <argument>
         <name> EventScript</name>
         <description>Character</description>
     </argument>
     <argument>
         <name> ReferenceTableInfo</name>
         <description>SQL::TableInfo</description>
     </argument>
     <argument>
         <name> GetRowCount</name>
         <description>Logical</description>
     </argument>
   </arguments>
   <description>Execute a SQL statement on the connection.
Note: To execute more than one command in a single call, 
      separate each query with a single line containing only '\' at the beginning.</description>
   <discussion>
      ...put discussion here....
   </discussion>
   <example><![CDATA[
...put example code here....
]]></example>
   <sections>
       <section>
            <description>put description here</description>
            <example><![CDATA[
      ...put example here....
]]></example>
       </section>
   </sections>
   <see>
      <ref>SQL::Connection Object</ref>
   </see>
   <original> SQL::Connection::Execute()
Syntax
Result_Flag as L = .Execute(  Query as C [,  as SQL::Arguments  ] )
ArgumentDescription
Result_FlagTRUE (.T.) if the operation was successful; otherwise  FALSE (.F.).
A SQL::Connection object.
QueryA SQL SELECT statement.
Optional. A SQL::Arguments object.  One or more arguments to be resolved when the SELECT statement is executed.

Description
The Execute() method executes a query on the connection using SQL. This  query can be any valid syntax accepted by the database to which you are  connected.
Limitations
Examples
This script prompts for a value, then returns a filtered list of records.
dim conn as SQL::Connection
dim sql as C
dim vCity as C
dim args as SQL::Arguments
vCity = ui_get_text("City", "Show Companies  in what city?")
sql = "select lastname, firstname from customer where  bill_city = :city Order By Company"
if .not. conn.open("{A5API=Access, FileName='C:\Program  Files\a5v8\MDBFiles\Alphasports.mdb', UserName='Admin'}")
    ui_msg_box("Error",  conn.CallResult.text)
    end
end if
if .not. args.Add("city", vCity)
    end
end if
if .not. conn.execute(sql, args)
    ui_msg_box("Error",  conn.CallResult.text)
    end
end if
sql_resultset_preview(conn.resultset)
conn.close()

See Also
SQL::Connection Object</original>
</page>