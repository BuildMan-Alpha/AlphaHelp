<page>
   <topic>SQL::Connection ToString Function Function</topic>
   <syntax>C ToString(SQLStatement as C [, Arguments as SQL::Arguments][, RowsToCopy = -1 as N [, StartRow = 1 as N [, ColumnSeparator as C [,RowSeparator as C [, ColumnReferences as SQL::TableInfo [, UserContext as P]]]]]])</syntax>
   <arguments>
     <argument>
         <name>SQLStatement</name>
         <description>Character</description>
     </argument>
     <argument>
         <name> Arguments</name>
         <description>SQL::Arguments</description>
     </argument>
     <argument>
         <name> RowsToCopy = -1</name>
         <description>Numeric</description>
     </argument>
     <argument>
         <name> StartRow = 1</name>
         <description>Numeric</description>
     </argument>
     <argument>
         <name> ColumnSeparator</name>
         <description>Character</description>
     </argument>
     <argument>
         <name>RowSeparator</name>
         <description>Character</description>
     </argument>
     <argument>
         <name> ColumnReferences</name>
         <description>SQL::TableInfo</description>
     </argument>
     <argument>
         <name> UserContext</name>
         <description>Pointer</description>
     </argument>
   </arguments>
   <description>Fetch data to a string using a SQL query.</description>
   <discussion>
      ...put discussion here....
   </discussion>
   <example><![CDATA[
...put example code here....
]]></example>
   <sections>
       <section>
            <description>put description here</description>
            <example><![CDATA[
      ...put example here....
]]></example>
       </section>
   </sections>
   <see>
      <ref>SQL::Connection Object</ref>
   </see>
   <original><![CDATA[ SQL::Connection::ToString()
Syntax
String as C = .ToString(  Query as C [,  as SQL::Arguments  [, RowsToCopy as N [, StartRow as N [, ColumnSeparator as C  [, RowSeparator as N [, ReferenceColumns as SQL::TableInfo [, UserContext as P ]]]]]]] )
ArgumentDescription
StringThe retrieved data.
A SQL::Connection object.
QueryA SQL SELECT statement.
Optional. A SQL::Arguments object.  One or more arguments to be resolved when the SELECT statement is executed.
RowsToCopyOptional. Default = -1 (all). The number of rows to  copy.
StartRowOptional. Default = 1 (first). The first row to copy.
ColumnSeparatorOptional. Default = " ". Characters to insert  between columns.
RowSeparatorOptional. Default = CR-LF. Characters to insert between  rows.
ReferenceColumnsOptional. A SQL::TableInfo object.  When data is formatted for a column in the result set: (1) if ReferenceColumns  has a column with a matching name, that object will be used to format  the data; (2) otherwise the ColumnInfo property of the result set is used  to format the data.
UserContextOptional. The user context is passed into the evaluation  of the expression when data is formatted.

Description
The ToString() method fetches data to a string using a SQL query.
Limitations
Examples
dim conn as SQL::Connection
dim connString as C
dim query as C
query = "select firstname, lastname from customer where  lastname > 'm'"
connString = "{A5API='Access', FileName='c:\program  files\a5v8\mdbfiles\alphasports.mdb'}"
if .not. conn.open(connString)
    ui_msg_box("Error",  conn.CallResult.text)
    end
end if
ui_msg_box("Results", conn.ToString(query))
conn.close()

This example retrieves four rows of data, starting at the third row.
Note : Even though  there are no arguments to pass, the following script DIMs and passes the  args variable.
dim conn as SQL::Connection
dim connString as C
dim query as C
dim args as SQL::Arguments
query = "select firstname, lastname from customer where  lastname > 'm'"
connString = "{A5API='Access', FileName='c:\program  files\a5v8\mdbfiles\alphasports.mdb'}"
if .not. conn.open(connString)
    ui_msg_box("Error",  conn.CallResult.text)
    end
end if
ui_msg_box("Results", conn.ToString(query, args,  4, 3, "|", crlf()))
conn.close()

See Also
SQL::Connection Object]]></original>
</page>