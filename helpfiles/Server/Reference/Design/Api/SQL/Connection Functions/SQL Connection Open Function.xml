<page>
   <topic>SQL::Connection Open Function Function</topic>
   <syntax>L Open([SQLConnectionString as C [, UserName as C [, Password as C]]])</syntax>
   <arguments>
     <argument>
         <name>SQLConnectionString</name>
         <description>Character</description>
     </argument>
     <argument>
         <name> UserName</name>
         <description>Character</description>
     </argument>
     <argument>
         <name> Password</name>
         <description>Character</description>
     </argument>
   </arguments>
   <description>Connect to a database. (See help for SetConnectionString for details on constructing a connect string.)</description>
   <discussion>
      ...put discussion here....
   </discussion>
   <example><![CDATA[
...put example code here....
]]></example>
   <sections>
       <section>
            <description>put description here</description>
            <example><![CDATA[
      ...put example here....
]]></example>
       </section>
   </sections>
   <see>
      <ref>SQL::Connection Object</ref>
   </see>
   <original> SQL::Connection::Open()
Syntax
Result_Flag as L = .Open(  [ Connect_String as C [, Username as C [,Password as C]]])
ArgumentDescription
Result_FlagTRUE (.T.) if the operation was successful; otherwise  FALSE (.F.).
A SQL::Connection object.
Connect_StringOptional. See SQL::Connection::SetConnectionString().
UsernameOptional.
PasswordOptional. 

Description
The Open() method connects to a database. The Connect_String can take two forms. The following version explicitly connects to the AlphaSports.mdb  file.
dim conn as SQL::Connection
conn.open("{A5API='Access', FileName='c:\program files\a5v8\mdbfiles\alphasports.mdb'}")

If you have saved this connection string information under the name  "AlphaSports", this syntax would work equally well. This syntax  is applicable to the SQL::Connection::Open() method only.
dim conn as SQL::Connection
conn.open("::name::alphasports")

Another possible syntax allows you to resolve the connection string  from an expression. The syntax is: ::eval:: String Expression. String Expression must evaluate to a valid connection string. For example: ::Eval::MyFunction().
dim c as sql::connection
if c.open("::eval::LookupConnection(\"Northwind\")")
    ResultString  = "Connection opened Successfully"
    ResultString  = ResultString + crlf(2) + "Tables" + crlf(2) + c.ListTables()
else
    ResultString  = "Error: " + c.callresult.text
end if
a5_show_variable(ResultString, "Open Result")
' --------------------------------------------------------------------------------------
function LookupConnection as C (Name as C)
    if  Name = "northwind"
        LookupConnection  = "{A5API=Access,FileName='c:\northwind.mdb',UserName='Admin'}"
    else
        LookupConnection  = "{A5API=Access,FileName='c:\common.mdb',UserName='Admin'}"
    end  if
end function

Limitations
Examples
dim conn as SQL::Connection
dim connString as C
connString = "{A5API='Access', FileName='c:\program  files\a5v8\mdbfiles\alphasports.mdb'}"
if .not. conn.open(connString)
    ui_msg_box("Error",  conn.CallResult.text)
    end
end if
... do stuff
conn.close()

See Also
SQL::Connection Object</original>
</page>