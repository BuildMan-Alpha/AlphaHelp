<page>
   <topic>SQL::Connection ListTablesWithTypes Function Function</topic>
   <syntax>C ListTablesWithTypes([TableFilter as SQL::TableFilter])</syntax>
   <arguments>
     <argument>
         <name>TableFilter</name>
         <description>SQL::TableFilter</description>
     </argument>
   </arguments>
   <description><![CDATA[Return a list of tables for the current database suffixed with (<type>).

Example Usage:

	dim Filter as SQL::TableFilter
	Filter.IncludeViews = .t.
	Connection.ListTables(Filter)

Note: The overload below is still allowed, but is obsolute.  Use a TableFilter argument instead.

	C ListTablesWithTypes( [IncludeTables as L [, IncludeViews as L [, IncludeLinkedTables as L [, IncludeSystemTables as L [, IncludeSynonyms as L [, IncludeAliases as L]]]]]])]]></description>
   <discussion>
      ...put discussion here....
   </discussion>
   <example><![CDATA[
...put example code here....
]]></example>
   <sections>
       <section>
            <description>put description here</description>
            <example><![CDATA[
      ...put example here....
]]></example>
       </section>
   </sections>
   <see>
      <ref>SQL::Connection Object</ref>
      <ref>AlphaDAO - ListTables and ListTablesWithTypes Methods V11</ref>
   </see>
   <original><![CDATA[ SQL::Connection::ListTablesWithTypes()
Syntax
Table_List as C = &ltSQL::Connection>.ListTablesWithTypes(  [ IncludeTables as L [, IncludeViews as L [, IncludeSystemTables as L  [, IncludeSynonyms as L [, IncludeAliases as L ]]]]] )
ArgumentDescription
Table_ListThe retrieved list of tables.
&ltSQL::Connection>A SQL::Connection object.
IncludeTablesOptional. Default = .T. (TRUE) = Include tables
IncludeViewsOptional. Default = .F. (FALSE) = Include views
IncludeSystemTablesOptional. Default = .F. (FALSE) = Include system tables
IncludeSynonymsOptional. Default = .F. (FALSE) = Include synonyms
IncludeAliasesOptional. Default = .F. (FALSE) = Include aliases

Description
The ListTablesWithTypes() method returns a list of tables for the current  database suffixed with type.
Limitations
Examples
dim conn as SQL::Connection
dim connString as C
connString = "{A5API='Access', FileName='c:\program  files\a5v8\mdbfiles\alphasports.mdb'}"
if .not. conn.open(connString)
    ui_msg_box("Error",  conn.CallResult.text)
    end
end if
ui_msg_box("Tables and Types", conn.ListTablesWithTypes(.t.,.t.,.t.,.t.,.t.))
conn.close()

See Also
SQL::Connection Object, AlphaDAO - ListTables and ListTablesWithTypes Methods V11]]></original>
</page>