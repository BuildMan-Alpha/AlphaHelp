<page>
   <topic>SQL::Connection GenerateNativeTableName Function Function</topic>
   <syntax>GenerateNativeTableName as C (TypeInfo as SQL::TableInfo)</syntax>
   <arguments>
     <argument>
         <name>TypeInfo</name>
         <description>SQL::TableInfo</description>
     </argument>
   </arguments>
   <description>Generate a formatted table name suitable for a SQL query in using the current syntax.</description>
   <discussion>
      ...put discussion here....
   </discussion>
   <example><![CDATA[
...put example code here....
]]></example>
   <sections>
       <section>
            <description>put description here</description>
            <example><![CDATA[
      ...put example here....
]]></example>
       </section>
   </sections>
   <see>
      <ref>SQL::Connection Object</ref>
   </see>
   <original> SQL::Connection::GenerateNativeTableName()
Syntax
Table_Name as C = .GenerateNativeTableName(   as SQL::TableInfo  )
ArgumentDescription
Table_NameFormatted table name.
A SQL::Connection object.
A SQL::TableInfo object.

Description
The GenerateNativeTableName method generates a formatted table  name suitable for a SQL query in using the current syntax.
Limitations
Example
dim conn as SQL::Connection
dim ti as SQL::TableInfo
dim connString as C
dim select_exp as C
connString = "{A5API='Access', FileName='c:\program  files\a5v8\mdbfiles\alphasports.mdb'}"
select_exp = "select Lastname from customer where bill_state_region  = 'ma'"
if .not. conn.open(connString)
    ui_msg_box("Error", conn.CallResult.text)
    end
end if
if .not. conn.GetTableInfo(ti, "customer")
    ui_msg_box("Error", conn.CallResult.text)
    end
end if
ui_msg_box("Native Type String", conn.GenerateNativeTableName(ti))
conn.close()

See Also
SQL::Connection Object</original>
</page>