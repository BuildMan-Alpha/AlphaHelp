<page>
   <topic>SQL::Connection::GenerateUpdateStatement Function</topic>
   <syntax>Statement as C = GenerateUpdateStatement as C (TableInfo as SQL::TableInfo [, UseBatchQualifiers = .t. as L [,SourceTableInfo as SQL::TableInfo]])</syntax>
   <arguments>
    <argument>
         <name>Statement</name>
         <description>A SQL UPDATE statement.
</description>
     </argument>
      <argument>
         <name>SQL::Connection</name>
         <description>A SQL::Connection object.</description>
     </argument>
     
     
     <argument>
         <name>TableInfo</name>
         <description>A SQL::TableInfo object for the table created with the DIM statement.
 </description>
     </argument>
     <argument>
         <name> UseBatchQualifiers = .t.</name>
         <description>Optional. Default = .T. Changes the syntax of SQL INSERT, DELETE, and UPDATE statements.
</description>
     </argument>
     <argument>
         <name>SourceTableInfo</name>
         <description>SQL::TableInfo</description>
     </argument>
   </arguments>
   <description>Generate a SQL Update statement for the table passed in.
</description>
   <discussion>
The GenerateUpdateStatement() method generates a SQL UPDATE statement for the table defined in .
When UseBatchQualifiers is explicitly set to .T., the appropriate column values are generated in the format :old. or :new. (All :old. for DELETE or WHERE clauses, All :new. for INSERT and a mixture for UPDATE statements).
Note: If UseBatchQualifiers is true then field values will be generated as arguments 
prefaced with 'new.'  and 'old.' so a result set can be the source of the data.
   </discussion>
  
   <sections>
       <section>
            <description>When UseBatchQualifiers is explicitly set to .T. . UPDATE statements need to differentiate between new and old values (note the prefix of "new__").</description>
            <example><![CDATA[
UPDATE tablename SET column2 = :new.column2 WHERE column1 = :old.column1 and column2 = :old.column2
]]></example>
       </section>
        <section>
            <description>If UseBatchQualifiers is set to .F., these function will generate the value entries as simple arguments (with one exception) so you can build an arguments collection up and execute the statement.</description>
            <example><![CDATA[
INSERT INTO tablename (column1, column2) VALUES (:value1, :value2)
]]></example>
       </section>
        <section>
            <description>You would probably have a key column in the WHERE clause, which is generally not updated but is used to uniquely identify the row.  In this case, the presence of the original value of column2 in the WHERE clause will return zero rows affected if the value of column2 has changed (optimistic concurrency - see the list of arguments for SQL::Connection::GenerateUpdateStatement).</description>
           
       </section>
       
       
   </sections>
   <see>
      <ref>SQL::Connection Object</ref>
   </see>
   
</page>