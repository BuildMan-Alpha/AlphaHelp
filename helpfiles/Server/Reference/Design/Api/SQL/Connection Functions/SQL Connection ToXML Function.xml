<page>
   <topic>SQL::Connection ToXML Function Function</topic>
   <syntax>C ToXML(SQLStatement as C  [, Arguments as SQL::Arguments] [, RowsToCopy = -1 as N [, StartRow = 1 as N [, C documentname [, C rowname [,C header[, ColumnReferences as SQL::TableInfo [, UserContext as P]]]]]]])</syntax>
   <arguments>
     <argument>
         <name>SQLStatement</name>
         <description>Character</description>
     </argument>
     <argument>
         <name> Arguments</name>
         <description>SQL::Arguments</description>
     </argument>
     <argument>
         <name> RowsToCopy = -1</name>
         <description>Numeric</description>
     </argument>
     <argument>
         <name> StartRow = 1</name>
         <description>Numeric</description>
     </argument>
     <argument>
         <name>documentname</name>
         <description>Character</description>
     </argument>
     <argument>
         <name>rowname</name>
         <description>Character</description>
     </argument>
     <argument>
         <name>header</name>
         <description>Character</description>
     </argument>
     <argument>
         <name> ColumnReferences</name>
         <description>SQL::TableInfo</description>
     </argument>
     <argument>
         <name> UserContext</name>
         <description>Pointer</description>
     </argument>
   </arguments>
   <description>Fetch data to an XML formatted string using a SQL query.
</description>
   <discussion>
      ...put discussion here....
   </discussion>
   <example><![CDATA[
...put example code here....
]]></example>
   <sections>
       <section>
            <description>put description here</description>
            <example><![CDATA[
      ...put example here....
]]></example>
       </section>
   </sections>
   <see>
      <ref>SQL::Connection Object</ref>
   </see>
   <original> SQL::Connection::ToXML()
Syntax
XML_String as C = .ToXML(  Query as C, [  as SQL::Arguments  ], [  RowsToCopy as N [, StartRow as N [, XMLDocumentName as C  [, XMLRowName as C [, XMLHeader as C [, ReferenceColumns as SQL::TableInfo  [, UserContext as P ]]]]]]] )
ArgumentDescription
XML_StringAn XML version of the retrieved data.
A SQL::Connection object.
QuerySQL SELECT statement.
Optional. A SQL::Arguments object.  One or more arguments to be resolved when the SELECT statement is executed.
RowsToCopyOptional. Default = -1 (all). The number of rows to  copy.
StartRowOptional. Default = -1 (first). The first row to copy.
DocumentNameOptional. The tag for the document element. See example.
RowNameOptional. The tag for the row element. See example.
HeaderOptional. The tag for the header element. See example.
ReferenceColumnsOptional. A SQL::TableInfo object.  When data is formatted for a column in the result set: (1) if ReferenceColumns  has a column with a matching name, that object will be used to format  the data; (2) otherwise the ColumnInfo property of the result set is used  to format the data.
UserContextOptional. The user context is passed into the evaluation  of the expression when data is formatted.

Description
The ToXML() method fetches data to an XML formatted string using a SQL  query.
Limitations
Example
dim connString as C
dim rs as SQL::ResultSet
dim ti as SQL::TableInfo
dim args as SQL::Arguments
dim select_exp as C
dim data as C
connString = "{A5API='Access', FileName='c:\program  files\a5v8\mdbfiles\alphasports.mdb'}"
select_exp = "select Firstname,Lastname from customer  where bill_state_region = 'ma'"
if .not. conn.open(connString) then
    end
end if
if .not. conn.execute(conn) then
    end
end if
data = conn.toxml(select_exp, args, -1, -1, "DocName",  "RowName", "HeaderName")
conn.close()

The XML data looks like this:
HeaderName

    
        Michael
        Graham
    
    
        Sally
        Peabody
    
...

See Also
SQL::Connection Object</original>
</page>