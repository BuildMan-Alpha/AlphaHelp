<page>
   <topic>SQL::Connection CreateTable Function Function</topic>
   <syntax>L CreateTable(TableInfo as SQL::TableInfo)</syntax>
   <arguments>
     <argument>
         <name>TableInfo</name>
         <description>SQL::TableInfo</description>
     </argument>
   </arguments>
   <description>Create a table in the currently connected database using the TableInfo specification.</description>
   <discussion>
      ...put discussion here....
   </discussion>
   <example><![CDATA[
...put example code here....
]]></example>
   <sections>
       <section>
            <description>put description here</description>
            <example><![CDATA[
      ...put example here....
]]></example>
       </section>
   </sections>
   <see>
      <ref>SQL::Connection Object</ref>
   </see>
   <original> SQL::Connection::CreateTable()
Syntax
Result_Flag as L = .CreateTable(   as SQL::TableInfo  )
ArgumentDescription
Result_FlagTRUE (.T.) if the operation was successful; otherwise  FALSE (.F.).
A SQL::Connection object.
A SQL::TableInfo object.

Description
The CreateTable() method creates a table in the currently connected database  using the TableDef specification.
Limitations
Example
Note that a new field must have a name, length, and an Intermediate  type.
dim ti as SQL::TableInfo
dim conn as SQL::Connection
dim dt as SQL::DataTypeInfo
if .not. conn.open("{A5API=Access,FileName='C:\Program  Files\A5V8\MDBFiles\Alphasports.mdb', UserName='Admin'}") then
    ui_msg_box("Error",  conn.CallResult.text)
    end
end if
dt.Name = "Name"
dt.Length = 50
dt.IntermediateType = "Character"
ti.name = "NewTable"
if ti.AddColumn(dt) = 0 then
    end
end if
if .not. conn.CreateTable(ti) then
    ui_msg_box("Error",  conn.CallResult.text)
end if
conn.close()

See Also
SQL::Connection Object</original>
</page>