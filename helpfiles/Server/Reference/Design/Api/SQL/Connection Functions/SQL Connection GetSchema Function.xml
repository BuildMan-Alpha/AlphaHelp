<page>
   <topic>SQL::Connection GetSchema Function Function</topic>
   <syntax>L SQL::TableInfo GetSchema(BYREF Schema as SQL::Schema [, TableOwner as C [, IncludeTables as L [, IncludeViews as L [,IncludeLinkedTables as L [, IncludeSystemTables as L [, IncludeSynonyms as L [, IncludeAliases as L]]]]]]])</syntax>
   <arguments>
     <argument>
         <name>BYREF Schema</name>
         <description>SQL::Schema</description>
     </argument>
     <argument>
         <name> TableOwner</name>
         <description>Character</description>
     </argument>
     <argument>
         <name> IncludeTables</name>
         <description>Logical</description>
     </argument>
     <argument>
         <name> IncludeViews</name>
         <description>Logical</description>
     </argument>
     <argument>
         <name>IncludeLinkedTables</name>
         <description>Logical</description>
     </argument>
     <argument>
         <name> IncludeSystemTables</name>
         <description>Logical</description>
     </argument>
     <argument>
         <name> IncludeSynonyms</name>
         <description>Logical</description>
     </argument>
     <argument>
         <name> IncludeAliases</name>
         <description>Logical</description>
     </argument>
   </arguments>
   <description>Get a schema definition.
</description>
   <discussion>
      ...put discussion here....
   </discussion>
   <example><![CDATA[
...put example code here....
]]></example>
   <sections>
       <section>
            <description>put description here</description>
            <example><![CDATA[
      ...put example here....
]]></example>
       </section>
   </sections>
   <see>
      <ref>SQL::Connection Object</ref>
   </see>
   <original> SQL::Connection::GetSchema()
Syntax
Result_Flag as L = .GetSchema(   as SQL::Schema [, Owner as C [, IncludeTables as L  [, IncludeViews as L [, IncludeLinkedTables as L [, IncludeSystemTables as L [, IncludeSynonyms as L [, IncludeAliases as L  ]]]]]]] )
ArgumentDescription
Result_FlagTRUE (.T.) if the operation was successful; otherwise  FALSE (.F.).
A SQL::Connection object.
A SQL::Schema object  created with the DIM statement.
OwnerOptional. Default = "". The owner of the database.
IncludeTablesOptional. Default = .T. Whether to include table definitions.
IncludeViewsOptional. Default = .T. Whether to include view definitions.
IncludeLinkedTablesOptional. Default = .T. Whether to include linked table  definitions.
IncludeSystemTablesOptional. Default = .T. Whether to include system table  definitions.
IncludeSynonymsOptional. Default = .T. Whether to include synonym definitions.
IncludeAliasesOptional. Default = .T. Whether to include alias definitions.

Description
The GetSchema() method returns a collection of the tables requested for  the current database and optionally for those owned by a specific user.
Limitations
Examples
dim conn as SQL::Connection
dim sch as SQL::Schema
dim connString as C
connString = "{A5API='Access', FileName='c:\program  files\a5v8\mdbfiles\alphasports.mdb'}"
if .not. conn.open(connString)
    ui_msg_box("Error", conn.CallResult.text)
    end
end if
if .not. conn.GetSchema(sch)
    ui_msg_box("Error", conn.CallResult.text)
    end
end if
file.from_string("c:\schema.txt", sch.xml)
conn.close()

See Also
SQL::Connection Object</original>
</page>