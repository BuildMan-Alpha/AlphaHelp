<page>
   <topic>SQL::Connection ListPortableSQLFunctions Function Function</topic>
   <syntax>C ListPortableSQLFunctions(Syntax as C = "")</syntax>
   <arguments>
     <argument>
         <name>Syntax</name>
         <description>C = ""</description>
     </argument>
   </arguments>
   <description>Create a crlf() delimited list of portable SQL functions.

Within each row, the tab delimited columns are: Name, Prototype, Description, Aggregate=Y/N, Summary=Y/N, Category

If you provide a syntax name, only functions supported by that syntax will be included.
If you do not provide a syntax name, all functions will be included.

Note: Geography functions are only supported for some databases.</description>
   <discussion>
      ...put discussion here....
   </discussion>
   <example><![CDATA[
...put example code here....
]]></example>
   <sections>
       <section>
            <description>put description here</description>
            <example><![CDATA[
      ...put example here....
]]></example>
       </section>
   </sections>
   <see>
      <ref>SQL::Connection Object</ref>
      <ref>Portability Functions</ref>
   </see>
   <original> SQL::Connection::ListPortableSQLFunctions()
Syntax
List as C = .ListPortableSQLFunctions()
ArgumentDescription
ListA list of functions in the format: Name Prototype Description
 A SQL::Connection object.

Description
The ListPortableSQLFunctions() method returns a list of functions that  are mapped by syntax handlers to the target database, or are considered  portable (can be used in generic queries).
Limitations
Examples
dim conn as SQL::Connection
dim connString as C
connString = "{A5API='Access', FileName='c:\program  files\a5v8\mdbfiles\alphasports.mdb'}"
if .not. conn.open(connString)
    ui_msg_box("Error", conn.CallResult.text)
    end
end if
ui_msg_box("Portable SQL Functions", conn.ListPortableSQLFunctions())
conn.close()

See Also
SQL::Connection Object, Portability Functions</original>
</page>