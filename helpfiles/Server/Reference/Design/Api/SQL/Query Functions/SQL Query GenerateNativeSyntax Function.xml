<page>
   <topic>SQL::Query GenerateNativeSyntax Function Function</topic>
   <syntax>C GenerateNativeSyntax([SQLConnection as SQL::Connection | SQLConnectionString as C])</syntax>
   <arguments>
     <argument>
         <name>SQLConnection</name>
         <description>SQL::Connection | SQLConnectionString</description>
     </argument>
   </arguments>
   <description>Generate a native SQL statement using the selected syntax associated with the current or passed connection.</description>
   <discussion>
      ...put discussion here....
   </discussion>
   <example><![CDATA[
...put example code here....
]]></example>
   <sections>
       <section>
            <description>put description here</description>
            <example><![CDATA[
      ...put example here....
]]></example>
       </section>
   </sections>
   <see>
      <ref>SQL::Query Object</ref>
      <ref>Limitations</ref>
   </see>
   <original> SQL::Query::GenerateNativeSyntax()
Syntax
 SQL_Statement as C = .GenerateNativeSyntax(  as SQL::Connection  | ConnectString as C )
 Argument Description
 SQL_Statement The native SQL equivalent of a Portable SQL expression.
 A SQL::Query object created with a DIM statement.
 Optional. A SQL::Connection object with a defined .ConnectionString property.
 ConnectString Optional. A connection string.

 Description
The .GenerateNativeSyntax() method returns the native SQL version of the Portable SQL stored in the SQL::Query.SQLStatement property.
Examples
 dim qry as SQL::Query
dim conn as SQL::Connection
dim connString as C
connString = "{A5API='Access', FileName='c:\program files\a5v7\mdbfiles\alphasports.mdb'}"
? conn.open(connString)
= .T.
? qry.parse("Select * from Customer WHERE substring(lastname,1,1) = 'a'")
= .T.
? qry.GenerateNativeSyntax(connString)
= "SELECT * FROM CustomerWHERE (Mid(lastname, 1, 1) = 'a')"

 See Also
 SQL::Query Object
Limitations</original>
</page>