<page>
	<topic>SQL::DataTypeInfo Class</topic>
	<properties>
		<property generated="true">
			<name>XML</name>
			<type>C</type>
			<description>
Type: C
 
Mode: RW
 
The schema in XML format.
 </description>
		</property>
		<property generated="true">
			<name>Name</name>
			<type>C</type>
			<description>
Type: C
 
Mode: R
 
Default = "". The unique name of the column within the table.
 </description>
		</property>
		<property generated="true">
			<name>NativeAPI</name>
			<type>C</type>
			<description>
Type: C
 
Mode: R
 
Default = "". The name of the API used (ODBC, MySQL, ADO, etc.).
 </description>
		</property>
		<property generated="true">
			<name>NativeSyntax</name>
			<type>C</type>
			<description>
Type: C
 
Mode: R
 
Default = "". The name of the syntax used to interact with the database (usually the name of the vendor or database type).
 </description>
		</property>
		
		
		<property generated="true">
			<name>Comment</name>
			<type>C</type>
			<description>
Type: C
 
Mode: R
 
Default = "". The comment stored for the column, if the database supports it.
 </description>
		</property>
		<property generated="true">
			<name>AlphaType</name>
			<type>C</type>
			<description>
Type: C
 
Mode: R
 
Default = "". The type of the column as specified with Xbasic.
 </description>
		</property>
		<property generated="true">
			<name>AlphaTypeName</name>
			<type>C</type>
			<description>
Type: C
 
Mode: R
 
Default = "Invalid". A printable description of the AlphaType.
 </description>
		</property>
		
		
		<property generated="true">
			<name>NativeType</name>
			<type>N</type>
			<description>
Type: N
 
Mode: R
 
Default = 0. A database specific type which uniquely describes the data.
 </description>
		</property>
		<property generated="true">
			<name>NativeTypeName</name>
			<type>C</type>
			<description>
Type: C
 
Mode: R
 
Default = "". A printable description of the .NativeType.
 </description>
		</property>
		<property generated="true">
			<name>IntermediateType</name>
			<type>N</type>
			<description>
Type: SQL::IntermediateType
 
Mode: R
 
Default = -1. A product independent type definition.
 </description>
		</property>
		
		
		<property generated="true">
			<name>IntermediateTypeName</name>
			<type>C</type>
			<description>
Type: C
 
Mode: R
 
Default = "Invalid". A printable description of the .IntermediateType.
 </description>
		</property>
		<property generated="true">
			<name>DecimalDigits</name>
			<type>N</type>
			<description>
Type: N
 
Mode: R
 
Default = 0. For numbers only. This is the number of digits to the right of the decimal point.
 </description>
		</property>
		<property generated="true">
			<name>DisplayFormat</name>
			<type>C</type>
			<description>
Type: C
 
Mode: R
 
Default = "". Currently for numeric fields only, this value is used when calling FormatData on a SQL::ResultSet, SQL::Row, or SQL::DataTypeInfo.The formatting has the same effect as calling str()using the numeric value of the column and the properties DBFLength and DBFDecimals.
 </description>
		</property>
		
		
		<property generated="true">
			<name>ExternalFileNameExpression</name>
			<type>C</type>
			<description>
Type: C
 
Mode: RW
 
Default = "". An Xbasic expression to be used in formatting a filename to persist the column data to. When FormatData is called, the current value of this column is written to the file name that results from evaluating this expression.
 </description>
		</property>
		<property generated="true">
			<name>DataTransformExpression</name>
			<type>C</type>
			<description>
Type: C
 
Mode: R
 
Default = "". An Xbasic expression to be evaluated when retrieving data values from a SQL::ResultSet or a SQL::Row. The data is transformed each time the column is referenced using the Data function.
 </description>
		</property>
		<property generated="true">
			<name>Length</name>
			<type>N</type>
			<description>
Type: N
 
Mode: R
 
Default = 0. The size of the field. For strings and blobs, this is the number of characters and bytes respectively. For numbers this is the total number of digits.
 </description>
		</property>
		
		
		<property generated="true">
			<name>Nullable</name>
			<type>L</type>
			<description>
Type: L
 
Mode: R
 
True (.T.) if the column can be Null.
 </description>
		</property>
		<property generated="true">
			<name>ZeroFill</name>
			<type>L</type>
			<description>
Type: L
 
Mode: R
 
Default = FALSE (.F). Indicates if the field should initially be filled with zeroes.
 </description>
		</property>
		<property generated="true">
			<name>AutoIncrement</name>
			<type>L</type>
			<description>
Type: L
 
Mode: R
 
Default = FALSE (.F).
 </description>
		</property>
		
		
		<property generated="true">
			<name>EmptyStringIsNull</name>
			<type>L</type>
			<description>
Type: L
 
Mode: R
 
Default = FALSE (.F). Set to TRUE if an empty string should be sent to the database as NULL.
 </description>
		</property>
		<property generated="true">
			<name>Updateable</name>
			<type>L</type>
			<description>
Type: L
 
Mode: R
 
Default = TRUE (.T). True (.T.) if this column is updateable.
 </description>
		</property>
		<property generated="true">
			<name>HTMLEscapeFormattedData</name>
			<type>L</type>
			<description>
Type: L
 
Mode: RW
 
Default = FALSE (.F). If this property is set to true, the contents of the column will be formatted with *HTML_ESCAPE() before being returned to the caller.
 </description>
		</property>
		
		
		<property generated="true">
			<name>Identity</name>
			<type>L</type>
			<description>
Type: L
 
Mode: R
 
Default = FALSE (.F). The identity column.
 </description>
		</property>
		<property generated="true">
			<name>IdentitySeed</name>
			<type>N</type>
			<description>
Type: N
 
Mode: R
 
Default = 0. The initial value of a the set of identities.
 </description>
		</property>
		<property generated="true">
			<name>IdentityIncrement</name>
			<type>N</type>
			<description>
Type: N
 
Mode: R
 
Default = 0. The value to increment the identity prior to insert.
 </description>
		</property>
		
		
		<property generated="true">
			<name>IdentityReplicate</name>
			<type>L</type>
			<description>
Type: L
 
Mode: R
 
Default = TRUE (.T). Whether to copy this identity when doing replication to another table.
 </description>
		</property>
		<property generated="true">
			<name>IdentityMinimum</name>
			<type>N</type>
			<description>Type: N. Numeric IdentityMinimum property</description>
		</property>
		<property generated="true">
			<name>IdentityMaximum</name>
			<type>N</type>
			<description>Type: N. Numeric IdentityMaximum property</description>
		</property>
		
		<property generated="true">
			<name>IdentitySequenceName</name>
			<type>C</type>
			<description>
Type: C
 
Mode: R
 
Default = "". This property applies to Oracle (and probably DB2 ) and is necessary to generate the correct SQL.
 </description>
		</property>
		<property generated="true">
			<name>NamedFormatExpressions</name>
			<type>C</type>
			<description>
Type: C
 
Mode: R
 
Default = "". This property is a CR-LF delimited list of expressions, where each line is made up of a name followed by an equal sign and the Xbasic expression to execute. The Xbasic Expression is used to format the data when the named format is requested. The expression executes in a context that has the following predefined variables: CurrentRow as SQL::Row, ColumnDefinition as SQL::DataTypeInfo, Context as P. For example:

Short=Left(CurrentRow.Data("Description"))

Long=CurrentRow.Data("A")
 </description>
		</property>
		<property generated="true">
			<name>DefaultValue</name>
			<type>C</type>
			<description>
Type: C
 
Mode: R
 
Default = "". The initial value to be assigned.
 </description>
		</property>
		
		
		<property generated="true">
			<name>DefaultValueName</name>
			<type>C</type>
			<description>
Type: C
 
Mode: R
 
Default = "". The name of the rule (constraint).
 </description>
		</property>
		<property generated="true">
			<name>SourceType</name>
			<type>N</type>
			<description>
Type: N
 
Mode: R
 
Default = 0.
 </description>
		</property>
		<property generated="true">
			<name>DBFName</name>
			<type>C</type>
			<description>
Type: C
 
Mode: R
 
Default = "". The name of the column with any reformatting required to make it a valid DBF column name.
 </description>
		</property>
		
		
		<property generated="true">
			<name>DBFType</name>
			<type>C</type>
			<description>
Type: C
 
Mode: R
 
Default = "". The column type to be used in specifying an Alpha Anywhere .DBF.
 </description>
		</property>
		<property generated="true">
			<name>DBFLength</name>
			<type>N</type>
			<description>
Type: N
 
Mode: R
 
Default = 0. The length required for a column specification. See .SizeToFit.
 </description>
		</property>
		<property generated="true">
			<name>DBFDecimals</name>
			<type>N</type>
			<description>
Type: N
 
Mode: R
 
Default = 0. The number of decimal places to be used in specifying an Alpha Anywhere .DBF.
 </description>
		</property>
		
		
		<property generated="true">
			<name>DBFColumnSyntax</name>
			<type>C</type>
			<description>
Type: C
 
Mode: R
 
The complete syntax to be used in specifying the column for an Alpha Anywhere .DBF.
 y</description>
		</property>
		<property generated="true">
			<name>SourceTableCatalog</name>
			<type>C</type>
			<description>Type: C. String SourceTableCatalog property</description>
		</property>
		<property generated="true">
			<name>SourceTableSchema</name>
			<type>C</type>
			<description>Type: C. String SourceTableSchema property</description>
		</property>
		
		
		<property generated="true">
			<name>SourceTableOwner</name>
			<type>C</type>
			<description>
Type: C
 
Mode: R
 
Default = "". The owner of the table (not always available).
 </description>
		</property>
		<property generated="true">
			<name>SourceTableName</name>
			<type>C</type>
			<description>
Type: C
 
Mode: R
 
Default = "". The table name (not always available).
 </description>
		</property>
		<property generated="true">
			<name>SourceColumnName</name>
			<type>C</type>
			<description>
Type: C
 
Mode: R
 
Default = "". The column name in the table (not always available).
 </description>
		</property>
		
		
		<property generated="true">
			<name>SourceTableAlias</name>
			<type>C</type>
			<description>String SourceTableAlias property</description>
		</property>
		<property generated="true">
			<name>FixedLength</name>
			<type>L</type>
			<description>
Type: L
 
Mode: R
 
Default = FALSE (.F). The column is fixed length.
 </description>
		</property>
		<property generated="true">
			<name>ValidationText</name>
			<type>C</type>
			<description>
Type: C
 
Mode: R
 
Default = "". The message to display.
 </description>
		</property>
		
		
		<property generated="true">
			<name>NativeValidationRule</name>
			<type>C</type>
			<description>
Type: C
 
Mode: R
 
Default = "". An expression describing the rule for validation in native syntax.
 </description>
		</property>
		<property generated="true">
			<name>NativeValidationRuleName</name>
			<type>C</type>
			<description>
Type: C
 
Mode: R
 
Default = "". The name of the validation rule.
 </description>
		</property>
		<property generated="true">
			<name>NativeCharacterSetName</name>
			<type>C</type>
			<description>String NativeCharacterSetName property</description>
		</property>
		
		
		<property generated="true">
			<name>AutoGenerate</name>
			<type>L</type>
			<description>
Type: L
 
Mode: R
 
Default = FALSE (.F).
 </description>
		</property>
		<property generated="true">
			<name>ISAMNotLastColumn</name>
			<type>L</type>
			<description>
Type: L
 
Mode: R
 
Default = FALSE (.F). Jet Driver Specific
 </description>
		</property>
		<property generated="true">
			<name>OneBlobPerPage</name>
			<type>L</type>
			<description>
Type: L
 
Mode: R
 
Default = FALSE (.F). Jet Driver Specific
 </description>
		</property>
		
		
		<property generated="true">
			<name>CompressedUnicode</name>
			<type>L</type>
			<description>
Type: L
 
Mode: R
 
Default = FALSE (.F). Data is stored on native platform as compressed Unicode strings.
 </description>
		</property>
		<property generated="true">
			<name>HyperLink</name>
			<type>L</type>
			<description>
Type: C
 
Mode: R
 
Default = FALSE (.F). Hyperlink string.
 </description>
		</property>
		<property generated="true">
			<name>CanBeUsedInWhereClause</name>
			<type>L</type>
			<description>
Type: L
 
Mode: R
 
Default = TRUE (.T). If TRUE, the column can be used in a WHERE clause. Some binary and long text columns are not permitted to be used in a where clause for some databases.
 </description>
		</property>
		
		
		<property generated="true">
			<name>SQLExpression</name>
			<type>C</type>
			<description>
Type: C
 
Mode: R
 
Default = "".
 </description>
		</property>
		<property generated="true">
			<name>SizeToFit</name>
			<type>L</type>
			<description>
Type: L
 
Mode: R
 
Default = FALSE (.F). When set to true, .DBFColumnSyntax and .DBFLength properties will return lengths adjusted based on the actual data. Notes:

 Call UpdateStatistics()before getting the .DBFRowSyntax.


 If the longest column is zero length, the default length is 15.


Size to fit will limit the size of inserted or updated fields on imported or linked tables to the maximum size of the previous values.
 </description>
		</property>
		<property generated="true">
			<name>MaximumActualLength</name>
			<type>N</type>
			<description>
Type: N
 
Mode: R
 
Default = -1. Set by UpdateStatistics(). This value is the maximum actual length of character and binary columns. Otherwise it is set to zero.
 </description>
		</property>
		
		
		<property generated="true">
			<name>Computed</name>
			<type>L</type>
			<description>Type: L. Logical Computed property</description>
		</property>
		<property generated="true">
			<name>RowUUID</name>
			<type>L</type>
			<description>Type: L. Logical RowUUID property</description>
		</property>
	</properties>
	<methods>
		<methodref generated="true">
			<name>FormatData</name>
			<ref>FormatData</ref>
			<description>
			Return the data value defined by this SQL::DataTypeInfo as follows:
1.	If a named format is provided, and a format has been set by assigning NamedFormatExpressions,"
	this format will be used."
2.	Otherwise, if the value is numeric and the DisplayFormat property has been set the value will be formatted"
	as if the value were passed to the system function STR using the values of DBFLength and DBFDecimals"
	along with the format specified in DisplayFormat"
3. Otherwise, default conversion to a string will be done.</description>
		</methodref>
		
		
			<methodref>
			<name>Clone</name>
			<ref></ref>
			<description>Makes a copy of the SQL::DataTypeInfo object and its contents.

			</description>
		</methodref>
		
		<methodref>
			<name>FormatData</name>
			<ref></ref>
			<description>Returns a string representation of a data value in a result set row.
</description>
		</methodref>
		
	</methods>
<discussion>The SQL::DataTypeInfo object description describes a column in a SQL::ResultSet or an element in a SQL::Row. The object includes the name, size, precision, Alpha Anywhere type, the native type, and an intermediate type (see SQL::IntermediateType below) which contains more precise type information. This intermediate type makes it possible to recreate a table using the closest possible matching type in the target table.</discussion>
   
<sections>
<section><title>Example</title>
<description>The following script retrieves data into a SQL::ResultSet, extracts a SQL::Row with SQL::ResultSet.NextRow(), then lists the properties of one of the row's SQL::DataTypeInfo objects.</description>

<example><![CDATA[
dim conn as SQL::Connection
dim rs as SQL::ResultSet
dim cr as SQL::Row
dim dti as SQL::DataTypeInfo
dim connString as C
dim select_exp as C
connString = "{A5API='Access', FileName='c:\program files\a5v8\mdbfiles\alphasports.mdb'}"
select_exp = "select Lastname from customer where bill_state_region = 'ma'"
if .not. conn.open(connString)
    ui_msg_box("Error", conn.CallResult.text)
    end
end if
if .not. conn.execute(select_exp)
    ui_msg_box("Error", conn.CallResult.text)
    conn.close()
    end
end if
rs = conn.ResultSet
rs.NextRow()
cr = rs.CurrentRow
dti = cr.ColumnInfo[1]
ui_msg_box("Data Type Info", dti.xml)
conn.close()
]]></example>
</section>

<section>
<description>This example in the Interactive Window shows the use of the .HTMLEscapeFormattedData property.</description>
<example><![CDATA[
dim c as SQL::connection
dim ti as SQL::tableinfo

c.open("{a5api=access,filename=c:\northwind.mdb}")
c.execute("select * from categories")
ti = c.resultset. ToTableInfo()
ti.column3.HTMLEscapeFormattedData = .t.
c.ToJSON("select * from categories", -1, 1, ti)
]]></example>



</section>


</sections>
   
   
   
   
   
   
   
   
   
	<see>
		<ref>SQL</ref>
	</see>
</page>