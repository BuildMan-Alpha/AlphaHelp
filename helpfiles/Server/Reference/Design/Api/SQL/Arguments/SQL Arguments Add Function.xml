<page>
   <topic>SQL::Arguments Add Function Function</topic>
   <syntax>L Add(Name as C [,Value as A [, Usage as SQL::ArgumentUsage [,IsNull as L = .f.]]])</syntax>
   <arguments>
     <argument>
         <name>Name</name>
         <description>Character</description>
     </argument>
     <argument>
         <name>Value</name>
         <description>Any type</description>
     </argument>
     <argument>
         <name> Usage</name>
         <description>SQL::ArgumentUsage</description>
     </argument>
     <argument>
         <name>IsNull</name>
         <description>L = .f.</description>
     </argument>
   </arguments>
   <description>Add an argument to the collection.
or
L Add(SQL::Argument Argument)</description>
   <discussion>
      ...put discussion here....
   </discussion>
   <example><![CDATA[
...put example code here....
]]></example>
   <sections>
       <section>
            <description>put description here</description>
            <example><![CDATA[
      ...put example here....
]]></example>
       </section>
   </sections>
   <see>
      <ref>SQL::Arguments Object</ref>
      <ref>Limitations</ref>
      <ref>Desktop applications only prior to Version 9.</ref>
   </see>
   <original><![CDATA[ SQL::Arguments::Add()
Syntax
Result_Flag as L = &ltSQL::Arguments>.Add(  Name as C [, Data as A  [, &ltUsage> as SQL::ArgumentUsage  [, isNull as L ]]] | &ltArgument> as SQL::Argument  )
ArgumentDescription
Result_FlagTRUE (.T.) if the operation was successful; otherwise  FALSE (.F.).
&ltSQL::Arguments>A SQL::Arguments object.
NameThe unique name of an argument. See the SQL::Argument object.
DataOptional. Data of any of the following types:

"Blob"

"Character"

"Date"

"Logical"

"Numeric"

"Short Time"

"Time" 
&ltUsage>Optional. A SQL::ArgumentUsage object.
IsNullOptional, default FALSE (.F.). If TRUE (.T.), set this argument to a NULL value. (Requires V10.5 or later)
&ltArgument>A SQL::Argument object with (at a minimum) a defined name or data property.

Description
The Add() method adds a new argument to a SQL::Arguments object.
Examples
dim args as SQL::Arguments
? args.add("city", "Boston")
= .T.
? args.add("state", "MA")
= .T.
? args.ArgumentNumber("state")
= 2

This script prompts for a value, then returns a filtered list of records.
dim conn as SQL::Connection
dim sql as C
dim vCity as C
dim args as SQL::Arguments
vCity = ui_get_text("City", "Show Companies  in what city?")
sql = "select lastname, firstname from customer where  bill_city = :city Order By Company"
if .not. conn.open("{A5API=Access,FileName='C:\Program  Files\a5v8\MDBFiles\Alphasports.mdb', UserName='Admin'}")
 ui_msg_box("Error",  conn.CallResult.text)
 end
end if
if .not. args.Add("city", vCity)
 end
end if
if .not. conn.execute(sql, args)
 ui_msg_box("Error",  conn.CallResult.text)
 end
end if
sql_resultset_preview(conn.resultset)

See Also
SQL::Arguments Object
Limitations
Desktop applications only prior to Version 9.]]></original>
</page>