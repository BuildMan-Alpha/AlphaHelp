<page>
   <topic>SQL::Arguments Set Function Function</topic>
   <syntax>L Set(Name as C, Value as A [, Usage as SQL::ArgumentUsage  [,IsNull as L = .f.]])</syntax>
   <arguments>
     <argument>
         <name>Name</name>
         <description>Character</description>
     </argument>
     <argument>
         <name> Value</name>
         <description>Any type</description>
     </argument>
     <argument>
         <name> Usage</name>
         <description>SQL::ArgumentUsage</description>
     </argument>
     <argument>
         <name>IsNull</name>
         <description>L = .f.</description>
     </argument>
   </arguments>
   <description>Set the value and (optionally) the usage of an argument.</description>
   <discussion>
      ...put discussion here....
   </discussion>
   <example><![CDATA[
...put example code here....
]]></example>
   <sections>
       <section>
            <description>put description here</description>
            <example><![CDATA[
      ...put example here....
]]></example>
       </section>
   </sections>
   <see>
      <ref>SQL::Arguments Object</ref>
      <ref>Limitations</ref>
   </see>
   <original> SQL::Arguments::Set()
Syntax
Result_Flag as L = .Set(  Name as C, Data as A  [,  as SQL::ArgumentUsage  ] )
ArgumentDescription
Result_FlagTRUE (.T.) if the operation was successful; otherwise  FALSE (.F.).
A SQL::Arguments object.
NameThe unique name property of  an argument. See the SQL::Argument object.
DataData of any of the following types:

"Blob"

"Character"

"Date"

"Logical"

"Numeric"

"Short Time"

"Time" 
Optional. A SQL::ArgumentUsage object.

Description
The Set() method redefines an argument value, or adds an argument and  value and to a SQL::Argument object  in a SQL::Arguments object.
Examples
dim args as SQL::Arguments
args.add("state", "MA")
? args.Find("state")
= "MA"
? args.set("state", "NH")
= .T.
? args.Find("state")
= "NH"

This script prompts for a value, then returns a filtered list of records.
dim conn as SQL::Connection
dim sql as C
dim vCity as C
dim args as SQL::Arguments
vCity = ui_get_text("City", "Show Companies  in what city?")
sql = "select lastname, firstname from customer where  bill_city = :city Order By Company"
if .not. conn.open("{A5API=Access,FileName='C:\Program  Files\a5v8\MDBFiles\Alphasports.mdb', UserName='Admin'}")
    ui_msg_box("Error",  conn.CallResult.text)
    end
end if
if .not. args.Set("city", vCity)
    end
end if
if .not. conn.execute(sql, args)
    ui_msg_box("Error",  conn.CallResult.text)
    end
end if
sql_resultset_preview(conn.resultset)

See Also
SQL::Arguments Object
Limitations</original>
</page>