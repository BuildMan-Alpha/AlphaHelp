<page>
   <topic>SQL::Schema ListTablesWithTypes Function Function</topic>
   <syntax>C ListTablesWithTypes(P Filter)</syntax>
   <arguments>
     <argument>
         <name>Filter</name>
         <description>Pointer</description>
     </argument>
   </arguments>
   <description><![CDATA[Return a list of tables for the current database suffixed with (<type>).]]></description>
   <discussion>
      ...put discussion here....
   </discussion>
   <example><![CDATA[
...put example code here....
]]></example>
   <sections>
       <section>
            <description>put description here</description>
            <example><![CDATA[
      ...put example here....
]]></example>
       </section>
   </sections>
   <see>
      <ref>SQL::Connection Object</ref>
   </see>
   <original> SQL::Schema::ListTablesWithTypes()
Syntax
Table_List as C = .ListTablesWithTypes(  [ IncludeTables as L [, IncludeViews as L [, IncludeSystemTables as L  [, IncludeSynonyms as L [, IncludeAliases as L ]]]]] )
ArgumentDescription
Table_ListThe retrieved list of tables.
A SQL::Schema object.
IncludeTablesOptional. Default = .T. (TRUE) = Include tables
IncludeViewsOptional. Default = .T. (TRUE) = Include views
IncludeSystemTablesOptional. Default = .T. (TRUE) = Include system tables
IncludeSynonymsOptional. Default = .T. (TRUE) = Include synonyms
IncludeAliasesOptional. Default = .T. (TRUE) = Include aliases

Description
The ListTablesWithTypes() method returns a list of tables in the cache  for the current database suffixed with type. For example a table named  Categories is returned as Categories (Table) where a view called  Category Summary is returned as Category Summary (View).
Limitations
Examples
dim conn as SQL::Connection
dim sch as SQL::Schema
connString = "{A5API='Access', FileName='c:\program  files\a5v8\mdbfiles\alphasports.mdb'}"
if .not. conn.open(connString)
   ui_msg_box("Error",  conn.CallResult.text)
   end
end if
if .not. conn.GetSchema(sch) then
   ui_msg_box("Error",  conn.CallResult.text)
   conn.close()
   end
end if
ui_msg_box("Tables", sch.ListTablesWithTypes())
conn.close()

See Also
SQL::Connection Object</original>
</page>