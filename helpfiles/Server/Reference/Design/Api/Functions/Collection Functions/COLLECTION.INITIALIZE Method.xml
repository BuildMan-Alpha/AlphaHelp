<page>
   <topic>COLLECTION.INITIALIZE Function</topic>
   <syntax>V Initialize(C tagged_in,C tagged_key_out,C tagged_value_out,C string)</syntax>
   <arguments>
     <argument>
         <name>tagged_in</name>
         <description>Describes the structure of the data in the input Data_String.
</description>
     </argument>
     <argument>
         <name>tagged_key_out</name>
         <description>Describes how to extract the key value from the data in the input Data_String.
</description>
     </argument>
     <argument>
         <name>tagged_value_out</name>
         <description>Describes how to extract the data value from the data in the input Data_String.
</description>
     </argument>
     <argument>
         <name>string</name>
         <description>A CR-LF delimited string.
</description>
     </argument>
   </arguments>
   <description>Populate a collection from a string.</description>
   <discussion><![CDATA[
The <COLLECTION>.INITIALIZE() method populates a collection from a CR-LF delimited string. The Record_Format string describes the structure of the data in the input Data_String. The Key_Format string describes how to extract the key value from the data in the input Data_String. The Data_Format string describes how to extract the data value from the data in the input Data_String.
The syntax used by the Record_Format, Key_Format, and Data_Format strings is the same as the TAGGED_PATTERN() function. See the description of this function for details.
This method is extremely useful for quickly populating a collection from a string. Contrast this method with the <COLLECTION>.FROM_TABLE() method which populates a collection from a table.
  ]]> </discussion>
  
   <sections>
       <section>
            <description>Create a CR-LF delimited string.</description>
            <example><![CDATA[
String = <<%a%
1;Red
2;Green
3;Blue
4;Yellow
%a%
dim colors as u
colors.initialize("1;2","1","2",string)
? colors.get("3")
= "Blue"
]]></example>
       </section>
       
        <section>
            <description>In the above example, the number is the key and the color name is the data. Now, make the color the key and the number the data:</description>
            <example><![CDATA[
colors.initialize("1;2","2","1",string)
? colors.get("Red")
]]></example>
       </section>
       
   </sections>
   <see>
      <ref>Collection Methods</ref>
   </see>
   <original><![CDATA[ &ltCOLLECTION>.INITIALIZE()
Syntax
&ltCOLLECTION>.INITIALIZE( Record_Format as C, Key_Format as C, Data_Format as C, Data_String as C )
ArgumentDescription
Record_FormatDescribes the structure of the data in the input Data_String.
Key_FormatDescribes how to extract the key value from the data  in the input Data_String.
Data_FormatDescribes how to extract the data value from the data  in the input Data_String.
Data_StringA CR-LF delimited string.

Description
The &ltCOLLECTION>.INITIALIZE() method populates a collection from  a CR-LF delimited string. The Record_Format string describes the structure of the data in the input Data_String.  The Key_Format string describes how to extract  the key value from the data in the input Data_String.  The Data_Format string describes how to extract  the data value from the data in the input Data_String.
The syntax used by the Record_Format, Key_Format, and Data_Format strings is the same as the TAGGED_PATTERN()  function. See the description of this function for details.
This method is extremely useful for quickly populating a collection  from a string. Contrast this method with the <COLLECTION>.FROM_TABLE()  method which populates a collection from a table.
Example
Create a CR-LF delimited string.
String = &lt&lt%a%
1;Red
2;Green
3;Blue
4;Yellow
%a%
dim colors as u
colors.initialize("1;2","1","2",string)
? colors.get("3")
= "Blue"

In the above example, the number is the key and the color name is  the data. Now, make the color the key and the number the data:
colors.initialize("1;2","2","1",string)
? colors.get("Red")

See Also
Collection Methods]]></original>
</page>