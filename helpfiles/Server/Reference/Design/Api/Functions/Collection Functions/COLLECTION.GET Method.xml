<page>
   <topic>COLLECTION.GET Function</topic>
   <syntax>A Get(A key)</syntax>
   <arguments>
     <argument>
         <name>key</name>
         <description>Any type</description>
     </argument>
   </arguments>
   <description>Get element from collection.</description>
   <discussion>
      ...put discussion here....
   </discussion>
   <example><![CDATA[
...put example code here....
]]></example>
   <sections>
       <section>
            <description>put description here</description>
            <example><![CDATA[
      ...put example here....
]]></example>
       </section>
   </sections>
   <see>
      <ref>Collection Methods</ref>
   </see>
   <original><![CDATA[ &ltCOLLECTION>.GET()
Syntax
Data as A = &ltCOLLECTION>.GET(  Key as A ) [.  Child_Name as C ]
Data as A = &ltCOLLECTION>.GET(  Key as D )
Data as A = &ltCOLLECTION>.GET(  Key as N )
ArgumentDescription
KeyA value (of any type, but not a pointer) that uniquely identifies  an element in a collection.
Child_NameThe name of a child variable.

Description
The &ltCOLLECTION>.GET() method returns the Data associated with a specified Key.
Note : Trailing spaces  in key are considered.
Example
dim mycollection as u
mycollection.set("FJ", "Fred Jones")
mycollection.set("BB", "Bryan Boyd")
mycollection.set("KL", "Kim Lee")
mycollection.set("KB", "Karen Boyd")
mycollection.set("EL", "Erica Loyd")
? mycollection.get("BB")
= "Bryan Boyd"
' The key is not case sensitive
? mycollection.GET("bb")
= "Bryan Boyd"
? mycollection.get("b")
= &ltNo data returned>x = mycollection.get("somekeythatdoesnotexist")?typeof(x)="Z"

The "value" that you assign to a collection entry does not  have to be a scalar. It can be a dot variable with multiple children, as shown  in the following example.
dim a as P
dim b as P
dim u as U
a.name = "Fred"
a.city = "Boston"
a.company = "Alpha"
b.name = "Ed"
b.city = "Nashua"
b.company = "Beta"
u.set("Fred", a)
u.set("Ed", b)
? u.get("Ed").company
= "Beta"
? u.get("Fred").city
= "Boston"

See Also
Collection Methods]]></original>
</page>