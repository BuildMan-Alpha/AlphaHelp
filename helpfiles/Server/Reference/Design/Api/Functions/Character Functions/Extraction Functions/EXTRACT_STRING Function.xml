<page>
   <topic>EXTRACT_STRING Function</topic>
   <syntax>Sub_String as C = extract_string(C string ,C start_string ,C end_string [,N occurrence[,L include_tags [,L case_sensitive [,L regex_safe ]]]])</syntax>
   <arguments>
     <argument>
         <name>extract_string</name>
         <description>The string extracted from Search_in_String. Character</description>
     </argument>
      <argument>
         <name>string</name>
         <description>The string to examine for the find text.</description>
     </argument>
     <argument>
         <name>start_string</name>
         <description>The beginning characters of the find text.</description>
     </argument>
     <argument>
         <name>end_string</name>
         <description>The ending characters of the find text. Character</description>
     </argument>
     <argument>
         <name>occurrence</name>
         <description>Numeric. Optional. Default = 1. The nth occurrence to return. The occurrence parameter can be negative, in which case, Alpha Anywhere will return the nth occurrence from the end of the string.
</description>
     </argument>
     <argument>
         <name>include_tags</name>
         <description>Logical.Optional. Default = .F.; .T. = Include the Start_Find and Start_Find characters.
 .F. = Return only the text between the Start_Find and Start_Find characters.</description>
     </argument>
     <argument>
         <name>case_sensitive</name>
         <description>Logical.Optional. Default = .F. , .T. = Case sensitive. , .F. = Case insensitive.</description>
     </argument>
     <argument>
         <name>regex_safe</name>
         <description>Logical. Optional. Default = .F. The "unsafe" characters are ., |, *, ?, +, (, ), {, }, , , ^, $ and \. If your Start_Find and End_Find do not contain any of these characters, you should set Regex_Safe to true to maximize performance.
 .T. = Improves performance by declaring that the start and end tags are already regular expression safe and EXTRACT_STRING() does not need to escape special characters.
 .F. = Unsafe characters are replaced. This decreases performance on a large string. </description>
     </argument>
   </arguments>
   <description>Extracts the nth occurrences of a sub-string starting with 'start_string' and ending with 'end_string'.</description>
   <discussion>
The EXTRACT_STRING() function extracts a sub-string from a string. The sub-string is defined by a starting and ending block of text. The syntax for the function is:
   </discussion>
   <example><![CDATA[
? txt
= this is line one
this is line 2
this is line 3
st = ""
? extract_string(txt, st, en, 1)
= " this is script 1 "
? extract_string(txt, st, en, 3, .t.)
= ""
? extract_string(txt, st, en, -1)
= " this is script 3 "
]]></example>
  
   <see>
      <ref>Character Search Functions</ref>
      <ref>Character Counting Functions</ref>
      <ref>Character Replacement Functions</ref>
   </see>
<terms>string,extraction,logical,case,contains,counting,defaults,expressions,function,performance,replacement,search,text</terms>
</page>