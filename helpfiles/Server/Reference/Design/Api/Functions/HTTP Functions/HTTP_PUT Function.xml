<page>
   <topic>HTTP_PUT Function</topic>
   <syntax>Result as P = http_put(C url [,C body[,C cookie[,N port[,N timeout[,L show_before_send[,L validate_ssl_cert[,C SSLCipherList ]]]]]]])</syntax>
   <arguments>
     <argument>
         <name>Result</name>
         <description>A dot variable containing the server's response.</description>
         <list>
         	<item><name-title>Argument</name-title><description-title>Type and Description</description-title></item>
         	<item><name>.error_text</name><description>Type C. The error message, if any.</description></item>
         	<item><name>.error_code</name><description>Type N. The error number, if any.</description></item>
         	<item><name>.headers</name><description>Type C. Response headers.</description></item>
         	<item><name>.body</name><description>Type C. Response body.</description></item>
         
         </list>
     </argument>
     <argument>
         <name>url</name>
         <description>Character. The address of the server that will receive your data.</description>
     </argument>
     <argument>
         <name>body</name>
         <description>Character. The parameters you wish to send. The size of this field  is unlimited.</description>
     </argument>
     <argument>
         <name>cookie</name>
         <description>Character. Optional. Default = "". Cookie data.</description>
     </argument>
     <argument>
         <name>port</name>
         <description>Numeric. Optional. Default = 80. The port to use.</description>
     </argument>
     <argument>
         <name>timeout</name>
         <description>Numeric. Optional. Default = 8000 milliseconds. The number of  milliseconds to wait before timing out.
</description>
     </argument>
     <argument>
         <name>show_before_send</name>
         <description>Logical. Optional. Default = .F.. When .T., displays the request  before being sent. Useful for debugging.
</description>
     </argument>
     <argument>
         <name>validate_ssl_cert</name>
         <description>Logical. Optional. Default = .T.. If the specified URL starts  with "https://", this flag controls whether or not the certificate  offered by the server will be validated. If set to .T., the request  will always fail. If set to .F., the request may succeed, but the  server's identity is not guaranteed. 
</description>
     </argument>
     <argument>
         <name>SSLCipherList</name>
         <description>Character</description>
     </argument>
   </arguments>
   <description>Use the HTTP method PUT to retrieve the specified URL</description>
   <discussion>
The HTTP_PUT() function requests a URL using HTTP/1.1 PUT. The function returns a pointer with the parsed response  from the server.
Note : When the server  responds with a 302 code, HTTP_PUT() does not automatically use the new  URL. The developer needs to examine result.parsed_headers.status_code,  then if appropriate, try the URL provided in  result.parsed_headers.location.  Refer to HTTP_GET()for an example.
The parsed response will include several element, including the following.
   </discussion>
   
   <sections>
       <section>
            <list>
            <item><name-title>Argument</name-title><description-title>Example</description-title></item>
            <item><name>Result.parsed_headers.ContentType</name><description>"text/html"</description></item>
            <item><name>Result.parsed_headers.ContentLength</name><description>"12541"</description></item>
            <item><name>Result.parsed_headers.Date</name><description>"Wed, 30 Jun 2004 14:36:12 GMT"</description></item>
            <item><name>Result.parsed_headers.Server</name><description>"Microsoft-IIS/5.0"</description></item>
            </list>
        </section>
    </sections>
           
   <see>
      <ref>Internet Functions and Methods</ref>
   </see>
   
<terms>http,control,defaults,display,error,field,function,https,number,pointer,set,variable</terms>
   
</page>