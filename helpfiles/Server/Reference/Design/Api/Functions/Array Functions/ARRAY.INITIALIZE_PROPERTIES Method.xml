<page>
   <topic>ARRAY.INITIALIZE_PROPERTIES Function</topic>
   <syntax>V initialize_properties(C format,C data[,L append])</syntax>
   <arguments>
     <argument>
         <name>format</name>
         <description>Character</description>
     </argument>
     <argument>
         <name>data</name>
         <description>Character</description>
     </argument>
     <argument>
         <name>append</name>
         <description>Logical</description>
     </argument>
   </arguments>
   <description>Initialize property array subfields from a string of newline separated 'rows'.</description>
   <discussion>
      ...put discussion here....
   </discussion>
   <example><![CDATA[
...put example code here....
]]></example>
   <sections>
       <section>
            <description>put description here</description>
            <example><![CDATA[
      ...put example here....
]]></example>
       </section>
   </sections>
   <see>
      <ref>Array Functions and  Methods</ref>
   </see>
   <original><![CDATA[&ltARRAY>.INITIALIZE_PROPERTIES()
Syntax
&ltARRAY>.INITIALIZE_PROPERTIES( Format as C, Data as C )
ArgumentDescription
FormatDefines the structure of the Data string and also defines the names of the array properties. The names of the array properties are separated by a delimiter (a non alphanumeric character or string, such as "|", "@", or "~~"). A property name may be followed by an optional type designation in the format Property_Name:Type_Designation. The default type is character. The following type designations are possible.
FormatMeaning
CCharacter
NNumeric
DDate
LLogical
BBlob
FFunction
*Supplied with the data element
DataA CR-LF delimited string of data values.

Description
The &ltARRAY>.INITIALIZE_PROPERTIES() method loads field values from a data string into a property array. The Format string defines the structure of the data string and also defines the names of the array properties. Data is a CR-LF delimited string of data values. Each format element can be followed by an optional type.
For example, assume you supplied the following Format string:
"Name + Age:N + Occupation"

Alpha Anywhere would create an array with three properties: name, age and occupation. It would look in the Data string for values separated by the " + " separator. The Age property is Numeric.
For example, the following Data string could be used with the above Format string:
"Fred + 23 + Sales
Tom + 45 + Development
Joanne + 55 + President"

The optional type in the format string can also be '*' (in addition to 'C' 'N' 'D' 'L' 'B' and 'F' (for Function) ). If you use the '*' type, then it is assumed that the data that you are reading in is prefixed with the type (see example below). The array element is initialized with the type specified in the data that is being read in.
Example
The following script initializes a property array:
Data = &lt
Fred + 23 + Sales
Tom + 45 + Development
Joanne + 55 + President
%string%
dim name[3] as P
name.initialize_properties("Name + Age:N + Position",data)

This creates the following array:
ElementNameAgePosition
Name[1]Fred23Sales
Name[2]Tom45Development
Name[3]Joanne55President

The following example shows the use of the '*' parameter in the format string.
dim p3 as P
p[1].NAME = "name"
p[1].VALUE = "fred"
p[2].NAME = "age"
p[2].VALUE = 47
p[3].NAME = "dob"
p[3].VALUE = {12/18/52}
string = p.dump_properties("name::value:*")
? string
= "name::Cfred
age::N47
dob::D12/18/1952
"
dim s[3] as P
s.initialize_properties("name::value:*",string)
? s[1].VALUE -> "fred"
? s[2].VALUE -> 47.000000
? s[3].VALUE -> {12/18/1952}
? typeof(s[3].VALUE) -> "D"

See Also
Array Functions and  Methods]]></original>
</page>