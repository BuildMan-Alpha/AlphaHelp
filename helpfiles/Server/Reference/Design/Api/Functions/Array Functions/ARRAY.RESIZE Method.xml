<page>
   <topic>ARRAY.RESIZE Function</topic>
   <syntax>V resize(size as N[,dimension as n])</syntax>
   <arguments>
     <argument>
         <name>size</name>
         <description>Numeric</description>
     </argument>
     <argument>
         <name>dimension</name>
         <description>Numeric</description>
     </argument>
   </arguments>
   <description>Resize an array, keeping its components intact.</description>
   <discussion>
      ...put discussion here....
   </discussion>
   <example><![CDATA[
...put example code here....
]]></example>
   <sections>
       <section>
            <description>put description here</description>
            <example><![CDATA[
      ...put example here....
]]></example>
       </section>
   </sections>
   <see>
      <ref>Array Functions and  Methods</ref>
   </see>
   <original><![CDATA[&ltARRAY>.RESIZE()
Syntax
&ltARRAY>.RESIZE( New_Size as N [, Dimension as N ] )
ArgumentDescription
New_SizeThe new number of elements in the array.
DimensionOptional. Default = 1. The dimension of the array to resize.

Description
The &ltARRAY>.RESIZE() method increases the size of an array, without losing any of the existing data, as the REDIM command would.
Example
dim fruit[3,2] as C
fruit[1,1] = "Apple"
fruit[2,1] = "Banana"
fruit[3,1] = "Cherry"
fruit.resize(4,1)
? fruit
= [1,1] = "Apple"
[1,2] = ""
[2,1] = "Banana"
[2,2] = ""
[3,1] = "Cherry"
[3,2] = ""
[4,1] = ""
[4,2] = ""
fruit.resize(3,2)
? fruit
= [1,1] = "Apple"
[1,2] = ""
[1,3] = ""
[2,1] = "Banana"
[2,2] = ""
[2,3] = ""
[3,1] = "Cherry"
[3,2] = ""
[3,3] = ""
[4,1] = ""
[4,2] = ""
[4,3] = ""

See Also
Array Functions and  Methods]]></original>
</page>