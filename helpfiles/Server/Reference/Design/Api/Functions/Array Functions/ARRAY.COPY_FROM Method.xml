<page>
   <topic>ARRAY.COPY_FROM Function</topic>
   <syntax>V copy_from( array as p [,flags as c])</syntax>
   <arguments>
     <argument>
         <name>array</name>
         <description>Pointer</description>
     </argument>
     <argument>
         <name>flags</name>
         <description>Character</description>
     </argument>
   </arguments>
   <description>Copy in contents from another array - optional flags z-zero out contents t-truncate array end a-append.</description>
   <discussion>
      ...put discussion here....
   </discussion>
   <example><![CDATA[
...put example code here....
]]></example>
   <sections>
       <section>
            <description>put description here</description>
            <example><![CDATA[
      ...put example here....
]]></example>
       </section>
   </sections>
   <see>
      <ref>Array Functions and  Methods</ref>
   </see>
   <original><![CDATA[&ltARRAY>.COPY_FROM()
Syntax
&ltARRAY>.COPY_FROM( Source_Array as P [ Flags as C ] )
ArgumentDescription
Source_ArrayAn array of elements.
FlagsOptional and may be combined.
"T" = Truncate the array. Resize the target array so that it matches the size of the source array.
"Z" = Empty the contents of the target array before copying (i.e. equivalent to &ltarray>.clear()).

Description
The .COPY_FROM() method copies elements from a source array into a target array, overwriting existing elements and resizing the array as necessary.
Examples
delete target 
dim target[2] as C 
target.initialize(comma_to_crlf("a,b"))

 dim source[3] as C 
source.initialize(comma_to_crlf("1,2,3")) 

target.copy_from(source) 
? target.dump() 
= 1 
2 
3


Note that the target array is now the same as the source array.
delete target 
dim target[2] as c 
target.initialize(comma_to_crlf("a,b")) 
target.copy_from(source,"A") 
? target.dump() 
= a 
b 
1 
2 
3


Note that the target array now has 5 slots - its original 2 slots and the 3 that were appended from the source array.
delete target 
dim target[5] as c 
target.initialize(comma_to_crlf("a,b,c,d,e")) 
target.copy_from(source) 
? target.dump() 
= 1 
2 
3 
d 
e


Note that the first 3 entries in the target array are copied from the source array, but the target array still has 5 slots and slots 4 and 5 have not changed.
delete target 
dim target[5] as c 
target.initialize(comma_to_crlf("a,b,c,d,e")) 
target.copy_from(source,"t") 
?target.dump() 
= 1 
2 
3


Because the T option was used, the target array now only has 3 slots - the extra 2 slots at the end were truncated.
dim tp[3] as p 
tp.initialize_properties("prop1|prop2",comma_to_crlf("a|AA,b|BB,c|CC")) 

dim sp[1] as p 
sp[1].NewProp1 = "1" 

tp.copy_from(sp,"t") 
? p[1] 
= NewProp1 = "1" 
prop1 = "a" 
prop2 = "AA" 

? p.size() 
= 1


Note that the target array now has 3 properties for slot 1 (NewProp1, prop1 and prop2). I.e. It has combined the properties from the source and target arrays.
Also note that the target array only has 1 slot because the T flag was used and the source array only had one slot.
delete tp 
dim tp[3] as p 
tp.initialize_properties("prop1|prop2",comma_to_crlf("a|AA,b|BB,c|CC")) 
tp.copy_from(sp,"tz") 
? p[1] 
= NewProp1 = "1"


Note that the target array only has 1 property for slot 1 (because the z flag was used, and the source array only has one property for slot 1).
See Also
Array Functions and  Methods]]></original>
</page>