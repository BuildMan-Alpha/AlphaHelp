<page>
   <topic>ARRAY.INITIALIZE_FROM_TABLE Function</topic>
   <prototypes><prototype>V initialize_from_table(C tablename[,C filter[,C order[,L append[,C columns]]]])</prototype>
   <prototype>ARRAY.initialize_from_table( tablename as C [, filter as C [, order as C ]] )</prototype>
   <prototype>ARRAY.initialize_from_table( table_pointer as P [, filter as C [, order as C ]] )</prototype>
   <prototype>ARRAY.initialize_from_table( map_table_pointer as P [, filter as C [, order as C ]] )</prototype>
   
   </prototypes>
   
   <arguments>
     <argument>
         <name>tablename</name>
         <description>The fully qualified name of a table.</description>
     </argument>
     
      <argument>
         <name>table_pointer</name>
         <description>A pointer to an open table.</description>
     </argument>
     
      <argument>
         <name>map_table_pointer</name>
         <description>A pointer created with the TABLE.OPENMAP() method.</description>
     </argument>
     
     
     
     
     <argument>
         <name>filter</name>
         <description>Optional. Default = all records. A character filter expression that evaluates to a logical value. Selects records from the table.
</description>
     </argument>
     
     <argument>
         <name>order</name>
         <description>Optional. Default = record order. A character order expression that sorts selected records.
</description>
     </argument>
     
     <argument>
         <name>append</name>
         <description>Logical</description>
     </argument>
     
     <argument>
         <name>columns</name>
         <description>Optional. A crlf delimited list of fieldnames in the source table to use when populating the array.
</description>
     </argument>
     
   </arguments>
   
   <description>Initialize property array subfields from a table.</description>
  
  <discussion><![CDATA[The <ARRAY>.INITIALIZE_FROM_TABLE() method loads field values from a table into a property array. If an optional Filter and Order parameter are specified, only records that satisfy the Filter are loaded. The records are loaded in the order specified by Order.]]></discussion>
  
<sections>
<section>

<title>Example</title>
<description>Assume a table (Names.dbf) contains the following entries:
</description>
<list>

<item>
<name-title>Name</name-title>
<description-title>
City-----
Age------
Hobby</description-title>
</item>


<item>
<name>John</name>
<description>
Sudbury--
40--------
Skiing</description>
</item>

<item>
<name>Frank</name>
<description>
Boston----
24--------
Diving</description>
</item>

<item>
<name>Joanne</name>
<description>
Lincoln----
28--------
Karate</description>
</item>



</list>
</section>


<section>
<example><![CDATA[dim names[5] as P
Names.initialize_from_table("c:\program files\a5\data\name.dbf")]]></example>
</section>


<section>
<description>This initializes an array with a Name, City, Age and Hobby property. For example:</description>
<example><![CDATA[? Names[3].city ? "Lincoln"]]></example>
</section>


<section>
<description>The full array looks like this:</description>
<list>
<item>
<name-title>Element</name-title>
<description-title>
Name---------
 
City---------
 
Age----------
 
Hobby
 </description-title>
</item>

<item>
<name>Name[1]</name>
<description>
John---------
 
Sudbury------
 
40-----------
 
Skiing
 </description>
</item>

<item>
<name>Name[2]</name>
<description>
Frank--------
 
Boston-------
 
24-----------
 
Diving
 </description>
</item>

<item>
<name>Name[3]</name>
<description>
Joanne-------
 
Lincoln------
 
28-----------
 
Karate
 </description>
</item>
</list>
</section>



<section>
<description>To sort the array by city:</description>
<example><![CDATA[Name.sort("", "city")]]></example>
</section>




</sections>


  <sections>
  <section>
  <title>Filter and Order Expressions</title>
  <description>The following example shows how to use filter and order expressions.</description>
  <example><![CDATA[dim tbl as P
dim arr_count as N
dim indx as P
tbl = table.open("travel time")
query.filter = "office_time<>\"\" .and. start_time<>\"\" .and. date<>{}"
indx = tbl.query_create()
arr_count = indx.records_get()
indx.close()
tbl.close()
dim raw[arr_count] as P
raw.initialize_from_table("travel time", "office_time<>\"\" .and. start_time<>\"\" .and. date<>{}", "date")]]></example>
  </section>
  </sections>
  
  
  
  
  
  
  
  
  
  
  
   <see>
      <ref>Array Functions and  Methods</ref>
      <ref>TABLE.OPENMAP()</ref>
      
      
   </see>
   
   
   
  </page>