<page>
   <topic>ARRAY.SORT Function</topic>
   <syntax>V sort([C options[,C subkey[,N start[,N end]]]])</syntax>
   <arguments>
     <argument>
         <name>options</name>
         <description>Optional. Default = ascending. Specifies how to sort the values. The following Flag values are possible:
</description>
<list>
<item>
<name-title>Flag</name-title>
<description-title>Meaning</description-title>
</item>

<item>
<name>A</name>
<description>Ascending
</description>
</item>

<item>
<name>D
</name>
<description>Descending
</description>
</item>

<item>
<name>C
</name>
<description>Case sensitive sorting (if character data)
</description>
</item>

<item>
<name>B
</name>
<description>Sort blank character values after non-blank values. This option is useful when you are sorting character values in ascending order, in an array that has more entries allocated than are used. The blank entries will sort to the bottom of the array.
</description>
</item>

</list>


     </argument>
     <argument>
         <name>subkey</name>
         <description>An optional modifier that allows for sorting on sub-strings or on arrays of properties. In the expression, you can use the special system term "value" to refer to an array value.
</description>
     </argument>
     <argument>
         <name>start</name>
         <description>Optional. Default = 1. The first element to sort.</description>
     </argument>
     <argument>
         <name>end</name>
         <description>Optional. Default = Last element. The last element to sort.</description>
     </argument>
   </arguments>
   <description>Sort the array.</description>
<discussion><![CDATA[The <ARRAY>.SORT() method sorts a single dimensional array.
TIP : If you visualize the array as a table, you can think of "value" as the "field name". "Value" allows you to refer to array values, just as field names allow you to refer to record values.
For example to sort an array called "fullnames" on the second word of the array entry, use this expression:
]]></discussion>  
  <sections>
  
  <section>
  <example><![CDATA[
fullnames.sort("A", "word(value,2)")
]]></example>
  </section>
  
  <section>
  <description>To understand the above command, visualize the "fullnames" array as follows:</description>
<list>
<item>
<name-title>Element--</name-title>
<description-title>
Value-------
 
Word(value,2)
 </description-title>
</item>

<item>
<name>Fullnames[1]--</name>
<description>
John Smith------
 
Smith
 </description>
</item>

<item>
<name>Fullnames[2]--</name>
<description>
Ken Jones----
 
Jones
 </description>
</item>

<item>
<name>Fullnames[3]--</name>
<description>
Karen Able----
 
Able
 </description>
</item>

</list>
  
  
  </section>
  
  

  
  <section>
  <description>After sorting on " word(value,2) ", the array will look like this:</description>
<list>
<item>
<name-title>Element----
</name-title>
<description-title>
Value------
 
Word(value,2)
 </description-title>
</item>

<item>
<name>Fullnames[1]--
</name>
<description>
Karen Able-----
 
Able
 </description>
</item>

<item>
<name>Fullnames[2]--
</name>
<description>
Ken Jones------
 
Jones
 </description>
</item>

<item>
<name>Fullnames[3]--
</name>
<description>

John Smith-----
 
Smith
 
 </description>
</item>

</list>
  
  
  </section> 
  
  
  </sections>  
  
<sections><section>
<title>Sorting Property Arrays</title>


<description>For property arrays, the expression parameter refers to the property name. For example, the following will sort the array on the "mom" property:</description>
<example><![CDATA[dim ar[5] as P
ar[1].mom = "Irene"
ar[1].dad = "Abe"
ar[2].mom = "Arlene"
ar[2].dad = "Kyle"
ar.sort("A","mom")]]>
</example>

</section>


<section>
<description>To understand the above command, visualize the "ar" array as follows:</description>

<list>
<item>
<name-title>Element---</name-title>
<description-title>
Mom-----
 
Dad
 </description-title>
</item>

<item>
<name>ar[1]
</name>
<description>
Irene------
 
Abe
 </description>
</item>

<item>
<name>ar[2]
</name>
<description>
Arlene----
 
Kyle
 </description>
</item>




</list>


</section>

<section>
<description>After sorting on the "mom" property, the array will look like this:</description>

<list>
<item>
<name-title>Element</name-title>
<description-title>
Mom----
 
Dad
 </description-title>
</item>

<item>
<name>ar[1]</name>
<description>
Arlene----
 
Kyle
 </description>
</item>

<item>
<name>ar[2]</name>
<description>
Irene-----
 
Abe
 </description>
</item>




</list>


</section>
<section>
<description>If the optional start and end parameters are omitted, the whole array is sorted. If these parameters are supplied, only the array entries in the range start to end are sorted.</description>
</section>
</sections>
  
  
  
<sections>
<section>
<title>Sorting an Array with Multiple Properties</title>
<description>Assume you have an array with the following data and you want to sort by multiple properties. The second argument of the function is simply an expression based on property names.</description>
<example>
<![CDATA[
dim ar[5] as P
ar[1].name = "Aaron"
ar[2].name = "David"
ar[3].name = "Charles"
ar[4].name = "Aaron"
ar[5].name = "Betty"
ar[1].age = 20
ar[2].age = 10
ar[3].age = 13
ar[4].age = 50
ar[5].age = 10
ar.sort("A","name + age")
? ar[1].name
= "Aaron"
? ar[2].name
= "Aaron"
? ar[3].name
= "Betty"
ar.sort("A", "age + name")
? ar[1].name
= "Betty"
? ar[2].name
= "David"
? ar[3].name
= "Aaron"
]]></example>
</section>

</sections>
  
  
  
<sections><section>
<title>Sorting One Array Based on Values in another Array</title>
<description>The following example shows how you can sort the values in one array based on the sort order defined by the values in another parallel array.
You can follow the example by typing these commands in the Interactive window.
</description>
<example>
<![CDATA[
dim base_array[4] as C
dim parallel_array[4] as C
base_array[1] = "dog"
base_array[2] = "rat"
base_array[3] = "cat"
base_array[4] = "bat"
parallel_array[1] = "z"
parallel_array[2] = "a"
parallel_array[3] = "b"
parallel_array[4] = "d"
base_array.sort("", "parallel_array[value]")
? base_array
= [1] = "rat"
[2] = "cat"
[3] = "bat"
[4] = "dog"
'now sort in random order
base_array.SORT("","str(rand())")
]]></example>

</section>
</sections>
  
<sections>
<section>
<title>Example</title>
<description>Assume you have the following array:</description>
<example><![CDATA[
dim a[5] as C
a[1] = "orange"
a[2] = "banana"
a[3] = "apple"
a[4] = ""
a[5] = ""]]></example>


</section>
<section>
<description>The following table shows how different commands will sort the array.</description>
<list>

<item>
<name-title>Element
</name-title>
<description-title>
A.SORT()----
 
A.SORT("d")------
 
A.SORT("ab")
 </description-title>
</item>
<item>
<name>A[1]
</name>
<description>
------------------
Orange------------
 
Apple
 </description>
</item>

<item>
<name>A[2]
</name>
<description>
------------------

Banana------------
 
Banana
 </description>
</item>

<item>
<name>A[3]
</name>
<description>
Apple-------------
 
Apple-------------
 
Orange
 </description>
</item>

<item>
<name>A[4]
</name>
<description>
 
Banana
----------------
----------------</description>
</item>

<item>
<name>A[5]
</name>
<description>
Orange---------
----------------
-------
</description>
</item>

</list>

</section>



</sections>
   <see>
      <ref>Array Functions and  Methods</ref>
   </see>
<terms>array,sorting,arguments,field,case,expressions,function</terms>
</page>