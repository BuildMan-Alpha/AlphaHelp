<page>
   <topic>ARRAY.SORT Function</topic>
   <syntax>V sort([C options[,C subkey[,N start[,N end]]]])</syntax>
   <arguments>
     <argument>
         <name>options</name>
         <description>Character</description>
     </argument>
     <argument>
         <name>subkey</name>
         <description>Character</description>
     </argument>
     <argument>
         <name>start</name>
         <description>Numeric</description>
     </argument>
     <argument>
         <name>end</name>
         <description>Numeric</description>
     </argument>
   </arguments>
   <description>Sort the array.</description>
   <discussion>
      ...put discussion here....
   </discussion>
   <example><![CDATA[
...put example code here....
]]></example>
   <sections>
       <section>
            <description>put description here</description>
            <example><![CDATA[
      ...put example here....
]]></example>
       </section>
   </sections>
   <see>
      <ref>Array Functions and  Methods</ref>
   </see>
   <original><![CDATA[&ltARRAY>.SORT()
Syntax
&ltARRAY>.SORT( [ Flags as C [, Expression as C [, Start as N [, End as N ]]]] )
ArgumentDescription
FlagsOptional. Default = ascending. Specifies how to sort the values. The following Flag values are possible:
FlagMeaning
AAscending
DDescending
CCase sensitive sorting (if character data)
BSort blank character values after non-blank values. This option is useful when you are sorting character values in ascending order, in an array that has more entries allocated than are used. The blank entries will sort to the bottom of the array.
ExpressionAn optional modifier that allows for sorting on sub-strings or on arrays of properties. In the expression, you can use the special system term "value" to refer to an array value.
StartOptional. Default = 1. The first element to sort.
EndOptional. Default = Last element. The last element to sort.

Description
The &ltARRAY>.SORT() method sorts a single dimensional array.
TIP : If you visualize the array as a table, you can think of "value" as the "field name". "Value" allows you to refer to array values, just as field names allow you to refer to record values.
For example to sort an array called "fullnames" on the second word of the array entry, use this expression:
fullnames.sort("A", "word(value,2)")

To understand the above command, visualize the "fullnames" array as follows:
ElementValueWord(value,2)
Fullnames[1]John SmithSmith
Fullnames[2]Ken JonesJones
Fullnames[3]Karen AbleAble

After sorting on " word(value,2) ", the array will look like this:
ElementValueWord(value,2)
Fullnames[1]Karen AbleAble
Fullnames[2]Ken JonesJones
Fullnames[3]John SmithSmith

Sorting Property Arrays
For property arrays, the expression parameter refers to the property name. For example, the following will sort the array on the "mom" property:
dim ar[5] as P
ar[1].mom = "Irene"
ar[1].dad = "Abe"
ar[2].mom = "Arlene"
ar[2].dad = "Kyle"
ar.sort("A","mom")

To understand the above command, visualize the "ar" array as follows:
ElementMomDad
ar[1]IreneAbe
ar[2]ArleneKyle

After sorting on the "mom" property, the array will look like this:
ElementMomDad
ar[1]ArleneKyle
ar[2]IreneAbe

If the optional start and end parameters are omitted, the whole array is sorted. If these parameters are supplied, only the array entries in the range start to end are sorted.
Sorting an Array with Multiple Properties
Assume you have an array with the following data and you want to sort by multiple properties. The second argument of the function is simply an expression based on property names.
dim ar[5] as P
ar[1].name = "Aaron"
ar[2].name = "David"
ar[3].name = "Charles"
ar[4].name = "Aaron"
ar[5].name = "Betty"
ar[1].age = 20
ar[2].age = 10
ar[3].age = 13
ar[4].age = 50
ar[5].age = 10
ar.sort("A","name + age")
? ar[1].name
= "Aaron"
? ar[2].name
= "Aaron"
? ar[3].name
= "Betty"
ar.sort("A", "age + name")
? ar[1].name
= "Betty"
? ar[2].name
= "David"
? ar[3].name
= "Aaron"

Sorting One Array Based on Values in another Array
The following example shows how you can sort the values in one array based on the sort order defined by the values in another parallel array.
You can follow the example by typing these commands in the Interactive window.
dim base_array[4] as C
dim parallel_array[4] as C
base_array[1] = "dog"
base_array[2] = "rat"
base_array[3] = "cat"
base_array[4] = "bat"
parallel_array[1] = "z"
parallel_array[2] = "a"
parallel_array[3] = "b"
parallel_array[4] = "d"
base_array.sort("", "parallel_array[value]")
? base_array
= [1] = "rat"
[2] = "cat"
[3] = "bat"
[4] = "dog"
'now sort in random order
base_array.SORT("","str(rand())")

Example
Assume you have the following array:
dim a[5] as C
a[1] = "orange"
a[2] = "banana"
a[3] = "apple"
a[4] = ""
a[5] = ""

The following table shows how different commands will sort the array.
ElementA.SORT()A.SORT("d")A.SORT("ab")
A[1] OrangeApple
A[2] BananaBanana
A[3]AppleAppleOrange
A[4]Banana  
A[5]Orange  

See Also
Array Functions and  Methods]]></original>
</page>