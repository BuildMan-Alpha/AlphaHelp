<page>
   <topic>SQL_TableExport Function</topic>
   <syntax>Result_Flag as L = SQL_TableExport(P sqlconn ,L createTable ,* sourcedbf_or_pointer ,C owner ,C table , ResultMessage [,C filter [,C order [,C queryflags [,C ExportFieldList [,* arguments [,C CreateStatement [,L ShowProgress [,L AllowCancel [,C StatusBarFormatString [,C argumentDefinitions [,C autonumberField [,C identityFields [,* opsPassedIn ]]]]]]]]]]]]])</syntax>
   <arguments>
     <argument>
         <name>Result_Flag</name>
         <description>TRUE (.T.) if the operation was successful; otherwise  FALSE (.F.).
     </description>
     </argument>
     <argument>
         <name>sqlconn</name>
         <description>A SQL::Connection object.</description>
     </argument>
     <argument>
         <name>createTable</name>
         <description>Logical. .T. = Create a new table.</description>
     </argument>
     <argument>
         <name>sourcedbf_or_pointer</name>
         <description>The path to and name of the Alpha Anywhere table to export.</description>
     </argument>
     <argument>
         <name>owner</name>
         <description>The owner of the back-end database.</description>
     </argument>
     <argument>
         <name>table</name>
         <description>The name of the table to create in the back-end database.</description>
     </argument>
     <argument>
         <name>ResultMessage</name>
         <description>A character variable that will receive any error message.</description>
     </argument>
     <argument>
         <name>filter</name>
         <description>Default = "" (all records). A logical expression  that selects the records to export.</description>
     </argument>
     <argument>
         <name>order</name>
         <description>Default = "" (record number order). A character  expression that orders the exported records.</description>
     </argument>
     <argument>
         <name>queryflags</name>
         <description>Default = "". Refer to Query  Options.</description>
     </argument>
     <argument>
         <name>ExportFieldList</name>
         <description>Default = "". Either a simple list of CR-LF  or comma delimited fields or a list of fields AND expressions. If the  ExportFieldList contains expressions, then  it must be CR-LF delimited.
</description>
     </argument>
     <argument>
         <name>arguments</name>
         <description>Default = NULL_VALUE(). Values used in the filter or  order expressions. These values may come from variables or from user input  at run time.
</description>
     </argument>
     <argument>
         <name>CreateStatement</name>
         <description>Default = "". A SQL CREATE TABLE statement.</description>
     </argument>
     <argument>
         <name>ShowProgress</name>
         <description>Logical. Default = .T.  Indicates  whether to display a progress  bar.</description>
     </argument>
     <argument>
         <name>AllowCancel</name>
         <description>Logical. Default = .T.  Indicates  whether the progress bar contains a cancel  button.</description>
     </argument>
     <argument>
         <name>StatusBarFormatString</name>
         
         <description>Default = "". The formatting string that defines  the appearance of the progress bar.
</description>
     </argument>
     <argument>
         <name>argumentDefinitions</name>
         <description>Character</description>
     </argument>
     <argument>
         <name>autonumberField</name>
         <description>Character</description>
     </argument>
     <argument>
         <name>identityFields</name>
         <description>Character</description>
     </argument>
     <argument>
         <name>opsPassedIn</name>
         <description>*</description>
     </argument>
   </arguments>
   <description> Export a local table to a backend SQL database.</description>
   <discussion><![CDATA[
The SQL_TableExport() function exports an Alpha Anywhere table to a back-end  database.
Limitations: Desktop applications only.]]>
   </discussion>
   <example><![CDATA[
dim fieldlist as C
dim tblPointer as P
dim cn as sql::connection
dim message as C

fieldlist = <<%txt%
fullname = ut(firstname) + ", " + ut(lastname)
lastname
firstname = upper(firstname)
date = date()
number = 123*23
%txt%

tblPointer = table.OpenMap("customer",fieldlist)
flag = cn.open("{A5API=Excel,FileName='c:\customer_alphadao.xls'}")
if flag = .f. then
    ui_msg_box("Error",cn.CallResult.text)
    end 
end if 
 
flag = sql_tableexport(cn,.f.,tblPointer,"","Customer",message)

]]></example>
  
   <see>
      <ref>SQL_TableExportDialog()</ref>
   </see>
 
</page>