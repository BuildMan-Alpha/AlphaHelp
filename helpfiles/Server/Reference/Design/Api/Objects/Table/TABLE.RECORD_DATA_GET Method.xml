<page>
   <topic>table.RECORD_DATA_GET Function</topic>
   <syntax>B Record_Data_Get([N record_number])</syntax>
   <arguments>
     <argument>
         <name>record_number</name>
         <description>Numeric</description>
     </argument>
   </arguments>
   <description>Return the all the data from the current records field as a blob.</description>
   <discussion>
      ...put discussion here....
   </discussion>
   <example><![CDATA[
...put example code here....
]]></example>
   <sections>
       <section>
            <description>put description here</description>
            <example><![CDATA[
      ...put example here....
]]></example>
       </section>
   </sections>
   <see>
      <ref>Table Functions and  Methods</ref>
      <ref>Blob Functions  and Methods</ref>
   </see>
   <original><![CDATA[&ltTBL>.RECORD_DATA_GET()
Syntax
Record_Data as B = &ltTBL>.RECORD_DATA_GET( [ Record_Number as N ] )
ArgumentDescription
Record_NumberOptional. Default = Current record. The number of a record.

Description
The &ltTBL>.RECORD_DATA_GET() method copies all the field values from Record_Number (or the current record if Record_Number is not specified) to a blob variable.
Note : You can use PROPERTY_TO_STRING() and PROPERTY_FROM_STRING() to move data between tables with different structures.
Example
This script copies the current record to a blob variable. It then opens a table with an identical structure and pastes in a new record. The script is attached to a button on a form.
dim record_data as B
dim tbl as P
tbl = table.current()
record_data = tbl.record_data_get()
target = table.open("clone")
target.enter_begin()
target.record_data_set(record_data)
target.enter_end(.T.)
target.close()

See Also
Table Functions and  Methods, Blob Functions  and Methods]]></original>
</page>