<page>
	<topic>Xbasic methods for the HTML and HTMLHOST Xdialog Commands</topic>
<description>This article describes the new Xbasic methods that can be used on the HTML that is rendered by either the {html} or new {htmlhost} commands.

</description>	
<sections>
<section>
	
	<note>In order to use these methods, you have to use a slightly different syntax.
</note>
</section>	
	<section>
		<description>This is how we documented that you use the {html} command

</description>
	<example><![CDATA[dim htmlTextVariable as c
 htmlTextVariable = <<%html%
 <b>Hello World</b>
 %html%
 ui_dlg_box("HTML",<<%dlg%
 {html=100,20htmlTextVariable};
 %dlg%)]]></example>	
		
	</section>
	<section>
		<description>However, if you want to use methods, you must use this syntax (differences highlighted in red):
</description>
	<example><![CDATA[dim htmlTextVariable as c
 htmlTextVariable = <<%html%
 <b>Hello World</b>
 %html%
dim pHTML as p
 dim pHTML.object as p
 dim pHTML.text as c = htmlTextVariable
ui_dlg_box("HTML",<<%dlg%
 {html=100,20pHhtml};
 %dlg%)]]></example>	
		
	</section>
<section>
	<cases>
		<case>
			<title><![CDATA[<HTMLObject>.NavigateFirst as l() ]]></title>
			<description>Navigate to first element (return true if succeeded).</description>
		</case>
		<case>
			<title><![CDATA[<HTMLObject>.NavigateLast as l() ]]></title>
			<description> Navigate to last element (return true if succeeded). </description>
		</case>
		<case>
			<title><![CDATA[<HTMLObject>.NavigateNext as l()  ]]></title>
			<description>Navigate to the next element in the html (return true if succeeded).</description>
		</case>
		<case>
			<title><![CDATA[<HTMLObject>.NavigatePrev as l()  ]]></title>
			<description>Navigate to the previous element in the html (return true if succeeded).</description>
		</case>
		<case>
			<title><![CDATA[<HTMLObject>.GetElemRect as c(id as c)  ]]></title>
			<description> Returns rectangle for id. </description>
		</case>
		<case>
			<title><![CDATA[<HTMLObject>.GetAttribute as c(id as c,attrib as c)  ]]></title>
			<description>Get an attribute value from a element.</description>
		</case>
		<case>
			<title><![CDATA[<HTMLObject>.SetAttribute as v(id as c,attrib as c,value as c)  ]]></title>
			<description>Set an attribute value for a element.</description>
		</case>
		<case>
			<title><![CDATA[<HTMLObject>.GetValue as c(id as c)  ]]></title>
			<description>Returns value from a control.</description>
		</case>
		<case>
			<title><![CDATA[<HTMLObject>.SetValue as v(id as c,value as c)  ]]></title>
			<description>Sets value to a control.</description>
		</case>
		<case>
			<title><![CDATA[<HTMLObject>.SetInnerHtml as v(id as c,html as c)  ]]></title>
			<description>Sets inner HTML for control.</description>
		</case>
		<case>
			<title><![CDATA[<HTMLObject>.SetOuterHtml as v(id as c,html as c)  ]]></title>
			<description>Sets outer HTML for control.</description>
		</case>
		<case>
			<title><![CDATA[<HTMLObject>.GetInnerHtml as c(id as c)  ]]></title>
			<description> Sets inner HTML for control. </description>
		</case>
		<case>
			<title><![CDATA[<HTMLObject>.GetOuterHtml as c(id as c)  ]]></title>
			<description> Sets outer HTML for control. </description>
		</case>
		<case>
			<title><![CDATA[<HTMLObject>.GetFocus as c() ]]></title>
			<description> Return the id of the element that has focus. </description>
		</case>
		<case>
			<title><![CDATA[<HTMLObject>.SetFocus as l(id as c)  ]]></title>
			<description> Sets focus to object of given id. </description>
		</case>
		<case>
			<title><![CDATA[<HTMLObject>.GetChecked as l(id as c)  ]]></title>
			<description> Get the elements checked state. </description>
		</case>
		<case>
			<title><![CDATA[<HTMLObject>.SetChecked as v(id as c,checked as l)  ]]></title>
			<description> Set the element as checked. </description>
		</case>
		<case>
			<title><![CDATA[<HTMLObject>.MakeVisible as l(id as c)  ]]></title>
			<description> Make control with id visible. </description>
		</case>
		<case>
			<title><![CDATA[<HTMLObject>.Invalidate as v(id as c)  ]]></title>
			<description> Repaint a control. </description>
		</case>
		<case>
			<title><![CDATA[<HTMLObject>.GetIdFromPoint as c(x as n,y as n) ]]></title>
			<description> Gets first object with an Id, returns the id. </description>
		</case>
		<case>
			<title><![CDATA[<HTMLObject>.EditCopy as v()  ]]></title>
			<description> Copy to the clipboard. </description>
		</case>
		<case>
			<title><![CDATA[<HTMLObject>.EditPaste as v()  ]]></title>
			<description> Paste from the clipboard. </description>
		</case>
		<case>
			<title><![CDATA[<HTMLObject>.EditDelete as v()  ]]></title>
			<description> Delete the text. </description>
		</case>
		<case>
			<title><![CDATA[<HTMLObject>.EditSelect as v(start_char as n = 0,end_char as n = -1) ]]></title>
			<description>  Select text in the current editor. </description>
		</case>
		<case>
			<title><![CDATA[<HTMLObject>.EditSupportsMultiLine as l()  ]]></title>
			<description><![CDATA[ Does editor support multi-line (i.e. send returns & paging to control).]]> </description>
		</case>
		<case>
			<title><![CDATA[<HTMLObject>.GetRememberedAttributes as c()  ]]></title>
			<description><![CDATA[ Returns cl-lf delimited list of remembered attributes & their values. ]]></description>
		</case>
		<case>
			<title><![CDATA[<HTMLObject>.SetRememberedAttributes as v(rememberList as c)  ]]></title>
			<description>Pass in an previously saved list of attributes that we want to restore. </description>
		</case>
		
		
		
		
	</cases>
	
	
	
</section>	
	
</sections>	
<see>
	<ref href="/documentation/index?search={HTML}">HTML Xdialog Command</ref>
	<ref href="/documentation/index?search=HtmlHost Xdialog command">HtmlHost Xdialog command</ref>
</see>
	
</page>