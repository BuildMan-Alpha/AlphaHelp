<page>
	<shortlink>dt xb Using AlphaDAO with Xbasic</shortlink>
	<topic>Using AlphaDAO with Xbasic</topic>
	<description>Includes: What is AlphaDAO?, terminology, the AlphaDAO object, and creating an object, 
	</description>
<sections>
	
<section>
	
	<title>What is AlphaDAO?</title>
<description>AlphaDAO provides Xbasic program access to SQL databases such as  Microsoft SQL Server, Oracle, MySQL, and Microsoft Access. This functionality extends the familiar Alpha Anywhere database features that also supported .DBF files.</description>	
	<note>While not a part of AlphaDAO, it is important to note that you may also read SQL database data by creating passive-link tables. You may then browse these tables and make updates, open a form or report, and perform Xbasic commands.</note>
</section>	

<section>
	<title>Terminology</title>
<description>This document refers to SQL databases and tables as "back-end" databases and tables, and to Alpha Anywhere tables as local tables.</description>	
	
</section>	


<section>
	<title>Goal of this Document</title>
<description>This document provides a few short examples showing how you can use AlphaDAO in your Xbasic scripts. In the examples that follow we will often show more than one way to achieve the desired goal.</description>	
	
</section>	


<section>
	<title>Following the Examples</title>
<description>All of the examples in this document can be followed from Alpha Anywhere's Interactive window, or by creating Xbasic scripts. The examples all use the Alphasports.MDB Microsoft Access database. This database ships with Alpha Five V8 and is located in the c:\Program Files\A5V8\MDBFiles folder. If you want to work with data in a different database, the concepts learned from the example here will still apply to your database. In this document, the code that you should type in the Interactive window, or into your scripts, is shown in blue like this:</description>	
	<example><![CDATA[conn.close()]]></example>
</section>	


<section>
	<title>The AlphaDAO Objects</title>
<description>AlphaDAO comprises many objects. You will use their properties and methods when you do your programming. Some of these objects are reserved for use by Alpha Software's development engineers. At least 90 percent of the time, you will find that you need only use 4 objects to build your applications. This tutorial will examine these objects:
</description>	
	<cases>
		<case>
			<description>SQL::Connection</description>
		</case>
		<case>
			<description>SQL::Arguments</description>
		</case>
		<case>
			<description>SQL::ResultSet</description>
		</case>
		<case>
			<description>SQL::CallResult</description>
		</case>
		
	</cases>
</section>	


<section>
	
<description>Advanced developers will occasionally use the following objects and enumerations.</description>	
	<cases>
		<case>
			<description>SQL::DataTypeInfo</description>
		</case>
		<case>
			<description>SQL::IndexColumnInfo</description>
		</case>
		<case>
			<description>SQL::IndexInfo</description>
		</case>
		<case>
			<description>SQL::IntermediateType Enumerated Type</description>
		</case>
		<case>
			<description>SQL::Schema</description>
		</case>
		<case>
			<description>SQL::TableInfo</description>
		</case>
		
		
	</cases>
</section>	


<section>
	<title>Creating an Object</title>
<description>You can create an object by using the DIM statement. Afterwards, you will have to set one or more properties of the object, depending on its type and the context.</description>	
	<example><![CDATA[dim ti as SQL::TableInfo
dim ii as SQL::IndexInfo
dim ic as SQL::IndexColumnInfo
ti.Name = "MyTable"
ii.Name = "Primary_Key"
ii.PrimaryKey = .t.
ic.Name = "MyColumnName"]]></example>
</section>	
	
	
	<section>

<description>Frequently you will find a "child" object to be a property of a "parent" object. In these cases the "parent" object has already "DIMmed" it for you.</description>	
	
</section>	
	
	
	
</sections>	
<see>
	<ref link="Working with SQL Databases">Working with SQL Databases</ref>
	<ref link="SQL::connection object">SQL::Connection Object</ref>
	<ref link="SQL::resultset object">SQL::ResultSet Object</ref>
	<ref link="SQL::callresult object">SQL::CallResult Object</ref>
	<ref link="SQL::Arguments class">SQL::Arguments Object</ref>
</see>	
	
</page>