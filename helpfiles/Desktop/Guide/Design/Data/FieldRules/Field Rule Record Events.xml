<page>
	<topic>Field Rule Record Events</topic>
	<description>When defining field rules for a table, there are two types of field rule events to which a script can be attached: Field events and Record events.</description>
	
<sections>
<section>
	<note>To edit record events in the Code Editor, select the table name in the "Container" combo box. Record events are triggered when records are entered, changed, deleted, marked, or unmarked. Record changes made through a web component do not trigger record events.</note>
</section>	
<section>
	<cases>
		<case>
			<title>CanChangeRecord
</title>
			<description>Before entering Change mode.
</description>
		</case>
		<case>
			<title>changeRecord>onchangeRecord
</title>
			<description>After entering Change mode.
</description>
		</case>
		<case>
			<title>CanDeleteRecord
</title>
			<description>Before deleting a record.
</description>
		</case>
		<case>
			<title>OnDeleteRecord
</title>
			<description>
 
After deleting a record.
 </description>
		</case>
		<case>
			<title>CanEnterRecord
</title>
			<description>
 
Before moving to the new record.
 </description>
		</case>
		<case>
			<title>OnEnterRecord
</title>
			<description>
 
After moving to the new record
 </description>
		</case>
		<case>
			<title>CanMarkRecord
</title>
			<description>
 
Before marking a record.
 </description>
		</case>
		<case>
			<title>OnMarkRecord
</title>
			<description>
 
After marking a record.
 </description>
		</case>
		<case>
			<title>CanSaveRecord
</title>
			<description>
 
Before saving a record.
 </description>
		</case>
		<case>
			<title>OnSaveRecord
</title>
			<description>After saving a record.
</description>
		</case>
		<case>
			<title>CanUnmarkRecord
</title>
			<description>Before unmarking a record.
</description>
		</case>
		<case>
			<title>OnUnmarkRecord
</title>
			<description>After unmarking a record.
</description>
		</case>
		
		
	</cases>
	
	
</section>	
<section>
	<description>To make a record read-only in certain conditions, add code to the CanChangeRecord event that executes the CANCEL() function if those conditions are true.</description>
</section>


<section>
	<title>The A_DELETING_RECORD Variable - Useful in Change and Save Events</title>
	<description>To Alpha Anywhere, changing the value in a field, and deleting a record, are both changes to the current record, and both actions trigger the Change and Save record events. This makes it impossible to distinguish between an effort by the user to change a record, or delete the current record. The reason for this is that a record is "deleted" by changing the value in a special "hidden" field in the record.

The A_DELETING_RECORD variable allows you to distinguish between deleting and changing a value in a field. A_DELETING_RECORD is set to .T. during a record delete, and to .F. when the record is being edited.
With this variable, you can write scripts that do something when the user makes a change to a field value, but not when they delete the record.
For example, the following onchange event script shows how you would use the variable:</description>
	<example><![CDATA[if .not. A_DELETING_RECORD then
'....perform actions normally associated with a record change
end if]]></example>
</section>

<section>
	<title>How to Tell if a Record is Being Deleted</title>
	<description>If you would like a script to run if a record is being deleted, or if you would like to prevent a record deletion, put this code in the CanDeleteRecord event of your form.</description>
	<example><![CDATA[if (A_DELETING_RECORD = .T.) then
' ... put your code here
' or if you want to cancel the delete, call CANCEL()
end if]]></example>
</section>




</sections>	
<see>
	<ref link="CANCEL Function">CANCEL()</ref>
	<ref link="Field Rule Field Events">Field Rule Field Events</ref>
</see>	
</page>