<page>
	<topic>Creating a Tree Control Based on a Set</topic>
		<description>This example shows how to create a tree control that shows the contents of a set. The set has four levels, as Described in this picture. 
</description>
<sections>
	<section>
		<figure><link>images/Tree_Control_Example_3.gif</link></figure>
	</section>
<section>
	<title>Procedure</title>
	<description>A tree control on a form displays a CR-LF delimited list of entries. The entries have a form similar to the following.
</description>
	<example><![CDATA[AZ.Phoenix
AZ.Tucson
CA.Los Angeles
CA.Rancho Palos Verdes
CT.Riverside
DC.Washington
HI.Koloa
KY.Louisville
MA.Arlington
MA.Belmont
MA.Berlin
MA.Boston
]]></example>
</section>	

<section>
	<description>When you examine the list, you can see that it is equivalent to two columns of data, state and city, separated by a period ".". The list may have repeating values. Alpha Anywhere automatically discards repeating values when it displays the data.
</description>
	<example><![CDATA[MA.Arlington.smith.john
MA.Boston.jones.fred
MA.Boston.jones.sally
MA.Boston.williams.peter
MA.Boston.williams.janice
 ]]></example>
</section>	

<section>
	<description>The list may have more than 2 columns. The following is sample data that would display four levels of branches.
</description>
	<example><![CDATA[MA.Arlington.smith.john
MA.Boston.jones.fred
MA.Boston.jones.sally
MA.Boston.williams.peter
MA.Boston.williams.janice
 ]]></example>
</section>	

<section>
	<description>By default the tree control that you use on a form uses the period character as a delimiter.
</description>
	
</section>	
<section>
	<title>How to Produce a List of Data
</title>
	<description>One of the easiest ways to produce a list of appropriately formatted data is to use the TABLE.EXTERNAL_RECORD_CONTENT_GET() and SET.EXTERNAL_RECORD_CONTENT_GET() functions. Both functions rely on a content expression argument that is essentially the following (showing only 3 fields).</description>
	<example><![CDATA[alltrim(field1) + "." + alltrim(field2) + "." + alltrim(field3)
]]></example>
</section>	

<section>
	<description>When properly formatted, the expression looks like this.
</description>
	<example><![CDATA["alltrim(TableName->field1) + \".\" + alltrim(TableName->field2) + \".\" + alltrim(TableName->field3)"
]]></example>
</section>	

<section>
	<title>An Example</title>
	<steps>
		<step>
			<description>Draw a tree control on the form.
</description>
		</step>
		
		<step>
			<description>Right click the tree control and select Properties....
</description>
		</step>
		<step>
			<description>Display the Choices tab.
</description>
		</step>
		
		
		<step>
			<description>Select "Computed Automatically" in Choices for control are.
</description>
		</step>
		
		<step>
			<description>From the Source list select "Expression (that returns a CR-LF delimited list)".
</description>
		</step>
		<step>
			<description>In From Table select the name of the set.
</description>
		</step>
		
		<step>
			<description>In the Field/expression values to display list select "" to display the Expression Builder.
</description>
		</step>
		
		<step>
			<description>Enter the following expression and click OK. Note how the fields from the four different tables are separated by periods ".", which happens to be the separator between "branches" of the tree. Because the second argument of SET.EXTERNAL_RECORD_CONTENT_GET() is a string, the quotes around the periods need to be escaped with the backslash character "\".
</description>
<example><![CDATA[set.external_record_content_get("levels", "alltrim(level_one->Level1) + \".\" + alltrim(level_two->level2) + \".\" + alltrim(level_three->level3) + \".\" + alltrim(level_four->level4)")]]></example>
		</step>
		<step>
			<description>Save your changes. You should be able to produce something that looks like this. This example started with the default browse for the set, which explains why the embedded browses appear. 
</description>
<figure><link>images/Tree_Control_Example_2.gif</link></figure>
		</step>
		
		
		
	</steps>
	
</section>




</sections>	
	<see>
		<ref href="/documentation/index?search=Grid Field Properties">Field Properties</ref>
	</see>
</page>