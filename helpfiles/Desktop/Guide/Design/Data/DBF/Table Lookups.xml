<page>
	<shortlink>dt Table Lookups</shortlink>
	<topic>Table Lookups</topic>
	<description>It is quite common in database application design to present the user with a list of choices. Occasionally, a list is static and hard coded, but often the list is table driven. Sometimes, a list needs to change dynamically, depending on the value of another form object, selection text, or variable. Often the developer will make the list selections more user friendly by presenting an "alias" for an encoded field. This topic explores how to develop these types of lists in Alpha Anywhere.  
</description>
<sections>
<section>
	<cases>
		<case>
			<description>Field Rules Table Lookups
</description>
		</case>
		<case>
			<description>Object Properties Table Lookups
</description>
		</case>
		<case>
			<description>Dynamic List Table Lookups
</description>
		</case>
		<case>
			<description>Xbasic Example
</description>
		</case>
		<case>
			<description>Xdialog Example
</description>
		</case>
		<case>
			<description>Action Script Example
</description>
		</case>
		<case>
			<description>Using a Lookup to Set the Current Record
</description>
		</case>
		<case>
			<description>Ordering Lookup Entries
</description>
		</case>
		
	</cases>
	<figure><link>images/UG_Table_Lookups_form.gif</link></figure>
</section>	
<section>
	<description>The form displayed above is based on the Table_Lookup, Vendor, and Product tables. The Table_Lookup table stores references to data in the Vendor and Product tables. Since these references are numbers, it displays associated name fields from the Vendor and Product tables to make the form more readable and usable. 
</description>
	<note>The sample database illustrated here can be found at Table_Lookups.zip.</note>
	
</section>
	
<section>
	<figure><link>images/Table Lookup.gif</link></figure>
</section>	

<section>
	<description>The Table_Lookup table uses Quote_Vendor_No as an index into the Vendor table. It stores the value of Vendor_No in the Quote_Vendor_No field but displays the value of Vendor_Name to represent the data. The Table_Lookup table uses Quote_product_No as an index into the Product table. It stores the value of product_No in the Quote_product_No field but displays the value of product_Name to represent the data.
The objective is to provide something like the following. Select a vendor from the Vendor list. 
</description>
	<figure><link>images/UG_Table_Lookups_form_2.gif</link></figure>
	
</section>
<section>
	<description>Then select a product from the Product list that has been dynamically built in response to the Vendor list selection. 
</description>
	<figure><link>images/UG_Table_Lookups_form_3.gif</link></figure>
	
</section>	
<section>
	<title>Different Development Approaches
</title>
	<description>Alpha Anywhere provides two approaches to programming the form's Vendor name control to reference one field ( Vendor_No ), display another field ( Vendor_Name ) and store the user selection into a third field ( Quote_Vendor_No ).</description>
	<cases>
		<case>
			<description>Field Rules - by defining a Lookup field rule at the table level.</description>
		</case>
		<case>
			<description>Object Properties - by defining object properties at the form level.
</description>
		</case>
	</cases>
	
</section>


<section>
	
	<description>There are important but subtle differences in the features and benefits between these two different development approaches. Field rules support popup lists. Popup lists provide a powerful set of capabilities to assist the user when the list is long or has multiple columns. The user has the additional capabilities not available through other controls:
</description>
	<cases>
		<case>
			<description>Sort any column with a single click.
</description>
		</case>
		<case>
			<description>Search any column for a value or partial value.
</description>
		</case>
		<case>
			<description>Optionally edit any field value.
</description>
		</case>
		<case>
			<description>Optionally add new field values.
</description>
		</case>
	</cases>
	
</section>


<section>
	
	<description>Lists based on object properties offer a wider range of control options. The control options fall into two categories:
</description>
	<cases>
		<case>
			<description>List and Combo Boxes - populated by static data provided by the developer or by expressions that dynamically query a table or set.
</description>
		</case>
		<case>
			<description>Record Lists - populated with only the data you need to see. For example, if the list contains 100 items, but you only display 10 at a time, local memory only contains those 10 items.
</description>
		</case>
	</cases>
	
</section>
<section>
	<title>Field Rules</title>
	<cases>
		<case>
			<title>Advantages</title>
			<cases>
				<case>
					<description>Once the lookup is defined, all forms and browses based on the table can use it.
</description>
				</case>
				<case>
					<description>When you make a selection from the lookup list, Alpha Anywhere can fill in other fields with related information.
</description>
				</case>
				<case>
					<description>Can display the data in the lookup table in a drop-down combo box, or in a pop-up window.
</description>
				</case>
				<case>
					<description>Allows editing of records in the lookup table (pop-up style only), and entering of new records in the lookup table.
</description>
				</case>
				
				
			</cases>
		</case>
		<case>
			<title>Disadvantages</title>
			<cases>
				<case>
					<description>The developer cannot define field rules for variables.
</description>
				</case>
				<case>
					<description>The form cannot display lookup values in a List Box.
</description>
				</case>
				
			</cases>
		</case>
		
	</cases>
	
	
	
</section>

<section>
	<title>List and Combo Boxes</title>
	<cases>
		<case>
			<title>Advantages</title>
			<cases>
				<case>
					<description>Easy to implement.
</description>
				</case>
				<case>
					<description>Local caching of list contents results in the fastest solution when lists are small and static.
</description>
				</case>
				<case>
					<description>The developer can add error checking through Xbasic functions.
</description>
				</case>
		
				
			</cases>
		</case>
		<case>
			<title>Disadvantages</title>
			<cases>
				<case>
					<description>There is a practical limit to number of entries in the list because the values are stored in memory when the list box is populated.
</description>
				</case>
				<case>
					<description>The list presents only one column of data.
</description>
				</case>
				<case>
					<description>When you make a selection from the lookup list, Alpha Anywhere does not fill in other fields with related information.
</description>
				</case>
			</cases>
		</case>
		
	</cases>
	
	
	
</section>

<section>
	<title>Record Lists</title>
	<cases>
		<case>
			<title>Advantages</title>
			<cases>
				<case>
					<description>There is no limit to the number of entries in the list.
</description>
				</case>
				<case>
					<description>Record Lists behave like list boxes.
</description>
				</case>
				<case>
					<description>Support multiple column lists.
</description>
				</case>
				<case>
					<description>The developer can add error checking through Xbasic functions.
</description>
				</case>
				
				
			</cases>
		</case>
		<case>
			<title>Disadvantages</title>
			<cases>
				<case>
					<description>Record Lists do not support entering or changing values in the list.
</description>
				</case>
				<case>
					<description>When you make a selection from the lookup list, Alpha Anywhere does not fill in other fields with related information.
</description>
				</case>
				
			</cases>
		</case>
		
	</cases>
	
	
	
</section>


	
</sections>	
	
	
	
</page>