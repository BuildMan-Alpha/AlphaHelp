<page>
	<shortlink>dt chart Creating Charts with SimpleChart</shortlink>
	<topic>Creating Charts with SimpleChart</topic>
	<description>Creating various charts with SimpleChart.</description>	
	<sections>
		<section>
			<description>The SimpleChart software allows you to:</description>	
			<cases>
				<case>
					<description>add bar, line, and pie charts to forms</description>
				</case>
				<case>
					<description>add bar, line, and pie charts to web pages</description>
				</case>
				<case>
					<description>update and re-display charts as data changes</description>
				</case>
			</cases>	
		</section>	
		<section>
			<description>The charting functionality is provided by the SimpleChart DLL ( SimpleChart4Lite.dll ), which is included in Alpha Anywhere. This library provides 4 top level components:</description>
			<cases>
				<case>
					<description>AxisChart ActiveX Control - used to create form based Bar and/or Line charts.</description>
				</case>
				<case>
					<description>AxisChartGenerator COM Object - used to create web based Bar and/or Line charts.</description>
				</case>
				<case>
					<description>PieChart ActiveX Control - used to create form based Pie charts.</description>
				</case>
				<case>
					<description>PieChartGenerator COM Object - used to create web based Pie charts.</description>
				</case>
			</cases>
		</section>		
		<section>
			<title>AxisChart ActiveX Control</title>
			<description>The AxisChart ActiveX Control allows you to easily create two dimensional bar charts where the length of each bar represents the data values and line charts where each data point is connected to the next using a straight line. You can also use a combination of bar and line series on the same chart (which is why it's called an AxisChart instead of BarChart or LineChart).</description>	
			<figure><link>images/UG_Simplechart_bar_chart.gif</link></figure>	
			<figure><link>images/UG_Simplechart_Line_chart.gif</link></figure>	
		</section>	
		<section>
			<title>PieChart ActiveX Control</title>
			<description>The PieChart ActiveX Control allows you to easily create two dimensional pie charts where each segment of the pie represents a data value.</description>	
			<figure><link>images/UG_Pie_chart_1.gif</link></figure>	
			<figure><link>images/UG_Pie_chart_2.gif</link></figure>	
		</section>	
		<section>
			<title>AxisChartDataItem</title>
			<description>The AxisChartDataItem object represents a single data point on an axis chart. With the AxisChartDataItem properties you can:</description>	
			<cases>
				<case>
					<description>Set the size of the bar (or the line point if the data item is part of a line series) using the Value property.</description>
				</case>
				<case>
					<description>Set or retrieve the label for the data item using the Name property.</description>
				</case>
				<case>
					<description>Set whether the chart should show or hide the data item using the Hidden property.</description>
				</case>
				<case>
					<description>Specify a URL to be called when the chart is shown in a web browser and the user clicks on that data item.</description>
				</case>
			</cases>
		</section>	
		<section>
			<title>AxisChartDataSeriesItem</title>
			<description>The AxisChartDataSeriesItem object represents a single series of data points on an axis chart. For example, if you wanted to chart the sales of apples and oranges each year from 2001 to 2003 then you would uses one AxisChartDataSeriesItem for apples and the other for oranges. Within each series, AxisChartDataItem objects would represent the yearly sales amounts. With the AxisChartDataSeriesItem properties you can:</description>	
			<cases>
				<case>
					<description>Choose whether to draw a series as bars or lines.</description>
				</case>
				<case>
					<description>Set the style, thickness and color of the line if the data series is drawn as a line.</description>
				</case>
				<case>
					<description>Set the colors or image used to draw each bar if the data series is drawn as bars.</description>
				</case>
			</cases>
		</section>	
		<section>
			<title>PieChartDataItem</title>
			<description>Each PieChartDataItem object corresponds to one segment in a pie chart. With the PieChartDataItem properties you can:</description>
			<cases>
				<case>
					<description>Set the size of the pie segment using the Value property.</description>
				</case>
				<case>
					<description>Set or retrieve the label for the data item using the Name property.</description>
				</case>
				<case>
					<description>Change the color of the data item using the Color property.</description>
				</case>
				<case>
					<description>Specify a URL to be called when the chart is shown in a web browser and the user clicks on that data item.</description>
				</case>
			</cases>
		</section>
		<section>
			<title>ChartData Collection</title>
			<description><p>The PieChart Control and the PieChartGenerator Object have a ChartData collection made up of PieChartDataItem objects. Each PieChartDataItem corresponds to one segment in the pie chart.</p>
			<p>The collection has Add and Insert methods that allows new data values and their labels to be added to the chart. Data items can be removed from a chart using the Remove and Clear methods.</p></description>	
		</section>	
		<section>
			<title>DataSeries Collection</title>
			<description><p>The AxisChart control and the AxisChartGenerator object have a DataSeries collection made up of AxisChartDataSeriesItem objects. Each AxisChartDataSeriesItem corresponds to group of data points that make up the bars or a line in the axis chart.</p>
			<p>The collection has Add and Insert methods for adding new series to the chart. Data series can be removed from a chart using the Remove and Clear methods.</p>
			<p>Since a series can be shown using either bars or a line, the Add method is able to add a series item of either type but a large number of parameters are required. Therefore, the collection has two other helper methods, AddBarSeries and AddLineSeries which make adding either bar or line series to the chart easier.</p></description>	
		</section>	
		<section>
			<title>SeriesData Collection</title>
			<description><p>An Axis chart can contain a number of data series which are accessed through the DataSeries collection property of the Axis chart. Each of these data series can themselves contain one or more data items, each of which is represented by an AxisChartDataItem object. Data items within a series are manipulated using the SeriesData collection property of the series.</p>
			<p>Each AxisChartDataItem object in the series represents either a bar or a point on a line, depending on which type of series the data is part of.</p>
			<p>The SeriesData collection has Add and Insert methods that allows new data items to be added to the chart. Data can be removed from a chart using the Remove and Clear methods.</p></description>
		</section>
		<section>
			<title>Bar Chart Example</title>
			<description>The following example is based on the invoice_items table of the AlphaSports database. To create a bar chart:</description>	
			<steps>
				<step>
					<description>Open the Invoice form in the Form Editor.</description>
				</step>
				<step>
					<description>Make the form wider, so that there is room for the chart.</description>
				</step>
				<step>
					<description>Select the ActiveX tool from the Toolbox and draw the rectangle (approximately 3" wide and 4" high) that defines the chart's boundaries.</description>
					<figure><link>images/ActiveX_tool_button.gif</link></figure>
				</step>
				<step>
					<description>When the Insert ActiveX Control dialog appears, click Filter.</description>
				</step>
				<step>
					<description>Enter "simple" and click OK.</description>
				</step>
				<step>
					<description>Select "SimpleChartLite AxisChart4Control" and click Insert.</description>
				</step>
				<step>
					<description>It would be desirable to refresh the chart each time you read a new record. To do this, right click on the form and select Events > OnFetch.</description>
				</step>
				<step>
					<description>Create a pointer variable and assign it to the new chart object. This example assumes that the name of the new object is "activex1".</description>
					<example><![CDATA[dim chart as P
chart = activex1.activex.this ]]></example>
				</step>
				<step>
					<description>Next, you need to add some data to the chart. Each data element is a pair of values: a number and a label. Modify the script so it has the following code. The inv variable captures the value of the current invoice_number field, which is used in the filter expression of the SET.EXTERNAL RECORD CONTENT GET() method. This method returns the value of the description field from the product table and the value of the extension field from the invoice_items table. The two values are separated by a pipe "|" character, to make them easy to separate.</description>
					<example><![CDATA[dim chart as P
dim list as C
dim inv as C
chart = activex1.activex.this
inv = Invoice_Header->INVOICE_NUMBER
list = set.external_record_content_get("items-product", "product->description + '|' + invoice_items->extension", "invoice_items->extension", "invoice_items->invoice_number = " + quote(inv) ) ]]></example>
				</step>
				<step>
					<description>Now add the data to the table. Because you will add items to the chart with each OnFetch event, the first step is to clear the chart of any items placed on it by the previous OnFetch event. The chart.DataSeries.clear() statement does this. The chart.DataSeries.AddBarSeries("Items", 0) statement creates a set of data elements named "Items". The FOR EACH ... NEXT loop extracts each value pair from the list. The chart.DataSeries(1).SeriesData.Add(desc, num) statement adds the value pair to the set and the chart.</description>
					<example><![CDATA[dim chart as P
dim list as C
dim inv as C
dim desc as C
dim num as N
chart = activex1.activex.this
inv = Invoice_Header->INVOICE_NUMBER
list = set.external_record_content_get("items-product", "product->description + '|' + invoice_items->extension", "invoice_items->extension", "invoice_items->invoice_number = " + quote(inv) )
chart.DataSeries.clear()
' create one DataSeries for all data points
chart.DataSeries.AddBarSeries("Items", 0)
for each x in list
    desc = word(x, 1, "|")
    num = val(word(x, 2, "|") )
    ' add all data points to DataSeries(1)
    chart.DataSeries(1).SeriesData.Add(desc, num)
next
chart.refresh() ]]></example>
					<cases>
						<case>
							<description>At this point your chart should look something like the following. Picture</description>
							<figure><link>images/XB_SimpleChart_Bar.gif</link></figure>
						</case>
						<case>
							<description>A few changes can make the chart more appealing.</description>
						</case>
					</cases>
				</step>
				<step>
					<description>Right click the chart while in design mode and select ActiveX Properties... to display the SimpleChartLite AxisChart4 Control Properties dialog.</description>
				</step>
				<step>
					<description>Display the Appearance tab and enter "Items in Order" into the Caption field.</description>
				</step>
				<step>
					<description>Display the Axis Options tab and enter "Dollars" into the Unit Axis Label field.</description>
				</step>
				<step>
					<description>Display the Legend Properties tab and select "3 - LegendBottom" in the Position list.</description>
				</step>
				<step>
					<description>Click OK and save the form.</description>
				</step>
				<step>
					<description>The next step is to change the way the data is added to the chart a new data series (or "row") for each product. The script does this by modifying and moving the chart.DataSeries.AddBarSeries(desc, 0) statement inside the loop. It changes the desc argument in the chart.DataSeries(k).SeriesData.Add(" ", num) statement to " " and the 1 to the counter k.</description>
					<example><![CDATA[dim chart as P
dim list as C
dim inv as C
dim desc as C
dim num as N
dim k as N = 1
chart = activex1.activex.this
inv = Invoice_Header->INVOICE_NUMBER
list = set.external_record_content_get("items-product", "product->description + '|' + invoice_items->extension", "invoice_items->extension", "invoice_items->invoice_number = " + quote(inv) )
chart.DataSeries.clear()
for each x in list
    desc = word(x, 1, "|")
    num = val(word(x, 2, "|") )
    ' create a new DataSeries for each data point
    chart.DataSeries.AddBarSeries(desc, 0)
    ' add each data point to a different DataSeries
    chart.DataSeries(k).SeriesData.Add(" ", num)
    k = k + 1
next
chart.refresh()]]></example>
					<cases>
						<case>
							<description>The result should look something like this. </description>
							<figure><link>images/XB_SimpleChart_Bar_2.gif</link></figure>
						</case>
					</cases>
				</step>
			</steps>
		</section>	
		<section>
			<title>Line Chart Example</title>
			<description>The following example is based on the invoice_items table of the AlphaSports database. To create a bar chart:</description>	
			<steps>
				<step>
					<description>Open the Invoice form in the Form Editor.</description>
				</step>
				<step>
					<description>Make the form wider, so that there is room for the chart.</description>
				</step>
				<step>
					<description>Select the ActiveX tool from the Toolbox and draw the rectangle (approximately 3" wide and 4" high) that defines the chart's boundaries.</description>
					<figure><link>images/ActiveX_tool_button.gif</link></figure>
				</step>
				<step>
					<description>When the Insert ActiveX Control dialog appears, click Filter.</description>
				</step>
				<step>
					<description>Enter "simple" and click OK.</description>
				</step>
				<step>
					<description>Select "SimpleChartLite AxisChart4Control" and click Insert.</description>
				</step>
				<step>
					<description>It would be desirable to refresh the chart each time you read a new record. To do this, right click on the form and select Events > OnFetch.</description>
				</step>
				<step>
					<description>Create a pointer variable and assign it to the new chart object. This example assumes that the name of the new object is "activex1".</description>
					<example><![CDATA[dim chart as P
chart = activex1.activex.this ]]></example>
				</step>
				<step>
					<description>Next, you need to add some data to the chart. Each data element is a pair of values: a number and a label. Modify the script so it has the following code. The inv variable captures the value of the current invoice_number field, which is used in the filter expression of the SET.EXTERNAL RECORD CONTENT GET() method. This method returns the value of the description field from the product table and the value of the extension field from the invoice_items table. The two values are separated by a pipe "|" character, to make them easy to separate.</description>
					<example><![CDATA[dim chart as P
dim list as C
dim inv as C
chart = activex1.activex.this
inv = Invoice_Header->INVOICE_NUMBER
list = set.external_record_content_get("items-product", "product->description + '|' + invoice_items->extension", "invoice_items->extension", "invoice_items->invoice_number = " + quote(inv) )
 ]]></example>
				</step>
				<step>
					<description>Now add the data to the table. Because you will add items to the chart with each OnFetch event, the first step is to clear the chart of any items placed on it by the previous OnFetch event. The chart.DataSeries.clear() statement does this. The chart.DataSeries.AddLineSeries("Line", 0) statement creates a set of data elements named "Line". The FOR EACH ... NEXT loop extracts each value pair from the list. The chart.DataSeries(1).SeriesData.Add(desc, num) statement adds the value pair to the set and the chart.</description>
					<example><![CDATA[dim chart as P
dim list as C
dim inv as C
dim desc as C
dim num as N
dim c as colordefinition
chart = activex1.activex.this
inv = Invoice_Header->INVOICE_NUMBER
list = set.external_record_content_get("items-product", "product->description + '|' + invoice_items->extension", "invoice_items->extension", "invoice_items->invoice_number = " + quote(inv) )
chart.DataSeries.clear()
c.name = "Black"
chart.DataSeries.AddLineSeries("Line", c.RGB_Value, 3, 0)
for each x in list
    desc = word(x, 1, "|")
    num = val(word(x, 2, "|") )
    chart.DataSeries(1).SeriesData.Add(desc, num)
next
chart.refresh() ]]></example>
				</step>
				<step>
					<description>Save your event script and return to the Form Editor.</description>
				</step>
				<step>
					<description>Right click the ActiveX control and select ActiveX Properties... .</description>
				</step>
				<step>
					<description>On the Appearance tab enter "Values of Items in Order" in the Caption field.</description>
				</step>
				<step>
					<description>On the Legend Properties tab clear the Show Legend check box and click OK.</description>
					<cases>
						<case>
							<description>At this point your chart should look something like the following. Picture</description>
							<figure><link>images/XB_SimpleChart_Line.gif</link></figure>
						</case>
						<case>
							<description>You can combine the line chart with a bar chart. Change the OnFetch event script as follows. The chart.DataSeries.AddBarSeries("Bar", 0) statement adds the bar data elements. The chart.DataSeries(2).SeriesData.Add(desc, num) statement sets the value of these data elements.</description>
					<example><![CDATA[dim chart as P
dim list as C
dim inv as C
dim desc as C
dim num as N
dim c as colordefinition
chart = activex1.activex.this
inv = Invoice_Header->INVOICE_NUMBER
list = set.external_record_content_get("items-product", "product->description + '|' + invoice_items->extension", "invoice_items->extension", "invoice_items->invoice_number = " + quote(inv) )
chart.DataSeries.clear()
c.name = "Black"
chart.DataSeries.AddLineSeries("Line", c.RGB_Value, 3, 0)
chart.DataSeries.AddBarSeries("Bar", 0)
for each x in list
    desc = word(x, 1, "|")
    num = val(word(x, 2, "|") )
    chart.DataSeries(1).SeriesData.Add(desc, num)
    chart.DataSeries(2).SeriesData.Add(desc, num)
next
chart.refresh() ]]></example>		
						</case>
						<case>
							<description>The result should look something like this. </description>
							<figure><link>images/XB_SimpleChart_Line_2.gif</link></figure>	
						</case>
					</cases>
				</step>
			</steps>
		</section>	
		<section>
			<title>Pie Chart Example</title>
			<description>The following example is based on the invoice_items table of the AlphaSports database. To create a bar chart:</description>
			<steps>
				<step>
					<description>Open the Invoice form in the Form Editor.</description>
				</step>
				<step>
					<description>Make the form wider, so that there is room for the chart.</description>
				</step>
				<step>
					<description>Select the ActiveX tool from the Toolbox and draw the rectangle (approximately 3" wide and 4" high) that defines the chart's boundaries.</description>
					<figure><link>images/ActiveX_tool_button.gif</link></figure>
				</step>
				<step>
					<description>When the Insert ActiveX Control dialog appears, click Filter.</description>
				</step>
				<step>
					<description>Enter "simple" and click OK.</description>
				</step>
				<step>
					<description>Select "SimpleChartLite PieChart4Control" and click Insert.</description>
				</step>
				<step>
					<description>It would be desirable to refresh the chart each time you read a new record. To do this, right click on the form and select Events > OnFetch.</description>
				</step>
				<step>
					<description>Create a pointer variable and assign it to the new chart object. This example assumes that the name of the new object is "activex1".</description>
					<example><![CDATA[dim chart as P
chart = activex1.activex.this ]]></example>
				</step>
				<step>
					<description>Next, you need to add some data to the chart. Each data element is a pair of values: a number and a label. Modify the script so it has the following code. The inv variable captures the value of the current invoice_number field, which is used in the filter expression of the SET.EXTERNAL RECORD CONTENT GET() method. This method returns the value of the description field from the product table and the value of the extension field from the invoice_items table. The two values are separated by a pipe "|" character, to make them easy to separate.</description>
					<example><![CDATA[dim chart as P
dim list as C
dim inv as C
chart = activex1.activex.this
inv = Invoice_Header->INVOICE_NUMBER
list = set.external_record_content_get("items-product", "product->description + '|' + invoice_items->extension", "invoice_items->extension", "invoice_items->invoice_number = " + quote(inv) )
 ]]></example>
				</step>
				<step>
					<description>Now add the data to the table. Because you will add items to the chart with each OnFetch event, the first step is to clear the chart of any items placed on it by the previous OnFetch event. The chart.DataSeries.clear() statement does this. The chart.DataSeries.AddBarSeries("Items", 0) statement creates a set of data elements named "Items". The FOR EACH ... NEXT loop extracts each value pair from the list. The chart.DataSeries(1).SeriesData.Add(desc, num) statement adds the value pair to the set and the chart.</description>
					<example><![CDATA[dim chart as P
dim list as C
dim inv as C
dim desc as C
dim num as N
chart = activex1.activex.this
inv = Invoice_Header->INVOICE_NUMBER
list = set.external_record_content_get("items-product", "product->description + '|' + invoice_items->extension", "invoice_items->extension", "invoice_items->invoice_number = " + quote(inv) )
chart.ChartData.clear()
for each x in list
    desc = word(x, 1, "|")
    num = val( word(x, 2, "|") )
    chart.ChartData.add(desc, num, 0)
next
chart.refresh() ]]></example>
					<cases>
						<case>
							<description>At this point your chart should look something like the following. Picture</description>
							<figure><link>images/XB_SimpleChart_Pie.gif</link></figure>
						</case>
						<case>
							<description>A few changes can make the chart more appealing.</description>
						</case>
					</cases>
				</step>
				<step>
					<description>Right click the chart while in design mode and select ActiveX Properties... to display the SimpleChartLite PieChart4 Control Properties dialog.</description>
				</step>
				<step>
					<description>Display the Appearance tab and enter "Items in Order" into the Caption field.</description>
				</step>
				<step>
					<description>Display the Legend Properties tab and select "3 - LegendBottom" in the Position list.</description>
				</step>
				<step>
					<description>Click OK and save the form.</description>
					<example><![CDATA[dim chart as P
dim list as C
dim inv as C
dim desc as C
dim num as N
chart = activex1.activex.this
inv = Invoice_Header->INVOICE_NUMBER
list = set.external_record_content_get("items-product", "product->description + '|' + invoice_items->extension", "invoice_items->extension", "invoice_items->invoice_number = " + quote(inv) )
chart.ChartData.clear()
for each x in list
    desc = word(x, 1, "|")
    num = val( word(x, 2, "|") )
    chart.ChartData.add(desc, num, 0)
next
chart.refresh() ]]></example>
					<cases>
						<case>
							<description>The result should look something like this. </description>
							<figure><link>images/XB_SimpleChart_Pie_2.gif</link></figure>
						</case>
					</cases>
				</step>
			</steps>
		</section>
	</sections>
	<see>
		<ref link="SimpleChart Style Xdialog">SimpleChart Style Xdialog</ref>
		<ref link="Placing SimpleCharts on a Web Page">Placing SimpleCharts on a Web Page</ref>
	</see>
</page>