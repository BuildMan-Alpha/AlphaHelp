<page>
	<topic>ActiveX and OLE Overview</topic>
<sections>
<section>
	<description>Object Linking and Embedding (OLE) is about using documents generated by one application inside another application. ActiveX is a Microsoft rebranding of OLE with more focus on smart Windows controls. Automation is a simple but powerful way to link software together without having to share source code. It lets a client program "drive" a server program. Automation is also used for dynamically loadable "in-process" libraries.
Objects are registered at install time in the Windows registry. Entries describe:
</description>
<cases>
	<case>
		<description>Properties, event, and methods (functions) </description>
	</case>
	<case>
		<description>Enumerated types (constants) </description>
	</case>
	<case>
		<description>How to create, load, and use the object </description>
	</case>
</cases>	
	
</section>	

<section>
	<title>Placing an ActiveX Control on a Form
</title>
<steps>
	<step>
		
		<description>Select the following icon and sketch the control on your form.
</description>
<figure><link>images/ActiveX_tool_button.gif</link></figure>
	</step>
	
	<step>
		
		<description>Select the ActiveX control you want to use and click Insert.
</description>
	</step>
	
	<step>
		
		<description>Right click on the control and select Event > ActiveXEvent to see where to place code to respond to the control's events.
</description>
	</step>
	
	<step>
		
		<description>To directly manipulate properties of the control, your code should be structured as follows.
</description>
	</step>
	
	
</steps>	
</section>
<section>
	
	<example><![CDATA[dim object as P
object = my_control_name.activex.this
if object.title = "" then
    object.title = "Hello World"
    object.refresh()
end if ]]></example>
	
</section>
<section>
	<description>This example uses the Calendar Control 8.0 ActiveX control. This example has a form based on a table called "customer". This table has a field called date_of_birth. If you wanted the ActiveX control to show this field value, then you would put the following code in the form's OnFetch() event:</description>
	<example><![CDATA[dim t as P
dim dt as D
dim p as P
t = table.current()
dt = t.date_of_birth
'get a pointer to the ActiveX control
p = activex1.activex.this
'set the ActiveX control's .value property to the date
p.value = ctodt("" + dt)]]></example>
</section>
	

<section>
	<title>Using Xdialog with ActiveX</title>
	<description>In the Xdialog environment, you must declare a variables to identify the control. In the script below imaging.editctrl.1 is the "friendly" name of the control. The last dot and digit defines the optional version number.
</description>
	<example><![CDATA[dim img as P
dim img.object as P
dim img.class as C
img.class="imaging.editctrl.1"
ui_dlg_box("Demo",<<%dlg%
{activex=80,25img}
%dlg%,<<%code%
dim obj as P
obj = img.object
if obj.title = "" then
    obj.title = "Hello World"
    obj.refresh()
end if
%code%) ]]></example>
</section>


<section>
	<description>The developer must take the responsibility to see that the ActiveX control is on his client's computer.
</description>
	<note>Use regsvr32 controlname to register an ActiveX control on a computer.</note>
</section>

<section>
	<title>Three Ways to Create an Object
</title>
	<description>There are three ways to create an object.
</description>
	<example><![CDATA[dim MyObject as ole::adodb.connection
dim MyObject as P
MyObject = ole.create("adodb.connection")
dim MyObject as P
MyObject = ole.getobject("c:\summary.xls") ]]></example>
</section>


<section>
	<description>In the last case the object is the document itself. After using OLE.CREATE()to create a new object, access the object using dot (".") syntax. For example:
</description>
	<example><![CDATA[dim someobject as P
someobject = ole.create("owc.spreadsheet")
someobject.range("A1").select()
someobject.activecell = "Name" ]]></example>
</section>

<section>
	<title>Practical Examples
</title>
	<description>The following script is a practical example of OLE.
</description>
	<example><![CDATA[objNetwork = ole.create("Wscript.Network")
strComputer = objnetwork.ComputerName
ui_msg_box("Computer Name", strComputer) ]]></example>
</section>

<section>
	<description>This script reports on the users in a domain.
</description>
	<example><![CDATA[dim colAccounts as P
dim msg as C
dim userarray[1] as C
colAccounts = ole.getobject("WinNT://Alphasoftware,domain")
userarray[1] = "user"
colAccounts.filter = userarray
for each objUser in colAccounts
    msg = msg + objUser.Name + crlf()
next
ui_msg_box("Users", msg)]]></example>
</section>

<section>
	<description>This script spell checks text using Microsoft Word.
</description>
	<example><![CDATA[dim wb as P
dim oldtext as C
dim newtext as C
wb = ole.create("Word.Basic")
wb.filenew()
wb.insert("Ths iz pur splling fur sore!")
wb.toolsspelling()
wb.editselectall()
oldtext = web.selection()
wb.fileexit(2)
ui_msg_box("Corrected text", oldtext) ]]></example>
</section>

<section>
	<description>This script retrieves data from an Access database.
</description>
	<example><![CDATA[dim Output as C
objConn = ole.create("ADODB.Connection")
objRs = ole.create("ADODB.Recordset")
objComm = ole.create("ADODB.Command")
connectionstring = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=c:/northwind.mdb;Persist Security Info=False;"
CommandText = "SLECT CompanyName FROM Customers ORDER BY CompanyName"
objConn.Open(ConnectionSTring)
objRs.open(CommandText, objConn)
while .not. objRs.eof
    output = output + objRs.fields.item("CompanyName").value + crlf()
    objRs.MoveNext()
end while
objRs.close()
objConn.close() ]]></example>
</section>




</sections>	
<see>
	<ref>OLE Automation Object Browser</ref>
	<ref>{ACTIVEX}</ref>
	
</see>	
</page>