<page>
	<topic>Translating OLE Syntax Examples</topic>
			<description>The Alpha Anywhere application developer who wants to integrate his application with Microsoft Office will be able to find Visual Basic or Visual FoxPro code samples. These samples can be easily converted to Xbasic format.</description>
	
	<sections>
		<section>		<note>The following code was validated with Alpha Anywhere and Above and Excel 2002 SP3.</note>
		</section>
		<section>
			<title>Creating a New Excel Spreadsheet</title>
			<description>The difference between Xbasic and Visual FoxPro in this code sample is in the name of the function that creates the OLE object. This code opens Excel and returns a pointer to the new automation object.</description>
			<cases>
				<case>
					<title>Alpha Anywhere Xbasic</title>
					<example>
						<![CDATA[dim oExcel as P oExcel=o le.create("Excel.Application") ' Xbasic oExcel.visible=. T. oExcel.workbooks.add() ]]>
					</example>
				</case>
				<case>
					<description>This code gets a pointer to an already open Excel application.</description>
					<example>
						<![CDATA[oExcel=o le.GetObject("","Excel.Application") oExcel.visible=. T. oExcel.workbooks.add()]]>
					</example>
				</case>
				<case>
					<title>Visual FoxPro</title>
					<example>
						<![CDATA[dim oExcel as P oExcel=C reateObject("Excel.Application") oExcel.visible=. T. oExcel.workbooks.add() ]]>
					</example>
				</case>
				<case>
					<title>Visual Basic</title>
					<example>
						<![CDATA[Set oExcel=N ew Excel.Application Set oWorkbook=E xcel.Workbooks.Add oWorkbook.Activate oExcel.Visible=T rue ]]>
					</example>
				</case>
			</cases>
		</section>
		<section>
			<title>Opening an Excel Spreadsheet</title>
			<description>In these scripts, the difference between Xbasic and Visual FoxPro is in the way array subscripts are referenced.</description>
			<cases>
				<case>
					<title>Alpha Anywhere Xbasic</title>
					<example>
						<![CDATA[dim oExcel as P dim oWorkbook as P dim fn as GetObject fn=" c:\spread\books.xls" oWorkbook=o le.GetObject(fn) oWorkbook.Application.visible=. T. oWorkbook.windows(1).activate() ]]>
					</example>
				</case>
				<case>
					<title>Visual FoxPro</title>
					<example>
						<![CDATA[dim oExcel as P dim oWorkbook as P dim fn as GetObject fn=" c:\spread\books.xls" oWorkbook=G etObject(fn) oWorkbook.Application.visible=. T. oWorkbook.windows[1].activate() ]]>
					</example>
				</case>
			</cases>
		</section>
		<section>
			<title>Referencing and Adding Worksheets</title>
			<cases>
				<case>
					<title>Alpha Anywhere Xbasic</title>
					<example>
						<![CDATA[dim oWorksheet1 as P dim oWorksheet2 as P ' Get a reference to the first worksheet oWorksheet1=o Workbook.Worksheets(1) ' Add a new sheet before sheet one oWorksheet2=o Workbook.Worksheets.Add(oWorksheet1)]]>
					</example>
				</case>
				<case>
					<title>Visual FoxPro</title>
					<example>
						<![CDATA[dim oWorksheet1 as P dim oWorksheet2 as P ' Get a reference to the first worksheet oWorksheet1=o Workbook.Worksheets[1] ' Add a new sheet before sheet one oWorksheet2=o Workbook.Worksheets.Add(oWorksheet1) ]]>
					</example>
				</case>
				<case>
					<title>Visual Basic</title>
					<example>
						<![CDATA[dim oWorksheet as Worksheet Set oWorksheet=o Workbook.ActiveSheet]]>
					</example>
				</case>
			</cases>
		</section>
		<section>
			<title>Using Ranges to Read Cell Values</title>
			<description>Both mechanisms for setting the value of the oRange object are valid. The oExcel.ActiveSheet.Range method works with the current worksheet, which is fine for single worksheet workbooks. The oWorksheet.Range approach is appropriate for workbooks with more than
				worksheet.</description>
			<cases>
				<case>
					<title>Alpha Anywhere Xbasic</title>
					<example>
						<![CDATA[ dim oRange as P dim row as N dim col as N ' Two ways to read the value of cell C5 x=o Excel.ActiveSheet.Range("C5").value x=o Worksheet1.Range("C5").value ' Two ways to define a range oRange=o Excel.ActiveSheet.Range("A1:B2") oRange=o Worksheet1.Range("A1:B2")
						for row=1 to oRange.Rows.Count for col=1 to oRange.Columns.Count x=o Range.cells(row,col).value next col next row ]]>
					</example>
				</case>
				<case>
					<title>Visual FoxPro</title>
					<example>
						<![CDATA[dim oRange as P dim row as N dim col as N ' Two ways to read the value of cell C5 x=o Excel.ActiveSheet.Range("C5").value x=o Worksheet1.Range("C5").value ' Two ways to define a range oRange=o Excel.ActiveSheet.Range("A1:B2") oRange=o Worksheet1.Range("A1:B2")
						for row=1 to oRange.Rows.Count for col=1 to oRange.Columns.Count x=o Range.cellsrow,col.value next col next row ]]>
					</example>
				</case>
			</cases>
		</section>
		<section>
			<title>Writing Cell Values and Formulas</title>
			<description>The following example sets the value of three cells, then sums them into a fourth cell.</description>
			<cases>
				<case>
					<title>Alpha Anywhere Xbasic</title>
					<example>
						<![CDATA[dim oRange as P oRange=o Worksheet1.Range("E1") oRange.value=1 00 oRange=o Worksheet1.Range("E2") oRange.value=1 00 oRange=o Worksheet1.Range("E3") oRange.value=1 00 oRange=o Worksheet1.Range("E4") oRange.formula="=SUM(E1:E3)" ]]>
					</example>
				</case>
				<case>
					<title>Visual FoxPro</title>
					<example>
						<![CDATA[oExcel.ActiveSheet.Range("E1").value=1 00 oExcel.ActiveSheet.Range("E2").value=1 00 oExcel.ActiveSheet.Range("E3").value=1 00 oExcel.ActiveSheet.Range("E4").formula="=SUM(E1:E3)" ]]>
					</example>
				</case>
				<case>
					<title>Visual Basic</title>
					<example>
						<![CDATA[' two different ways to do the same thing oExcel.Range("E1").Select oExcel.ActiveCell.FormulaR1C1=1 00 oExcel.Range("E2").Select oExcel.ActiveCell.FormulaR1C1=1 00 oExcel.Range("E3").Select oExcel.ActiveCell.FormulaR1C1=1 00 oExcel.Range("E4").Select
						oExcel.ActiveCell.FormulaR1C1="=SUM(E1:E3)" oWorksheet.Rows.Cells(1, 5)=1 00 oWorksheet.Rows.Cells(2, 5)=1 00 oWorksheet.Rows.Cells(3, 5)=1 00 oWorksheet.Rows.Cells(4, 5)="=SUM(E1:E3)" ]]>
					</example>
				</case>
			</cases>
		</section>
		<section>
			<title>Setting Other Cell Properties</title>
			<description>You can retrieve a list of object properties by opening or creating the spreadsheet in the Interactive window, then by evaluating the object. For example:</description>
			<example>
				<![CDATA[dim oExcel as P dim oWorkbook as P dim oWorksheet as P dim oRange as P dim fn as C fn=" c:\spread\books.xls" oWorkbook=o le.GetObject(fn) oWorkbook.Application.visible=. T. oWorkbook.windows(1).activate() oWorksheet=o Workbook.Worksheets(1) oRange=o
				Worksheet.Range("E1") ? oRange ]]>
			</example>
		</section>
		<section>
			<description>Note that color values are defined in Blue, Green, Red sequence.</description>
			<cases>
				<case>
					<title>Alpha Anywhere Xbasic</title>
					<example>
						<![CDATA[oRange.font.name=" Verdana" oRange.font.size=2 4 oRange.font.bold=. T. oRange.font.color=h ex_to_dec("00FF00") ' BGR oRange.interior.color=h ex_to_dec("FFFF00") ' BGR]]>
					</example>
				</case>
			</cases>
		</section>
		<section>
			<title>Saving and Closing an Excel Spreadsheet</title>
			<description>Except for the use of UI_GET_FILE(), the Xbasic and Visual FoxPro code is the same.</description>
			<cases>
				<case>
					<title>Alpha Anywhere Xbasic</title>
					<example>
						<![CDATA[fn=u i_get_file("Save the spreadsheet as ...", "(*.xls)", fn, "X") oWorkbook.SaveAs(fn) oWorkbook.Application.visible=. F. oWorkbook.close() delete oWorkbook delete oExcel ]]>
					</example>
				</case>
				<case>
					<title>Visual FoxPro</title>
					<example>
						<![CDATA[oExcel.Quit() RELEASE oExcel ]]>
					</example>
				</case>
				<case>
					<title>Visual Basic</title>
					<example>
						<![CDATA[Call oWorkbook.Close(False) oExcel.Quit Set oExcel=N othing ]]>
					</example>
				</case>
			</cases>
		</section>
	</sections>
	<see>
		<ref href="/documentation/index?search=Reading an Excel Spreadsheet with OLE">Reading an Excel Spreadsheet with OLE</ref>
	</see>
</page>