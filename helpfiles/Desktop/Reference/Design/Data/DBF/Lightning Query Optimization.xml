<page>
	<topic>Lightning Query Optimization</topic>
<description>Lightning Query Optimization is a feature that Alpha Anywhere activates to increase the speed at which queries are run against DBF tables. By using information contained in the indexes you have created, Alpha Anywhere can dramatically speed up queries.
To take advantage of this time-saving feature, both the query you design and the pre-existing indexes must be compatible with Lightning Query Optimization. The following sections explain this compatibility.
</description>
<sections>
<section>
	
	
</section>	
<section>
	<title>Building Compatible Indexes
</title>
	<description>For Lightning Query Optimization to use a pre-existing index, the index must:
</description>
	<cases>
		<case>
			<description>Use at least one of the same fields used in the query.
</description>
		</case>
		<case>
			<description>If you use multiple fields with different data types, the first field used must be type character,
</description>
		</case>
		<case>
			<description>The data type of the data in the index key must match the data type of the field you are searching.
</description>
		</case>
		<case>
			<description>Use an order expression that contains either a single field, or two fields concatenated using the plus operator (+), such as in the expression Lname+Fname.
</description>
		</case>
		<case>
			<description>Not use the Unique Only option
</description>
		</case>
		<case>
			<description>Not use a filter expression
</description>
		</case>
		
	</cases>
</section>		
<section>
	<title>Building Compatible Queries
</title>
	<description>For a Query to work with Lightning Query Optimization, at least one of the condition expressions in the query must compare a field used in one of your indexes with a constant. For example, State = "MA", is suitable, provided you have a pre-existing index which sorts records using the State field.
The condition expression must use operators that are compatible with Lightning Query Optimization. These include:
</description>
	<cases>
		<case>
			<description>Equals (=)
</description>
		</case>
		<case>
			<description>Exactly equals (==)
</description>
		</case>
		<case>
			<description>Greater than or equal to (>=)
</description>
		</case>
		<case>
			<description>Greater than (>)
</description>
		</case>
		<case>
			<description><![CDATA[Less than or equal to (<=)]]></description>
		</case>
		<case>
			<description><![CDATA[Less than (<)]]>
</description>
		</case>
		<case>
			<description><![CDATA[Not equal to (<>)]]>
</description>
		</case>
		<case>
			<description>BETWEEN(..)
</description>
		</case>
		<case>
			<description>SMATCH()- see note below
</description>
		</case>
		<case>
			<description>Wildcards (* and ?) - see note below
</description>
		</case>
		<case>
			<description>.NOT.
</description>
		</case>
		<case>
			<description>.AND.
</description>
		</case>
		<case>
			<description>.OR.
</description>
		</case>
	</cases>
	<note>The SMATCH() function and the wildcards * and ? can only be used with Lightning Query Optimization if they appear at the end of the expression. For example, a search for McC* can be optimized since the wildcard operator appears at the end, while a search for *stein cannot be optimized, since the wildcard operator begins at the beginning.</note>
</section>			


<section>
	<title>Partial Compatibility
</title>
<description>In some cases, only part of your query's selection expression can be used with Lightning Query Optimization. In this case, Alpha Anywhere applies the optimization algorithm to the compatible part, and uses Alpha Anywhere's standard query algorithm to evaluate the rest.
For example, you have a table of customers for which you have created an index that sorts records by the field City. You then create a query which uses the following selection expression:
</description>	
<example><![CDATA[(CITY = "BOSTON").AND.("Commonwealth" $ ADDRESS1)]]></example>	
</section>
<section>
	<description>Because the second half of the expression uses an operator that is not compatible with Lightning Query Optimization and a field which is not used in a pre-existing index (ADDRESS1), Alpha Anywhere applies Lightning Query Optimization to only the first part of the expression.
Furthermore, in cases where the selection expression evaluates to TRUE for most of the records in the table or set, Alpha Anywhere will analyze the query and might determine that the standard query algorithm is more suitable. In this case, Lightning Query Optimization is not used.
</description>
</section>


</sections>	
	<see>
		<ref link="SMATCH Function">SMATCH()</ref>
		<ref link="BETWEEN Function">BETWEEN()</ref>
	</see>
	
</page>