<page>
	<topic>Form or Browse Table Pointer</topic>
	<description>When a form is opened it creates a new session, and it opens the table that it is based on. In the case where the form is based on a set, the Form will open all of the tables in the set.
</description>
<sections>
<section>
	
	<note>These comments apply to Browse layouts as well.</note>
	
</section>	
<section>
	<description>You can get a pointer to the table(s) opened by the Form using several techniques:
A script attached to a button on a Form, or to a Form event, could execute the command:
</description>
	<example><![CDATA['get the primary table for the Form's session
tbl = table.current()
]]></example>
</section>
<section>
	<description>or</description>
	<example><![CDATA[tbl = topparent.table_get()
'get a pointer to a child table in the Form's session
tbl = topparent.table_get("tablename")
]]></example>
</section>
<section>
	<description>To get a pointer to the table for another open Form window:
</description>
	<example><![CDATA['get a pointer to the primary table
tbl = 
.table_get() ]]></example>
</section>
<section>
	<description>To get a pointer to the table for an embedded Browse object (called 'Browse1' in this example) on a form:
</description>
	<example><![CDATA[tbl = Topparent:Browse1.table_get()
]]></example>
</section>
<section>
	<description>To get a pointer to the table for an embedded Browse object (called 'Browse1' in this example) on another open Form window:
</description>
	<example><![CDATA[tbl = 
:Browse1.table_get()]]></example>
</section>
<section>
	<description><![CDATA[Once you have a pointer to the table(s) that the Form opened, you can manipulate these tables "behind the scenes" using the methods of the Table object. For example, you can use the <TBL>.FETCH_NEXT() method to move the record pointer. However, the Form will not reflect any changes you make "behind the scenes" until you use the Form's <FORM>.RESYNCH() method to re-synchronize the Form with the data in the underlying table.
Contrast this with the Form's <FORM>.FETCH_NEXT() method, which will cause the next record to be displayed on the Form immediately (no need to use the 
.RESYNCH() method).

This example show how you can simulate the form's 
.FETCH_NEXT() method by moving the record pointer behind the scenes.
]]></description>
	<example><![CDATA['This script is attached to a button on a form
tbl = table.current()
'Move the record pointer behind the scenes to the next record
tbl.fetch_next()
'Resynchronize the form to the record pointer
topparent.resynch()
'This script does the same as the above using the fetch_next method of the form
topparent.fetch_next()
]]></example>
</section>
<section>
	
	<note>If you move the record pointer behind the scenes, but do not execute a </note>
</section>
	<section>
	<description>RESYNCH() method to re-synchronize the Form with the underlying table, and then you begin to edit a field on the Form, Alpha Anywhere will automatically move the record pointer back to the current record that is displayed on the Form before editing begins.</description>
	<note>It is important to note that if you have a script on a button or event in a Form, and that script executed the TABLE.OPEN() method to get a pointer to the same table that the Form was based on, the resulting pointer references a different instance of the table from the one used by the Form. So moving the record pointer in this instance of the table, will not change the record that is displayed by the Form, even if the Form's </note>
</section>
	<section>
	<description>RESYNCH() method is executed.</description>
	
</section>
	
</sections>	
	<see>
		<ref link="Form Functions and Methods">Form Functions and Methods</ref>
		<ref link="Browse Functions and Methods">Browse Functions and Methods</ref>
		
	</see>
	
	
</page>