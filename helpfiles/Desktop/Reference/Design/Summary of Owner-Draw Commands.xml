<page>
	<shortlink>dt ref Summary of Owner-Draw Commands</shortlink>
	<topic>Summary of Owner-Draw Commands</topic>

	<description>The following table summarizes all of the owner-draw string commands:</description>
<sections>
<section>
<cases>
	<case>
		<title>{@start,end}</title>
		<description>Selects text from start to end character positions. Start and end can include + and -  arithmetic operators, and the $ substring operator. For example, to display text from position 1 to 10 use {@1,10}. To display text up to the first comma, use {@1,$(,)}.</description>
	</case>
	<case>
		<title>$(substring)</title>
		<description>Returns the character position of substring.
</description>
	</case>
	<case>
		<title>#</title>
		<description>Returns the row number. For example, to display the row number in a list box, use {@#}</description>
	</case>
	<case>
		<title>I=imagenumber
I=:imagename
</title>
		<description>Specifies that the owner-draw string should display an image.
The image to display can either be specified by number, or by name (by specifying a colon after the equals sign). If you specify the image by number, you must include an imagelist command in the control's format string.
</description>
<cases>
	<case>
		<description>For example, to specify an image by number (the entire format string is shown here):</description>
		<example code="xb"><![CDATA[%I=bluefloppy;O={I=1}%]]></example>
	</case>
	<case>
		<description>To specify the image by name:
</description>
		<example code="xb"><![CDATA[%O={I=:bluefloppy}%
]]></example>
	</case>
	<case>
		<description>You can use the @ and $ operators to the right of the = sign so that the image name or number is derived dynamically.</description>
		
	</case>
	
</cases>

	</case>
	<case>
		<title>{J=[L|R] [T|B] [C]}</title>
		<description>Justifies the output generated by the owner-draw string. For example, {J=LC}. Justification options are:</description>
	<cases>
		<case>
			<description>"L" = left
</description>
		</case>
		<case>
			<description>"R" = right 
</description>
		</case>
		<case>
			<description>"T" = top 
</description>
		</case>
		<case>
			<description>"B" = bottom 
</description>
		</case>
		<case>
			<description>"C" = center (both horizontally and vertically) 
</description>
		</case>
		<case>
			<description>"CL" = left, vertical center 
</description>
		</case>
		<case>
			<description>"CR" = right, vertical center
</description>
		</case>
		
		
	</cases>
	
	</case>
	<case>
		<title>{F=fontname,size}</title>
		<description>Specifies the font to be used for text generated by the owner-draw string. For example, {F=times new roman,10}. The font can be derived from the input text using a   @[,] directive. For example, {F=@1} means that the font is derived from the entire text of the input value. So if the input text is 'Arial,12', the font is 'Arial,12'.   {F=@1,$(:)-1} means that the input text, up to the first colon specifies the font to use.</description>
	</case>
	<case>
		<title>{B=[,[,]])</title>
		<description>Change the background color for text that follows. Note that there are up to three comma separated colors because the button, list box, or combo box control has three states: normal, selected, and disabled.</description>
	</case>
	<case>
		<title><![CDATA[{C=<forecolor>[,<select backcolor>[,<disable backcolor>]]}]]></title>
		
		<description>Set the foreground color of text that follows.</description>
		
	</case>
	<case>
		<title>{LF}</title>
		<description>Inserts a line break in the output string.
</description>
	</case>
	<case>
		<title>{U}</title>
		<description>Underlines the next character.</description>
	</case>
	<case>
		<title>{T=}</title>
		<description>Tab to position (in inches) and start the text/image that follows at this horizontal offset. For example, {T=0.5} will print the owner-draw output that follows at an offset of 0.5 inches.</description>
	</case>
	
</cases>	
	
	
</section>	
	
	
</sections>	
	<limitations>Desktop applications only</limitations>
	<see>
		<ref link="Deriving the Font to Use Dynamically">Deriving the Font to Use Dynamically</ref>
	</see>
	
</page>