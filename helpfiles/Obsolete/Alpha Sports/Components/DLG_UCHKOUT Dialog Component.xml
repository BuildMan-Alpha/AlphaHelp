<page>
	
	<shortlink>server view dlg uchkout dialog component</shortlink>
	<topic>DLG_UCHKOUT Dialog Component</topic>
<description>Captures or displays the customer information required by the billing and shipping processes.</description>	
<discussion>The DLG_UCHKOUT dialog component is part of the checkout process. It captures or displays the customer information required by the billing and shipping processes.
The DLG_UCHKOUT dialog component contains the text controls necessary to enter a new customer table record or display an existing record. The DLG_UCHKOUT dialog illustrates the use of merge controls and headings. The component uses client side expressions to show and hide a heading used to show an error. The controls have the same names as the fields in the customer table. 
</discussion>
<sections>
	
	
<section>
	<title>Containers</title>
	<description>CHECKOUTUSER.A5W
</description>
	
	
	
</section>	
<section>
<cases>
	<case>
		<title>ShowError</title>
		<cases>
			<case>
				<title>Property</title>
				<description>Control Settings > Control Type </description>
			</case>
			<case>
				<description>Set to "Hidden".</description>
			</case>
		</cases>
		
	</case>
	
	<case>
		<title>HeadingError</title>
		<cases>
			<case>
				<title>Property</title>
				<description>Control Settings > Control Type 
</description>
			</case>
			<case>
				<description>Set to "Heading".
</description>
			</case>
			<case>
				<title>Property</title>
				<description>Control Settings > Show/Hide Expression </description>
			</case>
			<case>
				<description>Expression ShowError !="" </description>
			</case>
			<case>
				<title>Property</title>
				<description>Heading Properties</description>
			</case>
			<case>
				<description>Text set to "Your information can not be found. Please re-enter".</description>
			</case>
		</cases>
		
	</case>
	<case>
		<title>Heading1</title>
		<cases>
			<case>
				<title>Property</title>
				<description>Control Settings > Control Type </description>
			</case>
			<case>
				<description>Set to "Heading".</description>
			</case>
			<case>
				<title>Property</title>
				<description>Heading Properties</description>
			</case>
			<case>
				<description>Text set to "Personal Information".</description>
			</case>
		</cases>
		
	</case>
	<case>
		<title>customer_id</title>
		<cases>
			<case>
				<title>Property</title>
				<description>Control Settings > Control Type </description>
			</case>
			<case>
				<description>Set to "Hidden".</description>
			</case>
		</cases>
		
	</case>
	<case>
		<title>Merge Cells Begin.3</title>
		<cases>
			<case>
				<title>Property</title>
				<description>Merge Cells Properties > Row headings </description>
			</case>
			<case>
				<description>Set to "Name (First, Last) ".</description>
			</case>
		</cases>
		
	</case>
	<case>
		<title>Firstname</title>
		<cases>
			<case>
				<title>Property</title>
				<description>Control Settings > Validation rules</description>
			</case>
			<case>
				<description>General > Enable rules set to TRUE. 
General > Require value set to TRUE. 
General > Custom error message set to "First Name Required" 
</description>
			</case>
			<case>
				<title>Property</title>
				<description>Control Settings > Client side validation </description>
			</case>
			<case>
				<description>Set to TRUE.</description>
			</case>
		</cases>
		
	</case>
	<case>
		<title>Lastname</title>
		<cases>
			<case>
				<title>Property</title>
				<description>Control Settings > Validation rules</description>
			</case>
			<case>
				<description>General > Enable rules set to TRUE. 
General > Require value set to TRUE. 
General > Custom error message set to "Last Name Required" 
</description>
			</case>
			<case>
				<title>Property</title>
				<description>Control Settings > Client side validation </description>
			</case>
			<case>
				<description>Set to TRUE.</description>
			</case>
		</cases>
		
	</case>
	<case>
		<title>Merge Cells End.3</title>
		<cases>
			<case>
				<title>Property</title>
				<description>-</description>
			</case>
			<case>
				<description>-</description>
			</case>
		</cases>
		
	</case>
	<case>
		<title>Merge Cells Begin.1</title>
		<cases>
			<case>
				<title>Property</title>
				<description>Merge Cells Properties > Row headings </description>
			</case>
			<case>
				<description>Set to "City, St, Zip ". 
Bill_city, Bill_state_region, and Bill_postal_code controls in merged section
</description>
			</case>
		</cases>
		
	</case>
	<case>
		<title>Bill_state_region</title>
		<cases>
			<case>
				<title>Property</title>
				<description>Control Settings > Control Type 
</description>
			</case>
			<case>
				<description>Set to "Dropdown".</description>
			</case>
			<case>
				<title>Property</title>
				<description>DropDownBox Properties > Choices </description>
			</case>
			<case>
				<description>Define Choices > List type is set to "Dynamic".
Data Source > Data source type is set to "Variable".
Data Source > Variable name is set to "states".
</description>
			</case>
		</cases>
		
	</case>
	<case>
		<title>Merge Cells End.1</title>
		<cases>
			<case>
				<title>Property</title>
				<description>-</description>
			</case>
			<case>
				<description>-</description>
			</case>
		</cases>
		
	</case>
	<case>
		<title>Heading2</title>
		<cases>
			<case>
				<title>Property</title>
				<description>Control Settings > Control Type </description>
			</case>
			<case>
				<description>Set to "Heading".</description>
			</case>
			<case>
				<title>Property</title>
				<description>Heading Properties</description>
			</case>
			<case>
				<description>Text set to "Shipping Information".</description>
			</case>
		</cases>
		
	</case>
	<case>
		<title>Ship_same</title>
		<cases>
			<case>
				<title>Property</title>
				<description>Row Properties </description>
			</case>
			<case>
				<description>Freeform layout set to TRUE. 
Freeform template set to "{ship_same}". The template will be replaced in the Activate event code. 
</description>
			</case>
		</cases>
		
	</case>
	<case>
		<title>Ship_to_Address_1</title>
		<cases>
			<case>
				<title>Property</title>
				<description>Control Settings > Validation rules</description>
			</case>
			<case>
				<description>General > Enable rules set to TRUE.
General > Require value set to TRUE.
</description>
			</case>
			<case>
				<title>Property</title>
				<description>Control Settings > Client side validation </description>
			</case>
			<case>
				<description>Set to TRUE.</description>
			</case>
		</cases>
		
	</case>
	<case>
		<title>Merge Cells Begin.2</title>
		<cases>
			<case>
				<title>Property</title>
				<description>Merge Cells Properties > Row headings </description>
			</case>
			<case>
				<description>Set to "City, St, Zip ". </description>
			</case>
		</cases>
		
	</case>
	<case>
		<title>Ship_City</title>
		<cases>
			<case>
				<title>Property</title>
				<description>Control Settings > Validation rules</description>
			</case>
			<case>
				<description>General > Enable rules set to TRUE.
General > Require value set to TRUE.
</description>
			</case>
			<case>
				<title>Property</title>
				<description>Control Settings > Client side validation </description>
			</case>
			<case>
				<description>Set to TRUE.</description>
			</case>
		</cases>
		
	</case>
	<case>
		<title>Ship_state_region</title>
		<cases>
			<case>
				<title>Property</title>
				<description>Control Settings > Control Type </description>
			</case>
			<case>
				<description>Set to "Dropdown".</description>
			</case>
				<case>
				<title>Property</title>
				<description>Control Settings > Validation rules</description>
			</case>
			<case>
				<description>General > Enable rules set to TRUE.
General > Require value set to TRUE.
</description>
			</case>
				<case>
				<title>Property</title>
				<description>DropDownBox Properties > Choices </description>
			</case>
			<case>
				<description>Define Choices > List type is set to "Dynamic".
Data Source > Data source type is set to "Variable".
Data Source > Variable name is set to "states".
</description>
			</case>
		</cases>
		
	</case>
	<case>
		<title>Ship_postal_code</title>
		<cases>
			<case>
				<title>Property</title>
				<description>Control Settings > Validation rules</description>
			</case>
			<case>
				<description>General > Enable rules set to TRUE.
General > Require value set to TRUE.
</description>
			</case>
			<case>
				<title>Property</title>
				<description>Control Settings > Client side validation</description>
			</case>
			<case>
				<description>Set to TRUE.</description>
			</case>
		</cases>
		
	</case>
	<case>
		<title>Merge Cells End.2</title>
		<cases>
			<case>
				<title>Property</title>
				<description></description>
			</case>
			<case>
				<description></description>
			</case>
		</cases>
		
	</case>
	<case>
		<title>Heading3</title>
		<cases>
			<case>
				<title>Property</title>
				<description>Control Settings > Control Type </description>
			</case>
			<case>
				<description>Set to "Heading".</description>
			</case>
			<case>
				<title>Property</title>
				<description>Heading Properties</description>
			</case>
			<case>
				<description>Text set to "Contact Information".</description>
			</case>
		</cases>
		
	</case>
	<case>
		<title>Email</title>
		<cases>
			<case>
				<title>Property</title>
				<description>Control Settings > Validation rules</description>
			</case>
			<case>
				<description>General > Enable rules set to TRUE.
General > Require value set to TRUE.
Text Format > Regular Expression set to "\bA-Z0-9a-z._%-+@A-Z0-9a-z._%-+\.A-Za-z{2,4}\b".
</description>
			</case>
		</cases>
	</case>
</cases>	
		
</section>	
<section>
	<title>Notable Component Property Settings</title>
<cases>
	<case>
		<title>Dialog Footer Layout > Freeform layout</title>
		<description>Changed to TRUE.</description>
	</case>
	<case>
		<title>Dialog Footer Layout > Dialog footer template</title>
		<description>Changed to "{SubmitButton}".</description>
	</case>
	
	
</cases>	
	
</section>

<section>
	<title>Event Code
</title>
<description>The Validate event code checks if the entered email already exists in the customer file. If one is found, it compares the customer_id from that record with the customer_id for the current user. The values should match if the record found is for the current customer. 
</description>	
<example><![CDATA[chkcust = table.external_record_content_get("PathAlias.ADB_Path\customer.dbf","customer_id","email","email=\""+alltrim(CurrentForm.Controls.Email.value)+"\"")
if chkcust <> ""
    if chkcust <> alltrim(CurrentForm.Controls.customer_id) ' email already exists for another customer
        CurrentForm.Has_Error = .T.
        CurrentForm.Error_Message = "A Registered User with this email already exists. Please correct or Log In"
    end if
end if
]]></example>	
</section>

<section>
<description>The AfterValidate event code starts by checking the session.dataclear variable. If it is TRUE, there is no data to validate and the script exits.
</description>	
<example><![CDATA[if eval_valid("session.dataclear")
    if session.dataclear = .T. ' skip validate if clearing data
        end
    end if
end if 
]]></example>	
</section>

<section>
<description>Next, the script sets session.protectedchkoutprogress to 2, indicating that this page is complete.
</description>	
<example><![CDATA[session.protectedchkoutprogress = 2
]]></example>	
</section>

<section>
<description>The following statements copy the values in the various controls on the dialog component into the session.protectedchkout dot variable.
</description>	
<example><![CDATA[dim session.protectedchkout as p
session.protectedchkout.Firstname = alltrim(CurrentForm.Controls.Firstname)
session.protectedchkout.Lastname = alltrim(CurrentForm.Controls.Lastname)
session.protectedchkout.Company = alltrim(CurrentForm.Controls.company)
session.protectedchkout.Email = alltrim(CurrentForm.Controls.Email)
session.protectedchkout.Phone = transform(remspecial(CurrentForm.Controls.phone),"@R (999) 999-9999") ' convert to standard mask template
session.protectedchkout.Bill_address_1 = alltrim(CurrentForm.Controls.Bill_address_1)
session.protectedchkout.Bill_address_2 = alltrim(CurrentForm.Controls.Bill_address_2)
session.protectedchkout.Bill_city = alltrim(CurrentForm.Controls.Bill_city)
session.protectedchkout.Bill_state_region = alltrim(CurrentForm.Controls.Bill_state_region)
session.protectedchkout.Bill_postal_code = alltrim(CurrentForm.Controls.Bill_postal_code)
session.protectedchkout.Ship_to_name = alltrim(CurrentForm.Controls.Ship_to_Name)
session.protectedchkout.Ship_address_1 = alltrim(CurrentForm.Controls.Ship_address_1)
session.protectedchkout.Ship_address_2 = alltrim(CurrentForm.Controls.Ship_address_2)
session.protectedchkout.Ship_city = alltrim(CurrentForm.Controls.Ship_City)
session.protectedchkout.Ship_same = alltrim(CurrentForm.Controls.Ship_same)
session.protectedchkout.Ship_state_region = alltrim(CurrentForm.Controls.Ship_state_region)
session.protectedchkout.Ship_postal_code = alltrim(CurrentForm.Controls.Ship_postal_code)
session.protectedchkout.Customer_id = alltrim(CurrentForm.Controls.customer_id)
]]></example>	
</section>	

<section>
<description>If the customerid control has a non-null value, the script uses this value to retrieve the corresponding record from the customer table.
</description>	
<example><![CDATA[if CurrentForm.Controls.customerid <> "" ' values came from a table record
    query.filter = "customer_id = " + quote(CurrentForm.Controls.customerid) ' find the record
    query.order = ""
    tbl = table.open("PathAlias.ADB_Path\customer.dbf")
    qdx = tbl.query_create()
]]></example>	
</section>

<section>
<description>If the query finds a single record, then the script writes the values in the dialog's controls into the fields of the customer record.
</description>	
<example><![CDATA[if qdx.records_get()= 1 then 'record found - update
        tbl.change_begin()
        tbl.Firstname = alltrim(CurrentForm.Controls.Firstname)
        tbl.Lastname = alltrim(CurrentForm.Controls.Lastname)
        tbl.Company = alltrim(CurrentForm.Controls.company)
        tbl.Email = alltrim(CurrentForm.Controls.Email)
        tbl.Phone = transform(remspecial(CurrentForm.Controls.phone),"@R (999) 999-9999") ' convert to standard mask template
        tbl.Bill_address_1 = alltrim(CurrentForm.Controls.bill_address_1)
        tbl.Bill_address_2 = alltrim(CurrentForm.Controls.bill-address_2)
        tbl.Bill_city = alltrim(CurrentForm.Controls.bill_city)
        tbl.Bill_state_region = alltrim(CurrentForm.Controls.bill_state_region)
        tbl.Bill_postal_code = alltrim(CurrentForm.Controls.Bill_postal_code)
        tbl.Ship_to_name = alltrim(CurrentForm.Controls.Ship_to_Name)
        tbl.Ship_address_1 = alltrim(CurrentForm.Controls.Ship_to_Address_1)
        tbl.Ship_address_2 = alltrim(CurrentForm.Controls.Ship_to_Address_2)
        tbl.Ship_city = alltrim(CurrentForm.Controls.Ship_City)
        tbl.Ship_state_region = alltrim(CurrentForm.Controls.Ship_state_region)
        tbl.Ship_postal_code = alltrim(CurrentForm.Controls.Ship_to_Zip)
        if alltrim(CurrentForm.Controls.ship_same) = "True"
            tbl.Ship_same = .T.
        else
            tbl.Ship_same = .F.
        end if
        tbl.change_end()
    end if
    tbl.close()
end if]]></example>	
</section>

<section>
<description>Finally the script sets CurrentForm.RedirectTarget to next desired page. 
</description>	
<example><![CDATA['NOTE: to use PayPal pages, uncomment out first line and comment out second line
'CurrentForm.RedirectTarget = "checkoutcompPayPal.a5w"
CurrentForm.RedirectTarget = "checkoutcomp.a5w"]]></example>	
</section>

<section>
<description>The Activate event code first sets the ShowError value to blank to hide the heading. It then populates a list for the state dropdown controls, and gets a list of editable controls on the dialog. Some controls are not editable and are removed from the list of controls. 
</description>	
<example><![CDATA[CurrentForm.Controls.ShowError.value = ""
dim states as c ' populate state list for dropdowns
states = ""+crlf()+cstates("A"+crlf()) ' add blank first entry
dim Control_list as c
Control_list = properties_enum(CurrentForm.Controls)
dim remove as c ' controls to ignore
remove = <<%text%
ShowError
HeadingError
Heading1
Heading2
Heading3
%text%
Control_list = filter_string_multi(Control_list,remove,crlf(),.T.)
Control_list = remove_blank_lines(control_list)
]]></example>	
</section>

<section>
<description>The event code next tests to see if the session.dataclear variable exists and is TRUE. If so, it loops through the editable control list to erase the values of the dialog's controls and the session.protectedchkout variable, then exits. Finally, it sets session.dataclear to FALSE.
</description>	
<example><![CDATA[if eval_valid("session.dataclear") = .T. then
    if session.dataclear = .t. then
        for each foo in Control_list
            eval("CurrentForm.Controls."+ foo +".value") = ""
            eval("session.protectedchkout."+foo) = ""
        next
        session.dataclear = .F. 'clear once unless reset on page
        end
    end if
end if 
]]></example>	
</section>

<section>
<description>The next step is to test if the session.enteruserdata variable (a customer ID) exists and is NULL. If this is the case, the script copies the data from session.protectedchkout into the dialog's controls. This variable contains data saved info from a previous visit to this page. 
</description>	
<example><![CDATA[if eval_valid("session.enteruserdata") then
    if session.enteruserdata = "" then
        if eval_valid("session.protectedchkout")
            for each foo in Control_list
                  if eval_valid("session.protectedchkout."+foo)
                        eval("CurrentForm.Controls."+foo+".value") = eval("session.protectedchkout."+foo)
                  end if 
            next
        end if
]]></example>	
</section>

<section>
<description>If the session.enteruserdata variable contains data, the script uses it to find the appropriate customer record. If it finds a record, the script copies the record data into the dialog's controls. If a single record can not be found for the current customer_id, the ShowError control will have a value and the error heading will display. 
</description>	
<example><![CDATA[    else
        query.filter = "alltrim(customer_id) = " + quote(session.enteruserdata)
        query.order = ""
        tbl = table.open("PathAlias.ADB_Path\customer.dbf")
        qdx = tbl.query_create()
        if qdx.records_get()= 1 then 'record found
            CurrentForm.Controls.customer_id = alltrim(tbl.Customer_id)
            CurrentForm.Controls.Firstname = alltrim(tbl.Firstname)
            CurrentForm.Controls.Lastname = alltrim(tbl.Lastname)
            CurrentForm.Controls.company = alltrim(tbl.Company)
            CurrentForm.Controls.Email = alltrim(tbl.Email)
            CurrentForm.Controls.phone = alltrim(tbl.Phone)
            CurrentForm.Controls.Bill_address_1 = alltrim(tbl.Bill_address_1)
            CurrentForm.Controls.Bill_address_2 = alltrim(tbl.Bill_address_2)
            CurrentForm.Controls.Bill_city = alltrim(tbl.Bill_city)
            CurrentForm.Controls.Bill_state_region = alltrim(tbl.Bill_state_region)
            CurrentForm.Controls.Bill_postal_code = alltrim(tbl.Bill_postal_code)
            if tbl.Ship_same = .T.
                CurrentForm.Controls.Ship_to_Name = alltrim(tbl.Firstname) + " "+alltrim(tbl.Lastname)
                CurrentForm.Controls.Ship_to_Address = alltrim(tbl.Bill_address_1)
                CurrentForm.Controls.saddr2 = alltrim(tbl.Bill_address_2)
                CurrentForm.Controls.Ship_to_City = alltrim(tbl.Bill_city)
                CurrentForm.Controls.Ship_to_State = alltrim(tbl.Bill_state_region)
                CurrentForm.Controls.Ship_to_Zip = alltrim(tbl.Bill_postal_code)
                CurrentForm.Controls.Ship_same = "True" 
            else 
                CurrentForm.Controls.Ship_to_Name = alltrim(tbl.Ship_to_name)
                CurrentForm.Controls.Ship_to_Address = alltrim(tbl.Ship_address_1)
                CurrentForm.Controls.saddr2 = alltrim(tbl.Ship_address_2)
                CurrentForm.Controls.Ship_to_City = alltrim(tbl.Ship_city)
                CurrentForm.Controls.Ship_to_State = alltrim(tbl.Ship_state_region)
                CurrentForm.Controls.Ship_to_Zip = alltrim(tbl.Ship_postal_code)
                CurrentForm.Controls.Ship_same = "False" 
            end if
        else
            CurrentForm.Controls.ShowError = "yes"
        end if
        tbl.close()
    end if
]]></example>	
</section>

<section>
	<description>Next, the script sets session.enteruserdata to NULL.
</description>
	<example><![CDATA[session.enteruserdata = ""]]></example>
</section>
<section>
	<description>If session.enteruserdata does not exist, but session.protectedchkout does exist, the script copies the contents of session.protectedchkout into the dialog's controls.
</description>
	<example><![CDATA[elseif eval_valid("session.protectedchkout")
    for each foo in Control_list
        if eval_valid("session.protectedchkout."+foo)
            eval("CurrentForm.Controls."+foo + ".value") = eval("session.protectedchkout."+foo)
        end if
    next
end if 
]]></example>
</section>
<section>
	<description>Finally, the freeform template for ship_same is modified based on the current value in the ship_same control. The control includes on onclick event that calls a JavaScript function on the CHECKOUTUSER.A5W page. 
</description>
	<example><![CDATA[if CurrentForm.Controls.ship_same = "True"
    CurrentForm.Controls.ship_same.column.FreeFormTemplate = <<%html%

%html%
else
    CurrentForm.Controls.ship_same.column.FreeFormTemplate = <<%html%

%html%
end if 
]]></example>
</section>

</sections>	
	
<see>
	<ref>Web Publishing Components</ref>
</see>	
	
</page>